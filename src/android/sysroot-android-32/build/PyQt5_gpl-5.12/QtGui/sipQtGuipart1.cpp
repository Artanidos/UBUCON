/*
 * Module code.
 *
 * Generated by SIP 4.19.15
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 33 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qglyphrun.sip"
#include <qglyphrun.h>
#line 39 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 42 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qstatictext.sip"
#include <qstatictext.h>
#line 45 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 48 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 51 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 54 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 57 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 60 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 63 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qimage.sip"
#include <qimage.h>
#line 66 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 69 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 95 "sip/QtCore/qline.sip"
#include <qline.h>
#line 72 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qline.sip"
#include <qline.h>
#line 75 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 52 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 78 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 81 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 84 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 87 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 123 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 90 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 93 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 96 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpicture.sip"
#include <qpicture.h>
#line 99 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 315 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 102 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 105 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 108 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 114 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 117 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 120 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 123 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 126 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpen.sip"
#include <qpen.h>
#line 129 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 132 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 135 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 138 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 141 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
// Return an array on the heap of class instances extracted from a set of
// Python arguments.
template<class TYPE>
static TYPE *qtgui_inst_array(const TYPE *first, PyObject *t, sipTypeDef *td)
{
    TYPE *arr = new TYPE[1 + PyTuple_Size(t)];

    arr[0] = *first;

    for (Py_ssize_t i = 0; i < PyTuple_Size(t); ++i)
    {
        int iserr = 0, state;
        TYPE *itm;

        itm  = reinterpret_cast<TYPE *>(sipForceConvertToType(PyTuple_GetItem(t, i), td, 0, SIP_NOT_NONE, &state, &iserr));

        if (iserr)
        {
            sipReleaseType(itm, td, state);

            PyErr_Format(PyExc_TypeError, "each argument must be an instance of %s", sipPyTypeName(sipTypeAsPyTypeObject(td)));

            delete[] arr;
            return 0;
        }

        arr[1 + i] = *itm;

        sipReleaseType(itm, td, state);
    }

    return arr;
}
#line 176 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QPainter___enter__, "__enter__(self) -> object");

extern "C" {static PyObject *meth_QPainter___enter__(PyObject *, PyObject *);}
static PyObject *meth_QPainter___enter__(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 82 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
        // Check a device was passed.
        if (sipCpp->isActive())
        {
            // Just return a reference to self.
            sipRes = sipSelf;
            Py_INCREF(sipRes);
        }
        else
        {
            PyErr_SetString(PyExc_ValueError, "QPainter must be created with a device");
            sipRes = 0;
        }
#line 207 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName___enter__, doc_QPainter___enter__);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter___exit__, "__exit__(self, object, object, object)");

extern "C" {static PyObject *meth_QPainter___exit__(PyObject *, PyObject *);}
static PyObject *meth_QPainter___exit__(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;
        PyObject * a1;
        PyObject * a2;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0P0P0", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2))
        {
#line 98 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
        sipCpp->end();
#line 238 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName___exit__, doc_QPainter___exit__);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_device, "device(self) -> QPaintDevice");

extern "C" {static PyObject *meth_QPainter_device(PyObject *, PyObject *);}
static PyObject *meth_QPainter_device(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
             ::QPaintDevice*sipRes;

            sipRes = sipCpp->device();

            return sipConvertFromType(sipRes,sipType_QPaintDevice,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_device, doc_QPainter_device);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_begin, "begin(self, QPaintDevice) -> bool");

extern "C" {static PyObject *meth_QPainter_begin(PyObject *, PyObject *);}
static PyObject *meth_QPainter_begin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPaintDevice* a0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPaintDevice, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->begin(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_begin, doc_QPainter_begin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_end, "end(self) -> bool");

extern "C" {static PyObject *meth_QPainter_end(PyObject *, PyObject *);}
static PyObject *meth_QPainter_end(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->end();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_end, doc_QPainter_end);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_isActive, "isActive(self) -> bool");

extern "C" {static PyObject *meth_QPainter_isActive(PyObject *, PyObject *);}
static PyObject *meth_QPainter_isActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isActive();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_isActive, doc_QPainter_isActive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_setCompositionMode, "setCompositionMode(self, QPainter.CompositionMode)");

extern "C" {static PyObject *meth_QPainter_setCompositionMode(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setCompositionMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPainter::CompositionMode a0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPainter_CompositionMode, &a0))
        {
            sipCpp->setCompositionMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setCompositionMode, doc_QPainter_setCompositionMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_compositionMode, "compositionMode(self) -> QPainter.CompositionMode");

extern "C" {static PyObject *meth_QPainter_compositionMode(PyObject *, PyObject *);}
static PyObject *meth_QPainter_compositionMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
             ::QPainter::CompositionMode sipRes;

            sipRes = sipCpp->compositionMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QPainter_CompositionMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_compositionMode, doc_QPainter_compositionMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_font, "font(self) -> QFont");

extern "C" {static PyObject *meth_QPainter_font(PyObject *, PyObject *);}
static PyObject *meth_QPainter_font(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
             ::QFont*sipRes;

            sipRes = new  ::QFont(sipCpp->font());

            return sipConvertFromNewType(sipRes,sipType_QFont,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_font, doc_QPainter_font);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_setFont, "setFont(self, QFont)");

extern "C" {static PyObject *meth_QPainter_setFont(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont* a0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QFont, &a0))
        {
            sipCpp->setFont(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setFont, doc_QPainter_setFont);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_fontMetrics, "fontMetrics(self) -> QFontMetrics");

extern "C" {static PyObject *meth_QPainter_fontMetrics(PyObject *, PyObject *);}
static PyObject *meth_QPainter_fontMetrics(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
             ::QFontMetrics*sipRes;

            sipRes = new  ::QFontMetrics(sipCpp->fontMetrics());

            return sipConvertFromNewType(sipRes,sipType_QFontMetrics,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_fontMetrics, doc_QPainter_fontMetrics);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_fontInfo, "fontInfo(self) -> QFontInfo");

extern "C" {static PyObject *meth_QPainter_fontInfo(PyObject *, PyObject *);}
static PyObject *meth_QPainter_fontInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
             ::QFontInfo*sipRes;

            sipRes = new  ::QFontInfo(sipCpp->fontInfo());

            return sipConvertFromNewType(sipRes,sipType_QFontInfo,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_fontInfo, doc_QPainter_fontInfo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_setPen, "setPen(self, Union[QColor, Qt.GlobalColor, QGradient])\n"
"setPen(self, Union[QPen, QColor, Qt.GlobalColor, QGradient])\n"
"setPen(self, Qt.PenStyle)");

extern "C" {static PyObject *meth_QPainter_setPen(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setPen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor* a0;
        int a0State = 0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->setPen(*a0);
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPen* a0;
        int a0State = 0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPen, &a0, &a0State))
        {
            sipCpp->setPen(*a0);
            sipReleaseType(const_cast< ::QPen *>(a0),sipType_QPen,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::Qt::PenStyle a0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPainter, &sipCpp, sipType_Qt_PenStyle, &a0))
        {
            sipCpp->setPen(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setPen, doc_QPainter_setPen);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_pen, "pen(self) -> QPen");

extern "C" {static PyObject *meth_QPainter_pen(PyObject *, PyObject *);}
static PyObject *meth_QPainter_pen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
             ::QPen*sipRes;

            sipRes = new  ::QPen(sipCpp->pen());

            return sipConvertFromNewType(sipRes,sipType_QPen,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_pen, doc_QPainter_pen);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_setBrush, "setBrush(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient])\n"
"setBrush(self, Qt.BrushStyle)");

extern "C" {static PyObject *meth_QPainter_setBrush(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setBrush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBrush* a0;
        int a0State = 0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QBrush, &a0, &a0State))
        {
            sipCpp->setBrush(*a0);
            sipReleaseType(const_cast< ::QBrush *>(a0),sipType_QBrush,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::Qt::BrushStyle a0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPainter, &sipCpp, sipType_Qt_BrushStyle, &a0))
        {
            sipCpp->setBrush(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setBrush, doc_QPainter_setBrush);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_brush, "brush(self) -> QBrush");

extern "C" {static PyObject *meth_QPainter_brush(PyObject *, PyObject *);}
static PyObject *meth_QPainter_brush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->brush());

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_brush, doc_QPainter_brush);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_setBackgroundMode, "setBackgroundMode(self, Qt.BGMode)");

extern "C" {static PyObject *meth_QPainter_setBackgroundMode(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setBackgroundMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::BGMode a0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPainter, &sipCpp, sipType_Qt_BGMode, &a0))
        {
            sipCpp->setBackgroundMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setBackgroundMode, doc_QPainter_setBackgroundMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_backgroundMode, "backgroundMode(self) -> Qt.BGMode");

extern "C" {static PyObject *meth_QPainter_backgroundMode(PyObject *, PyObject *);}
static PyObject *meth_QPainter_backgroundMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
             ::Qt::BGMode sipRes;

            sipRes = sipCpp->backgroundMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_BGMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_backgroundMode, doc_QPainter_backgroundMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_brushOrigin, "brushOrigin(self) -> QPoint");

extern "C" {static PyObject *meth_QPainter_brushOrigin(PyObject *, PyObject *);}
static PyObject *meth_QPainter_brushOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->brushOrigin());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_brushOrigin, doc_QPainter_brushOrigin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_setBrushOrigin, "setBrushOrigin(self, Union[QPointF, QPoint])\n"
"setBrushOrigin(self, int, int)\n"
"setBrushOrigin(self, QPoint)");

extern "C" {static PyObject *meth_QPainter_setBrushOrigin(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setBrushOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->setBrushOrigin(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1))
        {
            sipCpp->setBrushOrigin(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPoint* a0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->setBrushOrigin(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setBrushOrigin, doc_QPainter_setBrushOrigin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_setBackground, "setBackground(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QPainter_setBackground(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBrush* a0;
        int a0State = 0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QBrush, &a0, &a0State))
        {
            sipCpp->setBackground(*a0);
            sipReleaseType(const_cast< ::QBrush *>(a0),sipType_QBrush,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setBackground, doc_QPainter_setBackground);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_background, "background(self) -> QBrush");

extern "C" {static PyObject *meth_QPainter_background(PyObject *, PyObject *);}
static PyObject *meth_QPainter_background(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->background());

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_background, doc_QPainter_background);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_clipRegion, "clipRegion(self) -> QRegion");

extern "C" {static PyObject *meth_QPainter_clipRegion(PyObject *, PyObject *);}
static PyObject *meth_QPainter_clipRegion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
             ::QRegion*sipRes;

            sipRes = new  ::QRegion(sipCpp->clipRegion());

            return sipConvertFromNewType(sipRes,sipType_QRegion,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_clipRegion, doc_QPainter_clipRegion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_clipPath, "clipPath(self) -> QPainterPath");

extern "C" {static PyObject *meth_QPainter_clipPath(PyObject *, PyObject *);}
static PyObject *meth_QPainter_clipPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
             ::QPainterPath*sipRes;

            sipRes = new  ::QPainterPath(sipCpp->clipPath());

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_clipPath, doc_QPainter_clipPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_setClipRect, "setClipRect(self, QRectF, operation: Qt.ClipOperation = Qt.ReplaceClip)\n"
"setClipRect(self, int, int, int, int, operation: Qt.ClipOperation = Qt.ReplaceClip)\n"
"setClipRect(self, QRect, operation: Qt.ClipOperation = Qt.ReplaceClip)");

extern "C" {static PyObject *meth_QPainter_setClipRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_setClipRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
         ::Qt::ClipOperation a1 = Qt::ReplaceClip;
         ::QPainter *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_operation,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|E", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, sipType_Qt_ClipOperation, &a1))
        {
            sipCpp->setClipRect(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
         ::Qt::ClipOperation a4 = Qt::ReplaceClip;
         ::QPainter *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_operation,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiii|E", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, sipType_Qt_ClipOperation, &a4))
        {
            sipCpp->setClipRect(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QRect* a0;
         ::Qt::ClipOperation a1 = Qt::ReplaceClip;
         ::QPainter *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_operation,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|E", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, sipType_Qt_ClipOperation, &a1))
        {
            sipCpp->setClipRect(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setClipRect, doc_QPainter_setClipRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_setClipRegion, "setClipRegion(self, QRegion, operation: Qt.ClipOperation = Qt.ReplaceClip)");

extern "C" {static PyObject *meth_QPainter_setClipRegion(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_setClipRegion(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegion* a0;
         ::Qt::ClipOperation a1 = Qt::ReplaceClip;
         ::QPainter *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_operation,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|E", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRegion, &a0, sipType_Qt_ClipOperation, &a1))
        {
            sipCpp->setClipRegion(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setClipRegion, doc_QPainter_setClipRegion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_setClipPath, "setClipPath(self, QPainterPath, operation: Qt.ClipOperation = Qt.ReplaceClip)");

extern "C" {static PyObject *meth_QPainter_setClipPath(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_setClipPath(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPath* a0;
         ::Qt::ClipOperation a1 = Qt::ReplaceClip;
         ::QPainter *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_operation,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|E", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPainterPath, &a0, sipType_Qt_ClipOperation, &a1))
        {
            sipCpp->setClipPath(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setClipPath, doc_QPainter_setClipPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_setClipping, "setClipping(self, bool)");

extern "C" {static PyObject *meth_QPainter_setClipping(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setClipping(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPainter, &sipCpp, &a0))
        {
            sipCpp->setClipping(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setClipping, doc_QPainter_setClipping);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_hasClipping, "hasClipping(self) -> bool");

extern "C" {static PyObject *meth_QPainter_hasClipping(PyObject *, PyObject *);}
static PyObject *meth_QPainter_hasClipping(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasClipping();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_hasClipping, doc_QPainter_hasClipping);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_save, "save(self)");

extern "C" {static PyObject *meth_QPainter_save(PyObject *, PyObject *);}
static PyObject *meth_QPainter_save(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            sipCpp->save();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_save, doc_QPainter_save);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_restore, "restore(self)");

extern "C" {static PyObject *meth_QPainter_restore(PyObject *, PyObject *);}
static PyObject *meth_QPainter_restore(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            sipCpp->restore();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_restore, doc_QPainter_restore);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_scale, "scale(self, float, float)");

extern "C" {static PyObject *meth_QPainter_scale(PyObject *, PyObject *);}
static PyObject *meth_QPainter_scale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1))
        {
            sipCpp->scale(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_scale, doc_QPainter_scale);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_shear, "shear(self, float, float)");

extern "C" {static PyObject *meth_QPainter_shear(PyObject *, PyObject *);}
static PyObject *meth_QPainter_shear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1))
        {
            sipCpp->shear(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_shear, doc_QPainter_shear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_rotate, "rotate(self, float)");

extern "C" {static PyObject *meth_QPainter_rotate(PyObject *, PyObject *);}
static PyObject *meth_QPainter_rotate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPainter, &sipCpp, &a0))
        {
            sipCpp->rotate(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_rotate, doc_QPainter_rotate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_translate, "translate(self, Union[QPointF, QPoint])\n"
"translate(self, float, float)\n"
"translate(self, QPoint)");

extern "C" {static PyObject *meth_QPainter_translate(PyObject *, PyObject *);}
static PyObject *meth_QPainter_translate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->translate(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1))
        {
            sipCpp->translate(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPoint* a0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->translate(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_translate, doc_QPainter_translate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_window, "window(self) -> QRect");

extern "C" {static PyObject *meth_QPainter_window(PyObject *, PyObject *);}
static PyObject *meth_QPainter_window(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->window());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_window, doc_QPainter_window);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_setWindow, "setWindow(self, QRect)\n"
"setWindow(self, int, int, int, int)");

extern "C" {static PyObject *meth_QPainter_setWindow(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect* a0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->setWindow(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setWindow(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setWindow, doc_QPainter_setWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_viewport, "viewport(self) -> QRect");

extern "C" {static PyObject *meth_QPainter_viewport(PyObject *, PyObject *);}
static PyObject *meth_QPainter_viewport(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->viewport());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_viewport, doc_QPainter_viewport);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_setViewport, "setViewport(self, QRect)\n"
"setViewport(self, int, int, int, int)");

extern "C" {static PyObject *meth_QPainter_setViewport(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setViewport(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect* a0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->setViewport(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setViewport(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setViewport, doc_QPainter_setViewport);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_setViewTransformEnabled, "setViewTransformEnabled(self, bool)");

extern "C" {static PyObject *meth_QPainter_setViewTransformEnabled(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setViewTransformEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPainter, &sipCpp, &a0))
        {
            sipCpp->setViewTransformEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setViewTransformEnabled, doc_QPainter_setViewTransformEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_viewTransformEnabled, "viewTransformEnabled(self) -> bool");

extern "C" {static PyObject *meth_QPainter_viewTransformEnabled(PyObject *, PyObject *);}
static PyObject *meth_QPainter_viewTransformEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->viewTransformEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_viewTransformEnabled, doc_QPainter_viewTransformEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_strokePath, "strokePath(self, QPainterPath, Union[QPen, QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QPainter_strokePath(PyObject *, PyObject *);}
static PyObject *meth_QPainter_strokePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPath* a0;
        const  ::QPen* a1;
        int a1State = 0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPainterPath, &a0, sipType_QPen, &a1, &a1State))
        {
            sipCpp->strokePath(*a0,*a1);
            sipReleaseType(const_cast< ::QPen *>(a1),sipType_QPen,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_strokePath, doc_QPainter_strokePath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_fillPath, "fillPath(self, QPainterPath, Union[QBrush, QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QPainter_fillPath(PyObject *, PyObject *);}
static PyObject *meth_QPainter_fillPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPath* a0;
        const  ::QBrush* a1;
        int a1State = 0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPainterPath, &a0, sipType_QBrush, &a1, &a1State))
        {
            sipCpp->fillPath(*a0,*a1);
            sipReleaseType(const_cast< ::QBrush *>(a1),sipType_QBrush,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_fillPath, doc_QPainter_fillPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_drawPath, "drawPath(self, QPainterPath)");

extern "C" {static PyObject *meth_QPainter_drawPath(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPath* a0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPainterPath, &a0))
        {
            sipCpp->drawPath(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawPath, doc_QPainter_drawPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_drawPoints, "drawPoints(self, Union[QPointF, QPoint], *)\n"
"drawPoints(self, QPolygonF)\n"
"drawPoints(self, QPoint, *)\n"
"drawPoints(self, QPolygon)");

extern "C" {static PyObject *meth_QPainter_drawPoints(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawPoints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        PyObject * a1;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ0W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a0State, &a1))
        {
            int sipIsErr = 0;

#line 191 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
        QPointF *points = qtgui_inst_array<QPointF>(a0, a1, sipType_QPointF);
        
        if (points)
        {
            sipCpp->drawPoints(points, 1 + PyTuple_Size(a1));
            delete[] points;
        }
        else
            sipIsErr = 1;
#line 1690 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            Py_DECREF(a1);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPolygonF* a0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPolygonF, &a0))
        {
            sipCpp->drawPoints(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPoint* a0;
        PyObject * a1;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, &a1))
        {
            int sipIsErr = 0;

#line 205 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
        QPoint *points = qtgui_inst_array<QPoint>(a0, a1, sipType_QPoint);
        
        if (points)
        {
            sipCpp->drawPoints(points, 1 + PyTuple_Size(a1));
            delete[] points;
        }
        else
            sipIsErr = 1;
#line 1735 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            Py_DECREF(a1);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPolygon* a0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPolygon, &a0))
        {
            sipCpp->drawPoints(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawPoints, doc_QPainter_drawPoints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_drawLines, "drawLines(self, QLineF, *)\n"
"drawLines(self, Iterable[QLineF])\n"
"drawLines(self, Union[QPointF, QPoint], *)\n"
"drawLines(self, Iterable[Union[QPointF, QPoint]])\n"
"drawLines(self, QLine, *)\n"
"drawLines(self, Iterable[QLine])\n"
"drawLines(self, QPoint, *)\n"
"drawLines(self, Iterable[QPoint])");

extern "C" {static PyObject *meth_QPainter_drawLines(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawLines(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineF* a0;
        PyObject * a1;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QLineF, &a0, &a1))
        {
            int sipIsErr = 0;

#line 219 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
        QLineF *lines = qtgui_inst_array<QLineF>(a0, a1, sipType_QLineF);
        
        if (lines)
        {
            sipCpp->drawLines(lines, 1 + PyTuple_Size(a1));
            delete[] lines;
        }
        else
            sipIsErr = 1;
#line 1808 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            Py_DECREF(a1);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QVector< ::QLineF>* a0;
        int a0State = 0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QVector_0100QLineF,&a0, &a0State))
        {
            sipCpp->drawLines(*a0);
            sipReleaseType(const_cast<QVector< ::QLineF> *>(a0),sipType_QVector_0100QLineF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;
        PyObject * a1;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ0W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a0State, &a1))
        {
            int sipIsErr = 0;

#line 233 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
        QPointF *pairs = qtgui_inst_array<QPointF>(a0, a1, sipType_QPointF);
        
        if (pairs)
        {
            sipCpp->drawLines(pairs, (1 + PyTuple_Size(a1)) / 2);
            delete[] pairs;
        }
        else
            sipIsErr = 1;
#line 1855 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            Py_DECREF(a1);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QVector< ::QPointF>* a0;
        int a0State = 0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QVector_0100QPointF,&a0, &a0State))
        {
            sipCpp->drawLines(*a0);
            sipReleaseType(const_cast<QVector< ::QPointF> *>(a0),sipType_QVector_0100QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QLine* a0;
        PyObject * a1;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QLine, &a0, &a1))
        {
            int sipIsErr = 0;

#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
        QLine *lines = qtgui_inst_array<QLine>(a0, a1, sipType_QLine);
        
        if (lines)
        {
            sipCpp->drawLines(lines, 1 + PyTuple_Size(a1));
            delete[] lines;
        }
        else
            sipIsErr = 1;
#line 1902 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            Py_DECREF(a1);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QVector< ::QLine>* a0;
        int a0State = 0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QVector_0100QLine,&a0, &a0State))
        {
            sipCpp->drawLines(*a0);
            sipReleaseType(const_cast<QVector< ::QLine> *>(a0),sipType_QVector_0100QLine,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPoint* a0;
        PyObject * a1;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, &a1))
        {
            int sipIsErr = 0;

#line 261 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
        QPoint *pairs = qtgui_inst_array<QPoint>(a0, a1, sipType_QPoint);
        
        if (pairs)
        {
            sipCpp->drawLines(pairs, (1 + PyTuple_Size(a1)) / 2);
            delete[] pairs;
        }
        else
            sipIsErr = 1;
#line 1948 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            Py_DECREF(a1);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QVector< ::QPoint>* a0;
        int a0State = 0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QVector_0100QPoint,&a0, &a0State))
        {
            sipCpp->drawLines(*a0);
            sipReleaseType(const_cast<QVector< ::QPoint> *>(a0),sipType_QVector_0100QPoint,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawLines, doc_QPainter_drawLines);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_drawRects, "drawRects(self, QRectF, *)\n"
"drawRects(self, Iterable[QRectF])\n"
"drawRects(self, QRect, *)\n"
"drawRects(self, Iterable[QRect])");

extern "C" {static PyObject *meth_QPainter_drawRects(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawRects(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
        PyObject * a1;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, &a1))
        {
            int sipIsErr = 0;

#line 275 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
        QRectF *rects = qtgui_inst_array<QRectF>(a0, a1, sipType_QRectF);
        
        if (rects)
        {
            sipCpp->drawRects(rects, 1 + PyTuple_Size(a1));
            delete[] rects;
        }
        else
            sipIsErr = 1;
#line 2015 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            Py_DECREF(a1);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QVector< ::QRectF>* a0;
        int a0State = 0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QVector_0100QRectF,&a0, &a0State))
        {
            sipCpp->drawRects(*a0);
            sipReleaseType(const_cast<QVector< ::QRectF> *>(a0),sipType_QVector_0100QRectF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QRect* a0;
        PyObject * a1;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, &a1))
        {
            int sipIsErr = 0;

#line 289 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
        QRect *rects = qtgui_inst_array<QRect>(a0, a1, sipType_QRect);
        
        if (rects)
        {
            sipCpp->drawRects(rects, 1 + PyTuple_Size(a1));
            delete[] rects;
        }
        else
            sipIsErr = 1;
#line 2061 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            Py_DECREF(a1);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QVector< ::QRect>* a0;
        int a0State = 0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QVector_0100QRect,&a0, &a0State))
        {
            sipCpp->drawRects(*a0);
            sipReleaseType(const_cast<QVector< ::QRect> *>(a0),sipType_QVector_0100QRect,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawRects, doc_QPainter_drawRects);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_drawEllipse, "drawEllipse(self, QRectF)\n"
"drawEllipse(self, QRect)\n"
"drawEllipse(self, int, int, int, int)\n"
"drawEllipse(self, Union[QPointF, QPoint], float, float)\n"
"drawEllipse(self, QPoint, int, int)");

extern "C" {static PyObject *meth_QPainter_drawEllipse(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawEllipse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0))
        {
            sipCpp->drawEllipse(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QRect* a0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->drawEllipse(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->drawEllipse(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::qreal a1;
         ::qreal a2;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1dd", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a0State, &a1, &a2))
        {
            sipCpp->drawEllipse(*a0,a1,a2);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPoint* a0;
        int a1;
        int a2;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9ii", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, &a1, &a2))
        {
            sipCpp->drawEllipse(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawEllipse, doc_QPainter_drawEllipse);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_drawPolyline, "drawPolyline(self, Union[QPointF, QPoint], *)\n"
"drawPolyline(self, QPolygonF)\n"
"drawPolyline(self, QPoint, *)\n"
"drawPolyline(self, QPolygon)");

extern "C" {static PyObject *meth_QPainter_drawPolyline(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawPolyline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        PyObject * a1;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ0W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a0State, &a1))
        {
            int sipIsErr = 0;

#line 305 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
        QPointF *points = qtgui_inst_array<QPointF>(a0, a1, sipType_QPointF);
        
        if (points)
        {
            sipCpp->drawPolyline(points, 1 + PyTuple_Size(a1));
            delete[] points;
        }
        else
            sipIsErr = 1;
#line 2226 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            Py_DECREF(a1);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPolygonF* a0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPolygonF, &a0))
        {
            sipCpp->drawPolyline(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPoint* a0;
        PyObject * a1;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, &a1))
        {
            int sipIsErr = 0;

#line 319 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
        QPoint *points = qtgui_inst_array<QPoint>(a0, a1, sipType_QPoint);
        
        if (points)
        {
            sipCpp->drawPolyline(points, 1 + PyTuple_Size(a1));
            delete[] points;
        }
        else
            sipIsErr = 1;
#line 2271 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            Py_DECREF(a1);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPolygon* a0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPolygon, &a0))
        {
            sipCpp->drawPolyline(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawPolyline, doc_QPainter_drawPolyline);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_drawPolygon, "drawPolygon(self, Union[QPointF, QPoint], *)\n"
"drawPolygon(self, QPolygonF, fillRule: Qt.FillRule = Qt.OddEvenFill)\n"
"drawPolygon(self, QPoint, *)\n"
"drawPolygon(self, QPolygon, fillRule: Qt.FillRule = Qt.OddEvenFill)");

extern "C" {static PyObject *meth_QPainter_drawPolygon(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawPolygon(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        PyObject * a1;
         ::QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ0W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a0State, &a1))
        {
            int sipIsErr = 0;

#line 333 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
        QPointF *points = qtgui_inst_array<QPointF>(a0, a1, sipType_QPointF);
        
        if (points)
        {
            sipCpp->drawPolygon(points, 1 + PyTuple_Size(a1));
            delete[] points;
        }
        else
            sipIsErr = 1;
#line 2337 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            Py_DECREF(a1);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPolygonF* a0;
         ::Qt::FillRule a1 = Qt::OddEvenFill;
         ::QPainter *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_fillRule,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|E", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPolygonF, &a0, sipType_Qt_FillRule, &a1))
        {
            sipCpp->drawPolygon(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPoint* a0;
        PyObject * a1;
         ::QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ8W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, &a1))
        {
            int sipIsErr = 0;

#line 347 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
        QPoint *points = qtgui_inst_array<QPoint>(a0, a1, sipType_QPoint);
        
        if (points)
        {
            sipCpp->drawPolygon(points, 1 + PyTuple_Size(a1));
            delete[] points;
        }
        else
            sipIsErr = 1;
#line 2388 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            Py_DECREF(a1);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPolygon* a0;
         ::Qt::FillRule a1 = Qt::OddEvenFill;
         ::QPainter *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_fillRule,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|E", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPolygon, &a0, sipType_Qt_FillRule, &a1))
        {
            sipCpp->drawPolygon(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawPolygon, doc_QPainter_drawPolygon);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_drawConvexPolygon, "drawConvexPolygon(self, Union[QPointF, QPoint], *)\n"
"drawConvexPolygon(self, QPolygonF)\n"
"drawConvexPolygon(self, QPoint, *)\n"
"drawConvexPolygon(self, QPolygon)");

extern "C" {static PyObject *meth_QPainter_drawConvexPolygon(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawConvexPolygon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        PyObject * a1;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ0W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a0State, &a1))
        {
            int sipIsErr = 0;

#line 361 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
        QPointF *points = qtgui_inst_array<QPointF>(a0, a1, sipType_QPointF);
        
        if (points)
        {
            sipCpp->drawConvexPolygon(points, 1 + PyTuple_Size(a1));
            delete[] points;
        }
        else
            sipIsErr = 1;
#line 2460 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            Py_DECREF(a1);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPolygonF* a0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPolygonF, &a0))
        {
            sipCpp->drawConvexPolygon(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPoint* a0;
        PyObject * a1;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, &a1))
        {
            int sipIsErr = 0;

#line 375 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
        QPoint *points = qtgui_inst_array<QPoint>(a0, a1, sipType_QPoint);
        
        if (points)
        {
            sipCpp->drawConvexPolygon(points, 1 + PyTuple_Size(a1));
            delete[] points;
        }
        else
            sipIsErr = 1;
#line 2505 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            Py_DECREF(a1);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPolygon* a0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPolygon, &a0))
        {
            sipCpp->drawConvexPolygon(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawConvexPolygon, doc_QPainter_drawConvexPolygon);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_drawArc, "drawArc(self, QRectF, int, int)\n"
"drawArc(self, QRect, int, int)\n"
"drawArc(self, int, int, int, int, int, int)");

extern "C" {static PyObject *meth_QPainter_drawArc(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawArc(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
        int a1;
        int a2;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9ii", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, &a1, &a2))
        {
            sipCpp->drawArc(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QRect* a0;
        int a1;
        int a2;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9ii", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, &a1, &a2))
        {
            sipCpp->drawArc(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4;
        int a5;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiiiii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            sipCpp->drawArc(a0,a1,a2,a3,a4,a5);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawArc, doc_QPainter_drawArc);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_drawPie, "drawPie(self, QRectF, int, int)\n"
"drawPie(self, QRect, int, int)\n"
"drawPie(self, int, int, int, int, int, int)");

extern "C" {static PyObject *meth_QPainter_drawPie(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawPie(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
        int a1;
        int a2;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9ii", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, &a1, &a2))
        {
            sipCpp->drawPie(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QRect* a0;
        int a1;
        int a2;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9ii", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, &a1, &a2))
        {
            sipCpp->drawPie(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4;
        int a5;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiiiii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            sipCpp->drawPie(a0,a1,a2,a3,a4,a5);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawPie, doc_QPainter_drawPie);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_drawChord, "drawChord(self, QRectF, int, int)\n"
"drawChord(self, QRect, int, int)\n"
"drawChord(self, int, int, int, int, int, int)");

extern "C" {static PyObject *meth_QPainter_drawChord(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawChord(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
        int a1;
        int a2;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9ii", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, &a1, &a2))
        {
            sipCpp->drawChord(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QRect* a0;
        int a1;
        int a2;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9ii", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, &a1, &a2))
        {
            sipCpp->drawChord(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4;
        int a5;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiiiii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            sipCpp->drawChord(a0,a1,a2,a3,a4,a5);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawChord, doc_QPainter_drawChord);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_drawTiledPixmap, "drawTiledPixmap(self, QRectF, QPixmap, pos: Union[QPointF, QPoint] = QPointF())\n"
"drawTiledPixmap(self, QRect, QPixmap, pos: QPoint = QPoint())\n"
"drawTiledPixmap(self, int, int, int, int, QPixmap, sx: int = 0, sy: int = 0)");

extern "C" {static PyObject *meth_QPainter_drawTiledPixmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawTiledPixmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
        const  ::QPixmap* a1;
        const  ::QPointF& a2def = QPointF();
        const  ::QPointF* a2 = &a2def;
        int a2State = 0;
         ::QPainter *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J9|J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, sipType_QPixmap, &a1, sipType_QPointF, &a2, &a2State))
        {
            sipCpp->drawTiledPixmap(*a0,*a1,*a2);
            sipReleaseType(const_cast< ::QPointF *>(a2),sipType_QPointF,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QRect* a0;
        const  ::QPixmap* a1;
        const  ::QPoint& a2def = QPoint();
        const  ::QPoint* a2 = &a2def;
         ::QPainter *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J9|J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, sipType_QPixmap, &a1, sipType_QPoint, &a2))
        {
            sipCpp->drawTiledPixmap(*a0,*a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const  ::QPixmap* a4;
        int a5 = 0;
        int a6 = 0;
         ::QPainter *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_sx,
            sipName_sy,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiiiiJ9|ii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, sipType_QPixmap, &a4, &a5, &a6))
        {
            sipCpp->drawTiledPixmap(a0,a1,a2,a3,*a4,a5,a6);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawTiledPixmap, doc_QPainter_drawTiledPixmap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_drawPicture, "drawPicture(self, Union[QPointF, QPoint], QPicture)\n"
"drawPicture(self, int, int, QPicture)\n"
"drawPicture(self, QPoint, QPicture)");

extern "C" {static PyObject *meth_QPainter_drawPicture(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawPicture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QPicture* a1;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a0State, sipType_QPicture, &a1))
        {
            sipCpp->drawPicture(*a0,*a1);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        const  ::QPicture* a2;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ9", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, sipType_QPicture, &a2))
        {
            sipCpp->drawPicture(a0,a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPoint* a0;
        const  ::QPicture* a1;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, sipType_QPicture, &a1))
        {
            sipCpp->drawPicture(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawPicture, doc_QPainter_drawPicture);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_drawPixmap, "drawPixmap(self, QRectF, QPixmap, QRectF)\n"
"drawPixmap(self, QRect, QPixmap, QRect)\n"
"drawPixmap(self, Union[QPointF, QPoint], QPixmap)\n"
"drawPixmap(self, QPoint, QPixmap)\n"
"drawPixmap(self, QRect, QPixmap)\n"
"drawPixmap(self, int, int, QPixmap)\n"
"drawPixmap(self, int, int, int, int, QPixmap)\n"
"drawPixmap(self, int, int, int, int, QPixmap, int, int, int, int)\n"
"drawPixmap(self, int, int, QPixmap, int, int, int, int)\n"
"drawPixmap(self, Union[QPointF, QPoint], QPixmap, QRectF)\n"
"drawPixmap(self, QPoint, QPixmap, QRect)");

extern "C" {static PyObject *meth_QPainter_drawPixmap(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
        const  ::QPixmap* a1;
        const  ::QRectF* a2;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, sipType_QPixmap, &a1, sipType_QRectF, &a2))
        {
            sipCpp->drawPixmap(*a0,*a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QRect* a0;
        const  ::QPixmap* a1;
        const  ::QRect* a2;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, sipType_QPixmap, &a1, sipType_QRect, &a2))
        {
            sipCpp->drawPixmap(*a0,*a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QPixmap* a1;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a0State, sipType_QPixmap, &a1))
        {
            sipCpp->drawPixmap(*a0,*a1);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPoint* a0;
        const  ::QPixmap* a1;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, sipType_QPixmap, &a1))
        {
            sipCpp->drawPixmap(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QRect* a0;
        const  ::QPixmap* a1;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, sipType_QPixmap, &a1))
        {
            sipCpp->drawPixmap(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        const  ::QPixmap* a2;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ9", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, sipType_QPixmap, &a2))
        {
            sipCpp->drawPixmap(a0,a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const  ::QPixmap* a4;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiiiJ9", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, sipType_QPixmap, &a4))
        {
            sipCpp->drawPixmap(a0,a1,a2,a3,*a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const  ::QPixmap* a4;
        int a5;
        int a6;
        int a7;
        int a8;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiiiJ9iiii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, sipType_QPixmap, &a4, &a5, &a6, &a7, &a8))
        {
            sipCpp->drawPixmap(a0,a1,a2,a3,*a4,a5,a6,a7,a8);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        const  ::QPixmap* a2;
        int a3;
        int a4;
        int a5;
        int a6;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ9iiii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, sipType_QPixmap, &a2, &a3, &a4, &a5, &a6))
        {
            sipCpp->drawPixmap(a0,a1,*a2,a3,a4,a5,a6);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QPixmap* a1;
        const  ::QRectF* a2;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a0State, sipType_QPixmap, &a1, sipType_QRectF, &a2))
        {
            sipCpp->drawPixmap(*a0,*a1,*a2);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPoint* a0;
        const  ::QPixmap* a1;
        const  ::QRect* a2;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, sipType_QPixmap, &a1, sipType_QRect, &a2))
        {
            sipCpp->drawPixmap(*a0,*a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawPixmap, doc_QPainter_drawPixmap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_setLayoutDirection, "setLayoutDirection(self, Qt.LayoutDirection)");

extern "C" {static PyObject *meth_QPainter_setLayoutDirection(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setLayoutDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::LayoutDirection a0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPainter, &sipCpp, sipType_Qt_LayoutDirection, &a0))
        {
            sipCpp->setLayoutDirection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setLayoutDirection, doc_QPainter_setLayoutDirection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_layoutDirection, "layoutDirection(self) -> Qt.LayoutDirection");

extern "C" {static PyObject *meth_QPainter_layoutDirection(PyObject *, PyObject *);}
static PyObject *meth_QPainter_layoutDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
             ::Qt::LayoutDirection sipRes;

            sipRes = sipCpp->layoutDirection();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_LayoutDirection);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_layoutDirection, doc_QPainter_layoutDirection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_drawText, "drawText(self, Union[QPointF, QPoint], str)\n"
"drawText(self, QRectF, int, str) -> QRectF\n"
"drawText(self, QRect, int, str) -> QRect\n"
"drawText(self, QRectF, str, option: QTextOption = QTextOption())\n"
"drawText(self, QPoint, str)\n"
"drawText(self, int, int, int, int, int, str) -> QRect\n"
"drawText(self, int, int, str)");

extern "C" {static PyObject *meth_QPainter_drawText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ1J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a0State, sipType_QString,&a1, &a1State))
        {
            sipCpp->drawText(*a0,*a1);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QRectF* a0;
        int a1;
        const  ::QString* a2;
        int a2State = 0;
         ::QRectF* a3;
         ::QPainter *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9iJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, &a1, sipType_QString,&a2, &a2State))
        {
            a3 = new  ::QRectF();

            sipCpp->drawText(*a0,a1,*a2,a3);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            return sipConvertFromNewType(a3,sipType_QRectF,SIP_NULLPTR);
        }
    }

    {
        const  ::QRect* a0;
        int a1;
        const  ::QString* a2;
        int a2State = 0;
         ::QRect* a3;
         ::QPainter *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9iJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, &a1, sipType_QString,&a2, &a2State))
        {
            a3 = new  ::QRect();

            sipCpp->drawText(*a0,a1,*a2,a3);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            return sipConvertFromNewType(a3,sipType_QRect,SIP_NULLPTR);
        }
    }

    {
        const  ::QRectF* a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QTextOption& a2def = QTextOption();
        const  ::QTextOption* a2 = &a2def;
         ::QPainter *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_option,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J1|J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, sipType_QString,&a1, &a1State, sipType_QTextOption, &a2))
        {
            sipCpp->drawText(*a0,*a1,*a2);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPoint* a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ9J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->drawText(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4;
        const  ::QString* a5;
        int a5State = 0;
         ::QRect* a6;
         ::QPainter *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiiiiiJ1", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, &a4, sipType_QString,&a5, &a5State))
        {
            a6 = new  ::QRect();

            sipCpp->drawText(a0,a1,a2,a3,a4,*a5,a6);
            sipReleaseType(const_cast< ::QString *>(a5),sipType_QString,a5State);

            return sipConvertFromNewType(a6,sipType_QRect,SIP_NULLPTR);
        }
    }

    {
        int a0;
        int a1;
        const  ::QString* a2;
        int a2State = 0;
         ::QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BiiJ1", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, sipType_QString,&a2, &a2State))
        {
            sipCpp->drawText(a0,a1,*a2);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawText, doc_QPainter_drawText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_boundingRect, "boundingRect(self, QRectF, int, str) -> QRectF\n"
"boundingRect(self, QRect, int, str) -> QRect\n"
"boundingRect(self, QRectF, str, option: QTextOption = QTextOption()) -> QRectF\n"
"boundingRect(self, int, int, int, int, int, str) -> QRect");

extern "C" {static PyObject *meth_QPainter_boundingRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_boundingRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
        int a1;
        const  ::QString* a2;
        int a2State = 0;
         ::QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ9iJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, &a1, sipType_QString,&a2, &a2State))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->boundingRect(*a0,a1,*a2));
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    {
        const  ::QRect* a0;
        int a1;
        const  ::QString* a2;
        int a2State = 0;
         ::QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ9iJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, &a1, sipType_QString,&a2, &a2State))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->boundingRect(*a0,a1,*a2));
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    {
        const  ::QRectF* a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QTextOption& a2def = QTextOption();
        const  ::QTextOption* a2 = &a2def;
         ::QPainter *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_option,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J1|J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, sipType_QString,&a1, &a1State, sipType_QTextOption, &a2))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->boundingRect(*a0,*a1,*a2));
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4;
        const  ::QString* a5;
        int a5State = 0;
         ::QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BiiiiiJ1", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, &a4, sipType_QString,&a5, &a5State))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->boundingRect(a0,a1,a2,a3,a4,*a5));
            sipReleaseType(const_cast< ::QString *>(a5),sipType_QString,a5State);

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_boundingRect, doc_QPainter_boundingRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_fillRect, "fillRect(self, QRectF, Union[QBrush, QColor, Qt.GlobalColor, QGradient])\n"
"fillRect(self, QRect, Union[QBrush, QColor, Qt.GlobalColor, QGradient])\n"
"fillRect(self, int, int, int, int, Union[QBrush, QColor, Qt.GlobalColor, QGradient])\n"
"fillRect(self, QRectF, Union[QColor, Qt.GlobalColor, QGradient])\n"
"fillRect(self, QRect, Union[QColor, Qt.GlobalColor, QGradient])\n"
"fillRect(self, int, int, int, int, Union[QColor, Qt.GlobalColor, QGradient])\n"
"fillRect(self, int, int, int, int, Qt.GlobalColor)\n"
"fillRect(self, QRect, Qt.GlobalColor)\n"
"fillRect(self, QRectF, Qt.GlobalColor)\n"
"fillRect(self, int, int, int, int, Qt.BrushStyle)\n"
"fillRect(self, QRect, Qt.BrushStyle)\n"
"fillRect(self, QRectF, Qt.BrushStyle)\n"
"fillRect(self, int, int, int, int, QGradient.Preset)\n"
"fillRect(self, QRect, QGradient.Preset)\n"
"fillRect(self, QRectF, QGradient.Preset)");

extern "C" {static PyObject *meth_QPainter_fillRect(PyObject *, PyObject *);}
static PyObject *meth_QPainter_fillRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
        const  ::QBrush* a1;
        int a1State = 0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, sipType_QBrush, &a1, &a1State))
        {
            sipCpp->fillRect(*a0,*a1);
            sipReleaseType(const_cast< ::QBrush *>(a1),sipType_QBrush,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QRect* a0;
        const  ::QBrush* a1;
        int a1State = 0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, sipType_QBrush, &a1, &a1State))
        {
            sipCpp->fillRect(*a0,*a1);
            sipReleaseType(const_cast< ::QBrush *>(a1),sipType_QBrush,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const  ::QBrush* a4;
        int a4State = 0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiiiJ1", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, sipType_QBrush, &a4, &a4State))
        {
            sipCpp->fillRect(a0,a1,a2,a3,*a4);
            sipReleaseType(const_cast< ::QBrush *>(a4),sipType_QBrush,a4State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QRectF* a0;
        const  ::QColor* a1;
        int a1State = 0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, sipType_QColor, &a1, &a1State))
        {
            sipCpp->fillRect(*a0,*a1);
            sipReleaseType(const_cast< ::QColor *>(a1),sipType_QColor,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QRect* a0;
        const  ::QColor* a1;
        int a1State = 0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, sipType_QColor, &a1, &a1State))
        {
            sipCpp->fillRect(*a0,*a1);
            sipReleaseType(const_cast< ::QColor *>(a1),sipType_QColor,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const  ::QColor* a4;
        int a4State = 0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiiiJ1", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, sipType_QColor, &a4, &a4State))
        {
            sipCpp->fillRect(a0,a1,a2,a3,*a4);
            sipReleaseType(const_cast< ::QColor *>(a4),sipType_QColor,a4State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
         ::Qt::GlobalColor a4;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiiiE", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, sipType_Qt_GlobalColor, &a4))
        {
            sipCpp->fillRect(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QRect* a0;
         ::Qt::GlobalColor a1;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, sipType_Qt_GlobalColor, &a1))
        {
            sipCpp->fillRect(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QRectF* a0;
         ::Qt::GlobalColor a1;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, sipType_Qt_GlobalColor, &a1))
        {
            sipCpp->fillRect(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
         ::Qt::BrushStyle a4;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiiiE", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, sipType_Qt_BrushStyle, &a4))
        {
            sipCpp->fillRect(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QRect* a0;
         ::Qt::BrushStyle a1;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, sipType_Qt_BrushStyle, &a1))
        {
            sipCpp->fillRect(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QRectF* a0;
         ::Qt::BrushStyle a1;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, sipType_Qt_BrushStyle, &a1))
        {
            sipCpp->fillRect(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
         ::QGradient::Preset a4;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiiiE", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, sipType_QGradient_Preset, &a4))
        {
            sipCpp->fillRect(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QRect* a0;
         ::QGradient::Preset a1;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, sipType_QGradient_Preset, &a1))
        {
            sipCpp->fillRect(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QRectF* a0;
         ::QGradient::Preset a1;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, sipType_QGradient_Preset, &a1))
        {
            sipCpp->fillRect(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_fillRect, doc_QPainter_fillRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_eraseRect, "eraseRect(self, QRectF)\n"
"eraseRect(self, QRect)\n"
"eraseRect(self, int, int, int, int)");

extern "C" {static PyObject *meth_QPainter_eraseRect(PyObject *, PyObject *);}
static PyObject *meth_QPainter_eraseRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0))
        {
            sipCpp->eraseRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QRect* a0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->eraseRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->eraseRect(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_eraseRect, doc_QPainter_eraseRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_setRenderHint, "setRenderHint(self, QPainter.RenderHint, on: bool = True)");

extern "C" {static PyObject *meth_QPainter_setRenderHint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_setRenderHint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPainter::RenderHint a0;
        bool a1 = 1;
         ::QPainter *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_on,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE|b", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPainter_RenderHint, &a0, &a1))
        {
            sipCpp->setRenderHint(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setRenderHint, doc_QPainter_setRenderHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_renderHints, "renderHints(self) -> QPainter.RenderHints");

extern "C" {static PyObject *meth_QPainter_renderHints(PyObject *, PyObject *);}
static PyObject *meth_QPainter_renderHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
             ::QPainter::RenderHints*sipRes;

            sipRes = new  ::QPainter::RenderHints(sipCpp->renderHints());

            return sipConvertFromNewType(sipRes,sipType_QPainter_RenderHints,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_renderHints, doc_QPainter_renderHints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_setRenderHints, "setRenderHints(self, Union[QPainter.RenderHints, QPainter.RenderHint], on: bool = True)");

extern "C" {static PyObject *meth_QPainter_setRenderHints(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_setRenderHints(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPainter::RenderHints* a0;
        int a0State = 0;
        bool a1 = 1;
         ::QPainter *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_on,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|b", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPainter_RenderHints, &a0, &a0State, &a1))
        {
            sipCpp->setRenderHints(*a0,a1);
            sipReleaseType(a0,sipType_QPainter_RenderHints,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setRenderHints, doc_QPainter_setRenderHints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_paintEngine, "paintEngine(self) -> QPaintEngine");

extern "C" {static PyObject *meth_QPainter_paintEngine(PyObject *, PyObject *);}
static PyObject *meth_QPainter_paintEngine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
             ::QPaintEngine*sipRes;

            sipRes = sipCpp->paintEngine();

            return sipConvertFromType(sipRes,sipType_QPaintEngine,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_paintEngine, doc_QPainter_paintEngine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_drawLine, "drawLine(self, QLineF)\n"
"drawLine(self, QLine)\n"
"drawLine(self, int, int, int, int)\n"
"drawLine(self, QPoint, QPoint)\n"
"drawLine(self, Union[QPointF, QPoint], Union[QPointF, QPoint])");

extern "C" {static PyObject *meth_QPainter_drawLine(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineF* a0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QLineF, &a0))
        {
            sipCpp->drawLine(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QLine* a0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QLine, &a0))
        {
            sipCpp->drawLine(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->drawLine(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPoint* a0;
        const  ::QPoint* a1;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, sipType_QPoint, &a1))
        {
            sipCpp->drawLine(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QPointF* a1;
        int a1State = 0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a0State, sipType_QPointF, &a1, &a1State))
        {
            sipCpp->drawLine(*a0,*a1);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawLine, doc_QPainter_drawLine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_drawRect, "drawRect(self, QRectF)\n"
"drawRect(self, int, int, int, int)\n"
"drawRect(self, QRect)");

extern "C" {static PyObject *meth_QPainter_drawRect(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0))
        {
            sipCpp->drawRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->drawRect(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QRect* a0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->drawRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawRect, doc_QPainter_drawRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_drawPoint, "drawPoint(self, Union[QPointF, QPoint])\n"
"drawPoint(self, int, int)\n"
"drawPoint(self, QPoint)");

extern "C" {static PyObject *meth_QPainter_drawPoint(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->drawPoint(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1))
        {
            sipCpp->drawPoint(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPoint* a0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->drawPoint(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawPoint, doc_QPainter_drawPoint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_drawImage, "drawImage(self, QRectF, QImage, QRectF, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.AutoColor)\n"
"drawImage(self, QRect, QImage, QRect, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.AutoColor)\n"
"drawImage(self, Union[QPointF, QPoint], QImage, QRectF, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.AutoColor)\n"
"drawImage(self, QPoint, QImage, QRect, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.AutoColor)\n"
"drawImage(self, QRectF, QImage)\n"
"drawImage(self, QRect, QImage)\n"
"drawImage(self, Union[QPointF, QPoint], QImage)\n"
"drawImage(self, QPoint, QImage)\n"
"drawImage(self, int, int, QImage, sx: int = 0, sy: int = 0, sw: int = -1, sh: int = -1, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.AutoColor)");

extern "C" {static PyObject *meth_QPainter_drawImage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawImage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
        const  ::QImage* a1;
        const  ::QRectF* a2;
         ::Qt::ImageConversionFlags a3def = Qt::AutoColor;
         ::Qt::ImageConversionFlags* a3 = &a3def;
        int a3State = 0;
         ::QPainter *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J9J9|J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, sipType_QImage, &a1, sipType_QRectF, &a2, sipType_Qt_ImageConversionFlags, &a3, &a3State))
        {
            sipCpp->drawImage(*a0,*a1,*a2,*a3);
            sipReleaseType(a3,sipType_Qt_ImageConversionFlags,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QRect* a0;
        const  ::QImage* a1;
        const  ::QRect* a2;
         ::Qt::ImageConversionFlags a3def = Qt::AutoColor;
         ::Qt::ImageConversionFlags* a3 = &a3def;
        int a3State = 0;
         ::QPainter *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J9J9|J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, sipType_QImage, &a1, sipType_QRect, &a2, sipType_Qt_ImageConversionFlags, &a3, &a3State))
        {
            sipCpp->drawImage(*a0,*a1,*a2,*a3);
            sipReleaseType(a3,sipType_Qt_ImageConversionFlags,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QImage* a1;
        const  ::QRectF* a2;
         ::Qt::ImageConversionFlags a3def = Qt::AutoColor;
         ::Qt::ImageConversionFlags* a3 = &a3def;
        int a3State = 0;
         ::QPainter *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J9J9|J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a0State, sipType_QImage, &a1, sipType_QRectF, &a2, sipType_Qt_ImageConversionFlags, &a3, &a3State))
        {
            sipCpp->drawImage(*a0,*a1,*a2,*a3);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);
            sipReleaseType(a3,sipType_Qt_ImageConversionFlags,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPoint* a0;
        const  ::QImage* a1;
        const  ::QRect* a2;
         ::Qt::ImageConversionFlags a3def = Qt::AutoColor;
         ::Qt::ImageConversionFlags* a3 = &a3def;
        int a3State = 0;
         ::QPainter *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J9J9|J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, sipType_QImage, &a1, sipType_QRect, &a2, sipType_Qt_ImageConversionFlags, &a3, &a3State))
        {
            sipCpp->drawImage(*a0,*a1,*a2,*a3);
            sipReleaseType(a3,sipType_Qt_ImageConversionFlags,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QRectF* a0;
        const  ::QImage* a1;
         ::QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, sipType_QImage, &a1))
        {
            sipCpp->drawImage(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QRect* a0;
        const  ::QImage* a1;
         ::QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, sipType_QImage, &a1))
        {
            sipCpp->drawImage(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QImage* a1;
         ::QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ1J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a0State, sipType_QImage, &a1))
        {
            sipCpp->drawImage(*a0,*a1);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPoint* a0;
        const  ::QImage* a1;
         ::QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, sipType_QImage, &a1))
        {
            sipCpp->drawImage(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        const  ::QImage* a2;
        int a3 = 0;
        int a4 = 0;
        int a5 = -1;
        int a6 = -1;
         ::Qt::ImageConversionFlags a7def = Qt::AutoColor;
         ::Qt::ImageConversionFlags* a7 = &a7def;
        int a7State = 0;
         ::QPainter *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_sx,
            sipName_sy,
            sipName_sw,
            sipName_sh,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiiJ9|iiiiJ1", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, sipType_QImage, &a2, &a3, &a4, &a5, &a6, sipType_Qt_ImageConversionFlags, &a7, &a7State))
        {
            sipCpp->drawImage(a0,a1,*a2,a3,a4,a5,a6,*a7);
            sipReleaseType(a7,sipType_Qt_ImageConversionFlags,a7State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawImage, doc_QPainter_drawImage);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_opacity, "opacity(self) -> float");

extern "C" {static PyObject *meth_QPainter_opacity(PyObject *, PyObject *);}
static PyObject *meth_QPainter_opacity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->opacity();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_opacity, doc_QPainter_opacity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_setOpacity, "setOpacity(self, float)");

extern "C" {static PyObject *meth_QPainter_setOpacity(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setOpacity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPainter, &sipCpp, &a0))
        {
            sipCpp->setOpacity(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setOpacity, doc_QPainter_setOpacity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_worldMatrixEnabled, "worldMatrixEnabled(self) -> bool");

extern "C" {static PyObject *meth_QPainter_worldMatrixEnabled(PyObject *, PyObject *);}
static PyObject *meth_QPainter_worldMatrixEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->worldMatrixEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_worldMatrixEnabled, doc_QPainter_worldMatrixEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_setWorldMatrixEnabled, "setWorldMatrixEnabled(self, bool)");

extern "C" {static PyObject *meth_QPainter_setWorldMatrixEnabled(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setWorldMatrixEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPainter, &sipCpp, &a0))
        {
            sipCpp->setWorldMatrixEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setWorldMatrixEnabled, doc_QPainter_setWorldMatrixEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_setTransform, "setTransform(self, QTransform, combine: bool = False)");

extern "C" {static PyObject *meth_QPainter_setTransform(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_setTransform(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform* a0;
        bool a1 = 0;
         ::QPainter *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_combine,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|b", &sipSelf, sipType_QPainter, &sipCpp, sipType_QTransform, &a0, &a1))
        {
            sipCpp->setTransform(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setTransform, doc_QPainter_setTransform);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_transform, "transform(self) -> QTransform");

extern "C" {static PyObject *meth_QPainter_transform(PyObject *, PyObject *);}
static PyObject *meth_QPainter_transform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
             ::QTransform*sipRes;

            sipRes = new  ::QTransform(sipCpp->transform());

            return sipConvertFromNewType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_transform, doc_QPainter_transform);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_deviceTransform, "deviceTransform(self) -> QTransform");

extern "C" {static PyObject *meth_QPainter_deviceTransform(PyObject *, PyObject *);}
static PyObject *meth_QPainter_deviceTransform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
             ::QTransform*sipRes;

            sipRes = new  ::QTransform(sipCpp->deviceTransform());

            return sipConvertFromNewType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_deviceTransform, doc_QPainter_deviceTransform);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_resetTransform, "resetTransform(self)");

extern "C" {static PyObject *meth_QPainter_resetTransform(PyObject *, PyObject *);}
static PyObject *meth_QPainter_resetTransform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            sipCpp->resetTransform();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_resetTransform, doc_QPainter_resetTransform);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_setWorldTransform, "setWorldTransform(self, QTransform, combine: bool = False)");

extern "C" {static PyObject *meth_QPainter_setWorldTransform(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_setWorldTransform(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform* a0;
        bool a1 = 0;
         ::QPainter *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_combine,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|b", &sipSelf, sipType_QPainter, &sipCpp, sipType_QTransform, &a0, &a1))
        {
            sipCpp->setWorldTransform(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setWorldTransform, doc_QPainter_setWorldTransform);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_worldTransform, "worldTransform(self) -> QTransform");

extern "C" {static PyObject *meth_QPainter_worldTransform(PyObject *, PyObject *);}
static PyObject *meth_QPainter_worldTransform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
             ::QTransform*sipRes;

            sipRes = new  ::QTransform(sipCpp->worldTransform());

            return sipConvertFromNewType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_worldTransform, doc_QPainter_worldTransform);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_combinedTransform, "combinedTransform(self) -> QTransform");

extern "C" {static PyObject *meth_QPainter_combinedTransform(PyObject *, PyObject *);}
static PyObject *meth_QPainter_combinedTransform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
             ::QTransform*sipRes;

            sipRes = new  ::QTransform(sipCpp->combinedTransform());

            return sipConvertFromNewType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_combinedTransform, doc_QPainter_combinedTransform);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_testRenderHint, "testRenderHint(self, QPainter.RenderHint) -> bool");

extern "C" {static PyObject *meth_QPainter_testRenderHint(PyObject *, PyObject *);}
static PyObject *meth_QPainter_testRenderHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPainter::RenderHint a0;
        const  ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPainter_RenderHint, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->testRenderHint(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_testRenderHint, doc_QPainter_testRenderHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_drawRoundedRect, "drawRoundedRect(self, QRectF, float, float, mode: Qt.SizeMode = Qt.AbsoluteSize)\n"
"drawRoundedRect(self, int, int, int, int, float, float, mode: Qt.SizeMode = Qt.AbsoluteSize)\n"
"drawRoundedRect(self, QRect, float, float, mode: Qt.SizeMode = Qt.AbsoluteSize)");

extern "C" {static PyObject *meth_QPainter_drawRoundedRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawRoundedRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
         ::qreal a1;
         ::qreal a2;
         ::Qt::SizeMode a3 = Qt::AbsoluteSize;
         ::QPainter *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9dd|E", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, &a1, &a2, sipType_Qt_SizeMode, &a3))
        {
            sipCpp->drawRoundedRect(*a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
         ::qreal a4;
         ::qreal a5;
         ::Qt::SizeMode a6 = Qt::AbsoluteSize;
         ::QPainter *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiiidd|E", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5, sipType_Qt_SizeMode, &a6))
        {
            sipCpp->drawRoundedRect(a0,a1,a2,a3,a4,a5,a6);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QRect* a0;
         ::qreal a1;
         ::qreal a2;
         ::Qt::SizeMode a3 = Qt::AbsoluteSize;
         ::QPainter *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9dd|E", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, &a1, &a2, sipType_Qt_SizeMode, &a3))
        {
            sipCpp->drawRoundedRect(*a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawRoundedRect, doc_QPainter_drawRoundedRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_beginNativePainting, "beginNativePainting(self)");

extern "C" {static PyObject *meth_QPainter_beginNativePainting(PyObject *, PyObject *);}
static PyObject *meth_QPainter_beginNativePainting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            sipCpp->beginNativePainting();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_beginNativePainting, doc_QPainter_beginNativePainting);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_endNativePainting, "endNativePainting(self)");

extern "C" {static PyObject *meth_QPainter_endNativePainting(PyObject *, PyObject *);}
static PyObject *meth_QPainter_endNativePainting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            sipCpp->endNativePainting();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_endNativePainting, doc_QPainter_endNativePainting);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_drawPixmapFragments, "drawPixmapFragments(self, List[QPainter.PixmapFragment], QPixmap, hints: QPainter.PixmapFragmentHints = 0)");

extern "C" {static PyObject *meth_QPainter_drawPixmapFragments(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawPixmapFragments(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;
        const  ::QPixmap* a1;
         ::QPainter::PixmapFragmentHints a2def = 0;
         ::QPainter::PixmapFragmentHints* a2 = &a2def;
        int a2State = 0;
         ::QPainter *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_hints,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BTJ9|J1", &sipSelf, sipType_QPainter, &sipCpp, &PyList_Type, &a0, sipType_QPixmap, &a1, sipType_QPainter_PixmapFragmentHints, &a2, &a2State))
        {
            int sipIsErr = 0;

#line 522 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
        // Allocate temporary storage for the C++ conversions.
        Py_ssize_t numFragments = PyList_Size(a0);
        QPainter::PixmapFragment *fragments = new QPainter::PixmapFragment[numFragments];
        
        // Convert the fragments.
        for (Py_ssize_t i = 0; i < numFragments; ++i)
        {
            void *cpp = sipForceConvertToType(PyList_GetItem(a0, i), sipType_QPainter_PixmapFragment, NULL, SIP_NO_CONVERTORS, NULL, &sipIsErr);
        
            fragments[i] = *reinterpret_cast<QPainter::PixmapFragment *>(cpp);
        }
        
        if (!sipIsErr)
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawPixmapFragments(fragments, numFragments, *a1, *a2);
            Py_END_ALLOW_THREADS
        }
        
        delete[] fragments;
#line 4909 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
            sipReleaseType(a2,sipType_QPainter_PixmapFragmentHints,a2State);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawPixmapFragments, doc_QPainter_drawPixmapFragments);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_drawStaticText, "drawStaticText(self, Union[QPointF, QPoint], QStaticText)\n"
"drawStaticText(self, QPoint, QStaticText)\n"
"drawStaticText(self, int, int, QStaticText)");

extern "C" {static PyObject *meth_QPainter_drawStaticText(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawStaticText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QStaticText* a1;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a0State, sipType_QStaticText, &a1))
        {
            sipCpp->drawStaticText(*a0,*a1);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPoint* a0;
        const  ::QStaticText* a1;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, sipType_QStaticText, &a1))
        {
            sipCpp->drawStaticText(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        const  ::QStaticText* a2;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ9", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, sipType_QStaticText, &a2))
        {
            sipCpp->drawStaticText(a0,a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawStaticText, doc_QPainter_drawStaticText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_clipBoundingRect, "clipBoundingRect(self) -> QRectF");

extern "C" {static PyObject *meth_QPainter_clipBoundingRect(PyObject *, PyObject *);}
static PyObject *meth_QPainter_clipBoundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->clipBoundingRect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_clipBoundingRect, doc_QPainter_clipBoundingRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainter_drawGlyphRun, "drawGlyphRun(self, Union[QPointF, QPoint], QGlyphRun)");

extern "C" {static PyObject *meth_QPainter_drawGlyphRun(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawGlyphRun(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QGlyphRun* a1;
         ::QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a0State, sipType_QGlyphRun, &a1))
        {
            sipCpp->drawGlyphRun(*a0,*a1);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawGlyphRun, doc_QPainter_drawGlyphRun);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPainter(void *, int);}
static void release_QPainter(void *sipCppV, int)
{
    delete reinterpret_cast< ::QPainter *>(sipCppV);
}


extern "C" {static void dealloc_QPainter(sipSimpleWrapper *);}
static void dealloc_QPainter(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPainter(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QPainter(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPainter(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QPainter *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QPainter();

            return sipCpp;
        }
    }

    {
         ::QPaintDevice* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8", sipType_QPaintDevice, &a0))
        {
            sipCpp = new  ::QPainter(a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QPainter[] = {
    {SIP_MLNAME_CAST(sipName___enter__), meth_QPainter___enter__, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter___enter__)},
    {SIP_MLNAME_CAST(sipName___exit__), meth_QPainter___exit__, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter___exit__)},
    {SIP_MLNAME_CAST(sipName_background), meth_QPainter_background, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_background)},
    {SIP_MLNAME_CAST(sipName_backgroundMode), meth_QPainter_backgroundMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_backgroundMode)},
    {SIP_MLNAME_CAST(sipName_begin), meth_QPainter_begin, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_begin)},
    {SIP_MLNAME_CAST(sipName_beginNativePainting), meth_QPainter_beginNativePainting, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_beginNativePainting)},
    {SIP_MLNAME_CAST(sipName_boundingRect), SIP_MLMETH_CAST(meth_QPainter_boundingRect), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPainter_boundingRect)},
    {SIP_MLNAME_CAST(sipName_brush), meth_QPainter_brush, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_brush)},
    {SIP_MLNAME_CAST(sipName_brushOrigin), meth_QPainter_brushOrigin, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_brushOrigin)},
    {SIP_MLNAME_CAST(sipName_clipBoundingRect), meth_QPainter_clipBoundingRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_clipBoundingRect)},
    {SIP_MLNAME_CAST(sipName_clipPath), meth_QPainter_clipPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_clipPath)},
    {SIP_MLNAME_CAST(sipName_clipRegion), meth_QPainter_clipRegion, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_clipRegion)},
    {SIP_MLNAME_CAST(sipName_combinedTransform), meth_QPainter_combinedTransform, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_combinedTransform)},
    {SIP_MLNAME_CAST(sipName_compositionMode), meth_QPainter_compositionMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_compositionMode)},
    {SIP_MLNAME_CAST(sipName_device), meth_QPainter_device, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_device)},
    {SIP_MLNAME_CAST(sipName_deviceTransform), meth_QPainter_deviceTransform, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_deviceTransform)},
    {SIP_MLNAME_CAST(sipName_drawArc), meth_QPainter_drawArc, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_drawArc)},
    {SIP_MLNAME_CAST(sipName_drawChord), meth_QPainter_drawChord, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_drawChord)},
    {SIP_MLNAME_CAST(sipName_drawConvexPolygon), meth_QPainter_drawConvexPolygon, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_drawConvexPolygon)},
    {SIP_MLNAME_CAST(sipName_drawEllipse), meth_QPainter_drawEllipse, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_drawEllipse)},
    {SIP_MLNAME_CAST(sipName_drawGlyphRun), meth_QPainter_drawGlyphRun, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_drawGlyphRun)},
    {SIP_MLNAME_CAST(sipName_drawImage), SIP_MLMETH_CAST(meth_QPainter_drawImage), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPainter_drawImage)},
    {SIP_MLNAME_CAST(sipName_drawLine), meth_QPainter_drawLine, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_drawLine)},
    {SIP_MLNAME_CAST(sipName_drawLines), meth_QPainter_drawLines, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_drawLines)},
    {SIP_MLNAME_CAST(sipName_drawPath), meth_QPainter_drawPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_drawPath)},
    {SIP_MLNAME_CAST(sipName_drawPicture), meth_QPainter_drawPicture, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_drawPicture)},
    {SIP_MLNAME_CAST(sipName_drawPie), meth_QPainter_drawPie, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_drawPie)},
    {SIP_MLNAME_CAST(sipName_drawPixmap), meth_QPainter_drawPixmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_drawPixmap)},
    {SIP_MLNAME_CAST(sipName_drawPixmapFragments), SIP_MLMETH_CAST(meth_QPainter_drawPixmapFragments), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPainter_drawPixmapFragments)},
    {SIP_MLNAME_CAST(sipName_drawPoint), meth_QPainter_drawPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_drawPoint)},
    {SIP_MLNAME_CAST(sipName_drawPoints), meth_QPainter_drawPoints, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_drawPoints)},
    {SIP_MLNAME_CAST(sipName_drawPolygon), SIP_MLMETH_CAST(meth_QPainter_drawPolygon), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPainter_drawPolygon)},
    {SIP_MLNAME_CAST(sipName_drawPolyline), meth_QPainter_drawPolyline, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_drawPolyline)},
    {SIP_MLNAME_CAST(sipName_drawRect), meth_QPainter_drawRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_drawRect)},
    {SIP_MLNAME_CAST(sipName_drawRects), meth_QPainter_drawRects, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_drawRects)},
    {SIP_MLNAME_CAST(sipName_drawRoundedRect), SIP_MLMETH_CAST(meth_QPainter_drawRoundedRect), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPainter_drawRoundedRect)},
    {SIP_MLNAME_CAST(sipName_drawStaticText), meth_QPainter_drawStaticText, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_drawStaticText)},
    {SIP_MLNAME_CAST(sipName_drawText), SIP_MLMETH_CAST(meth_QPainter_drawText), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPainter_drawText)},
    {SIP_MLNAME_CAST(sipName_drawTiledPixmap), SIP_MLMETH_CAST(meth_QPainter_drawTiledPixmap), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPainter_drawTiledPixmap)},
    {SIP_MLNAME_CAST(sipName_end), meth_QPainter_end, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_end)},
    {SIP_MLNAME_CAST(sipName_endNativePainting), meth_QPainter_endNativePainting, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_endNativePainting)},
    {SIP_MLNAME_CAST(sipName_eraseRect), meth_QPainter_eraseRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_eraseRect)},
    {SIP_MLNAME_CAST(sipName_fillPath), meth_QPainter_fillPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_fillPath)},
    {SIP_MLNAME_CAST(sipName_fillRect), meth_QPainter_fillRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_fillRect)},
    {SIP_MLNAME_CAST(sipName_font), meth_QPainter_font, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_font)},
    {SIP_MLNAME_CAST(sipName_fontInfo), meth_QPainter_fontInfo, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_fontInfo)},
    {SIP_MLNAME_CAST(sipName_fontMetrics), meth_QPainter_fontMetrics, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_fontMetrics)},
    {SIP_MLNAME_CAST(sipName_hasClipping), meth_QPainter_hasClipping, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_hasClipping)},
    {SIP_MLNAME_CAST(sipName_isActive), meth_QPainter_isActive, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_isActive)},
    {SIP_MLNAME_CAST(sipName_layoutDirection), meth_QPainter_layoutDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_layoutDirection)},
    {SIP_MLNAME_CAST(sipName_opacity), meth_QPainter_opacity, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_opacity)},
    {SIP_MLNAME_CAST(sipName_paintEngine), meth_QPainter_paintEngine, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_paintEngine)},
    {SIP_MLNAME_CAST(sipName_pen), meth_QPainter_pen, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_pen)},
    {SIP_MLNAME_CAST(sipName_renderHints), meth_QPainter_renderHints, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_renderHints)},
    {SIP_MLNAME_CAST(sipName_resetTransform), meth_QPainter_resetTransform, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_resetTransform)},
    {SIP_MLNAME_CAST(sipName_restore), meth_QPainter_restore, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_restore)},
    {SIP_MLNAME_CAST(sipName_rotate), meth_QPainter_rotate, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_rotate)},
    {SIP_MLNAME_CAST(sipName_save), meth_QPainter_save, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_save)},
    {SIP_MLNAME_CAST(sipName_scale), meth_QPainter_scale, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_scale)},
    {SIP_MLNAME_CAST(sipName_setBackground), meth_QPainter_setBackground, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_setBackground)},
    {SIP_MLNAME_CAST(sipName_setBackgroundMode), meth_QPainter_setBackgroundMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_setBackgroundMode)},
    {SIP_MLNAME_CAST(sipName_setBrush), meth_QPainter_setBrush, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_setBrush)},
    {SIP_MLNAME_CAST(sipName_setBrushOrigin), meth_QPainter_setBrushOrigin, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_setBrushOrigin)},
    {SIP_MLNAME_CAST(sipName_setClipPath), SIP_MLMETH_CAST(meth_QPainter_setClipPath), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPainter_setClipPath)},
    {SIP_MLNAME_CAST(sipName_setClipRect), SIP_MLMETH_CAST(meth_QPainter_setClipRect), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPainter_setClipRect)},
    {SIP_MLNAME_CAST(sipName_setClipRegion), SIP_MLMETH_CAST(meth_QPainter_setClipRegion), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPainter_setClipRegion)},
    {SIP_MLNAME_CAST(sipName_setClipping), meth_QPainter_setClipping, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_setClipping)},
    {SIP_MLNAME_CAST(sipName_setCompositionMode), meth_QPainter_setCompositionMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_setCompositionMode)},
    {SIP_MLNAME_CAST(sipName_setFont), meth_QPainter_setFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_setFont)},
    {SIP_MLNAME_CAST(sipName_setLayoutDirection), meth_QPainter_setLayoutDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_setLayoutDirection)},
    {SIP_MLNAME_CAST(sipName_setOpacity), meth_QPainter_setOpacity, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_setOpacity)},
    {SIP_MLNAME_CAST(sipName_setPen), meth_QPainter_setPen, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_setPen)},
    {SIP_MLNAME_CAST(sipName_setRenderHint), SIP_MLMETH_CAST(meth_QPainter_setRenderHint), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPainter_setRenderHint)},
    {SIP_MLNAME_CAST(sipName_setRenderHints), SIP_MLMETH_CAST(meth_QPainter_setRenderHints), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPainter_setRenderHints)},
    {SIP_MLNAME_CAST(sipName_setTransform), SIP_MLMETH_CAST(meth_QPainter_setTransform), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPainter_setTransform)},
    {SIP_MLNAME_CAST(sipName_setViewTransformEnabled), meth_QPainter_setViewTransformEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_setViewTransformEnabled)},
    {SIP_MLNAME_CAST(sipName_setViewport), meth_QPainter_setViewport, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_setViewport)},
    {SIP_MLNAME_CAST(sipName_setWindow), meth_QPainter_setWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_setWindow)},
    {SIP_MLNAME_CAST(sipName_setWorldMatrixEnabled), meth_QPainter_setWorldMatrixEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_setWorldMatrixEnabled)},
    {SIP_MLNAME_CAST(sipName_setWorldTransform), SIP_MLMETH_CAST(meth_QPainter_setWorldTransform), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPainter_setWorldTransform)},
    {SIP_MLNAME_CAST(sipName_shear), meth_QPainter_shear, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_shear)},
    {SIP_MLNAME_CAST(sipName_strokePath), meth_QPainter_strokePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_strokePath)},
    {SIP_MLNAME_CAST(sipName_testRenderHint), meth_QPainter_testRenderHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_testRenderHint)},
    {SIP_MLNAME_CAST(sipName_transform), meth_QPainter_transform, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_transform)},
    {SIP_MLNAME_CAST(sipName_translate), meth_QPainter_translate, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_translate)},
    {SIP_MLNAME_CAST(sipName_viewTransformEnabled), meth_QPainter_viewTransformEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_viewTransformEnabled)},
    {SIP_MLNAME_CAST(sipName_viewport), meth_QPainter_viewport, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_viewport)},
    {SIP_MLNAME_CAST(sipName_window), meth_QPainter_window, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_window)},
    {SIP_MLNAME_CAST(sipName_worldMatrixEnabled), meth_QPainter_worldMatrixEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_worldMatrixEnabled)},
    {SIP_MLNAME_CAST(sipName_worldTransform), meth_QPainter_worldTransform, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_worldTransform)}
};

static sipEnumMemberDef enummembers_QPainter[] = {
    {sipName_Antialiasing, static_cast<int>( ::QPainter::Antialiasing), 208},
    {sipName_CompositionMode_Clear, static_cast<int>( ::QPainter::CompositionMode_Clear), 204},
    {sipName_CompositionMode_ColorBurn, static_cast<int>( ::QPainter::CompositionMode_ColorBurn), 204},
    {sipName_CompositionMode_ColorDodge, static_cast<int>( ::QPainter::CompositionMode_ColorDodge), 204},
    {sipName_CompositionMode_Darken, static_cast<int>( ::QPainter::CompositionMode_Darken), 204},
    {sipName_CompositionMode_Destination, static_cast<int>( ::QPainter::CompositionMode_Destination), 204},
    {sipName_CompositionMode_DestinationAtop, static_cast<int>( ::QPainter::CompositionMode_DestinationAtop), 204},
    {sipName_CompositionMode_DestinationIn, static_cast<int>( ::QPainter::CompositionMode_DestinationIn), 204},
    {sipName_CompositionMode_DestinationOut, static_cast<int>( ::QPainter::CompositionMode_DestinationOut), 204},
    {sipName_CompositionMode_DestinationOver, static_cast<int>( ::QPainter::CompositionMode_DestinationOver), 204},
    {sipName_CompositionMode_Difference, static_cast<int>( ::QPainter::CompositionMode_Difference), 204},
    {sipName_CompositionMode_Exclusion, static_cast<int>( ::QPainter::CompositionMode_Exclusion), 204},
    {sipName_CompositionMode_HardLight, static_cast<int>( ::QPainter::CompositionMode_HardLight), 204},
    {sipName_CompositionMode_Lighten, static_cast<int>( ::QPainter::CompositionMode_Lighten), 204},
    {sipName_CompositionMode_Multiply, static_cast<int>( ::QPainter::CompositionMode_Multiply), 204},
    {sipName_CompositionMode_Overlay, static_cast<int>( ::QPainter::CompositionMode_Overlay), 204},
    {sipName_CompositionMode_Plus, static_cast<int>( ::QPainter::CompositionMode_Plus), 204},
    {sipName_CompositionMode_Screen, static_cast<int>( ::QPainter::CompositionMode_Screen), 204},
    {sipName_CompositionMode_SoftLight, static_cast<int>( ::QPainter::CompositionMode_SoftLight), 204},
    {sipName_CompositionMode_Source, static_cast<int>( ::QPainter::CompositionMode_Source), 204},
    {sipName_CompositionMode_SourceAtop, static_cast<int>( ::QPainter::CompositionMode_SourceAtop), 204},
    {sipName_CompositionMode_SourceIn, static_cast<int>( ::QPainter::CompositionMode_SourceIn), 204},
    {sipName_CompositionMode_SourceOut, static_cast<int>( ::QPainter::CompositionMode_SourceOut), 204},
    {sipName_CompositionMode_SourceOver, static_cast<int>( ::QPainter::CompositionMode_SourceOver), 204},
    {sipName_CompositionMode_Xor, static_cast<int>( ::QPainter::CompositionMode_Xor), 204},
    {sipName_HighQualityAntialiasing, static_cast<int>( ::QPainter::HighQualityAntialiasing), 208},
    {sipName_NonCosmeticDefaultPen, static_cast<int>( ::QPainter::NonCosmeticDefaultPen), 208},
    {sipName_OpaqueHint, static_cast<int>( ::QPainter::OpaqueHint), 206},
    {sipName_Qt4CompatiblePainting, static_cast<int>( ::QPainter::Qt4CompatiblePainting), 208},
    {sipName_RasterOp_ClearDestination, static_cast<int>( ::QPainter::RasterOp_ClearDestination), 204},
    {sipName_RasterOp_NotDestination, static_cast<int>( ::QPainter::RasterOp_NotDestination), 204},
    {sipName_RasterOp_NotSource, static_cast<int>( ::QPainter::RasterOp_NotSource), 204},
    {sipName_RasterOp_NotSourceAndDestination, static_cast<int>( ::QPainter::RasterOp_NotSourceAndDestination), 204},
    {sipName_RasterOp_NotSourceAndNotDestination, static_cast<int>( ::QPainter::RasterOp_NotSourceAndNotDestination), 204},
    {sipName_RasterOp_NotSourceOrDestination, static_cast<int>( ::QPainter::RasterOp_NotSourceOrDestination), 204},
    {sipName_RasterOp_NotSourceOrNotDestination, static_cast<int>( ::QPainter::RasterOp_NotSourceOrNotDestination), 204},
    {sipName_RasterOp_NotSourceXorDestination, static_cast<int>( ::QPainter::RasterOp_NotSourceXorDestination), 204},
    {sipName_RasterOp_SetDestination, static_cast<int>( ::QPainter::RasterOp_SetDestination), 204},
    {sipName_RasterOp_SourceAndDestination, static_cast<int>( ::QPainter::RasterOp_SourceAndDestination), 204},
    {sipName_RasterOp_SourceAndNotDestination, static_cast<int>( ::QPainter::RasterOp_SourceAndNotDestination), 204},
    {sipName_RasterOp_SourceOrDestination, static_cast<int>( ::QPainter::RasterOp_SourceOrDestination), 204},
    {sipName_RasterOp_SourceOrNotDestination, static_cast<int>( ::QPainter::RasterOp_SourceOrNotDestination), 204},
    {sipName_RasterOp_SourceXorDestination, static_cast<int>( ::QPainter::RasterOp_SourceXorDestination), 204},
    {sipName_SmoothPixmapTransform, static_cast<int>( ::QPainter::SmoothPixmapTransform), 208},
    {sipName_TextAntialiasing, static_cast<int>( ::QPainter::TextAntialiasing), 208},
};

PyDoc_STRVAR(doc_QPainter, "\1QPainter()\n"
"QPainter(QPaintDevice)");


static pyqt5ClassPluginDef plugin_QPainter = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QPainter = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_NONLAZY|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPainter,
        {SIP_NULLPTR},
        &plugin_QPainter
    },
    {
        sipNameNr_QPainter,
        {0, 0, 1},
        90, methods_QPainter,
        45, enummembers_QPainter,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPainter,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QPainter,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QPainter,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QPainter,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpagesize.sip"
#include <qpagesize.h>
#line 5303 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 5307 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 5310 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 97 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 5313 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 5316 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 5319 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QPageSize_swap, "swap(self, QPageSize)");

extern "C" {static PyObject *meth_QPageSize_swap(PyObject *, PyObject *);}
static PyObject *meth_QPageSize_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPageSize* a0;
         ::QPageSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPageSize, &sipCpp, sipType_QPageSize, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageSize, sipName_swap, doc_QPageSize_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageSize_isEquivalentTo, "isEquivalentTo(self, QPageSize) -> bool");

extern "C" {static PyObject *meth_QPageSize_isEquivalentTo(PyObject *, PyObject *);}
static PyObject *meth_QPageSize_isEquivalentTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageSize* a0;
        const  ::QPageSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPageSize, &sipCpp, sipType_QPageSize, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isEquivalentTo(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageSize, sipName_isEquivalentTo, doc_QPageSize_isEquivalentTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageSize_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QPageSize_isValid(PyObject *, PyObject *);}
static PyObject *meth_QPageSize_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPageSize, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageSize, sipName_isValid, doc_QPageSize_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageSize_key, "key(self) -> str\n"
"key(QPageSize.PageSizeId) -> str");

extern "C" {static PyObject *meth_QPageSize_key(PyObject *, PyObject *);}
static PyObject *meth_QPageSize_key(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPageSize, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->key());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    {
         ::QPageSize::PageSizeId a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QPageSize_PageSizeId, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QPageSize::key(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageSize, sipName_key, doc_QPageSize_key);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageSize_name, "name(self) -> str\n"
"name(QPageSize.PageSizeId) -> str");

extern "C" {static PyObject *meth_QPageSize_name(PyObject *, PyObject *);}
static PyObject *meth_QPageSize_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPageSize, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    {
         ::QPageSize::PageSizeId a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QPageSize_PageSizeId, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QPageSize::name(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageSize, sipName_name, doc_QPageSize_name);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageSize_id, "id(self) -> QPageSize.PageSizeId\n"
"id(QSize, matchPolicy: QPageSize.SizeMatchPolicy = QPageSize.FuzzyMatch) -> QPageSize.PageSizeId\n"
"id(QSizeF, QPageSize.Unit, matchPolicy: QPageSize.SizeMatchPolicy = QPageSize.FuzzyMatch) -> QPageSize.PageSizeId\n"
"id(int) -> QPageSize.PageSizeId");

extern "C" {static PyObject *meth_QPageSize_id(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPageSize_id(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageSize *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QPageSize, &sipCpp))
        {
             ::QPageSize::PageSizeId sipRes;

            sipRes = sipCpp->id();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QPageSize_PageSizeId);
        }
    }

    {
        const  ::QSize* a0;
         ::QPageSize::SizeMatchPolicy a1 = QPageSize::FuzzyMatch;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_matchPolicy,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J9|E", sipType_QSize, &a0, sipType_QPageSize_SizeMatchPolicy, &a1))
        {
             ::QPageSize::PageSizeId sipRes;

            sipRes =  ::QPageSize::id(*a0,a1);

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QPageSize_PageSizeId);
        }
    }

    {
        const  ::QSizeF* a0;
         ::QPageSize::Unit a1;
         ::QPageSize::SizeMatchPolicy a2 = QPageSize::FuzzyMatch;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_matchPolicy,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J9E|E", sipType_QSizeF, &a0, sipType_QPageSize_Unit, &a1, sipType_QPageSize_SizeMatchPolicy, &a2))
        {
             ::QPageSize::PageSizeId sipRes;

            sipRes =  ::QPageSize::id(*a0,a1,a2);

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QPageSize_PageSizeId);
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "i", &a0))
        {
             ::QPageSize::PageSizeId sipRes;

            sipRes =  ::QPageSize::id(a0);

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QPageSize_PageSizeId);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageSize, sipName_id, doc_QPageSize_id);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageSize_windowsId, "windowsId(self) -> int\n"
"windowsId(QPageSize.PageSizeId) -> int");

extern "C" {static PyObject *meth_QPageSize_windowsId(PyObject *, PyObject *);}
static PyObject *meth_QPageSize_windowsId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPageSize, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->windowsId();

            return SIPLong_FromLong(sipRes);
        }
    }

    {
         ::QPageSize::PageSizeId a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QPageSize_PageSizeId, &a0))
        {
            int sipRes;

            sipRes =  ::QPageSize::windowsId(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageSize, sipName_windowsId, doc_QPageSize_windowsId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageSize_definitionSize, "definitionSize(self) -> QSizeF\n"
"definitionSize(QPageSize.PageSizeId) -> QSizeF");

extern "C" {static PyObject *meth_QPageSize_definitionSize(PyObject *, PyObject *);}
static PyObject *meth_QPageSize_definitionSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPageSize, &sipCpp))
        {
             ::QSizeF*sipRes;

            sipRes = new  ::QSizeF(sipCpp->definitionSize());

            return sipConvertFromNewType(sipRes,sipType_QSizeF,SIP_NULLPTR);
        }
    }

    {
         ::QPageSize::PageSizeId a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QPageSize_PageSizeId, &a0))
        {
             ::QSizeF*sipRes;

            sipRes = new  ::QSizeF( ::QPageSize::definitionSize(a0));

            return sipConvertFromNewType(sipRes,sipType_QSizeF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageSize, sipName_definitionSize, doc_QPageSize_definitionSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageSize_definitionUnits, "definitionUnits(self) -> QPageSize.Unit\n"
"definitionUnits(QPageSize.PageSizeId) -> QPageSize.Unit");

extern "C" {static PyObject *meth_QPageSize_definitionUnits(PyObject *, PyObject *);}
static PyObject *meth_QPageSize_definitionUnits(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPageSize, &sipCpp))
        {
             ::QPageSize::Unit sipRes;

            sipRes = sipCpp->definitionUnits();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QPageSize_Unit);
        }
    }

    {
         ::QPageSize::PageSizeId a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QPageSize_PageSizeId, &a0))
        {
             ::QPageSize::Unit sipRes;

            sipRes =  ::QPageSize::definitionUnits(a0);

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QPageSize_Unit);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageSize, sipName_definitionUnits, doc_QPageSize_definitionUnits);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageSize_size, "size(self, QPageSize.Unit) -> QSizeF\n"
"size(QPageSize.PageSizeId, QPageSize.Unit) -> QSizeF");

extern "C" {static PyObject *meth_QPageSize_size(PyObject *, PyObject *);}
static PyObject *meth_QPageSize_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPageSize::Unit a0;
        const  ::QPageSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPageSize, &sipCpp, sipType_QPageSize_Unit, &a0))
        {
             ::QSizeF*sipRes;

            sipRes = new  ::QSizeF(sipCpp->size(a0));

            return sipConvertFromNewType(sipRes,sipType_QSizeF,SIP_NULLPTR);
        }
    }

    {
         ::QPageSize::PageSizeId a0;
         ::QPageSize::Unit a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "EE", sipType_QPageSize_PageSizeId, &a0, sipType_QPageSize_Unit, &a1))
        {
             ::QSizeF*sipRes;

            sipRes = new  ::QSizeF( ::QPageSize::size(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QSizeF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageSize, sipName_size, doc_QPageSize_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageSize_sizePoints, "sizePoints(self) -> QSize\n"
"sizePoints(QPageSize.PageSizeId) -> QSize");

extern "C" {static PyObject *meth_QPageSize_sizePoints(PyObject *, PyObject *);}
static PyObject *meth_QPageSize_sizePoints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPageSize, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->sizePoints());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    {
         ::QPageSize::PageSizeId a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QPageSize_PageSizeId, &a0))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize( ::QPageSize::sizePoints(a0));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageSize, sipName_sizePoints, doc_QPageSize_sizePoints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageSize_sizePixels, "sizePixels(self, int) -> QSize\n"
"sizePixels(QPageSize.PageSizeId, int) -> QSize");

extern "C" {static PyObject *meth_QPageSize_sizePixels(PyObject *, PyObject *);}
static PyObject *meth_QPageSize_sizePixels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QPageSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPageSize, &sipCpp, &a0))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->sizePixels(a0));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    {
         ::QPageSize::PageSizeId a0;
        int a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "Ei", sipType_QPageSize_PageSizeId, &a0, &a1))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize( ::QPageSize::sizePixels(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageSize, sipName_sizePixels, doc_QPageSize_sizePixels);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageSize_rect, "rect(self, QPageSize.Unit) -> QRectF");

extern "C" {static PyObject *meth_QPageSize_rect(PyObject *, PyObject *);}
static PyObject *meth_QPageSize_rect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPageSize::Unit a0;
        const  ::QPageSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPageSize, &sipCpp, sipType_QPageSize_Unit, &a0))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->rect(a0));

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageSize, sipName_rect, doc_QPageSize_rect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageSize_rectPoints, "rectPoints(self) -> QRect");

extern "C" {static PyObject *meth_QPageSize_rectPoints(PyObject *, PyObject *);}
static PyObject *meth_QPageSize_rectPoints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPageSize, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->rectPoints());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageSize, sipName_rectPoints, doc_QPageSize_rectPoints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageSize_rectPixels, "rectPixels(self, int) -> QRect");

extern "C" {static PyObject *meth_QPageSize_rectPixels(PyObject *, PyObject *);}
static PyObject *meth_QPageSize_rectPixels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QPageSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPageSize, &sipCpp, &a0))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->rectPixels(a0));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageSize, sipName_rectPixels, doc_QPageSize_rectPixels);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QPageSize___eq__(PyObject *,PyObject *);}
static PyObject *slot_QPageSize___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPageSize *sipCpp = reinterpret_cast< ::QPageSize *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPageSize));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageSize* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPageSize, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QPageSize, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QPageSize___ne__(PyObject *,PyObject *);}
static PyObject *slot_QPageSize___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPageSize *sipCpp = reinterpret_cast< ::QPageSize *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPageSize));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageSize* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPageSize, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QPageSize, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QPageSize(void *, int);}
static void release_QPageSize(void *sipCppV, int)
{
    delete reinterpret_cast< ::QPageSize *>(sipCppV);
}


extern "C" {static void assign_QPageSize(void *, SIP_SSIZE_T, void *);}
static void assign_QPageSize(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QPageSize *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QPageSize *>(sipSrc);
}


extern "C" {static void *array_QPageSize(SIP_SSIZE_T);}
static void *array_QPageSize(SIP_SSIZE_T sipNrElem)
{
    return new  ::QPageSize[sipNrElem];
}


extern "C" {static void *copy_QPageSize(const void *, SIP_SSIZE_T);}
static void *copy_QPageSize(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QPageSize(reinterpret_cast<const  ::QPageSize *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPageSize(sipSimpleWrapper *);}
static void dealloc_QPageSize(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPageSize(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QPageSize(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPageSize(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QPageSize *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QPageSize();

            return sipCpp;
        }
    }

    {
         ::QPageSize::PageSizeId a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "E", sipType_QPageSize_PageSizeId, &a0))
        {
            sipCpp = new  ::QPageSize(a0);

            return sipCpp;
        }
    }

    {
        const  ::QSize* a0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
         ::QPageSize::SizeMatchPolicy a2 = QPageSize::FuzzyMatch;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_name,
            sipName_matchPolicy,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|J1E", sipType_QSize, &a0, sipType_QString,&a1, &a1State, sipType_QPageSize_SizeMatchPolicy, &a2))
        {
            sipCpp = new  ::QPageSize(*a0,*a1,a2);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipCpp;
        }
    }

    {
        const  ::QSizeF* a0;
         ::QPageSize::Unit a1;
        const  ::QString& a2def = QString();
        const  ::QString* a2 = &a2def;
        int a2State = 0;
         ::QPageSize::SizeMatchPolicy a3 = QPageSize::FuzzyMatch;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_name,
            sipName_matchPolicy,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9E|J1E", sipType_QSizeF, &a0, sipType_QPageSize_Unit, &a1, sipType_QString,&a2, &a2State, sipType_QPageSize_SizeMatchPolicy, &a3))
        {
            sipCpp = new  ::QPageSize(*a0,a1,*a2,a3);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            return sipCpp;
        }
    }

    {
        const  ::QPageSize* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QPageSize, &a0))
        {
            sipCpp = new  ::QPageSize(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QPageSize[] = {
    {(void *)slot_QPageSize___eq__, eq_slot},
    {(void *)slot_QPageSize___ne__, ne_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QPageSize[] = {
    {SIP_MLNAME_CAST(sipName_definitionSize), meth_QPageSize_definitionSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageSize_definitionSize)},
    {SIP_MLNAME_CAST(sipName_definitionUnits), meth_QPageSize_definitionUnits, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageSize_definitionUnits)},
    {SIP_MLNAME_CAST(sipName_id), SIP_MLMETH_CAST(meth_QPageSize_id), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPageSize_id)},
    {SIP_MLNAME_CAST(sipName_isEquivalentTo), meth_QPageSize_isEquivalentTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageSize_isEquivalentTo)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QPageSize_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageSize_isValid)},
    {SIP_MLNAME_CAST(sipName_key), meth_QPageSize_key, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageSize_key)},
    {SIP_MLNAME_CAST(sipName_name), meth_QPageSize_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageSize_name)},
    {SIP_MLNAME_CAST(sipName_rect), meth_QPageSize_rect, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageSize_rect)},
    {SIP_MLNAME_CAST(sipName_rectPixels), meth_QPageSize_rectPixels, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageSize_rectPixels)},
    {SIP_MLNAME_CAST(sipName_rectPoints), meth_QPageSize_rectPoints, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageSize_rectPoints)},
    {SIP_MLNAME_CAST(sipName_size), meth_QPageSize_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageSize_size)},
    {SIP_MLNAME_CAST(sipName_sizePixels), meth_QPageSize_sizePixels, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageSize_sizePixels)},
    {SIP_MLNAME_CAST(sipName_sizePoints), meth_QPageSize_sizePoints, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageSize_sizePoints)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QPageSize_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageSize_swap)},
    {SIP_MLNAME_CAST(sipName_windowsId), meth_QPageSize_windowsId, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageSize_windowsId)}
};

static sipEnumMemberDef enummembers_QPageSize[] = {
    {sipName_A0, static_cast<int>( ::QPageSize::A0), 184},
    {sipName_A1, static_cast<int>( ::QPageSize::A1), 184},
    {sipName_A10, static_cast<int>( ::QPageSize::A10), 184},
    {sipName_A2, static_cast<int>( ::QPageSize::A2), 184},
    {sipName_A3, static_cast<int>( ::QPageSize::A3), 184},
    {sipName_A3Extra, static_cast<int>( ::QPageSize::A3Extra), 184},
    {sipName_A4, static_cast<int>( ::QPageSize::A4), 184},
    {sipName_A4Extra, static_cast<int>( ::QPageSize::A4Extra), 184},
    {sipName_A4Plus, static_cast<int>( ::QPageSize::A4Plus), 184},
    {sipName_A4Small, static_cast<int>( ::QPageSize::A4Small), 184},
    {sipName_A5, static_cast<int>( ::QPageSize::A5), 184},
    {sipName_A5Extra, static_cast<int>( ::QPageSize::A5Extra), 184},
    {sipName_A6, static_cast<int>( ::QPageSize::A6), 184},
    {sipName_A7, static_cast<int>( ::QPageSize::A7), 184},
    {sipName_A8, static_cast<int>( ::QPageSize::A8), 184},
    {sipName_A9, static_cast<int>( ::QPageSize::A9), 184},
    {sipName_AnsiA, static_cast<int>( ::QPageSize::AnsiA), 184},
    {sipName_AnsiB, static_cast<int>( ::QPageSize::AnsiB), 184},
    {sipName_AnsiC, static_cast<int>( ::QPageSize::AnsiC), 184},
    {sipName_AnsiD, static_cast<int>( ::QPageSize::AnsiD), 184},
    {sipName_AnsiE, static_cast<int>( ::QPageSize::AnsiE), 184},
    {sipName_ArchA, static_cast<int>( ::QPageSize::ArchA), 184},
    {sipName_ArchB, static_cast<int>( ::QPageSize::ArchB), 184},
    {sipName_ArchC, static_cast<int>( ::QPageSize::ArchC), 184},
    {sipName_ArchD, static_cast<int>( ::QPageSize::ArchD), 184},
    {sipName_ArchE, static_cast<int>( ::QPageSize::ArchE), 184},
    {sipName_B0, static_cast<int>( ::QPageSize::B0), 184},
    {sipName_B1, static_cast<int>( ::QPageSize::B1), 184},
    {sipName_B10, static_cast<int>( ::QPageSize::B10), 184},
    {sipName_B2, static_cast<int>( ::QPageSize::B2), 184},
    {sipName_B3, static_cast<int>( ::QPageSize::B3), 184},
    {sipName_B4, static_cast<int>( ::QPageSize::B4), 184},
    {sipName_B5, static_cast<int>( ::QPageSize::B5), 184},
    {sipName_B5Extra, static_cast<int>( ::QPageSize::B5Extra), 184},
    {sipName_B6, static_cast<int>( ::QPageSize::B6), 184},
    {sipName_B7, static_cast<int>( ::QPageSize::B7), 184},
    {sipName_B8, static_cast<int>( ::QPageSize::B8), 184},
    {sipName_B9, static_cast<int>( ::QPageSize::B9), 184},
    {sipName_C5E, static_cast<int>( ::QPageSize::C5E), 184},
    {sipName_Cicero, static_cast<int>( ::QPageSize::Cicero), 186},
    {sipName_Comm10E, static_cast<int>( ::QPageSize::Comm10E), 184},
    {sipName_Custom, static_cast<int>( ::QPageSize::Custom), 184},
    {sipName_DLE, static_cast<int>( ::QPageSize::DLE), 184},
    {sipName_Didot, static_cast<int>( ::QPageSize::Didot), 186},
    {sipName_DoublePostcard, static_cast<int>( ::QPageSize::DoublePostcard), 184},
    {sipName_Envelope10, static_cast<int>( ::QPageSize::Envelope10), 184},
    {sipName_Envelope11, static_cast<int>( ::QPageSize::Envelope11), 184},
    {sipName_Envelope12, static_cast<int>( ::QPageSize::Envelope12), 184},
    {sipName_Envelope14, static_cast<int>( ::QPageSize::Envelope14), 184},
    {sipName_Envelope9, static_cast<int>( ::QPageSize::Envelope9), 184},
    {sipName_EnvelopeB4, static_cast<int>( ::QPageSize::EnvelopeB4), 184},
    {sipName_EnvelopeB5, static_cast<int>( ::QPageSize::EnvelopeB5), 184},
    {sipName_EnvelopeB6, static_cast<int>( ::QPageSize::EnvelopeB6), 184},
    {sipName_EnvelopeC0, static_cast<int>( ::QPageSize::EnvelopeC0), 184},
    {sipName_EnvelopeC1, static_cast<int>( ::QPageSize::EnvelopeC1), 184},
    {sipName_EnvelopeC2, static_cast<int>( ::QPageSize::EnvelopeC2), 184},
    {sipName_EnvelopeC3, static_cast<int>( ::QPageSize::EnvelopeC3), 184},
    {sipName_EnvelopeC4, static_cast<int>( ::QPageSize::EnvelopeC4), 184},
    {sipName_EnvelopeC5, static_cast<int>( ::QPageSize::EnvelopeC5), 184},
    {sipName_EnvelopeC6, static_cast<int>( ::QPageSize::EnvelopeC6), 184},
    {sipName_EnvelopeC65, static_cast<int>( ::QPageSize::EnvelopeC65), 184},
    {sipName_EnvelopeC7, static_cast<int>( ::QPageSize::EnvelopeC7), 184},
    {sipName_EnvelopeChou3, static_cast<int>( ::QPageSize::EnvelopeChou3), 184},
    {sipName_EnvelopeChou4, static_cast<int>( ::QPageSize::EnvelopeChou4), 184},
    {sipName_EnvelopeDL, static_cast<int>( ::QPageSize::EnvelopeDL), 184},
    {sipName_EnvelopeInvite, static_cast<int>( ::QPageSize::EnvelopeInvite), 184},
    {sipName_EnvelopeItalian, static_cast<int>( ::QPageSize::EnvelopeItalian), 184},
    {sipName_EnvelopeKaku2, static_cast<int>( ::QPageSize::EnvelopeKaku2), 184},
    {sipName_EnvelopeKaku3, static_cast<int>( ::QPageSize::EnvelopeKaku3), 184},
    {sipName_EnvelopeMonarch, static_cast<int>( ::QPageSize::EnvelopeMonarch), 184},
    {sipName_EnvelopePersonal, static_cast<int>( ::QPageSize::EnvelopePersonal), 184},
    {sipName_EnvelopePrc1, static_cast<int>( ::QPageSize::EnvelopePrc1), 184},
    {sipName_EnvelopePrc10, static_cast<int>( ::QPageSize::EnvelopePrc10), 184},
    {sipName_EnvelopePrc2, static_cast<int>( ::QPageSize::EnvelopePrc2), 184},
    {sipName_EnvelopePrc3, static_cast<int>( ::QPageSize::EnvelopePrc3), 184},
    {sipName_EnvelopePrc4, static_cast<int>( ::QPageSize::EnvelopePrc4), 184},
    {sipName_EnvelopePrc5, static_cast<int>( ::QPageSize::EnvelopePrc5), 184},
    {sipName_EnvelopePrc6, static_cast<int>( ::QPageSize::EnvelopePrc6), 184},
    {sipName_EnvelopePrc7, static_cast<int>( ::QPageSize::EnvelopePrc7), 184},
    {sipName_EnvelopePrc8, static_cast<int>( ::QPageSize::EnvelopePrc8), 184},
    {sipName_EnvelopePrc9, static_cast<int>( ::QPageSize::EnvelopePrc9), 184},
    {sipName_EnvelopeYou4, static_cast<int>( ::QPageSize::EnvelopeYou4), 184},
    {sipName_ExactMatch, static_cast<int>( ::QPageSize::ExactMatch), 185},
    {sipName_Executive, static_cast<int>( ::QPageSize::Executive), 184},
    {sipName_ExecutiveStandard, static_cast<int>( ::QPageSize::ExecutiveStandard), 184},
    {sipName_FanFoldGerman, static_cast<int>( ::QPageSize::FanFoldGerman), 184},
    {sipName_FanFoldGermanLegal, static_cast<int>( ::QPageSize::FanFoldGermanLegal), 184},
    {sipName_FanFoldUS, static_cast<int>( ::QPageSize::FanFoldUS), 184},
    {sipName_Folio, static_cast<int>( ::QPageSize::Folio), 184},
    {sipName_FuzzyMatch, static_cast<int>( ::QPageSize::FuzzyMatch), 185},
    {sipName_FuzzyOrientationMatch, static_cast<int>( ::QPageSize::FuzzyOrientationMatch), 185},
    {sipName_Imperial10x11, static_cast<int>( ::QPageSize::Imperial10x11), 184},
    {sipName_Imperial10x13, static_cast<int>( ::QPageSize::Imperial10x13), 184},
    {sipName_Imperial10x14, static_cast<int>( ::QPageSize::Imperial10x14), 184},
    {sipName_Imperial12x11, static_cast<int>( ::QPageSize::Imperial12x11), 184},
    {sipName_Imperial15x11, static_cast<int>( ::QPageSize::Imperial15x11), 184},
    {sipName_Imperial7x9, static_cast<int>( ::QPageSize::Imperial7x9), 184},
    {sipName_Imperial8x10, static_cast<int>( ::QPageSize::Imperial8x10), 184},
    {sipName_Imperial9x11, static_cast<int>( ::QPageSize::Imperial9x11), 184},
    {sipName_Imperial9x12, static_cast<int>( ::QPageSize::Imperial9x12), 184},
    {sipName_Inch, static_cast<int>( ::QPageSize::Inch), 186},
    {sipName_JisB0, static_cast<int>( ::QPageSize::JisB0), 184},
    {sipName_JisB1, static_cast<int>( ::QPageSize::JisB1), 184},
    {sipName_JisB10, static_cast<int>( ::QPageSize::JisB10), 184},
    {sipName_JisB2, static_cast<int>( ::QPageSize::JisB2), 184},
    {sipName_JisB3, static_cast<int>( ::QPageSize::JisB3), 184},
    {sipName_JisB4, static_cast<int>( ::QPageSize::JisB4), 184},
    {sipName_JisB5, static_cast<int>( ::QPageSize::JisB5), 184},
    {sipName_JisB6, static_cast<int>( ::QPageSize::JisB6), 184},
    {sipName_JisB7, static_cast<int>( ::QPageSize::JisB7), 184},
    {sipName_JisB8, static_cast<int>( ::QPageSize::JisB8), 184},
    {sipName_JisB9, static_cast<int>( ::QPageSize::JisB9), 184},
    {sipName_LastPageSize, static_cast<int>( ::QPageSize::LastPageSize), 184},
    {sipName_Ledger, static_cast<int>( ::QPageSize::Ledger), 184},
    {sipName_Legal, static_cast<int>( ::QPageSize::Legal), 184},
    {sipName_LegalExtra, static_cast<int>( ::QPageSize::LegalExtra), 184},
    {sipName_Letter, static_cast<int>( ::QPageSize::Letter), 184},
    {sipName_LetterExtra, static_cast<int>( ::QPageSize::LetterExtra), 184},
    {sipName_LetterPlus, static_cast<int>( ::QPageSize::LetterPlus), 184},
    {sipName_LetterSmall, static_cast<int>( ::QPageSize::LetterSmall), 184},
    {sipName_Millimeter, static_cast<int>( ::QPageSize::Millimeter), 186},
    {sipName_NPageSize, static_cast<int>( ::QPageSize::NPageSize), 184},
    {sipName_NPaperSize, static_cast<int>( ::QPageSize::NPaperSize), 184},
    {sipName_Note, static_cast<int>( ::QPageSize::Note), 184},
    {sipName_Pica, static_cast<int>( ::QPageSize::Pica), 186},
    {sipName_Point, static_cast<int>( ::QPageSize::Point), 186},
    {sipName_Postcard, static_cast<int>( ::QPageSize::Postcard), 184},
    {sipName_Prc16K, static_cast<int>( ::QPageSize::Prc16K), 184},
    {sipName_Prc32K, static_cast<int>( ::QPageSize::Prc32K), 184},
    {sipName_Prc32KBig, static_cast<int>( ::QPageSize::Prc32KBig), 184},
    {sipName_Quarto, static_cast<int>( ::QPageSize::Quarto), 184},
    {sipName_Statement, static_cast<int>( ::QPageSize::Statement), 184},
    {sipName_SuperA, static_cast<int>( ::QPageSize::SuperA), 184},
    {sipName_SuperB, static_cast<int>( ::QPageSize::SuperB), 184},
    {sipName_Tabloid, static_cast<int>( ::QPageSize::Tabloid), 184},
    {sipName_TabloidExtra, static_cast<int>( ::QPageSize::TabloidExtra), 184},
};

PyDoc_STRVAR(doc_QPageSize, "\1QPageSize()\n"
"QPageSize(QPageSize.PageSizeId)\n"
"QPageSize(QSize, name: str = '', matchPolicy: QPageSize.SizeMatchPolicy = QPageSize.FuzzyMatch)\n"
"QPageSize(QSizeF, QPageSize.Unit, name: str = '', matchPolicy: QPageSize.SizeMatchPolicy = QPageSize.FuzzyMatch)\n"
"QPageSize(QPageSize)");


static pyqt5ClassPluginDef plugin_QPageSize = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QPageSize = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPageSize,
        {SIP_NULLPTR},
        &plugin_QPageSize
    },
    {
        sipNameNr_QPageSize,
        {0, 0, 1},
        15, methods_QPageSize,
        136, enummembers_QPageSize,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPageSize,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QPageSize,
    init_type_QPageSize,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QPageSize,
    assign_QPageSize,
    array_QPageSize,
    copy_QPageSize,
    release_QPageSize,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpagelayout.sip"
#include <qpagelayout.h>
#line 6353 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpagesize.sip"
#include <qpagesize.h>
#line 6357 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 115 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 6360 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 6363 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 6366 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 6369 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QPageLayout_swap, "swap(self, QPageLayout)");

extern "C" {static PyObject *meth_QPageLayout_swap(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPageLayout* a0;
         ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPageLayout, &sipCpp, sipType_QPageLayout, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_swap, doc_QPageLayout_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_isEquivalentTo, "isEquivalentTo(self, QPageLayout) -> bool");

extern "C" {static PyObject *meth_QPageLayout_isEquivalentTo(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_isEquivalentTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageLayout* a0;
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPageLayout, &sipCpp, sipType_QPageLayout, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isEquivalentTo(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_isEquivalentTo, doc_QPageLayout_isEquivalentTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QPageLayout_isValid(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPageLayout, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_isValid, doc_QPageLayout_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_setMode, "setMode(self, QPageLayout.Mode)");

extern "C" {static PyObject *meth_QPageLayout_setMode(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_setMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPageLayout::Mode a0;
         ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPageLayout, &sipCpp, sipType_QPageLayout_Mode, &a0))
        {
            sipCpp->setMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_setMode, doc_QPageLayout_setMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_mode, "mode(self) -> QPageLayout.Mode");

extern "C" {static PyObject *meth_QPageLayout_mode(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_mode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPageLayout, &sipCpp))
        {
             ::QPageLayout::Mode sipRes;

            sipRes = sipCpp->mode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QPageLayout_Mode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_mode, doc_QPageLayout_mode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_setPageSize, "setPageSize(self, QPageSize, minMargins: QMarginsF = QMarginsF(0,0,0,0))");

extern "C" {static PyObject *meth_QPageLayout_setPageSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_setPageSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageSize* a0;
        const  ::QMarginsF& a1def = QMarginsF(0,0,0,0);
        const  ::QMarginsF* a1 = &a1def;
         ::QPageLayout *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_minMargins,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|J9", &sipSelf, sipType_QPageLayout, &sipCpp, sipType_QPageSize, &a0, sipType_QMarginsF, &a1))
        {
            sipCpp->setPageSize(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_setPageSize, doc_QPageLayout_setPageSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_pageSize, "pageSize(self) -> QPageSize");

extern "C" {static PyObject *meth_QPageLayout_pageSize(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_pageSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPageLayout, &sipCpp))
        {
             ::QPageSize*sipRes;

            sipRes = new  ::QPageSize(sipCpp->pageSize());

            return sipConvertFromNewType(sipRes,sipType_QPageSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_pageSize, doc_QPageLayout_pageSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_setOrientation, "setOrientation(self, QPageLayout.Orientation)");

extern "C" {static PyObject *meth_QPageLayout_setOrientation(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_setOrientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPageLayout::Orientation a0;
         ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPageLayout, &sipCpp, sipType_QPageLayout_Orientation, &a0))
        {
            sipCpp->setOrientation(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_setOrientation, doc_QPageLayout_setOrientation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_orientation, "orientation(self) -> QPageLayout.Orientation");

extern "C" {static PyObject *meth_QPageLayout_orientation(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_orientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPageLayout, &sipCpp))
        {
             ::QPageLayout::Orientation sipRes;

            sipRes = sipCpp->orientation();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QPageLayout_Orientation);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_orientation, doc_QPageLayout_orientation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_setUnits, "setUnits(self, QPageLayout.Unit)");

extern "C" {static PyObject *meth_QPageLayout_setUnits(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_setUnits(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPageLayout::Unit a0;
         ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPageLayout, &sipCpp, sipType_QPageLayout_Unit, &a0))
        {
            sipCpp->setUnits(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_setUnits, doc_QPageLayout_setUnits);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_units, "units(self) -> QPageLayout.Unit");

extern "C" {static PyObject *meth_QPageLayout_units(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_units(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPageLayout, &sipCpp))
        {
             ::QPageLayout::Unit sipRes;

            sipRes = sipCpp->units();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QPageLayout_Unit);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_units, doc_QPageLayout_units);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_setMargins, "setMargins(self, QMarginsF) -> bool");

extern "C" {static PyObject *meth_QPageLayout_setMargins(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_setMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMarginsF* a0;
         ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPageLayout, &sipCpp, sipType_QMarginsF, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setMargins(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_setMargins, doc_QPageLayout_setMargins);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_setLeftMargin, "setLeftMargin(self, float) -> bool");

extern "C" {static PyObject *meth_QPageLayout_setLeftMargin(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_setLeftMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPageLayout, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setLeftMargin(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_setLeftMargin, doc_QPageLayout_setLeftMargin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_setRightMargin, "setRightMargin(self, float) -> bool");

extern "C" {static PyObject *meth_QPageLayout_setRightMargin(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_setRightMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPageLayout, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setRightMargin(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_setRightMargin, doc_QPageLayout_setRightMargin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_setTopMargin, "setTopMargin(self, float) -> bool");

extern "C" {static PyObject *meth_QPageLayout_setTopMargin(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_setTopMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPageLayout, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setTopMargin(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_setTopMargin, doc_QPageLayout_setTopMargin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_setBottomMargin, "setBottomMargin(self, float) -> bool");

extern "C" {static PyObject *meth_QPageLayout_setBottomMargin(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_setBottomMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPageLayout, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setBottomMargin(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_setBottomMargin, doc_QPageLayout_setBottomMargin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_margins, "margins(self) -> QMarginsF\n"
"margins(self, QPageLayout.Unit) -> QMarginsF");

extern "C" {static PyObject *meth_QPageLayout_margins(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_margins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPageLayout, &sipCpp))
        {
             ::QMarginsF*sipRes;

            sipRes = new  ::QMarginsF(sipCpp->margins());

            return sipConvertFromNewType(sipRes,sipType_QMarginsF,SIP_NULLPTR);
        }
    }

    {
         ::QPageLayout::Unit a0;
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPageLayout, &sipCpp, sipType_QPageLayout_Unit, &a0))
        {
             ::QMarginsF*sipRes;

            sipRes = new  ::QMarginsF(sipCpp->margins(a0));

            return sipConvertFromNewType(sipRes,sipType_QMarginsF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_margins, doc_QPageLayout_margins);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_marginsPoints, "marginsPoints(self) -> QMargins");

extern "C" {static PyObject *meth_QPageLayout_marginsPoints(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_marginsPoints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPageLayout, &sipCpp))
        {
             ::QMargins*sipRes;

            sipRes = new  ::QMargins(sipCpp->marginsPoints());

            return sipConvertFromNewType(sipRes,sipType_QMargins,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_marginsPoints, doc_QPageLayout_marginsPoints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_marginsPixels, "marginsPixels(self, int) -> QMargins");

extern "C" {static PyObject *meth_QPageLayout_marginsPixels(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_marginsPixels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPageLayout, &sipCpp, &a0))
        {
             ::QMargins*sipRes;

            sipRes = new  ::QMargins(sipCpp->marginsPixels(a0));

            return sipConvertFromNewType(sipRes,sipType_QMargins,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_marginsPixels, doc_QPageLayout_marginsPixels);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_setMinimumMargins, "setMinimumMargins(self, QMarginsF)");

extern "C" {static PyObject *meth_QPageLayout_setMinimumMargins(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_setMinimumMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMarginsF* a0;
         ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPageLayout, &sipCpp, sipType_QMarginsF, &a0))
        {
            sipCpp->setMinimumMargins(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_setMinimumMargins, doc_QPageLayout_setMinimumMargins);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_minimumMargins, "minimumMargins(self) -> QMarginsF");

extern "C" {static PyObject *meth_QPageLayout_minimumMargins(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_minimumMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPageLayout, &sipCpp))
        {
             ::QMarginsF*sipRes;

            sipRes = new  ::QMarginsF(sipCpp->minimumMargins());

            return sipConvertFromNewType(sipRes,sipType_QMarginsF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_minimumMargins, doc_QPageLayout_minimumMargins);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_maximumMargins, "maximumMargins(self) -> QMarginsF");

extern "C" {static PyObject *meth_QPageLayout_maximumMargins(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_maximumMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPageLayout, &sipCpp))
        {
             ::QMarginsF*sipRes;

            sipRes = new  ::QMarginsF(sipCpp->maximumMargins());

            return sipConvertFromNewType(sipRes,sipType_QMarginsF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_maximumMargins, doc_QPageLayout_maximumMargins);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_fullRect, "fullRect(self) -> QRectF\n"
"fullRect(self, QPageLayout.Unit) -> QRectF");

extern "C" {static PyObject *meth_QPageLayout_fullRect(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_fullRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPageLayout, &sipCpp))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->fullRect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    {
         ::QPageLayout::Unit a0;
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPageLayout, &sipCpp, sipType_QPageLayout_Unit, &a0))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->fullRect(a0));

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_fullRect, doc_QPageLayout_fullRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_fullRectPoints, "fullRectPoints(self) -> QRect");

extern "C" {static PyObject *meth_QPageLayout_fullRectPoints(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_fullRectPoints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPageLayout, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->fullRectPoints());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_fullRectPoints, doc_QPageLayout_fullRectPoints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_fullRectPixels, "fullRectPixels(self, int) -> QRect");

extern "C" {static PyObject *meth_QPageLayout_fullRectPixels(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_fullRectPixels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPageLayout, &sipCpp, &a0))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->fullRectPixels(a0));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_fullRectPixels, doc_QPageLayout_fullRectPixels);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_paintRect, "paintRect(self) -> QRectF\n"
"paintRect(self, QPageLayout.Unit) -> QRectF");

extern "C" {static PyObject *meth_QPageLayout_paintRect(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_paintRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPageLayout, &sipCpp))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->paintRect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    {
         ::QPageLayout::Unit a0;
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPageLayout, &sipCpp, sipType_QPageLayout_Unit, &a0))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->paintRect(a0));

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_paintRect, doc_QPageLayout_paintRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_paintRectPoints, "paintRectPoints(self) -> QRect");

extern "C" {static PyObject *meth_QPageLayout_paintRectPoints(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_paintRectPoints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPageLayout, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->paintRectPoints());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_paintRectPoints, doc_QPageLayout_paintRectPoints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPageLayout_paintRectPixels, "paintRectPixels(self, int) -> QRect");

extern "C" {static PyObject *meth_QPageLayout_paintRectPixels(PyObject *, PyObject *);}
static PyObject *meth_QPageLayout_paintRectPixels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QPageLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPageLayout, &sipCpp, &a0))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->paintRectPixels(a0));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPageLayout, sipName_paintRectPixels, doc_QPageLayout_paintRectPixels);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QPageLayout___eq__(PyObject *,PyObject *);}
static PyObject *slot_QPageLayout___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPageLayout *sipCpp = reinterpret_cast< ::QPageLayout *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPageLayout));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageLayout* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPageLayout, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QPageLayout, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QPageLayout___ne__(PyObject *,PyObject *);}
static PyObject *slot_QPageLayout___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPageLayout *sipCpp = reinterpret_cast< ::QPageLayout *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPageLayout));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageLayout* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPageLayout, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QPageLayout, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QPageLayout(void *, int);}
static void release_QPageLayout(void *sipCppV, int)
{
    delete reinterpret_cast< ::QPageLayout *>(sipCppV);
}


extern "C" {static void assign_QPageLayout(void *, SIP_SSIZE_T, void *);}
static void assign_QPageLayout(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QPageLayout *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QPageLayout *>(sipSrc);
}


extern "C" {static void *array_QPageLayout(SIP_SSIZE_T);}
static void *array_QPageLayout(SIP_SSIZE_T sipNrElem)
{
    return new  ::QPageLayout[sipNrElem];
}


extern "C" {static void *copy_QPageLayout(const void *, SIP_SSIZE_T);}
static void *copy_QPageLayout(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QPageLayout(reinterpret_cast<const  ::QPageLayout *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPageLayout(sipSimpleWrapper *);}
static void dealloc_QPageLayout(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPageLayout(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QPageLayout(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPageLayout(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QPageLayout *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QPageLayout();

            return sipCpp;
        }
    }

    {
        const  ::QPageSize* a0;
         ::QPageLayout::Orientation a1;
        const  ::QMarginsF* a2;
         ::QPageLayout::Unit a3 = QPageLayout::Point;
        const  ::QMarginsF& a4def = QMarginsF(0,0,0,0);
        const  ::QMarginsF* a4 = &a4def;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_units,
            sipName_minMargins,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9EJ9|EJ9", sipType_QPageSize, &a0, sipType_QPageLayout_Orientation, &a1, sipType_QMarginsF, &a2, sipType_QPageLayout_Unit, &a3, sipType_QMarginsF, &a4))
        {
            sipCpp = new  ::QPageLayout(*a0,a1,*a2,a3,*a4);

            return sipCpp;
        }
    }

    {
        const  ::QPageLayout* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QPageLayout, &a0))
        {
            sipCpp = new  ::QPageLayout(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QPageLayout[] = {
    {(void *)slot_QPageLayout___eq__, eq_slot},
    {(void *)slot_QPageLayout___ne__, ne_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QPageLayout[] = {
    {SIP_MLNAME_CAST(sipName_fullRect), meth_QPageLayout_fullRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageLayout_fullRect)},
    {SIP_MLNAME_CAST(sipName_fullRectPixels), meth_QPageLayout_fullRectPixels, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageLayout_fullRectPixels)},
    {SIP_MLNAME_CAST(sipName_fullRectPoints), meth_QPageLayout_fullRectPoints, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageLayout_fullRectPoints)},
    {SIP_MLNAME_CAST(sipName_isEquivalentTo), meth_QPageLayout_isEquivalentTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageLayout_isEquivalentTo)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QPageLayout_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageLayout_isValid)},
    {SIP_MLNAME_CAST(sipName_margins), meth_QPageLayout_margins, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageLayout_margins)},
    {SIP_MLNAME_CAST(sipName_marginsPixels), meth_QPageLayout_marginsPixels, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageLayout_marginsPixels)},
    {SIP_MLNAME_CAST(sipName_marginsPoints), meth_QPageLayout_marginsPoints, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageLayout_marginsPoints)},
    {SIP_MLNAME_CAST(sipName_maximumMargins), meth_QPageLayout_maximumMargins, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageLayout_maximumMargins)},
    {SIP_MLNAME_CAST(sipName_minimumMargins), meth_QPageLayout_minimumMargins, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageLayout_minimumMargins)},
    {SIP_MLNAME_CAST(sipName_mode), meth_QPageLayout_mode, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageLayout_mode)},
    {SIP_MLNAME_CAST(sipName_orientation), meth_QPageLayout_orientation, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageLayout_orientation)},
    {SIP_MLNAME_CAST(sipName_pageSize), meth_QPageLayout_pageSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageLayout_pageSize)},
    {SIP_MLNAME_CAST(sipName_paintRect), meth_QPageLayout_paintRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageLayout_paintRect)},
    {SIP_MLNAME_CAST(sipName_paintRectPixels), meth_QPageLayout_paintRectPixels, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageLayout_paintRectPixels)},
    {SIP_MLNAME_CAST(sipName_paintRectPoints), meth_QPageLayout_paintRectPoints, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageLayout_paintRectPoints)},
    {SIP_MLNAME_CAST(sipName_setBottomMargin), meth_QPageLayout_setBottomMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageLayout_setBottomMargin)},
    {SIP_MLNAME_CAST(sipName_setLeftMargin), meth_QPageLayout_setLeftMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageLayout_setLeftMargin)},
    {SIP_MLNAME_CAST(sipName_setMargins), meth_QPageLayout_setMargins, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageLayout_setMargins)},
    {SIP_MLNAME_CAST(sipName_setMinimumMargins), meth_QPageLayout_setMinimumMargins, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageLayout_setMinimumMargins)},
    {SIP_MLNAME_CAST(sipName_setMode), meth_QPageLayout_setMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageLayout_setMode)},
    {SIP_MLNAME_CAST(sipName_setOrientation), meth_QPageLayout_setOrientation, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageLayout_setOrientation)},
    {SIP_MLNAME_CAST(sipName_setPageSize), SIP_MLMETH_CAST(meth_QPageLayout_setPageSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPageLayout_setPageSize)},
    {SIP_MLNAME_CAST(sipName_setRightMargin), meth_QPageLayout_setRightMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageLayout_setRightMargin)},
    {SIP_MLNAME_CAST(sipName_setTopMargin), meth_QPageLayout_setTopMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageLayout_setTopMargin)},
    {SIP_MLNAME_CAST(sipName_setUnits), meth_QPageLayout_setUnits, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageLayout_setUnits)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QPageLayout_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageLayout_swap)},
    {SIP_MLNAME_CAST(sipName_units), meth_QPageLayout_units, METH_VARARGS, SIP_MLDOC_CAST(doc_QPageLayout_units)}
};

static sipEnumMemberDef enummembers_QPageLayout[] = {
    {sipName_Cicero, static_cast<int>( ::QPageLayout::Cicero), 182},
    {sipName_Didot, static_cast<int>( ::QPageLayout::Didot), 182},
    {sipName_FullPageMode, static_cast<int>( ::QPageLayout::FullPageMode), 180},
    {sipName_Inch, static_cast<int>( ::QPageLayout::Inch), 182},
    {sipName_Landscape, static_cast<int>( ::QPageLayout::Landscape), 181},
    {sipName_Millimeter, static_cast<int>( ::QPageLayout::Millimeter), 182},
    {sipName_Pica, static_cast<int>( ::QPageLayout::Pica), 182},
    {sipName_Point, static_cast<int>( ::QPageLayout::Point), 182},
    {sipName_Portrait, static_cast<int>( ::QPageLayout::Portrait), 181},
    {sipName_StandardMode, static_cast<int>( ::QPageLayout::StandardMode), 180},
};

PyDoc_STRVAR(doc_QPageLayout, "\1QPageLayout()\n"
"QPageLayout(QPageSize, QPageLayout.Orientation, QMarginsF, units: QPageLayout.Unit = QPageLayout.Point, minMargins: QMarginsF = QMarginsF(0,0,0,0))\n"
"QPageLayout(QPageLayout)");


static pyqt5ClassPluginDef plugin_QPageLayout = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QPageLayout = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPageLayout,
        {SIP_NULLPTR},
        &plugin_QPageLayout
    },
    {
        sipNameNr_QPageLayout,
        {0, 0, 1},
        28, methods_QPageLayout,
        10, enummembers_QPageLayout,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPageLayout,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QPageLayout,
    init_type_QPageLayout,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QPageLayout,
    assign_QPageLayout,
    array_QPageLayout,
    copy_QPageLayout,
    release_QPageLayout,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpagedpaintdevice.sip"
#include <qpagedpaintdevice.h>
#line 374 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpagedpaintdevice.sip"
#include <qpagedpaintdevice.h>
#line 7497 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"



/* Call the instance's destructor. */
extern "C" {static void release_QPagedPaintDevice_Margins(void *, int);}
static void release_QPagedPaintDevice_Margins(void *sipCppV, int)
{
    delete reinterpret_cast< ::QPagedPaintDevice::Margins *>(sipCppV);
}


extern "C" {static void assign_QPagedPaintDevice_Margins(void *, SIP_SSIZE_T, void *);}
static void assign_QPagedPaintDevice_Margins(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QPagedPaintDevice::Margins *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QPagedPaintDevice::Margins *>(sipSrc);
}


extern "C" {static void *array_QPagedPaintDevice_Margins(SIP_SSIZE_T);}
static void *array_QPagedPaintDevice_Margins(SIP_SSIZE_T sipNrElem)
{
    return new  ::QPagedPaintDevice::Margins[sipNrElem];
}


extern "C" {static void *copy_QPagedPaintDevice_Margins(const void *, SIP_SSIZE_T);}
static void *copy_QPagedPaintDevice_Margins(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QPagedPaintDevice::Margins(reinterpret_cast<const  ::QPagedPaintDevice::Margins *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPagedPaintDevice_Margins(sipSimpleWrapper *);}
static void dealloc_QPagedPaintDevice_Margins(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPagedPaintDevice_Margins(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QPagedPaintDevice_Margins(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPagedPaintDevice_Margins(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QPagedPaintDevice::Margins *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QPagedPaintDevice::Margins();

            return sipCpp;
        }
    }

    {
        const  ::QPagedPaintDevice::Margins* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QPagedPaintDevice_Margins, &a0))
        {
            sipCpp = new  ::QPagedPaintDevice::Margins(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static PyObject *varget_QPagedPaintDevice_Margins_bottom(void *, PyObject *, PyObject *);}
static PyObject *varget_QPagedPaintDevice_Margins_bottom(void *sipSelf, PyObject *, PyObject *)
{
     ::qreal sipVal;
     ::QPagedPaintDevice::Margins *sipCpp = reinterpret_cast< ::QPagedPaintDevice::Margins *>(sipSelf);

    sipVal = sipCpp->bottom;

    return PyFloat_FromDouble(sipVal);
}


extern "C" {static int varset_QPagedPaintDevice_Margins_bottom(void *, PyObject *, PyObject *);}
static int varset_QPagedPaintDevice_Margins_bottom(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::qreal sipVal;
     ::QPagedPaintDevice::Margins *sipCpp = reinterpret_cast< ::QPagedPaintDevice::Margins *>(sipSelf);

    sipVal = PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->bottom = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QPagedPaintDevice_Margins_left(void *, PyObject *, PyObject *);}
static PyObject *varget_QPagedPaintDevice_Margins_left(void *sipSelf, PyObject *, PyObject *)
{
     ::qreal sipVal;
     ::QPagedPaintDevice::Margins *sipCpp = reinterpret_cast< ::QPagedPaintDevice::Margins *>(sipSelf);

    sipVal = sipCpp->left;

    return PyFloat_FromDouble(sipVal);
}


extern "C" {static int varset_QPagedPaintDevice_Margins_left(void *, PyObject *, PyObject *);}
static int varset_QPagedPaintDevice_Margins_left(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::qreal sipVal;
     ::QPagedPaintDevice::Margins *sipCpp = reinterpret_cast< ::QPagedPaintDevice::Margins *>(sipSelf);

    sipVal = PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->left = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QPagedPaintDevice_Margins_right(void *, PyObject *, PyObject *);}
static PyObject *varget_QPagedPaintDevice_Margins_right(void *sipSelf, PyObject *, PyObject *)
{
     ::qreal sipVal;
     ::QPagedPaintDevice::Margins *sipCpp = reinterpret_cast< ::QPagedPaintDevice::Margins *>(sipSelf);

    sipVal = sipCpp->right;

    return PyFloat_FromDouble(sipVal);
}


extern "C" {static int varset_QPagedPaintDevice_Margins_right(void *, PyObject *, PyObject *);}
static int varset_QPagedPaintDevice_Margins_right(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::qreal sipVal;
     ::QPagedPaintDevice::Margins *sipCpp = reinterpret_cast< ::QPagedPaintDevice::Margins *>(sipSelf);

    sipVal = PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->right = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QPagedPaintDevice_Margins_top(void *, PyObject *, PyObject *);}
static PyObject *varget_QPagedPaintDevice_Margins_top(void *sipSelf, PyObject *, PyObject *)
{
     ::qreal sipVal;
     ::QPagedPaintDevice::Margins *sipCpp = reinterpret_cast< ::QPagedPaintDevice::Margins *>(sipSelf);

    sipVal = sipCpp->top;

    return PyFloat_FromDouble(sipVal);
}


extern "C" {static int varset_QPagedPaintDevice_Margins_top(void *, PyObject *, PyObject *);}
static int varset_QPagedPaintDevice_Margins_top(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::qreal sipVal;
     ::QPagedPaintDevice::Margins *sipCpp = reinterpret_cast< ::QPagedPaintDevice::Margins *>(sipSelf);

    sipVal = PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->top = sipVal;

    return 0;
}

sipVariableDef variables_QPagedPaintDevice_Margins[] = {
    {InstanceVariable, sipName_bottom, (PyMethodDef *)varget_QPagedPaintDevice_Margins_bottom, (PyMethodDef *)varset_QPagedPaintDevice_Margins_bottom, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_left, (PyMethodDef *)varget_QPagedPaintDevice_Margins_left, (PyMethodDef *)varset_QPagedPaintDevice_Margins_left, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_right, (PyMethodDef *)varget_QPagedPaintDevice_Margins_right, (PyMethodDef *)varset_QPagedPaintDevice_Margins_right, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_top, (PyMethodDef *)varget_QPagedPaintDevice_Margins_top, (PyMethodDef *)varset_QPagedPaintDevice_Margins_top, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_QPagedPaintDevice_Margins, "\1QPagedPaintDevice.Margins()\n"
"QPagedPaintDevice.Margins(QPagedPaintDevice.Margins)");


static pyqt5ClassPluginDef plugin_QPagedPaintDevice_Margins = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QPagedPaintDevice_Margins = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPagedPaintDevice__Margins,
        {SIP_NULLPTR},
        &plugin_QPagedPaintDevice_Margins
    },
    {
        sipNameNr_Margins,
        {187, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        4, variables_QPagedPaintDevice_Margins,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPagedPaintDevice_Margins,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QPagedPaintDevice_Margins,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QPagedPaintDevice_Margins,
    assign_QPagedPaintDevice_Margins,
    array_QPagedPaintDevice_Margins,
    copy_QPagedPaintDevice_Margins,
    release_QPagedPaintDevice_Margins,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpagedpaintdevice.sip"
#include <qpagedpaintdevice.h>
#line 7756 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpagelayout.sip"
#include <qpagelayout.h>
#line 7760 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 115 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 7763 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpagedpaintdevice.sip"
#include <qpagedpaintdevice.h>
#line 374 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpagedpaintdevice.sip"
#include <qpagedpaintdevice.h>
#line 7768 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 97 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 7771 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpagesize.sip"
#include <qpagesize.h>
#line 7774 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 7777 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 52 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 7780 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQPagedPaintDevice : public  ::QPagedPaintDevice
{
public:
    sipQPagedPaintDevice();
    virtual ~sipQPagedPaintDevice();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void setMargins(const  ::QPagedPaintDevice::Margins&) SIP_OVERRIDE;
    void setPageSizeMM(const  ::QSizeF&) SIP_OVERRIDE;
    void setPageSize( ::QPagedPaintDevice::PageSize) SIP_OVERRIDE;
    bool newPage() SIP_OVERRIDE;
     ::QPaintEngine* paintEngine() const SIP_OVERRIDE;
    int metric( ::QPaintDevice::PaintDeviceMetric) const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPagedPaintDevice(const sipQPagedPaintDevice &);
    sipQPagedPaintDevice &operator = (const sipQPagedPaintDevice &);

    char sipPyMethods[6];
};

sipQPagedPaintDevice::sipQPagedPaintDevice():  ::QPagedPaintDevice(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPagedPaintDevice::~sipQPagedPaintDevice()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

void sipQPagedPaintDevice::setMargins(const  ::QPagedPaintDevice::Margins& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_setMargins);

    if (!sipMeth)
    {
         ::QPagedPaintDevice::setMargins(a0);
        return;
    }

    extern void sipVH_QtGui_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QPagedPaintDevice::Margins&);

    sipVH_QtGui_56(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPagedPaintDevice::setPageSizeMM(const  ::QSizeF& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_setPageSizeMM);

    if (!sipMeth)
    {
         ::QPagedPaintDevice::setPageSizeMM(a0);
        return;
    }

    extern void sipVH_QtGui_55(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QSizeF&);

    sipVH_QtGui_55(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPagedPaintDevice::setPageSize( ::QPagedPaintDevice::PageSize a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_setPageSize);

    if (!sipMeth)
    {
         ::QPagedPaintDevice::setPageSize(a0);
        return;
    }

    extern void sipVH_QtGui_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPagedPaintDevice::PageSize);

    sipVH_QtGui_54(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQPagedPaintDevice::newPage()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,sipName_QPagedPaintDevice,sipName_newPage);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtGui_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_28(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QPaintEngine* sipQPagedPaintDevice::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,sipName_QPagedPaintDevice,sipName_paintEngine);

    if (!sipMeth)
        return 0;

    extern  ::QPaintEngine* sipVH_QtGui_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_17(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQPagedPaintDevice::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,SIP_NULLPTR,sipName_metric);

    if (!sipMeth)
        return  ::QPagedPaintDevice::metric(a0);

    extern int sipVH_QtGui_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_18(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QPagedPaintDevice_newPage, "newPage(self) -> bool");

extern "C" {static PyObject *meth_QPagedPaintDevice_newPage(PyObject *, PyObject *);}
static PyObject *meth_QPagedPaintDevice_newPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QPagedPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPagedPaintDevice, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QPagedPaintDevice, sipName_newPage);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->newPage();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPagedPaintDevice, sipName_newPage, doc_QPagedPaintDevice_newPage);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPagedPaintDevice_setPageSize, "setPageSize(self, QPagedPaintDevice.PageSize)\n"
"setPageSize(self, QPageSize) -> bool");

extern "C" {static PyObject *meth_QPagedPaintDevice_setPageSize(PyObject *, PyObject *);}
static PyObject *meth_QPagedPaintDevice_setPageSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPagedPaintDevice::PageSize a0;
         ::QPagedPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPagedPaintDevice, &sipCpp, sipType_QPagedPaintDevice_PageSize, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QPagedPaintDevice::setPageSize(a0) : sipCpp->setPageSize(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPageSize* a0;
         ::QPagedPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPagedPaintDevice, &sipCpp, sipType_QPageSize, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setPageSize(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPagedPaintDevice, sipName_setPageSize, doc_QPagedPaintDevice_setPageSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPagedPaintDevice_pageSize, "pageSize(self) -> QPagedPaintDevice.PageSize");

extern "C" {static PyObject *meth_QPagedPaintDevice_pageSize(PyObject *, PyObject *);}
static PyObject *meth_QPagedPaintDevice_pageSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPagedPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPagedPaintDevice, &sipCpp))
        {
             ::QPagedPaintDevice::PageSize sipRes;

            sipRes = sipCpp->pageSize();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QPagedPaintDevice_PageSize);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPagedPaintDevice, sipName_pageSize, doc_QPagedPaintDevice_pageSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPagedPaintDevice_setPageSizeMM, "setPageSizeMM(self, QSizeF)");

extern "C" {static PyObject *meth_QPagedPaintDevice_setPageSizeMM(PyObject *, PyObject *);}
static PyObject *meth_QPagedPaintDevice_setPageSizeMM(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSizeF* a0;
         ::QPagedPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPagedPaintDevice, &sipCpp, sipType_QSizeF, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QPagedPaintDevice::setPageSizeMM(*a0) : sipCpp->setPageSizeMM(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPagedPaintDevice, sipName_setPageSizeMM, doc_QPagedPaintDevice_setPageSizeMM);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPagedPaintDevice_pageSizeMM, "pageSizeMM(self) -> QSizeF");

extern "C" {static PyObject *meth_QPagedPaintDevice_pageSizeMM(PyObject *, PyObject *);}
static PyObject *meth_QPagedPaintDevice_pageSizeMM(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPagedPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPagedPaintDevice, &sipCpp))
        {
             ::QSizeF*sipRes;

            sipRes = new  ::QSizeF(sipCpp->pageSizeMM());

            return sipConvertFromNewType(sipRes,sipType_QSizeF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPagedPaintDevice, sipName_pageSizeMM, doc_QPagedPaintDevice_pageSizeMM);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPagedPaintDevice_setMargins, "setMargins(self, QPagedPaintDevice.Margins)");

extern "C" {static PyObject *meth_QPagedPaintDevice_setMargins(PyObject *, PyObject *);}
static PyObject *meth_QPagedPaintDevice_setMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QPagedPaintDevice::Margins* a0;
         ::QPagedPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPagedPaintDevice, &sipCpp, sipType_QPagedPaintDevice_Margins, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QPagedPaintDevice::setMargins(*a0) : sipCpp->setMargins(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPagedPaintDevice, sipName_setMargins, doc_QPagedPaintDevice_setMargins);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPagedPaintDevice_margins, "margins(self) -> QPagedPaintDevice.Margins");

extern "C" {static PyObject *meth_QPagedPaintDevice_margins(PyObject *, PyObject *);}
static PyObject *meth_QPagedPaintDevice_margins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPagedPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPagedPaintDevice, &sipCpp))
        {
             ::QPagedPaintDevice::Margins*sipRes;

            sipRes = new  ::QPagedPaintDevice::Margins(sipCpp->margins());

            return sipConvertFromNewType(sipRes,sipType_QPagedPaintDevice_Margins,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPagedPaintDevice, sipName_margins, doc_QPagedPaintDevice_margins);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPagedPaintDevice_setPageLayout, "setPageLayout(self, QPageLayout) -> bool");

extern "C" {static PyObject *meth_QPagedPaintDevice_setPageLayout(PyObject *, PyObject *);}
static PyObject *meth_QPagedPaintDevice_setPageLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPageLayout* a0;
         ::QPagedPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPagedPaintDevice, &sipCpp, sipType_QPageLayout, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setPageLayout(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPagedPaintDevice, sipName_setPageLayout, doc_QPagedPaintDevice_setPageLayout);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPagedPaintDevice_setPageOrientation, "setPageOrientation(self, QPageLayout.Orientation) -> bool");

extern "C" {static PyObject *meth_QPagedPaintDevice_setPageOrientation(PyObject *, PyObject *);}
static PyObject *meth_QPagedPaintDevice_setPageOrientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPageLayout::Orientation a0;
         ::QPagedPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPagedPaintDevice, &sipCpp, sipType_QPageLayout_Orientation, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setPageOrientation(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPagedPaintDevice, sipName_setPageOrientation, doc_QPagedPaintDevice_setPageOrientation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPagedPaintDevice_setPageMargins, "setPageMargins(self, QMarginsF) -> bool\n"
"setPageMargins(self, QMarginsF, QPageLayout.Unit) -> bool");

extern "C" {static PyObject *meth_QPagedPaintDevice_setPageMargins(PyObject *, PyObject *);}
static PyObject *meth_QPagedPaintDevice_setPageMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMarginsF* a0;
         ::QPagedPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPagedPaintDevice, &sipCpp, sipType_QMarginsF, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setPageMargins(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QMarginsF* a0;
         ::QPageLayout::Unit a1;
         ::QPagedPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QPagedPaintDevice, &sipCpp, sipType_QMarginsF, &a0, sipType_QPageLayout_Unit, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->setPageMargins(*a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPagedPaintDevice, sipName_setPageMargins, doc_QPagedPaintDevice_setPageMargins);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPagedPaintDevice_pageLayout, "pageLayout(self) -> QPageLayout");

extern "C" {static PyObject *meth_QPagedPaintDevice_pageLayout(PyObject *, PyObject *);}
static PyObject *meth_QPagedPaintDevice_pageLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPagedPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPagedPaintDevice, &sipCpp))
        {
             ::QPageLayout*sipRes;

            sipRes = new  ::QPageLayout(sipCpp->pageLayout());

            return sipConvertFromNewType(sipRes,sipType_QPageLayout,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPagedPaintDevice, sipName_pageLayout, doc_QPagedPaintDevice_pageLayout);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QPagedPaintDevice(void *, const sipTypeDef *);}
static void *cast_QPagedPaintDevice(void *sipCppV, const sipTypeDef *targetType)
{
     ::QPagedPaintDevice *sipCpp = reinterpret_cast< ::QPagedPaintDevice *>(sipCppV);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPagedPaintDevice(void *, int);}
static void release_QPagedPaintDevice(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQPagedPaintDevice *>(sipCppV);
    else
        delete reinterpret_cast< ::QPagedPaintDevice *>(sipCppV);
}


extern "C" {static void dealloc_QPagedPaintDevice(sipSimpleWrapper *);}
static void dealloc_QPagedPaintDevice(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQPagedPaintDevice *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPagedPaintDevice(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QPagedPaintDevice(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPagedPaintDevice(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQPagedPaintDevice *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQPagedPaintDevice();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QPagedPaintDevice[] = {{191, 255, 1}};


static PyMethodDef methods_QPagedPaintDevice[] = {
    {SIP_MLNAME_CAST(sipName_margins), meth_QPagedPaintDevice_margins, METH_VARARGS, SIP_MLDOC_CAST(doc_QPagedPaintDevice_margins)},
    {SIP_MLNAME_CAST(sipName_newPage), meth_QPagedPaintDevice_newPage, METH_VARARGS, SIP_MLDOC_CAST(doc_QPagedPaintDevice_newPage)},
    {SIP_MLNAME_CAST(sipName_pageLayout), meth_QPagedPaintDevice_pageLayout, METH_VARARGS, SIP_MLDOC_CAST(doc_QPagedPaintDevice_pageLayout)},
    {SIP_MLNAME_CAST(sipName_pageSize), meth_QPagedPaintDevice_pageSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QPagedPaintDevice_pageSize)},
    {SIP_MLNAME_CAST(sipName_pageSizeMM), meth_QPagedPaintDevice_pageSizeMM, METH_VARARGS, SIP_MLDOC_CAST(doc_QPagedPaintDevice_pageSizeMM)},
    {SIP_MLNAME_CAST(sipName_setMargins), meth_QPagedPaintDevice_setMargins, METH_VARARGS, SIP_MLDOC_CAST(doc_QPagedPaintDevice_setMargins)},
    {SIP_MLNAME_CAST(sipName_setPageLayout), meth_QPagedPaintDevice_setPageLayout, METH_VARARGS, SIP_MLDOC_CAST(doc_QPagedPaintDevice_setPageLayout)},
    {SIP_MLNAME_CAST(sipName_setPageMargins), meth_QPagedPaintDevice_setPageMargins, METH_VARARGS, SIP_MLDOC_CAST(doc_QPagedPaintDevice_setPageMargins)},
    {SIP_MLNAME_CAST(sipName_setPageOrientation), meth_QPagedPaintDevice_setPageOrientation, METH_VARARGS, SIP_MLDOC_CAST(doc_QPagedPaintDevice_setPageOrientation)},
    {SIP_MLNAME_CAST(sipName_setPageSize), meth_QPagedPaintDevice_setPageSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QPagedPaintDevice_setPageSize)},
    {SIP_MLNAME_CAST(sipName_setPageSizeMM), meth_QPagedPaintDevice_setPageSizeMM, METH_VARARGS, SIP_MLDOC_CAST(doc_QPagedPaintDevice_setPageSizeMM)}
};

static sipEnumMemberDef enummembers_QPagedPaintDevice[] = {
    {sipName_A0, static_cast<int>( ::QPagedPaintDevice::A0), 189},
    {sipName_A1, static_cast<int>( ::QPagedPaintDevice::A1), 189},
    {sipName_A10, static_cast<int>( ::QPagedPaintDevice::A10), 189},
    {sipName_A2, static_cast<int>( ::QPagedPaintDevice::A2), 189},
    {sipName_A3, static_cast<int>( ::QPagedPaintDevice::A3), 189},
    {sipName_A3Extra, static_cast<int>( ::QPagedPaintDevice::A3Extra), 189},
    {sipName_A4, static_cast<int>( ::QPagedPaintDevice::A4), 189},
    {sipName_A4Extra, static_cast<int>( ::QPagedPaintDevice::A4Extra), 189},
    {sipName_A4Plus, static_cast<int>( ::QPagedPaintDevice::A4Plus), 189},
    {sipName_A4Small, static_cast<int>( ::QPagedPaintDevice::A4Small), 189},
    {sipName_A5, static_cast<int>( ::QPagedPaintDevice::A5), 189},
    {sipName_A5Extra, static_cast<int>( ::QPagedPaintDevice::A5Extra), 189},
    {sipName_A6, static_cast<int>( ::QPagedPaintDevice::A6), 189},
    {sipName_A7, static_cast<int>( ::QPagedPaintDevice::A7), 189},
    {sipName_A8, static_cast<int>( ::QPagedPaintDevice::A8), 189},
    {sipName_A9, static_cast<int>( ::QPagedPaintDevice::A9), 189},
    {sipName_AnsiA, static_cast<int>( ::QPagedPaintDevice::AnsiA), 189},
    {sipName_AnsiB, static_cast<int>( ::QPagedPaintDevice::AnsiB), 189},
    {sipName_AnsiC, static_cast<int>( ::QPagedPaintDevice::AnsiC), 189},
    {sipName_AnsiD, static_cast<int>( ::QPagedPaintDevice::AnsiD), 189},
    {sipName_AnsiE, static_cast<int>( ::QPagedPaintDevice::AnsiE), 189},
    {sipName_ArchA, static_cast<int>( ::QPagedPaintDevice::ArchA), 189},
    {sipName_ArchB, static_cast<int>( ::QPagedPaintDevice::ArchB), 189},
    {sipName_ArchC, static_cast<int>( ::QPagedPaintDevice::ArchC), 189},
    {sipName_ArchD, static_cast<int>( ::QPagedPaintDevice::ArchD), 189},
    {sipName_ArchE, static_cast<int>( ::QPagedPaintDevice::ArchE), 189},
    {sipName_B0, static_cast<int>( ::QPagedPaintDevice::B0), 189},
    {sipName_B1, static_cast<int>( ::QPagedPaintDevice::B1), 189},
    {sipName_B10, static_cast<int>( ::QPagedPaintDevice::B10), 189},
    {sipName_B2, static_cast<int>( ::QPagedPaintDevice::B2), 189},
    {sipName_B3, static_cast<int>( ::QPagedPaintDevice::B3), 189},
    {sipName_B4, static_cast<int>( ::QPagedPaintDevice::B4), 189},
    {sipName_B5, static_cast<int>( ::QPagedPaintDevice::B5), 189},
    {sipName_B5Extra, static_cast<int>( ::QPagedPaintDevice::B5Extra), 189},
    {sipName_B6, static_cast<int>( ::QPagedPaintDevice::B6), 189},
    {sipName_B7, static_cast<int>( ::QPagedPaintDevice::B7), 189},
    {sipName_B8, static_cast<int>( ::QPagedPaintDevice::B8), 189},
    {sipName_B9, static_cast<int>( ::QPagedPaintDevice::B9), 189},
    {sipName_C5E, static_cast<int>( ::QPagedPaintDevice::C5E), 189},
    {sipName_Comm10E, static_cast<int>( ::QPagedPaintDevice::Comm10E), 189},
    {sipName_Custom, static_cast<int>( ::QPagedPaintDevice::Custom), 189},
    {sipName_DLE, static_cast<int>( ::QPagedPaintDevice::DLE), 189},
    {sipName_DoublePostcard, static_cast<int>( ::QPagedPaintDevice::DoublePostcard), 189},
    {sipName_Envelope10, static_cast<int>( ::QPagedPaintDevice::Envelope10), 189},
    {sipName_Envelope11, static_cast<int>( ::QPagedPaintDevice::Envelope11), 189},
    {sipName_Envelope12, static_cast<int>( ::QPagedPaintDevice::Envelope12), 189},
    {sipName_Envelope14, static_cast<int>( ::QPagedPaintDevice::Envelope14), 189},
    {sipName_Envelope9, static_cast<int>( ::QPagedPaintDevice::Envelope9), 189},
    {sipName_EnvelopeB4, static_cast<int>( ::QPagedPaintDevice::EnvelopeB4), 189},
    {sipName_EnvelopeB5, static_cast<int>( ::QPagedPaintDevice::EnvelopeB5), 189},
    {sipName_EnvelopeB6, static_cast<int>( ::QPagedPaintDevice::EnvelopeB6), 189},
    {sipName_EnvelopeC0, static_cast<int>( ::QPagedPaintDevice::EnvelopeC0), 189},
    {sipName_EnvelopeC1, static_cast<int>( ::QPagedPaintDevice::EnvelopeC1), 189},
    {sipName_EnvelopeC2, static_cast<int>( ::QPagedPaintDevice::EnvelopeC2), 189},
    {sipName_EnvelopeC3, static_cast<int>( ::QPagedPaintDevice::EnvelopeC3), 189},
    {sipName_EnvelopeC4, static_cast<int>( ::QPagedPaintDevice::EnvelopeC4), 189},
    {sipName_EnvelopeC5, static_cast<int>( ::QPagedPaintDevice::EnvelopeC5), 189},
    {sipName_EnvelopeC6, static_cast<int>( ::QPagedPaintDevice::EnvelopeC6), 189},
    {sipName_EnvelopeC65, static_cast<int>( ::QPagedPaintDevice::EnvelopeC65), 189},
    {sipName_EnvelopeC7, static_cast<int>( ::QPagedPaintDevice::EnvelopeC7), 189},
    {sipName_EnvelopeChou3, static_cast<int>( ::QPagedPaintDevice::EnvelopeChou3), 189},
    {sipName_EnvelopeChou4, static_cast<int>( ::QPagedPaintDevice::EnvelopeChou4), 189},
    {sipName_EnvelopeDL, static_cast<int>( ::QPagedPaintDevice::EnvelopeDL), 189},
    {sipName_EnvelopeInvite, static_cast<int>( ::QPagedPaintDevice::EnvelopeInvite), 189},
    {sipName_EnvelopeItalian, static_cast<int>( ::QPagedPaintDevice::EnvelopeItalian), 189},
    {sipName_EnvelopeKaku2, static_cast<int>( ::QPagedPaintDevice::EnvelopeKaku2), 189},
    {sipName_EnvelopeKaku3, static_cast<int>( ::QPagedPaintDevice::EnvelopeKaku3), 189},
    {sipName_EnvelopeMonarch, static_cast<int>( ::QPagedPaintDevice::EnvelopeMonarch), 189},
    {sipName_EnvelopePersonal, static_cast<int>( ::QPagedPaintDevice::EnvelopePersonal), 189},
    {sipName_EnvelopePrc1, static_cast<int>( ::QPagedPaintDevice::EnvelopePrc1), 189},
    {sipName_EnvelopePrc10, static_cast<int>( ::QPagedPaintDevice::EnvelopePrc10), 189},
    {sipName_EnvelopePrc2, static_cast<int>( ::QPagedPaintDevice::EnvelopePrc2), 189},
    {sipName_EnvelopePrc3, static_cast<int>( ::QPagedPaintDevice::EnvelopePrc3), 189},
    {sipName_EnvelopePrc4, static_cast<int>( ::QPagedPaintDevice::EnvelopePrc4), 189},
    {sipName_EnvelopePrc5, static_cast<int>( ::QPagedPaintDevice::EnvelopePrc5), 189},
    {sipName_EnvelopePrc6, static_cast<int>( ::QPagedPaintDevice::EnvelopePrc6), 189},
    {sipName_EnvelopePrc7, static_cast<int>( ::QPagedPaintDevice::EnvelopePrc7), 189},
    {sipName_EnvelopePrc8, static_cast<int>( ::QPagedPaintDevice::EnvelopePrc8), 189},
    {sipName_EnvelopePrc9, static_cast<int>( ::QPagedPaintDevice::EnvelopePrc9), 189},
    {sipName_EnvelopeYou4, static_cast<int>( ::QPagedPaintDevice::EnvelopeYou4), 189},
    {sipName_Executive, static_cast<int>( ::QPagedPaintDevice::Executive), 189},
    {sipName_ExecutiveStandard, static_cast<int>( ::QPagedPaintDevice::ExecutiveStandard), 189},
    {sipName_FanFoldGerman, static_cast<int>( ::QPagedPaintDevice::FanFoldGerman), 189},
    {sipName_FanFoldGermanLegal, static_cast<int>( ::QPagedPaintDevice::FanFoldGermanLegal), 189},
    {sipName_FanFoldUS, static_cast<int>( ::QPagedPaintDevice::FanFoldUS), 189},
    {sipName_Folio, static_cast<int>( ::QPagedPaintDevice::Folio), 189},
    {sipName_Imperial10x11, static_cast<int>( ::QPagedPaintDevice::Imperial10x11), 189},
    {sipName_Imperial10x13, static_cast<int>( ::QPagedPaintDevice::Imperial10x13), 189},
    {sipName_Imperial10x14, static_cast<int>( ::QPagedPaintDevice::Imperial10x14), 189},
    {sipName_Imperial12x11, static_cast<int>( ::QPagedPaintDevice::Imperial12x11), 189},
    {sipName_Imperial15x11, static_cast<int>( ::QPagedPaintDevice::Imperial15x11), 189},
    {sipName_Imperial7x9, static_cast<int>( ::QPagedPaintDevice::Imperial7x9), 189},
    {sipName_Imperial8x10, static_cast<int>( ::QPagedPaintDevice::Imperial8x10), 189},
    {sipName_Imperial9x11, static_cast<int>( ::QPagedPaintDevice::Imperial9x11), 189},
    {sipName_Imperial9x12, static_cast<int>( ::QPagedPaintDevice::Imperial9x12), 189},
    {sipName_JisB0, static_cast<int>( ::QPagedPaintDevice::JisB0), 189},
    {sipName_JisB1, static_cast<int>( ::QPagedPaintDevice::JisB1), 189},
    {sipName_JisB10, static_cast<int>( ::QPagedPaintDevice::JisB10), 189},
    {sipName_JisB2, static_cast<int>( ::QPagedPaintDevice::JisB2), 189},
    {sipName_JisB3, static_cast<int>( ::QPagedPaintDevice::JisB3), 189},
    {sipName_JisB4, static_cast<int>( ::QPagedPaintDevice::JisB4), 189},
    {sipName_JisB5, static_cast<int>( ::QPagedPaintDevice::JisB5), 189},
    {sipName_JisB6, static_cast<int>( ::QPagedPaintDevice::JisB6), 189},
    {sipName_JisB7, static_cast<int>( ::QPagedPaintDevice::JisB7), 189},
    {sipName_JisB8, static_cast<int>( ::QPagedPaintDevice::JisB8), 189},
    {sipName_JisB9, static_cast<int>( ::QPagedPaintDevice::JisB9), 189},
    {sipName_LastPageSize, static_cast<int>( ::QPagedPaintDevice::LastPageSize), 189},
    {sipName_Ledger, static_cast<int>( ::QPagedPaintDevice::Ledger), 189},
    {sipName_Legal, static_cast<int>( ::QPagedPaintDevice::Legal), 189},
    {sipName_LegalExtra, static_cast<int>( ::QPagedPaintDevice::LegalExtra), 189},
    {sipName_Letter, static_cast<int>( ::QPagedPaintDevice::Letter), 189},
    {sipName_LetterExtra, static_cast<int>( ::QPagedPaintDevice::LetterExtra), 189},
    {sipName_LetterPlus, static_cast<int>( ::QPagedPaintDevice::LetterPlus), 189},
    {sipName_LetterSmall, static_cast<int>( ::QPagedPaintDevice::LetterSmall), 189},
    {sipName_NPaperSize, static_cast<int>( ::QPagedPaintDevice::NPaperSize), 189},
    {sipName_Note, static_cast<int>( ::QPagedPaintDevice::Note), 189},
    {sipName_PdfVersion_1_4, static_cast<int>( ::QPagedPaintDevice::PdfVersion_1_4), 190},
    {sipName_PdfVersion_1_6, static_cast<int>( ::QPagedPaintDevice::PdfVersion_1_6), 190},
    {sipName_PdfVersion_A1b, static_cast<int>( ::QPagedPaintDevice::PdfVersion_A1b), 190},
    {sipName_Postcard, static_cast<int>( ::QPagedPaintDevice::Postcard), 189},
    {sipName_Prc16K, static_cast<int>( ::QPagedPaintDevice::Prc16K), 189},
    {sipName_Prc32K, static_cast<int>( ::QPagedPaintDevice::Prc32K), 189},
    {sipName_Prc32KBig, static_cast<int>( ::QPagedPaintDevice::Prc32KBig), 189},
    {sipName_Quarto, static_cast<int>( ::QPagedPaintDevice::Quarto), 189},
    {sipName_Statement, static_cast<int>( ::QPagedPaintDevice::Statement), 189},
    {sipName_SuperA, static_cast<int>( ::QPagedPaintDevice::SuperA), 189},
    {sipName_SuperB, static_cast<int>( ::QPagedPaintDevice::SuperB), 189},
    {sipName_Tabloid, static_cast<int>( ::QPagedPaintDevice::Tabloid), 189},
    {sipName_TabloidExtra, static_cast<int>( ::QPagedPaintDevice::TabloidExtra), 189},
};

PyDoc_STRVAR(doc_QPagedPaintDevice, "\1QPagedPaintDevice()");


static pyqt5ClassPluginDef plugin_QPagedPaintDevice = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QPagedPaintDevice = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPagedPaintDevice,
        {SIP_NULLPTR},
        &plugin_QPagedPaintDevice
    },
    {
        sipNameNr_QPagedPaintDevice,
        {0, 0, 1},
        11, methods_QPagedPaintDevice,
        129, enummembers_QPagedPaintDevice,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPagedPaintDevice,
    -1,
    -1,
    supers_QPagedPaintDevice,
    SIP_NULLPTR,
    init_type_QPagedPaintDevice,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QPagedPaintDevice,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QPagedPaintDevice,
    cast_QPagedPaintDevice,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglwindow.sip"
#include <qopenglwindow.h>
#line 8545 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 8549 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 46 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglcontext.sip"
#include <qopenglcontext.h>
#line 8552 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 8555 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 416 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 8558 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 389 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 8561 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qimage.sip"
#include <qimage.h>
#line 8564 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 8567 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 786 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 8570 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 8573 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 8576 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 8579 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 8582 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 189 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 8585 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 296 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 8588 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 717 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 8591 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 253 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 8594 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 205 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 8597 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 354 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 8600 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 462 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 8603 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 451 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 8606 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 375 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 8609 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 403 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 8612 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 8615 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 8618 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qscreen.sip"
#include <qscreen.h>
#line 8621 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 8624 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 8627 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 8630 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 8633 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 8636 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 8639 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qsurfaceformat.sip"
#include <qsurfaceformat.h>
#line 8642 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qsurface.sip"
#include <qsurface.h>
#line 8645 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 8648 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 8651 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 8654 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 8657 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 8660 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 8663 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 8666 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 8669 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 8672 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 8675 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 8678 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 8681 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 52 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 8684 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQOpenGLWindow : public  ::QOpenGLWindow
{
public:
    sipQOpenGLWindow( ::QOpenGLWindow::UpdateBehavior, ::QWindow*);
    sipQOpenGLWindow( ::QOpenGLContext*, ::QOpenGLWindow::UpdateBehavior, ::QWindow*);
    virtual ~sipQOpenGLWindow();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void paintOverGL() SIP_OVERRIDE;
    void paintUnderGL() SIP_OVERRIDE;
    void paintGL() SIP_OVERRIDE;
    void resizeGL(int,int) SIP_OVERRIDE;
    void initializeGL() SIP_OVERRIDE;
    void tabletEvent( ::QTabletEvent*) SIP_OVERRIDE;
    void touchEvent( ::QTouchEvent*) SIP_OVERRIDE;
    void wheelEvent( ::QWheelEvent*) SIP_OVERRIDE;
    void mouseMoveEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseDoubleClickEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseReleaseEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mousePressEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void keyReleaseEvent( ::QKeyEvent*) SIP_OVERRIDE;
    void keyPressEvent( ::QKeyEvent*) SIP_OVERRIDE;
    void hideEvent( ::QHideEvent*) SIP_OVERRIDE;
    void showEvent( ::QShowEvent*) SIP_OVERRIDE;
    void focusOutEvent( ::QFocusEvent*) SIP_OVERRIDE;
    void focusInEvent( ::QFocusEvent*) SIP_OVERRIDE;
    void moveEvent( ::QMoveEvent*) SIP_OVERRIDE;
    void resizeEvent( ::QResizeEvent*) SIP_OVERRIDE;
    void exposeEvent( ::QExposeEvent*) SIP_OVERRIDE;
     ::QObject* focusObject() const SIP_OVERRIDE;
     ::QSurfaceFormat format() const SIP_OVERRIDE;
     ::QSurface::SurfaceType surfaceType() const SIP_OVERRIDE;
     ::QSize size() const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    int metric( ::QPaintDevice::PaintDeviceMetric) const SIP_OVERRIDE;
     ::QPaintEngine* paintEngine() const SIP_OVERRIDE;
    void paintEvent( ::QPaintEvent*) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQOpenGLWindow(const sipQOpenGLWindow &);
    sipQOpenGLWindow &operator = (const sipQOpenGLWindow &);

    char sipPyMethods[35];
};

sipQOpenGLWindow::sipQOpenGLWindow( ::QOpenGLWindow::UpdateBehavior a0, ::QWindow*a1):  ::QOpenGLWindow(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQOpenGLWindow::sipQOpenGLWindow( ::QOpenGLContext*a0, ::QOpenGLWindow::UpdateBehavior a1, ::QWindow*a2):  ::QOpenGLWindow(a0,a1,a2), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQOpenGLWindow::~sipQOpenGLWindow()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQOpenGLWindow::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QOpenGLWindow);

    return  ::QOpenGLWindow::metaObject();
}

int sipQOpenGLWindow::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QOpenGLWindow::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QOpenGLWindow,_c,_id,_a);

    return _id;
}

void *sipQOpenGLWindow::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QOpenGLWindow, _clname, &sipCpp) ? sipCpp :  ::QOpenGLWindow::qt_metacast(_clname));
}

void sipQOpenGLWindow::paintOverGL()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_paintOverGL);

    if (!sipMeth)
    {
         ::QOpenGLWindow::paintOverGL();
        return;
    }

    extern void sipVH_QtGui_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtGui_39(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQOpenGLWindow::paintUnderGL()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_paintUnderGL);

    if (!sipMeth)
    {
         ::QOpenGLWindow::paintUnderGL();
        return;
    }

    extern void sipVH_QtGui_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtGui_39(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQOpenGLWindow::paintGL()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_paintGL);

    if (!sipMeth)
    {
         ::QOpenGLWindow::paintGL();
        return;
    }

    extern void sipVH_QtGui_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtGui_39(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQOpenGLWindow::resizeGL(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_resizeGL);

    if (!sipMeth)
    {
         ::QOpenGLWindow::resizeGL(a0,a1);
        return;
    }

    extern void sipVH_QtGui_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH_QtGui_53(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQOpenGLWindow::initializeGL()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_initializeGL);

    if (!sipMeth)
    {
         ::QOpenGLWindow::initializeGL();
        return;
    }

    extern void sipVH_QtGui_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtGui_39(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQOpenGLWindow::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_tabletEvent);

    if (!sipMeth)
    {
         ::QOpenGLWindow::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_51(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_QtGui_51(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::touchEvent( ::QTouchEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_touchEvent);

    if (!sipMeth)
    {
         ::QOpenGLWindow::touchEvent(a0);
        return;
    }

    extern void sipVH_QtGui_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTouchEvent*);

    sipVH_QtGui_50(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_wheelEvent);

    if (!sipMeth)
    {
         ::QOpenGLWindow::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtGui_49(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
         ::QOpenGLWindow::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_48(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
         ::QOpenGLWindow::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_48(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
         ::QOpenGLWindow::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_48(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,SIP_NULLPTR,sipName_mousePressEvent);

    if (!sipMeth)
    {
         ::QOpenGLWindow::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_48(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,SIP_NULLPTR,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
         ::QOpenGLWindow::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtGui_47(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,SIP_NULLPTR,sipName_keyPressEvent);

    if (!sipMeth)
    {
         ::QOpenGLWindow::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtGui_47(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_hideEvent);

    if (!sipMeth)
    {
         ::QOpenGLWindow::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_QtGui_46(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,SIP_NULLPTR,sipName_showEvent);

    if (!sipMeth)
    {
         ::QOpenGLWindow::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_QtGui_45(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,SIP_NULLPTR,sipName_focusOutEvent);

    if (!sipMeth)
    {
         ::QOpenGLWindow::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtGui_44(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,SIP_NULLPTR,sipName_focusInEvent);

    if (!sipMeth)
    {
         ::QOpenGLWindow::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtGui_44(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,SIP_NULLPTR,sipName_moveEvent);

    if (!sipMeth)
    {
         ::QOpenGLWindow::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_QtGui_43(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,SIP_NULLPTR,sipName_resizeEvent);

    if (!sipMeth)
    {
         ::QOpenGLWindow::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_42(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_QtGui_42(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::exposeEvent( ::QExposeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_exposeEvent);

    if (!sipMeth)
    {
         ::QOpenGLWindow::exposeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QExposeEvent*);

    sipVH_QtGui_41(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QObject* sipQOpenGLWindow::focusObject() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,SIP_NULLPTR,sipName_focusObject);

    if (!sipMeth)
        return  ::QOpenGLWindow::focusObject();

    extern  ::QObject* sipVH_QtGui_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_40(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSurfaceFormat sipQOpenGLWindow::format() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,SIP_NULLPTR,sipName_format);

    if (!sipMeth)
        return  ::QOpenGLWindow::format();

    extern  ::QSurfaceFormat sipVH_QtGui_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_36(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSurface::SurfaceType sipQOpenGLWindow::surfaceType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,SIP_NULLPTR,sipName_surfaceType);

    if (!sipMeth)
        return  ::QOpenGLWindow::surfaceType();

    extern  ::QSurface::SurfaceType sipVH_QtGui_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_37(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQOpenGLWindow::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,SIP_NULLPTR,sipName_size);

    if (!sipMeth)
        return  ::QOpenGLWindow::size();

    extern  ::QSize sipVH_QtGui_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_38(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQOpenGLWindow::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QOpenGLWindow::event(a0);

    extern bool sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_5(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQOpenGLWindow::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QOpenGLWindow::eventFilter(a0,a1);

    extern bool sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_4(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQOpenGLWindow::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QOpenGLWindow::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_3(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QOpenGLWindow::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_2(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QOpenGLWindow::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_1(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QOpenGLWindow::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QOpenGLWindow::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQOpenGLWindow::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,SIP_NULLPTR,sipName_metric);

    if (!sipMeth)
        return  ::QOpenGLWindow::metric(a0);

    extern int sipVH_QtGui_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_18(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QPaintEngine* sipQOpenGLWindow::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,sipName_QOpenGLWindow,sipName_paintEngine);

    if (!sipMeth)
        return 0;

    extern  ::QPaintEngine* sipVH_QtGui_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_17(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQOpenGLWindow::paintEvent( ::QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,SIP_NULLPTR,sipName_paintEvent);

    if (!sipMeth)
    {
         ::QOpenGLWindow::paintEvent(a0);
        return;
    }

    extern void sipVH_QtGui_52(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintEvent*);

    sipVH_QtGui_52(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QOpenGLWindow_updateBehavior, "updateBehavior(self) -> QOpenGLWindow.UpdateBehavior");

extern "C" {static PyObject *meth_QOpenGLWindow_updateBehavior(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_updateBehavior(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLWindow, &sipCpp))
        {
             ::QOpenGLWindow::UpdateBehavior sipRes;

            sipRes = sipCpp->updateBehavior();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QOpenGLWindow_UpdateBehavior);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_updateBehavior, doc_QOpenGLWindow_updateBehavior);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLWindow_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLWindow_isValid(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_isValid, doc_QOpenGLWindow_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLWindow_makeCurrent, "makeCurrent(self)");

extern "C" {static PyObject *meth_QOpenGLWindow_makeCurrent(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_makeCurrent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLWindow, &sipCpp))
        {
            sipCpp->makeCurrent();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_makeCurrent, doc_QOpenGLWindow_makeCurrent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLWindow_doneCurrent, "doneCurrent(self)");

extern "C" {static PyObject *meth_QOpenGLWindow_doneCurrent(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_doneCurrent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLWindow, &sipCpp))
        {
            sipCpp->doneCurrent();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_doneCurrent, doc_QOpenGLWindow_doneCurrent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLWindow_context, "context(self) -> QOpenGLContext");

extern "C" {static PyObject *meth_QOpenGLWindow_context(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_context(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLWindow, &sipCpp))
        {
             ::QOpenGLContext*sipRes;

            sipRes = sipCpp->context();

            return sipConvertFromType(sipRes,sipType_QOpenGLContext,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_context, doc_QOpenGLWindow_context);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLWindow_defaultFramebufferObject, "defaultFramebufferObject(self) -> int");

extern "C" {static PyObject *meth_QOpenGLWindow_defaultFramebufferObject(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_defaultFramebufferObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLWindow, &sipCpp))
        {
             ::GLuint sipRes;

            sipRes = sipCpp->defaultFramebufferObject();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_defaultFramebufferObject, doc_QOpenGLWindow_defaultFramebufferObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLWindow_grabFramebuffer, "grabFramebuffer(self) -> QImage");

extern "C" {static PyObject *meth_QOpenGLWindow_grabFramebuffer(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_grabFramebuffer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLWindow, &sipCpp))
        {
             ::QImage*sipRes;

            sipRes = new  ::QImage(sipCpp->grabFramebuffer());

            return sipConvertFromNewType(sipRes,sipType_QImage,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_grabFramebuffer, doc_QOpenGLWindow_grabFramebuffer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLWindow_shareContext, "shareContext(self) -> QOpenGLContext");

extern "C" {static PyObject *meth_QOpenGLWindow_shareContext(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_shareContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLWindow, &sipCpp))
        {
             ::QOpenGLContext*sipRes;

            sipRes = sipCpp->shareContext();

            return sipConvertFromType(sipRes,sipType_QOpenGLContext,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_shareContext, doc_QOpenGLWindow_shareContext);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLWindow_initializeGL, "initializeGL(self)");

extern "C" {static PyObject *meth_QOpenGLWindow_initializeGL(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_initializeGL(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QOpenGLWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QOpenGLWindow, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QOpenGLWindow::initializeGL() : sipCpp->initializeGL());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_initializeGL, doc_QOpenGLWindow_initializeGL);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLWindow_resizeGL, "resizeGL(self, int, int)");

extern "C" {static PyObject *meth_QOpenGLWindow_resizeGL(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_resizeGL(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
         ::QOpenGLWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pii", &sipSelf, sipType_QOpenGLWindow, &sipCpp, &a0, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QOpenGLWindow::resizeGL(a0,a1) : sipCpp->resizeGL(a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_resizeGL, doc_QOpenGLWindow_resizeGL);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLWindow_paintGL, "paintGL(self)");

extern "C" {static PyObject *meth_QOpenGLWindow_paintGL(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_paintGL(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QOpenGLWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QOpenGLWindow, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QOpenGLWindow::paintGL() : sipCpp->paintGL());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_paintGL, doc_QOpenGLWindow_paintGL);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLWindow_paintUnderGL, "paintUnderGL(self)");

extern "C" {static PyObject *meth_QOpenGLWindow_paintUnderGL(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_paintUnderGL(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QOpenGLWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QOpenGLWindow, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QOpenGLWindow::paintUnderGL() : sipCpp->paintUnderGL());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_paintUnderGL, doc_QOpenGLWindow_paintUnderGL);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLWindow_paintOverGL, "paintOverGL(self)");

extern "C" {static PyObject *meth_QOpenGLWindow_paintOverGL(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_paintOverGL(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QOpenGLWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QOpenGLWindow, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QOpenGLWindow::paintOverGL() : sipCpp->paintOverGL());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_paintOverGL, doc_QOpenGLWindow_paintOverGL);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLWindow_paintEvent, "paintEvent(self, QPaintEvent)");

extern "C" {static PyObject *meth_QOpenGLWindow_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintEvent* a0;
         ::QOpenGLWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QOpenGLWindow, &sipCpp, sipType_QPaintEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QOpenGLWindow::paintEvent(a0) : sipCpp->paintEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_paintEvent, doc_QOpenGLWindow_paintEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLWindow_resizeEvent, "resizeEvent(self, QResizeEvent)");

extern "C" {static PyObject *meth_QOpenGLWindow_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QResizeEvent* a0;
         ::QOpenGLWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QOpenGLWindow, &sipCpp, sipType_QResizeEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QOpenGLWindow::resizeEvent(a0) : sipCpp->resizeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_resizeEvent, doc_QOpenGLWindow_resizeEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLWindow_metric, "metric(self, QPaintDevice.PaintDeviceMetric) -> int");

extern "C" {static PyObject *meth_QOpenGLWindow_metric(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_metric(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintDevice::PaintDeviceMetric a0;
        const  ::QOpenGLWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QOpenGLWindow, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QOpenGLWindow::metric(a0) : sipCpp->metric(a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_metric, doc_QOpenGLWindow_metric);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QOpenGLWindow(void *, const sipTypeDef *);}
static void *cast_QOpenGLWindow(void *sipCppV, const sipTypeDef *targetType)
{
     ::QOpenGLWindow *sipCpp = reinterpret_cast< ::QOpenGLWindow *>(sipCppV);

    if (targetType == sipType_QPaintDeviceWindow)
        return static_cast< ::QPaintDeviceWindow *>(sipCpp);

    if (targetType == sipType_QWindow)
        return static_cast< ::QWindow *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QSurface)
        return static_cast< ::QSurface *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QOpenGLWindow(void *, int);}
static void release_QOpenGLWindow(void *sipCppV, int)
{
     ::QOpenGLWindow *sipCpp = reinterpret_cast< ::QOpenGLWindow *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QOpenGLWindow(sipSimpleWrapper *);}
static void dealloc_QOpenGLWindow(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQOpenGLWindow *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QOpenGLWindow(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QOpenGLWindow(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOpenGLWindow(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQOpenGLWindow *sipCpp = SIP_NULLPTR;

    {
         ::QOpenGLWindow::UpdateBehavior a0 = QOpenGLWindow::NoPartialUpdate;
         ::QWindow* a1 = 0;

        static const char *sipKwdList[] = {
            sipName_updateBehavior,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|EJH", sipType_QOpenGLWindow_UpdateBehavior, &a0, sipType_QWindow, &a1, sipOwner))
        {
            sipCpp = new sipQOpenGLWindow(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QOpenGLContext* a0;
         ::QOpenGLWindow::UpdateBehavior a1 = QOpenGLWindow::NoPartialUpdate;
         ::QWindow* a2 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_updateBehavior,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|EJH", sipType_QOpenGLContext, &a0, sipType_QOpenGLWindow_UpdateBehavior, &a1, sipType_QWindow, &a2, sipOwner))
        {
            sipCpp = new sipQOpenGLWindow(a0,a1,a2);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QOpenGLWindow[] = {{193, 255, 1}};


static PyMethodDef methods_QOpenGLWindow[] = {
    {SIP_MLNAME_CAST(sipName_context), meth_QOpenGLWindow_context, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLWindow_context)},
    {SIP_MLNAME_CAST(sipName_defaultFramebufferObject), meth_QOpenGLWindow_defaultFramebufferObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLWindow_defaultFramebufferObject)},
    {SIP_MLNAME_CAST(sipName_doneCurrent), meth_QOpenGLWindow_doneCurrent, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLWindow_doneCurrent)},
    {SIP_MLNAME_CAST(sipName_grabFramebuffer), meth_QOpenGLWindow_grabFramebuffer, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLWindow_grabFramebuffer)},
    {SIP_MLNAME_CAST(sipName_initializeGL), meth_QOpenGLWindow_initializeGL, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLWindow_initializeGL)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QOpenGLWindow_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLWindow_isValid)},
    {SIP_MLNAME_CAST(sipName_makeCurrent), meth_QOpenGLWindow_makeCurrent, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLWindow_makeCurrent)},
    {SIP_MLNAME_CAST(sipName_metric), meth_QOpenGLWindow_metric, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLWindow_metric)},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QOpenGLWindow_paintEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLWindow_paintEvent)},
    {SIP_MLNAME_CAST(sipName_paintGL), meth_QOpenGLWindow_paintGL, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLWindow_paintGL)},
    {SIP_MLNAME_CAST(sipName_paintOverGL), meth_QOpenGLWindow_paintOverGL, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLWindow_paintOverGL)},
    {SIP_MLNAME_CAST(sipName_paintUnderGL), meth_QOpenGLWindow_paintUnderGL, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLWindow_paintUnderGL)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QOpenGLWindow_resizeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLWindow_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_resizeGL), meth_QOpenGLWindow_resizeGL, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLWindow_resizeGL)},
    {SIP_MLNAME_CAST(sipName_shareContext), meth_QOpenGLWindow_shareContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLWindow_shareContext)},
    {SIP_MLNAME_CAST(sipName_updateBehavior), meth_QOpenGLWindow_updateBehavior, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLWindow_updateBehavior)}
};

static sipEnumMemberDef enummembers_QOpenGLWindow[] = {
    {sipName_NoPartialUpdate, static_cast<int>( ::QOpenGLWindow::NoPartialUpdate), 178},
    {sipName_PartialUpdateBlend, static_cast<int>( ::QOpenGLWindow::PartialUpdateBlend), 178},
    {sipName_PartialUpdateBlit, static_cast<int>( ::QOpenGLWindow::PartialUpdateBlit), 178},
};

PyDoc_STRVAR(doc_QOpenGLWindow, "\1QOpenGLWindow(updateBehavior: QOpenGLWindow.UpdateBehavior = QOpenGLWindow.NoPartialUpdate, parent: QWindow = None)\n"
"QOpenGLWindow(QOpenGLContext, updateBehavior: QOpenGLWindow.UpdateBehavior = QOpenGLWindow.NoPartialUpdate, parent: QWindow = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QOpenGLWindow[] = {
    {"frameSwapped()", "\1frameSwapped(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QOpenGLWindow = {
    & ::QOpenGLWindow::staticMetaObject,
    0,
    signals_QOpenGLWindow,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QOpenGLWindow = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QOpenGLWindow,
        {SIP_NULLPTR},
        &plugin_QOpenGLWindow
    },
    {
        sipNameNr_QOpenGLWindow,
        {0, 0, 1},
        16, methods_QOpenGLWindow,
        3, enummembers_QOpenGLWindow,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QOpenGLWindow,
    -1,
    -1,
    supers_QOpenGLWindow,
    SIP_NULLPTR,
    init_type_QOpenGLWindow,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QOpenGLWindow,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QOpenGLWindow,
    cast_QOpenGLWindow,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintdevicewindow.sip"
#include <qpaintdevicewindow.h>
#line 10049 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 10053 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 786 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 10056 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 10059 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 389 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 10062 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 10065 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 10068 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 10071 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 10074 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 10077 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 189 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 10080 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 296 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 10083 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 717 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 10086 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 253 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 10089 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 205 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 10092 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 354 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 10095 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 462 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 10098 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 451 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 10101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 375 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 10104 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 403 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 10107 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 416 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 10110 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 10113 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 10116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qscreen.sip"
#include <qscreen.h>
#line 10119 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 10122 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 10125 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 10128 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 10131 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 10134 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 10137 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qsurfaceformat.sip"
#include <qsurfaceformat.h>
#line 10140 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qsurface.sip"
#include <qsurface.h>
#line 10143 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 10146 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 10149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 10152 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 10155 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 10158 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 10161 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 10164 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 10167 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 10170 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 10173 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 10176 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 10179 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 52 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 10182 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QPaintDeviceWindow_update, "update(self, QRect)\n"
"update(self, QRegion)\n"
"update(self)");

extern "C" {static PyObject *meth_QPaintDeviceWindow_update(PyObject *, PyObject *);}
static PyObject *meth_QPaintDeviceWindow_update(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect* a0;
         ::QPaintDeviceWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPaintDeviceWindow, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->update(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QRegion* a0;
         ::QPaintDeviceWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPaintDeviceWindow, &sipCpp, sipType_QRegion, &a0))
        {
            sipCpp->update(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QPaintDeviceWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintDeviceWindow, &sipCpp))
        {
            sipCpp->update();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintDeviceWindow, sipName_update, doc_QPaintDeviceWindow_update);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintDeviceWindow_paintEvent, "paintEvent(self, QPaintEvent)");

extern "C" {static PyObject *meth_QPaintDeviceWindow_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QPaintDeviceWindow_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintEvent* a0;
         ::QPaintDeviceWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPaintDeviceWindow, &sipCpp, sipType_QPaintEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QPaintDeviceWindow::paintEvent(a0) : sipCpp->paintEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintDeviceWindow, sipName_paintEvent, doc_QPaintDeviceWindow_paintEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintDeviceWindow_metric, "metric(self, QPaintDevice.PaintDeviceMetric) -> int");

extern "C" {static PyObject *meth_QPaintDeviceWindow_metric(PyObject *, PyObject *);}
static PyObject *meth_QPaintDeviceWindow_metric(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintDevice::PaintDeviceMetric a0;
        const  ::QPaintDeviceWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QPaintDeviceWindow, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QPaintDeviceWindow::metric(a0) : sipCpp->metric(a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintDeviceWindow, sipName_metric, doc_QPaintDeviceWindow_metric);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintDeviceWindow_exposeEvent, "exposeEvent(self, QExposeEvent)");

extern "C" {static PyObject *meth_QPaintDeviceWindow_exposeEvent(PyObject *, PyObject *);}
static PyObject *meth_QPaintDeviceWindow_exposeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QExposeEvent* a0;
         ::QPaintDeviceWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPaintDeviceWindow, &sipCpp, sipType_QExposeEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QPaintDeviceWindow::exposeEvent(a0) : sipCpp->exposeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintDeviceWindow, sipName_exposeEvent, doc_QPaintDeviceWindow_exposeEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintDeviceWindow_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QPaintDeviceWindow_event(PyObject *, PyObject *);}
static PyObject *meth_QPaintDeviceWindow_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QPaintDeviceWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPaintDeviceWindow, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QPaintDeviceWindow::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintDeviceWindow, sipName_event, doc_QPaintDeviceWindow_event);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QPaintDeviceWindow(void *, const sipTypeDef *);}
static void *cast_QPaintDeviceWindow(void *sipCppV, const sipTypeDef *targetType)
{
     ::QPaintDeviceWindow *sipCpp = reinterpret_cast< ::QPaintDeviceWindow *>(sipCppV);

    if (targetType == sipType_QWindow)
        return static_cast< ::QWindow *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QSurface)
        return static_cast< ::QSurface *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPaintDeviceWindow(void *, int);}
static void release_QPaintDeviceWindow(void *sipCppV, int)
{
     ::QPaintDeviceWindow *sipCpp = reinterpret_cast< ::QPaintDeviceWindow *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QPaintDeviceWindow(sipSimpleWrapper *);}
static void dealloc_QPaintDeviceWindow(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPaintDeviceWindow(sipGetAddress(sipSelf), 0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QPaintDeviceWindow[] = {{375, 255, 0}, {191, 255, 1}};


static PyMethodDef methods_QPaintDeviceWindow[] = {
    {SIP_MLNAME_CAST(sipName_event), meth_QPaintDeviceWindow_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintDeviceWindow_event)},
    {SIP_MLNAME_CAST(sipName_exposeEvent), meth_QPaintDeviceWindow_exposeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintDeviceWindow_exposeEvent)},
    {SIP_MLNAME_CAST(sipName_metric), meth_QPaintDeviceWindow_metric, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintDeviceWindow_metric)},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QPaintDeviceWindow_paintEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintDeviceWindow_paintEvent)},
    {SIP_MLNAME_CAST(sipName_update), meth_QPaintDeviceWindow_update, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintDeviceWindow_update)}
};


static pyqt5ClassPluginDef plugin_QPaintDeviceWindow = {
    & ::QPaintDeviceWindow::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QPaintDeviceWindow = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPaintDeviceWindow,
        {SIP_NULLPTR},
        &plugin_QPaintDeviceWindow
    },
    {
        sipNameNr_QPaintDeviceWindow,
        {0, 0, 1},
        5, methods_QPaintDeviceWindow,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_QPaintDeviceWindow,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QPaintDeviceWindow,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QPaintDeviceWindow,
    cast_QPaintDeviceWindow,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglvertexarrayobject.sip"
#include <qopenglvertexarrayobject.h>
#line 45 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglvertexarrayobject.sip"
#include <qopenglvertexarrayobject.h>
#line 10479 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglvertexarrayobject.sip"
#include <qopenglvertexarrayobject.h>
#line 10483 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QOpenGLVertexArrayObject_Binder_release, "release(self)");

extern "C" {static PyObject *meth_QOpenGLVertexArrayObject_Binder_release(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLVertexArrayObject_Binder_release(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLVertexArrayObject::Binder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLVertexArrayObject_Binder, &sipCpp))
        {
            sipCpp->release();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Binder, sipName_release, doc_QOpenGLVertexArrayObject_Binder_release);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLVertexArrayObject_Binder_rebind, "rebind(self)");

extern "C" {static PyObject *meth_QOpenGLVertexArrayObject_Binder_rebind(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLVertexArrayObject_Binder_rebind(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLVertexArrayObject::Binder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLVertexArrayObject_Binder, &sipCpp))
        {
            sipCpp->rebind();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Binder, sipName_rebind, doc_QOpenGLVertexArrayObject_Binder_rebind);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLVertexArrayObject_Binder___enter__, "__enter__(self) -> object");

extern "C" {static PyObject *meth_QOpenGLVertexArrayObject_Binder___enter__(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLVertexArrayObject_Binder___enter__(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLVertexArrayObject::Binder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLVertexArrayObject_Binder, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 55 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglvertexarrayobject.sip"
            // Just return a reference to self.
            sipRes = sipSelf;
            Py_INCREF(sipRes);
#line 10559 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Binder, sipName___enter__, doc_QOpenGLVertexArrayObject_Binder___enter__);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLVertexArrayObject_Binder___exit__, "__exit__(self, object, object, object)");

extern "C" {static PyObject *meth_QOpenGLVertexArrayObject_Binder___exit__(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLVertexArrayObject_Binder___exit__(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;
        PyObject * a1;
        PyObject * a2;
         ::QOpenGLVertexArrayObject::Binder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0P0P0", &sipSelf, sipType_QOpenGLVertexArrayObject_Binder, &sipCpp, &a0, &a1, &a2))
        {
#line 62 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglvertexarrayobject.sip"
            sipCpp->release();
#line 10590 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Binder, sipName___exit__, doc_QOpenGLVertexArrayObject_Binder___exit__);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QOpenGLVertexArrayObject_Binder(void *, int);}
static void release_QOpenGLVertexArrayObject_Binder(void *sipCppV, int)
{
    delete reinterpret_cast< ::QOpenGLVertexArrayObject::Binder *>(sipCppV);
}


extern "C" {static void dealloc_QOpenGLVertexArrayObject_Binder(sipSimpleWrapper *);}
static void dealloc_QOpenGLVertexArrayObject_Binder(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QOpenGLVertexArrayObject_Binder(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QOpenGLVertexArrayObject_Binder(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOpenGLVertexArrayObject_Binder(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QOpenGLVertexArrayObject::Binder *sipCpp = SIP_NULLPTR;

    {
         ::QOpenGLVertexArrayObject* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8", sipType_QOpenGLVertexArrayObject, &a0))
        {
            sipCpp = new  ::QOpenGLVertexArrayObject::Binder(a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QOpenGLVertexArrayObject_Binder[] = {
    {SIP_MLNAME_CAST(sipName___enter__), meth_QOpenGLVertexArrayObject_Binder___enter__, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLVertexArrayObject_Binder___enter__)},
    {SIP_MLNAME_CAST(sipName___exit__), meth_QOpenGLVertexArrayObject_Binder___exit__, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLVertexArrayObject_Binder___exit__)},
    {SIP_MLNAME_CAST(sipName_rebind), meth_QOpenGLVertexArrayObject_Binder_rebind, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLVertexArrayObject_Binder_rebind)},
    {SIP_MLNAME_CAST(sipName_release), meth_QOpenGLVertexArrayObject_Binder_release, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLVertexArrayObject_Binder_release)}
};

PyDoc_STRVAR(doc_QOpenGLVertexArrayObject_Binder, "\1QOpenGLVertexArrayObject.Binder(QOpenGLVertexArrayObject)");


static pyqt5ClassPluginDef plugin_QOpenGLVertexArrayObject_Binder = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QOpenGLVertexArrayObject_Binder = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_NONLAZY|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QOpenGLVertexArrayObject__Binder,
        {SIP_NULLPTR},
        &plugin_QOpenGLVertexArrayObject_Binder
    },
    {
        sipNameNr_Binder,
        {175, 255, 0},
        4, methods_QOpenGLVertexArrayObject_Binder,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QOpenGLVertexArrayObject_Binder,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QOpenGLVertexArrayObject_Binder,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QOpenGLVertexArrayObject_Binder,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QOpenGLVertexArrayObject_Binder,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglvertexarrayobject.sip"
#include <qopenglvertexarrayobject.h>
#line 10712 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 10716 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 10719 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 10722 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 10725 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 10728 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 10731 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 10734 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 10737 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 10740 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 10743 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 10746 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 10749 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 10752 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 10755 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 10758 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 10761 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQOpenGLVertexArrayObject : public  ::QOpenGLVertexArrayObject
{
public:
    sipQOpenGLVertexArrayObject( ::QObject*);
    virtual ~sipQOpenGLVertexArrayObject();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQOpenGLVertexArrayObject(const sipQOpenGLVertexArrayObject &);
    sipQOpenGLVertexArrayObject &operator = (const sipQOpenGLVertexArrayObject &);

    char sipPyMethods[7];
};

sipQOpenGLVertexArrayObject::sipQOpenGLVertexArrayObject( ::QObject*a0):  ::QOpenGLVertexArrayObject(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQOpenGLVertexArrayObject::~sipQOpenGLVertexArrayObject()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQOpenGLVertexArrayObject::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QOpenGLVertexArrayObject);

    return  ::QOpenGLVertexArrayObject::metaObject();
}

int sipQOpenGLVertexArrayObject::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QOpenGLVertexArrayObject::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QOpenGLVertexArrayObject,_c,_id,_a);

    return _id;
}

void *sipQOpenGLVertexArrayObject::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QOpenGLVertexArrayObject, _clname, &sipCpp) ? sipCpp :  ::QOpenGLVertexArrayObject::qt_metacast(_clname));
}

bool sipQOpenGLVertexArrayObject::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QOpenGLVertexArrayObject::event(a0);

    extern bool sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_5(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQOpenGLVertexArrayObject::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QOpenGLVertexArrayObject::eventFilter(a0,a1);

    extern bool sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_4(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQOpenGLVertexArrayObject::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QOpenGLVertexArrayObject::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_3(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLVertexArrayObject::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QOpenGLVertexArrayObject::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_2(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLVertexArrayObject::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QOpenGLVertexArrayObject::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_1(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLVertexArrayObject::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QOpenGLVertexArrayObject::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLVertexArrayObject::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QOpenGLVertexArrayObject::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QOpenGLVertexArrayObject_create, "create(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLVertexArrayObject_create(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLVertexArrayObject_create(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLVertexArrayObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLVertexArrayObject, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->create();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLVertexArrayObject, sipName_create, doc_QOpenGLVertexArrayObject_create);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLVertexArrayObject_destroy, "destroy(self)");

extern "C" {static PyObject *meth_QOpenGLVertexArrayObject_destroy(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLVertexArrayObject_destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLVertexArrayObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLVertexArrayObject, &sipCpp))
        {
            sipCpp->destroy();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLVertexArrayObject, sipName_destroy, doc_QOpenGLVertexArrayObject_destroy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLVertexArrayObject_isCreated, "isCreated(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLVertexArrayObject_isCreated(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLVertexArrayObject_isCreated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLVertexArrayObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLVertexArrayObject, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isCreated();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLVertexArrayObject, sipName_isCreated, doc_QOpenGLVertexArrayObject_isCreated);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLVertexArrayObject_objectId, "objectId(self) -> int");

extern "C" {static PyObject *meth_QOpenGLVertexArrayObject_objectId(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLVertexArrayObject_objectId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLVertexArrayObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLVertexArrayObject, &sipCpp))
        {
             ::GLuint sipRes;

            sipRes = sipCpp->objectId();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLVertexArrayObject, sipName_objectId, doc_QOpenGLVertexArrayObject_objectId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLVertexArrayObject_bind, "bind(self)");

extern "C" {static PyObject *meth_QOpenGLVertexArrayObject_bind(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLVertexArrayObject_bind(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLVertexArrayObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLVertexArrayObject, &sipCpp))
        {
            sipCpp->bind();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLVertexArrayObject, sipName_bind, doc_QOpenGLVertexArrayObject_bind);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLVertexArrayObject_release, "release(self)");

extern "C" {static PyObject *meth_QOpenGLVertexArrayObject_release(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLVertexArrayObject_release(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLVertexArrayObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLVertexArrayObject, &sipCpp))
        {
            sipCpp->release();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLVertexArrayObject, sipName_release, doc_QOpenGLVertexArrayObject_release);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QOpenGLVertexArrayObject(void *, const sipTypeDef *);}
static void *cast_QOpenGLVertexArrayObject(void *sipCppV, const sipTypeDef *targetType)
{
     ::QOpenGLVertexArrayObject *sipCpp = reinterpret_cast< ::QOpenGLVertexArrayObject *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QOpenGLVertexArrayObject(void *, int);}
static void release_QOpenGLVertexArrayObject(void *sipCppV, int)
{
     ::QOpenGLVertexArrayObject *sipCpp = reinterpret_cast< ::QOpenGLVertexArrayObject *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QOpenGLVertexArrayObject(sipSimpleWrapper *);}
static void dealloc_QOpenGLVertexArrayObject(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQOpenGLVertexArrayObject *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QOpenGLVertexArrayObject(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QOpenGLVertexArrayObject(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOpenGLVertexArrayObject(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQOpenGLVertexArrayObject *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQOpenGLVertexArrayObject(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QOpenGLVertexArrayObject[] = {{25, 0, 1}};


static PyMethodDef methods_QOpenGLVertexArrayObject[] = {
    {SIP_MLNAME_CAST(sipName_bind), meth_QOpenGLVertexArrayObject_bind, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLVertexArrayObject_bind)},
    {SIP_MLNAME_CAST(sipName_create), meth_QOpenGLVertexArrayObject_create, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLVertexArrayObject_create)},
    {SIP_MLNAME_CAST(sipName_destroy), meth_QOpenGLVertexArrayObject_destroy, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLVertexArrayObject_destroy)},
    {SIP_MLNAME_CAST(sipName_isCreated), meth_QOpenGLVertexArrayObject_isCreated, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLVertexArrayObject_isCreated)},
    {SIP_MLNAME_CAST(sipName_objectId), meth_QOpenGLVertexArrayObject_objectId, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLVertexArrayObject_objectId)},
    {SIP_MLNAME_CAST(sipName_release), meth_QOpenGLVertexArrayObject_release, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLVertexArrayObject_release)}
};

PyDoc_STRVAR(doc_QOpenGLVertexArrayObject, "\1QOpenGLVertexArrayObject(parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QOpenGLVertexArrayObject = {
    & ::QOpenGLVertexArrayObject::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QOpenGLVertexArrayObject = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QOpenGLVertexArrayObject,
        {SIP_NULLPTR},
        &plugin_QOpenGLVertexArrayObject
    },
    {
        sipNameNr_QOpenGLVertexArrayObject,
        {0, 0, 1},
        6, methods_QOpenGLVertexArrayObject,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QOpenGLVertexArrayObject,
    -1,
    -1,
    supers_QOpenGLVertexArrayObject,
    SIP_NULLPTR,
    init_type_QOpenGLVertexArrayObject,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QOpenGLVertexArrayObject,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QOpenGLVertexArrayObject,
    cast_QOpenGLVertexArrayObject,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglversionfunctions.sip"
#include <qopenglversionfunctions.h>
#line 11259 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"



/* Call the instance's destructor. */
extern "C" {static void release_QAbstractOpenGLFunctions(void *, int);}
static void release_QAbstractOpenGLFunctions(void *sipCppV, int)
{
    delete reinterpret_cast< ::QAbstractOpenGLFunctions *>(sipCppV);
}


extern "C" {static void dealloc_QAbstractOpenGLFunctions(sipSimpleWrapper *);}
static void dealloc_QAbstractOpenGLFunctions(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QAbstractOpenGLFunctions(sipGetAddress(sipSelf), 0);
    }
}


static pyqt5ClassPluginDef plugin_QAbstractOpenGLFunctions = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QAbstractOpenGLFunctions = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QAbstractOpenGLFunctions,
        {SIP_NULLPTR},
        &plugin_QAbstractOpenGLFunctions
    },
    {
        sipNameNr_QAbstractOpenGLFunctions,
        {0, 0, 1},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QAbstractOpenGLFunctions,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QAbstractOpenGLFunctions,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopengltextureblitter.sip"
#include <qopengltextureblitter.h>
#line 11340 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 483 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 11344 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 11347 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 11350 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qmatrix4x4.sip"
#include <qmatrix4x4.h>
#line 11353 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 11356 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QOpenGLTextureBlitter_create, "create(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLTextureBlitter_create(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTextureBlitter_create(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLTextureBlitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTextureBlitter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->create();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTextureBlitter, sipName_create, doc_QOpenGLTextureBlitter_create);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTextureBlitter_isCreated, "isCreated(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLTextureBlitter_isCreated(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTextureBlitter_isCreated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTextureBlitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTextureBlitter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isCreated();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTextureBlitter, sipName_isCreated, doc_QOpenGLTextureBlitter_isCreated);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTextureBlitter_destroy, "destroy(self)");

extern "C" {static PyObject *meth_QOpenGLTextureBlitter_destroy(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTextureBlitter_destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLTextureBlitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTextureBlitter, &sipCpp))
        {
            sipCpp->destroy();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTextureBlitter, sipName_destroy, doc_QOpenGLTextureBlitter_destroy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTextureBlitter_supportsExternalOESTarget, "supportsExternalOESTarget(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLTextureBlitter_supportsExternalOESTarget(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTextureBlitter_supportsExternalOESTarget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTextureBlitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTextureBlitter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->supportsExternalOESTarget();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTextureBlitter, sipName_supportsExternalOESTarget, doc_QOpenGLTextureBlitter_supportsExternalOESTarget);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTextureBlitter_bind, "bind(self, target: int = GL_TEXTURE_2D)");

extern "C" {static PyObject *meth_QOpenGLTextureBlitter_bind(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTextureBlitter_bind(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::GLenum a0 = GL_TEXTURE_2D;
         ::QOpenGLTextureBlitter *sipCpp;

        static const char *sipKwdList[] = {
            sipName_target,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|u", &sipSelf, sipType_QOpenGLTextureBlitter, &sipCpp, &a0))
        {
            sipCpp->bind(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTextureBlitter, sipName_bind, doc_QOpenGLTextureBlitter_bind);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTextureBlitter_release, "release(self)");

extern "C" {static PyObject *meth_QOpenGLTextureBlitter_release(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTextureBlitter_release(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLTextureBlitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTextureBlitter, &sipCpp))
        {
            sipCpp->release();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTextureBlitter, sipName_release, doc_QOpenGLTextureBlitter_release);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTextureBlitter_setRedBlueSwizzle, "setRedBlueSwizzle(self, bool)");

extern "C" {static PyObject *meth_QOpenGLTextureBlitter_setRedBlueSwizzle(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTextureBlitter_setRedBlueSwizzle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QOpenGLTextureBlitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QOpenGLTextureBlitter, &sipCpp, &a0))
        {
            sipCpp->setRedBlueSwizzle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTextureBlitter, sipName_setRedBlueSwizzle, doc_QOpenGLTextureBlitter_setRedBlueSwizzle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTextureBlitter_setOpacity, "setOpacity(self, float)");

extern "C" {static PyObject *meth_QOpenGLTextureBlitter_setOpacity(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTextureBlitter_setOpacity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
         ::QOpenGLTextureBlitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QOpenGLTextureBlitter, &sipCpp, &a0))
        {
            sipCpp->setOpacity(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTextureBlitter, sipName_setOpacity, doc_QOpenGLTextureBlitter_setOpacity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTextureBlitter_blit, "blit(self, int, QMatrix4x4, QOpenGLTextureBlitter.Origin)\n"
"blit(self, int, QMatrix4x4, QMatrix3x3)");

extern "C" {static PyObject *meth_QOpenGLTextureBlitter_blit(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTextureBlitter_blit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::GLuint a0;
        const  ::QMatrix4x4* a1;
         ::QOpenGLTextureBlitter::Origin a2;
         ::QOpenGLTextureBlitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuJ9E", &sipSelf, sipType_QOpenGLTextureBlitter, &sipCpp, &a0, sipType_QMatrix4x4, &a1, sipType_QOpenGLTextureBlitter_Origin, &a2))
        {
            sipCpp->blit(a0,*a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::GLuint a0;
        const  ::QMatrix4x4* a1;
        const  ::QMatrix3x3* a2;
         ::QOpenGLTextureBlitter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuJ9J9", &sipSelf, sipType_QOpenGLTextureBlitter, &sipCpp, &a0, sipType_QMatrix4x4, &a1, sipType_QMatrix3x3, &a2))
        {
            sipCpp->blit(a0,*a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTextureBlitter, sipName_blit, doc_QOpenGLTextureBlitter_blit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTextureBlitter_targetTransform, "targetTransform(QRectF, QRect) -> QMatrix4x4");

extern "C" {static PyObject *meth_QOpenGLTextureBlitter_targetTransform(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTextureBlitter_targetTransform(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
        const  ::QRect* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9", sipType_QRectF, &a0, sipType_QRect, &a1))
        {
             ::QMatrix4x4*sipRes;

            sipRes = new  ::QMatrix4x4( ::QOpenGLTextureBlitter::targetTransform(*a0,*a1));

            return sipConvertFromNewType(sipRes,sipType_QMatrix4x4,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTextureBlitter, sipName_targetTransform, doc_QOpenGLTextureBlitter_targetTransform);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTextureBlitter_sourceTransform, "sourceTransform(QRectF, QSize, QOpenGLTextureBlitter.Origin) -> QMatrix3x3");

extern "C" {static PyObject *meth_QOpenGLTextureBlitter_sourceTransform(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTextureBlitter_sourceTransform(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
        const  ::QSize* a1;
         ::QOpenGLTextureBlitter::Origin a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9E", sipType_QRectF, &a0, sipType_QSize, &a1, sipType_QOpenGLTextureBlitter_Origin, &a2))
        {
             ::QMatrix3x3*sipRes;

            sipRes = new  ::QMatrix3x3( ::QOpenGLTextureBlitter::sourceTransform(*a0,*a1,a2));

            return sipConvertFromNewType(sipRes,sipType_QMatrix3x3,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTextureBlitter, sipName_sourceTransform, doc_QOpenGLTextureBlitter_sourceTransform);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QOpenGLTextureBlitter(void *, int);}
static void release_QOpenGLTextureBlitter(void *sipCppV, int)
{
    delete reinterpret_cast< ::QOpenGLTextureBlitter *>(sipCppV);
}


extern "C" {static void dealloc_QOpenGLTextureBlitter(sipSimpleWrapper *);}
static void dealloc_QOpenGLTextureBlitter(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QOpenGLTextureBlitter(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QOpenGLTextureBlitter(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOpenGLTextureBlitter(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QOpenGLTextureBlitter *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QOpenGLTextureBlitter();

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QOpenGLTextureBlitter[] = {
    {SIP_MLNAME_CAST(sipName_bind), SIP_MLMETH_CAST(meth_QOpenGLTextureBlitter_bind), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLTextureBlitter_bind)},
    {SIP_MLNAME_CAST(sipName_blit), meth_QOpenGLTextureBlitter_blit, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTextureBlitter_blit)},
    {SIP_MLNAME_CAST(sipName_create), meth_QOpenGLTextureBlitter_create, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTextureBlitter_create)},
    {SIP_MLNAME_CAST(sipName_destroy), meth_QOpenGLTextureBlitter_destroy, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTextureBlitter_destroy)},
    {SIP_MLNAME_CAST(sipName_isCreated), meth_QOpenGLTextureBlitter_isCreated, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTextureBlitter_isCreated)},
    {SIP_MLNAME_CAST(sipName_release), meth_QOpenGLTextureBlitter_release, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTextureBlitter_release)},
    {SIP_MLNAME_CAST(sipName_setOpacity), meth_QOpenGLTextureBlitter_setOpacity, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTextureBlitter_setOpacity)},
    {SIP_MLNAME_CAST(sipName_setRedBlueSwizzle), meth_QOpenGLTextureBlitter_setRedBlueSwizzle, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTextureBlitter_setRedBlueSwizzle)},
    {SIP_MLNAME_CAST(sipName_sourceTransform), meth_QOpenGLTextureBlitter_sourceTransform, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTextureBlitter_sourceTransform)},
    {SIP_MLNAME_CAST(sipName_supportsExternalOESTarget), meth_QOpenGLTextureBlitter_supportsExternalOESTarget, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTextureBlitter_supportsExternalOESTarget)},
    {SIP_MLNAME_CAST(sipName_targetTransform), meth_QOpenGLTextureBlitter_targetTransform, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTextureBlitter_targetTransform)}
};

static sipEnumMemberDef enummembers_QOpenGLTextureBlitter[] = {
    {sipName_OriginBottomLeft, static_cast<int>( ::QOpenGLTextureBlitter::OriginBottomLeft), 173},
    {sipName_OriginTopLeft, static_cast<int>( ::QOpenGLTextureBlitter::OriginTopLeft), 173},
};

PyDoc_STRVAR(doc_QOpenGLTextureBlitter, "\1QOpenGLTextureBlitter()");


static pyqt5ClassPluginDef plugin_QOpenGLTextureBlitter = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QOpenGLTextureBlitter = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QOpenGLTextureBlitter,
        {SIP_NULLPTR},
        &plugin_QOpenGLTextureBlitter
    },
    {
        sipNameNr_QOpenGLTextureBlitter,
        {0, 0, 1},
        11, methods_QOpenGLTextureBlitter,
        2, enummembers_QOpenGLTextureBlitter,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QOpenGLTextureBlitter,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QOpenGLTextureBlitter,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QOpenGLTextureBlitter,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QOpenGLTextureBlitter,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopengltexture.sip"
#include <qopengltexture.h>
#line 11809 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopengltexture.sip"
#include <qopengltexture.h>
#line 11813 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


extern "C" {static long slot_QOpenGLTexture_Features___hash__(PyObject *);}
static long slot_QOpenGLTexture_Features___hash__(PyObject *sipSelf)
{
     ::QOpenGLTexture::Features *sipCpp = reinterpret_cast< ::QOpenGLTexture::Features *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLTexture_Features));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QOpenGLTexture::Features::Int();
#line 11831 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QOpenGLTexture_Features___bool__(PyObject *);}
static int slot_QOpenGLTexture_Features___bool__(PyObject *sipSelf)
{
     ::QOpenGLTexture::Features *sipCpp = reinterpret_cast< ::QOpenGLTexture::Features *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLTexture_Features));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QOpenGLTexture::Features::Int() != 0);
#line 11856 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QOpenGLTexture_Features___ne__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLTexture_Features___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QOpenGLTexture::Features *sipCpp = reinterpret_cast< ::QOpenGLTexture::Features *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLTexture_Features));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTexture::Features* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QOpenGLTexture_Features, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QOpenGLTexture::Features::Int() != a0->operator QOpenGLTexture::Features::Int());
#line 11886 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
            sipReleaseType(const_cast< ::QOpenGLTexture::Features *>(a0),sipType_QOpenGLTexture_Features,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QOpenGLTexture_Features, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QOpenGLTexture_Features___eq__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLTexture_Features___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QOpenGLTexture::Features *sipCpp = reinterpret_cast< ::QOpenGLTexture::Features *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLTexture_Features));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTexture::Features* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QOpenGLTexture_Features, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QOpenGLTexture::Features::Int() == a0->operator QOpenGLTexture::Features::Int());
#line 11922 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
            sipReleaseType(const_cast< ::QOpenGLTexture::Features *>(a0),sipType_QOpenGLTexture_Features,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QOpenGLTexture_Features, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QOpenGLTexture_Features___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLTexture_Features___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QOpenGLTexture_Features)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QOpenGLTexture::Features *sipCpp = reinterpret_cast< ::QOpenGLTexture::Features *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLTexture_Features));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QOpenGLTexture::Features(*sipCpp ^ a0);
#line 11961 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QOpenGLTexture_Features___xor__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLTexture_Features___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLTexture::Features* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QOpenGLTexture_Features, &a0, &a0State, &a1))
        {
             ::QOpenGLTexture::Features*sipRes;

            sipRes = new  ::QOpenGLTexture::Features((*a0 ^ a1));
            sipReleaseType(a0,sipType_QOpenGLTexture_Features,a0State);

            return sipConvertFromNewType(sipRes,sipType_QOpenGLTexture_Features,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QOpenGLTexture_Features___ior__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLTexture_Features___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QOpenGLTexture_Features)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QOpenGLTexture::Features *sipCpp = reinterpret_cast< ::QOpenGLTexture::Features *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLTexture_Features));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QOpenGLTexture::Features(*sipCpp | a0);
#line 12033 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QOpenGLTexture_Features___or__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLTexture_Features___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLTexture::Features* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QOpenGLTexture_Features, &a0, &a0State, &a1))
        {
             ::QOpenGLTexture::Features*sipRes;

            sipRes = new  ::QOpenGLTexture::Features((*a0 | a1));
            sipReleaseType(a0,sipType_QOpenGLTexture_Features,a0State);

            return sipConvertFromNewType(sipRes,sipType_QOpenGLTexture_Features,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QOpenGLTexture_Features___iand__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLTexture_Features___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QOpenGLTexture_Features)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QOpenGLTexture::Features *sipCpp = reinterpret_cast< ::QOpenGLTexture::Features *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLTexture_Features));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QOpenGLTexture::Features::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QOpenGLTexture_Features___and__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLTexture_Features___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLTexture::Features* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QOpenGLTexture_Features, &a0, &a0State, &a1))
        {
             ::QOpenGLTexture::Features*sipRes;

            sipRes = new  ::QOpenGLTexture::Features((*a0 & a1));
            sipReleaseType(a0,sipType_QOpenGLTexture_Features,a0State);

            return sipConvertFromNewType(sipRes,sipType_QOpenGLTexture_Features,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QOpenGLTexture_Features___invert__(PyObject *);}
static PyObject *slot_QOpenGLTexture_Features___invert__(PyObject *sipSelf)
{
     ::QOpenGLTexture::Features *sipCpp = reinterpret_cast< ::QOpenGLTexture::Features *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLTexture_Features));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QOpenGLTexture::Features*sipRes;

            sipRes = new  ::QOpenGLTexture::Features(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QOpenGLTexture_Features,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QOpenGLTexture_Features___int__(PyObject *);}
static PyObject *slot_QOpenGLTexture_Features___int__(PyObject *sipSelf)
{
     ::QOpenGLTexture::Features *sipCpp = reinterpret_cast< ::QOpenGLTexture::Features *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLTexture_Features));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QOpenGLTexture_Features(void *, int);}
static void release_QOpenGLTexture_Features(void *sipCppV, int)
{
    delete reinterpret_cast< ::QOpenGLTexture::Features *>(sipCppV);
}


extern "C" {static void assign_QOpenGLTexture_Features(void *, SIP_SSIZE_T, void *);}
static void assign_QOpenGLTexture_Features(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QOpenGLTexture::Features *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QOpenGLTexture::Features *>(sipSrc);
}


extern "C" {static void *array_QOpenGLTexture_Features(SIP_SSIZE_T);}
static void *array_QOpenGLTexture_Features(SIP_SSIZE_T sipNrElem)
{
    return new  ::QOpenGLTexture::Features[sipNrElem];
}


extern "C" {static void *copy_QOpenGLTexture_Features(const void *, SIP_SSIZE_T);}
static void *copy_QOpenGLTexture_Features(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QOpenGLTexture::Features(reinterpret_cast<const  ::QOpenGLTexture::Features *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QOpenGLTexture_Features(sipSimpleWrapper *);}
static void dealloc_QOpenGLTexture_Features(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QOpenGLTexture_Features(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QOpenGLTexture_Features(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOpenGLTexture_Features(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QOpenGLTexture::Features *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QOpenGLTexture::Features();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QOpenGLTexture::Features(a0);

            return sipCpp;
        }
    }

    {
        const  ::QOpenGLTexture::Features* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QOpenGLTexture_Features, &a0, &a0State))
        {
            sipCpp = new  ::QOpenGLTexture::Features(*a0);
            sipReleaseType(const_cast< ::QOpenGLTexture::Features *>(a0),sipType_QOpenGLTexture_Features,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QOpenGLTexture_Features(PyObject *, void **, int *, PyObject *);}
static int convertTo_QOpenGLTexture_Features(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QOpenGLTexture::Features **sipCppPtr = reinterpret_cast< ::QOpenGLTexture::Features **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QOpenGLTexture::Features is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QOpenGLTexture_Feature)) ||
            sipCanConvertToType(sipPy, sipType_QOpenGLTexture_Features, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QOpenGLTexture_Feature)))
{
    *sipCppPtr = new QOpenGLTexture::Features(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QOpenGLTexture::Features *>(sipConvertToType(sipPy, sipType_QOpenGLTexture_Features, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 12301 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QOpenGLTexture_Features[] = {
    {(void *)slot_QOpenGLTexture_Features___hash__, hash_slot},
    {(void *)slot_QOpenGLTexture_Features___bool__, bool_slot},
    {(void *)slot_QOpenGLTexture_Features___ne__, ne_slot},
    {(void *)slot_QOpenGLTexture_Features___eq__, eq_slot},
    {(void *)slot_QOpenGLTexture_Features___ixor__, ixor_slot},
    {(void *)slot_QOpenGLTexture_Features___xor__, xor_slot},
    {(void *)slot_QOpenGLTexture_Features___ior__, ior_slot},
    {(void *)slot_QOpenGLTexture_Features___or__, or_slot},
    {(void *)slot_QOpenGLTexture_Features___iand__, iand_slot},
    {(void *)slot_QOpenGLTexture_Features___and__, and_slot},
    {(void *)slot_QOpenGLTexture_Features___invert__, invert_slot},
    {(void *)slot_QOpenGLTexture_Features___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QOpenGLTexture_Features, "\1QOpenGLTexture.Features()\n"
"QOpenGLTexture.Features(Union[QOpenGLTexture.Features, QOpenGLTexture.Feature])\n"
"QOpenGLTexture.Features(QOpenGLTexture.Features)");


static pyqt5ClassPluginDef plugin_QOpenGLTexture_Features = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QOpenGLTexture_Features = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QOpenGLTexture__Features,
        {SIP_NULLPTR},
        &plugin_QOpenGLTexture_Features
    },
    {
        sipNameNr_Features,
        {153, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QOpenGLTexture_Features,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QOpenGLTexture_Features,
    init_type_QOpenGLTexture_Features,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QOpenGLTexture_Features,
    assign_QOpenGLTexture_Features,
    array_QOpenGLTexture_Features,
    copy_QOpenGLTexture_Features,
    release_QOpenGLTexture_Features,
    SIP_NULLPTR,
    convertTo_QOpenGLTexture_Features,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopengltexture.sip"
#include <qopengltexture.h>
#line 12389 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qimage.sip"
#include <qimage.h>
#line 12393 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 131 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpygui_qpair.sip"
#include <qpair.h>
#line 12396 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 12399 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpygui_qpair.sip"
#include <QOpenGLTexture>
#line 12402 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 250 "sip/QtCore/qpycore_qpair.sip"
#include <qpair.h>
#line 12405 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglpixeltransferoptions.sip"
#include <qopenglpixeltransferoptions.h>
#line 12408 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QOpenGLTexture_create, "create(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLTexture_create(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_create(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->create();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_create, doc_QOpenGLTexture_create);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_destroy, "destroy(self)");

extern "C" {static PyObject *meth_QOpenGLTexture_destroy(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            sipCpp->destroy();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_destroy, doc_QOpenGLTexture_destroy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_isCreated, "isCreated(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLTexture_isCreated(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_isCreated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isCreated();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_isCreated, doc_QOpenGLTexture_isCreated);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_textureId, "textureId(self) -> int");

extern "C" {static PyObject *meth_QOpenGLTexture_textureId(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_textureId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
             ::GLuint sipRes;

            sipRes = sipCpp->textureId();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_textureId, doc_QOpenGLTexture_textureId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_bind, "bind(self)\n"
"bind(self, int, reset: QOpenGLTexture.TextureUnitReset = QOpenGLTexture.DontResetTextureUnit)");

extern "C" {static PyObject *meth_QOpenGLTexture_bind(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_bind(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLTexture *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            sipCpp->bind();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::uint a0;
         ::QOpenGLTexture::TextureUnitReset a1 = QOpenGLTexture::DontResetTextureUnit;
         ::QOpenGLTexture *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_reset,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bu|E", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0, sipType_QOpenGLTexture_TextureUnitReset, &a1))
        {
            sipCpp->bind(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_bind, doc_QOpenGLTexture_bind);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_release, "release(self)\n"
"release(self, int, reset: QOpenGLTexture.TextureUnitReset = QOpenGLTexture.DontResetTextureUnit)");

extern "C" {static PyObject *meth_QOpenGLTexture_release(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_release(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLTexture *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            sipCpp->release();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::uint a0;
         ::QOpenGLTexture::TextureUnitReset a1 = QOpenGLTexture::DontResetTextureUnit;
         ::QOpenGLTexture *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_reset,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bu|E", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0, sipType_QOpenGLTexture_TextureUnitReset, &a1))
        {
            sipCpp->release(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_release, doc_QOpenGLTexture_release);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_isBound, "isBound(self) -> bool\n"
"isBound(self, int) -> bool");

extern "C" {static PyObject *meth_QOpenGLTexture_isBound(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_isBound(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isBound();

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::uint a0;
         ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isBound(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_isBound, doc_QOpenGLTexture_isBound);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_boundTextureId, "boundTextureId(QOpenGLTexture.BindingTarget) -> int\n"
"boundTextureId(int, QOpenGLTexture.BindingTarget) -> int");

extern "C" {static PyObject *meth_QOpenGLTexture_boundTextureId(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_boundTextureId(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLTexture::BindingTarget a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QOpenGLTexture_BindingTarget, &a0))
        {
             ::GLuint sipRes;

            sipRes =  ::QOpenGLTexture::boundTextureId(a0);

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    {
         ::uint a0;
         ::QOpenGLTexture::BindingTarget a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "uE", &a0, sipType_QOpenGLTexture_BindingTarget, &a1))
        {
             ::GLuint sipRes;

            sipRes =  ::QOpenGLTexture::boundTextureId(a0,a1);

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_boundTextureId, doc_QOpenGLTexture_boundTextureId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setFormat, "setFormat(self, QOpenGLTexture.TextureFormat)");

extern "C" {static PyObject *meth_QOpenGLTexture_setFormat(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLTexture::TextureFormat a0;
         ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QOpenGLTexture, &sipCpp, sipType_QOpenGLTexture_TextureFormat, &a0))
        {
            sipCpp->setFormat(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setFormat, doc_QOpenGLTexture_setFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_format, "format(self) -> QOpenGLTexture.TextureFormat");

extern "C" {static PyObject *meth_QOpenGLTexture_format(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
             ::QOpenGLTexture::TextureFormat sipRes;

            sipRes = sipCpp->format();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QOpenGLTexture_TextureFormat);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_format, doc_QOpenGLTexture_format);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setSize, "setSize(self, int, height: int = 1, depth: int = 1)");

extern "C" {static PyObject *meth_QOpenGLTexture_setSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1 = 1;
        int a2 = 1;
         ::QOpenGLTexture *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_height,
            sipName_depth,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|ii", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->setSize(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setSize, doc_QOpenGLTexture_setSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_width, "width(self) -> int");

extern "C" {static PyObject *meth_QOpenGLTexture_width(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->width();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_width, doc_QOpenGLTexture_width);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_height, "height(self) -> int");

extern "C" {static PyObject *meth_QOpenGLTexture_height(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_height(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->height();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_height, doc_QOpenGLTexture_height);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_depth, "depth(self) -> int");

extern "C" {static PyObject *meth_QOpenGLTexture_depth(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_depth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->depth();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_depth, doc_QOpenGLTexture_depth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setMipLevels, "setMipLevels(self, int)");

extern "C" {static PyObject *meth_QOpenGLTexture_setMipLevels(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setMipLevels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0))
        {
            sipCpp->setMipLevels(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setMipLevels, doc_QOpenGLTexture_setMipLevels);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_mipLevels, "mipLevels(self) -> int");

extern "C" {static PyObject *meth_QOpenGLTexture_mipLevels(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_mipLevels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->mipLevels();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_mipLevels, doc_QOpenGLTexture_mipLevels);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_maximumMipLevels, "maximumMipLevels(self) -> int");

extern "C" {static PyObject *meth_QOpenGLTexture_maximumMipLevels(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_maximumMipLevels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maximumMipLevels();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_maximumMipLevels, doc_QOpenGLTexture_maximumMipLevels);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setLayers, "setLayers(self, int)");

extern "C" {static PyObject *meth_QOpenGLTexture_setLayers(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setLayers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0))
        {
            sipCpp->setLayers(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setLayers, doc_QOpenGLTexture_setLayers);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_layers, "layers(self) -> int");

extern "C" {static PyObject *meth_QOpenGLTexture_layers(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_layers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->layers();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_layers, doc_QOpenGLTexture_layers);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_faces, "faces(self) -> int");

extern "C" {static PyObject *meth_QOpenGLTexture_faces(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_faces(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->faces();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_faces, doc_QOpenGLTexture_faces);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_allocateStorage, "allocateStorage(self)\n"
"allocateStorage(self, QOpenGLTexture.PixelFormat, QOpenGLTexture.PixelType)");

extern "C" {static PyObject *meth_QOpenGLTexture_allocateStorage(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_allocateStorage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            sipCpp->allocateStorage();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QOpenGLTexture::PixelFormat a0;
         ::QOpenGLTexture::PixelType a1;
         ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEE", &sipSelf, sipType_QOpenGLTexture, &sipCpp, sipType_QOpenGLTexture_PixelFormat, &a0, sipType_QOpenGLTexture_PixelType, &a1))
        {
            sipCpp->allocateStorage(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_allocateStorage, doc_QOpenGLTexture_allocateStorage);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_isStorageAllocated, "isStorageAllocated(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLTexture_isStorageAllocated(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_isStorageAllocated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isStorageAllocated();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_isStorageAllocated, doc_QOpenGLTexture_isStorageAllocated);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_createTextureView, "createTextureView(self, QOpenGLTexture.Target, QOpenGLTexture.TextureFormat, int, int, int, int) -> QOpenGLTexture");

extern "C" {static PyObject *meth_QOpenGLTexture_createTextureView(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_createTextureView(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLTexture::Target a0;
         ::QOpenGLTexture::TextureFormat a1;
        int a2;
        int a3;
        int a4;
        int a5;
        const  ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEEiiii", &sipSelf, sipType_QOpenGLTexture, &sipCpp, sipType_QOpenGLTexture_Target, &a0, sipType_QOpenGLTexture_TextureFormat, &a1, &a2, &a3, &a4, &a5))
        {
             ::QOpenGLTexture*sipRes;

            sipRes = sipCpp->createTextureView(a0,a1,a2,a3,a4,a5);

            return sipConvertFromNewType(sipRes,sipType_QOpenGLTexture,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_createTextureView, doc_QOpenGLTexture_createTextureView);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_isTextureView, "isTextureView(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLTexture_isTextureView(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_isTextureView(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isTextureView();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_isTextureView, doc_QOpenGLTexture_isTextureView);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setData, "setData(self, int, int, QOpenGLTexture.CubeMapFace, QOpenGLTexture.PixelFormat, QOpenGLTexture.PixelType, sip.voidptr, options: QOpenGLPixelTransferOptions = None)\n"
"setData(self, int, int, QOpenGLTexture.PixelFormat, QOpenGLTexture.PixelType, sip.voidptr, options: QOpenGLPixelTransferOptions = None)\n"
"setData(self, int, QOpenGLTexture.PixelFormat, QOpenGLTexture.PixelType, sip.voidptr, options: QOpenGLPixelTransferOptions = None)\n"
"setData(self, QOpenGLTexture.PixelFormat, QOpenGLTexture.PixelType, sip.voidptr, options: QOpenGLPixelTransferOptions = None)\n"
"setData(self, QImage, genMipMaps: QOpenGLTexture.MipMapGeneration = QOpenGLTexture.GenerateMipMaps)\n"
"setData(self, int, int, int, QOpenGLTexture.CubeMapFace, QOpenGLTexture.PixelFormat, QOpenGLTexture.PixelType, sip.voidptr, options: QOpenGLPixelTransferOptions = None)");

extern "C" {static PyObject *meth_QOpenGLTexture_setData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QOpenGLTexture::CubeMapFace a2;
         ::QOpenGLTexture::PixelFormat a3;
         ::QOpenGLTexture::PixelType a4;
        const void* a5;
        const  ::QOpenGLPixelTransferOptions* const a6 = 0;
         ::QOpenGLTexture *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiiEEEv|J8", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0, &a1, sipType_QOpenGLTexture_CubeMapFace, &a2, sipType_QOpenGLTexture_PixelFormat, &a3, sipType_QOpenGLTexture_PixelType, &a4, &a5, sipType_QOpenGLPixelTransferOptions, &a6))
        {
            sipCpp->setData(a0,a1,a2,a3,a4,a5,a6);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
         ::QOpenGLTexture::PixelFormat a2;
         ::QOpenGLTexture::PixelType a3;
        const void* a4;
        const  ::QOpenGLPixelTransferOptions* const a5 = 0;
         ::QOpenGLTexture *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiiEEv|J8", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0, &a1, sipType_QOpenGLTexture_PixelFormat, &a2, sipType_QOpenGLTexture_PixelType, &a3, &a4, sipType_QOpenGLPixelTransferOptions, &a5))
        {
            sipCpp->setData(a0,a1,a2,a3,a4,a5);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::QOpenGLTexture::PixelFormat a1;
         ::QOpenGLTexture::PixelType a2;
        const void* a3;
        const  ::QOpenGLPixelTransferOptions* const a4 = 0;
         ::QOpenGLTexture *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiEEv|J8", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0, sipType_QOpenGLTexture_PixelFormat, &a1, sipType_QOpenGLTexture_PixelType, &a2, &a3, sipType_QOpenGLPixelTransferOptions, &a4))
        {
            sipCpp->setData(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QOpenGLTexture::PixelFormat a0;
         ::QOpenGLTexture::PixelType a1;
        const void* a2;
        const  ::QOpenGLPixelTransferOptions* const a3 = 0;
         ::QOpenGLTexture *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BEEv|J8", &sipSelf, sipType_QOpenGLTexture, &sipCpp, sipType_QOpenGLTexture_PixelFormat, &a0, sipType_QOpenGLTexture_PixelType, &a1, &a2, sipType_QOpenGLPixelTransferOptions, &a3))
        {
            sipCpp->setData(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QImage* a0;
         ::QOpenGLTexture::MipMapGeneration a1 = QOpenGLTexture::GenerateMipMaps;
         ::QOpenGLTexture *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_genMipMaps,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|E", &sipSelf, sipType_QOpenGLTexture, &sipCpp, sipType_QImage, &a0, sipType_QOpenGLTexture_MipMapGeneration, &a1))
        {
            sipCpp->setData(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
         ::QOpenGLTexture::CubeMapFace a3;
         ::QOpenGLTexture::PixelFormat a4;
         ::QOpenGLTexture::PixelType a5;
        const void* a6;
        const  ::QOpenGLPixelTransferOptions* const a7 = 0;
         ::QOpenGLTexture *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiiiEEEv|J8", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0, &a1, &a2, sipType_QOpenGLTexture_CubeMapFace, &a3, sipType_QOpenGLTexture_PixelFormat, &a4, sipType_QOpenGLTexture_PixelType, &a5, &a6, sipType_QOpenGLPixelTransferOptions, &a7))
        {
            sipCpp->setData(a0,a1,a2,a3,a4,a5,a6,a7);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setData, doc_QOpenGLTexture_setData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setCompressedData, "setCompressedData(self, int, int, QOpenGLTexture.CubeMapFace, int, sip.voidptr, options: QOpenGLPixelTransferOptions = None)\n"
"setCompressedData(self, int, int, int, sip.voidptr, options: QOpenGLPixelTransferOptions = None)\n"
"setCompressedData(self, int, int, sip.voidptr, options: QOpenGLPixelTransferOptions = None)\n"
"setCompressedData(self, int, sip.voidptr, options: QOpenGLPixelTransferOptions = None)\n"
"setCompressedData(self, int, int, int, QOpenGLTexture.CubeMapFace, int, sip.voidptr, options: QOpenGLPixelTransferOptions = None)");

extern "C" {static PyObject *meth_QOpenGLTexture_setCompressedData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setCompressedData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QOpenGLTexture::CubeMapFace a2;
        int a3;
        const void* a4;
        const  ::QOpenGLPixelTransferOptions* const a5 = 0;
         ::QOpenGLTexture *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiiEiv|J8", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0, &a1, sipType_QOpenGLTexture_CubeMapFace, &a2, &a3, &a4, sipType_QOpenGLPixelTransferOptions, &a5))
        {
            sipCpp->setCompressedData(a0,a1,a2,a3,a4,a5);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        const void* a3;
        const  ::QOpenGLPixelTransferOptions* const a4 = 0;
         ::QOpenGLTexture *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiiv|J8", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0, &a1, &a2, &a3, sipType_QOpenGLPixelTransferOptions, &a4))
        {
            sipCpp->setCompressedData(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        const void* a2;
        const  ::QOpenGLPixelTransferOptions* const a3 = 0;
         ::QOpenGLTexture *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiv|J8", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0, &a1, &a2, sipType_QOpenGLPixelTransferOptions, &a3))
        {
            sipCpp->setCompressedData(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const void* a1;
        const  ::QOpenGLPixelTransferOptions* const a2 = 0;
         ::QOpenGLTexture *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biv|J8", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0, &a1, sipType_QOpenGLPixelTransferOptions, &a2))
        {
            sipCpp->setCompressedData(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
         ::QOpenGLTexture::CubeMapFace a3;
        int a4;
        const void* a5;
        const  ::QOpenGLPixelTransferOptions* const a6 = 0;
         ::QOpenGLTexture *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiiiEiv|J8", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0, &a1, &a2, sipType_QOpenGLTexture_CubeMapFace, &a3, &a4, &a5, sipType_QOpenGLPixelTransferOptions, &a6))
        {
            sipCpp->setCompressedData(a0,a1,a2,a3,a4,a5,a6);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setCompressedData, doc_QOpenGLTexture_setCompressedData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_hasFeature, "hasFeature(QOpenGLTexture.Feature) -> bool");

extern "C" {static PyObject *meth_QOpenGLTexture_hasFeature(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_hasFeature(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLTexture::Feature a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QOpenGLTexture_Feature, &a0))
        {
            bool sipRes;

            sipRes =  ::QOpenGLTexture::hasFeature(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_hasFeature, doc_QOpenGLTexture_hasFeature);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setMipBaseLevel, "setMipBaseLevel(self, int)");

extern "C" {static PyObject *meth_QOpenGLTexture_setMipBaseLevel(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setMipBaseLevel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0))
        {
            sipCpp->setMipBaseLevel(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setMipBaseLevel, doc_QOpenGLTexture_setMipBaseLevel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_mipBaseLevel, "mipBaseLevel(self) -> int");

extern "C" {static PyObject *meth_QOpenGLTexture_mipBaseLevel(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_mipBaseLevel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->mipBaseLevel();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_mipBaseLevel, doc_QOpenGLTexture_mipBaseLevel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setMipMaxLevel, "setMipMaxLevel(self, int)");

extern "C" {static PyObject *meth_QOpenGLTexture_setMipMaxLevel(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setMipMaxLevel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0))
        {
            sipCpp->setMipMaxLevel(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setMipMaxLevel, doc_QOpenGLTexture_setMipMaxLevel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_mipMaxLevel, "mipMaxLevel(self) -> int");

extern "C" {static PyObject *meth_QOpenGLTexture_mipMaxLevel(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_mipMaxLevel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->mipMaxLevel();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_mipMaxLevel, doc_QOpenGLTexture_mipMaxLevel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setMipLevelRange, "setMipLevelRange(self, int, int)");

extern "C" {static PyObject *meth_QOpenGLTexture_setMipLevelRange(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setMipLevelRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0, &a1))
        {
            sipCpp->setMipLevelRange(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setMipLevelRange, doc_QOpenGLTexture_setMipLevelRange);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_mipLevelRange, "mipLevelRange(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_QOpenGLTexture_mipLevelRange(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_mipLevelRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
             ::QPair<int,int>*sipRes;

            sipRes = new  ::QPair<int,int>(sipCpp->mipLevelRange());

            return sipConvertFromNewType(sipRes,sipType_QPair_1800_1800,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_mipLevelRange, doc_QOpenGLTexture_mipLevelRange);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setAutoMipMapGenerationEnabled, "setAutoMipMapGenerationEnabled(self, bool)");

extern "C" {static PyObject *meth_QOpenGLTexture_setAutoMipMapGenerationEnabled(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setAutoMipMapGenerationEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0))
        {
            sipCpp->setAutoMipMapGenerationEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setAutoMipMapGenerationEnabled, doc_QOpenGLTexture_setAutoMipMapGenerationEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_isAutoMipMapGenerationEnabled, "isAutoMipMapGenerationEnabled(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLTexture_isAutoMipMapGenerationEnabled(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_isAutoMipMapGenerationEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAutoMipMapGenerationEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_isAutoMipMapGenerationEnabled, doc_QOpenGLTexture_isAutoMipMapGenerationEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_generateMipMaps, "generateMipMaps(self)\n"
"generateMipMaps(self, int, resetBaseLevel: bool = True)");

extern "C" {static PyObject *meth_QOpenGLTexture_generateMipMaps(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_generateMipMaps(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLTexture *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            sipCpp->generateMipMaps();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        bool a1 = 1;
         ::QOpenGLTexture *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_resetBaseLevel,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|b", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0, &a1))
        {
            sipCpp->generateMipMaps(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_generateMipMaps, doc_QOpenGLTexture_generateMipMaps);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setSwizzleMask, "setSwizzleMask(self, QOpenGLTexture.SwizzleComponent, QOpenGLTexture.SwizzleValue)\n"
"setSwizzleMask(self, QOpenGLTexture.SwizzleValue, QOpenGLTexture.SwizzleValue, QOpenGLTexture.SwizzleValue, QOpenGLTexture.SwizzleValue)");

extern "C" {static PyObject *meth_QOpenGLTexture_setSwizzleMask(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setSwizzleMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLTexture::SwizzleComponent a0;
         ::QOpenGLTexture::SwizzleValue a1;
         ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEE", &sipSelf, sipType_QOpenGLTexture, &sipCpp, sipType_QOpenGLTexture_SwizzleComponent, &a0, sipType_QOpenGLTexture_SwizzleValue, &a1))
        {
            sipCpp->setSwizzleMask(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QOpenGLTexture::SwizzleValue a0;
         ::QOpenGLTexture::SwizzleValue a1;
         ::QOpenGLTexture::SwizzleValue a2;
         ::QOpenGLTexture::SwizzleValue a3;
         ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEEEE", &sipSelf, sipType_QOpenGLTexture, &sipCpp, sipType_QOpenGLTexture_SwizzleValue, &a0, sipType_QOpenGLTexture_SwizzleValue, &a1, sipType_QOpenGLTexture_SwizzleValue, &a2, sipType_QOpenGLTexture_SwizzleValue, &a3))
        {
            sipCpp->setSwizzleMask(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setSwizzleMask, doc_QOpenGLTexture_setSwizzleMask);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_swizzleMask, "swizzleMask(self, QOpenGLTexture.SwizzleComponent) -> QOpenGLTexture.SwizzleValue");

extern "C" {static PyObject *meth_QOpenGLTexture_swizzleMask(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_swizzleMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLTexture::SwizzleComponent a0;
        const  ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QOpenGLTexture, &sipCpp, sipType_QOpenGLTexture_SwizzleComponent, &a0))
        {
             ::QOpenGLTexture::SwizzleValue sipRes;

            sipRes = sipCpp->swizzleMask(a0);

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QOpenGLTexture_SwizzleValue);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_swizzleMask, doc_QOpenGLTexture_swizzleMask);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setDepthStencilMode, "setDepthStencilMode(self, QOpenGLTexture.DepthStencilMode)");

extern "C" {static PyObject *meth_QOpenGLTexture_setDepthStencilMode(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setDepthStencilMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLTexture::DepthStencilMode a0;
         ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QOpenGLTexture, &sipCpp, sipType_QOpenGLTexture_DepthStencilMode, &a0))
        {
            sipCpp->setDepthStencilMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setDepthStencilMode, doc_QOpenGLTexture_setDepthStencilMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_depthStencilMode, "depthStencilMode(self) -> QOpenGLTexture.DepthStencilMode");

extern "C" {static PyObject *meth_QOpenGLTexture_depthStencilMode(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_depthStencilMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
             ::QOpenGLTexture::DepthStencilMode sipRes;

            sipRes = sipCpp->depthStencilMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QOpenGLTexture_DepthStencilMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_depthStencilMode, doc_QOpenGLTexture_depthStencilMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setMinificationFilter, "setMinificationFilter(self, QOpenGLTexture.Filter)");

extern "C" {static PyObject *meth_QOpenGLTexture_setMinificationFilter(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setMinificationFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLTexture::Filter a0;
         ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QOpenGLTexture, &sipCpp, sipType_QOpenGLTexture_Filter, &a0))
        {
            sipCpp->setMinificationFilter(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setMinificationFilter, doc_QOpenGLTexture_setMinificationFilter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_minificationFilter, "minificationFilter(self) -> QOpenGLTexture.Filter");

extern "C" {static PyObject *meth_QOpenGLTexture_minificationFilter(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_minificationFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
             ::QOpenGLTexture::Filter sipRes;

            sipRes = sipCpp->minificationFilter();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QOpenGLTexture_Filter);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_minificationFilter, doc_QOpenGLTexture_minificationFilter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setMagnificationFilter, "setMagnificationFilter(self, QOpenGLTexture.Filter)");

extern "C" {static PyObject *meth_QOpenGLTexture_setMagnificationFilter(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setMagnificationFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLTexture::Filter a0;
         ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QOpenGLTexture, &sipCpp, sipType_QOpenGLTexture_Filter, &a0))
        {
            sipCpp->setMagnificationFilter(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setMagnificationFilter, doc_QOpenGLTexture_setMagnificationFilter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_magnificationFilter, "magnificationFilter(self) -> QOpenGLTexture.Filter");

extern "C" {static PyObject *meth_QOpenGLTexture_magnificationFilter(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_magnificationFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
             ::QOpenGLTexture::Filter sipRes;

            sipRes = sipCpp->magnificationFilter();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QOpenGLTexture_Filter);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_magnificationFilter, doc_QOpenGLTexture_magnificationFilter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setMinMagFilters, "setMinMagFilters(self, QOpenGLTexture.Filter, QOpenGLTexture.Filter)");

extern "C" {static PyObject *meth_QOpenGLTexture_setMinMagFilters(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setMinMagFilters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLTexture::Filter a0;
         ::QOpenGLTexture::Filter a1;
         ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEE", &sipSelf, sipType_QOpenGLTexture, &sipCpp, sipType_QOpenGLTexture_Filter, &a0, sipType_QOpenGLTexture_Filter, &a1))
        {
            sipCpp->setMinMagFilters(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setMinMagFilters, doc_QOpenGLTexture_setMinMagFilters);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_minMagFilters, "minMagFilters(self) -> Tuple[QOpenGLTexture.Filter, QOpenGLTexture.Filter]");

extern "C" {static PyObject *meth_QOpenGLTexture_minMagFilters(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_minMagFilters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
             ::QPair< ::QOpenGLTexture::Filter, ::QOpenGLTexture::Filter>*sipRes;

            sipRes = new  ::QPair< ::QOpenGLTexture::Filter, ::QOpenGLTexture::Filter>(sipCpp->minMagFilters());

            return sipConvertFromNewType(sipRes,sipType_QPair_0100QOpenGLTexture_Filter_0100QOpenGLTexture_Filter,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_minMagFilters, doc_QOpenGLTexture_minMagFilters);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setMaximumAnisotropy, "setMaximumAnisotropy(self, float)");

extern "C" {static PyObject *meth_QOpenGLTexture_setMaximumAnisotropy(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setMaximumAnisotropy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
         ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0))
        {
            sipCpp->setMaximumAnisotropy(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setMaximumAnisotropy, doc_QOpenGLTexture_setMaximumAnisotropy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_maximumAnisotropy, "maximumAnisotropy(self) -> float");

extern "C" {static PyObject *meth_QOpenGLTexture_maximumAnisotropy(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_maximumAnisotropy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->maximumAnisotropy();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_maximumAnisotropy, doc_QOpenGLTexture_maximumAnisotropy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setWrapMode, "setWrapMode(self, QOpenGLTexture.WrapMode)\n"
"setWrapMode(self, QOpenGLTexture.CoordinateDirection, QOpenGLTexture.WrapMode)");

extern "C" {static PyObject *meth_QOpenGLTexture_setWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLTexture::WrapMode a0;
         ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QOpenGLTexture, &sipCpp, sipType_QOpenGLTexture_WrapMode, &a0))
        {
            sipCpp->setWrapMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QOpenGLTexture::CoordinateDirection a0;
         ::QOpenGLTexture::WrapMode a1;
         ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEE", &sipSelf, sipType_QOpenGLTexture, &sipCpp, sipType_QOpenGLTexture_CoordinateDirection, &a0, sipType_QOpenGLTexture_WrapMode, &a1))
        {
            sipCpp->setWrapMode(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setWrapMode, doc_QOpenGLTexture_setWrapMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_wrapMode, "wrapMode(self, QOpenGLTexture.CoordinateDirection) -> QOpenGLTexture.WrapMode");

extern "C" {static PyObject *meth_QOpenGLTexture_wrapMode(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_wrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLTexture::CoordinateDirection a0;
        const  ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QOpenGLTexture, &sipCpp, sipType_QOpenGLTexture_CoordinateDirection, &a0))
        {
             ::QOpenGLTexture::WrapMode sipRes;

            sipRes = sipCpp->wrapMode(a0);

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QOpenGLTexture_WrapMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_wrapMode, doc_QOpenGLTexture_wrapMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setBorderColor, "setBorderColor(self, Union[QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QOpenGLTexture_setBorderColor(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setBorderColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QColor* a0;
        int a0State = 0;
         ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QOpenGLTexture, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->setBorderColor(*a0);
            sipReleaseType(a0,sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setBorderColor, doc_QOpenGLTexture_setBorderColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_borderColor, "borderColor(self) -> QColor");

extern "C" {static PyObject *meth_QOpenGLTexture_borderColor(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_borderColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor(sipCpp->borderColor());

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_borderColor, doc_QOpenGLTexture_borderColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setMinimumLevelOfDetail, "setMinimumLevelOfDetail(self, float)");

extern "C" {static PyObject *meth_QOpenGLTexture_setMinimumLevelOfDetail(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setMinimumLevelOfDetail(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
         ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0))
        {
            sipCpp->setMinimumLevelOfDetail(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setMinimumLevelOfDetail, doc_QOpenGLTexture_setMinimumLevelOfDetail);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_minimumLevelOfDetail, "minimumLevelOfDetail(self) -> float");

extern "C" {static PyObject *meth_QOpenGLTexture_minimumLevelOfDetail(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_minimumLevelOfDetail(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->minimumLevelOfDetail();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_minimumLevelOfDetail, doc_QOpenGLTexture_minimumLevelOfDetail);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setMaximumLevelOfDetail, "setMaximumLevelOfDetail(self, float)");

extern "C" {static PyObject *meth_QOpenGLTexture_setMaximumLevelOfDetail(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setMaximumLevelOfDetail(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
         ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0))
        {
            sipCpp->setMaximumLevelOfDetail(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setMaximumLevelOfDetail, doc_QOpenGLTexture_setMaximumLevelOfDetail);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_maximumLevelOfDetail, "maximumLevelOfDetail(self) -> float");

extern "C" {static PyObject *meth_QOpenGLTexture_maximumLevelOfDetail(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_maximumLevelOfDetail(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->maximumLevelOfDetail();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_maximumLevelOfDetail, doc_QOpenGLTexture_maximumLevelOfDetail);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setLevelOfDetailRange, "setLevelOfDetailRange(self, float, float)");

extern "C" {static PyObject *meth_QOpenGLTexture_setLevelOfDetailRange(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setLevelOfDetailRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
        float a1;
         ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bff", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0, &a1))
        {
            sipCpp->setLevelOfDetailRange(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setLevelOfDetailRange, doc_QOpenGLTexture_setLevelOfDetailRange);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_levelOfDetailRange, "levelOfDetailRange(self) -> Tuple[float, float]");

extern "C" {static PyObject *meth_QOpenGLTexture_levelOfDetailRange(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_levelOfDetailRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
             ::QPair<float,float>*sipRes;

            sipRes = new  ::QPair<float,float>(sipCpp->levelOfDetailRange());

            return sipConvertFromNewType(sipRes,sipType_QPair_2200_2200,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_levelOfDetailRange, doc_QOpenGLTexture_levelOfDetailRange);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setLevelofDetailBias, "setLevelofDetailBias(self, float)");

extern "C" {static PyObject *meth_QOpenGLTexture_setLevelofDetailBias(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setLevelofDetailBias(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
         ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0))
        {
            sipCpp->setLevelofDetailBias(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setLevelofDetailBias, doc_QOpenGLTexture_setLevelofDetailBias);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_levelofDetailBias, "levelofDetailBias(self) -> float");

extern "C" {static PyObject *meth_QOpenGLTexture_levelofDetailBias(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_levelofDetailBias(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->levelofDetailBias();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_levelofDetailBias, doc_QOpenGLTexture_levelofDetailBias);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_target, "target(self) -> QOpenGLTexture.Target");

extern "C" {static PyObject *meth_QOpenGLTexture_target(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_target(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
             ::QOpenGLTexture::Target sipRes;

            sipRes = sipCpp->target();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QOpenGLTexture_Target);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_target, doc_QOpenGLTexture_target);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setSamples, "setSamples(self, int)");

extern "C" {static PyObject *meth_QOpenGLTexture_setSamples(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setSamples(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0))
        {
            sipCpp->setSamples(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setSamples, doc_QOpenGLTexture_setSamples);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_samples, "samples(self) -> int");

extern "C" {static PyObject *meth_QOpenGLTexture_samples(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_samples(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->samples();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_samples, doc_QOpenGLTexture_samples);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setFixedSamplePositions, "setFixedSamplePositions(self, bool)");

extern "C" {static PyObject *meth_QOpenGLTexture_setFixedSamplePositions(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setFixedSamplePositions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0))
        {
            sipCpp->setFixedSamplePositions(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setFixedSamplePositions, doc_QOpenGLTexture_setFixedSamplePositions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_isFixedSamplePositions, "isFixedSamplePositions(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLTexture_isFixedSamplePositions(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_isFixedSamplePositions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isFixedSamplePositions();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_isFixedSamplePositions, doc_QOpenGLTexture_isFixedSamplePositions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setComparisonFunction, "setComparisonFunction(self, QOpenGLTexture.ComparisonFunction)");

extern "C" {static PyObject *meth_QOpenGLTexture_setComparisonFunction(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setComparisonFunction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLTexture::ComparisonFunction a0;
         ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QOpenGLTexture, &sipCpp, sipType_QOpenGLTexture_ComparisonFunction, &a0))
        {
            sipCpp->setComparisonFunction(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setComparisonFunction, doc_QOpenGLTexture_setComparisonFunction);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_comparisonFunction, "comparisonFunction(self) -> QOpenGLTexture.ComparisonFunction");

extern "C" {static PyObject *meth_QOpenGLTexture_comparisonFunction(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_comparisonFunction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
             ::QOpenGLTexture::ComparisonFunction sipRes;

            sipRes = sipCpp->comparisonFunction();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QOpenGLTexture_ComparisonFunction);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_comparisonFunction, doc_QOpenGLTexture_comparisonFunction);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setComparisonMode, "setComparisonMode(self, QOpenGLTexture.ComparisonMode)");

extern "C" {static PyObject *meth_QOpenGLTexture_setComparisonMode(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setComparisonMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLTexture::ComparisonMode a0;
         ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QOpenGLTexture, &sipCpp, sipType_QOpenGLTexture_ComparisonMode, &a0))
        {
            sipCpp->setComparisonMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setComparisonMode, doc_QOpenGLTexture_setComparisonMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLTexture_comparisonMode, "comparisonMode(self) -> QOpenGLTexture.ComparisonMode");

extern "C" {static PyObject *meth_QOpenGLTexture_comparisonMode(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_comparisonMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
             ::QOpenGLTexture::ComparisonMode sipRes;

            sipRes = sipCpp->comparisonMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QOpenGLTexture_ComparisonMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_comparisonMode, doc_QOpenGLTexture_comparisonMode);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QOpenGLTexture(void *, int);}
static void release_QOpenGLTexture(void *sipCppV, int)
{
    delete reinterpret_cast< ::QOpenGLTexture *>(sipCppV);
}


extern "C" {static void dealloc_QOpenGLTexture(sipSimpleWrapper *);}
static void dealloc_QOpenGLTexture(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QOpenGLTexture(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QOpenGLTexture(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOpenGLTexture(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QOpenGLTexture *sipCpp = SIP_NULLPTR;

    {
         ::QOpenGLTexture::Target a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "E", sipType_QOpenGLTexture_Target, &a0))
        {
            sipCpp = new  ::QOpenGLTexture(a0);

            return sipCpp;
        }
    }

    {
        const  ::QImage* a0;
         ::QOpenGLTexture::MipMapGeneration a1 = QOpenGLTexture::GenerateMipMaps;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_genMipMaps,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|E", sipType_QImage, &a0, sipType_QOpenGLTexture_MipMapGeneration, &a1))
        {
            sipCpp = new  ::QOpenGLTexture(*a0,a1);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QOpenGLTexture[] = {
    {SIP_MLNAME_CAST(sipName_allocateStorage), meth_QOpenGLTexture_allocateStorage, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_allocateStorage)},
    {SIP_MLNAME_CAST(sipName_bind), SIP_MLMETH_CAST(meth_QOpenGLTexture_bind), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLTexture_bind)},
    {SIP_MLNAME_CAST(sipName_borderColor), meth_QOpenGLTexture_borderColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_borderColor)},
    {SIP_MLNAME_CAST(sipName_boundTextureId), meth_QOpenGLTexture_boundTextureId, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_boundTextureId)},
    {SIP_MLNAME_CAST(sipName_comparisonFunction), meth_QOpenGLTexture_comparisonFunction, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_comparisonFunction)},
    {SIP_MLNAME_CAST(sipName_comparisonMode), meth_QOpenGLTexture_comparisonMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_comparisonMode)},
    {SIP_MLNAME_CAST(sipName_create), meth_QOpenGLTexture_create, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_create)},
    {SIP_MLNAME_CAST(sipName_createTextureView), meth_QOpenGLTexture_createTextureView, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_createTextureView)},
    {SIP_MLNAME_CAST(sipName_depth), meth_QOpenGLTexture_depth, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_depth)},
    {SIP_MLNAME_CAST(sipName_depthStencilMode), meth_QOpenGLTexture_depthStencilMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_depthStencilMode)},
    {SIP_MLNAME_CAST(sipName_destroy), meth_QOpenGLTexture_destroy, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_destroy)},
    {SIP_MLNAME_CAST(sipName_faces), meth_QOpenGLTexture_faces, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_faces)},
    {SIP_MLNAME_CAST(sipName_format), meth_QOpenGLTexture_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_format)},
    {SIP_MLNAME_CAST(sipName_generateMipMaps), SIP_MLMETH_CAST(meth_QOpenGLTexture_generateMipMaps), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLTexture_generateMipMaps)},
    {SIP_MLNAME_CAST(sipName_hasFeature), meth_QOpenGLTexture_hasFeature, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_hasFeature)},
    {SIP_MLNAME_CAST(sipName_height), meth_QOpenGLTexture_height, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_height)},
    {SIP_MLNAME_CAST(sipName_isAutoMipMapGenerationEnabled), meth_QOpenGLTexture_isAutoMipMapGenerationEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_isAutoMipMapGenerationEnabled)},
    {SIP_MLNAME_CAST(sipName_isBound), meth_QOpenGLTexture_isBound, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_isBound)},
    {SIP_MLNAME_CAST(sipName_isCreated), meth_QOpenGLTexture_isCreated, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_isCreated)},
    {SIP_MLNAME_CAST(sipName_isFixedSamplePositions), meth_QOpenGLTexture_isFixedSamplePositions, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_isFixedSamplePositions)},
    {SIP_MLNAME_CAST(sipName_isStorageAllocated), meth_QOpenGLTexture_isStorageAllocated, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_isStorageAllocated)},
    {SIP_MLNAME_CAST(sipName_isTextureView), meth_QOpenGLTexture_isTextureView, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_isTextureView)},
    {SIP_MLNAME_CAST(sipName_layers), meth_QOpenGLTexture_layers, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_layers)},
    {SIP_MLNAME_CAST(sipName_levelOfDetailRange), meth_QOpenGLTexture_levelOfDetailRange, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_levelOfDetailRange)},
    {SIP_MLNAME_CAST(sipName_levelofDetailBias), meth_QOpenGLTexture_levelofDetailBias, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_levelofDetailBias)},
    {SIP_MLNAME_CAST(sipName_magnificationFilter), meth_QOpenGLTexture_magnificationFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_magnificationFilter)},
    {SIP_MLNAME_CAST(sipName_maximumAnisotropy), meth_QOpenGLTexture_maximumAnisotropy, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_maximumAnisotropy)},
    {SIP_MLNAME_CAST(sipName_maximumLevelOfDetail), meth_QOpenGLTexture_maximumLevelOfDetail, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_maximumLevelOfDetail)},
    {SIP_MLNAME_CAST(sipName_maximumMipLevels), meth_QOpenGLTexture_maximumMipLevels, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_maximumMipLevels)},
    {SIP_MLNAME_CAST(sipName_minMagFilters), meth_QOpenGLTexture_minMagFilters, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_minMagFilters)},
    {SIP_MLNAME_CAST(sipName_minificationFilter), meth_QOpenGLTexture_minificationFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_minificationFilter)},
    {SIP_MLNAME_CAST(sipName_minimumLevelOfDetail), meth_QOpenGLTexture_minimumLevelOfDetail, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_minimumLevelOfDetail)},
    {SIP_MLNAME_CAST(sipName_mipBaseLevel), meth_QOpenGLTexture_mipBaseLevel, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_mipBaseLevel)},
    {SIP_MLNAME_CAST(sipName_mipLevelRange), meth_QOpenGLTexture_mipLevelRange, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_mipLevelRange)},
    {SIP_MLNAME_CAST(sipName_mipLevels), meth_QOpenGLTexture_mipLevels, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_mipLevels)},
    {SIP_MLNAME_CAST(sipName_mipMaxLevel), meth_QOpenGLTexture_mipMaxLevel, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_mipMaxLevel)},
    {SIP_MLNAME_CAST(sipName_release), SIP_MLMETH_CAST(meth_QOpenGLTexture_release), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLTexture_release)},
    {SIP_MLNAME_CAST(sipName_samples), meth_QOpenGLTexture_samples, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_samples)},
    {SIP_MLNAME_CAST(sipName_setAutoMipMapGenerationEnabled), meth_QOpenGLTexture_setAutoMipMapGenerationEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setAutoMipMapGenerationEnabled)},
    {SIP_MLNAME_CAST(sipName_setBorderColor), meth_QOpenGLTexture_setBorderColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setBorderColor)},
    {SIP_MLNAME_CAST(sipName_setComparisonFunction), meth_QOpenGLTexture_setComparisonFunction, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setComparisonFunction)},
    {SIP_MLNAME_CAST(sipName_setComparisonMode), meth_QOpenGLTexture_setComparisonMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setComparisonMode)},
    {SIP_MLNAME_CAST(sipName_setCompressedData), SIP_MLMETH_CAST(meth_QOpenGLTexture_setCompressedData), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setCompressedData)},
    {SIP_MLNAME_CAST(sipName_setData), SIP_MLMETH_CAST(meth_QOpenGLTexture_setData), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setData)},
    {SIP_MLNAME_CAST(sipName_setDepthStencilMode), meth_QOpenGLTexture_setDepthStencilMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setDepthStencilMode)},
    {SIP_MLNAME_CAST(sipName_setFixedSamplePositions), meth_QOpenGLTexture_setFixedSamplePositions, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setFixedSamplePositions)},
    {SIP_MLNAME_CAST(sipName_setFormat), meth_QOpenGLTexture_setFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setFormat)},
    {SIP_MLNAME_CAST(sipName_setLayers), meth_QOpenGLTexture_setLayers, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setLayers)},
    {SIP_MLNAME_CAST(sipName_setLevelOfDetailRange), meth_QOpenGLTexture_setLevelOfDetailRange, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setLevelOfDetailRange)},
    {SIP_MLNAME_CAST(sipName_setLevelofDetailBias), meth_QOpenGLTexture_setLevelofDetailBias, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setLevelofDetailBias)},
    {SIP_MLNAME_CAST(sipName_setMagnificationFilter), meth_QOpenGLTexture_setMagnificationFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setMagnificationFilter)},
    {SIP_MLNAME_CAST(sipName_setMaximumAnisotropy), meth_QOpenGLTexture_setMaximumAnisotropy, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setMaximumAnisotropy)},
    {SIP_MLNAME_CAST(sipName_setMaximumLevelOfDetail), meth_QOpenGLTexture_setMaximumLevelOfDetail, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setMaximumLevelOfDetail)},
    {SIP_MLNAME_CAST(sipName_setMinMagFilters), meth_QOpenGLTexture_setMinMagFilters, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setMinMagFilters)},
    {SIP_MLNAME_CAST(sipName_setMinificationFilter), meth_QOpenGLTexture_setMinificationFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setMinificationFilter)},
    {SIP_MLNAME_CAST(sipName_setMinimumLevelOfDetail), meth_QOpenGLTexture_setMinimumLevelOfDetail, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setMinimumLevelOfDetail)},
    {SIP_MLNAME_CAST(sipName_setMipBaseLevel), meth_QOpenGLTexture_setMipBaseLevel, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setMipBaseLevel)},
    {SIP_MLNAME_CAST(sipName_setMipLevelRange), meth_QOpenGLTexture_setMipLevelRange, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setMipLevelRange)},
    {SIP_MLNAME_CAST(sipName_setMipLevels), meth_QOpenGLTexture_setMipLevels, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setMipLevels)},
    {SIP_MLNAME_CAST(sipName_setMipMaxLevel), meth_QOpenGLTexture_setMipMaxLevel, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setMipMaxLevel)},
    {SIP_MLNAME_CAST(sipName_setSamples), meth_QOpenGLTexture_setSamples, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setSamples)},
    {SIP_MLNAME_CAST(sipName_setSize), SIP_MLMETH_CAST(meth_QOpenGLTexture_setSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setSize)},
    {SIP_MLNAME_CAST(sipName_setSwizzleMask), meth_QOpenGLTexture_setSwizzleMask, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setSwizzleMask)},
    {SIP_MLNAME_CAST(sipName_setWrapMode), meth_QOpenGLTexture_setWrapMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setWrapMode)},
    {SIP_MLNAME_CAST(sipName_swizzleMask), meth_QOpenGLTexture_swizzleMask, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_swizzleMask)},
    {SIP_MLNAME_CAST(sipName_target), meth_QOpenGLTexture_target, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_target)},
    {SIP_MLNAME_CAST(sipName_textureId), meth_QOpenGLTexture_textureId, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_textureId)},
    {SIP_MLNAME_CAST(sipName_width), meth_QOpenGLTexture_width, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_width)},
    {SIP_MLNAME_CAST(sipName_wrapMode), meth_QOpenGLTexture_wrapMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_wrapMode)}
};

static sipEnumMemberDef enummembers_QOpenGLTexture[] = {
    {sipName_Alpha, static_cast<int>( ::QOpenGLTexture::Alpha), 164},
    {sipName_AlphaFormat, static_cast<int>( ::QOpenGLTexture::AlphaFormat), 169},
    {sipName_AlphaValue, static_cast<int>( ::QOpenGLTexture::AlphaValue), 167},
    {sipName_AnisotropicFiltering, static_cast<int>( ::QOpenGLTexture::AnisotropicFiltering), 160},
    {sipName_BGR, static_cast<int>( ::QOpenGLTexture::BGR), 164},
    {sipName_BGRA, static_cast<int>( ::QOpenGLTexture::BGRA), 164},
    {sipName_BGRA_Integer, static_cast<int>( ::QOpenGLTexture::BGRA_Integer), 164},
    {sipName_BGR_Integer, static_cast<int>( ::QOpenGLTexture::BGR_Integer), 164},
    {sipName_BindingTarget1D, static_cast<int>( ::QOpenGLTexture::BindingTarget1D), 154},
    {sipName_BindingTarget1DArray, static_cast<int>( ::QOpenGLTexture::BindingTarget1DArray), 154},
    {sipName_BindingTarget2D, static_cast<int>( ::QOpenGLTexture::BindingTarget2D), 154},
    {sipName_BindingTarget2DArray, static_cast<int>( ::QOpenGLTexture::BindingTarget2DArray), 154},
    {sipName_BindingTarget2DMultisample, static_cast<int>( ::QOpenGLTexture::BindingTarget2DMultisample), 154},
    {sipName_BindingTarget2DMultisampleArray, static_cast<int>( ::QOpenGLTexture::BindingTarget2DMultisampleArray), 154},
    {sipName_BindingTarget3D, static_cast<int>( ::QOpenGLTexture::BindingTarget3D), 154},
    {sipName_BindingTargetBuffer, static_cast<int>( ::QOpenGLTexture::BindingTargetBuffer), 154},
    {sipName_BindingTargetCubeMap, static_cast<int>( ::QOpenGLTexture::BindingTargetCubeMap), 154},
    {sipName_BindingTargetCubeMapArray, static_cast<int>( ::QOpenGLTexture::BindingTargetCubeMapArray), 154},
    {sipName_BindingTargetRectangle, static_cast<int>( ::QOpenGLTexture::BindingTargetRectangle), 154},
    {sipName_BlueValue, static_cast<int>( ::QOpenGLTexture::BlueValue), 167},
    {sipName_ClampToBorder, static_cast<int>( ::QOpenGLTexture::ClampToBorder), 171},
    {sipName_ClampToEdge, static_cast<int>( ::QOpenGLTexture::ClampToEdge), 171},
    {sipName_CommpareNotEqual, static_cast<int>( ::QOpenGLTexture::CommpareNotEqual), 155},
    {sipName_CompareAlways, static_cast<int>( ::QOpenGLTexture::CompareAlways), 155},
    {sipName_CompareEqual, static_cast<int>( ::QOpenGLTexture::CompareEqual), 155},
    {sipName_CompareGreater, static_cast<int>( ::QOpenGLTexture::CompareGreater), 155},
    {sipName_CompareGreaterEqual, static_cast<int>( ::QOpenGLTexture::CompareGreaterEqual), 155},
    {sipName_CompareLess, static_cast<int>( ::QOpenGLTexture::CompareLess), 155},
    {sipName_CompareLessEqual, static_cast<int>( ::QOpenGLTexture::CompareLessEqual), 155},
    {sipName_CompareNever, static_cast<int>( ::QOpenGLTexture::CompareNever), 155},
    {sipName_CompareNone, static_cast<int>( ::QOpenGLTexture::CompareNone), 156},
    {sipName_CompareRefToTexture, static_cast<int>( ::QOpenGLTexture::CompareRefToTexture), 156},
    {sipName_CubeMapNegativeX, static_cast<int>( ::QOpenGLTexture::CubeMapNegativeX), 158},
    {sipName_CubeMapNegativeY, static_cast<int>( ::QOpenGLTexture::CubeMapNegativeY), 158},
    {sipName_CubeMapNegativeZ, static_cast<int>( ::QOpenGLTexture::CubeMapNegativeZ), 158},
    {sipName_CubeMapPositiveX, static_cast<int>( ::QOpenGLTexture::CubeMapPositiveX), 158},
    {sipName_CubeMapPositiveY, static_cast<int>( ::QOpenGLTexture::CubeMapPositiveY), 158},
    {sipName_CubeMapPositiveZ, static_cast<int>( ::QOpenGLTexture::CubeMapPositiveZ), 158},
    {sipName_D16, static_cast<int>( ::QOpenGLTexture::D16), 169},
    {sipName_D24, static_cast<int>( ::QOpenGLTexture::D24), 169},
    {sipName_D24S8, static_cast<int>( ::QOpenGLTexture::D24S8), 169},
    {sipName_D32, static_cast<int>( ::QOpenGLTexture::D32), 169},
    {sipName_D32F, static_cast<int>( ::QOpenGLTexture::D32F), 169},
    {sipName_D32FS8X24, static_cast<int>( ::QOpenGLTexture::D32FS8X24), 169},
    {sipName_Depth, static_cast<int>( ::QOpenGLTexture::Depth), 164},
    {sipName_DepthFormat, static_cast<int>( ::QOpenGLTexture::DepthFormat), 169},
    {sipName_DepthMode, static_cast<int>( ::QOpenGLTexture::DepthMode), 159},
    {sipName_DepthStencil, static_cast<int>( ::QOpenGLTexture::DepthStencil), 164},
    {sipName_DirectionR, static_cast<int>( ::QOpenGLTexture::DirectionR), 157},
    {sipName_DirectionS, static_cast<int>( ::QOpenGLTexture::DirectionS), 157},
    {sipName_DirectionT, static_cast<int>( ::QOpenGLTexture::DirectionT), 157},
    {sipName_DontGenerateMipMaps, static_cast<int>( ::QOpenGLTexture::DontGenerateMipMaps), 163},
    {sipName_DontResetTextureUnit, static_cast<int>( ::QOpenGLTexture::DontResetTextureUnit), 170},
    {sipName_Float16, static_cast<int>( ::QOpenGLTexture::Float16), 165},
    {sipName_Float16OES, static_cast<int>( ::QOpenGLTexture::Float16OES), 165},
    {sipName_Float32, static_cast<int>( ::QOpenGLTexture::Float32), 165},
    {sipName_Float32_D32_UInt32_S8_X24, static_cast<int>( ::QOpenGLTexture::Float32_D32_UInt32_S8_X24), 165},
    {sipName_GenerateMipMaps, static_cast<int>( ::QOpenGLTexture::GenerateMipMaps), 163},
    {sipName_GreenValue, static_cast<int>( ::QOpenGLTexture::GreenValue), 167},
    {sipName_ImmutableMultisampleStorage, static_cast<int>( ::QOpenGLTexture::ImmutableMultisampleStorage), 160},
    {sipName_ImmutableStorage, static_cast<int>( ::QOpenGLTexture::ImmutableStorage), 160},
    {sipName_Int16, static_cast<int>( ::QOpenGLTexture::Int16), 165},
    {sipName_Int32, static_cast<int>( ::QOpenGLTexture::Int32), 165},
    {sipName_Int8, static_cast<int>( ::QOpenGLTexture::Int8), 165},
    {sipName_Linear, static_cast<int>( ::QOpenGLTexture::Linear), 162},
    {sipName_LinearMipMapLinear, static_cast<int>( ::QOpenGLTexture::LinearMipMapLinear), 162},
    {sipName_LinearMipMapNearest, static_cast<int>( ::QOpenGLTexture::LinearMipMapNearest), 162},
    {sipName_Luminance, static_cast<int>( ::QOpenGLTexture::Luminance), 164},
    {sipName_LuminanceAlpha, static_cast<int>( ::QOpenGLTexture::LuminanceAlpha), 164},
    {sipName_LuminanceAlphaFormat, static_cast<int>( ::QOpenGLTexture::LuminanceAlphaFormat), 169},
    {sipName_LuminanceFormat, static_cast<int>( ::QOpenGLTexture::LuminanceFormat), 169},
    {sipName_MirroredRepeat, static_cast<int>( ::QOpenGLTexture::MirroredRepeat), 171},
    {sipName_NPOTTextureRepeat, static_cast<int>( ::QOpenGLTexture::NPOTTextureRepeat), 160},
    {sipName_NPOTTextures, static_cast<int>( ::QOpenGLTexture::NPOTTextures), 160},
    {sipName_Nearest, static_cast<int>( ::QOpenGLTexture::Nearest), 162},
    {sipName_NearestMipMapLinear, static_cast<int>( ::QOpenGLTexture::NearestMipMapLinear), 162},
    {sipName_NearestMipMapNearest, static_cast<int>( ::QOpenGLTexture::NearestMipMapNearest), 162},
    {sipName_NoFormat, static_cast<int>( ::QOpenGLTexture::NoFormat), 169},
    {sipName_NoPixelType, static_cast<int>( ::QOpenGLTexture::NoPixelType), 165},
    {sipName_NoSourceFormat, static_cast<int>( ::QOpenGLTexture::NoSourceFormat), 164},
    {sipName_OneValue, static_cast<int>( ::QOpenGLTexture::OneValue), 167},
    {sipName_R11_EAC_SNorm, static_cast<int>( ::QOpenGLTexture::R11_EAC_SNorm), 169},
    {sipName_R11_EAC_UNorm, static_cast<int>( ::QOpenGLTexture::R11_EAC_UNorm), 169},
    {sipName_R16F, static_cast<int>( ::QOpenGLTexture::R16F), 169},
    {sipName_R16I, static_cast<int>( ::QOpenGLTexture::R16I), 169},
    {sipName_R16U, static_cast<int>( ::QOpenGLTexture::R16U), 169},
    {sipName_R16_SNorm, static_cast<int>( ::QOpenGLTexture::R16_SNorm), 169},
    {sipName_R16_UNorm, static_cast<int>( ::QOpenGLTexture::R16_UNorm), 169},
    {sipName_R32F, static_cast<int>( ::QOpenGLTexture::R32F), 169},
    {sipName_R32I, static_cast<int>( ::QOpenGLTexture::R32I), 169},
    {sipName_R32U, static_cast<int>( ::QOpenGLTexture::R32U), 169},
    {sipName_R5G6B5, static_cast<int>( ::QOpenGLTexture::R5G6B5), 169},
    {sipName_R8I, static_cast<int>( ::QOpenGLTexture::R8I), 169},
    {sipName_R8U, static_cast<int>( ::QOpenGLTexture::R8U), 169},
    {sipName_R8_SNorm, static_cast<int>( ::QOpenGLTexture::R8_SNorm), 169},
    {sipName_R8_UNorm, static_cast<int>( ::QOpenGLTexture::R8_UNorm), 169},
    {sipName_RG, static_cast<int>( ::QOpenGLTexture::RG), 164},
    {sipName_RG11B10F, static_cast<int>( ::QOpenGLTexture::RG11B10F), 169},
    {sipName_RG11_EAC_SNorm, static_cast<int>( ::QOpenGLTexture::RG11_EAC_SNorm), 169},
    {sipName_RG11_EAC_UNorm, static_cast<int>( ::QOpenGLTexture::RG11_EAC_UNorm), 169},
    {sipName_RG16F, static_cast<int>( ::QOpenGLTexture::RG16F), 169},
    {sipName_RG16I, static_cast<int>( ::QOpenGLTexture::RG16I), 169},
    {sipName_RG16U, static_cast<int>( ::QOpenGLTexture::RG16U), 169},
    {sipName_RG16_SNorm, static_cast<int>( ::QOpenGLTexture::RG16_SNorm), 169},
    {sipName_RG16_UNorm, static_cast<int>( ::QOpenGLTexture::RG16_UNorm), 169},
    {sipName_RG32F, static_cast<int>( ::QOpenGLTexture::RG32F), 169},
    {sipName_RG32I, static_cast<int>( ::QOpenGLTexture::RG32I), 169},
    {sipName_RG32U, static_cast<int>( ::QOpenGLTexture::RG32U), 169},
    {sipName_RG3B2, static_cast<int>( ::QOpenGLTexture::RG3B2), 169},
    {sipName_RG8I, static_cast<int>( ::QOpenGLTexture::RG8I), 169},
    {sipName_RG8U, static_cast<int>( ::QOpenGLTexture::RG8U), 169},
    {sipName_RG8_SNorm, static_cast<int>( ::QOpenGLTexture::RG8_SNorm), 169},
    {sipName_RG8_UNorm, static_cast<int>( ::QOpenGLTexture::RG8_UNorm), 169},
    {sipName_RGB, static_cast<int>( ::QOpenGLTexture::RGB), 164},
    {sipName_RGB10A2, static_cast<int>( ::QOpenGLTexture::RGB10A2), 169},
    {sipName_RGB16F, static_cast<int>( ::QOpenGLTexture::RGB16F), 169},
    {sipName_RGB16I, static_cast<int>( ::QOpenGLTexture::RGB16I), 169},
    {sipName_RGB16U, static_cast<int>( ::QOpenGLTexture::RGB16U), 169},
    {sipName_RGB16_SNorm, static_cast<int>( ::QOpenGLTexture::RGB16_SNorm), 169},
    {sipName_RGB16_UNorm, static_cast<int>( ::QOpenGLTexture::RGB16_UNorm), 169},
    {sipName_RGB32F, static_cast<int>( ::QOpenGLTexture::RGB32F), 169},
    {sipName_RGB32I, static_cast<int>( ::QOpenGLTexture::RGB32I), 169},
    {sipName_RGB32U, static_cast<int>( ::QOpenGLTexture::RGB32U), 169},
    {sipName_RGB5A1, static_cast<int>( ::QOpenGLTexture::RGB5A1), 169},
    {sipName_RGB8I, static_cast<int>( ::QOpenGLTexture::RGB8I), 169},
    {sipName_RGB8U, static_cast<int>( ::QOpenGLTexture::RGB8U), 169},
    {sipName_RGB8_ETC1, static_cast<int>( ::QOpenGLTexture::RGB8_ETC1), 169},
    {sipName_RGB8_ETC2, static_cast<int>( ::QOpenGLTexture::RGB8_ETC2), 169},
    {sipName_RGB8_PunchThrough_Alpha1_ETC2, static_cast<int>( ::QOpenGLTexture::RGB8_PunchThrough_Alpha1_ETC2), 169},
    {sipName_RGB8_SNorm, static_cast<int>( ::QOpenGLTexture::RGB8_SNorm), 169},
    {sipName_RGB8_UNorm, static_cast<int>( ::QOpenGLTexture::RGB8_UNorm), 169},
    {sipName_RGB9E5, static_cast<int>( ::QOpenGLTexture::RGB9E5), 169},
    {sipName_RGBA, static_cast<int>( ::QOpenGLTexture::RGBA), 164},
    {sipName_RGBA16F, static_cast<int>( ::QOpenGLTexture::RGBA16F), 169},
    {sipName_RGBA16I, static_cast<int>( ::QOpenGLTexture::RGBA16I), 169},
    {sipName_RGBA16U, static_cast<int>( ::QOpenGLTexture::RGBA16U), 169},
    {sipName_RGBA16_SNorm, static_cast<int>( ::QOpenGLTexture::RGBA16_SNorm), 169},
    {sipName_RGBA16_UNorm, static_cast<int>( ::QOpenGLTexture::RGBA16_UNorm), 169},
    {sipName_RGBA32F, static_cast<int>( ::QOpenGLTexture::RGBA32F), 169},
    {sipName_RGBA32I, static_cast<int>( ::QOpenGLTexture::RGBA32I), 169},
    {sipName_RGBA32U, static_cast<int>( ::QOpenGLTexture::RGBA32U), 169},
    {sipName_RGBA4, static_cast<int>( ::QOpenGLTexture::RGBA4), 169},
    {sipName_RGBA8I, static_cast<int>( ::QOpenGLTexture::RGBA8I), 169},
    {sipName_RGBA8U, static_cast<int>( ::QOpenGLTexture::RGBA8U), 169},
    {sipName_RGBA8_ETC2_EAC, static_cast<int>( ::QOpenGLTexture::RGBA8_ETC2_EAC), 169},
    {sipName_RGBA8_SNorm, static_cast<int>( ::QOpenGLTexture::RGBA8_SNorm), 169},
    {sipName_RGBA8_UNorm, static_cast<int>( ::QOpenGLTexture::RGBA8_UNorm), 169},
    {sipName_RGBAFormat, static_cast<int>( ::QOpenGLTexture::RGBAFormat), 169},
    {sipName_RGBA_ASTC_10x10, static_cast<int>( ::QOpenGLTexture::RGBA_ASTC_10x10), 169},
    {sipName_RGBA_ASTC_10x5, static_cast<int>( ::QOpenGLTexture::RGBA_ASTC_10x5), 169},
    {sipName_RGBA_ASTC_10x6, static_cast<int>( ::QOpenGLTexture::RGBA_ASTC_10x6), 169},
    {sipName_RGBA_ASTC_10x8, static_cast<int>( ::QOpenGLTexture::RGBA_ASTC_10x8), 169},
    {sipName_RGBA_ASTC_12x10, static_cast<int>( ::QOpenGLTexture::RGBA_ASTC_12x10), 169},
    {sipName_RGBA_ASTC_12x12, static_cast<int>( ::QOpenGLTexture::RGBA_ASTC_12x12), 169},
    {sipName_RGBA_ASTC_4x4, static_cast<int>( ::QOpenGLTexture::RGBA_ASTC_4x4), 169},
    {sipName_RGBA_ASTC_5x4, static_cast<int>( ::QOpenGLTexture::RGBA_ASTC_5x4), 169},
    {sipName_RGBA_ASTC_5x5, static_cast<int>( ::QOpenGLTexture::RGBA_ASTC_5x5), 169},
    {sipName_RGBA_ASTC_6x5, static_cast<int>( ::QOpenGLTexture::RGBA_ASTC_6x5), 169},
    {sipName_RGBA_ASTC_6x6, static_cast<int>( ::QOpenGLTexture::RGBA_ASTC_6x6), 169},
    {sipName_RGBA_ASTC_8x5, static_cast<int>( ::QOpenGLTexture::RGBA_ASTC_8x5), 169},
    {sipName_RGBA_ASTC_8x6, static_cast<int>( ::QOpenGLTexture::RGBA_ASTC_8x6), 169},
    {sipName_RGBA_ASTC_8x8, static_cast<int>( ::QOpenGLTexture::RGBA_ASTC_8x8), 169},
    {sipName_RGBA_DXT1, static_cast<int>( ::QOpenGLTexture::RGBA_DXT1), 169},
    {sipName_RGBA_DXT3, static_cast<int>( ::QOpenGLTexture::RGBA_DXT3), 169},
    {sipName_RGBA_DXT5, static_cast<int>( ::QOpenGLTexture::RGBA_DXT5), 169},
    {sipName_RGBA_Integer, static_cast<int>( ::QOpenGLTexture::RGBA_Integer), 164},
    {sipName_RGBFormat, static_cast<int>( ::QOpenGLTexture::RGBFormat), 169},
    {sipName_RGB_BP_SIGNED_FLOAT, static_cast<int>( ::QOpenGLTexture::RGB_BP_SIGNED_FLOAT), 169},
    {sipName_RGB_BP_UNSIGNED_FLOAT, static_cast<int>( ::QOpenGLTexture::RGB_BP_UNSIGNED_FLOAT), 169},
    {sipName_RGB_BP_UNorm, static_cast<int>( ::QOpenGLTexture::RGB_BP_UNorm), 169},
    {sipName_RGB_DXT1, static_cast<int>( ::QOpenGLTexture::RGB_DXT1), 169},
    {sipName_RGB_Integer, static_cast<int>( ::QOpenGLTexture::RGB_Integer), 164},
    {sipName_RG_ATI2N_SNorm, static_cast<int>( ::QOpenGLTexture::RG_ATI2N_SNorm), 169},
    {sipName_RG_ATI2N_UNorm, static_cast<int>( ::QOpenGLTexture::RG_ATI2N_UNorm), 169},
    {sipName_RG_Integer, static_cast<int>( ::QOpenGLTexture::RG_Integer), 164},
    {sipName_R_ATI1N_SNorm, static_cast<int>( ::QOpenGLTexture::R_ATI1N_SNorm), 169},
    {sipName_R_ATI1N_UNorm, static_cast<int>( ::QOpenGLTexture::R_ATI1N_UNorm), 169},
    {sipName_Red, static_cast<int>( ::QOpenGLTexture::Red), 164},
    {sipName_RedValue, static_cast<int>( ::QOpenGLTexture::RedValue), 167},
    {sipName_Red_Integer, static_cast<int>( ::QOpenGLTexture::Red_Integer), 164},
    {sipName_Repeat, static_cast<int>( ::QOpenGLTexture::Repeat), 171},
    {sipName_ResetTextureUnit, static_cast<int>( ::QOpenGLTexture::ResetTextureUnit), 170},
    {sipName_S8, static_cast<int>( ::QOpenGLTexture::S8), 169},
    {sipName_SRGB8, static_cast<int>( ::QOpenGLTexture::SRGB8), 169},
    {sipName_SRGB8_Alpha8, static_cast<int>( ::QOpenGLTexture::SRGB8_Alpha8), 169},
    {sipName_SRGB8_Alpha8_ASTC_10x10, static_cast<int>( ::QOpenGLTexture::SRGB8_Alpha8_ASTC_10x10), 169},
    {sipName_SRGB8_Alpha8_ASTC_10x5, static_cast<int>( ::QOpenGLTexture::SRGB8_Alpha8_ASTC_10x5), 169},
    {sipName_SRGB8_Alpha8_ASTC_10x6, static_cast<int>( ::QOpenGLTexture::SRGB8_Alpha8_ASTC_10x6), 169},
    {sipName_SRGB8_Alpha8_ASTC_10x8, static_cast<int>( ::QOpenGLTexture::SRGB8_Alpha8_ASTC_10x8), 169},
    {sipName_SRGB8_Alpha8_ASTC_12x10, static_cast<int>( ::QOpenGLTexture::SRGB8_Alpha8_ASTC_12x10), 169},
    {sipName_SRGB8_Alpha8_ASTC_12x12, static_cast<int>( ::QOpenGLTexture::SRGB8_Alpha8_ASTC_12x12), 169},
    {sipName_SRGB8_Alpha8_ASTC_4x4, static_cast<int>( ::QOpenGLTexture::SRGB8_Alpha8_ASTC_4x4), 169},
    {sipName_SRGB8_Alpha8_ASTC_5x4, static_cast<int>( ::QOpenGLTexture::SRGB8_Alpha8_ASTC_5x4), 169},
    {sipName_SRGB8_Alpha8_ASTC_5x5, static_cast<int>( ::QOpenGLTexture::SRGB8_Alpha8_ASTC_5x5), 169},
    {sipName_SRGB8_Alpha8_ASTC_6x5, static_cast<int>( ::QOpenGLTexture::SRGB8_Alpha8_ASTC_6x5), 169},
    {sipName_SRGB8_Alpha8_ASTC_6x6, static_cast<int>( ::QOpenGLTexture::SRGB8_Alpha8_ASTC_6x6), 169},
    {sipName_SRGB8_Alpha8_ASTC_8x5, static_cast<int>( ::QOpenGLTexture::SRGB8_Alpha8_ASTC_8x5), 169},
    {sipName_SRGB8_Alpha8_ASTC_8x6, static_cast<int>( ::QOpenGLTexture::SRGB8_Alpha8_ASTC_8x6), 169},
    {sipName_SRGB8_Alpha8_ASTC_8x8, static_cast<int>( ::QOpenGLTexture::SRGB8_Alpha8_ASTC_8x8), 169},
    {sipName_SRGB8_Alpha8_ETC2_EAC, static_cast<int>( ::QOpenGLTexture::SRGB8_Alpha8_ETC2_EAC), 169},
    {sipName_SRGB8_ETC2, static_cast<int>( ::QOpenGLTexture::SRGB8_ETC2), 169},
    {sipName_SRGB8_PunchThrough_Alpha1_ETC2, static_cast<int>( ::QOpenGLTexture::SRGB8_PunchThrough_Alpha1_ETC2), 169},
    {sipName_SRGB_Alpha_DXT1, static_cast<int>( ::QOpenGLTexture::SRGB_Alpha_DXT1), 169},
    {sipName_SRGB_Alpha_DXT3, static_cast<int>( ::QOpenGLTexture::SRGB_Alpha_DXT3), 169},
    {sipName_SRGB_Alpha_DXT5, static_cast<int>( ::QOpenGLTexture::SRGB_Alpha_DXT5), 169},
    {sipName_SRGB_BP_UNorm, static_cast<int>( ::QOpenGLTexture::SRGB_BP_UNorm), 169},
    {sipName_SRGB_DXT1, static_cast<int>( ::QOpenGLTexture::SRGB_DXT1), 169},
    {sipName_Stencil, static_cast<int>( ::QOpenGLTexture::Stencil), 164},
    {sipName_StencilMode, static_cast<int>( ::QOpenGLTexture::StencilMode), 159},
    {sipName_StencilTexturing, static_cast<int>( ::QOpenGLTexture::StencilTexturing), 160},
    {sipName_Swizzle, static_cast<int>( ::QOpenGLTexture::Swizzle), 160},
    {sipName_SwizzleAlpha, static_cast<int>( ::QOpenGLTexture::SwizzleAlpha), 166},
    {sipName_SwizzleBlue, static_cast<int>( ::QOpenGLTexture::SwizzleBlue), 166},
    {sipName_SwizzleGreen, static_cast<int>( ::QOpenGLTexture::SwizzleGreen), 166},
    {sipName_SwizzleRed, static_cast<int>( ::QOpenGLTexture::SwizzleRed), 166},
    {sipName_Target1D, static_cast<int>( ::QOpenGLTexture::Target1D), 168},
    {sipName_Target1DArray, static_cast<int>( ::QOpenGLTexture::Target1DArray), 168},
    {sipName_Target2D, static_cast<int>( ::QOpenGLTexture::Target2D), 168},
    {sipName_Target2DArray, static_cast<int>( ::QOpenGLTexture::Target2DArray), 168},
    {sipName_Target2DMultisample, static_cast<int>( ::QOpenGLTexture::Target2DMultisample), 168},
    {sipName_Target2DMultisampleArray, static_cast<int>( ::QOpenGLTexture::Target2DMultisampleArray), 168},
    {sipName_Target3D, static_cast<int>( ::QOpenGLTexture::Target3D), 168},
    {sipName_TargetBuffer, static_cast<int>( ::QOpenGLTexture::TargetBuffer), 168},
    {sipName_TargetCubeMap, static_cast<int>( ::QOpenGLTexture::TargetCubeMap), 168},
    {sipName_TargetCubeMapArray, static_cast<int>( ::QOpenGLTexture::TargetCubeMapArray), 168},
    {sipName_TargetRectangle, static_cast<int>( ::QOpenGLTexture::TargetRectangle), 168},
    {sipName_Texture1D, static_cast<int>( ::QOpenGLTexture::Texture1D), 160},
    {sipName_Texture3D, static_cast<int>( ::QOpenGLTexture::Texture3D), 160},
    {sipName_TextureArrays, static_cast<int>( ::QOpenGLTexture::TextureArrays), 160},
    {sipName_TextureBuffer, static_cast<int>( ::QOpenGLTexture::TextureBuffer), 160},
    {sipName_TextureComparisonOperators, static_cast<int>( ::QOpenGLTexture::TextureComparisonOperators), 160},
    {sipName_TextureCubeMapArrays, static_cast<int>( ::QOpenGLTexture::TextureCubeMapArrays), 160},
    {sipName_TextureMipMapLevel, static_cast<int>( ::QOpenGLTexture::TextureMipMapLevel), 160},
    {sipName_TextureMultisample, static_cast<int>( ::QOpenGLTexture::TextureMultisample), 160},
    {sipName_TextureRectangle, static_cast<int>( ::QOpenGLTexture::TextureRectangle), 160},
    {sipName_UInt16, static_cast<int>( ::QOpenGLTexture::UInt16), 165},
    {sipName_UInt16_R5G6B5, static_cast<int>( ::QOpenGLTexture::UInt16_R5G6B5), 165},
    {sipName_UInt16_R5G6B5_Rev, static_cast<int>( ::QOpenGLTexture::UInt16_R5G6B5_Rev), 165},
    {sipName_UInt16_RGB5A1, static_cast<int>( ::QOpenGLTexture::UInt16_RGB5A1), 165},
    {sipName_UInt16_RGB5A1_Rev, static_cast<int>( ::QOpenGLTexture::UInt16_RGB5A1_Rev), 165},
    {sipName_UInt16_RGBA4, static_cast<int>( ::QOpenGLTexture::UInt16_RGBA4), 165},
    {sipName_UInt16_RGBA4_Rev, static_cast<int>( ::QOpenGLTexture::UInt16_RGBA4_Rev), 165},
    {sipName_UInt32, static_cast<int>( ::QOpenGLTexture::UInt32), 165},
    {sipName_UInt32_D24S8, static_cast<int>( ::QOpenGLTexture::UInt32_D24S8), 165},
    {sipName_UInt32_RG11B10F, static_cast<int>( ::QOpenGLTexture::UInt32_RG11B10F), 165},
    {sipName_UInt32_RGB10A2, static_cast<int>( ::QOpenGLTexture::UInt32_RGB10A2), 165},
    {sipName_UInt32_RGB10A2_Rev, static_cast<int>( ::QOpenGLTexture::UInt32_RGB10A2_Rev), 165},
    {sipName_UInt32_RGB9_E5, static_cast<int>( ::QOpenGLTexture::UInt32_RGB9_E5), 165},
    {sipName_UInt32_RGBA8, static_cast<int>( ::QOpenGLTexture::UInt32_RGBA8), 165},
    {sipName_UInt32_RGBA8_Rev, static_cast<int>( ::QOpenGLTexture::UInt32_RGBA8_Rev), 165},
    {sipName_UInt8, static_cast<int>( ::QOpenGLTexture::UInt8), 165},
    {sipName_UInt8_RG3B2, static_cast<int>( ::QOpenGLTexture::UInt8_RG3B2), 165},
    {sipName_UInt8_RG3B2_Rev, static_cast<int>( ::QOpenGLTexture::UInt8_RG3B2_Rev), 165},
    {sipName_ZeroValue, static_cast<int>( ::QOpenGLTexture::ZeroValue), 167},
};

PyDoc_STRVAR(doc_QOpenGLTexture, "\1QOpenGLTexture(QOpenGLTexture.Target)\n"
"QOpenGLTexture(QImage, genMipMaps: QOpenGLTexture.MipMapGeneration = QOpenGLTexture.GenerateMipMaps)");


static pyqt5ClassPluginDef plugin_QOpenGLTexture = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QOpenGLTexture = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QOpenGLTexture,
        {SIP_NULLPTR},
        &plugin_QOpenGLTexture
    },
    {
        sipNameNr_QOpenGLTexture,
        {0, 0, 1},
        69, methods_QOpenGLTexture,
        254, enummembers_QOpenGLTexture,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QOpenGLTexture,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QOpenGLTexture,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QOpenGLTexture,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QOpenGLTexture,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 73 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglshaderprogram.sip"
#include <qopenglshaderprogram.h>
#line 15225 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 15229 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglshaderprogram.sip"
#include <qopenglshaderprogram.h>
#line 15232 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 15235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 15238 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 134 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpygui_qvector.sip"
#include <qvector.h>
#line 15241 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 46 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglcontext.sip"
#include <qopenglcontext.h>
#line 15244 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qvector2d.sip"
#include <qvector2d.h>
#line 15247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qvector3d.sip"
#include <qvector3d.h>
#line 15250 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qvector4d.sip"
#include <qvector4d.h>
#line 15253 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 15256 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 15259 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 15262 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 15265 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 97 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 15268 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 1073 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 15271 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 927 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 15274 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 781 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 15277 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 632 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 15280 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 483 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 15283 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 331 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 15286 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 179 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 15289 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 15292 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qmatrix4x4.sip"
#include <qmatrix4x4.h>
#line 15295 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 15298 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 15301 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglshaderprogram.sip"
#include <qopenglshaderprogram.h>
#line 15304 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 15307 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 15310 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 15313 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 15316 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 15319 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 15322 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 15325 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 15328 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 15331 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 15334 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 15337 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 15340 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 15343 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQOpenGLShaderProgram : public  ::QOpenGLShaderProgram
{
public:
    sipQOpenGLShaderProgram( ::QObject*);
    virtual ~sipQOpenGLShaderProgram();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool link() SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQOpenGLShaderProgram(const sipQOpenGLShaderProgram &);
    sipQOpenGLShaderProgram &operator = (const sipQOpenGLShaderProgram &);

    char sipPyMethods[8];
};

sipQOpenGLShaderProgram::sipQOpenGLShaderProgram( ::QObject*a0):  ::QOpenGLShaderProgram(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQOpenGLShaderProgram::~sipQOpenGLShaderProgram()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQOpenGLShaderProgram::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QOpenGLShaderProgram);

    return  ::QOpenGLShaderProgram::metaObject();
}

int sipQOpenGLShaderProgram::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QOpenGLShaderProgram::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QOpenGLShaderProgram,_c,_id,_a);

    return _id;
}

void *sipQOpenGLShaderProgram::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QOpenGLShaderProgram, _clname, &sipCpp) ? sipCpp :  ::QOpenGLShaderProgram::qt_metacast(_clname));
}

bool sipQOpenGLShaderProgram::link()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_link);

    if (!sipMeth)
        return  ::QOpenGLShaderProgram::link();

    extern bool sipVH_QtGui_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_28(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQOpenGLShaderProgram::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QOpenGLShaderProgram::event(a0);

    extern bool sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_5(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQOpenGLShaderProgram::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QOpenGLShaderProgram::eventFilter(a0,a1);

    extern bool sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_4(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQOpenGLShaderProgram::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QOpenGLShaderProgram::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_3(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLShaderProgram::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QOpenGLShaderProgram::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_2(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLShaderProgram::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QOpenGLShaderProgram::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_1(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLShaderProgram::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QOpenGLShaderProgram::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLShaderProgram::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QOpenGLShaderProgram::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_addShader, "addShader(self, QOpenGLShader) -> bool");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_addShader(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_addShader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLShader* a0;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QOpenGLShader, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->addShader(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_addShader, doc_QOpenGLShaderProgram_addShader);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_removeShader, "removeShader(self, QOpenGLShader)");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_removeShader(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_removeShader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLShader* a0;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QOpenGLShader, &a0))
        {
            sipCpp->removeShader(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_removeShader, doc_QOpenGLShaderProgram_removeShader);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_shaders, "shaders(self) -> List[QOpenGLShader]");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_shaders(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_shaders(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp))
        {
            QList< ::QOpenGLShader*>*sipRes;

            sipRes = new QList< ::QOpenGLShader*>(sipCpp->shaders());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QOpenGLShader,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_shaders, doc_QOpenGLShaderProgram_shaders);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_addShaderFromSourceCode, "addShaderFromSourceCode(self, Union[QOpenGLShader.ShaderType, QOpenGLShader.ShaderTypeBit], Union[QByteArray, bytes, bytearray]) -> bool\n"
"addShaderFromSourceCode(self, Union[QOpenGLShader.ShaderType, QOpenGLShader.ShaderTypeBit], str) -> bool");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_addShaderFromSourceCode(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_addShaderFromSourceCode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLShader::ShaderType* a0;
        int a0State = 0;
        const  ::QByteArray* a1;
        int a1State = 0;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QOpenGLShader_ShaderType, &a0, &a0State, sipType_QByteArray, &a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->addShaderFromSourceCode(*a0,*a1);
            sipReleaseType(a0,sipType_QOpenGLShader_ShaderType,a0State);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::QOpenGLShader::ShaderType* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QOpenGLShader_ShaderType, &a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->addShaderFromSourceCode(*a0,*a1);
            sipReleaseType(a0,sipType_QOpenGLShader_ShaderType,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_addShaderFromSourceCode, doc_QOpenGLShaderProgram_addShaderFromSourceCode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_addShaderFromSourceFile, "addShaderFromSourceFile(self, Union[QOpenGLShader.ShaderType, QOpenGLShader.ShaderTypeBit], str) -> bool");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_addShaderFromSourceFile(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_addShaderFromSourceFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLShader::ShaderType* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QOpenGLShader_ShaderType, &a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->addShaderFromSourceFile(*a0,*a1);
            sipReleaseType(a0,sipType_QOpenGLShader_ShaderType,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_addShaderFromSourceFile, doc_QOpenGLShaderProgram_addShaderFromSourceFile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_removeAllShaders, "removeAllShaders(self)");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_removeAllShaders(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_removeAllShaders(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp))
        {
            sipCpp->removeAllShaders();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_removeAllShaders, doc_QOpenGLShaderProgram_removeAllShaders);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_link, "link(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_link(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_link(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QOpenGLShaderProgram::link() : sipCpp->link());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_link, doc_QOpenGLShaderProgram_link);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_isLinked, "isLinked(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_isLinked(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_isLinked(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isLinked();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_isLinked, doc_QOpenGLShaderProgram_isLinked);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_log, "log(self) -> str");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_log(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_log(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->log());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_log, doc_QOpenGLShaderProgram_log);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_bind, "bind(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_bind(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_bind(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->bind();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_bind, doc_QOpenGLShaderProgram_bind);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_release, "release(self)");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_release(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_release(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp))
        {
            sipCpp->release();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_release, doc_QOpenGLShaderProgram_release);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_programId, "programId(self) -> int");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_programId(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_programId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp))
        {
             ::GLuint sipRes;

            sipRes = sipCpp->programId();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_programId, doc_QOpenGLShaderProgram_programId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_bindAttributeLocation, "bindAttributeLocation(self, Union[QByteArray, bytes, bytearray], int)\n"
"bindAttributeLocation(self, str, int)");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_bindAttributeLocation(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_bindAttributeLocation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        int a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1i", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1))
        {
            sipCpp->bindAttributeLocation(*a0,a1);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1i", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            sipCpp->bindAttributeLocation(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_bindAttributeLocation, doc_QOpenGLShaderProgram_bindAttributeLocation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_attributeLocation, "attributeLocation(self, Union[QByteArray, bytes, bytearray]) -> int\n"
"attributeLocation(self, str) -> int");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_attributeLocation(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_attributeLocation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            int sipRes;

            sipRes = sipCpp->attributeLocation(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QString,&a0, &a0State))
        {
            int sipRes;

            sipRes = sipCpp->attributeLocation(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_attributeLocation, doc_QOpenGLShaderProgram_attributeLocation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_setAttributeValue, "setAttributeValue(self, int, float)\n"
"setAttributeValue(self, int, float, float)\n"
"setAttributeValue(self, int, float, float, float)\n"
"setAttributeValue(self, int, float, float, float, float)\n"
"setAttributeValue(self, int, QVector2D)\n"
"setAttributeValue(self, int, QVector3D)\n"
"setAttributeValue(self, int, QVector4D)\n"
"setAttributeValue(self, int, Union[QColor, Qt.GlobalColor, QGradient])\n"
"setAttributeValue(self, str, float)\n"
"setAttributeValue(self, str, float, float)\n"
"setAttributeValue(self, str, float, float, float)\n"
"setAttributeValue(self, str, float, float, float, float)\n"
"setAttributeValue(self, str, QVector2D)\n"
"setAttributeValue(self, str, QVector3D)\n"
"setAttributeValue(self, str, QVector4D)\n"
"setAttributeValue(self, str, Union[QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_setAttributeValue(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_setAttributeValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::GLfloat a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bif", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, &a1))
        {
            sipCpp->setAttributeValue(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::GLfloat a1;
         ::GLfloat a2;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biff", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->setAttributeValue(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::GLfloat a1;
         ::GLfloat a2;
         ::GLfloat a3;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bifff", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setAttributeValue(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::GLfloat a1;
         ::GLfloat a2;
         ::GLfloat a3;
         ::GLfloat a4;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biffff", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->setAttributeValue(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QVector2D* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QVector2D, &a1))
        {
            sipCpp->setAttributeValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QVector3D* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QVector3D, &a1))
        {
            sipCpp->setAttributeValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QVector4D* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QVector4D, &a1))
        {
            sipCpp->setAttributeValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QColor* a1;
        int a1State = 0;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QColor, &a1, &a1State))
        {
            sipCpp->setAttributeValue(a0,*a1);
            sipReleaseType(const_cast< ::QColor *>(a1),sipType_QColor,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
         ::GLfloat a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAf", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, &a1))
        {
            sipCpp->setAttributeValue(a0,a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
         ::GLfloat a1;
         ::GLfloat a2;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAff", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, &a1, &a2))
        {
            sipCpp->setAttributeValue(a0,a1,a2);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
         ::GLfloat a1;
         ::GLfloat a2;
         ::GLfloat a3;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAfff", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, &a1, &a2, &a3))
        {
            sipCpp->setAttributeValue(a0,a1,a2,a3);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
         ::GLfloat a1;
         ::GLfloat a2;
         ::GLfloat a3;
         ::GLfloat a4;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAffff", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->setAttributeValue(a0,a1,a2,a3,a4);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QVector2D* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QVector2D, &a1))
        {
            sipCpp->setAttributeValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QVector3D* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QVector3D, &a1))
        {
            sipCpp->setAttributeValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QVector4D* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QVector4D, &a1))
        {
            sipCpp->setAttributeValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QColor* a1;
        int a1State = 0;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QColor, &a1, &a1State))
        {
            sipCpp->setAttributeValue(a0,*a1);
            Py_DECREF(a0Keep);
            sipReleaseType(const_cast< ::QColor *>(a1),sipType_QColor,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_setAttributeValue, doc_QOpenGLShaderProgram_setAttributeValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_setAttributeArray, "setAttributeArray(self, int, PYQT_SHADER_ATTRIBUTE_ARRAY)\n"
"setAttributeArray(self, str, PYQT_SHADER_ATTRIBUTE_ARRAY)");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_setAttributeArray(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_setAttributeArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        PyObject * a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiP0", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 114 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglshaderprogram.sip"
        const GLfloat *values;
        int tsize;
        
        values = qpyopengl_attribute_array(a1, sipSelf, SIPLong_FromLong(a0), &tsize,
                &sipError);
        
        if (values)
            sipCpp->setAttributeArray(a0, values, tsize);
#line 16347 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        PyObject * a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAP0", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 126 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglshaderprogram.sip"
        const GLfloat *values;
        int tsize;
        
        values = qpyopengl_attribute_array(a1, sipSelf, SIPBytes_FromString(a0),
                &tsize, &sipError);
        
        if (values)
            sipCpp->setAttributeArray(a0, values, tsize);
#line 16381 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
            Py_DECREF(a0Keep);

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_setAttributeArray, doc_QOpenGLShaderProgram_setAttributeArray);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_setAttributeBuffer, "setAttributeBuffer(self, int, int, int, int, stride: int = 0)\n"
"setAttributeBuffer(self, str, int, int, int, stride: int = 0)");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_setAttributeBuffer(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_setAttributeBuffer(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::GLenum a1;
        int a2;
        int a3;
        int a4 = 0;
         ::QOpenGLShaderProgram *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_stride,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biuii|i", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->setAttributeBuffer(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
         ::GLenum a1;
        int a2;
        int a3;
        int a4 = 0;
         ::QOpenGLShaderProgram *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_stride,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BAAuii|i", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->setAttributeBuffer(a0,a1,a2,a3,a4);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_setAttributeBuffer, doc_QOpenGLShaderProgram_setAttributeBuffer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_enableAttributeArray, "enableAttributeArray(self, int)\n"
"enableAttributeArray(self, str)");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_enableAttributeArray(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_enableAttributeArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0))
        {
            sipCpp->enableAttributeArray(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAA", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0))
        {
            sipCpp->enableAttributeArray(a0);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_enableAttributeArray, doc_QOpenGLShaderProgram_enableAttributeArray);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_disableAttributeArray, "disableAttributeArray(self, int)\n"
"disableAttributeArray(self, str)");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_disableAttributeArray(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_disableAttributeArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0))
        {
            sipCpp->disableAttributeArray(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAA", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0))
        {
            sipCpp->disableAttributeArray(a0);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_disableAttributeArray, doc_QOpenGLShaderProgram_disableAttributeArray);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_uniformLocation, "uniformLocation(self, Union[QByteArray, bytes, bytearray]) -> int\n"
"uniformLocation(self, str) -> int");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_uniformLocation(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_uniformLocation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            int sipRes;

            sipRes = sipCpp->uniformLocation(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QString,&a0, &a0State))
        {
            int sipRes;

            sipRes = sipCpp->uniformLocation(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_uniformLocation, doc_QOpenGLShaderProgram_uniformLocation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_setUniformValue, "setUniformValue(self, int, int)\n"
"setUniformValue(self, int, float)\n"
"setUniformValue(self, int, float, float)\n"
"setUniformValue(self, int, float, float, float)\n"
"setUniformValue(self, int, float, float, float, float)\n"
"setUniformValue(self, int, QVector2D)\n"
"setUniformValue(self, int, QVector3D)\n"
"setUniformValue(self, int, QVector4D)\n"
"setUniformValue(self, int, Union[QColor, Qt.GlobalColor, QGradient])\n"
"setUniformValue(self, int, QPoint)\n"
"setUniformValue(self, int, Union[QPointF, QPoint])\n"
"setUniformValue(self, int, QSize)\n"
"setUniformValue(self, int, QSizeF)\n"
"setUniformValue(self, int, QMatrix2x2)\n"
"setUniformValue(self, int, QMatrix2x3)\n"
"setUniformValue(self, int, QMatrix2x4)\n"
"setUniformValue(self, int, QMatrix3x2)\n"
"setUniformValue(self, int, QMatrix3x3)\n"
"setUniformValue(self, int, QMatrix3x4)\n"
"setUniformValue(self, int, QMatrix4x2)\n"
"setUniformValue(self, int, QMatrix4x3)\n"
"setUniformValue(self, int, QMatrix4x4)\n"
"setUniformValue(self, int, QTransform)\n"
"setUniformValue(self, str, int)\n"
"setUniformValue(self, str, float)\n"
"setUniformValue(self, str, float, float)\n"
"setUniformValue(self, str, float, float, float)\n"
"setUniformValue(self, str, float, float, float, float)\n"
"setUniformValue(self, str, QVector2D)\n"
"setUniformValue(self, str, QVector3D)\n"
"setUniformValue(self, str, QVector4D)\n"
"setUniformValue(self, str, Union[QColor, Qt.GlobalColor, QGradient])\n"
"setUniformValue(self, str, QPoint)\n"
"setUniformValue(self, str, Union[QPointF, QPoint])\n"
"setUniformValue(self, str, QSize)\n"
"setUniformValue(self, str, QSizeF)\n"
"setUniformValue(self, str, QMatrix2x2)\n"
"setUniformValue(self, str, QMatrix2x3)\n"
"setUniformValue(self, str, QMatrix2x4)\n"
"setUniformValue(self, str, QMatrix3x2)\n"
"setUniformValue(self, str, QMatrix3x3)\n"
"setUniformValue(self, str, QMatrix3x4)\n"
"setUniformValue(self, str, QMatrix4x2)\n"
"setUniformValue(self, str, QMatrix4x3)\n"
"setUniformValue(self, str, QMatrix4x4)\n"
"setUniformValue(self, str, QTransform)");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_setUniformValue(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_setUniformValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::GLint a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiXi", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, &a1))
        {
            sipCpp->setUniformValue(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::GLfloat a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiXf", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, &a1))
        {
            sipCpp->setUniformValue(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::GLfloat a1;
         ::GLfloat a2;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biff", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->setUniformValue(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::GLfloat a1;
         ::GLfloat a2;
         ::GLfloat a3;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bifff", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setUniformValue(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::GLfloat a1;
         ::GLfloat a2;
         ::GLfloat a3;
         ::GLfloat a4;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biffff", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->setUniformValue(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QVector2D* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QVector2D, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QVector3D* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QVector3D, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QVector4D* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QVector4D, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QColor* a1;
        int a1State = 0;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QColor, &a1, &a1State))
        {
            sipCpp->setUniformValue(a0,*a1);
            sipReleaseType(const_cast< ::QColor *>(a1),sipType_QColor,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QPoint* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QPoint, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QPointF* a1;
        int a1State = 0;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QPointF, &a1, &a1State))
        {
            sipCpp->setUniformValue(a0,*a1);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QSize* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QSize, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QSizeF* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QSizeF, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QMatrix2x2* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QMatrix2x2, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QMatrix2x3* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QMatrix2x3, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QMatrix2x4* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QMatrix2x4, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QMatrix3x2* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QMatrix3x2, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QMatrix3x3* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QMatrix3x3, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QMatrix3x4* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QMatrix3x4, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QMatrix4x2* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QMatrix4x2, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QMatrix4x3* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QMatrix4x3, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QMatrix4x4* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QMatrix4x4, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QTransform* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QTransform, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
         ::GLint a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAXi", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, &a1))
        {
            sipCpp->setUniformValue(a0,a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
         ::GLfloat a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAXf", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, &a1))
        {
            sipCpp->setUniformValue(a0,a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
         ::GLfloat a1;
         ::GLfloat a2;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAff", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, &a1, &a2))
        {
            sipCpp->setUniformValue(a0,a1,a2);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
         ::GLfloat a1;
         ::GLfloat a2;
         ::GLfloat a3;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAfff", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, &a1, &a2, &a3))
        {
            sipCpp->setUniformValue(a0,a1,a2,a3);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
         ::GLfloat a1;
         ::GLfloat a2;
         ::GLfloat a3;
         ::GLfloat a4;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAffff", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->setUniformValue(a0,a1,a2,a3,a4);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QVector2D* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QVector2D, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QVector3D* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QVector3D, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QVector4D* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QVector4D, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QColor* a1;
        int a1State = 0;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QColor, &a1, &a1State))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);
            sipReleaseType(const_cast< ::QColor *>(a1),sipType_QColor,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QPoint* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QPoint, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QPointF* a1;
        int a1State = 0;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QPointF, &a1, &a1State))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QSize* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QSize, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QSizeF* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QSizeF, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QMatrix2x2* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QMatrix2x2, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QMatrix2x3* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QMatrix2x3, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QMatrix2x4* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QMatrix2x4, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QMatrix3x2* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QMatrix3x2, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QMatrix3x3* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QMatrix3x3, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QMatrix3x4* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QMatrix3x4, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QMatrix4x2* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QMatrix4x2, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QMatrix4x3* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QMatrix4x3, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QMatrix4x4* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QMatrix4x4, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QTransform* a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QTransform, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_setUniformValue, doc_QOpenGLShaderProgram_setUniformValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_setUniformValueArray, "setUniformValueArray(self, int, PYQT_SHADER_UNIFORM_VALUE_ARRAY)\n"
"setUniformValueArray(self, str, PYQT_SHADER_UNIFORM_VALUE_ARRAY)");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_setUniformValueArray(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_setUniformValueArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        PyObject * a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiP0", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 192 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglshaderprogram.sip"
        const void *values;
        const sipTypeDef *array_type;
        int array_len, tsize;
        
        values = qpyopengl_uniform_value_array(a1, sipSelf, SIPLong_FromLong(a0),
                    &array_type, &array_len, &tsize, &sipError);
        
        if (values)
        {
            if (array_type == sipType_QVector2D)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QVector2D *>(values), array_len);
            else if (array_type == sipType_QVector3D)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QVector3D *>(values), array_len);
            else if (array_type == sipType_QVector4D)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QVector4D *>(values), array_len);
            else if (array_type == sipType_QMatrix2x2)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix2x2 *>(values), array_len);
            else if (array_type == sipType_QMatrix2x3)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix2x3 *>(values), array_len);
            else if (array_type == sipType_QMatrix2x4)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix2x4 *>(values), array_len);
            else if (array_type == sipType_QMatrix3x2)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix3x2 *>(values), array_len);
            else if (array_type == sipType_QMatrix3x3)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix3x3 *>(values), array_len);
            else if (array_type == sipType_QMatrix3x4)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix3x4 *>(values), array_len);
            else if (array_type == sipType_QMatrix4x2)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix4x2 *>(values), array_len);
            else if (array_type == sipType_QMatrix4x3)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix4x3 *>(values), array_len);
            else if (array_type == sipType_QMatrix4x4)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix4x4 *>(values), array_len);
            else
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const GLfloat *>(values), array_len, tsize);
        }
#line 17496 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        PyObject * a1;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAP0", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 245 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglshaderprogram.sip"
        const void *values;
        const sipTypeDef *array_type;
        int array_len, tsize;
        
        values = qpyopengl_uniform_value_array(a1, sipSelf, SIPBytes_FromString(a0),
                    &array_type, &array_len, &tsize, &sipError);
        
        if (values)
        {
            if (array_type == sipType_QVector2D)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QVector2D *>(values), array_len);
            else if (array_type == sipType_QVector3D)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QVector3D *>(values), array_len);
            else if (array_type == sipType_QVector4D)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QVector4D *>(values), array_len);
            else if (array_type == sipType_QMatrix2x2)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix2x2 *>(values), array_len);
            else if (array_type == sipType_QMatrix2x3)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix2x3 *>(values), array_len);
            else if (array_type == sipType_QMatrix2x4)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix2x4 *>(values), array_len);
            else if (array_type == sipType_QMatrix3x2)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix3x2 *>(values), array_len);
            else if (array_type == sipType_QMatrix3x3)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix3x3 *>(values), array_len);
            else if (array_type == sipType_QMatrix3x4)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix3x4 *>(values), array_len);
            else if (array_type == sipType_QMatrix4x2)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix4x2 *>(values), array_len);
            else if (array_type == sipType_QMatrix4x3)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix4x3 *>(values), array_len);
            else if (array_type == sipType_QMatrix4x4)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix4x4 *>(values), array_len);
            else
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const GLfloat *>(values), array_len, tsize);
        }
#line 17571 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
            Py_DECREF(a0Keep);

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_setUniformValueArray, doc_QOpenGLShaderProgram_setUniformValueArray);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_hasOpenGLShaderPrograms, "hasOpenGLShaderPrograms(context: QOpenGLContext = None) -> bool");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_hasOpenGLShaderPrograms(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_hasOpenGLShaderPrograms(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLContext* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_context,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|J8", sipType_QOpenGLContext, &a0))
        {
            bool sipRes;

            sipRes =  ::QOpenGLShaderProgram::hasOpenGLShaderPrograms(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_hasOpenGLShaderPrograms, doc_QOpenGLShaderProgram_hasOpenGLShaderPrograms);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_maxGeometryOutputVertices, "maxGeometryOutputVertices(self) -> int");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_maxGeometryOutputVertices(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_maxGeometryOutputVertices(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maxGeometryOutputVertices();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_maxGeometryOutputVertices, doc_QOpenGLShaderProgram_maxGeometryOutputVertices);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_setPatchVertexCount, "setPatchVertexCount(self, int)");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_setPatchVertexCount(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_setPatchVertexCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0))
        {
            sipCpp->setPatchVertexCount(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_setPatchVertexCount, doc_QOpenGLShaderProgram_setPatchVertexCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_patchVertexCount, "patchVertexCount(self) -> int");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_patchVertexCount(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_patchVertexCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->patchVertexCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_patchVertexCount, doc_QOpenGLShaderProgram_patchVertexCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_setDefaultOuterTessellationLevels, "setDefaultOuterTessellationLevels(self, Iterable[float])");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_setDefaultOuterTessellationLevels(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_setDefaultOuterTessellationLevels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector<float>* a0;
        int a0State = 0;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QVector_2200,&a0, &a0State))
        {
            sipCpp->setDefaultOuterTessellationLevels(*a0);
            sipReleaseType(const_cast< ::QVector<float> *>(a0),sipType_QVector_2200,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_setDefaultOuterTessellationLevels, doc_QOpenGLShaderProgram_setDefaultOuterTessellationLevels);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_defaultOuterTessellationLevels, "defaultOuterTessellationLevels(self) -> List[float]");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_defaultOuterTessellationLevels(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_defaultOuterTessellationLevels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp))
        {
             ::QVector<float>*sipRes;

            sipRes = new  ::QVector<float>(sipCpp->defaultOuterTessellationLevels());

            return sipConvertFromNewType(sipRes,sipType_QVector_2200,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_defaultOuterTessellationLevels, doc_QOpenGLShaderProgram_defaultOuterTessellationLevels);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_setDefaultInnerTessellationLevels, "setDefaultInnerTessellationLevels(self, Iterable[float])");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_setDefaultInnerTessellationLevels(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_setDefaultInnerTessellationLevels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector<float>* a0;
        int a0State = 0;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QVector_2200,&a0, &a0State))
        {
            sipCpp->setDefaultInnerTessellationLevels(*a0);
            sipReleaseType(const_cast< ::QVector<float> *>(a0),sipType_QVector_2200,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_setDefaultInnerTessellationLevels, doc_QOpenGLShaderProgram_setDefaultInnerTessellationLevels);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_defaultInnerTessellationLevels, "defaultInnerTessellationLevels(self) -> List[float]");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_defaultInnerTessellationLevels(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_defaultInnerTessellationLevels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp))
        {
             ::QVector<float>*sipRes;

            sipRes = new  ::QVector<float>(sipCpp->defaultInnerTessellationLevels());

            return sipConvertFromNewType(sipRes,sipType_QVector_2200,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_defaultInnerTessellationLevels, doc_QOpenGLShaderProgram_defaultInnerTessellationLevels);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_create, "create(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_create(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_create(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->create();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_create, doc_QOpenGLShaderProgram_create);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_addCacheableShaderFromSourceCode, "addCacheableShaderFromSourceCode(self, Union[QOpenGLShader.ShaderType, QOpenGLShader.ShaderTypeBit], Union[QByteArray, bytes, bytearray]) -> bool\n"
"addCacheableShaderFromSourceCode(self, Union[QOpenGLShader.ShaderType, QOpenGLShader.ShaderTypeBit], str) -> bool");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_addCacheableShaderFromSourceCode(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_addCacheableShaderFromSourceCode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLShader::ShaderType* a0;
        int a0State = 0;
        const  ::QByteArray* a1;
        int a1State = 0;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QOpenGLShader_ShaderType, &a0, &a0State, sipType_QByteArray, &a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->addCacheableShaderFromSourceCode(*a0,*a1);
            sipReleaseType(a0,sipType_QOpenGLShader_ShaderType,a0State);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::QOpenGLShader::ShaderType* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QOpenGLShader_ShaderType, &a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->addCacheableShaderFromSourceCode(*a0,*a1);
            sipReleaseType(a0,sipType_QOpenGLShader_ShaderType,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_addCacheableShaderFromSourceCode, doc_QOpenGLShaderProgram_addCacheableShaderFromSourceCode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_addCacheableShaderFromSourceFile, "addCacheableShaderFromSourceFile(self, Union[QOpenGLShader.ShaderType, QOpenGLShader.ShaderTypeBit], str) -> bool");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_addCacheableShaderFromSourceFile(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_addCacheableShaderFromSourceFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLShader::ShaderType* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QOpenGLShader_ShaderType, &a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->addCacheableShaderFromSourceFile(*a0,*a1);
            sipReleaseType(a0,sipType_QOpenGLShader_ShaderType,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_addCacheableShaderFromSourceFile, doc_QOpenGLShaderProgram_addCacheableShaderFromSourceFile);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QOpenGLShaderProgram(void *, const sipTypeDef *);}
static void *cast_QOpenGLShaderProgram(void *sipCppV, const sipTypeDef *targetType)
{
     ::QOpenGLShaderProgram *sipCpp = reinterpret_cast< ::QOpenGLShaderProgram *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QOpenGLShaderProgram(void *, int);}
static void release_QOpenGLShaderProgram(void *sipCppV, int)
{
     ::QOpenGLShaderProgram *sipCpp = reinterpret_cast< ::QOpenGLShaderProgram *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QOpenGLShaderProgram(sipSimpleWrapper *);}
static void dealloc_QOpenGLShaderProgram(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQOpenGLShaderProgram *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QOpenGLShaderProgram(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QOpenGLShaderProgram(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOpenGLShaderProgram(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQOpenGLShaderProgram *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQOpenGLShaderProgram(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QOpenGLShaderProgram[] = {{25, 0, 1}};


static PyMethodDef methods_QOpenGLShaderProgram[] = {
    {SIP_MLNAME_CAST(sipName_addCacheableShaderFromSourceCode), meth_QOpenGLShaderProgram_addCacheableShaderFromSourceCode, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_addCacheableShaderFromSourceCode)},
    {SIP_MLNAME_CAST(sipName_addCacheableShaderFromSourceFile), meth_QOpenGLShaderProgram_addCacheableShaderFromSourceFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_addCacheableShaderFromSourceFile)},
    {SIP_MLNAME_CAST(sipName_addShader), meth_QOpenGLShaderProgram_addShader, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_addShader)},
    {SIP_MLNAME_CAST(sipName_addShaderFromSourceCode), meth_QOpenGLShaderProgram_addShaderFromSourceCode, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_addShaderFromSourceCode)},
    {SIP_MLNAME_CAST(sipName_addShaderFromSourceFile), meth_QOpenGLShaderProgram_addShaderFromSourceFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_addShaderFromSourceFile)},
    {SIP_MLNAME_CAST(sipName_attributeLocation), meth_QOpenGLShaderProgram_attributeLocation, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_attributeLocation)},
    {SIP_MLNAME_CAST(sipName_bind), meth_QOpenGLShaderProgram_bind, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_bind)},
    {SIP_MLNAME_CAST(sipName_bindAttributeLocation), meth_QOpenGLShaderProgram_bindAttributeLocation, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_bindAttributeLocation)},
    {SIP_MLNAME_CAST(sipName_create), meth_QOpenGLShaderProgram_create, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_create)},
    {SIP_MLNAME_CAST(sipName_defaultInnerTessellationLevels), meth_QOpenGLShaderProgram_defaultInnerTessellationLevels, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_defaultInnerTessellationLevels)},
    {SIP_MLNAME_CAST(sipName_defaultOuterTessellationLevels), meth_QOpenGLShaderProgram_defaultOuterTessellationLevels, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_defaultOuterTessellationLevels)},
    {SIP_MLNAME_CAST(sipName_disableAttributeArray), meth_QOpenGLShaderProgram_disableAttributeArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_disableAttributeArray)},
    {SIP_MLNAME_CAST(sipName_enableAttributeArray), meth_QOpenGLShaderProgram_enableAttributeArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_enableAttributeArray)},
    {SIP_MLNAME_CAST(sipName_hasOpenGLShaderPrograms), SIP_MLMETH_CAST(meth_QOpenGLShaderProgram_hasOpenGLShaderPrograms), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_hasOpenGLShaderPrograms)},
    {SIP_MLNAME_CAST(sipName_isLinked), meth_QOpenGLShaderProgram_isLinked, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_isLinked)},
    {SIP_MLNAME_CAST(sipName_link), meth_QOpenGLShaderProgram_link, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_link)},
    {SIP_MLNAME_CAST(sipName_log), meth_QOpenGLShaderProgram_log, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_log)},
    {SIP_MLNAME_CAST(sipName_maxGeometryOutputVertices), meth_QOpenGLShaderProgram_maxGeometryOutputVertices, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_maxGeometryOutputVertices)},
    {SIP_MLNAME_CAST(sipName_patchVertexCount), meth_QOpenGLShaderProgram_patchVertexCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_patchVertexCount)},
    {SIP_MLNAME_CAST(sipName_programId), meth_QOpenGLShaderProgram_programId, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_programId)},
    {SIP_MLNAME_CAST(sipName_release), meth_QOpenGLShaderProgram_release, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_release)},
    {SIP_MLNAME_CAST(sipName_removeAllShaders), meth_QOpenGLShaderProgram_removeAllShaders, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_removeAllShaders)},
    {SIP_MLNAME_CAST(sipName_removeShader), meth_QOpenGLShaderProgram_removeShader, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_removeShader)},
    {SIP_MLNAME_CAST(sipName_setAttributeArray), meth_QOpenGLShaderProgram_setAttributeArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_setAttributeArray)},
    {SIP_MLNAME_CAST(sipName_setAttributeBuffer), SIP_MLMETH_CAST(meth_QOpenGLShaderProgram_setAttributeBuffer), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_setAttributeBuffer)},
    {SIP_MLNAME_CAST(sipName_setAttributeValue), meth_QOpenGLShaderProgram_setAttributeValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_setAttributeValue)},
    {SIP_MLNAME_CAST(sipName_setDefaultInnerTessellationLevels), meth_QOpenGLShaderProgram_setDefaultInnerTessellationLevels, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_setDefaultInnerTessellationLevels)},
    {SIP_MLNAME_CAST(sipName_setDefaultOuterTessellationLevels), meth_QOpenGLShaderProgram_setDefaultOuterTessellationLevels, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_setDefaultOuterTessellationLevels)},
    {SIP_MLNAME_CAST(sipName_setPatchVertexCount), meth_QOpenGLShaderProgram_setPatchVertexCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_setPatchVertexCount)},
    {SIP_MLNAME_CAST(sipName_setUniformValue), meth_QOpenGLShaderProgram_setUniformValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_setUniformValue)},
    {SIP_MLNAME_CAST(sipName_setUniformValueArray), meth_QOpenGLShaderProgram_setUniformValueArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_setUniformValueArray)},
    {SIP_MLNAME_CAST(sipName_shaders), meth_QOpenGLShaderProgram_shaders, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_shaders)},
    {SIP_MLNAME_CAST(sipName_uniformLocation), meth_QOpenGLShaderProgram_uniformLocation, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_uniformLocation)}
};

PyDoc_STRVAR(doc_QOpenGLShaderProgram, "\1QOpenGLShaderProgram(parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QOpenGLShaderProgram = {
    & ::QOpenGLShaderProgram::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QOpenGLShaderProgram = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QOpenGLShaderProgram,
        {SIP_NULLPTR},
        &plugin_QOpenGLShaderProgram
    },
    {
        sipNameNr_QOpenGLShaderProgram,
        {0, 0, 1},
        33, methods_QOpenGLShaderProgram,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QOpenGLShaderProgram,
    -1,
    -1,
    supers_QOpenGLShaderProgram,
    SIP_NULLPTR,
    init_type_QOpenGLShaderProgram,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QOpenGLShaderProgram,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QOpenGLShaderProgram,
    cast_QOpenGLShaderProgram,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglshaderprogram.sip"
#include <qopenglshaderprogram.h>
#line 18111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglshaderprogram.sip"
#include <qopenglshaderprogram.h>
#line 18115 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


extern "C" {static long slot_QOpenGLShader_ShaderType___hash__(PyObject *);}
static long slot_QOpenGLShader_ShaderType___hash__(PyObject *sipSelf)
{
     ::QOpenGLShader::ShaderType *sipCpp = reinterpret_cast< ::QOpenGLShader::ShaderType *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLShader_ShaderType));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QOpenGLShader::ShaderType::Int();
#line 18133 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QOpenGLShader_ShaderType___bool__(PyObject *);}
static int slot_QOpenGLShader_ShaderType___bool__(PyObject *sipSelf)
{
     ::QOpenGLShader::ShaderType *sipCpp = reinterpret_cast< ::QOpenGLShader::ShaderType *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLShader_ShaderType));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QOpenGLShader::ShaderType::Int() != 0);
#line 18158 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QOpenGLShader_ShaderType___ne__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLShader_ShaderType___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QOpenGLShader::ShaderType *sipCpp = reinterpret_cast< ::QOpenGLShader::ShaderType *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLShader_ShaderType));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLShader::ShaderType* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QOpenGLShader_ShaderType, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QOpenGLShader::ShaderType::Int() != a0->operator QOpenGLShader::ShaderType::Int());
#line 18188 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
            sipReleaseType(const_cast< ::QOpenGLShader::ShaderType *>(a0),sipType_QOpenGLShader_ShaderType,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QOpenGLShader_ShaderType, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QOpenGLShader_ShaderType___eq__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLShader_ShaderType___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QOpenGLShader::ShaderType *sipCpp = reinterpret_cast< ::QOpenGLShader::ShaderType *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLShader_ShaderType));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLShader::ShaderType* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QOpenGLShader_ShaderType, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QOpenGLShader::ShaderType::Int() == a0->operator QOpenGLShader::ShaderType::Int());
#line 18224 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
            sipReleaseType(const_cast< ::QOpenGLShader::ShaderType *>(a0),sipType_QOpenGLShader_ShaderType,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QOpenGLShader_ShaderType, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QOpenGLShader_ShaderType___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLShader_ShaderType___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QOpenGLShader_ShaderType)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QOpenGLShader::ShaderType *sipCpp = reinterpret_cast< ::QOpenGLShader::ShaderType *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLShader_ShaderType));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QOpenGLShader::ShaderType(*sipCpp ^ a0);
#line 18263 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QOpenGLShader_ShaderType___xor__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLShader_ShaderType___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLShader::ShaderType* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QOpenGLShader_ShaderType, &a0, &a0State, &a1))
        {
             ::QOpenGLShader::ShaderType*sipRes;

            sipRes = new  ::QOpenGLShader::ShaderType((*a0 ^ a1));
            sipReleaseType(a0,sipType_QOpenGLShader_ShaderType,a0State);

            return sipConvertFromNewType(sipRes,sipType_QOpenGLShader_ShaderType,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QOpenGLShader_ShaderType___ior__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLShader_ShaderType___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QOpenGLShader_ShaderType)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QOpenGLShader::ShaderType *sipCpp = reinterpret_cast< ::QOpenGLShader::ShaderType *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLShader_ShaderType));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QOpenGLShader::ShaderType(*sipCpp | a0);
#line 18335 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QOpenGLShader_ShaderType___or__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLShader_ShaderType___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLShader::ShaderType* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QOpenGLShader_ShaderType, &a0, &a0State, &a1))
        {
             ::QOpenGLShader::ShaderType*sipRes;

            sipRes = new  ::QOpenGLShader::ShaderType((*a0 | a1));
            sipReleaseType(a0,sipType_QOpenGLShader_ShaderType,a0State);

            return sipConvertFromNewType(sipRes,sipType_QOpenGLShader_ShaderType,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QOpenGLShader_ShaderType___iand__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLShader_ShaderType___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QOpenGLShader_ShaderType)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QOpenGLShader::ShaderType *sipCpp = reinterpret_cast< ::QOpenGLShader::ShaderType *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLShader_ShaderType));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QOpenGLShader::ShaderType::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QOpenGLShader_ShaderType___and__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLShader_ShaderType___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLShader::ShaderType* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QOpenGLShader_ShaderType, &a0, &a0State, &a1))
        {
             ::QOpenGLShader::ShaderType*sipRes;

            sipRes = new  ::QOpenGLShader::ShaderType((*a0 & a1));
            sipReleaseType(a0,sipType_QOpenGLShader_ShaderType,a0State);

            return sipConvertFromNewType(sipRes,sipType_QOpenGLShader_ShaderType,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QOpenGLShader_ShaderType___invert__(PyObject *);}
static PyObject *slot_QOpenGLShader_ShaderType___invert__(PyObject *sipSelf)
{
     ::QOpenGLShader::ShaderType *sipCpp = reinterpret_cast< ::QOpenGLShader::ShaderType *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLShader_ShaderType));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QOpenGLShader::ShaderType*sipRes;

            sipRes = new  ::QOpenGLShader::ShaderType(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QOpenGLShader_ShaderType,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QOpenGLShader_ShaderType___int__(PyObject *);}
static PyObject *slot_QOpenGLShader_ShaderType___int__(PyObject *sipSelf)
{
     ::QOpenGLShader::ShaderType *sipCpp = reinterpret_cast< ::QOpenGLShader::ShaderType *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLShader_ShaderType));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QOpenGLShader_ShaderType(void *, int);}
static void release_QOpenGLShader_ShaderType(void *sipCppV, int)
{
    delete reinterpret_cast< ::QOpenGLShader::ShaderType *>(sipCppV);
}


extern "C" {static void assign_QOpenGLShader_ShaderType(void *, SIP_SSIZE_T, void *);}
static void assign_QOpenGLShader_ShaderType(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QOpenGLShader::ShaderType *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QOpenGLShader::ShaderType *>(sipSrc);
}


extern "C" {static void *array_QOpenGLShader_ShaderType(SIP_SSIZE_T);}
static void *array_QOpenGLShader_ShaderType(SIP_SSIZE_T sipNrElem)
{
    return new  ::QOpenGLShader::ShaderType[sipNrElem];
}


extern "C" {static void *copy_QOpenGLShader_ShaderType(const void *, SIP_SSIZE_T);}
static void *copy_QOpenGLShader_ShaderType(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QOpenGLShader::ShaderType(reinterpret_cast<const  ::QOpenGLShader::ShaderType *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QOpenGLShader_ShaderType(sipSimpleWrapper *);}
static void dealloc_QOpenGLShader_ShaderType(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QOpenGLShader_ShaderType(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QOpenGLShader_ShaderType(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOpenGLShader_ShaderType(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QOpenGLShader::ShaderType *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QOpenGLShader::ShaderType();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QOpenGLShader::ShaderType(a0);

            return sipCpp;
        }
    }

    {
        const  ::QOpenGLShader::ShaderType* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QOpenGLShader_ShaderType, &a0, &a0State))
        {
            sipCpp = new  ::QOpenGLShader::ShaderType(*a0);
            sipReleaseType(const_cast< ::QOpenGLShader::ShaderType *>(a0),sipType_QOpenGLShader_ShaderType,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QOpenGLShader_ShaderType(PyObject *, void **, int *, PyObject *);}
static int convertTo_QOpenGLShader_ShaderType(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QOpenGLShader::ShaderType **sipCppPtr = reinterpret_cast< ::QOpenGLShader::ShaderType **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QOpenGLShader::ShaderType is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QOpenGLShader_ShaderTypeBit)) ||
            sipCanConvertToType(sipPy, sipType_QOpenGLShader_ShaderType, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QOpenGLShader_ShaderTypeBit)))
{
    *sipCppPtr = new QOpenGLShader::ShaderType(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QOpenGLShader::ShaderType *>(sipConvertToType(sipPy, sipType_QOpenGLShader_ShaderType, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 18603 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QOpenGLShader_ShaderType[] = {
    {(void *)slot_QOpenGLShader_ShaderType___hash__, hash_slot},
    {(void *)slot_QOpenGLShader_ShaderType___bool__, bool_slot},
    {(void *)slot_QOpenGLShader_ShaderType___ne__, ne_slot},
    {(void *)slot_QOpenGLShader_ShaderType___eq__, eq_slot},
    {(void *)slot_QOpenGLShader_ShaderType___ixor__, ixor_slot},
    {(void *)slot_QOpenGLShader_ShaderType___xor__, xor_slot},
    {(void *)slot_QOpenGLShader_ShaderType___ior__, ior_slot},
    {(void *)slot_QOpenGLShader_ShaderType___or__, or_slot},
    {(void *)slot_QOpenGLShader_ShaderType___iand__, iand_slot},
    {(void *)slot_QOpenGLShader_ShaderType___and__, and_slot},
    {(void *)slot_QOpenGLShader_ShaderType___invert__, invert_slot},
    {(void *)slot_QOpenGLShader_ShaderType___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QOpenGLShader_ShaderType, "\1QOpenGLShader.ShaderType()\n"
"QOpenGLShader.ShaderType(Union[QOpenGLShader.ShaderType, QOpenGLShader.ShaderTypeBit])\n"
"QOpenGLShader.ShaderType(QOpenGLShader.ShaderType)");


static pyqt5ClassPluginDef plugin_QOpenGLShader_ShaderType = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QOpenGLShader_ShaderType = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QOpenGLShader__ShaderType,
        {SIP_NULLPTR},
        &plugin_QOpenGLShader_ShaderType
    },
    {
        sipNameNr_ShaderType,
        {149, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QOpenGLShader_ShaderType,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QOpenGLShader_ShaderType,
    init_type_QOpenGLShader_ShaderType,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QOpenGLShader_ShaderType,
    assign_QOpenGLShader_ShaderType,
    array_QOpenGLShader_ShaderType,
    copy_QOpenGLShader_ShaderType,
    release_QOpenGLShader_ShaderType,
    SIP_NULLPTR,
    convertTo_QOpenGLShader_ShaderType,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglshaderprogram.sip"
#include <qopenglshaderprogram.h>
#line 18691 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglshaderprogram.sip"
#include <qopenglshaderprogram.h>
#line 18695 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 18698 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 46 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglcontext.sip"
#include <qopenglcontext.h>
#line 18701 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 18704 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 18707 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 18710 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 18713 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 18716 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 18719 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 18722 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 18725 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 18728 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 18731 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 18734 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 18737 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 18740 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 18743 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 18746 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQOpenGLShader : public  ::QOpenGLShader
{
public:
    sipQOpenGLShader( ::QOpenGLShader::ShaderType, ::QObject*);
    virtual ~sipQOpenGLShader();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQOpenGLShader(const sipQOpenGLShader &);
    sipQOpenGLShader &operator = (const sipQOpenGLShader &);

    char sipPyMethods[7];
};

sipQOpenGLShader::sipQOpenGLShader( ::QOpenGLShader::ShaderType a0, ::QObject*a1):  ::QOpenGLShader(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQOpenGLShader::~sipQOpenGLShader()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQOpenGLShader::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QOpenGLShader);

    return  ::QOpenGLShader::metaObject();
}

int sipQOpenGLShader::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QOpenGLShader::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QOpenGLShader,_c,_id,_a);

    return _id;
}

void *sipQOpenGLShader::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QOpenGLShader, _clname, &sipCpp) ? sipCpp :  ::QOpenGLShader::qt_metacast(_clname));
}

bool sipQOpenGLShader::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QOpenGLShader::event(a0);

    extern bool sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_5(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQOpenGLShader::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QOpenGLShader::eventFilter(a0,a1);

    extern bool sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_4(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQOpenGLShader::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QOpenGLShader::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_3(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLShader::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QOpenGLShader::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_2(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLShader::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QOpenGLShader::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_1(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLShader::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QOpenGLShader::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLShader::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QOpenGLShader::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QOpenGLShader_shaderType, "shaderType(self) -> QOpenGLShader.ShaderType");

extern "C" {static PyObject *meth_QOpenGLShader_shaderType(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShader_shaderType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLShader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShader, &sipCpp))
        {
             ::QOpenGLShader::ShaderType*sipRes;

            sipRes = new  ::QOpenGLShader::ShaderType(sipCpp->shaderType());

            return sipConvertFromNewType(sipRes,sipType_QOpenGLShader_ShaderType,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShader, sipName_shaderType, doc_QOpenGLShader_shaderType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShader_compileSourceCode, "compileSourceCode(self, Union[QByteArray, bytes, bytearray]) -> bool\n"
"compileSourceCode(self, str) -> bool");

extern "C" {static PyObject *meth_QOpenGLShader_compileSourceCode(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShader_compileSourceCode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QOpenGLShader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QOpenGLShader, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->compileSourceCode(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QOpenGLShader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QOpenGLShader, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->compileSourceCode(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShader, sipName_compileSourceCode, doc_QOpenGLShader_compileSourceCode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShader_compileSourceFile, "compileSourceFile(self, str) -> bool");

extern "C" {static PyObject *meth_QOpenGLShader_compileSourceFile(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShader_compileSourceFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QOpenGLShader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QOpenGLShader, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->compileSourceFile(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShader, sipName_compileSourceFile, doc_QOpenGLShader_compileSourceFile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShader_sourceCode, "sourceCode(self) -> QByteArray");

extern "C" {static PyObject *meth_QOpenGLShader_sourceCode(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShader_sourceCode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLShader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShader, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->sourceCode());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShader, sipName_sourceCode, doc_QOpenGLShader_sourceCode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShader_isCompiled, "isCompiled(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLShader_isCompiled(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShader_isCompiled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLShader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isCompiled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShader, sipName_isCompiled, doc_QOpenGLShader_isCompiled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShader_log, "log(self) -> str");

extern "C" {static PyObject *meth_QOpenGLShader_log(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShader_log(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLShader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShader, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->log());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShader, sipName_log, doc_QOpenGLShader_log);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShader_shaderId, "shaderId(self) -> int");

extern "C" {static PyObject *meth_QOpenGLShader_shaderId(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShader_shaderId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLShader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShader, &sipCpp))
        {
             ::GLuint sipRes;

            sipRes = sipCpp->shaderId();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShader, sipName_shaderId, doc_QOpenGLShader_shaderId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLShader_hasOpenGLShaders, "hasOpenGLShaders(Union[QOpenGLShader.ShaderType, QOpenGLShader.ShaderTypeBit], context: QOpenGLContext = None) -> bool");

extern "C" {static PyObject *meth_QOpenGLShader_hasOpenGLShaders(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShader_hasOpenGLShaders(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLShader::ShaderType* a0;
        int a0State = 0;
         ::QOpenGLContext* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_context,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1|J8", sipType_QOpenGLShader_ShaderType, &a0, &a0State, sipType_QOpenGLContext, &a1))
        {
            bool sipRes;

            sipRes =  ::QOpenGLShader::hasOpenGLShaders(*a0,a1);
            sipReleaseType(a0,sipType_QOpenGLShader_ShaderType,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShader, sipName_hasOpenGLShaders, doc_QOpenGLShader_hasOpenGLShaders);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QOpenGLShader(void *, const sipTypeDef *);}
static void *cast_QOpenGLShader(void *sipCppV, const sipTypeDef *targetType)
{
     ::QOpenGLShader *sipCpp = reinterpret_cast< ::QOpenGLShader *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QOpenGLShader(void *, int);}
static void release_QOpenGLShader(void *sipCppV, int)
{
     ::QOpenGLShader *sipCpp = reinterpret_cast< ::QOpenGLShader *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QOpenGLShader(sipSimpleWrapper *);}
static void dealloc_QOpenGLShader(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQOpenGLShader *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QOpenGLShader(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QOpenGLShader(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOpenGLShader(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQOpenGLShader *sipCpp = SIP_NULLPTR;

    {
         ::QOpenGLShader::ShaderType* a0;
        int a0State = 0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QOpenGLShader_ShaderType, &a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQOpenGLShader(*a0,a1);
            sipReleaseType(a0,sipType_QOpenGLShader_ShaderType,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QOpenGLShader[] = {{25, 0, 1}};


static PyMethodDef methods_QOpenGLShader[] = {
    {SIP_MLNAME_CAST(sipName_compileSourceCode), meth_QOpenGLShader_compileSourceCode, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShader_compileSourceCode)},
    {SIP_MLNAME_CAST(sipName_compileSourceFile), meth_QOpenGLShader_compileSourceFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShader_compileSourceFile)},
    {SIP_MLNAME_CAST(sipName_hasOpenGLShaders), SIP_MLMETH_CAST(meth_QOpenGLShader_hasOpenGLShaders), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLShader_hasOpenGLShaders)},
    {SIP_MLNAME_CAST(sipName_isCompiled), meth_QOpenGLShader_isCompiled, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShader_isCompiled)},
    {SIP_MLNAME_CAST(sipName_log), meth_QOpenGLShader_log, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShader_log)},
    {SIP_MLNAME_CAST(sipName_shaderId), meth_QOpenGLShader_shaderId, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShader_shaderId)},
    {SIP_MLNAME_CAST(sipName_shaderType), meth_QOpenGLShader_shaderType, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShader_shaderType)},
    {SIP_MLNAME_CAST(sipName_sourceCode), meth_QOpenGLShader_sourceCode, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShader_sourceCode)}
};

static sipEnumMemberDef enummembers_QOpenGLShader[] = {
    {sipName_Compute, static_cast<int>( ::QOpenGLShader::Compute), 151},
    {sipName_Fragment, static_cast<int>( ::QOpenGLShader::Fragment), 151},
    {sipName_Geometry, static_cast<int>( ::QOpenGLShader::Geometry), 151},
    {sipName_TessellationControl, static_cast<int>( ::QOpenGLShader::TessellationControl), 151},
    {sipName_TessellationEvaluation, static_cast<int>( ::QOpenGLShader::TessellationEvaluation), 151},
    {sipName_Vertex, static_cast<int>( ::QOpenGLShader::Vertex), 151},
};

PyDoc_STRVAR(doc_QOpenGLShader, "\1QOpenGLShader(Union[QOpenGLShader.ShaderType, QOpenGLShader.ShaderTypeBit], parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QOpenGLShader = {
    & ::QOpenGLShader::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QOpenGLShader = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QOpenGLShader,
        {SIP_NULLPTR},
        &plugin_QOpenGLShader
    },
    {
        sipNameNr_QOpenGLShader,
        {0, 0, 1},
        8, methods_QOpenGLShader,
        6, enummembers_QOpenGLShader,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QOpenGLShader,
    -1,
    -1,
    supers_QOpenGLShader,
    SIP_NULLPTR,
    init_type_QOpenGLShader,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QOpenGLShader,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QOpenGLShader,
    cast_QOpenGLShader,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglpixeltransferoptions.sip"
#include <qopenglpixeltransferoptions.h>
#line 19350 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"



PyDoc_STRVAR(doc_QOpenGLPixelTransferOptions_swap, "swap(self, QOpenGLPixelTransferOptions)");

extern "C" {static PyObject *meth_QOpenGLPixelTransferOptions_swap(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLPixelTransferOptions_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLPixelTransferOptions* a0;
         ::QOpenGLPixelTransferOptions *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QOpenGLPixelTransferOptions, &sipCpp, sipType_QOpenGLPixelTransferOptions, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLPixelTransferOptions, sipName_swap, doc_QOpenGLPixelTransferOptions_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLPixelTransferOptions_setAlignment, "setAlignment(self, int)");

extern "C" {static PyObject *meth_QOpenGLPixelTransferOptions_setAlignment(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLPixelTransferOptions_setAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QOpenGLPixelTransferOptions *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLPixelTransferOptions, &sipCpp, &a0))
        {
            sipCpp->setAlignment(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLPixelTransferOptions, sipName_setAlignment, doc_QOpenGLPixelTransferOptions_setAlignment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLPixelTransferOptions_alignment, "alignment(self) -> int");

extern "C" {static PyObject *meth_QOpenGLPixelTransferOptions_alignment(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLPixelTransferOptions_alignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLPixelTransferOptions *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLPixelTransferOptions, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->alignment();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLPixelTransferOptions, sipName_alignment, doc_QOpenGLPixelTransferOptions_alignment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLPixelTransferOptions_setSkipImages, "setSkipImages(self, int)");

extern "C" {static PyObject *meth_QOpenGLPixelTransferOptions_setSkipImages(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLPixelTransferOptions_setSkipImages(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QOpenGLPixelTransferOptions *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLPixelTransferOptions, &sipCpp, &a0))
        {
            sipCpp->setSkipImages(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLPixelTransferOptions, sipName_setSkipImages, doc_QOpenGLPixelTransferOptions_setSkipImages);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLPixelTransferOptions_skipImages, "skipImages(self) -> int");

extern "C" {static PyObject *meth_QOpenGLPixelTransferOptions_skipImages(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLPixelTransferOptions_skipImages(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLPixelTransferOptions *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLPixelTransferOptions, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->skipImages();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLPixelTransferOptions, sipName_skipImages, doc_QOpenGLPixelTransferOptions_skipImages);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLPixelTransferOptions_setSkipRows, "setSkipRows(self, int)");

extern "C" {static PyObject *meth_QOpenGLPixelTransferOptions_setSkipRows(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLPixelTransferOptions_setSkipRows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QOpenGLPixelTransferOptions *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLPixelTransferOptions, &sipCpp, &a0))
        {
            sipCpp->setSkipRows(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLPixelTransferOptions, sipName_setSkipRows, doc_QOpenGLPixelTransferOptions_setSkipRows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLPixelTransferOptions_skipRows, "skipRows(self) -> int");

extern "C" {static PyObject *meth_QOpenGLPixelTransferOptions_skipRows(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLPixelTransferOptions_skipRows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLPixelTransferOptions *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLPixelTransferOptions, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->skipRows();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLPixelTransferOptions, sipName_skipRows, doc_QOpenGLPixelTransferOptions_skipRows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLPixelTransferOptions_setSkipPixels, "setSkipPixels(self, int)");

extern "C" {static PyObject *meth_QOpenGLPixelTransferOptions_setSkipPixels(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLPixelTransferOptions_setSkipPixels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QOpenGLPixelTransferOptions *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLPixelTransferOptions, &sipCpp, &a0))
        {
            sipCpp->setSkipPixels(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLPixelTransferOptions, sipName_setSkipPixels, doc_QOpenGLPixelTransferOptions_setSkipPixels);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLPixelTransferOptions_skipPixels, "skipPixels(self) -> int");

extern "C" {static PyObject *meth_QOpenGLPixelTransferOptions_skipPixels(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLPixelTransferOptions_skipPixels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLPixelTransferOptions *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLPixelTransferOptions, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->skipPixels();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLPixelTransferOptions, sipName_skipPixels, doc_QOpenGLPixelTransferOptions_skipPixels);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLPixelTransferOptions_setImageHeight, "setImageHeight(self, int)");

extern "C" {static PyObject *meth_QOpenGLPixelTransferOptions_setImageHeight(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLPixelTransferOptions_setImageHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QOpenGLPixelTransferOptions *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLPixelTransferOptions, &sipCpp, &a0))
        {
            sipCpp->setImageHeight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLPixelTransferOptions, sipName_setImageHeight, doc_QOpenGLPixelTransferOptions_setImageHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLPixelTransferOptions_imageHeight, "imageHeight(self) -> int");

extern "C" {static PyObject *meth_QOpenGLPixelTransferOptions_imageHeight(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLPixelTransferOptions_imageHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLPixelTransferOptions *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLPixelTransferOptions, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->imageHeight();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLPixelTransferOptions, sipName_imageHeight, doc_QOpenGLPixelTransferOptions_imageHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLPixelTransferOptions_setRowLength, "setRowLength(self, int)");

extern "C" {static PyObject *meth_QOpenGLPixelTransferOptions_setRowLength(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLPixelTransferOptions_setRowLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QOpenGLPixelTransferOptions *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLPixelTransferOptions, &sipCpp, &a0))
        {
            sipCpp->setRowLength(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLPixelTransferOptions, sipName_setRowLength, doc_QOpenGLPixelTransferOptions_setRowLength);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLPixelTransferOptions_rowLength, "rowLength(self) -> int");

extern "C" {static PyObject *meth_QOpenGLPixelTransferOptions_rowLength(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLPixelTransferOptions_rowLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLPixelTransferOptions *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLPixelTransferOptions, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->rowLength();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLPixelTransferOptions, sipName_rowLength, doc_QOpenGLPixelTransferOptions_rowLength);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLPixelTransferOptions_setLeastSignificantByteFirst, "setLeastSignificantByteFirst(self, bool)");

extern "C" {static PyObject *meth_QOpenGLPixelTransferOptions_setLeastSignificantByteFirst(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLPixelTransferOptions_setLeastSignificantByteFirst(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QOpenGLPixelTransferOptions *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QOpenGLPixelTransferOptions, &sipCpp, &a0))
        {
            sipCpp->setLeastSignificantByteFirst(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLPixelTransferOptions, sipName_setLeastSignificantByteFirst, doc_QOpenGLPixelTransferOptions_setLeastSignificantByteFirst);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLPixelTransferOptions_isLeastSignificantBitFirst, "isLeastSignificantBitFirst(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLPixelTransferOptions_isLeastSignificantBitFirst(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLPixelTransferOptions_isLeastSignificantBitFirst(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLPixelTransferOptions *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLPixelTransferOptions, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isLeastSignificantBitFirst();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLPixelTransferOptions, sipName_isLeastSignificantBitFirst, doc_QOpenGLPixelTransferOptions_isLeastSignificantBitFirst);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLPixelTransferOptions_setSwapBytesEnabled, "setSwapBytesEnabled(self, bool)");

extern "C" {static PyObject *meth_QOpenGLPixelTransferOptions_setSwapBytesEnabled(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLPixelTransferOptions_setSwapBytesEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QOpenGLPixelTransferOptions *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QOpenGLPixelTransferOptions, &sipCpp, &a0))
        {
            sipCpp->setSwapBytesEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLPixelTransferOptions, sipName_setSwapBytesEnabled, doc_QOpenGLPixelTransferOptions_setSwapBytesEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLPixelTransferOptions_isSwapBytesEnabled, "isSwapBytesEnabled(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLPixelTransferOptions_isSwapBytesEnabled(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLPixelTransferOptions_isSwapBytesEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLPixelTransferOptions *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLPixelTransferOptions, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSwapBytesEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLPixelTransferOptions, sipName_isSwapBytesEnabled, doc_QOpenGLPixelTransferOptions_isSwapBytesEnabled);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QOpenGLPixelTransferOptions(void *, int);}
static void release_QOpenGLPixelTransferOptions(void *sipCppV, int)
{
    delete reinterpret_cast< ::QOpenGLPixelTransferOptions *>(sipCppV);
}


extern "C" {static void assign_QOpenGLPixelTransferOptions(void *, SIP_SSIZE_T, void *);}
static void assign_QOpenGLPixelTransferOptions(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QOpenGLPixelTransferOptions *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QOpenGLPixelTransferOptions *>(sipSrc);
}


extern "C" {static void *array_QOpenGLPixelTransferOptions(SIP_SSIZE_T);}
static void *array_QOpenGLPixelTransferOptions(SIP_SSIZE_T sipNrElem)
{
    return new  ::QOpenGLPixelTransferOptions[sipNrElem];
}


extern "C" {static void *copy_QOpenGLPixelTransferOptions(const void *, SIP_SSIZE_T);}
static void *copy_QOpenGLPixelTransferOptions(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QOpenGLPixelTransferOptions(reinterpret_cast<const  ::QOpenGLPixelTransferOptions *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QOpenGLPixelTransferOptions(sipSimpleWrapper *);}
static void dealloc_QOpenGLPixelTransferOptions(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QOpenGLPixelTransferOptions(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QOpenGLPixelTransferOptions(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOpenGLPixelTransferOptions(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QOpenGLPixelTransferOptions *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QOpenGLPixelTransferOptions();

            return sipCpp;
        }
    }

    {
        const  ::QOpenGLPixelTransferOptions* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QOpenGLPixelTransferOptions, &a0))
        {
            sipCpp = new  ::QOpenGLPixelTransferOptions(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QOpenGLPixelTransferOptions[] = {
    {SIP_MLNAME_CAST(sipName_alignment), meth_QOpenGLPixelTransferOptions_alignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLPixelTransferOptions_alignment)},
    {SIP_MLNAME_CAST(sipName_imageHeight), meth_QOpenGLPixelTransferOptions_imageHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLPixelTransferOptions_imageHeight)},
    {SIP_MLNAME_CAST(sipName_isLeastSignificantBitFirst), meth_QOpenGLPixelTransferOptions_isLeastSignificantBitFirst, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLPixelTransferOptions_isLeastSignificantBitFirst)},
    {SIP_MLNAME_CAST(sipName_isSwapBytesEnabled), meth_QOpenGLPixelTransferOptions_isSwapBytesEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLPixelTransferOptions_isSwapBytesEnabled)},
    {SIP_MLNAME_CAST(sipName_rowLength), meth_QOpenGLPixelTransferOptions_rowLength, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLPixelTransferOptions_rowLength)},
    {SIP_MLNAME_CAST(sipName_setAlignment), meth_QOpenGLPixelTransferOptions_setAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLPixelTransferOptions_setAlignment)},
    {SIP_MLNAME_CAST(sipName_setImageHeight), meth_QOpenGLPixelTransferOptions_setImageHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLPixelTransferOptions_setImageHeight)},
    {SIP_MLNAME_CAST(sipName_setLeastSignificantByteFirst), meth_QOpenGLPixelTransferOptions_setLeastSignificantByteFirst, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLPixelTransferOptions_setLeastSignificantByteFirst)},
    {SIP_MLNAME_CAST(sipName_setRowLength), meth_QOpenGLPixelTransferOptions_setRowLength, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLPixelTransferOptions_setRowLength)},
    {SIP_MLNAME_CAST(sipName_setSkipImages), meth_QOpenGLPixelTransferOptions_setSkipImages, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLPixelTransferOptions_setSkipImages)},
    {SIP_MLNAME_CAST(sipName_setSkipPixels), meth_QOpenGLPixelTransferOptions_setSkipPixels, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLPixelTransferOptions_setSkipPixels)},
    {SIP_MLNAME_CAST(sipName_setSkipRows), meth_QOpenGLPixelTransferOptions_setSkipRows, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLPixelTransferOptions_setSkipRows)},
    {SIP_MLNAME_CAST(sipName_setSwapBytesEnabled), meth_QOpenGLPixelTransferOptions_setSwapBytesEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLPixelTransferOptions_setSwapBytesEnabled)},
    {SIP_MLNAME_CAST(sipName_skipImages), meth_QOpenGLPixelTransferOptions_skipImages, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLPixelTransferOptions_skipImages)},
    {SIP_MLNAME_CAST(sipName_skipPixels), meth_QOpenGLPixelTransferOptions_skipPixels, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLPixelTransferOptions_skipPixels)},
    {SIP_MLNAME_CAST(sipName_skipRows), meth_QOpenGLPixelTransferOptions_skipRows, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLPixelTransferOptions_skipRows)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QOpenGLPixelTransferOptions_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLPixelTransferOptions_swap)}
};

PyDoc_STRVAR(doc_QOpenGLPixelTransferOptions, "\1QOpenGLPixelTransferOptions()\n"
"QOpenGLPixelTransferOptions(QOpenGLPixelTransferOptions)");


static pyqt5ClassPluginDef plugin_QOpenGLPixelTransferOptions = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QOpenGLPixelTransferOptions = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QOpenGLPixelTransferOptions,
        {SIP_NULLPTR},
        &plugin_QOpenGLPixelTransferOptions
    },
    {
        sipNameNr_QOpenGLPixelTransferOptions,
        {0, 0, 1},
        17, methods_QOpenGLPixelTransferOptions,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QOpenGLPixelTransferOptions,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QOpenGLPixelTransferOptions,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QOpenGLPixelTransferOptions,
    assign_QOpenGLPixelTransferOptions,
    array_QOpenGLPixelTransferOptions,
    copy_QOpenGLPixelTransferOptions,
    release_QOpenGLPixelTransferOptions,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglpaintdevice.sip"
#include <qopenglpaintdevice.h>
#line 19983 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 19987 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 19990 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 46 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglcontext.sip"
#include <qopenglcontext.h>
#line 19993 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 52 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 19996 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQOpenGLPaintDevice : public  ::QOpenGLPaintDevice
{
public:
    sipQOpenGLPaintDevice();
    sipQOpenGLPaintDevice(const  ::QSize&);
    sipQOpenGLPaintDevice(int,int);
    virtual ~sipQOpenGLPaintDevice();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void ensureActiveTarget() SIP_OVERRIDE;
     ::QPaintEngine* paintEngine() const SIP_OVERRIDE;
    int metric( ::QPaintDevice::PaintDeviceMetric) const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQOpenGLPaintDevice(const sipQOpenGLPaintDevice &);
    sipQOpenGLPaintDevice &operator = (const sipQOpenGLPaintDevice &);

    char sipPyMethods[3];
};

sipQOpenGLPaintDevice::sipQOpenGLPaintDevice():  ::QOpenGLPaintDevice(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQOpenGLPaintDevice::sipQOpenGLPaintDevice(const  ::QSize& a0):  ::QOpenGLPaintDevice(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQOpenGLPaintDevice::sipQOpenGLPaintDevice(int a0,int a1):  ::QOpenGLPaintDevice(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQOpenGLPaintDevice::~sipQOpenGLPaintDevice()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

void sipQOpenGLPaintDevice::ensureActiveTarget()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_ensureActiveTarget);

    if (!sipMeth)
    {
         ::QOpenGLPaintDevice::ensureActiveTarget();
        return;
    }

    extern void sipVH_QtGui_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtGui_39(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QPaintEngine* sipQOpenGLPaintDevice::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_paintEngine);

    if (!sipMeth)
        return  ::QOpenGLPaintDevice::paintEngine();

    extern  ::QPaintEngine* sipVH_QtGui_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_17(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQOpenGLPaintDevice::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,SIP_NULLPTR,sipName_metric);

    if (!sipMeth)
        return  ::QOpenGLPaintDevice::metric(a0);

    extern int sipVH_QtGui_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_18(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QOpenGLPaintDevice_paintEngine, "paintEngine(self) -> QPaintEngine");

extern "C" {static PyObject *meth_QOpenGLPaintDevice_paintEngine(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLPaintDevice_paintEngine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QOpenGLPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLPaintDevice, &sipCpp))
        {
             ::QPaintEngine*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QOpenGLPaintDevice::paintEngine() : sipCpp->paintEngine());

            return sipConvertFromType(sipRes,sipType_QPaintEngine,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLPaintDevice, sipName_paintEngine, doc_QOpenGLPaintDevice_paintEngine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLPaintDevice_context, "context(self) -> QOpenGLContext");

extern "C" {static PyObject *meth_QOpenGLPaintDevice_context(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLPaintDevice_context(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLPaintDevice, &sipCpp))
        {
             ::QOpenGLContext*sipRes;

            sipRes = sipCpp->context();

            return sipConvertFromType(sipRes,sipType_QOpenGLContext,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLPaintDevice, sipName_context, doc_QOpenGLPaintDevice_context);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLPaintDevice_size, "size(self) -> QSize");

extern "C" {static PyObject *meth_QOpenGLPaintDevice_size(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLPaintDevice_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLPaintDevice, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->size());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLPaintDevice, sipName_size, doc_QOpenGLPaintDevice_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLPaintDevice_setSize, "setSize(self, QSize)");

extern "C" {static PyObject *meth_QOpenGLPaintDevice_setSize(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLPaintDevice_setSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
         ::QOpenGLPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QOpenGLPaintDevice, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLPaintDevice, sipName_setSize, doc_QOpenGLPaintDevice_setSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLPaintDevice_dotsPerMeterX, "dotsPerMeterX(self) -> float");

extern "C" {static PyObject *meth_QOpenGLPaintDevice_dotsPerMeterX(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLPaintDevice_dotsPerMeterX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLPaintDevice, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->dotsPerMeterX();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLPaintDevice, sipName_dotsPerMeterX, doc_QOpenGLPaintDevice_dotsPerMeterX);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLPaintDevice_dotsPerMeterY, "dotsPerMeterY(self) -> float");

extern "C" {static PyObject *meth_QOpenGLPaintDevice_dotsPerMeterY(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLPaintDevice_dotsPerMeterY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLPaintDevice, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->dotsPerMeterY();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLPaintDevice, sipName_dotsPerMeterY, doc_QOpenGLPaintDevice_dotsPerMeterY);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLPaintDevice_setDotsPerMeterX, "setDotsPerMeterX(self, float)");

extern "C" {static PyObject *meth_QOpenGLPaintDevice_setDotsPerMeterX(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLPaintDevice_setDotsPerMeterX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QOpenGLPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QOpenGLPaintDevice, &sipCpp, &a0))
        {
            sipCpp->setDotsPerMeterX(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLPaintDevice, sipName_setDotsPerMeterX, doc_QOpenGLPaintDevice_setDotsPerMeterX);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLPaintDevice_setDotsPerMeterY, "setDotsPerMeterY(self, float)");

extern "C" {static PyObject *meth_QOpenGLPaintDevice_setDotsPerMeterY(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLPaintDevice_setDotsPerMeterY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QOpenGLPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QOpenGLPaintDevice, &sipCpp, &a0))
        {
            sipCpp->setDotsPerMeterY(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLPaintDevice, sipName_setDotsPerMeterY, doc_QOpenGLPaintDevice_setDotsPerMeterY);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLPaintDevice_setPaintFlipped, "setPaintFlipped(self, bool)");

extern "C" {static PyObject *meth_QOpenGLPaintDevice_setPaintFlipped(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLPaintDevice_setPaintFlipped(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QOpenGLPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QOpenGLPaintDevice, &sipCpp, &a0))
        {
            sipCpp->setPaintFlipped(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLPaintDevice, sipName_setPaintFlipped, doc_QOpenGLPaintDevice_setPaintFlipped);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLPaintDevice_paintFlipped, "paintFlipped(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLPaintDevice_paintFlipped(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLPaintDevice_paintFlipped(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLPaintDevice, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->paintFlipped();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLPaintDevice, sipName_paintFlipped, doc_QOpenGLPaintDevice_paintFlipped);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLPaintDevice_ensureActiveTarget, "ensureActiveTarget(self)");

extern "C" {static PyObject *meth_QOpenGLPaintDevice_ensureActiveTarget(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLPaintDevice_ensureActiveTarget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QOpenGLPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLPaintDevice, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QOpenGLPaintDevice::ensureActiveTarget() : sipCpp->ensureActiveTarget());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLPaintDevice, sipName_ensureActiveTarget, doc_QOpenGLPaintDevice_ensureActiveTarget);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLPaintDevice_setDevicePixelRatio, "setDevicePixelRatio(self, float)");

extern "C" {static PyObject *meth_QOpenGLPaintDevice_setDevicePixelRatio(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLPaintDevice_setDevicePixelRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QOpenGLPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QOpenGLPaintDevice, &sipCpp, &a0))
        {
            sipCpp->setDevicePixelRatio(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLPaintDevice, sipName_setDevicePixelRatio, doc_QOpenGLPaintDevice_setDevicePixelRatio);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLPaintDevice_metric, "metric(self, QPaintDevice.PaintDeviceMetric) -> int");

extern "C" {static PyObject *meth_QOpenGLPaintDevice_metric(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLPaintDevice_metric(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintDevice::PaintDeviceMetric a0;
        const  ::QOpenGLPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QOpenGLPaintDevice, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QOpenGLPaintDevice::metric(a0) : sipCpp->metric(a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLPaintDevice, sipName_metric, doc_QOpenGLPaintDevice_metric);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QOpenGLPaintDevice(void *, const sipTypeDef *);}
static void *cast_QOpenGLPaintDevice(void *sipCppV, const sipTypeDef *targetType)
{
     ::QOpenGLPaintDevice *sipCpp = reinterpret_cast< ::QOpenGLPaintDevice *>(sipCppV);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QOpenGLPaintDevice(void *, int);}
static void release_QOpenGLPaintDevice(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQOpenGLPaintDevice *>(sipCppV);
    else
        delete reinterpret_cast< ::QOpenGLPaintDevice *>(sipCppV);
}


extern "C" {static void dealloc_QOpenGLPaintDevice(sipSimpleWrapper *);}
static void dealloc_QOpenGLPaintDevice(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQOpenGLPaintDevice *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QOpenGLPaintDevice(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QOpenGLPaintDevice(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOpenGLPaintDevice(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQOpenGLPaintDevice *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQOpenGLPaintDevice();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QSize* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QSize, &a0))
        {
            sipCpp = new sipQOpenGLPaintDevice(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        int a0;
        int a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "ii", &a0, &a1))
        {
            sipCpp = new sipQOpenGLPaintDevice(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QOpenGLPaintDevice[] = {{191, 255, 1}};


static PyMethodDef methods_QOpenGLPaintDevice[] = {
    {SIP_MLNAME_CAST(sipName_context), meth_QOpenGLPaintDevice_context, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLPaintDevice_context)},
    {SIP_MLNAME_CAST(sipName_dotsPerMeterX), meth_QOpenGLPaintDevice_dotsPerMeterX, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLPaintDevice_dotsPerMeterX)},
    {SIP_MLNAME_CAST(sipName_dotsPerMeterY), meth_QOpenGLPaintDevice_dotsPerMeterY, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLPaintDevice_dotsPerMeterY)},
    {SIP_MLNAME_CAST(sipName_ensureActiveTarget), meth_QOpenGLPaintDevice_ensureActiveTarget, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLPaintDevice_ensureActiveTarget)},
    {SIP_MLNAME_CAST(sipName_metric), meth_QOpenGLPaintDevice_metric, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLPaintDevice_metric)},
    {SIP_MLNAME_CAST(sipName_paintEngine), meth_QOpenGLPaintDevice_paintEngine, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLPaintDevice_paintEngine)},
    {SIP_MLNAME_CAST(sipName_paintFlipped), meth_QOpenGLPaintDevice_paintFlipped, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLPaintDevice_paintFlipped)},
    {SIP_MLNAME_CAST(sipName_setDevicePixelRatio), meth_QOpenGLPaintDevice_setDevicePixelRatio, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLPaintDevice_setDevicePixelRatio)},
    {SIP_MLNAME_CAST(sipName_setDotsPerMeterX), meth_QOpenGLPaintDevice_setDotsPerMeterX, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLPaintDevice_setDotsPerMeterX)},
    {SIP_MLNAME_CAST(sipName_setDotsPerMeterY), meth_QOpenGLPaintDevice_setDotsPerMeterY, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLPaintDevice_setDotsPerMeterY)},
    {SIP_MLNAME_CAST(sipName_setPaintFlipped), meth_QOpenGLPaintDevice_setPaintFlipped, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLPaintDevice_setPaintFlipped)},
    {SIP_MLNAME_CAST(sipName_setSize), meth_QOpenGLPaintDevice_setSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLPaintDevice_setSize)},
    {SIP_MLNAME_CAST(sipName_size), meth_QOpenGLPaintDevice_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLPaintDevice_size)}
};

PyDoc_STRVAR(doc_QOpenGLPaintDevice, "\1QOpenGLPaintDevice()\n"
"QOpenGLPaintDevice(QSize)\n"
"QOpenGLPaintDevice(int, int)");


static pyqt5ClassPluginDef plugin_QOpenGLPaintDevice = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QOpenGLPaintDevice = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QOpenGLPaintDevice,
        {SIP_NULLPTR},
        &plugin_QOpenGLPaintDevice
    },
    {
        sipNameNr_QOpenGLPaintDevice,
        {0, 0, 1},
        13, methods_QOpenGLPaintDevice,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QOpenGLPaintDevice,
    -1,
    -1,
    supers_QOpenGLPaintDevice,
    SIP_NULLPTR,
    init_type_QOpenGLPaintDevice,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QOpenGLPaintDevice,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QOpenGLPaintDevice,
    cast_QOpenGLPaintDevice,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 124 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglframebufferobject.sip"
#include <qopenglframebufferobject.h>
#line 20633 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglframebufferobject.sip"
#include <qopenglframebufferobject.h>
#line 20637 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QOpenGLFramebufferObjectFormat_setSamples, "setSamples(self, int)");

extern "C" {static PyObject *meth_QOpenGLFramebufferObjectFormat_setSamples(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObjectFormat_setSamples(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QOpenGLFramebufferObjectFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLFramebufferObjectFormat, &sipCpp, &a0))
        {
            sipCpp->setSamples(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObjectFormat, sipName_setSamples, doc_QOpenGLFramebufferObjectFormat_setSamples);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObjectFormat_samples, "samples(self) -> int");

extern "C" {static PyObject *meth_QOpenGLFramebufferObjectFormat_samples(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObjectFormat_samples(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLFramebufferObjectFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFramebufferObjectFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->samples();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObjectFormat, sipName_samples, doc_QOpenGLFramebufferObjectFormat_samples);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObjectFormat_setMipmap, "setMipmap(self, bool)");

extern "C" {static PyObject *meth_QOpenGLFramebufferObjectFormat_setMipmap(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObjectFormat_setMipmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QOpenGLFramebufferObjectFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QOpenGLFramebufferObjectFormat, &sipCpp, &a0))
        {
            sipCpp->setMipmap(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObjectFormat, sipName_setMipmap, doc_QOpenGLFramebufferObjectFormat_setMipmap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObjectFormat_mipmap, "mipmap(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLFramebufferObjectFormat_mipmap(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObjectFormat_mipmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLFramebufferObjectFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFramebufferObjectFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->mipmap();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObjectFormat, sipName_mipmap, doc_QOpenGLFramebufferObjectFormat_mipmap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObjectFormat_setAttachment, "setAttachment(self, QOpenGLFramebufferObject.Attachment)");

extern "C" {static PyObject *meth_QOpenGLFramebufferObjectFormat_setAttachment(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObjectFormat_setAttachment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLFramebufferObject::Attachment a0;
         ::QOpenGLFramebufferObjectFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QOpenGLFramebufferObjectFormat, &sipCpp, sipType_QOpenGLFramebufferObject_Attachment, &a0))
        {
            sipCpp->setAttachment(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObjectFormat, sipName_setAttachment, doc_QOpenGLFramebufferObjectFormat_setAttachment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObjectFormat_attachment, "attachment(self) -> QOpenGLFramebufferObject.Attachment");

extern "C" {static PyObject *meth_QOpenGLFramebufferObjectFormat_attachment(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObjectFormat_attachment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLFramebufferObjectFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFramebufferObjectFormat, &sipCpp))
        {
             ::QOpenGLFramebufferObject::Attachment sipRes;

            sipRes = sipCpp->attachment();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QOpenGLFramebufferObject_Attachment);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObjectFormat, sipName_attachment, doc_QOpenGLFramebufferObjectFormat_attachment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObjectFormat_setTextureTarget, "setTextureTarget(self, int)");

extern "C" {static PyObject *meth_QOpenGLFramebufferObjectFormat_setTextureTarget(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObjectFormat_setTextureTarget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::GLenum a0;
         ::QOpenGLFramebufferObjectFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFramebufferObjectFormat, &sipCpp, &a0))
        {
            sipCpp->setTextureTarget(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObjectFormat, sipName_setTextureTarget, doc_QOpenGLFramebufferObjectFormat_setTextureTarget);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObjectFormat_textureTarget, "textureTarget(self) -> int");

extern "C" {static PyObject *meth_QOpenGLFramebufferObjectFormat_textureTarget(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObjectFormat_textureTarget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLFramebufferObjectFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFramebufferObjectFormat, &sipCpp))
        {
             ::GLenum sipRes;

            sipRes = sipCpp->textureTarget();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObjectFormat, sipName_textureTarget, doc_QOpenGLFramebufferObjectFormat_textureTarget);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObjectFormat_setInternalTextureFormat, "setInternalTextureFormat(self, int)");

extern "C" {static PyObject *meth_QOpenGLFramebufferObjectFormat_setInternalTextureFormat(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObjectFormat_setInternalTextureFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::GLenum a0;
         ::QOpenGLFramebufferObjectFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFramebufferObjectFormat, &sipCpp, &a0))
        {
            sipCpp->setInternalTextureFormat(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObjectFormat, sipName_setInternalTextureFormat, doc_QOpenGLFramebufferObjectFormat_setInternalTextureFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObjectFormat_internalTextureFormat, "internalTextureFormat(self) -> int");

extern "C" {static PyObject *meth_QOpenGLFramebufferObjectFormat_internalTextureFormat(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObjectFormat_internalTextureFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLFramebufferObjectFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFramebufferObjectFormat, &sipCpp))
        {
             ::GLenum sipRes;

            sipRes = sipCpp->internalTextureFormat();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObjectFormat, sipName_internalTextureFormat, doc_QOpenGLFramebufferObjectFormat_internalTextureFormat);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QOpenGLFramebufferObjectFormat___ne__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLFramebufferObjectFormat___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QOpenGLFramebufferObjectFormat *sipCpp = reinterpret_cast< ::QOpenGLFramebufferObjectFormat *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLFramebufferObjectFormat));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLFramebufferObjectFormat* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QOpenGLFramebufferObjectFormat, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QOpenGLFramebufferObjectFormat::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QOpenGLFramebufferObjectFormat, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QOpenGLFramebufferObjectFormat___eq__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLFramebufferObjectFormat___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QOpenGLFramebufferObjectFormat *sipCpp = reinterpret_cast< ::QOpenGLFramebufferObjectFormat *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLFramebufferObjectFormat));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLFramebufferObjectFormat* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QOpenGLFramebufferObjectFormat, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QOpenGLFramebufferObjectFormat::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QOpenGLFramebufferObjectFormat, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QOpenGLFramebufferObjectFormat(void *, int);}
static void release_QOpenGLFramebufferObjectFormat(void *sipCppV, int)
{
    delete reinterpret_cast< ::QOpenGLFramebufferObjectFormat *>(sipCppV);
}


extern "C" {static void assign_QOpenGLFramebufferObjectFormat(void *, SIP_SSIZE_T, void *);}
static void assign_QOpenGLFramebufferObjectFormat(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QOpenGLFramebufferObjectFormat *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QOpenGLFramebufferObjectFormat *>(sipSrc);
}


extern "C" {static void *array_QOpenGLFramebufferObjectFormat(SIP_SSIZE_T);}
static void *array_QOpenGLFramebufferObjectFormat(SIP_SSIZE_T sipNrElem)
{
    return new  ::QOpenGLFramebufferObjectFormat[sipNrElem];
}


extern "C" {static void *copy_QOpenGLFramebufferObjectFormat(const void *, SIP_SSIZE_T);}
static void *copy_QOpenGLFramebufferObjectFormat(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QOpenGLFramebufferObjectFormat(reinterpret_cast<const  ::QOpenGLFramebufferObjectFormat *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QOpenGLFramebufferObjectFormat(sipSimpleWrapper *);}
static void dealloc_QOpenGLFramebufferObjectFormat(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QOpenGLFramebufferObjectFormat(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QOpenGLFramebufferObjectFormat(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOpenGLFramebufferObjectFormat(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QOpenGLFramebufferObjectFormat *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QOpenGLFramebufferObjectFormat();

            return sipCpp;
        }
    }

    {
        const  ::QOpenGLFramebufferObjectFormat* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QOpenGLFramebufferObjectFormat, &a0))
        {
            sipCpp = new  ::QOpenGLFramebufferObjectFormat(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QOpenGLFramebufferObjectFormat[] = {
    {(void *)slot_QOpenGLFramebufferObjectFormat___ne__, ne_slot},
    {(void *)slot_QOpenGLFramebufferObjectFormat___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QOpenGLFramebufferObjectFormat[] = {
    {SIP_MLNAME_CAST(sipName_attachment), meth_QOpenGLFramebufferObjectFormat_attachment, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObjectFormat_attachment)},
    {SIP_MLNAME_CAST(sipName_internalTextureFormat), meth_QOpenGLFramebufferObjectFormat_internalTextureFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObjectFormat_internalTextureFormat)},
    {SIP_MLNAME_CAST(sipName_mipmap), meth_QOpenGLFramebufferObjectFormat_mipmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObjectFormat_mipmap)},
    {SIP_MLNAME_CAST(sipName_samples), meth_QOpenGLFramebufferObjectFormat_samples, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObjectFormat_samples)},
    {SIP_MLNAME_CAST(sipName_setAttachment), meth_QOpenGLFramebufferObjectFormat_setAttachment, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObjectFormat_setAttachment)},
    {SIP_MLNAME_CAST(sipName_setInternalTextureFormat), meth_QOpenGLFramebufferObjectFormat_setInternalTextureFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObjectFormat_setInternalTextureFormat)},
    {SIP_MLNAME_CAST(sipName_setMipmap), meth_QOpenGLFramebufferObjectFormat_setMipmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObjectFormat_setMipmap)},
    {SIP_MLNAME_CAST(sipName_setSamples), meth_QOpenGLFramebufferObjectFormat_setSamples, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObjectFormat_setSamples)},
    {SIP_MLNAME_CAST(sipName_setTextureTarget), meth_QOpenGLFramebufferObjectFormat_setTextureTarget, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObjectFormat_setTextureTarget)},
    {SIP_MLNAME_CAST(sipName_textureTarget), meth_QOpenGLFramebufferObjectFormat_textureTarget, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObjectFormat_textureTarget)}
};

PyDoc_STRVAR(doc_QOpenGLFramebufferObjectFormat, "\1QOpenGLFramebufferObjectFormat()\n"
"QOpenGLFramebufferObjectFormat(QOpenGLFramebufferObjectFormat)");


static pyqt5ClassPluginDef plugin_QOpenGLFramebufferObjectFormat = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QOpenGLFramebufferObjectFormat = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QOpenGLFramebufferObjectFormat,
        {SIP_NULLPTR},
        &plugin_QOpenGLFramebufferObjectFormat
    },
    {
        sipNameNr_QOpenGLFramebufferObjectFormat,
        {0, 0, 1},
        10, methods_QOpenGLFramebufferObjectFormat,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QOpenGLFramebufferObjectFormat,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QOpenGLFramebufferObjectFormat,
    init_type_QOpenGLFramebufferObjectFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QOpenGLFramebufferObjectFormat,
    assign_QOpenGLFramebufferObjectFormat,
    array_QOpenGLFramebufferObjectFormat,
    copy_QOpenGLFramebufferObjectFormat,
    release_QOpenGLFramebufferObjectFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglframebufferobject.sip"
#include <qopenglframebufferobject.h>
#line 21138 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 21142 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 124 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglframebufferobject.sip"
#include <qopenglframebufferobject.h>
#line 21145 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 21148 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 21151 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qimage.sip"
#include <qimage.h>
#line 21154 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpygui_qvector.sip"
#include <qvector.h>
#line 21157 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 32 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglframebufferobject.sip"
// The defaults are different for desktop OpenGL and OpenGL/ES so pretend the
// latter is the former.
#if defined(QT_OPENGL_ES)
#undef  GL_RGBA8
#define GL_RGBA8        GL_RGBA
#endif
#line 21165 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQOpenGLFramebufferObject : public  ::QOpenGLFramebufferObject
{
public:
    sipQOpenGLFramebufferObject(const  ::QSize&, ::GLenum);
    sipQOpenGLFramebufferObject(int,int, ::GLenum);
    sipQOpenGLFramebufferObject(const  ::QSize&, ::QOpenGLFramebufferObject::Attachment, ::GLenum, ::GLenum);
    sipQOpenGLFramebufferObject(int,int, ::QOpenGLFramebufferObject::Attachment, ::GLenum, ::GLenum);
    sipQOpenGLFramebufferObject(const  ::QSize&,const  ::QOpenGLFramebufferObjectFormat&);
    sipQOpenGLFramebufferObject(int,int,const  ::QOpenGLFramebufferObjectFormat&);
    ~sipQOpenGLFramebufferObject();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQOpenGLFramebufferObject(const sipQOpenGLFramebufferObject &);
    sipQOpenGLFramebufferObject &operator = (const sipQOpenGLFramebufferObject &);
};

sipQOpenGLFramebufferObject::sipQOpenGLFramebufferObject(const  ::QSize& a0, ::GLenum a1):  ::QOpenGLFramebufferObject(a0,a1), sipPySelf(SIP_NULLPTR)
{
}

sipQOpenGLFramebufferObject::sipQOpenGLFramebufferObject(int a0,int a1, ::GLenum a2):  ::QOpenGLFramebufferObject(a0,a1,a2), sipPySelf(SIP_NULLPTR)
{
}

sipQOpenGLFramebufferObject::sipQOpenGLFramebufferObject(const  ::QSize& a0, ::QOpenGLFramebufferObject::Attachment a1, ::GLenum a2, ::GLenum a3):  ::QOpenGLFramebufferObject(a0,a1,a2,a3), sipPySelf(SIP_NULLPTR)
{
}

sipQOpenGLFramebufferObject::sipQOpenGLFramebufferObject(int a0,int a1, ::QOpenGLFramebufferObject::Attachment a2, ::GLenum a3, ::GLenum a4):  ::QOpenGLFramebufferObject(a0,a1,a2,a3,a4), sipPySelf(SIP_NULLPTR)
{
}

sipQOpenGLFramebufferObject::sipQOpenGLFramebufferObject(const  ::QSize& a0,const  ::QOpenGLFramebufferObjectFormat& a1):  ::QOpenGLFramebufferObject(a0,a1), sipPySelf(SIP_NULLPTR)
{
}

sipQOpenGLFramebufferObject::sipQOpenGLFramebufferObject(int a0,int a1,const  ::QOpenGLFramebufferObjectFormat& a2):  ::QOpenGLFramebufferObject(a0,a1,a2), sipPySelf(SIP_NULLPTR)
{
}

sipQOpenGLFramebufferObject::~sipQOpenGLFramebufferObject()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObject_format, "format(self) -> QOpenGLFramebufferObjectFormat");

extern "C" {static PyObject *meth_QOpenGLFramebufferObject_format(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObject_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLFramebufferObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFramebufferObject, &sipCpp))
        {
             ::QOpenGLFramebufferObjectFormat*sipRes;

            sipRes = new  ::QOpenGLFramebufferObjectFormat(sipCpp->format());

            return sipConvertFromNewType(sipRes,sipType_QOpenGLFramebufferObjectFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObject, sipName_format, doc_QOpenGLFramebufferObject_format);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObject_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLFramebufferObject_isValid(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObject_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLFramebufferObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFramebufferObject, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObject, sipName_isValid, doc_QOpenGLFramebufferObject_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObject_isBound, "isBound(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLFramebufferObject_isBound(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObject_isBound(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLFramebufferObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFramebufferObject, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isBound();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObject, sipName_isBound, doc_QOpenGLFramebufferObject_isBound);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObject_bind, "bind(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLFramebufferObject_bind(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObject_bind(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLFramebufferObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFramebufferObject, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->bind();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObject, sipName_bind, doc_QOpenGLFramebufferObject_bind);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObject_release, "release(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLFramebufferObject_release(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObject_release(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLFramebufferObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFramebufferObject, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->release();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObject, sipName_release, doc_QOpenGLFramebufferObject_release);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObject_width, "width(self) -> int");

extern "C" {static PyObject *meth_QOpenGLFramebufferObject_width(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObject_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLFramebufferObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFramebufferObject, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->width();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObject, sipName_width, doc_QOpenGLFramebufferObject_width);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObject_height, "height(self) -> int");

extern "C" {static PyObject *meth_QOpenGLFramebufferObject_height(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObject_height(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLFramebufferObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFramebufferObject, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->height();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObject, sipName_height, doc_QOpenGLFramebufferObject_height);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObject_texture, "texture(self) -> int");

extern "C" {static PyObject *meth_QOpenGLFramebufferObject_texture(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObject_texture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLFramebufferObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFramebufferObject, &sipCpp))
        {
             ::GLuint sipRes;

            sipRes = sipCpp->texture();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObject, sipName_texture, doc_QOpenGLFramebufferObject_texture);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObject_textures, "textures(self) -> List[int]");

extern "C" {static PyObject *meth_QOpenGLFramebufferObject_textures(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObject_textures(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLFramebufferObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFramebufferObject, &sipCpp))
        {
             ::QVector<uint>*sipRes;

            sipRes = new  ::QVector<uint>(sipCpp->textures());

            return sipConvertFromNewType(sipRes,sipType_QVector_1900,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObject, sipName_textures, doc_QOpenGLFramebufferObject_textures);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObject_size, "size(self) -> QSize");

extern "C" {static PyObject *meth_QOpenGLFramebufferObject_size(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObject_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLFramebufferObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFramebufferObject, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->size());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObject, sipName_size, doc_QOpenGLFramebufferObject_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObject_toImage, "toImage(self) -> QImage\n"
"toImage(self, bool) -> QImage\n"
"toImage(self, bool, int) -> QImage");

extern "C" {static PyObject *meth_QOpenGLFramebufferObject_toImage(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObject_toImage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLFramebufferObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFramebufferObject, &sipCpp))
        {
             ::QImage*sipRes;

            sipRes = new  ::QImage(sipCpp->toImage());

            return sipConvertFromNewType(sipRes,sipType_QImage,SIP_NULLPTR);
        }
    }

    {
        bool a0;
        const  ::QOpenGLFramebufferObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QOpenGLFramebufferObject, &sipCpp, &a0))
        {
             ::QImage*sipRes;

            sipRes = new  ::QImage(sipCpp->toImage(a0));

            return sipConvertFromNewType(sipRes,sipType_QImage,SIP_NULLPTR);
        }
    }

    {
        bool a0;
        int a1;
        const  ::QOpenGLFramebufferObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bbi", &sipSelf, sipType_QOpenGLFramebufferObject, &sipCpp, &a0, &a1))
        {
             ::QImage*sipRes;

            sipRes = new  ::QImage(sipCpp->toImage(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QImage,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObject, sipName_toImage, doc_QOpenGLFramebufferObject_toImage);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObject_attachment, "attachment(self) -> QOpenGLFramebufferObject.Attachment");

extern "C" {static PyObject *meth_QOpenGLFramebufferObject_attachment(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObject_attachment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLFramebufferObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFramebufferObject, &sipCpp))
        {
             ::QOpenGLFramebufferObject::Attachment sipRes;

            sipRes = sipCpp->attachment();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QOpenGLFramebufferObject_Attachment);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObject, sipName_attachment, doc_QOpenGLFramebufferObject_attachment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObject_setAttachment, "setAttachment(self, QOpenGLFramebufferObject.Attachment)");

extern "C" {static PyObject *meth_QOpenGLFramebufferObject_setAttachment(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObject_setAttachment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLFramebufferObject::Attachment a0;
         ::QOpenGLFramebufferObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QOpenGLFramebufferObject, &sipCpp, sipType_QOpenGLFramebufferObject_Attachment, &a0))
        {
            sipCpp->setAttachment(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObject, sipName_setAttachment, doc_QOpenGLFramebufferObject_setAttachment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObject_handle, "handle(self) -> int");

extern "C" {static PyObject *meth_QOpenGLFramebufferObject_handle(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObject_handle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLFramebufferObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFramebufferObject, &sipCpp))
        {
             ::GLuint sipRes;

            sipRes = sipCpp->handle();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObject, sipName_handle, doc_QOpenGLFramebufferObject_handle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObject_bindDefault, "bindDefault() -> bool");

extern "C" {static PyObject *meth_QOpenGLFramebufferObject_bindDefault(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObject_bindDefault(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes =  ::QOpenGLFramebufferObject::bindDefault();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObject, sipName_bindDefault, doc_QOpenGLFramebufferObject_bindDefault);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObject_hasOpenGLFramebufferObjects, "hasOpenGLFramebufferObjects() -> bool");

extern "C" {static PyObject *meth_QOpenGLFramebufferObject_hasOpenGLFramebufferObjects(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObject_hasOpenGLFramebufferObjects(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes =  ::QOpenGLFramebufferObject::hasOpenGLFramebufferObjects();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObject, sipName_hasOpenGLFramebufferObjects, doc_QOpenGLFramebufferObject_hasOpenGLFramebufferObjects);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObject_hasOpenGLFramebufferBlit, "hasOpenGLFramebufferBlit() -> bool");

extern "C" {static PyObject *meth_QOpenGLFramebufferObject_hasOpenGLFramebufferBlit(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObject_hasOpenGLFramebufferBlit(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes =  ::QOpenGLFramebufferObject::hasOpenGLFramebufferBlit();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObject, sipName_hasOpenGLFramebufferBlit, doc_QOpenGLFramebufferObject_hasOpenGLFramebufferBlit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObject_blitFramebuffer, "blitFramebuffer(QOpenGLFramebufferObject, QRect, QOpenGLFramebufferObject, QRect, buffers: int = GL_COLOR_BUFFER_BIT, filter: int = GL_NEAREST)\n"
"blitFramebuffer(QOpenGLFramebufferObject, QOpenGLFramebufferObject, buffers: int = GL_COLOR_BUFFER_BIT, filter: int = GL_NEAREST)\n"
"blitFramebuffer(QOpenGLFramebufferObject, QRect, QOpenGLFramebufferObject, QRect, int, int, int, int)\n"
"blitFramebuffer(QOpenGLFramebufferObject, QRect, QOpenGLFramebufferObject, QRect, int, int, int, int, QOpenGLFramebufferObject.FramebufferRestorePolicy)");

extern "C" {static PyObject *meth_QOpenGLFramebufferObject_blitFramebuffer(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObject_blitFramebuffer(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLFramebufferObject* a0;
        const  ::QRect* a1;
         ::QOpenGLFramebufferObject* a2;
        const  ::QRect* a3;
         ::GLbitfield a4 = GL_COLOR_BUFFER_BIT;
         ::GLenum a5 = GL_NEAREST;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_buffers,
            sipName_filter,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8J9J8J9|uu", sipType_QOpenGLFramebufferObject, &a0, sipType_QRect, &a1, sipType_QOpenGLFramebufferObject, &a2, sipType_QRect, &a3, &a4, &a5))
        {
             ::QOpenGLFramebufferObject::blitFramebuffer(a0,*a1,a2,*a3,a4,a5);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QOpenGLFramebufferObject* a0;
         ::QOpenGLFramebufferObject* a1;
         ::GLbitfield a2 = GL_COLOR_BUFFER_BIT;
         ::GLenum a3 = GL_NEAREST;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_buffers,
            sipName_filter,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8J8|uu", sipType_QOpenGLFramebufferObject, &a0, sipType_QOpenGLFramebufferObject, &a1, &a2, &a3))
        {
             ::QOpenGLFramebufferObject::blitFramebuffer(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QOpenGLFramebufferObject* a0;
        const  ::QRect* a1;
         ::QOpenGLFramebufferObject* a2;
        const  ::QRect* a3;
         ::GLbitfield a4;
         ::GLenum a5;
        int a6;
        int a7;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "J8J9J8J9uuii", sipType_QOpenGLFramebufferObject, &a0, sipType_QRect, &a1, sipType_QOpenGLFramebufferObject, &a2, sipType_QRect, &a3, &a4, &a5, &a6, &a7))
        {
             ::QOpenGLFramebufferObject::blitFramebuffer(a0,*a1,a2,*a3,a4,a5,a6,a7);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QOpenGLFramebufferObject* a0;
        const  ::QRect* a1;
         ::QOpenGLFramebufferObject* a2;
        const  ::QRect* a3;
         ::GLbitfield a4;
         ::GLenum a5;
        int a6;
        int a7;
         ::QOpenGLFramebufferObject::FramebufferRestorePolicy a8;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "J8J9J8J9uuiiE", sipType_QOpenGLFramebufferObject, &a0, sipType_QRect, &a1, sipType_QOpenGLFramebufferObject, &a2, sipType_QRect, &a3, &a4, &a5, &a6, &a7, sipType_QOpenGLFramebufferObject_FramebufferRestorePolicy, &a8))
        {
             ::QOpenGLFramebufferObject::blitFramebuffer(a0,*a1,a2,*a3,a4,a5,a6,a7,a8);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObject, sipName_blitFramebuffer, doc_QOpenGLFramebufferObject_blitFramebuffer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObject_takeTexture, "takeTexture(self) -> int\n"
"takeTexture(self, int) -> int");

extern "C" {static PyObject *meth_QOpenGLFramebufferObject_takeTexture(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObject_takeTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLFramebufferObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFramebufferObject, &sipCpp))
        {
             ::GLuint sipRes;

            sipRes = sipCpp->takeTexture();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    {
        int a0;
         ::QOpenGLFramebufferObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLFramebufferObject, &sipCpp, &a0))
        {
             ::GLuint sipRes;

            sipRes = sipCpp->takeTexture(a0);

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObject, sipName_takeTexture, doc_QOpenGLFramebufferObject_takeTexture);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObject_addColorAttachment, "addColorAttachment(self, QSize, internal_format: int = 0)\n"
"addColorAttachment(self, int, int, internal_format: int = 0)");

extern "C" {static PyObject *meth_QOpenGLFramebufferObject_addColorAttachment(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObject_addColorAttachment(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
         ::GLenum a1 = 0;
         ::QOpenGLFramebufferObject *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_internal_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|u", &sipSelf, sipType_QOpenGLFramebufferObject, &sipCpp, sipType_QSize, &a0, &a1))
        {
            sipCpp->addColorAttachment(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
         ::GLenum a2 = 0;
         ::QOpenGLFramebufferObject *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_internal_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|u", &sipSelf, sipType_QOpenGLFramebufferObject, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->addColorAttachment(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObject, sipName_addColorAttachment, doc_QOpenGLFramebufferObject_addColorAttachment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObject_sizes, "sizes(self) -> List[QSize]");

extern "C" {static PyObject *meth_QOpenGLFramebufferObject_sizes(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObject_sizes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLFramebufferObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFramebufferObject, &sipCpp))
        {
            QVector< ::QSize>*sipRes;

            sipRes = new QVector< ::QSize>(sipCpp->sizes());

            return sipConvertFromNewType(sipRes,sipType_QVector_0100QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObject, sipName_sizes, doc_QOpenGLFramebufferObject_sizes);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QOpenGLFramebufferObject(void *, int);}
static void release_QOpenGLFramebufferObject(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQOpenGLFramebufferObject *>(sipCppV);
    else
        delete reinterpret_cast< ::QOpenGLFramebufferObject *>(sipCppV);
}


extern "C" {static void dealloc_QOpenGLFramebufferObject(sipSimpleWrapper *);}
static void dealloc_QOpenGLFramebufferObject(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQOpenGLFramebufferObject *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QOpenGLFramebufferObject(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QOpenGLFramebufferObject(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOpenGLFramebufferObject(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQOpenGLFramebufferObject *sipCpp = SIP_NULLPTR;

    {
        const  ::QSize* a0;
         ::GLenum a1 = GL_TEXTURE_2D;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_target,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|u", sipType_QSize, &a0, &a1))
        {
            sipCpp = new sipQOpenGLFramebufferObject(*a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        int a0;
        int a1;
         ::GLenum a2 = GL_TEXTURE_2D;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_target,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "ii|u", &a0, &a1, &a2))
        {
            sipCpp = new sipQOpenGLFramebufferObject(a0,a1,a2);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QSize* a0;
         ::QOpenGLFramebufferObject::Attachment a1;
         ::GLenum a2 = GL_TEXTURE_2D;
         ::GLenum a3 = GL_RGBA8;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_target,
            sipName_internal_format,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9E|uu", sipType_QSize, &a0, sipType_QOpenGLFramebufferObject_Attachment, &a1, &a2, &a3))
        {
            sipCpp = new sipQOpenGLFramebufferObject(*a0,a1,a2,a3);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        int a0;
        int a1;
         ::QOpenGLFramebufferObject::Attachment a2;
         ::GLenum a3 = GL_TEXTURE_2D;
         ::GLenum a4 = GL_RGBA8;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_target,
            sipName_internal_format,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "iiE|uu", &a0, &a1, sipType_QOpenGLFramebufferObject_Attachment, &a2, &a3, &a4))
        {
            sipCpp = new sipQOpenGLFramebufferObject(a0,a1,a2,a3,a4);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QSize* a0;
        const  ::QOpenGLFramebufferObjectFormat* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9J9", sipType_QSize, &a0, sipType_QOpenGLFramebufferObjectFormat, &a1))
        {
            sipCpp = new sipQOpenGLFramebufferObject(*a0,*a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        int a0;
        int a1;
        const  ::QOpenGLFramebufferObjectFormat* a2;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "iiJ9", &a0, &a1, sipType_QOpenGLFramebufferObjectFormat, &a2))
        {
            sipCpp = new sipQOpenGLFramebufferObject(a0,a1,*a2);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QOpenGLFramebufferObject[] = {
    {SIP_MLNAME_CAST(sipName_addColorAttachment), SIP_MLMETH_CAST(meth_QOpenGLFramebufferObject_addColorAttachment), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObject_addColorAttachment)},
    {SIP_MLNAME_CAST(sipName_attachment), meth_QOpenGLFramebufferObject_attachment, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObject_attachment)},
    {SIP_MLNAME_CAST(sipName_bind), meth_QOpenGLFramebufferObject_bind, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObject_bind)},
    {SIP_MLNAME_CAST(sipName_bindDefault), meth_QOpenGLFramebufferObject_bindDefault, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObject_bindDefault)},
    {SIP_MLNAME_CAST(sipName_blitFramebuffer), SIP_MLMETH_CAST(meth_QOpenGLFramebufferObject_blitFramebuffer), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObject_blitFramebuffer)},
    {SIP_MLNAME_CAST(sipName_format), meth_QOpenGLFramebufferObject_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObject_format)},
    {SIP_MLNAME_CAST(sipName_handle), meth_QOpenGLFramebufferObject_handle, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObject_handle)},
    {SIP_MLNAME_CAST(sipName_hasOpenGLFramebufferBlit), meth_QOpenGLFramebufferObject_hasOpenGLFramebufferBlit, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObject_hasOpenGLFramebufferBlit)},
    {SIP_MLNAME_CAST(sipName_hasOpenGLFramebufferObjects), meth_QOpenGLFramebufferObject_hasOpenGLFramebufferObjects, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObject_hasOpenGLFramebufferObjects)},
    {SIP_MLNAME_CAST(sipName_height), meth_QOpenGLFramebufferObject_height, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObject_height)},
    {SIP_MLNAME_CAST(sipName_isBound), meth_QOpenGLFramebufferObject_isBound, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObject_isBound)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QOpenGLFramebufferObject_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObject_isValid)},
    {SIP_MLNAME_CAST(sipName_release), meth_QOpenGLFramebufferObject_release, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObject_release)},
    {SIP_MLNAME_CAST(sipName_setAttachment), meth_QOpenGLFramebufferObject_setAttachment, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObject_setAttachment)},
    {SIP_MLNAME_CAST(sipName_size), meth_QOpenGLFramebufferObject_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObject_size)},
    {SIP_MLNAME_CAST(sipName_sizes), meth_QOpenGLFramebufferObject_sizes, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObject_sizes)},
    {SIP_MLNAME_CAST(sipName_takeTexture), meth_QOpenGLFramebufferObject_takeTexture, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObject_takeTexture)},
    {SIP_MLNAME_CAST(sipName_texture), meth_QOpenGLFramebufferObject_texture, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObject_texture)},
    {SIP_MLNAME_CAST(sipName_textures), meth_QOpenGLFramebufferObject_textures, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObject_textures)},
    {SIP_MLNAME_CAST(sipName_toImage), meth_QOpenGLFramebufferObject_toImage, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObject_toImage)},
    {SIP_MLNAME_CAST(sipName_width), meth_QOpenGLFramebufferObject_width, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObject_width)}
};

static sipEnumMemberDef enummembers_QOpenGLFramebufferObject[] = {
    {sipName_CombinedDepthStencil, static_cast<int>( ::QOpenGLFramebufferObject::CombinedDepthStencil), 144},
    {sipName_Depth, static_cast<int>( ::QOpenGLFramebufferObject::Depth), 144},
    {sipName_DontRestoreFramebufferBinding, static_cast<int>( ::QOpenGLFramebufferObject::DontRestoreFramebufferBinding), 145},
    {sipName_NoAttachment, static_cast<int>( ::QOpenGLFramebufferObject::NoAttachment), 144},
    {sipName_RestoreFrameBufferBinding, static_cast<int>( ::QOpenGLFramebufferObject::RestoreFrameBufferBinding), 145},
    {sipName_RestoreFramebufferBindingToDefault, static_cast<int>( ::QOpenGLFramebufferObject::RestoreFramebufferBindingToDefault), 145},
};

PyDoc_STRVAR(doc_QOpenGLFramebufferObject, "\1QOpenGLFramebufferObject(QSize, target: int = GL_TEXTURE_2D)\n"
"QOpenGLFramebufferObject(int, int, target: int = GL_TEXTURE_2D)\n"
"QOpenGLFramebufferObject(QSize, QOpenGLFramebufferObject.Attachment, target: int = GL_TEXTURE_2D, internal_format: int = GL_RGBA8)\n"
"QOpenGLFramebufferObject(int, int, QOpenGLFramebufferObject.Attachment, target: int = GL_TEXTURE_2D, internal_format: int = GL_RGBA8)\n"
"QOpenGLFramebufferObject(QSize, QOpenGLFramebufferObjectFormat)\n"
"QOpenGLFramebufferObject(int, int, QOpenGLFramebufferObjectFormat)");


static pyqt5ClassPluginDef plugin_QOpenGLFramebufferObject = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QOpenGLFramebufferObject = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QOpenGLFramebufferObject,
        {SIP_NULLPTR},
        &plugin_QOpenGLFramebufferObject
    },
    {
        sipNameNr_QOpenGLFramebufferObject,
        {0, 0, 1},
        21, methods_QOpenGLFramebufferObject,
        6, enummembers_QOpenGLFramebufferObject,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QOpenGLFramebufferObject,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QOpenGLFramebufferObject,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QOpenGLFramebufferObject,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QOpenGLFramebufferObject,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 113 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopengldebug.sip"
#include <qopengldebug.h>
#line 22213 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 22217 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopengldebug.sip"
#include <qopengldebug.h>
#line 22220 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 22223 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopengldebug.sip"
#include <qopengldebug.h>
#line 22226 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopengldebug.sip"
#include <qopengldebug.h>
#line 22229 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopengldebug.sip"
#include <qopengldebug.h>
#line 22232 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpygui_qvector.sip"
#include <qvector.h>
#line 22235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 22238 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 22241 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 22244 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 22247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 22250 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 22253 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 22256 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 22259 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 22262 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 22265 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 22268 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 22271 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 22274 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 22277 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 22280 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQOpenGLDebugLogger : public  ::QOpenGLDebugLogger
{
public:
    sipQOpenGLDebugLogger( ::QObject*);
    virtual ~sipQOpenGLDebugLogger();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQOpenGLDebugLogger(const sipQOpenGLDebugLogger &);
    sipQOpenGLDebugLogger &operator = (const sipQOpenGLDebugLogger &);

    char sipPyMethods[7];
};

sipQOpenGLDebugLogger::sipQOpenGLDebugLogger( ::QObject*a0):  ::QOpenGLDebugLogger(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQOpenGLDebugLogger::~sipQOpenGLDebugLogger()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQOpenGLDebugLogger::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QOpenGLDebugLogger);

    return  ::QOpenGLDebugLogger::metaObject();
}

int sipQOpenGLDebugLogger::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QOpenGLDebugLogger::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QOpenGLDebugLogger,_c,_id,_a);

    return _id;
}

void *sipQOpenGLDebugLogger::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QOpenGLDebugLogger, _clname, &sipCpp) ? sipCpp :  ::QOpenGLDebugLogger::qt_metacast(_clname));
}

bool sipQOpenGLDebugLogger::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QOpenGLDebugLogger::event(a0);

    extern bool sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_5(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQOpenGLDebugLogger::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QOpenGLDebugLogger::eventFilter(a0,a1);

    extern bool sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_4(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQOpenGLDebugLogger::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QOpenGLDebugLogger::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_3(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLDebugLogger::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QOpenGLDebugLogger::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_2(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLDebugLogger::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QOpenGLDebugLogger::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_1(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLDebugLogger::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QOpenGLDebugLogger::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLDebugLogger::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QOpenGLDebugLogger::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QOpenGLDebugLogger_initialize, "initialize(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLDebugLogger_initialize(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLDebugLogger_initialize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLDebugLogger *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLDebugLogger, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->initialize();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLDebugLogger, sipName_initialize, doc_QOpenGLDebugLogger_initialize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLDebugLogger_isLogging, "isLogging(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLDebugLogger_isLogging(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLDebugLogger_isLogging(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLDebugLogger *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLDebugLogger, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isLogging();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLDebugLogger, sipName_isLogging, doc_QOpenGLDebugLogger_isLogging);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLDebugLogger_loggingMode, "loggingMode(self) -> QOpenGLDebugLogger.LoggingMode");

extern "C" {static PyObject *meth_QOpenGLDebugLogger_loggingMode(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLDebugLogger_loggingMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLDebugLogger *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLDebugLogger, &sipCpp))
        {
             ::QOpenGLDebugLogger::LoggingMode sipRes;

            sipRes = sipCpp->loggingMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QOpenGLDebugLogger_LoggingMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLDebugLogger, sipName_loggingMode, doc_QOpenGLDebugLogger_loggingMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLDebugLogger_maximumMessageLength, "maximumMessageLength(self) -> int");

extern "C" {static PyObject *meth_QOpenGLDebugLogger_maximumMessageLength(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLDebugLogger_maximumMessageLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLDebugLogger *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLDebugLogger, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->maximumMessageLength();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLDebugLogger, sipName_maximumMessageLength, doc_QOpenGLDebugLogger_maximumMessageLength);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLDebugLogger_pushGroup, "pushGroup(self, str, id: int = 0, source: QOpenGLDebugMessage.Source = QOpenGLDebugMessage.ApplicationSource)");

extern "C" {static PyObject *meth_QOpenGLDebugLogger_pushGroup(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLDebugLogger_pushGroup(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::GLuint a1 = 0;
         ::QOpenGLDebugMessage::Source a2 = QOpenGLDebugMessage::ApplicationSource;
         ::QOpenGLDebugLogger *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_id,
            sipName_source,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|uE", &sipSelf, sipType_QOpenGLDebugLogger, &sipCpp, sipType_QString,&a0, &a0State, &a1, sipType_QOpenGLDebugMessage_Source, &a2))
        {
            sipCpp->pushGroup(*a0,a1,a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLDebugLogger, sipName_pushGroup, doc_QOpenGLDebugLogger_pushGroup);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLDebugLogger_popGroup, "popGroup(self)");

extern "C" {static PyObject *meth_QOpenGLDebugLogger_popGroup(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLDebugLogger_popGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLDebugLogger *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLDebugLogger, &sipCpp))
        {
            sipCpp->popGroup();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLDebugLogger, sipName_popGroup, doc_QOpenGLDebugLogger_popGroup);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLDebugLogger_enableMessages, "enableMessages(self, sources: Union[QOpenGLDebugMessage.Sources, QOpenGLDebugMessage.Source] = QOpenGLDebugMessage.AnySource, types: Union[QOpenGLDebugMessage.Types, QOpenGLDebugMessage.Type] = QOpenGLDebugMessage.AnyType, severities: Union[QOpenGLDebugMessage.Severities, QOpenGLDebugMessage.Severity] = QOpenGLDebugMessage.AnySeverity)\n"
"enableMessages(self, Iterable[int], sources: Union[QOpenGLDebugMessage.Sources, QOpenGLDebugMessage.Source] = QOpenGLDebugMessage.AnySource, types: Union[QOpenGLDebugMessage.Types, QOpenGLDebugMessage.Type] = QOpenGLDebugMessage.AnyType)");

extern "C" {static PyObject *meth_QOpenGLDebugLogger_enableMessages(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLDebugLogger_enableMessages(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLDebugMessage::Sources a0def = QOpenGLDebugMessage::AnySource;
         ::QOpenGLDebugMessage::Sources* a0 = &a0def;
        int a0State = 0;
         ::QOpenGLDebugMessage::Types a1def = QOpenGLDebugMessage::AnyType;
         ::QOpenGLDebugMessage::Types* a1 = &a1def;
        int a1State = 0;
         ::QOpenGLDebugMessage::Severities a2def = QOpenGLDebugMessage::AnySeverity;
         ::QOpenGLDebugMessage::Severities* a2 = &a2def;
        int a2State = 0;
         ::QOpenGLDebugLogger *sipCpp;

        static const char *sipKwdList[] = {
            sipName_sources,
            sipName_types,
            sipName_severities,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1J1J1", &sipSelf, sipType_QOpenGLDebugLogger, &sipCpp, sipType_QOpenGLDebugMessage_Sources, &a0, &a0State, sipType_QOpenGLDebugMessage_Types, &a1, &a1State, sipType_QOpenGLDebugMessage_Severities, &a2, &a2State))
        {
            sipCpp->enableMessages(*a0,*a1,*a2);
            sipReleaseType(a0,sipType_QOpenGLDebugMessage_Sources,a0State);
            sipReleaseType(a1,sipType_QOpenGLDebugMessage_Types,a1State);
            sipReleaseType(a2,sipType_QOpenGLDebugMessage_Severities,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QVector<uint>* a0;
        int a0State = 0;
         ::QOpenGLDebugMessage::Sources a1def = QOpenGLDebugMessage::AnySource;
         ::QOpenGLDebugMessage::Sources* a1 = &a1def;
        int a1State = 0;
         ::QOpenGLDebugMessage::Types a2def = QOpenGLDebugMessage::AnyType;
         ::QOpenGLDebugMessage::Types* a2 = &a2def;
        int a2State = 0;
         ::QOpenGLDebugLogger *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_sources,
            sipName_types,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J1J1", &sipSelf, sipType_QOpenGLDebugLogger, &sipCpp, sipType_QVector_1900,&a0, &a0State, sipType_QOpenGLDebugMessage_Sources, &a1, &a1State, sipType_QOpenGLDebugMessage_Types, &a2, &a2State))
        {
            sipCpp->enableMessages(*a0,*a1,*a2);
            sipReleaseType(const_cast< ::QVector<uint> *>(a0),sipType_QVector_1900,a0State);
            sipReleaseType(a1,sipType_QOpenGLDebugMessage_Sources,a1State);
            sipReleaseType(a2,sipType_QOpenGLDebugMessage_Types,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLDebugLogger, sipName_enableMessages, doc_QOpenGLDebugLogger_enableMessages);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLDebugLogger_disableMessages, "disableMessages(self, sources: Union[QOpenGLDebugMessage.Sources, QOpenGLDebugMessage.Source] = QOpenGLDebugMessage.AnySource, types: Union[QOpenGLDebugMessage.Types, QOpenGLDebugMessage.Type] = QOpenGLDebugMessage.AnyType, severities: Union[QOpenGLDebugMessage.Severities, QOpenGLDebugMessage.Severity] = QOpenGLDebugMessage.AnySeverity)\n"
"disableMessages(self, Iterable[int], sources: Union[QOpenGLDebugMessage.Sources, QOpenGLDebugMessage.Source] = QOpenGLDebugMessage.AnySource, types: Union[QOpenGLDebugMessage.Types, QOpenGLDebugMessage.Type] = QOpenGLDebugMessage.AnyType)");

extern "C" {static PyObject *meth_QOpenGLDebugLogger_disableMessages(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLDebugLogger_disableMessages(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLDebugMessage::Sources a0def = QOpenGLDebugMessage::AnySource;
         ::QOpenGLDebugMessage::Sources* a0 = &a0def;
        int a0State = 0;
         ::QOpenGLDebugMessage::Types a1def = QOpenGLDebugMessage::AnyType;
         ::QOpenGLDebugMessage::Types* a1 = &a1def;
        int a1State = 0;
         ::QOpenGLDebugMessage::Severities a2def = QOpenGLDebugMessage::AnySeverity;
         ::QOpenGLDebugMessage::Severities* a2 = &a2def;
        int a2State = 0;
         ::QOpenGLDebugLogger *sipCpp;

        static const char *sipKwdList[] = {
            sipName_sources,
            sipName_types,
            sipName_severities,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1J1J1", &sipSelf, sipType_QOpenGLDebugLogger, &sipCpp, sipType_QOpenGLDebugMessage_Sources, &a0, &a0State, sipType_QOpenGLDebugMessage_Types, &a1, &a1State, sipType_QOpenGLDebugMessage_Severities, &a2, &a2State))
        {
            sipCpp->disableMessages(*a0,*a1,*a2);
            sipReleaseType(a0,sipType_QOpenGLDebugMessage_Sources,a0State);
            sipReleaseType(a1,sipType_QOpenGLDebugMessage_Types,a1State);
            sipReleaseType(a2,sipType_QOpenGLDebugMessage_Severities,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QVector<uint>* a0;
        int a0State = 0;
         ::QOpenGLDebugMessage::Sources a1def = QOpenGLDebugMessage::AnySource;
         ::QOpenGLDebugMessage::Sources* a1 = &a1def;
        int a1State = 0;
         ::QOpenGLDebugMessage::Types a2def = QOpenGLDebugMessage::AnyType;
         ::QOpenGLDebugMessage::Types* a2 = &a2def;
        int a2State = 0;
         ::QOpenGLDebugLogger *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_sources,
            sipName_types,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J1J1", &sipSelf, sipType_QOpenGLDebugLogger, &sipCpp, sipType_QVector_1900,&a0, &a0State, sipType_QOpenGLDebugMessage_Sources, &a1, &a1State, sipType_QOpenGLDebugMessage_Types, &a2, &a2State))
        {
            sipCpp->disableMessages(*a0,*a1,*a2);
            sipReleaseType(const_cast< ::QVector<uint> *>(a0),sipType_QVector_1900,a0State);
            sipReleaseType(a1,sipType_QOpenGLDebugMessage_Sources,a1State);
            sipReleaseType(a2,sipType_QOpenGLDebugMessage_Types,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLDebugLogger, sipName_disableMessages, doc_QOpenGLDebugLogger_disableMessages);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLDebugLogger_loggedMessages, "loggedMessages(self) -> List[QOpenGLDebugMessage]");

extern "C" {static PyObject *meth_QOpenGLDebugLogger_loggedMessages(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLDebugLogger_loggedMessages(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLDebugLogger *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLDebugLogger, &sipCpp))
        {
            QList< ::QOpenGLDebugMessage>*sipRes;

            sipRes = new QList< ::QOpenGLDebugMessage>(sipCpp->loggedMessages());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QOpenGLDebugMessage,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLDebugLogger, sipName_loggedMessages, doc_QOpenGLDebugLogger_loggedMessages);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLDebugLogger_logMessage, "logMessage(self, QOpenGLDebugMessage)");

extern "C" {static PyObject *meth_QOpenGLDebugLogger_logMessage(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLDebugLogger_logMessage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLDebugMessage* a0;
         ::QOpenGLDebugLogger *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QOpenGLDebugLogger, &sipCpp, sipType_QOpenGLDebugMessage, &a0))
        {
            sipCpp->logMessage(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLDebugLogger, sipName_logMessage, doc_QOpenGLDebugLogger_logMessage);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLDebugLogger_startLogging, "startLogging(self, loggingMode: QOpenGLDebugLogger.LoggingMode = QOpenGLDebugLogger.AsynchronousLogging)");

extern "C" {static PyObject *meth_QOpenGLDebugLogger_startLogging(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLDebugLogger_startLogging(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLDebugLogger::LoggingMode a0 = QOpenGLDebugLogger::AsynchronousLogging;
         ::QOpenGLDebugLogger *sipCpp;

        static const char *sipKwdList[] = {
            sipName_loggingMode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|E", &sipSelf, sipType_QOpenGLDebugLogger, &sipCpp, sipType_QOpenGLDebugLogger_LoggingMode, &a0))
        {
            sipCpp->startLogging(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLDebugLogger, sipName_startLogging, doc_QOpenGLDebugLogger_startLogging);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLDebugLogger_stopLogging, "stopLogging(self)");

extern "C" {static PyObject *meth_QOpenGLDebugLogger_stopLogging(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLDebugLogger_stopLogging(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLDebugLogger *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLDebugLogger, &sipCpp))
        {
            sipCpp->stopLogging();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLDebugLogger, sipName_stopLogging, doc_QOpenGLDebugLogger_stopLogging);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QOpenGLDebugLogger(void *, const sipTypeDef *);}
static void *cast_QOpenGLDebugLogger(void *sipCppV, const sipTypeDef *targetType)
{
     ::QOpenGLDebugLogger *sipCpp = reinterpret_cast< ::QOpenGLDebugLogger *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QOpenGLDebugLogger(void *, int);}
static void release_QOpenGLDebugLogger(void *sipCppV, int)
{
     ::QOpenGLDebugLogger *sipCpp = reinterpret_cast< ::QOpenGLDebugLogger *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QOpenGLDebugLogger(sipSimpleWrapper *);}
static void dealloc_QOpenGLDebugLogger(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQOpenGLDebugLogger *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QOpenGLDebugLogger(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QOpenGLDebugLogger(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOpenGLDebugLogger(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQOpenGLDebugLogger *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQOpenGLDebugLogger(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QOpenGLDebugLogger[] = {{25, 0, 1}};


static PyMethodDef methods_QOpenGLDebugLogger[] = {
    {SIP_MLNAME_CAST(sipName_disableMessages), SIP_MLMETH_CAST(meth_QOpenGLDebugLogger_disableMessages), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLDebugLogger_disableMessages)},
    {SIP_MLNAME_CAST(sipName_enableMessages), SIP_MLMETH_CAST(meth_QOpenGLDebugLogger_enableMessages), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLDebugLogger_enableMessages)},
    {SIP_MLNAME_CAST(sipName_initialize), meth_QOpenGLDebugLogger_initialize, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLDebugLogger_initialize)},
    {SIP_MLNAME_CAST(sipName_isLogging), meth_QOpenGLDebugLogger_isLogging, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLDebugLogger_isLogging)},
    {SIP_MLNAME_CAST(sipName_logMessage), meth_QOpenGLDebugLogger_logMessage, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLDebugLogger_logMessage)},
    {SIP_MLNAME_CAST(sipName_loggedMessages), meth_QOpenGLDebugLogger_loggedMessages, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLDebugLogger_loggedMessages)},
    {SIP_MLNAME_CAST(sipName_loggingMode), meth_QOpenGLDebugLogger_loggingMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLDebugLogger_loggingMode)},
    {SIP_MLNAME_CAST(sipName_maximumMessageLength), meth_QOpenGLDebugLogger_maximumMessageLength, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLDebugLogger_maximumMessageLength)},
    {SIP_MLNAME_CAST(sipName_popGroup), meth_QOpenGLDebugLogger_popGroup, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLDebugLogger_popGroup)},
    {SIP_MLNAME_CAST(sipName_pushGroup), SIP_MLMETH_CAST(meth_QOpenGLDebugLogger_pushGroup), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLDebugLogger_pushGroup)},
    {SIP_MLNAME_CAST(sipName_startLogging), SIP_MLMETH_CAST(meth_QOpenGLDebugLogger_startLogging), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLDebugLogger_startLogging)},
    {SIP_MLNAME_CAST(sipName_stopLogging), meth_QOpenGLDebugLogger_stopLogging, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLDebugLogger_stopLogging)}
};

static sipEnumMemberDef enummembers_QOpenGLDebugLogger[] = {
    {sipName_AsynchronousLogging, static_cast<int>( ::QOpenGLDebugLogger::AsynchronousLogging), 135},
    {sipName_SynchronousLogging, static_cast<int>( ::QOpenGLDebugLogger::SynchronousLogging), 135},
};

PyDoc_STRVAR(doc_QOpenGLDebugLogger, "\1QOpenGLDebugLogger(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QOpenGLDebugLogger[] = {
    {"messageLogged(QOpenGLDebugMessage)", "\1messageLogged(self, QOpenGLDebugMessage)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QOpenGLDebugLogger = {
    & ::QOpenGLDebugLogger::staticMetaObject,
    0,
    signals_QOpenGLDebugLogger,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QOpenGLDebugLogger = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QOpenGLDebugLogger,
        {SIP_NULLPTR},
        &plugin_QOpenGLDebugLogger
    },
    {
        sipNameNr_QOpenGLDebugLogger,
        {0, 0, 1},
        12, methods_QOpenGLDebugLogger,
        2, enummembers_QOpenGLDebugLogger,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QOpenGLDebugLogger,
    -1,
    -1,
    supers_QOpenGLDebugLogger,
    SIP_NULLPTR,
    init_type_QOpenGLDebugLogger,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QOpenGLDebugLogger,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QOpenGLDebugLogger,
    cast_QOpenGLDebugLogger,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopengldebug.sip"
#include <qopengldebug.h>
#line 23075 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopengldebug.sip"
#include <qopengldebug.h>
#line 23079 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


extern "C" {static long slot_QOpenGLDebugMessage_Severities___hash__(PyObject *);}
static long slot_QOpenGLDebugMessage_Severities___hash__(PyObject *sipSelf)
{
     ::QOpenGLDebugMessage::Severities *sipCpp = reinterpret_cast< ::QOpenGLDebugMessage::Severities *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLDebugMessage_Severities));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QOpenGLDebugMessage::Severities::Int();
#line 23097 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QOpenGLDebugMessage_Severities___bool__(PyObject *);}
static int slot_QOpenGLDebugMessage_Severities___bool__(PyObject *sipSelf)
{
     ::QOpenGLDebugMessage::Severities *sipCpp = reinterpret_cast< ::QOpenGLDebugMessage::Severities *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLDebugMessage_Severities));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QOpenGLDebugMessage::Severities::Int() != 0);
#line 23122 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QOpenGLDebugMessage_Severities___ne__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLDebugMessage_Severities___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QOpenGLDebugMessage::Severities *sipCpp = reinterpret_cast< ::QOpenGLDebugMessage::Severities *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLDebugMessage_Severities));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLDebugMessage::Severities* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QOpenGLDebugMessage_Severities, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QOpenGLDebugMessage::Severities::Int() != a0->operator QOpenGLDebugMessage::Severities::Int());
#line 23152 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
            sipReleaseType(const_cast< ::QOpenGLDebugMessage::Severities *>(a0),sipType_QOpenGLDebugMessage_Severities,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QOpenGLDebugMessage_Severities, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QOpenGLDebugMessage_Severities___eq__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLDebugMessage_Severities___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QOpenGLDebugMessage::Severities *sipCpp = reinterpret_cast< ::QOpenGLDebugMessage::Severities *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLDebugMessage_Severities));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLDebugMessage::Severities* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QOpenGLDebugMessage_Severities, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QOpenGLDebugMessage::Severities::Int() == a0->operator QOpenGLDebugMessage::Severities::Int());
#line 23188 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
            sipReleaseType(const_cast< ::QOpenGLDebugMessage::Severities *>(a0),sipType_QOpenGLDebugMessage_Severities,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QOpenGLDebugMessage_Severities, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QOpenGLDebugMessage_Severities___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLDebugMessage_Severities___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QOpenGLDebugMessage_Severities)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QOpenGLDebugMessage::Severities *sipCpp = reinterpret_cast< ::QOpenGLDebugMessage::Severities *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLDebugMessage_Severities));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QOpenGLDebugMessage::Severities(*sipCpp ^ a0);
#line 23227 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QOpenGLDebugMessage_Severities___xor__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLDebugMessage_Severities___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLDebugMessage::Severities* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QOpenGLDebugMessage_Severities, &a0, &a0State, &a1))
        {
             ::QOpenGLDebugMessage::Severities*sipRes;

            sipRes = new  ::QOpenGLDebugMessage::Severities((*a0 ^ a1));
            sipReleaseType(a0,sipType_QOpenGLDebugMessage_Severities,a0State);

            return sipConvertFromNewType(sipRes,sipType_QOpenGLDebugMessage_Severities,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QOpenGLDebugMessage_Severities___ior__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLDebugMessage_Severities___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QOpenGLDebugMessage_Severities)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QOpenGLDebugMessage::Severities *sipCpp = reinterpret_cast< ::QOpenGLDebugMessage::Severities *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLDebugMessage_Severities));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QOpenGLDebugMessage::Severities(*sipCpp | a0);
#line 23299 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QOpenGLDebugMessage_Severities___or__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLDebugMessage_Severities___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLDebugMessage::Severities* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QOpenGLDebugMessage_Severities, &a0, &a0State, &a1))
        {
             ::QOpenGLDebugMessage::Severities*sipRes;

            sipRes = new  ::QOpenGLDebugMessage::Severities((*a0 | a1));
            sipReleaseType(a0,sipType_QOpenGLDebugMessage_Severities,a0State);

            return sipConvertFromNewType(sipRes,sipType_QOpenGLDebugMessage_Severities,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QOpenGLDebugMessage_Severities___iand__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLDebugMessage_Severities___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QOpenGLDebugMessage_Severities)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QOpenGLDebugMessage::Severities *sipCpp = reinterpret_cast< ::QOpenGLDebugMessage::Severities *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLDebugMessage_Severities));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QOpenGLDebugMessage::Severities::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QOpenGLDebugMessage_Severities___and__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLDebugMessage_Severities___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLDebugMessage::Severities* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QOpenGLDebugMessage_Severities, &a0, &a0State, &a1))
        {
             ::QOpenGLDebugMessage::Severities*sipRes;

            sipRes = new  ::QOpenGLDebugMessage::Severities((*a0 & a1));
            sipReleaseType(a0,sipType_QOpenGLDebugMessage_Severities,a0State);

            return sipConvertFromNewType(sipRes,sipType_QOpenGLDebugMessage_Severities,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QOpenGLDebugMessage_Severities___invert__(PyObject *);}
static PyObject *slot_QOpenGLDebugMessage_Severities___invert__(PyObject *sipSelf)
{
     ::QOpenGLDebugMessage::Severities *sipCpp = reinterpret_cast< ::QOpenGLDebugMessage::Severities *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLDebugMessage_Severities));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QOpenGLDebugMessage::Severities*sipRes;

            sipRes = new  ::QOpenGLDebugMessage::Severities(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QOpenGLDebugMessage_Severities,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QOpenGLDebugMessage_Severities___int__(PyObject *);}
static PyObject *slot_QOpenGLDebugMessage_Severities___int__(PyObject *sipSelf)
{
     ::QOpenGLDebugMessage::Severities *sipCpp = reinterpret_cast< ::QOpenGLDebugMessage::Severities *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLDebugMessage_Severities));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QOpenGLDebugMessage_Severities(void *, int);}
static void release_QOpenGLDebugMessage_Severities(void *sipCppV, int)
{
    delete reinterpret_cast< ::QOpenGLDebugMessage::Severities *>(sipCppV);
}


extern "C" {static void assign_QOpenGLDebugMessage_Severities(void *, SIP_SSIZE_T, void *);}
static void assign_QOpenGLDebugMessage_Severities(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QOpenGLDebugMessage::Severities *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QOpenGLDebugMessage::Severities *>(sipSrc);
}


extern "C" {static void *array_QOpenGLDebugMessage_Severities(SIP_SSIZE_T);}
static void *array_QOpenGLDebugMessage_Severities(SIP_SSIZE_T sipNrElem)
{
    return new  ::QOpenGLDebugMessage::Severities[sipNrElem];
}


extern "C" {static void *copy_QOpenGLDebugMessage_Severities(const void *, SIP_SSIZE_T);}
static void *copy_QOpenGLDebugMessage_Severities(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QOpenGLDebugMessage::Severities(reinterpret_cast<const  ::QOpenGLDebugMessage::Severities *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QOpenGLDebugMessage_Severities(sipSimpleWrapper *);}
static void dealloc_QOpenGLDebugMessage_Severities(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QOpenGLDebugMessage_Severities(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QOpenGLDebugMessage_Severities(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOpenGLDebugMessage_Severities(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QOpenGLDebugMessage::Severities *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QOpenGLDebugMessage::Severities();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QOpenGLDebugMessage::Severities(a0);

            return sipCpp;
        }
    }

    {
        const  ::QOpenGLDebugMessage::Severities* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QOpenGLDebugMessage_Severities, &a0, &a0State))
        {
            sipCpp = new  ::QOpenGLDebugMessage::Severities(*a0);
            sipReleaseType(const_cast< ::QOpenGLDebugMessage::Severities *>(a0),sipType_QOpenGLDebugMessage_Severities,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QOpenGLDebugMessage_Severities(PyObject *, void **, int *, PyObject *);}
static int convertTo_QOpenGLDebugMessage_Severities(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QOpenGLDebugMessage::Severities **sipCppPtr = reinterpret_cast< ::QOpenGLDebugMessage::Severities **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QOpenGLDebugMessage::Severities is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QOpenGLDebugMessage_Severity)) ||
            sipCanConvertToType(sipPy, sipType_QOpenGLDebugMessage_Severities, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QOpenGLDebugMessage_Severity)))
{
    *sipCppPtr = new QOpenGLDebugMessage::Severities(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QOpenGLDebugMessage::Severities *>(sipConvertToType(sipPy, sipType_QOpenGLDebugMessage_Severities, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 23567 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QOpenGLDebugMessage_Severities[] = {
    {(void *)slot_QOpenGLDebugMessage_Severities___hash__, hash_slot},
    {(void *)slot_QOpenGLDebugMessage_Severities___bool__, bool_slot},
    {(void *)slot_QOpenGLDebugMessage_Severities___ne__, ne_slot},
    {(void *)slot_QOpenGLDebugMessage_Severities___eq__, eq_slot},
    {(void *)slot_QOpenGLDebugMessage_Severities___ixor__, ixor_slot},
    {(void *)slot_QOpenGLDebugMessage_Severities___xor__, xor_slot},
    {(void *)slot_QOpenGLDebugMessage_Severities___ior__, ior_slot},
    {(void *)slot_QOpenGLDebugMessage_Severities___or__, or_slot},
    {(void *)slot_QOpenGLDebugMessage_Severities___iand__, iand_slot},
    {(void *)slot_QOpenGLDebugMessage_Severities___and__, and_slot},
    {(void *)slot_QOpenGLDebugMessage_Severities___invert__, invert_slot},
    {(void *)slot_QOpenGLDebugMessage_Severities___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QOpenGLDebugMessage_Severities, "\1QOpenGLDebugMessage.Severities()\n"
"QOpenGLDebugMessage.Severities(Union[QOpenGLDebugMessage.Severities, QOpenGLDebugMessage.Severity])\n"
"QOpenGLDebugMessage.Severities(QOpenGLDebugMessage.Severities)");


static pyqt5ClassPluginDef plugin_QOpenGLDebugMessage_Severities = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QOpenGLDebugMessage_Severities = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QOpenGLDebugMessage__Severities,
        {SIP_NULLPTR},
        &plugin_QOpenGLDebugMessage_Severities
    },
    {
        sipNameNr_Severities,
        {136, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QOpenGLDebugMessage_Severities,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QOpenGLDebugMessage_Severities,
    init_type_QOpenGLDebugMessage_Severities,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QOpenGLDebugMessage_Severities,
    assign_QOpenGLDebugMessage_Severities,
    array_QOpenGLDebugMessage_Severities,
    copy_QOpenGLDebugMessage_Severities,
    release_QOpenGLDebugMessage_Severities,
    SIP_NULLPTR,
    convertTo_QOpenGLDebugMessage_Severities,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopengldebug.sip"
#include <qopengldebug.h>
#line 23655 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopengldebug.sip"
#include <qopengldebug.h>
#line 23659 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


extern "C" {static long slot_QOpenGLDebugMessage_Types___hash__(PyObject *);}
static long slot_QOpenGLDebugMessage_Types___hash__(PyObject *sipSelf)
{
     ::QOpenGLDebugMessage::Types *sipCpp = reinterpret_cast< ::QOpenGLDebugMessage::Types *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLDebugMessage_Types));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QOpenGLDebugMessage::Types::Int();
#line 23677 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QOpenGLDebugMessage_Types___bool__(PyObject *);}
static int slot_QOpenGLDebugMessage_Types___bool__(PyObject *sipSelf)
{
     ::QOpenGLDebugMessage::Types *sipCpp = reinterpret_cast< ::QOpenGLDebugMessage::Types *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLDebugMessage_Types));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QOpenGLDebugMessage::Types::Int() != 0);
#line 23702 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QOpenGLDebugMessage_Types___ne__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLDebugMessage_Types___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QOpenGLDebugMessage::Types *sipCpp = reinterpret_cast< ::QOpenGLDebugMessage::Types *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLDebugMessage_Types));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLDebugMessage::Types* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QOpenGLDebugMessage_Types, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QOpenGLDebugMessage::Types::Int() != a0->operator QOpenGLDebugMessage::Types::Int());
#line 23732 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
            sipReleaseType(const_cast< ::QOpenGLDebugMessage::Types *>(a0),sipType_QOpenGLDebugMessage_Types,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QOpenGLDebugMessage_Types, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QOpenGLDebugMessage_Types___eq__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLDebugMessage_Types___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QOpenGLDebugMessage::Types *sipCpp = reinterpret_cast< ::QOpenGLDebugMessage::Types *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLDebugMessage_Types));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLDebugMessage::Types* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QOpenGLDebugMessage_Types, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QOpenGLDebugMessage::Types::Int() == a0->operator QOpenGLDebugMessage::Types::Int());
#line 23768 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
            sipReleaseType(const_cast< ::QOpenGLDebugMessage::Types *>(a0),sipType_QOpenGLDebugMessage_Types,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QOpenGLDebugMessage_Types, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QOpenGLDebugMessage_Types___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLDebugMessage_Types___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QOpenGLDebugMessage_Types)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QOpenGLDebugMessage::Types *sipCpp = reinterpret_cast< ::QOpenGLDebugMessage::Types *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLDebugMessage_Types));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QOpenGLDebugMessage::Types(*sipCpp ^ a0);
#line 23807 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QOpenGLDebugMessage_Types___xor__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLDebugMessage_Types___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLDebugMessage::Types* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QOpenGLDebugMessage_Types, &a0, &a0State, &a1))
        {
             ::QOpenGLDebugMessage::Types*sipRes;

            sipRes = new  ::QOpenGLDebugMessage::Types((*a0 ^ a1));
            sipReleaseType(a0,sipType_QOpenGLDebugMessage_Types,a0State);

            return sipConvertFromNewType(sipRes,sipType_QOpenGLDebugMessage_Types,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QOpenGLDebugMessage_Types___ior__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLDebugMessage_Types___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QOpenGLDebugMessage_Types)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QOpenGLDebugMessage::Types *sipCpp = reinterpret_cast< ::QOpenGLDebugMessage::Types *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLDebugMessage_Types));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QOpenGLDebugMessage::Types(*sipCpp | a0);
#line 23879 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QOpenGLDebugMessage_Types___or__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLDebugMessage_Types___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLDebugMessage::Types* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QOpenGLDebugMessage_Types, &a0, &a0State, &a1))
        {
             ::QOpenGLDebugMessage::Types*sipRes;

            sipRes = new  ::QOpenGLDebugMessage::Types((*a0 | a1));
            sipReleaseType(a0,sipType_QOpenGLDebugMessage_Types,a0State);

            return sipConvertFromNewType(sipRes,sipType_QOpenGLDebugMessage_Types,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QOpenGLDebugMessage_Types___iand__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLDebugMessage_Types___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QOpenGLDebugMessage_Types)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QOpenGLDebugMessage::Types *sipCpp = reinterpret_cast< ::QOpenGLDebugMessage::Types *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLDebugMessage_Types));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QOpenGLDebugMessage::Types::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QOpenGLDebugMessage_Types___and__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLDebugMessage_Types___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLDebugMessage::Types* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QOpenGLDebugMessage_Types, &a0, &a0State, &a1))
        {
             ::QOpenGLDebugMessage::Types*sipRes;

            sipRes = new  ::QOpenGLDebugMessage::Types((*a0 & a1));
            sipReleaseType(a0,sipType_QOpenGLDebugMessage_Types,a0State);

            return sipConvertFromNewType(sipRes,sipType_QOpenGLDebugMessage_Types,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QOpenGLDebugMessage_Types___invert__(PyObject *);}
static PyObject *slot_QOpenGLDebugMessage_Types___invert__(PyObject *sipSelf)
{
     ::QOpenGLDebugMessage::Types *sipCpp = reinterpret_cast< ::QOpenGLDebugMessage::Types *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLDebugMessage_Types));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QOpenGLDebugMessage::Types*sipRes;

            sipRes = new  ::QOpenGLDebugMessage::Types(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QOpenGLDebugMessage_Types,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QOpenGLDebugMessage_Types___int__(PyObject *);}
static PyObject *slot_QOpenGLDebugMessage_Types___int__(PyObject *sipSelf)
{
     ::QOpenGLDebugMessage::Types *sipCpp = reinterpret_cast< ::QOpenGLDebugMessage::Types *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLDebugMessage_Types));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QOpenGLDebugMessage_Types(void *, int);}
static void release_QOpenGLDebugMessage_Types(void *sipCppV, int)
{
    delete reinterpret_cast< ::QOpenGLDebugMessage::Types *>(sipCppV);
}


extern "C" {static void assign_QOpenGLDebugMessage_Types(void *, SIP_SSIZE_T, void *);}
static void assign_QOpenGLDebugMessage_Types(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QOpenGLDebugMessage::Types *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QOpenGLDebugMessage::Types *>(sipSrc);
}


extern "C" {static void *array_QOpenGLDebugMessage_Types(SIP_SSIZE_T);}
static void *array_QOpenGLDebugMessage_Types(SIP_SSIZE_T sipNrElem)
{
    return new  ::QOpenGLDebugMessage::Types[sipNrElem];
}


extern "C" {static void *copy_QOpenGLDebugMessage_Types(const void *, SIP_SSIZE_T);}
static void *copy_QOpenGLDebugMessage_Types(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QOpenGLDebugMessage::Types(reinterpret_cast<const  ::QOpenGLDebugMessage::Types *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QOpenGLDebugMessage_Types(sipSimpleWrapper *);}
static void dealloc_QOpenGLDebugMessage_Types(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QOpenGLDebugMessage_Types(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QOpenGLDebugMessage_Types(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOpenGLDebugMessage_Types(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QOpenGLDebugMessage::Types *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QOpenGLDebugMessage::Types();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QOpenGLDebugMessage::Types(a0);

            return sipCpp;
        }
    }

    {
        const  ::QOpenGLDebugMessage::Types* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QOpenGLDebugMessage_Types, &a0, &a0State))
        {
            sipCpp = new  ::QOpenGLDebugMessage::Types(*a0);
            sipReleaseType(const_cast< ::QOpenGLDebugMessage::Types *>(a0),sipType_QOpenGLDebugMessage_Types,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QOpenGLDebugMessage_Types(PyObject *, void **, int *, PyObject *);}
static int convertTo_QOpenGLDebugMessage_Types(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QOpenGLDebugMessage::Types **sipCppPtr = reinterpret_cast< ::QOpenGLDebugMessage::Types **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QOpenGLDebugMessage::Types is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QOpenGLDebugMessage_Type)) ||
            sipCanConvertToType(sipPy, sipType_QOpenGLDebugMessage_Types, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QOpenGLDebugMessage_Type)))
{
    *sipCppPtr = new QOpenGLDebugMessage::Types(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QOpenGLDebugMessage::Types *>(sipConvertToType(sipPy, sipType_QOpenGLDebugMessage_Types, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 24147 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QOpenGLDebugMessage_Types[] = {
    {(void *)slot_QOpenGLDebugMessage_Types___hash__, hash_slot},
    {(void *)slot_QOpenGLDebugMessage_Types___bool__, bool_slot},
    {(void *)slot_QOpenGLDebugMessage_Types___ne__, ne_slot},
    {(void *)slot_QOpenGLDebugMessage_Types___eq__, eq_slot},
    {(void *)slot_QOpenGLDebugMessage_Types___ixor__, ixor_slot},
    {(void *)slot_QOpenGLDebugMessage_Types___xor__, xor_slot},
    {(void *)slot_QOpenGLDebugMessage_Types___ior__, ior_slot},
    {(void *)slot_QOpenGLDebugMessage_Types___or__, or_slot},
    {(void *)slot_QOpenGLDebugMessage_Types___iand__, iand_slot},
    {(void *)slot_QOpenGLDebugMessage_Types___and__, and_slot},
    {(void *)slot_QOpenGLDebugMessage_Types___invert__, invert_slot},
    {(void *)slot_QOpenGLDebugMessage_Types___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QOpenGLDebugMessage_Types, "\1QOpenGLDebugMessage.Types()\n"
"QOpenGLDebugMessage.Types(Union[QOpenGLDebugMessage.Types, QOpenGLDebugMessage.Type])\n"
"QOpenGLDebugMessage.Types(QOpenGLDebugMessage.Types)");


static pyqt5ClassPluginDef plugin_QOpenGLDebugMessage_Types = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QOpenGLDebugMessage_Types = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QOpenGLDebugMessage__Types,
        {SIP_NULLPTR},
        &plugin_QOpenGLDebugMessage_Types
    },
    {
        sipNameNr_Types,
        {136, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QOpenGLDebugMessage_Types,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QOpenGLDebugMessage_Types,
    init_type_QOpenGLDebugMessage_Types,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QOpenGLDebugMessage_Types,
    assign_QOpenGLDebugMessage_Types,
    array_QOpenGLDebugMessage_Types,
    copy_QOpenGLDebugMessage_Types,
    release_QOpenGLDebugMessage_Types,
    SIP_NULLPTR,
    convertTo_QOpenGLDebugMessage_Types,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopengldebug.sip"
#include <qopengldebug.h>
#line 24235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopengldebug.sip"
#include <qopengldebug.h>
#line 24239 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


extern "C" {static long slot_QOpenGLDebugMessage_Sources___hash__(PyObject *);}
static long slot_QOpenGLDebugMessage_Sources___hash__(PyObject *sipSelf)
{
     ::QOpenGLDebugMessage::Sources *sipCpp = reinterpret_cast< ::QOpenGLDebugMessage::Sources *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLDebugMessage_Sources));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QOpenGLDebugMessage::Sources::Int();
#line 24257 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QOpenGLDebugMessage_Sources___bool__(PyObject *);}
static int slot_QOpenGLDebugMessage_Sources___bool__(PyObject *sipSelf)
{
     ::QOpenGLDebugMessage::Sources *sipCpp = reinterpret_cast< ::QOpenGLDebugMessage::Sources *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLDebugMessage_Sources));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QOpenGLDebugMessage::Sources::Int() != 0);
#line 24282 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QOpenGLDebugMessage_Sources___ne__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLDebugMessage_Sources___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QOpenGLDebugMessage::Sources *sipCpp = reinterpret_cast< ::QOpenGLDebugMessage::Sources *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLDebugMessage_Sources));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLDebugMessage::Sources* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QOpenGLDebugMessage_Sources, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QOpenGLDebugMessage::Sources::Int() != a0->operator QOpenGLDebugMessage::Sources::Int());
#line 24312 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
            sipReleaseType(const_cast< ::QOpenGLDebugMessage::Sources *>(a0),sipType_QOpenGLDebugMessage_Sources,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QOpenGLDebugMessage_Sources, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QOpenGLDebugMessage_Sources___eq__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLDebugMessage_Sources___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QOpenGLDebugMessage::Sources *sipCpp = reinterpret_cast< ::QOpenGLDebugMessage::Sources *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLDebugMessage_Sources));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLDebugMessage::Sources* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QOpenGLDebugMessage_Sources, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QOpenGLDebugMessage::Sources::Int() == a0->operator QOpenGLDebugMessage::Sources::Int());
#line 24348 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
            sipReleaseType(const_cast< ::QOpenGLDebugMessage::Sources *>(a0),sipType_QOpenGLDebugMessage_Sources,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QOpenGLDebugMessage_Sources, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QOpenGLDebugMessage_Sources___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLDebugMessage_Sources___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QOpenGLDebugMessage_Sources)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QOpenGLDebugMessage::Sources *sipCpp = reinterpret_cast< ::QOpenGLDebugMessage::Sources *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLDebugMessage_Sources));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QOpenGLDebugMessage::Sources(*sipCpp ^ a0);
#line 24387 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QOpenGLDebugMessage_Sources___xor__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLDebugMessage_Sources___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLDebugMessage::Sources* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QOpenGLDebugMessage_Sources, &a0, &a0State, &a1))
        {
             ::QOpenGLDebugMessage::Sources*sipRes;

            sipRes = new  ::QOpenGLDebugMessage::Sources((*a0 ^ a1));
            sipReleaseType(a0,sipType_QOpenGLDebugMessage_Sources,a0State);

            return sipConvertFromNewType(sipRes,sipType_QOpenGLDebugMessage_Sources,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QOpenGLDebugMessage_Sources___ior__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLDebugMessage_Sources___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QOpenGLDebugMessage_Sources)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QOpenGLDebugMessage::Sources *sipCpp = reinterpret_cast< ::QOpenGLDebugMessage::Sources *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLDebugMessage_Sources));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QOpenGLDebugMessage::Sources(*sipCpp | a0);
#line 24459 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QOpenGLDebugMessage_Sources___or__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLDebugMessage_Sources___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLDebugMessage::Sources* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QOpenGLDebugMessage_Sources, &a0, &a0State, &a1))
        {
             ::QOpenGLDebugMessage::Sources*sipRes;

            sipRes = new  ::QOpenGLDebugMessage::Sources((*a0 | a1));
            sipReleaseType(a0,sipType_QOpenGLDebugMessage_Sources,a0State);

            return sipConvertFromNewType(sipRes,sipType_QOpenGLDebugMessage_Sources,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QOpenGLDebugMessage_Sources___iand__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLDebugMessage_Sources___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QOpenGLDebugMessage_Sources)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QOpenGLDebugMessage::Sources *sipCpp = reinterpret_cast< ::QOpenGLDebugMessage::Sources *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLDebugMessage_Sources));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QOpenGLDebugMessage::Sources::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QOpenGLDebugMessage_Sources___and__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLDebugMessage_Sources___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLDebugMessage::Sources* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QOpenGLDebugMessage_Sources, &a0, &a0State, &a1))
        {
             ::QOpenGLDebugMessage::Sources*sipRes;

            sipRes = new  ::QOpenGLDebugMessage::Sources((*a0 & a1));
            sipReleaseType(a0,sipType_QOpenGLDebugMessage_Sources,a0State);

            return sipConvertFromNewType(sipRes,sipType_QOpenGLDebugMessage_Sources,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QOpenGLDebugMessage_Sources___invert__(PyObject *);}
static PyObject *slot_QOpenGLDebugMessage_Sources___invert__(PyObject *sipSelf)
{
     ::QOpenGLDebugMessage::Sources *sipCpp = reinterpret_cast< ::QOpenGLDebugMessage::Sources *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLDebugMessage_Sources));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QOpenGLDebugMessage::Sources*sipRes;

            sipRes = new  ::QOpenGLDebugMessage::Sources(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QOpenGLDebugMessage_Sources,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QOpenGLDebugMessage_Sources___int__(PyObject *);}
static PyObject *slot_QOpenGLDebugMessage_Sources___int__(PyObject *sipSelf)
{
     ::QOpenGLDebugMessage::Sources *sipCpp = reinterpret_cast< ::QOpenGLDebugMessage::Sources *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLDebugMessage_Sources));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QOpenGLDebugMessage_Sources(void *, int);}
static void release_QOpenGLDebugMessage_Sources(void *sipCppV, int)
{
    delete reinterpret_cast< ::QOpenGLDebugMessage::Sources *>(sipCppV);
}


extern "C" {static void assign_QOpenGLDebugMessage_Sources(void *, SIP_SSIZE_T, void *);}
static void assign_QOpenGLDebugMessage_Sources(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QOpenGLDebugMessage::Sources *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QOpenGLDebugMessage::Sources *>(sipSrc);
}


extern "C" {static void *array_QOpenGLDebugMessage_Sources(SIP_SSIZE_T);}
static void *array_QOpenGLDebugMessage_Sources(SIP_SSIZE_T sipNrElem)
{
    return new  ::QOpenGLDebugMessage::Sources[sipNrElem];
}


extern "C" {static void *copy_QOpenGLDebugMessage_Sources(const void *, SIP_SSIZE_T);}
static void *copy_QOpenGLDebugMessage_Sources(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QOpenGLDebugMessage::Sources(reinterpret_cast<const  ::QOpenGLDebugMessage::Sources *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QOpenGLDebugMessage_Sources(sipSimpleWrapper *);}
static void dealloc_QOpenGLDebugMessage_Sources(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QOpenGLDebugMessage_Sources(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QOpenGLDebugMessage_Sources(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOpenGLDebugMessage_Sources(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QOpenGLDebugMessage::Sources *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QOpenGLDebugMessage::Sources();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QOpenGLDebugMessage::Sources(a0);

            return sipCpp;
        }
    }

    {
        const  ::QOpenGLDebugMessage::Sources* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QOpenGLDebugMessage_Sources, &a0, &a0State))
        {
            sipCpp = new  ::QOpenGLDebugMessage::Sources(*a0);
            sipReleaseType(const_cast< ::QOpenGLDebugMessage::Sources *>(a0),sipType_QOpenGLDebugMessage_Sources,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QOpenGLDebugMessage_Sources(PyObject *, void **, int *, PyObject *);}
static int convertTo_QOpenGLDebugMessage_Sources(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QOpenGLDebugMessage::Sources **sipCppPtr = reinterpret_cast< ::QOpenGLDebugMessage::Sources **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QOpenGLDebugMessage::Sources is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QOpenGLDebugMessage_Source)) ||
            sipCanConvertToType(sipPy, sipType_QOpenGLDebugMessage_Sources, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QOpenGLDebugMessage_Source)))
{
    *sipCppPtr = new QOpenGLDebugMessage::Sources(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QOpenGLDebugMessage::Sources *>(sipConvertToType(sipPy, sipType_QOpenGLDebugMessage_Sources, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 24727 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QOpenGLDebugMessage_Sources[] = {
    {(void *)slot_QOpenGLDebugMessage_Sources___hash__, hash_slot},
    {(void *)slot_QOpenGLDebugMessage_Sources___bool__, bool_slot},
    {(void *)slot_QOpenGLDebugMessage_Sources___ne__, ne_slot},
    {(void *)slot_QOpenGLDebugMessage_Sources___eq__, eq_slot},
    {(void *)slot_QOpenGLDebugMessage_Sources___ixor__, ixor_slot},
    {(void *)slot_QOpenGLDebugMessage_Sources___xor__, xor_slot},
    {(void *)slot_QOpenGLDebugMessage_Sources___ior__, ior_slot},
    {(void *)slot_QOpenGLDebugMessage_Sources___or__, or_slot},
    {(void *)slot_QOpenGLDebugMessage_Sources___iand__, iand_slot},
    {(void *)slot_QOpenGLDebugMessage_Sources___and__, and_slot},
    {(void *)slot_QOpenGLDebugMessage_Sources___invert__, invert_slot},
    {(void *)slot_QOpenGLDebugMessage_Sources___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QOpenGLDebugMessage_Sources, "\1QOpenGLDebugMessage.Sources()\n"
"QOpenGLDebugMessage.Sources(Union[QOpenGLDebugMessage.Sources, QOpenGLDebugMessage.Source])\n"
"QOpenGLDebugMessage.Sources(QOpenGLDebugMessage.Sources)");


static pyqt5ClassPluginDef plugin_QOpenGLDebugMessage_Sources = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QOpenGLDebugMessage_Sources = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QOpenGLDebugMessage__Sources,
        {SIP_NULLPTR},
        &plugin_QOpenGLDebugMessage_Sources
    },
    {
        sipNameNr_Sources,
        {136, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QOpenGLDebugMessage_Sources,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QOpenGLDebugMessage_Sources,
    init_type_QOpenGLDebugMessage_Sources,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QOpenGLDebugMessage_Sources,
    assign_QOpenGLDebugMessage_Sources,
    array_QOpenGLDebugMessage_Sources,
    copy_QOpenGLDebugMessage_Sources,
    release_QOpenGLDebugMessage_Sources,
    SIP_NULLPTR,
    convertTo_QOpenGLDebugMessage_Sources,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopengldebug.sip"
#include <qopengldebug.h>
#line 24815 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 24819 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QOpenGLDebugMessage_swap, "swap(self, QOpenGLDebugMessage)");

extern "C" {static PyObject *meth_QOpenGLDebugMessage_swap(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLDebugMessage_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLDebugMessage* a0;
         ::QOpenGLDebugMessage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QOpenGLDebugMessage, &sipCpp, sipType_QOpenGLDebugMessage, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLDebugMessage, sipName_swap, doc_QOpenGLDebugMessage_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLDebugMessage_source, "source(self) -> QOpenGLDebugMessage.Source");

extern "C" {static PyObject *meth_QOpenGLDebugMessage_source(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLDebugMessage_source(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLDebugMessage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLDebugMessage, &sipCpp))
        {
             ::QOpenGLDebugMessage::Source sipRes;

            sipRes = sipCpp->source();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QOpenGLDebugMessage_Source);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLDebugMessage, sipName_source, doc_QOpenGLDebugMessage_source);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLDebugMessage_type, "type(self) -> QOpenGLDebugMessage.Type");

extern "C" {static PyObject *meth_QOpenGLDebugMessage_type(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLDebugMessage_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLDebugMessage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLDebugMessage, &sipCpp))
        {
             ::QOpenGLDebugMessage::Type sipRes;

            sipRes = sipCpp->type();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QOpenGLDebugMessage_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLDebugMessage, sipName_type, doc_QOpenGLDebugMessage_type);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLDebugMessage_severity, "severity(self) -> QOpenGLDebugMessage.Severity");

extern "C" {static PyObject *meth_QOpenGLDebugMessage_severity(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLDebugMessage_severity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLDebugMessage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLDebugMessage, &sipCpp))
        {
             ::QOpenGLDebugMessage::Severity sipRes;

            sipRes = sipCpp->severity();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QOpenGLDebugMessage_Severity);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLDebugMessage, sipName_severity, doc_QOpenGLDebugMessage_severity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLDebugMessage_id, "id(self) -> int");

extern "C" {static PyObject *meth_QOpenGLDebugMessage_id(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLDebugMessage_id(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLDebugMessage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLDebugMessage, &sipCpp))
        {
             ::GLuint sipRes;

            sipRes = sipCpp->id();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLDebugMessage, sipName_id, doc_QOpenGLDebugMessage_id);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLDebugMessage_message, "message(self) -> str");

extern "C" {static PyObject *meth_QOpenGLDebugMessage_message(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLDebugMessage_message(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLDebugMessage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLDebugMessage, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->message());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLDebugMessage, sipName_message, doc_QOpenGLDebugMessage_message);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLDebugMessage_createApplicationMessage, "createApplicationMessage(str, id: int = 0, severity: QOpenGLDebugMessage.Severity = QOpenGLDebugMessage.NotificationSeverity, type: QOpenGLDebugMessage.Type = QOpenGLDebugMessage.OtherType) -> QOpenGLDebugMessage");

extern "C" {static PyObject *meth_QOpenGLDebugMessage_createApplicationMessage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLDebugMessage_createApplicationMessage(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::GLuint a1 = 0;
         ::QOpenGLDebugMessage::Severity a2 = QOpenGLDebugMessage::NotificationSeverity;
         ::QOpenGLDebugMessage::Type a3 = QOpenGLDebugMessage::OtherType;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_id,
            sipName_severity,
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1|uEE", sipType_QString,&a0, &a0State, &a1, sipType_QOpenGLDebugMessage_Severity, &a2, sipType_QOpenGLDebugMessage_Type, &a3))
        {
             ::QOpenGLDebugMessage*sipRes;

            sipRes = new  ::QOpenGLDebugMessage( ::QOpenGLDebugMessage::createApplicationMessage(*a0,a1,a2,a3));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QOpenGLDebugMessage,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLDebugMessage, sipName_createApplicationMessage, doc_QOpenGLDebugMessage_createApplicationMessage);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLDebugMessage_createThirdPartyMessage, "createThirdPartyMessage(str, id: int = 0, severity: QOpenGLDebugMessage.Severity = QOpenGLDebugMessage.NotificationSeverity, type: QOpenGLDebugMessage.Type = QOpenGLDebugMessage.OtherType) -> QOpenGLDebugMessage");

extern "C" {static PyObject *meth_QOpenGLDebugMessage_createThirdPartyMessage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLDebugMessage_createThirdPartyMessage(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::GLuint a1 = 0;
         ::QOpenGLDebugMessage::Severity a2 = QOpenGLDebugMessage::NotificationSeverity;
         ::QOpenGLDebugMessage::Type a3 = QOpenGLDebugMessage::OtherType;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_id,
            sipName_severity,
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1|uEE", sipType_QString,&a0, &a0State, &a1, sipType_QOpenGLDebugMessage_Severity, &a2, sipType_QOpenGLDebugMessage_Type, &a3))
        {
             ::QOpenGLDebugMessage*sipRes;

            sipRes = new  ::QOpenGLDebugMessage( ::QOpenGLDebugMessage::createThirdPartyMessage(*a0,a1,a2,a3));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QOpenGLDebugMessage,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLDebugMessage, sipName_createThirdPartyMessage, doc_QOpenGLDebugMessage_createThirdPartyMessage);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QOpenGLDebugMessage___ne__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLDebugMessage___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QOpenGLDebugMessage *sipCpp = reinterpret_cast< ::QOpenGLDebugMessage *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLDebugMessage));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLDebugMessage* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QOpenGLDebugMessage, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QOpenGLDebugMessage::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QOpenGLDebugMessage, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QOpenGLDebugMessage___eq__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLDebugMessage___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QOpenGLDebugMessage *sipCpp = reinterpret_cast< ::QOpenGLDebugMessage *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLDebugMessage));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLDebugMessage* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QOpenGLDebugMessage, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QOpenGLDebugMessage::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QOpenGLDebugMessage, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QOpenGLDebugMessage(void *, int);}
static void release_QOpenGLDebugMessage(void *sipCppV, int)
{
    delete reinterpret_cast< ::QOpenGLDebugMessage *>(sipCppV);
}


extern "C" {static void assign_QOpenGLDebugMessage(void *, SIP_SSIZE_T, void *);}
static void assign_QOpenGLDebugMessage(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QOpenGLDebugMessage *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QOpenGLDebugMessage *>(sipSrc);
}


extern "C" {static void *array_QOpenGLDebugMessage(SIP_SSIZE_T);}
static void *array_QOpenGLDebugMessage(SIP_SSIZE_T sipNrElem)
{
    return new  ::QOpenGLDebugMessage[sipNrElem];
}


extern "C" {static void *copy_QOpenGLDebugMessage(const void *, SIP_SSIZE_T);}
static void *copy_QOpenGLDebugMessage(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QOpenGLDebugMessage(reinterpret_cast<const  ::QOpenGLDebugMessage *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QOpenGLDebugMessage(sipSimpleWrapper *);}
static void dealloc_QOpenGLDebugMessage(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QOpenGLDebugMessage(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QOpenGLDebugMessage(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOpenGLDebugMessage(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QOpenGLDebugMessage *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QOpenGLDebugMessage();

            return sipCpp;
        }
    }

    {
        const  ::QOpenGLDebugMessage* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QOpenGLDebugMessage, &a0))
        {
            sipCpp = new  ::QOpenGLDebugMessage(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QOpenGLDebugMessage[] = {
    {(void *)slot_QOpenGLDebugMessage___ne__, ne_slot},
    {(void *)slot_QOpenGLDebugMessage___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QOpenGLDebugMessage[] = {
    {SIP_MLNAME_CAST(sipName_createApplicationMessage), SIP_MLMETH_CAST(meth_QOpenGLDebugMessage_createApplicationMessage), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLDebugMessage_createApplicationMessage)},
    {SIP_MLNAME_CAST(sipName_createThirdPartyMessage), SIP_MLMETH_CAST(meth_QOpenGLDebugMessage_createThirdPartyMessage), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLDebugMessage_createThirdPartyMessage)},
    {SIP_MLNAME_CAST(sipName_id), meth_QOpenGLDebugMessage_id, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLDebugMessage_id)},
    {SIP_MLNAME_CAST(sipName_message), meth_QOpenGLDebugMessage_message, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLDebugMessage_message)},
    {SIP_MLNAME_CAST(sipName_severity), meth_QOpenGLDebugMessage_severity, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLDebugMessage_severity)},
    {SIP_MLNAME_CAST(sipName_source), meth_QOpenGLDebugMessage_source, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLDebugMessage_source)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QOpenGLDebugMessage_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLDebugMessage_swap)},
    {SIP_MLNAME_CAST(sipName_type), meth_QOpenGLDebugMessage_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLDebugMessage_type)}
};

static sipEnumMemberDef enummembers_QOpenGLDebugMessage[] = {
    {sipName_APISource, static_cast<int>( ::QOpenGLDebugMessage::APISource), 139},
    {sipName_AnySeverity, static_cast<int>( ::QOpenGLDebugMessage::AnySeverity), 138},
    {sipName_AnySource, static_cast<int>( ::QOpenGLDebugMessage::AnySource), 139},
    {sipName_AnyType, static_cast<int>( ::QOpenGLDebugMessage::AnyType), 141},
    {sipName_ApplicationSource, static_cast<int>( ::QOpenGLDebugMessage::ApplicationSource), 139},
    {sipName_DeprecatedBehaviorType, static_cast<int>( ::QOpenGLDebugMessage::DeprecatedBehaviorType), 141},
    {sipName_ErrorType, static_cast<int>( ::QOpenGLDebugMessage::ErrorType), 141},
    {sipName_GroupPopType, static_cast<int>( ::QOpenGLDebugMessage::GroupPopType), 141},
    {sipName_GroupPushType, static_cast<int>( ::QOpenGLDebugMessage::GroupPushType), 141},
    {sipName_HighSeverity, static_cast<int>( ::QOpenGLDebugMessage::HighSeverity), 138},
    {sipName_InvalidSeverity, static_cast<int>( ::QOpenGLDebugMessage::InvalidSeverity), 138},
    {sipName_InvalidSource, static_cast<int>( ::QOpenGLDebugMessage::InvalidSource), 139},
    {sipName_InvalidType, static_cast<int>( ::QOpenGLDebugMessage::InvalidType), 141},
    {sipName_LowSeverity, static_cast<int>( ::QOpenGLDebugMessage::LowSeverity), 138},
    {sipName_MarkerType, static_cast<int>( ::QOpenGLDebugMessage::MarkerType), 141},
    {sipName_MediumSeverity, static_cast<int>( ::QOpenGLDebugMessage::MediumSeverity), 138},
    {sipName_NotificationSeverity, static_cast<int>( ::QOpenGLDebugMessage::NotificationSeverity), 138},
    {sipName_OtherSource, static_cast<int>( ::QOpenGLDebugMessage::OtherSource), 139},
    {sipName_OtherType, static_cast<int>( ::QOpenGLDebugMessage::OtherType), 141},
    {sipName_PerformanceType, static_cast<int>( ::QOpenGLDebugMessage::PerformanceType), 141},
    {sipName_PortabilityType, static_cast<int>( ::QOpenGLDebugMessage::PortabilityType), 141},
    {sipName_ShaderCompilerSource, static_cast<int>( ::QOpenGLDebugMessage::ShaderCompilerSource), 139},
    {sipName_ThirdPartySource, static_cast<int>( ::QOpenGLDebugMessage::ThirdPartySource), 139},
    {sipName_UndefinedBehaviorType, static_cast<int>( ::QOpenGLDebugMessage::UndefinedBehaviorType), 141},
    {sipName_WindowSystemSource, static_cast<int>( ::QOpenGLDebugMessage::WindowSystemSource), 139},
};

PyDoc_STRVAR(doc_QOpenGLDebugMessage, "\1QOpenGLDebugMessage()\n"
"QOpenGLDebugMessage(QOpenGLDebugMessage)");


static pyqt5ClassPluginDef plugin_QOpenGLDebugMessage = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QOpenGLDebugMessage = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QOpenGLDebugMessage,
        {SIP_NULLPTR},
        &plugin_QOpenGLDebugMessage
    },
    {
        sipNameNr_QOpenGLDebugMessage,
        {0, 0, 1},
        8, methods_QOpenGLDebugMessage,
        25, enummembers_QOpenGLDebugMessage,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QOpenGLDebugMessage,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QOpenGLDebugMessage,
    init_type_QOpenGLDebugMessage,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QOpenGLDebugMessage,
    assign_QOpenGLDebugMessage,
    array_QOpenGLDebugMessage,
    copy_QOpenGLDebugMessage,
    release_QOpenGLDebugMessage,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglcontext.sip"
#include <qopenglcontext.h>
#line 25314 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qsurfaceformat.sip"
#include <qsurfaceformat.h>
#line 25318 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 250 "sip/QtCore/qpycore_qpair.sip"
#include <qpair.h>
#line 25321 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QOpenGLVersionProfile_version, "version(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_QOpenGLVersionProfile_version(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLVersionProfile_version(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLVersionProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLVersionProfile, &sipCpp))
        {
             ::QPair<int,int>*sipRes;

            sipRes = new  ::QPair<int,int>(sipCpp->version());

            return sipConvertFromNewType(sipRes,sipType_QPair_1800_1800,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLVersionProfile, sipName_version, doc_QOpenGLVersionProfile_version);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLVersionProfile_setVersion, "setVersion(self, int, int)");

extern "C" {static PyObject *meth_QOpenGLVersionProfile_setVersion(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLVersionProfile_setVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QOpenGLVersionProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QOpenGLVersionProfile, &sipCpp, &a0, &a1))
        {
            sipCpp->setVersion(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLVersionProfile, sipName_setVersion, doc_QOpenGLVersionProfile_setVersion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLVersionProfile_profile, "profile(self) -> QSurfaceFormat.OpenGLContextProfile");

extern "C" {static PyObject *meth_QOpenGLVersionProfile_profile(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLVersionProfile_profile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLVersionProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLVersionProfile, &sipCpp))
        {
             ::QSurfaceFormat::OpenGLContextProfile sipRes;

            sipRes = sipCpp->profile();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSurfaceFormat_OpenGLContextProfile);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLVersionProfile, sipName_profile, doc_QOpenGLVersionProfile_profile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLVersionProfile_setProfile, "setProfile(self, QSurfaceFormat.OpenGLContextProfile)");

extern "C" {static PyObject *meth_QOpenGLVersionProfile_setProfile(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLVersionProfile_setProfile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSurfaceFormat::OpenGLContextProfile a0;
         ::QOpenGLVersionProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QOpenGLVersionProfile, &sipCpp, sipType_QSurfaceFormat_OpenGLContextProfile, &a0))
        {
            sipCpp->setProfile(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLVersionProfile, sipName_setProfile, doc_QOpenGLVersionProfile_setProfile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLVersionProfile_hasProfiles, "hasProfiles(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLVersionProfile_hasProfiles(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLVersionProfile_hasProfiles(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLVersionProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLVersionProfile, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasProfiles();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLVersionProfile, sipName_hasProfiles, doc_QOpenGLVersionProfile_hasProfiles);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLVersionProfile_isLegacyVersion, "isLegacyVersion(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLVersionProfile_isLegacyVersion(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLVersionProfile_isLegacyVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLVersionProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLVersionProfile, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isLegacyVersion();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLVersionProfile, sipName_isLegacyVersion, doc_QOpenGLVersionProfile_isLegacyVersion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLVersionProfile_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLVersionProfile_isValid(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLVersionProfile_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLVersionProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLVersionProfile, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLVersionProfile, sipName_isValid, doc_QOpenGLVersionProfile_isValid);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QOpenGLVersionProfile___eq__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLVersionProfile___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QOpenGLVersionProfile *sipCpp = reinterpret_cast< ::QOpenGLVersionProfile *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLVersionProfile));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLVersionProfile* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QOpenGLVersionProfile, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QOpenGLVersionProfile, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QOpenGLVersionProfile___ne__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLVersionProfile___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QOpenGLVersionProfile *sipCpp = reinterpret_cast< ::QOpenGLVersionProfile *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLVersionProfile));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLVersionProfile* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QOpenGLVersionProfile, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QOpenGLVersionProfile, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QOpenGLVersionProfile(void *, int);}
static void release_QOpenGLVersionProfile(void *sipCppV, int)
{
    delete reinterpret_cast< ::QOpenGLVersionProfile *>(sipCppV);
}


extern "C" {static void assign_QOpenGLVersionProfile(void *, SIP_SSIZE_T, void *);}
static void assign_QOpenGLVersionProfile(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QOpenGLVersionProfile *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QOpenGLVersionProfile *>(sipSrc);
}


extern "C" {static void *array_QOpenGLVersionProfile(SIP_SSIZE_T);}
static void *array_QOpenGLVersionProfile(SIP_SSIZE_T sipNrElem)
{
    return new  ::QOpenGLVersionProfile[sipNrElem];
}


extern "C" {static void *copy_QOpenGLVersionProfile(const void *, SIP_SSIZE_T);}
static void *copy_QOpenGLVersionProfile(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QOpenGLVersionProfile(reinterpret_cast<const  ::QOpenGLVersionProfile *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QOpenGLVersionProfile(sipSimpleWrapper *);}
static void dealloc_QOpenGLVersionProfile(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QOpenGLVersionProfile(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QOpenGLVersionProfile(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOpenGLVersionProfile(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QOpenGLVersionProfile *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QOpenGLVersionProfile();

            return sipCpp;
        }
    }

    {
        const  ::QSurfaceFormat* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QSurfaceFormat, &a0))
        {
            sipCpp = new  ::QOpenGLVersionProfile(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QOpenGLVersionProfile* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QOpenGLVersionProfile, &a0))
        {
            sipCpp = new  ::QOpenGLVersionProfile(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QOpenGLVersionProfile[] = {
    {(void *)slot_QOpenGLVersionProfile___eq__, eq_slot},
    {(void *)slot_QOpenGLVersionProfile___ne__, ne_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QOpenGLVersionProfile[] = {
    {SIP_MLNAME_CAST(sipName_hasProfiles), meth_QOpenGLVersionProfile_hasProfiles, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLVersionProfile_hasProfiles)},
    {SIP_MLNAME_CAST(sipName_isLegacyVersion), meth_QOpenGLVersionProfile_isLegacyVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLVersionProfile_isLegacyVersion)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QOpenGLVersionProfile_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLVersionProfile_isValid)},
    {SIP_MLNAME_CAST(sipName_profile), meth_QOpenGLVersionProfile_profile, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLVersionProfile_profile)},
    {SIP_MLNAME_CAST(sipName_setProfile), meth_QOpenGLVersionProfile_setProfile, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLVersionProfile_setProfile)},
    {SIP_MLNAME_CAST(sipName_setVersion), meth_QOpenGLVersionProfile_setVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLVersionProfile_setVersion)},
    {SIP_MLNAME_CAST(sipName_version), meth_QOpenGLVersionProfile_version, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLVersionProfile_version)}
};

PyDoc_STRVAR(doc_QOpenGLVersionProfile, "\1QOpenGLVersionProfile()\n"
"QOpenGLVersionProfile(QSurfaceFormat)\n"
"QOpenGLVersionProfile(QOpenGLVersionProfile)");


static pyqt5ClassPluginDef plugin_QOpenGLVersionProfile = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QOpenGLVersionProfile = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QOpenGLVersionProfile,
        {SIP_NULLPTR},
        &plugin_QOpenGLVersionProfile
    },
    {
        sipNameNr_QOpenGLVersionProfile,
        {0, 0, 1},
        7, methods_QOpenGLVersionProfile,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QOpenGLVersionProfile,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QOpenGLVersionProfile,
    init_type_QOpenGLVersionProfile,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QOpenGLVersionProfile,
    assign_QOpenGLVersionProfile,
    array_QOpenGLVersionProfile,
    copy_QOpenGLVersionProfile,
    release_QOpenGLVersionProfile,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 46 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglcontext.sip"
#include <qopenglcontext.h>
#line 25749 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 25753 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 25756 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglcontext.sip"
#include <qopenglcontext.h>
#line 25759 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 25762 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 28 "sip/QtCore/qpycore_qset.sip"
#include <qset.h>
#line 25765 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qsurface.sip"
#include <qsurface.h>
#line 25768 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qscreen.sip"
#include <qscreen.h>
#line 25771 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglcontext.sip"
#include <qopenglcontext.h>
#line 25774 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qsurfaceformat.sip"
#include <qsurfaceformat.h>
#line 25777 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 25780 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 25783 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 25786 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 25789 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 25792 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 25795 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 25798 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 25801 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 25804 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 25807 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 25810 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 25813 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 25816 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQOpenGLContext : public  ::QOpenGLContext
{
public:
    sipQOpenGLContext( ::QObject*);
    virtual ~sipQOpenGLContext();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQOpenGLContext(const sipQOpenGLContext &);
    sipQOpenGLContext &operator = (const sipQOpenGLContext &);

    char sipPyMethods[7];
};

sipQOpenGLContext::sipQOpenGLContext( ::QObject*a0):  ::QOpenGLContext(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQOpenGLContext::~sipQOpenGLContext()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQOpenGLContext::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QOpenGLContext);

    return  ::QOpenGLContext::metaObject();
}

int sipQOpenGLContext::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QOpenGLContext::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QOpenGLContext,_c,_id,_a);

    return _id;
}

void *sipQOpenGLContext::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QOpenGLContext, _clname, &sipCpp) ? sipCpp :  ::QOpenGLContext::qt_metacast(_clname));
}

bool sipQOpenGLContext::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QOpenGLContext::event(a0);

    extern bool sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_5(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQOpenGLContext::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QOpenGLContext::eventFilter(a0,a1);

    extern bool sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_4(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQOpenGLContext::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QOpenGLContext::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_3(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLContext::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QOpenGLContext::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_2(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLContext::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QOpenGLContext::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_1(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLContext::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QOpenGLContext::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOpenGLContext::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QOpenGLContext::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QOpenGLContext_setFormat, "setFormat(self, QSurfaceFormat)");

extern "C" {static PyObject *meth_QOpenGLContext_setFormat(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_setFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat* a0;
         ::QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QOpenGLContext, &sipCpp, sipType_QSurfaceFormat, &a0))
        {
            sipCpp->setFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_setFormat, doc_QOpenGLContext_setFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_setShareContext, "setShareContext(self, QOpenGLContext)");

extern "C" {static PyObject *meth_QOpenGLContext_setShareContext(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_setShareContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLContext* a0;
         ::QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QOpenGLContext, &sipCpp, sipType_QOpenGLContext, &a0))
        {
            sipCpp->setShareContext(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_setShareContext, doc_QOpenGLContext_setShareContext);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_setScreen, "setScreen(self, QScreen)");

extern "C" {static PyObject *meth_QOpenGLContext_setScreen(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_setScreen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QScreen* a0;
         ::QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QOpenGLContext, &sipCpp, sipType_QScreen, &a0))
        {
            sipCpp->setScreen(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_setScreen, doc_QOpenGLContext_setScreen);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_create, "create(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLContext_create(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_create(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLContext, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->create();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_create, doc_QOpenGLContext_create);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLContext_isValid(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLContext, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_isValid, doc_QOpenGLContext_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_format, "format(self) -> QSurfaceFormat");

extern "C" {static PyObject *meth_QOpenGLContext_format(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLContext, &sipCpp))
        {
             ::QSurfaceFormat*sipRes;

            sipRes = new  ::QSurfaceFormat(sipCpp->format());

            return sipConvertFromNewType(sipRes,sipType_QSurfaceFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_format, doc_QOpenGLContext_format);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_shareContext, "shareContext(self) -> QOpenGLContext");

extern "C" {static PyObject *meth_QOpenGLContext_shareContext(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_shareContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLContext, &sipCpp))
        {
             ::QOpenGLContext*sipRes;

            sipRes = sipCpp->shareContext();

            return sipConvertFromType(sipRes,sipType_QOpenGLContext,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_shareContext, doc_QOpenGLContext_shareContext);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_shareGroup, "shareGroup(self) -> QOpenGLContextGroup");

extern "C" {static PyObject *meth_QOpenGLContext_shareGroup(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_shareGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLContext, &sipCpp))
        {
             ::QOpenGLContextGroup*sipRes;

            sipRes = sipCpp->shareGroup();

            return sipConvertFromType(sipRes,sipType_QOpenGLContextGroup,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_shareGroup, doc_QOpenGLContext_shareGroup);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_screen, "screen(self) -> QScreen");

extern "C" {static PyObject *meth_QOpenGLContext_screen(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_screen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLContext, &sipCpp))
        {
             ::QScreen*sipRes;

            sipRes = sipCpp->screen();

            return sipConvertFromType(sipRes,sipType_QScreen,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_screen, doc_QOpenGLContext_screen);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_defaultFramebufferObject, "defaultFramebufferObject(self) -> int");

extern "C" {static PyObject *meth_QOpenGLContext_defaultFramebufferObject(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_defaultFramebufferObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLContext, &sipCpp))
        {
             ::GLuint sipRes;

            sipRes = sipCpp->defaultFramebufferObject();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_defaultFramebufferObject, doc_QOpenGLContext_defaultFramebufferObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_makeCurrent, "makeCurrent(self, QSurface) -> bool");

extern "C" {static PyObject *meth_QOpenGLContext_makeCurrent(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_makeCurrent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSurface* a0;
         ::QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QOpenGLContext, &sipCpp, sipType_QSurface, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->makeCurrent(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_makeCurrent, doc_QOpenGLContext_makeCurrent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_doneCurrent, "doneCurrent(self)");

extern "C" {static PyObject *meth_QOpenGLContext_doneCurrent(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_doneCurrent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLContext, &sipCpp))
        {
            sipCpp->doneCurrent();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_doneCurrent, doc_QOpenGLContext_doneCurrent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_swapBuffers, "swapBuffers(self, QSurface)");

extern "C" {static PyObject *meth_QOpenGLContext_swapBuffers(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_swapBuffers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSurface* a0;
         ::QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QOpenGLContext, &sipCpp, sipType_QSurface, &a0))
        {
            sipCpp->swapBuffers(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_swapBuffers, doc_QOpenGLContext_swapBuffers);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_surface, "surface(self) -> QSurface");

extern "C" {static PyObject *meth_QOpenGLContext_surface(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_surface(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLContext, &sipCpp))
        {
             ::QSurface*sipRes;

            sipRes = sipCpp->surface();

            return sipConvertFromType(sipRes,sipType_QSurface,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_surface, doc_QOpenGLContext_surface);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_currentContext, "currentContext() -> QOpenGLContext");

extern "C" {static PyObject *meth_QOpenGLContext_currentContext(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_currentContext(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QOpenGLContext*sipRes;

            sipRes =  ::QOpenGLContext::currentContext();

            return sipConvertFromType(sipRes,sipType_QOpenGLContext,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_currentContext, doc_QOpenGLContext_currentContext);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_areSharing, "areSharing(QOpenGLContext, QOpenGLContext) -> bool");

extern "C" {static PyObject *meth_QOpenGLContext_areSharing(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_areSharing(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLContext* a0;
         ::QOpenGLContext* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J8", sipType_QOpenGLContext, &a0, sipType_QOpenGLContext, &a1))
        {
            bool sipRes;

            sipRes =  ::QOpenGLContext::areSharing(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_areSharing, doc_QOpenGLContext_areSharing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_extensions, "extensions(self) -> Set[QByteArray]");

extern "C" {static PyObject *meth_QOpenGLContext_extensions(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_extensions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLContext, &sipCpp))
        {
            QSet< ::QByteArray>*sipRes;

            sipRes = new QSet< ::QByteArray>(sipCpp->extensions());

            return sipConvertFromNewType(sipRes,sipType_QSet_0100QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_extensions, doc_QOpenGLContext_extensions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_hasExtension, "hasExtension(self, Union[QByteArray, bytes, bytearray]) -> bool");

extern "C" {static PyObject *meth_QOpenGLContext_hasExtension(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_hasExtension(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QOpenGLContext, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->hasExtension(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_hasExtension, doc_QOpenGLContext_hasExtension);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_versionFunctions, "versionFunctions(self, versionProfile: QOpenGLVersionProfile = None) -> object");

extern "C" {static PyObject *meth_QOpenGLContext_versionFunctions(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_versionFunctions(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLVersionProfile* a0 = 0;
        const  ::QOpenGLContext *sipCpp;

        static const char *sipKwdList[] = {
            sipName_versionProfile,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J8", &sipSelf, sipType_QOpenGLContext, &sipCpp, sipType_QOpenGLVersionProfile, &a0))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 78 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglcontext.sip"
        sipRes = qpyopengl_version_functions(sipCpp, sipSelf, a0);
#line 26536 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_versionFunctions, doc_QOpenGLContext_versionFunctions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_openGLModuleHandle, "openGLModuleHandle() -> sip.voidptr");

extern "C" {static PyObject *meth_QOpenGLContext_openGLModuleHandle(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_openGLModuleHandle(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            void*sipRes;

            sipRes =  ::QOpenGLContext::openGLModuleHandle();

            return sipConvertFromVoidPtr(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_openGLModuleHandle, doc_QOpenGLContext_openGLModuleHandle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_openGLModuleType, "openGLModuleType() -> QOpenGLContext.OpenGLModuleType");

extern "C" {static PyObject *meth_QOpenGLContext_openGLModuleType(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_openGLModuleType(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QOpenGLContext::OpenGLModuleType sipRes;

            sipRes =  ::QOpenGLContext::openGLModuleType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QOpenGLContext_OpenGLModuleType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_openGLModuleType, doc_QOpenGLContext_openGLModuleType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_isOpenGLES, "isOpenGLES(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLContext_isOpenGLES(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_isOpenGLES(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLContext, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isOpenGLES();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_isOpenGLES, doc_QOpenGLContext_isOpenGLES);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_setNativeHandle, "setNativeHandle(self, Any)");

extern "C" {static PyObject *meth_QOpenGLContext_setNativeHandle(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_setNativeHandle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant* a0;
        int a0State = 0;
         ::QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QOpenGLContext, &sipCpp, sipType_QVariant, &a0, &a0State))
        {
            sipCpp->setNativeHandle(*a0);
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_setNativeHandle, doc_QOpenGLContext_setNativeHandle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_nativeHandle, "nativeHandle(self) -> Any");

extern "C" {static PyObject *meth_QOpenGLContext_nativeHandle(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_nativeHandle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLContext, &sipCpp))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->nativeHandle());

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_nativeHandle, doc_QOpenGLContext_nativeHandle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_supportsThreadedOpenGL, "supportsThreadedOpenGL() -> bool");

extern "C" {static PyObject *meth_QOpenGLContext_supportsThreadedOpenGL(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_supportsThreadedOpenGL(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes =  ::QOpenGLContext::supportsThreadedOpenGL();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_supportsThreadedOpenGL, doc_QOpenGLContext_supportsThreadedOpenGL);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContext_globalShareContext, "globalShareContext() -> QOpenGLContext");

extern "C" {static PyObject *meth_QOpenGLContext_globalShareContext(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_globalShareContext(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QOpenGLContext*sipRes;

            sipRes =  ::QOpenGLContext::globalShareContext();

            return sipConvertFromType(sipRes,sipType_QOpenGLContext,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_globalShareContext, doc_QOpenGLContext_globalShareContext);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QOpenGLContext(void *, const sipTypeDef *);}
static void *cast_QOpenGLContext(void *sipCppV, const sipTypeDef *targetType)
{
     ::QOpenGLContext *sipCpp = reinterpret_cast< ::QOpenGLContext *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QOpenGLContext(void *, int);}
static void release_QOpenGLContext(void *sipCppV, int)
{
     ::QOpenGLContext *sipCpp = reinterpret_cast< ::QOpenGLContext *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QOpenGLContext(sipSimpleWrapper *);}
static void dealloc_QOpenGLContext(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQOpenGLContext *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QOpenGLContext(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QOpenGLContext(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOpenGLContext(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQOpenGLContext *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQOpenGLContext(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QOpenGLContext[] = {{25, 0, 1}};


static PyMethodDef methods_QOpenGLContext[] = {
    {SIP_MLNAME_CAST(sipName_areSharing), meth_QOpenGLContext_areSharing, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_areSharing)},
    {SIP_MLNAME_CAST(sipName_create), meth_QOpenGLContext_create, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_create)},
    {SIP_MLNAME_CAST(sipName_currentContext), meth_QOpenGLContext_currentContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_currentContext)},
    {SIP_MLNAME_CAST(sipName_defaultFramebufferObject), meth_QOpenGLContext_defaultFramebufferObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_defaultFramebufferObject)},
    {SIP_MLNAME_CAST(sipName_doneCurrent), meth_QOpenGLContext_doneCurrent, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_doneCurrent)},
    {SIP_MLNAME_CAST(sipName_extensions), meth_QOpenGLContext_extensions, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_extensions)},
    {SIP_MLNAME_CAST(sipName_format), meth_QOpenGLContext_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_format)},
    {SIP_MLNAME_CAST(sipName_globalShareContext), meth_QOpenGLContext_globalShareContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_globalShareContext)},
    {SIP_MLNAME_CAST(sipName_hasExtension), meth_QOpenGLContext_hasExtension, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_hasExtension)},
    {SIP_MLNAME_CAST(sipName_isOpenGLES), meth_QOpenGLContext_isOpenGLES, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_isOpenGLES)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QOpenGLContext_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_isValid)},
    {SIP_MLNAME_CAST(sipName_makeCurrent), meth_QOpenGLContext_makeCurrent, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_makeCurrent)},
    {SIP_MLNAME_CAST(sipName_nativeHandle), meth_QOpenGLContext_nativeHandle, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_nativeHandle)},
    {SIP_MLNAME_CAST(sipName_openGLModuleHandle), meth_QOpenGLContext_openGLModuleHandle, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_openGLModuleHandle)},
    {SIP_MLNAME_CAST(sipName_openGLModuleType), meth_QOpenGLContext_openGLModuleType, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_openGLModuleType)},
    {SIP_MLNAME_CAST(sipName_screen), meth_QOpenGLContext_screen, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_screen)},
    {SIP_MLNAME_CAST(sipName_setFormat), meth_QOpenGLContext_setFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_setFormat)},
    {SIP_MLNAME_CAST(sipName_setNativeHandle), meth_QOpenGLContext_setNativeHandle, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_setNativeHandle)},
    {SIP_MLNAME_CAST(sipName_setScreen), meth_QOpenGLContext_setScreen, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_setScreen)},
    {SIP_MLNAME_CAST(sipName_setShareContext), meth_QOpenGLContext_setShareContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_setShareContext)},
    {SIP_MLNAME_CAST(sipName_shareContext), meth_QOpenGLContext_shareContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_shareContext)},
    {SIP_MLNAME_CAST(sipName_shareGroup), meth_QOpenGLContext_shareGroup, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_shareGroup)},
    {SIP_MLNAME_CAST(sipName_supportsThreadedOpenGL), meth_QOpenGLContext_supportsThreadedOpenGL, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_supportsThreadedOpenGL)},
    {SIP_MLNAME_CAST(sipName_surface), meth_QOpenGLContext_surface, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_surface)},
    {SIP_MLNAME_CAST(sipName_swapBuffers), meth_QOpenGLContext_swapBuffers, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_swapBuffers)},
    {SIP_MLNAME_CAST(sipName_versionFunctions), SIP_MLMETH_CAST(meth_QOpenGLContext_versionFunctions), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLContext_versionFunctions)}
};

static sipEnumMemberDef enummembers_QOpenGLContext[] = {
    {sipName_LibGL, static_cast<int>( ::QOpenGLContext::LibGL), 132},
    {sipName_LibGLES, static_cast<int>( ::QOpenGLContext::LibGLES), 132},
};

PyDoc_STRVAR(doc_QOpenGLContext, "\1QOpenGLContext(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QOpenGLContext[] = {
    {"aboutToBeDestroyed()", "\1aboutToBeDestroyed(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QOpenGLContext = {
    & ::QOpenGLContext::staticMetaObject,
    0,
    signals_QOpenGLContext,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QOpenGLContext = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QOpenGLContext,
        {SIP_NULLPTR},
        &plugin_QOpenGLContext
    },
    {
        sipNameNr_QOpenGLContext,
        {0, 0, 1},
        26, methods_QOpenGLContext,
        2, enummembers_QOpenGLContext,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QOpenGLContext,
    -1,
    -1,
    supers_QOpenGLContext,
    SIP_NULLPTR,
    init_type_QOpenGLContext,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QOpenGLContext,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QOpenGLContext,
    cast_QOpenGLContext,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglcontext.sip"
#include <qopenglcontext.h>
#line 26912 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 26916 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 46 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglcontext.sip"
#include <qopenglcontext.h>
#line 26919 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 26922 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 26925 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 26928 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 26931 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 26934 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 26937 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 26940 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 26943 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 26946 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 26949 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 26952 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 26955 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 26958 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 26961 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 26964 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 26967 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QOpenGLContextGroup_shares, "shares(self) -> List[QOpenGLContext]");

extern "C" {static PyObject *meth_QOpenGLContextGroup_shares(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContextGroup_shares(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLContextGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLContextGroup, &sipCpp))
        {
            QList< ::QOpenGLContext*>*sipRes;

            sipRes = new QList< ::QOpenGLContext*>(sipCpp->shares());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QOpenGLContext,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContextGroup, sipName_shares, doc_QOpenGLContextGroup_shares);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLContextGroup_currentContextGroup, "currentContextGroup() -> QOpenGLContextGroup");

extern "C" {static PyObject *meth_QOpenGLContextGroup_currentContextGroup(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContextGroup_currentContextGroup(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QOpenGLContextGroup*sipRes;

            sipRes =  ::QOpenGLContextGroup::currentContextGroup();

            return sipConvertFromType(sipRes,sipType_QOpenGLContextGroup,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContextGroup, sipName_currentContextGroup, doc_QOpenGLContextGroup_currentContextGroup);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QOpenGLContextGroup(void *, const sipTypeDef *);}
static void *cast_QOpenGLContextGroup(void *sipCppV, const sipTypeDef *targetType)
{
     ::QOpenGLContextGroup *sipCpp = reinterpret_cast< ::QOpenGLContextGroup *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QOpenGLContextGroup(void *, int);}
static void release_QOpenGLContextGroup(void *sipCppV, int)
{
     ::QOpenGLContextGroup *sipCpp = reinterpret_cast< ::QOpenGLContextGroup *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QOpenGLContextGroup(sipSimpleWrapper *);}
static void dealloc_QOpenGLContextGroup(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QOpenGLContextGroup(sipGetAddress(sipSelf), 0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QOpenGLContextGroup[] = {{25, 0, 1}};


static PyMethodDef methods_QOpenGLContextGroup[] = {
    {SIP_MLNAME_CAST(sipName_currentContextGroup), meth_QOpenGLContextGroup_currentContextGroup, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContextGroup_currentContextGroup)},
    {SIP_MLNAME_CAST(sipName_shares), meth_QOpenGLContextGroup_shares, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContextGroup_shares)}
};


static pyqt5ClassPluginDef plugin_QOpenGLContextGroup = {
    & ::QOpenGLContextGroup::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QOpenGLContextGroup = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QOpenGLContextGroup,
        {SIP_NULLPTR},
        &plugin_QOpenGLContextGroup
    },
    {
        sipNameNr_QOpenGLContextGroup,
        {0, 0, 1},
        2, methods_QOpenGLContextGroup,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_QOpenGLContextGroup,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QOpenGLContextGroup,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QOpenGLContextGroup,
    cast_QOpenGLContextGroup,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglbuffer.sip"
#include <qopenglbuffer.h>
#line 27129 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglbuffer.sip"
#include <qopenglbuffer.h>
#line 27133 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


extern "C" {static long slot_QOpenGLBuffer_RangeAccessFlags___hash__(PyObject *);}
static long slot_QOpenGLBuffer_RangeAccessFlags___hash__(PyObject *sipSelf)
{
     ::QOpenGLBuffer::RangeAccessFlags *sipCpp = reinterpret_cast< ::QOpenGLBuffer::RangeAccessFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLBuffer_RangeAccessFlags));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QOpenGLBuffer::RangeAccessFlags::Int();
#line 27151 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QOpenGLBuffer_RangeAccessFlags___bool__(PyObject *);}
static int slot_QOpenGLBuffer_RangeAccessFlags___bool__(PyObject *sipSelf)
{
     ::QOpenGLBuffer::RangeAccessFlags *sipCpp = reinterpret_cast< ::QOpenGLBuffer::RangeAccessFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLBuffer_RangeAccessFlags));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QOpenGLBuffer::RangeAccessFlags::Int() != 0);
#line 27176 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QOpenGLBuffer_RangeAccessFlags___ne__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLBuffer_RangeAccessFlags___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QOpenGLBuffer::RangeAccessFlags *sipCpp = reinterpret_cast< ::QOpenGLBuffer::RangeAccessFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLBuffer_RangeAccessFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLBuffer::RangeAccessFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QOpenGLBuffer_RangeAccessFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QOpenGLBuffer::RangeAccessFlags::Int() != a0->operator QOpenGLBuffer::RangeAccessFlags::Int());
#line 27206 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
            sipReleaseType(const_cast< ::QOpenGLBuffer::RangeAccessFlags *>(a0),sipType_QOpenGLBuffer_RangeAccessFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QOpenGLBuffer_RangeAccessFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QOpenGLBuffer_RangeAccessFlags___eq__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLBuffer_RangeAccessFlags___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QOpenGLBuffer::RangeAccessFlags *sipCpp = reinterpret_cast< ::QOpenGLBuffer::RangeAccessFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLBuffer_RangeAccessFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLBuffer::RangeAccessFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QOpenGLBuffer_RangeAccessFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QOpenGLBuffer::RangeAccessFlags::Int() == a0->operator QOpenGLBuffer::RangeAccessFlags::Int());
#line 27242 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
            sipReleaseType(const_cast< ::QOpenGLBuffer::RangeAccessFlags *>(a0),sipType_QOpenGLBuffer_RangeAccessFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QOpenGLBuffer_RangeAccessFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QOpenGLBuffer_RangeAccessFlags___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLBuffer_RangeAccessFlags___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QOpenGLBuffer_RangeAccessFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QOpenGLBuffer::RangeAccessFlags *sipCpp = reinterpret_cast< ::QOpenGLBuffer::RangeAccessFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLBuffer_RangeAccessFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QOpenGLBuffer::RangeAccessFlags(*sipCpp ^ a0);
#line 27281 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QOpenGLBuffer_RangeAccessFlags___xor__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLBuffer_RangeAccessFlags___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLBuffer::RangeAccessFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QOpenGLBuffer_RangeAccessFlags, &a0, &a0State, &a1))
        {
             ::QOpenGLBuffer::RangeAccessFlags*sipRes;

            sipRes = new  ::QOpenGLBuffer::RangeAccessFlags((*a0 ^ a1));
            sipReleaseType(a0,sipType_QOpenGLBuffer_RangeAccessFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QOpenGLBuffer_RangeAccessFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QOpenGLBuffer_RangeAccessFlags___ior__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLBuffer_RangeAccessFlags___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QOpenGLBuffer_RangeAccessFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QOpenGLBuffer::RangeAccessFlags *sipCpp = reinterpret_cast< ::QOpenGLBuffer::RangeAccessFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLBuffer_RangeAccessFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QOpenGLBuffer::RangeAccessFlags(*sipCpp | a0);
#line 27353 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QOpenGLBuffer_RangeAccessFlags___or__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLBuffer_RangeAccessFlags___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLBuffer::RangeAccessFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QOpenGLBuffer_RangeAccessFlags, &a0, &a0State, &a1))
        {
             ::QOpenGLBuffer::RangeAccessFlags*sipRes;

            sipRes = new  ::QOpenGLBuffer::RangeAccessFlags((*a0 | a1));
            sipReleaseType(a0,sipType_QOpenGLBuffer_RangeAccessFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QOpenGLBuffer_RangeAccessFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QOpenGLBuffer_RangeAccessFlags___iand__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLBuffer_RangeAccessFlags___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QOpenGLBuffer_RangeAccessFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QOpenGLBuffer::RangeAccessFlags *sipCpp = reinterpret_cast< ::QOpenGLBuffer::RangeAccessFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLBuffer_RangeAccessFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QOpenGLBuffer::RangeAccessFlags::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QOpenGLBuffer_RangeAccessFlags___and__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLBuffer_RangeAccessFlags___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLBuffer::RangeAccessFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QOpenGLBuffer_RangeAccessFlags, &a0, &a0State, &a1))
        {
             ::QOpenGLBuffer::RangeAccessFlags*sipRes;

            sipRes = new  ::QOpenGLBuffer::RangeAccessFlags((*a0 & a1));
            sipReleaseType(a0,sipType_QOpenGLBuffer_RangeAccessFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QOpenGLBuffer_RangeAccessFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QOpenGLBuffer_RangeAccessFlags___invert__(PyObject *);}
static PyObject *slot_QOpenGLBuffer_RangeAccessFlags___invert__(PyObject *sipSelf)
{
     ::QOpenGLBuffer::RangeAccessFlags *sipCpp = reinterpret_cast< ::QOpenGLBuffer::RangeAccessFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLBuffer_RangeAccessFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QOpenGLBuffer::RangeAccessFlags*sipRes;

            sipRes = new  ::QOpenGLBuffer::RangeAccessFlags(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QOpenGLBuffer_RangeAccessFlags,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QOpenGLBuffer_RangeAccessFlags___int__(PyObject *);}
static PyObject *slot_QOpenGLBuffer_RangeAccessFlags___int__(PyObject *sipSelf)
{
     ::QOpenGLBuffer::RangeAccessFlags *sipCpp = reinterpret_cast< ::QOpenGLBuffer::RangeAccessFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLBuffer_RangeAccessFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QOpenGLBuffer_RangeAccessFlags(void *, int);}
static void release_QOpenGLBuffer_RangeAccessFlags(void *sipCppV, int)
{
    delete reinterpret_cast< ::QOpenGLBuffer::RangeAccessFlags *>(sipCppV);
}


extern "C" {static void assign_QOpenGLBuffer_RangeAccessFlags(void *, SIP_SSIZE_T, void *);}
static void assign_QOpenGLBuffer_RangeAccessFlags(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QOpenGLBuffer::RangeAccessFlags *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QOpenGLBuffer::RangeAccessFlags *>(sipSrc);
}


extern "C" {static void *array_QOpenGLBuffer_RangeAccessFlags(SIP_SSIZE_T);}
static void *array_QOpenGLBuffer_RangeAccessFlags(SIP_SSIZE_T sipNrElem)
{
    return new  ::QOpenGLBuffer::RangeAccessFlags[sipNrElem];
}


extern "C" {static void *copy_QOpenGLBuffer_RangeAccessFlags(const void *, SIP_SSIZE_T);}
static void *copy_QOpenGLBuffer_RangeAccessFlags(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QOpenGLBuffer::RangeAccessFlags(reinterpret_cast<const  ::QOpenGLBuffer::RangeAccessFlags *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QOpenGLBuffer_RangeAccessFlags(sipSimpleWrapper *);}
static void dealloc_QOpenGLBuffer_RangeAccessFlags(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QOpenGLBuffer_RangeAccessFlags(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QOpenGLBuffer_RangeAccessFlags(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOpenGLBuffer_RangeAccessFlags(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QOpenGLBuffer::RangeAccessFlags *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QOpenGLBuffer::RangeAccessFlags();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QOpenGLBuffer::RangeAccessFlags(a0);

            return sipCpp;
        }
    }

    {
        const  ::QOpenGLBuffer::RangeAccessFlags* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QOpenGLBuffer_RangeAccessFlags, &a0, &a0State))
        {
            sipCpp = new  ::QOpenGLBuffer::RangeAccessFlags(*a0);
            sipReleaseType(const_cast< ::QOpenGLBuffer::RangeAccessFlags *>(a0),sipType_QOpenGLBuffer_RangeAccessFlags,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QOpenGLBuffer_RangeAccessFlags(PyObject *, void **, int *, PyObject *);}
static int convertTo_QOpenGLBuffer_RangeAccessFlags(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QOpenGLBuffer::RangeAccessFlags **sipCppPtr = reinterpret_cast< ::QOpenGLBuffer::RangeAccessFlags **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QOpenGLBuffer::RangeAccessFlags is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QOpenGLBuffer_RangeAccessFlag)) ||
            sipCanConvertToType(sipPy, sipType_QOpenGLBuffer_RangeAccessFlags, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QOpenGLBuffer_RangeAccessFlag)))
{
    *sipCppPtr = new QOpenGLBuffer::RangeAccessFlags(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QOpenGLBuffer::RangeAccessFlags *>(sipConvertToType(sipPy, sipType_QOpenGLBuffer_RangeAccessFlags, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 27621 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QOpenGLBuffer_RangeAccessFlags[] = {
    {(void *)slot_QOpenGLBuffer_RangeAccessFlags___hash__, hash_slot},
    {(void *)slot_QOpenGLBuffer_RangeAccessFlags___bool__, bool_slot},
    {(void *)slot_QOpenGLBuffer_RangeAccessFlags___ne__, ne_slot},
    {(void *)slot_QOpenGLBuffer_RangeAccessFlags___eq__, eq_slot},
    {(void *)slot_QOpenGLBuffer_RangeAccessFlags___ixor__, ixor_slot},
    {(void *)slot_QOpenGLBuffer_RangeAccessFlags___xor__, xor_slot},
    {(void *)slot_QOpenGLBuffer_RangeAccessFlags___ior__, ior_slot},
    {(void *)slot_QOpenGLBuffer_RangeAccessFlags___or__, or_slot},
    {(void *)slot_QOpenGLBuffer_RangeAccessFlags___iand__, iand_slot},
    {(void *)slot_QOpenGLBuffer_RangeAccessFlags___and__, and_slot},
    {(void *)slot_QOpenGLBuffer_RangeAccessFlags___invert__, invert_slot},
    {(void *)slot_QOpenGLBuffer_RangeAccessFlags___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QOpenGLBuffer_RangeAccessFlags, "\1QOpenGLBuffer.RangeAccessFlags()\n"
"QOpenGLBuffer.RangeAccessFlags(Union[QOpenGLBuffer.RangeAccessFlags, QOpenGLBuffer.RangeAccessFlag])\n"
"QOpenGLBuffer.RangeAccessFlags(QOpenGLBuffer.RangeAccessFlags)");


static pyqt5ClassPluginDef plugin_QOpenGLBuffer_RangeAccessFlags = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QOpenGLBuffer_RangeAccessFlags = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QOpenGLBuffer__RangeAccessFlags,
        {SIP_NULLPTR},
        &plugin_QOpenGLBuffer_RangeAccessFlags
    },
    {
        sipNameNr_RangeAccessFlags,
        {125, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QOpenGLBuffer_RangeAccessFlags,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QOpenGLBuffer_RangeAccessFlags,
    init_type_QOpenGLBuffer_RangeAccessFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QOpenGLBuffer_RangeAccessFlags,
    assign_QOpenGLBuffer_RangeAccessFlags,
    array_QOpenGLBuffer_RangeAccessFlags,
    copy_QOpenGLBuffer_RangeAccessFlags,
    release_QOpenGLBuffer_RangeAccessFlags,
    SIP_NULLPTR,
    convertTo_QOpenGLBuffer_RangeAccessFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglbuffer.sip"
#include <qopenglbuffer.h>
#line 27709 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglbuffer.sip"
#include <qopenglbuffer.h>
#line 27713 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QOpenGLBuffer_type, "type(self) -> QOpenGLBuffer.Type");

extern "C" {static PyObject *meth_QOpenGLBuffer_type(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLBuffer_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLBuffer, &sipCpp))
        {
             ::QOpenGLBuffer::Type sipRes;

            sipRes = sipCpp->type();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QOpenGLBuffer_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLBuffer, sipName_type, doc_QOpenGLBuffer_type);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLBuffer_usagePattern, "usagePattern(self) -> QOpenGLBuffer.UsagePattern");

extern "C" {static PyObject *meth_QOpenGLBuffer_usagePattern(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLBuffer_usagePattern(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLBuffer, &sipCpp))
        {
             ::QOpenGLBuffer::UsagePattern sipRes;

            sipRes = sipCpp->usagePattern();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QOpenGLBuffer_UsagePattern);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLBuffer, sipName_usagePattern, doc_QOpenGLBuffer_usagePattern);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLBuffer_setUsagePattern, "setUsagePattern(self, QOpenGLBuffer.UsagePattern)");

extern "C" {static PyObject *meth_QOpenGLBuffer_setUsagePattern(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLBuffer_setUsagePattern(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLBuffer::UsagePattern a0;
         ::QOpenGLBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QOpenGLBuffer, &sipCpp, sipType_QOpenGLBuffer_UsagePattern, &a0))
        {
            sipCpp->setUsagePattern(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLBuffer, sipName_setUsagePattern, doc_QOpenGLBuffer_setUsagePattern);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLBuffer_create, "create(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLBuffer_create(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLBuffer_create(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLBuffer, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->create();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLBuffer, sipName_create, doc_QOpenGLBuffer_create);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLBuffer_isCreated, "isCreated(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLBuffer_isCreated(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLBuffer_isCreated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLBuffer, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isCreated();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLBuffer, sipName_isCreated, doc_QOpenGLBuffer_isCreated);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLBuffer_destroy, "destroy(self)");

extern "C" {static PyObject *meth_QOpenGLBuffer_destroy(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLBuffer_destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLBuffer, &sipCpp))
        {
            sipCpp->destroy();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLBuffer, sipName_destroy, doc_QOpenGLBuffer_destroy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLBuffer_bind, "bind(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLBuffer_bind(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLBuffer_bind(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLBuffer, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->bind();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLBuffer, sipName_bind, doc_QOpenGLBuffer_bind);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLBuffer_release, "release(self)\n"
"release(QOpenGLBuffer.Type)");

extern "C" {static PyObject *meth_QOpenGLBuffer_release(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLBuffer_release(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLBuffer, &sipCpp))
        {
            sipCpp->release();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QOpenGLBuffer::Type a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QOpenGLBuffer_Type, &a0))
        {
             ::QOpenGLBuffer::release(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLBuffer, sipName_release, doc_QOpenGLBuffer_release);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLBuffer_bufferId, "bufferId(self) -> int");

extern "C" {static PyObject *meth_QOpenGLBuffer_bufferId(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLBuffer_bufferId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLBuffer, &sipCpp))
        {
             ::GLuint sipRes;

            sipRes = sipCpp->bufferId();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLBuffer, sipName_bufferId, doc_QOpenGLBuffer_bufferId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLBuffer_size, "size(self) -> int");

extern "C" {static PyObject *meth_QOpenGLBuffer_size(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLBuffer_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOpenGLBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLBuffer, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->size();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLBuffer, sipName_size, doc_QOpenGLBuffer_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLBuffer_read, "read(self, int, sip.voidptr, int) -> bool");

extern "C" {static PyObject *meth_QOpenGLBuffer_read(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLBuffer_read(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        void* a1;
        int a2;
         ::QOpenGLBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bivi", &sipSelf, sipType_QOpenGLBuffer, &sipCpp, &a0, &a1, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->read(a0,a1,a2);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLBuffer, sipName_read, doc_QOpenGLBuffer_read);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLBuffer_write, "write(self, int, sip.voidptr, int)");

extern "C" {static PyObject *meth_QOpenGLBuffer_write(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLBuffer_write(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const void* a1;
        int a2;
         ::QOpenGLBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bivi", &sipSelf, sipType_QOpenGLBuffer, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->write(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLBuffer, sipName_write, doc_QOpenGLBuffer_write);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLBuffer_allocate, "allocate(self, sip.voidptr, int)\n"
"allocate(self, int)");

extern "C" {static PyObject *meth_QOpenGLBuffer_allocate(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLBuffer_allocate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const void* a0;
        int a1;
         ::QOpenGLBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bvi", &sipSelf, sipType_QOpenGLBuffer, &sipCpp, &a0, &a1))
        {
            sipCpp->allocate(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::QOpenGLBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLBuffer, &sipCpp, &a0))
        {
            sipCpp->allocate(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLBuffer, sipName_allocate, doc_QOpenGLBuffer_allocate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLBuffer_map, "map(self, QOpenGLBuffer.Access) -> sip.voidptr");

extern "C" {static PyObject *meth_QOpenGLBuffer_map(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLBuffer_map(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLBuffer::Access a0;
         ::QOpenGLBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QOpenGLBuffer, &sipCpp, sipType_QOpenGLBuffer_Access, &a0))
        {
            void*sipRes;

            sipRes = sipCpp->map(a0);

            return sipConvertFromVoidPtr(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLBuffer, sipName_map, doc_QOpenGLBuffer_map);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLBuffer_unmap, "unmap(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLBuffer_unmap(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLBuffer_unmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLBuffer, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->unmap();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLBuffer, sipName_unmap, doc_QOpenGLBuffer_unmap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOpenGLBuffer_mapRange, "mapRange(self, int, int, Union[QOpenGLBuffer.RangeAccessFlags, QOpenGLBuffer.RangeAccessFlag]) -> sip.voidptr");

extern "C" {static PyObject *meth_QOpenGLBuffer_mapRange(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLBuffer_mapRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QOpenGLBuffer::RangeAccessFlags* a2;
        int a2State = 0;
         ::QOpenGLBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ1", &sipSelf, sipType_QOpenGLBuffer, &sipCpp, &a0, &a1, sipType_QOpenGLBuffer_RangeAccessFlags, &a2, &a2State))
        {
            void*sipRes;

            sipRes = sipCpp->mapRange(a0,a1,*a2);
            sipReleaseType(a2,sipType_QOpenGLBuffer_RangeAccessFlags,a2State);

            return sipConvertFromVoidPtr(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLBuffer, sipName_mapRange, doc_QOpenGLBuffer_mapRange);

    return SIP_NULLPTR;
}


extern "C" {static SIP_SSIZE_T slot_QOpenGLBuffer___len__(PyObject *);}
static SIP_SSIZE_T slot_QOpenGLBuffer___len__(PyObject *sipSelf)
{
     ::QOpenGLBuffer *sipCpp = reinterpret_cast< ::QOpenGLBuffer *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLBuffer));

    if (!sipCpp)
        return 0;


    {
        {
            SIP_SSIZE_T sipRes = 0;

#line 1 "Auto-generated"
            sipRes = (SIP_SSIZE_T)sipCpp->size();
#line 28218 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QOpenGLBuffer(void *, int);}
static void release_QOpenGLBuffer(void *sipCppV, int)
{
    delete reinterpret_cast< ::QOpenGLBuffer *>(sipCppV);
}


extern "C" {static void assign_QOpenGLBuffer(void *, SIP_SSIZE_T, void *);}
static void assign_QOpenGLBuffer(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QOpenGLBuffer *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QOpenGLBuffer *>(sipSrc);
}


extern "C" {static void *array_QOpenGLBuffer(SIP_SSIZE_T);}
static void *array_QOpenGLBuffer(SIP_SSIZE_T sipNrElem)
{
    return new  ::QOpenGLBuffer[sipNrElem];
}


extern "C" {static void *copy_QOpenGLBuffer(const void *, SIP_SSIZE_T);}
static void *copy_QOpenGLBuffer(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QOpenGLBuffer(reinterpret_cast<const  ::QOpenGLBuffer *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QOpenGLBuffer(sipSimpleWrapper *);}
static void dealloc_QOpenGLBuffer(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QOpenGLBuffer(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QOpenGLBuffer(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOpenGLBuffer(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QOpenGLBuffer *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QOpenGLBuffer();

            return sipCpp;
        }
    }

    {
         ::QOpenGLBuffer::Type a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "E", sipType_QOpenGLBuffer_Type, &a0))
        {
            sipCpp = new  ::QOpenGLBuffer(a0);

            return sipCpp;
        }
    }

    {
        const  ::QOpenGLBuffer* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QOpenGLBuffer, &a0))
        {
            sipCpp = new  ::QOpenGLBuffer(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QOpenGLBuffer[] = {
    {(void *)slot_QOpenGLBuffer___len__, len_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QOpenGLBuffer[] = {
    {SIP_MLNAME_CAST(sipName_allocate), meth_QOpenGLBuffer_allocate, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLBuffer_allocate)},
    {SIP_MLNAME_CAST(sipName_bind), meth_QOpenGLBuffer_bind, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLBuffer_bind)},
    {SIP_MLNAME_CAST(sipName_bufferId), meth_QOpenGLBuffer_bufferId, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLBuffer_bufferId)},
    {SIP_MLNAME_CAST(sipName_create), meth_QOpenGLBuffer_create, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLBuffer_create)},
    {SIP_MLNAME_CAST(sipName_destroy), meth_QOpenGLBuffer_destroy, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLBuffer_destroy)},
    {SIP_MLNAME_CAST(sipName_isCreated), meth_QOpenGLBuffer_isCreated, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLBuffer_isCreated)},
    {SIP_MLNAME_CAST(sipName_map), meth_QOpenGLBuffer_map, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLBuffer_map)},
    {SIP_MLNAME_CAST(sipName_mapRange), meth_QOpenGLBuffer_mapRange, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLBuffer_mapRange)},
    {SIP_MLNAME_CAST(sipName_read), meth_QOpenGLBuffer_read, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLBuffer_read)},
    {SIP_MLNAME_CAST(sipName_release), meth_QOpenGLBuffer_release, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLBuffer_release)},
    {SIP_MLNAME_CAST(sipName_setUsagePattern), meth_QOpenGLBuffer_setUsagePattern, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLBuffer_setUsagePattern)},
    {SIP_MLNAME_CAST(sipName_size), meth_QOpenGLBuffer_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLBuffer_size)},
    {SIP_MLNAME_CAST(sipName_type), meth_QOpenGLBuffer_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLBuffer_type)},
    {SIP_MLNAME_CAST(sipName_unmap), meth_QOpenGLBuffer_unmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLBuffer_unmap)},
    {SIP_MLNAME_CAST(sipName_usagePattern), meth_QOpenGLBuffer_usagePattern, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLBuffer_usagePattern)},
    {SIP_MLNAME_CAST(sipName_write), meth_QOpenGLBuffer_write, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLBuffer_write)}
};

static sipEnumMemberDef enummembers_QOpenGLBuffer[] = {
    {sipName_DynamicCopy, static_cast<int>( ::QOpenGLBuffer::DynamicCopy), 130},
    {sipName_DynamicDraw, static_cast<int>( ::QOpenGLBuffer::DynamicDraw), 130},
    {sipName_DynamicRead, static_cast<int>( ::QOpenGLBuffer::DynamicRead), 130},
    {sipName_IndexBuffer, static_cast<int>( ::QOpenGLBuffer::IndexBuffer), 129},
    {sipName_PixelPackBuffer, static_cast<int>( ::QOpenGLBuffer::PixelPackBuffer), 129},
    {sipName_PixelUnpackBuffer, static_cast<int>( ::QOpenGLBuffer::PixelUnpackBuffer), 129},
    {sipName_RangeFlushExplicit, static_cast<int>( ::QOpenGLBuffer::RangeFlushExplicit), 127},
    {sipName_RangeInvalidate, static_cast<int>( ::QOpenGLBuffer::RangeInvalidate), 127},
    {sipName_RangeInvalidateBuffer, static_cast<int>( ::QOpenGLBuffer::RangeInvalidateBuffer), 127},
    {sipName_RangeRead, static_cast<int>( ::QOpenGLBuffer::RangeRead), 127},
    {sipName_RangeUnsynchronized, static_cast<int>( ::QOpenGLBuffer::RangeUnsynchronized), 127},
    {sipName_RangeWrite, static_cast<int>( ::QOpenGLBuffer::RangeWrite), 127},
    {sipName_ReadOnly, static_cast<int>( ::QOpenGLBuffer::ReadOnly), 126},
    {sipName_ReadWrite, static_cast<int>( ::QOpenGLBuffer::ReadWrite), 126},
    {sipName_StaticCopy, static_cast<int>( ::QOpenGLBuffer::StaticCopy), 130},
    {sipName_StaticDraw, static_cast<int>( ::QOpenGLBuffer::StaticDraw), 130},
    {sipName_StaticRead, static_cast<int>( ::QOpenGLBuffer::StaticRead), 130},
    {sipName_StreamCopy, static_cast<int>( ::QOpenGLBuffer::StreamCopy), 130},
    {sipName_StreamDraw, static_cast<int>( ::QOpenGLBuffer::StreamDraw), 130},
    {sipName_StreamRead, static_cast<int>( ::QOpenGLBuffer::StreamRead), 130},
    {sipName_VertexBuffer, static_cast<int>( ::QOpenGLBuffer::VertexBuffer), 129},
    {sipName_WriteOnly, static_cast<int>( ::QOpenGLBuffer::WriteOnly), 126},
};

PyDoc_STRVAR(doc_QOpenGLBuffer, "\1QOpenGLBuffer()\n"
"QOpenGLBuffer(QOpenGLBuffer.Type)\n"
"QOpenGLBuffer(QOpenGLBuffer)");


static pyqt5ClassPluginDef plugin_QOpenGLBuffer = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QOpenGLBuffer = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QOpenGLBuffer,
        {SIP_NULLPTR},
        &plugin_QOpenGLBuffer
    },
    {
        sipNameNr_QOpenGLBuffer,
        {0, 0, 1},
        16, methods_QOpenGLBuffer,
        22, enummembers_QOpenGLBuffer,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QOpenGLBuffer,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QOpenGLBuffer,
    init_type_QOpenGLBuffer,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QOpenGLBuffer,
    assign_QOpenGLBuffer,
    array_QOpenGLBuffer,
    copy_QOpenGLBuffer,
    release_QOpenGLBuffer,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qoffscreensurface.sip"
#include <qoffscreensurface.h>
#line 28425 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qscreen.sip"
#include <qscreen.h>
#line 28429 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 28432 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 28435 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qsurfaceformat.sip"
#include <qsurfaceformat.h>
#line 28438 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qsurface.sip"
#include <qsurface.h>
#line 28441 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 28444 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 28447 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 28450 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 28453 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 28456 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 28459 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 28462 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 28465 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 28468 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 28471 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 28474 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 28477 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 28480 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 28483 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 28486 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQOffscreenSurface : public  ::QOffscreenSurface
{
public:
    sipQOffscreenSurface( ::QScreen*);
    sipQOffscreenSurface( ::QScreen*, ::QObject*);
    virtual ~sipQOffscreenSurface();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QSurfaceFormat format() const SIP_OVERRIDE;
     ::QSurface::SurfaceType surfaceType() const SIP_OVERRIDE;
     ::QSize size() const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQOffscreenSurface(const sipQOffscreenSurface &);
    sipQOffscreenSurface &operator = (const sipQOffscreenSurface &);

    char sipPyMethods[10];
};

sipQOffscreenSurface::sipQOffscreenSurface( ::QScreen*a0):  ::QOffscreenSurface(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQOffscreenSurface::sipQOffscreenSurface( ::QScreen*a0, ::QObject*a1):  ::QOffscreenSurface(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQOffscreenSurface::~sipQOffscreenSurface()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQOffscreenSurface::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QOffscreenSurface);

    return  ::QOffscreenSurface::metaObject();
}

int sipQOffscreenSurface::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QOffscreenSurface::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QOffscreenSurface,_c,_id,_a);

    return _id;
}

void *sipQOffscreenSurface::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QOffscreenSurface, _clname, &sipCpp) ? sipCpp :  ::QOffscreenSurface::qt_metacast(_clname));
}

 ::QSurfaceFormat sipQOffscreenSurface::format() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_format);

    if (!sipMeth)
        return  ::QOffscreenSurface::format();

    extern  ::QSurfaceFormat sipVH_QtGui_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_36(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSurface::SurfaceType sipQOffscreenSurface::surfaceType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_surfaceType);

    if (!sipMeth)
        return  ::QOffscreenSurface::surfaceType();

    extern  ::QSurface::SurfaceType sipVH_QtGui_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_37(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQOffscreenSurface::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,SIP_NULLPTR,sipName_size);

    if (!sipMeth)
        return  ::QOffscreenSurface::size();

    extern  ::QSize sipVH_QtGui_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_38(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQOffscreenSurface::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QOffscreenSurface::event(a0);

    extern bool sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_5(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQOffscreenSurface::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QOffscreenSurface::eventFilter(a0,a1);

    extern bool sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_4(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQOffscreenSurface::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QOffscreenSurface::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_3(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOffscreenSurface::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QOffscreenSurface::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_2(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOffscreenSurface::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QOffscreenSurface::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_1(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOffscreenSurface::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QOffscreenSurface::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQOffscreenSurface::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QOffscreenSurface::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QOffscreenSurface_surfaceType, "surfaceType(self) -> QSurface.SurfaceType");

extern "C" {static PyObject *meth_QOffscreenSurface_surfaceType(PyObject *, PyObject *);}
static PyObject *meth_QOffscreenSurface_surfaceType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QOffscreenSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOffscreenSurface, &sipCpp))
        {
             ::QSurface::SurfaceType sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QOffscreenSurface::surfaceType() : sipCpp->surfaceType());

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSurface_SurfaceType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOffscreenSurface, sipName_surfaceType, doc_QOffscreenSurface_surfaceType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOffscreenSurface_create, "create(self)");

extern "C" {static PyObject *meth_QOffscreenSurface_create(PyObject *, PyObject *);}
static PyObject *meth_QOffscreenSurface_create(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOffscreenSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOffscreenSurface, &sipCpp))
        {
            sipCpp->create();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOffscreenSurface, sipName_create, doc_QOffscreenSurface_create);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOffscreenSurface_destroy, "destroy(self)");

extern "C" {static PyObject *meth_QOffscreenSurface_destroy(PyObject *, PyObject *);}
static PyObject *meth_QOffscreenSurface_destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOffscreenSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOffscreenSurface, &sipCpp))
        {
            sipCpp->destroy();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOffscreenSurface, sipName_destroy, doc_QOffscreenSurface_destroy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOffscreenSurface_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QOffscreenSurface_isValid(PyObject *, PyObject *);}
static PyObject *meth_QOffscreenSurface_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOffscreenSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOffscreenSurface, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOffscreenSurface, sipName_isValid, doc_QOffscreenSurface_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOffscreenSurface_setFormat, "setFormat(self, QSurfaceFormat)");

extern "C" {static PyObject *meth_QOffscreenSurface_setFormat(PyObject *, PyObject *);}
static PyObject *meth_QOffscreenSurface_setFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat* a0;
         ::QOffscreenSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QOffscreenSurface, &sipCpp, sipType_QSurfaceFormat, &a0))
        {
            sipCpp->setFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOffscreenSurface, sipName_setFormat, doc_QOffscreenSurface_setFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOffscreenSurface_format, "format(self) -> QSurfaceFormat");

extern "C" {static PyObject *meth_QOffscreenSurface_format(PyObject *, PyObject *);}
static PyObject *meth_QOffscreenSurface_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QOffscreenSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOffscreenSurface, &sipCpp))
        {
             ::QSurfaceFormat*sipRes;

            sipRes = new  ::QSurfaceFormat((sipSelfWasArg ? sipCpp-> ::QOffscreenSurface::format() : sipCpp->format()));

            return sipConvertFromNewType(sipRes,sipType_QSurfaceFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOffscreenSurface, sipName_format, doc_QOffscreenSurface_format);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOffscreenSurface_requestedFormat, "requestedFormat(self) -> QSurfaceFormat");

extern "C" {static PyObject *meth_QOffscreenSurface_requestedFormat(PyObject *, PyObject *);}
static PyObject *meth_QOffscreenSurface_requestedFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOffscreenSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOffscreenSurface, &sipCpp))
        {
             ::QSurfaceFormat*sipRes;

            sipRes = new  ::QSurfaceFormat(sipCpp->requestedFormat());

            return sipConvertFromNewType(sipRes,sipType_QSurfaceFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOffscreenSurface, sipName_requestedFormat, doc_QOffscreenSurface_requestedFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOffscreenSurface_size, "size(self) -> QSize");

extern "C" {static PyObject *meth_QOffscreenSurface_size(PyObject *, PyObject *);}
static PyObject *meth_QOffscreenSurface_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QOffscreenSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOffscreenSurface, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QOffscreenSurface::size() : sipCpp->size()));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOffscreenSurface, sipName_size, doc_QOffscreenSurface_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOffscreenSurface_screen, "screen(self) -> QScreen");

extern "C" {static PyObject *meth_QOffscreenSurface_screen(PyObject *, PyObject *);}
static PyObject *meth_QOffscreenSurface_screen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOffscreenSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOffscreenSurface, &sipCpp))
        {
             ::QScreen*sipRes;

            sipRes = sipCpp->screen();

            return sipConvertFromType(sipRes,sipType_QScreen,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOffscreenSurface, sipName_screen, doc_QOffscreenSurface_screen);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOffscreenSurface_setScreen, "setScreen(self, QScreen)");

extern "C" {static PyObject *meth_QOffscreenSurface_setScreen(PyObject *, PyObject *);}
static PyObject *meth_QOffscreenSurface_setScreen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QScreen* a0;
         ::QOffscreenSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QOffscreenSurface, &sipCpp, sipType_QScreen, &a0))
        {
            sipCpp->setScreen(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOffscreenSurface, sipName_setScreen, doc_QOffscreenSurface_setScreen);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOffscreenSurface_nativeHandle, "nativeHandle(self) -> sip.voidptr");

extern "C" {static PyObject *meth_QOffscreenSurface_nativeHandle(PyObject *, PyObject *);}
static PyObject *meth_QOffscreenSurface_nativeHandle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOffscreenSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOffscreenSurface, &sipCpp))
        {
            void*sipRes;

            sipRes = sipCpp->nativeHandle();

            return sipConvertFromVoidPtr(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOffscreenSurface, sipName_nativeHandle, doc_QOffscreenSurface_nativeHandle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOffscreenSurface_setNativeHandle, "setNativeHandle(self, sip.voidptr)");

extern "C" {static PyObject *meth_QOffscreenSurface_setNativeHandle(PyObject *, PyObject *);}
static PyObject *meth_QOffscreenSurface_setNativeHandle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        void* a0;
         ::QOffscreenSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bv", &sipSelf, sipType_QOffscreenSurface, &sipCpp, &a0))
        {
            sipCpp->setNativeHandle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOffscreenSurface, sipName_setNativeHandle, doc_QOffscreenSurface_setNativeHandle);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QOffscreenSurface(void *, const sipTypeDef *);}
static void *cast_QOffscreenSurface(void *sipCppV, const sipTypeDef *targetType)
{
     ::QOffscreenSurface *sipCpp = reinterpret_cast< ::QOffscreenSurface *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QSurface)
        return static_cast< ::QSurface *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QOffscreenSurface(void *, int);}
static void release_QOffscreenSurface(void *sipCppV, int)
{
     ::QOffscreenSurface *sipCpp = reinterpret_cast< ::QOffscreenSurface *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QOffscreenSurface(sipSimpleWrapper *);}
static void dealloc_QOffscreenSurface(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQOffscreenSurface *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QOffscreenSurface(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QOffscreenSurface(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOffscreenSurface(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQOffscreenSurface *sipCpp = SIP_NULLPTR;

    {
         ::QScreen* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_screen,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J8", sipType_QScreen, &a0))
        {
            sipCpp = new sipQOffscreenSurface(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QScreen* a0;
         ::QObject* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8JH", sipType_QScreen, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQOffscreenSurface(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QOffscreenSurface[] = {{25, 0, 0}, {268, 255, 1}};


static PyMethodDef methods_QOffscreenSurface[] = {
    {SIP_MLNAME_CAST(sipName_create), meth_QOffscreenSurface_create, METH_VARARGS, SIP_MLDOC_CAST(doc_QOffscreenSurface_create)},
    {SIP_MLNAME_CAST(sipName_destroy), meth_QOffscreenSurface_destroy, METH_VARARGS, SIP_MLDOC_CAST(doc_QOffscreenSurface_destroy)},
    {SIP_MLNAME_CAST(sipName_format), meth_QOffscreenSurface_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QOffscreenSurface_format)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QOffscreenSurface_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QOffscreenSurface_isValid)},
    {SIP_MLNAME_CAST(sipName_nativeHandle), meth_QOffscreenSurface_nativeHandle, METH_VARARGS, SIP_MLDOC_CAST(doc_QOffscreenSurface_nativeHandle)},
    {SIP_MLNAME_CAST(sipName_requestedFormat), meth_QOffscreenSurface_requestedFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QOffscreenSurface_requestedFormat)},
    {SIP_MLNAME_CAST(sipName_screen), meth_QOffscreenSurface_screen, METH_VARARGS, SIP_MLDOC_CAST(doc_QOffscreenSurface_screen)},
    {SIP_MLNAME_CAST(sipName_setFormat), meth_QOffscreenSurface_setFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QOffscreenSurface_setFormat)},
    {SIP_MLNAME_CAST(sipName_setNativeHandle), meth_QOffscreenSurface_setNativeHandle, METH_VARARGS, SIP_MLDOC_CAST(doc_QOffscreenSurface_setNativeHandle)},
    {SIP_MLNAME_CAST(sipName_setScreen), meth_QOffscreenSurface_setScreen, METH_VARARGS, SIP_MLDOC_CAST(doc_QOffscreenSurface_setScreen)},
    {SIP_MLNAME_CAST(sipName_size), meth_QOffscreenSurface_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QOffscreenSurface_size)},
    {SIP_MLNAME_CAST(sipName_surfaceType), meth_QOffscreenSurface_surfaceType, METH_VARARGS, SIP_MLDOC_CAST(doc_QOffscreenSurface_surfaceType)}
};

PyDoc_STRVAR(doc_QOffscreenSurface, "\1QOffscreenSurface(screen: QScreen = None)\n"
"QOffscreenSurface(QScreen, QObject)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QOffscreenSurface[] = {
    {"screenChanged(QScreen*)", "\1screenChanged(self, QScreen)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QOffscreenSurface = {
    & ::QOffscreenSurface::staticMetaObject,
    0,
    signals_QOffscreenSurface,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QOffscreenSurface = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QOffscreenSurface,
        {SIP_NULLPTR},
        &plugin_QOffscreenSurface
    },
    {
        sipNameNr_QOffscreenSurface,
        {0, 0, 1},
        12, methods_QOffscreenSurface,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QOffscreenSurface,
    -1,
    -1,
    supers_QOffscreenSurface,
    SIP_NULLPTR,
    init_type_QOffscreenSurface,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QOffscreenSurface,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QOffscreenSurface,
    cast_QOffscreenSurface,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qsurface.sip"
#include <qsurface.h>
#line 29242 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 29246 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qsurfaceformat.sip"
#include <qsurfaceformat.h>
#line 29249 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QSurface_surfaceClass, "surfaceClass(self) -> QSurface.SurfaceClass");

extern "C" {static PyObject *meth_QSurface_surfaceClass(PyObject *, PyObject *);}
static PyObject *meth_QSurface_surfaceClass(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurface, &sipCpp))
        {
             ::QSurface::SurfaceClass sipRes;

            sipRes = sipCpp->surfaceClass();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSurface_SurfaceClass);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurface, sipName_surfaceClass, doc_QSurface_surfaceClass);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurface_format, "format(self) -> QSurfaceFormat");

extern "C" {static PyObject *meth_QSurface_format(PyObject *, PyObject *);}
static PyObject *meth_QSurface_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurface, &sipCpp))
        {
             ::QSurfaceFormat*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSurface, sipName_format);
                return SIP_NULLPTR;
            }

            sipRes = new  ::QSurfaceFormat(sipCpp->format());

            return sipConvertFromNewType(sipRes,sipType_QSurfaceFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurface, sipName_format, doc_QSurface_format);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurface_surfaceType, "surfaceType(self) -> QSurface.SurfaceType");

extern "C" {static PyObject *meth_QSurface_surfaceType(PyObject *, PyObject *);}
static PyObject *meth_QSurface_surfaceType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurface, &sipCpp))
        {
             ::QSurface::SurfaceType sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSurface, sipName_surfaceType);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->surfaceType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSurface_SurfaceType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurface, sipName_surfaceType, doc_QSurface_surfaceType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurface_size, "size(self) -> QSize");

extern "C" {static PyObject *meth_QSurface_size(PyObject *, PyObject *);}
static PyObject *meth_QSurface_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurface, &sipCpp))
        {
             ::QSize*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSurface, sipName_size);
                return SIP_NULLPTR;
            }

            sipRes = new  ::QSize(sipCpp->size());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurface, sipName_size, doc_QSurface_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurface_supportsOpenGL, "supportsOpenGL(self) -> bool");

extern "C" {static PyObject *meth_QSurface_supportsOpenGL(PyObject *, PyObject *);}
static PyObject *meth_QSurface_supportsOpenGL(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurface, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->supportsOpenGL();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurface, sipName_supportsOpenGL, doc_QSurface_supportsOpenGL);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSurface(void *, int);}
static void release_QSurface(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSurface *>(sipCppV);
}


extern "C" {static void dealloc_QSurface(sipSimpleWrapper *);}
static void dealloc_QSurface(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSurface(sipGetAddress(sipSelf), 0);
    }
}


static PyMethodDef methods_QSurface[] = {
    {SIP_MLNAME_CAST(sipName_format), meth_QSurface_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurface_format)},
    {SIP_MLNAME_CAST(sipName_size), meth_QSurface_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurface_size)},
    {SIP_MLNAME_CAST(sipName_supportsOpenGL), meth_QSurface_supportsOpenGL, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurface_supportsOpenGL)},
    {SIP_MLNAME_CAST(sipName_surfaceClass), meth_QSurface_surfaceClass, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurface_surfaceClass)},
    {SIP_MLNAME_CAST(sipName_surfaceType), meth_QSurface_surfaceType, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurface_surfaceType)}
};

static sipEnumMemberDef enummembers_QSurface[] = {
    {sipName_MetalSurface, static_cast<int>( ::QSurface::MetalSurface), 270},
    {sipName_Offscreen, static_cast<int>( ::QSurface::Offscreen), 269},
    {sipName_OpenGLSurface, static_cast<int>( ::QSurface::OpenGLSurface), 270},
    {sipName_OpenVGSurface, static_cast<int>( ::QSurface::OpenVGSurface), 270},
    {sipName_RasterGLSurface, static_cast<int>( ::QSurface::RasterGLSurface), 270},
    {sipName_RasterSurface, static_cast<int>( ::QSurface::RasterSurface), 270},
    {sipName_VulkanSurface, static_cast<int>( ::QSurface::VulkanSurface), 270},
    {sipName_Window, static_cast<int>( ::QSurface::Window), 269},
};


static pyqt5ClassPluginDef plugin_QSurface = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QSurface = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSurface,
        {SIP_NULLPTR},
        &plugin_QSurface
    },
    {
        sipNameNr_QSurface,
        {0, 0, 1},
        5, methods_QSurface,
        8, enummembers_QSurface,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSurface,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSurface,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qmovie.sip"
#include <qmovie.h>
#line 29510 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 29514 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 29517 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 29520 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 29523 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qimagereader.sip"
#include <qimagereader.h>
#line 29526 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 29529 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 29532 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 29535 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qimage.sip"
#include <qimage.h>
#line 29538 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 29541 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 29544 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 29547 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 29550 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 29553 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 29556 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 29559 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 29562 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 29565 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 29568 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 29571 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 29574 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 29577 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 29580 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQMovie : public  ::QMovie
{
public:
    sipQMovie( ::QObject*);
    sipQMovie( ::QIODevice*,const  ::QByteArray&, ::QObject*);
    sipQMovie(const  ::QString&,const  ::QByteArray&, ::QObject*);
    virtual ~sipQMovie();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQMovie(const sipQMovie &);
    sipQMovie &operator = (const sipQMovie &);

    char sipPyMethods[7];
};

sipQMovie::sipQMovie( ::QObject*a0):  ::QMovie(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMovie::sipQMovie( ::QIODevice*a0,const  ::QByteArray& a1, ::QObject*a2):  ::QMovie(a0,a1,a2), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMovie::sipQMovie(const  ::QString& a0,const  ::QByteArray& a1, ::QObject*a2):  ::QMovie(a0,a1,a2), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMovie::~sipQMovie()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQMovie::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QMovie);

    return  ::QMovie::metaObject();
}

int sipQMovie::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QMovie::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QMovie,_c,_id,_a);

    return _id;
}

void *sipQMovie::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QMovie, _clname, &sipCpp) ? sipCpp :  ::QMovie::qt_metacast(_clname));
}

bool sipQMovie::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QMovie::event(a0);

    extern bool sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_5(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQMovie::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QMovie::eventFilter(a0,a1);

    extern bool sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_4(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQMovie::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QMovie::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_3(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMovie::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QMovie::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_2(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMovie::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QMovie::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_1(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMovie::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QMovie::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQMovie::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QMovie::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QMovie_supportedFormats, "supportedFormats() -> List[QByteArray]");

extern "C" {static PyObject *meth_QMovie_supportedFormats(PyObject *, PyObject *);}
static PyObject *meth_QMovie_supportedFormats(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList< ::QByteArray>*sipRes;

            sipRes = new QList< ::QByteArray>( ::QMovie::supportedFormats());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_supportedFormats, doc_QMovie_supportedFormats);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_setDevice, "setDevice(self, QIODevice)");

extern "C" {static PyObject *meth_QMovie_setDevice(PyObject *, PyObject *);}
static PyObject *meth_QMovie_setDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QIODevice* a0;
         ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMovie, &sipCpp, sipType_QIODevice, &a0))
        {
            sipCpp->setDevice(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_setDevice, doc_QMovie_setDevice);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_device, "device(self) -> QIODevice");

extern "C" {static PyObject *meth_QMovie_device(PyObject *, PyObject *);}
static PyObject *meth_QMovie_device(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
             ::QIODevice*sipRes;

            sipRes = sipCpp->device();

            return sipConvertFromType(sipRes,sipType_QIODevice,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_device, doc_QMovie_device);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_setFileName, "setFileName(self, str)");

extern "C" {static PyObject *meth_QMovie_setFileName(PyObject *, PyObject *);}
static PyObject *meth_QMovie_setFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMovie, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setFileName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_setFileName, doc_QMovie_setFileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_fileName, "fileName(self) -> str");

extern "C" {static PyObject *meth_QMovie_fileName(PyObject *, PyObject *);}
static PyObject *meth_QMovie_fileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->fileName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_fileName, doc_QMovie_fileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_setFormat, "setFormat(self, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QMovie_setFormat(PyObject *, PyObject *);}
static PyObject *meth_QMovie_setFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMovie, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->setFormat(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_setFormat, doc_QMovie_setFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_format, "format(self) -> QByteArray");

extern "C" {static PyObject *meth_QMovie_format(PyObject *, PyObject *);}
static PyObject *meth_QMovie_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->format());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_format, doc_QMovie_format);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_setBackgroundColor, "setBackgroundColor(self, Union[QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QMovie_setBackgroundColor(PyObject *, PyObject *);}
static PyObject *meth_QMovie_setBackgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor* a0;
        int a0State = 0;
         ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMovie, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->setBackgroundColor(*a0);
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_setBackgroundColor, doc_QMovie_setBackgroundColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_backgroundColor, "backgroundColor(self) -> QColor");

extern "C" {static PyObject *meth_QMovie_backgroundColor(PyObject *, PyObject *);}
static PyObject *meth_QMovie_backgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor(sipCpp->backgroundColor());

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_backgroundColor, doc_QMovie_backgroundColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_state, "state(self) -> QMovie.MovieState");

extern "C" {static PyObject *meth_QMovie_state(PyObject *, PyObject *);}
static PyObject *meth_QMovie_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
             ::QMovie::MovieState sipRes;

            sipRes = sipCpp->state();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QMovie_MovieState);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_state, doc_QMovie_state);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_frameRect, "frameRect(self) -> QRect");

extern "C" {static PyObject *meth_QMovie_frameRect(PyObject *, PyObject *);}
static PyObject *meth_QMovie_frameRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->frameRect());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_frameRect, doc_QMovie_frameRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_currentImage, "currentImage(self) -> QImage");

extern "C" {static PyObject *meth_QMovie_currentImage(PyObject *, PyObject *);}
static PyObject *meth_QMovie_currentImage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
             ::QImage*sipRes;

            sipRes = new  ::QImage(sipCpp->currentImage());

            return sipConvertFromNewType(sipRes,sipType_QImage,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_currentImage, doc_QMovie_currentImage);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_currentPixmap, "currentPixmap(self) -> QPixmap");

extern "C" {static PyObject *meth_QMovie_currentPixmap(PyObject *, PyObject *);}
static PyObject *meth_QMovie_currentPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
             ::QPixmap*sipRes;

            sipRes = new  ::QPixmap(sipCpp->currentPixmap());

            return sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_currentPixmap, doc_QMovie_currentPixmap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QMovie_isValid(PyObject *, PyObject *);}
static PyObject *meth_QMovie_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_isValid, doc_QMovie_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_jumpToFrame, "jumpToFrame(self, int) -> bool");

extern "C" {static PyObject *meth_QMovie_jumpToFrame(PyObject *, PyObject *);}
static PyObject *meth_QMovie_jumpToFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMovie, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->jumpToFrame(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_jumpToFrame, doc_QMovie_jumpToFrame);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_loopCount, "loopCount(self) -> int");

extern "C" {static PyObject *meth_QMovie_loopCount(PyObject *, PyObject *);}
static PyObject *meth_QMovie_loopCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->loopCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_loopCount, doc_QMovie_loopCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_frameCount, "frameCount(self) -> int");

extern "C" {static PyObject *meth_QMovie_frameCount(PyObject *, PyObject *);}
static PyObject *meth_QMovie_frameCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->frameCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_frameCount, doc_QMovie_frameCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_nextFrameDelay, "nextFrameDelay(self) -> int");

extern "C" {static PyObject *meth_QMovie_nextFrameDelay(PyObject *, PyObject *);}
static PyObject *meth_QMovie_nextFrameDelay(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->nextFrameDelay();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_nextFrameDelay, doc_QMovie_nextFrameDelay);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_currentFrameNumber, "currentFrameNumber(self) -> int");

extern "C" {static PyObject *meth_QMovie_currentFrameNumber(PyObject *, PyObject *);}
static PyObject *meth_QMovie_currentFrameNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->currentFrameNumber();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_currentFrameNumber, doc_QMovie_currentFrameNumber);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_setSpeed, "setSpeed(self, int)");

extern "C" {static PyObject *meth_QMovie_setSpeed(PyObject *, PyObject *);}
static PyObject *meth_QMovie_setSpeed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMovie, &sipCpp, &a0))
        {
            sipCpp->setSpeed(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_setSpeed, doc_QMovie_setSpeed);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_speed, "speed(self) -> int");

extern "C" {static PyObject *meth_QMovie_speed(PyObject *, PyObject *);}
static PyObject *meth_QMovie_speed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->speed();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_speed, doc_QMovie_speed);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_scaledSize, "scaledSize(self) -> QSize");

extern "C" {static PyObject *meth_QMovie_scaledSize(PyObject *, PyObject *);}
static PyObject *meth_QMovie_scaledSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->scaledSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_scaledSize, doc_QMovie_scaledSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_setScaledSize, "setScaledSize(self, QSize)");

extern "C" {static PyObject *meth_QMovie_setScaledSize(PyObject *, PyObject *);}
static PyObject *meth_QMovie_setScaledSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
         ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMovie, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setScaledSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_setScaledSize, doc_QMovie_setScaledSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_cacheMode, "cacheMode(self) -> QMovie.CacheMode");

extern "C" {static PyObject *meth_QMovie_cacheMode(PyObject *, PyObject *);}
static PyObject *meth_QMovie_cacheMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
             ::QMovie::CacheMode sipRes;

            sipRes = sipCpp->cacheMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QMovie_CacheMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_cacheMode, doc_QMovie_cacheMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_setCacheMode, "setCacheMode(self, QMovie.CacheMode)");

extern "C" {static PyObject *meth_QMovie_setCacheMode(PyObject *, PyObject *);}
static PyObject *meth_QMovie_setCacheMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMovie::CacheMode a0;
         ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMovie, &sipCpp, sipType_QMovie_CacheMode, &a0))
        {
            sipCpp->setCacheMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_setCacheMode, doc_QMovie_setCacheMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_start, "start(self)");

extern "C" {static PyObject *meth_QMovie_start(PyObject *, PyObject *);}
static PyObject *meth_QMovie_start(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
            sipCpp->start();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_start, doc_QMovie_start);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_jumpToNextFrame, "jumpToNextFrame(self) -> bool");

extern "C" {static PyObject *meth_QMovie_jumpToNextFrame(PyObject *, PyObject *);}
static PyObject *meth_QMovie_jumpToNextFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->jumpToNextFrame();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_jumpToNextFrame, doc_QMovie_jumpToNextFrame);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_setPaused, "setPaused(self, bool)");

extern "C" {static PyObject *meth_QMovie_setPaused(PyObject *, PyObject *);}
static PyObject *meth_QMovie_setPaused(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QMovie, &sipCpp, &a0))
        {
            sipCpp->setPaused(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_setPaused, doc_QMovie_setPaused);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_stop, "stop(self)");

extern "C" {static PyObject *meth_QMovie_stop(PyObject *, PyObject *);}
static PyObject *meth_QMovie_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
            sipCpp->stop();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_stop, doc_QMovie_stop);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_lastError, "lastError(self) -> QImageReader.ImageReaderError");

extern "C" {static PyObject *meth_QMovie_lastError(PyObject *, PyObject *);}
static PyObject *meth_QMovie_lastError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
             ::QImageReader::ImageReaderError sipRes;

            sipRes = sipCpp->lastError();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QImageReader_ImageReaderError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_lastError, doc_QMovie_lastError);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMovie_lastErrorString, "lastErrorString(self) -> str");

extern "C" {static PyObject *meth_QMovie_lastErrorString(PyObject *, PyObject *);}
static PyObject *meth_QMovie_lastErrorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMovie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMovie, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->lastErrorString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMovie, sipName_lastErrorString, doc_QMovie_lastErrorString);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QMovie(void *, const sipTypeDef *);}
static void *cast_QMovie(void *sipCppV, const sipTypeDef *targetType)
{
     ::QMovie *sipCpp = reinterpret_cast< ::QMovie *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMovie(void *, int);}
static void release_QMovie(void *sipCppV, int)
{
     ::QMovie *sipCpp = reinterpret_cast< ::QMovie *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QMovie(sipSimpleWrapper *);}
static void dealloc_QMovie(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQMovie *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMovie(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QMovie(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMovie(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQMovie *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQMovie(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QIODevice* a0;
        const  ::QByteArray& a1def = QByteArray();
        const  ::QByteArray* a1 = &a1def;
        int a1State = 0;
         ::QObject* a2 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|J1JH", sipType_QIODevice, &a0, sipType_QByteArray, &a1, &a1State, sipType_QObject, &a2, sipOwner))
        {
            sipCpp = new sipQMovie(a0,*a1,a2);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QByteArray& a1def = QByteArray();
        const  ::QByteArray* a1 = &a1def;
        int a1State = 0;
         ::QObject* a2 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|J1JH", sipType_QString,&a0, &a0State, sipType_QByteArray, &a1, &a1State, sipType_QObject, &a2, sipOwner))
        {
            sipCpp = new sipQMovie(*a0,*a1,a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QMovie[] = {{25, 0, 1}};


static PyMethodDef methods_QMovie[] = {
    {SIP_MLNAME_CAST(sipName_backgroundColor), meth_QMovie_backgroundColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_backgroundColor)},
    {SIP_MLNAME_CAST(sipName_cacheMode), meth_QMovie_cacheMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_cacheMode)},
    {SIP_MLNAME_CAST(sipName_currentFrameNumber), meth_QMovie_currentFrameNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_currentFrameNumber)},
    {SIP_MLNAME_CAST(sipName_currentImage), meth_QMovie_currentImage, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_currentImage)},
    {SIP_MLNAME_CAST(sipName_currentPixmap), meth_QMovie_currentPixmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_currentPixmap)},
    {SIP_MLNAME_CAST(sipName_device), meth_QMovie_device, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_device)},
    {SIP_MLNAME_CAST(sipName_fileName), meth_QMovie_fileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_fileName)},
    {SIP_MLNAME_CAST(sipName_format), meth_QMovie_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_format)},
    {SIP_MLNAME_CAST(sipName_frameCount), meth_QMovie_frameCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_frameCount)},
    {SIP_MLNAME_CAST(sipName_frameRect), meth_QMovie_frameRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_frameRect)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QMovie_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_isValid)},
    {SIP_MLNAME_CAST(sipName_jumpToFrame), meth_QMovie_jumpToFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_jumpToFrame)},
    {SIP_MLNAME_CAST(sipName_jumpToNextFrame), meth_QMovie_jumpToNextFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_jumpToNextFrame)},
    {SIP_MLNAME_CAST(sipName_lastError), meth_QMovie_lastError, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_lastError)},
    {SIP_MLNAME_CAST(sipName_lastErrorString), meth_QMovie_lastErrorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_lastErrorString)},
    {SIP_MLNAME_CAST(sipName_loopCount), meth_QMovie_loopCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_loopCount)},
    {SIP_MLNAME_CAST(sipName_nextFrameDelay), meth_QMovie_nextFrameDelay, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_nextFrameDelay)},
    {SIP_MLNAME_CAST(sipName_scaledSize), meth_QMovie_scaledSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_scaledSize)},
    {SIP_MLNAME_CAST(sipName_setBackgroundColor), meth_QMovie_setBackgroundColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_setBackgroundColor)},
    {SIP_MLNAME_CAST(sipName_setCacheMode), meth_QMovie_setCacheMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_setCacheMode)},
    {SIP_MLNAME_CAST(sipName_setDevice), meth_QMovie_setDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_setDevice)},
    {SIP_MLNAME_CAST(sipName_setFileName), meth_QMovie_setFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_setFileName)},
    {SIP_MLNAME_CAST(sipName_setFormat), meth_QMovie_setFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_setFormat)},
    {SIP_MLNAME_CAST(sipName_setPaused), meth_QMovie_setPaused, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_setPaused)},
    {SIP_MLNAME_CAST(sipName_setScaledSize), meth_QMovie_setScaledSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_setScaledSize)},
    {SIP_MLNAME_CAST(sipName_setSpeed), meth_QMovie_setSpeed, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_setSpeed)},
    {SIP_MLNAME_CAST(sipName_speed), meth_QMovie_speed, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_speed)},
    {SIP_MLNAME_CAST(sipName_start), meth_QMovie_start, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_start)},
    {SIP_MLNAME_CAST(sipName_state), meth_QMovie_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_state)},
    {SIP_MLNAME_CAST(sipName_stop), meth_QMovie_stop, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_stop)},
    {SIP_MLNAME_CAST(sipName_supportedFormats), meth_QMovie_supportedFormats, METH_VARARGS, SIP_MLDOC_CAST(doc_QMovie_supportedFormats)}
};

static sipEnumMemberDef enummembers_QMovie[] = {
    {sipName_CacheAll, static_cast<int>( ::QMovie::CacheAll), 121},
    {sipName_CacheNone, static_cast<int>( ::QMovie::CacheNone), 121},
    {sipName_NotRunning, static_cast<int>( ::QMovie::NotRunning), 122},
    {sipName_Paused, static_cast<int>( ::QMovie::Paused), 122},
    {sipName_Running, static_cast<int>( ::QMovie::Running), 122},
};

PyDoc_STRVAR(doc_QMovie, "\1QMovie(parent: QObject = None)\n"
"QMovie(QIODevice, format: Union[QByteArray, bytes, bytearray] = QByteArray(), parent: QObject = None)\n"
"QMovie(str, format: Union[QByteArray, bytes, bytearray] = QByteArray(), parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QMovie[] = {
    {"frameChanged(int)", "\1frameChanged(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"finished()", "\1finished(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"error(QImageReader::ImageReaderError)", "\1error(self, QImageReader.ImageReaderError)", SIP_NULLPTR, SIP_NULLPTR},
    {"stateChanged(QMovie::MovieState)", "\1stateChanged(self, QMovie.MovieState)", SIP_NULLPTR, SIP_NULLPTR},
    {"updated(QRect)", "\1updated(self, QRect)", SIP_NULLPTR, SIP_NULLPTR},
    {"resized(QSize)", "\1resized(self, QSize)", SIP_NULLPTR, SIP_NULLPTR},
    {"started()", "\1started(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QMovie = {
    & ::QMovie::staticMetaObject,
    0,
    signals_QMovie,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QMovie = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMovie,
        {SIP_NULLPTR},
        &plugin_QMovie
    },
    {
        sipNameNr_QMovie,
        {0, 0, 1},
        31, methods_QMovie,
        5, enummembers_QMovie,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QMovie,
    -1,
    -1,
    supers_QMovie,
    SIP_NULLPTR,
    init_type_QMovie,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QMovie,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QMovie,
    cast_QMovie,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qmatrix4x4.sip"
#include <qmatrix4x4.h>
#line 30896 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 30900 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qvector3d.sip"
#include <qvector3d.h>
#line 30903 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qvector4d.sip"
#include <qvector4d.h>
#line 30906 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 30909 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 30912 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 30915 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 30918 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qquaternion.sip"
#include <qquaternion.h>
#line 30921 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 483 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 30924 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QMatrix4x4_determinant, "determinant(self) -> float");

extern "C" {static PyObject *meth_QMatrix4x4_determinant(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_determinant(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix4x4, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->determinant();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_determinant, doc_QMatrix4x4_determinant);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix4x4_inverted, "inverted(self) -> Tuple[QMatrix4x4, bool]");

extern "C" {static PyObject *meth_QMatrix4x4_inverted(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_inverted(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
        const  ::QMatrix4x4 *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QMatrix4x4, &sipCpp))
        {
             ::QMatrix4x4*sipRes;

            sipRes = new  ::QMatrix4x4(sipCpp->inverted(&a0));

            PyObject *sipResObj = sipConvertFromNewType(sipRes,sipType_QMatrix4x4,SIP_NULLPTR);
            return sipBuildResult(0,"(Rb)",sipResObj,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_inverted, doc_QMatrix4x4_inverted);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix4x4_transposed, "transposed(self) -> QMatrix4x4");

extern "C" {static PyObject *meth_QMatrix4x4_transposed(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_transposed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix4x4, &sipCpp))
        {
             ::QMatrix4x4*sipRes;

            sipRes = new  ::QMatrix4x4(sipCpp->transposed());

            return sipConvertFromNewType(sipRes,sipType_QMatrix4x4,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_transposed, doc_QMatrix4x4_transposed);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix4x4_normalMatrix, "normalMatrix(self) -> QMatrix3x3");

extern "C" {static PyObject *meth_QMatrix4x4_normalMatrix(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_normalMatrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix4x4, &sipCpp))
        {
             ::QMatrix3x3*sipRes;

            sipRes = new  ::QMatrix3x3(sipCpp->normalMatrix());

            return sipConvertFromNewType(sipRes,sipType_QMatrix3x3,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_normalMatrix, doc_QMatrix4x4_normalMatrix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix4x4_scale, "scale(self, QVector3D)\n"
"scale(self, float, float)\n"
"scale(self, float, float, float)\n"
"scale(self, float)");

extern "C" {static PyObject *meth_QMatrix4x4_scale(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_scale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector3D* a0;
         ::QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMatrix4x4, &sipCpp, sipType_QVector3D, &a0))
        {
            sipCpp->scale(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        float a0;
        float a1;
         ::QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bff", &sipSelf, sipType_QMatrix4x4, &sipCpp, &a0, &a1))
        {
            sipCpp->scale(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        float a0;
        float a1;
        float a2;
         ::QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bfff", &sipSelf, sipType_QMatrix4x4, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->scale(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        float a0;
         ::QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QMatrix4x4, &sipCpp, &a0))
        {
            sipCpp->scale(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_scale, doc_QMatrix4x4_scale);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix4x4_translate, "translate(self, QVector3D)\n"
"translate(self, float, float)\n"
"translate(self, float, float, float)");

extern "C" {static PyObject *meth_QMatrix4x4_translate(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_translate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector3D* a0;
         ::QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMatrix4x4, &sipCpp, sipType_QVector3D, &a0))
        {
            sipCpp->translate(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        float a0;
        float a1;
         ::QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bff", &sipSelf, sipType_QMatrix4x4, &sipCpp, &a0, &a1))
        {
            sipCpp->translate(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        float a0;
        float a1;
        float a2;
         ::QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bfff", &sipSelf, sipType_QMatrix4x4, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->translate(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_translate, doc_QMatrix4x4_translate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix4x4_rotate, "rotate(self, float, QVector3D)\n"
"rotate(self, float, float, float, z: float = 0)\n"
"rotate(self, QQuaternion)");

extern "C" {static PyObject *meth_QMatrix4x4_rotate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_rotate(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
        const  ::QVector3D* a1;
         ::QMatrix4x4 *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BfJ9", &sipSelf, sipType_QMatrix4x4, &sipCpp, &a0, sipType_QVector3D, &a1))
        {
            sipCpp->rotate(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        float a0;
        float a1;
        float a2;
        float a3 = 0;
         ::QMatrix4x4 *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_z,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bfff|f", &sipSelf, sipType_QMatrix4x4, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->rotate(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QQuaternion* a0;
         ::QMatrix4x4 *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ9", &sipSelf, sipType_QMatrix4x4, &sipCpp, sipType_QQuaternion, &a0))
        {
            sipCpp->rotate(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_rotate, doc_QMatrix4x4_rotate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix4x4_ortho, "ortho(self, QRect)\n"
"ortho(self, QRectF)\n"
"ortho(self, float, float, float, float, float, float)");

extern "C" {static PyObject *meth_QMatrix4x4_ortho(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_ortho(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect* a0;
         ::QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMatrix4x4, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->ortho(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QRectF* a0;
         ::QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMatrix4x4, &sipCpp, sipType_QRectF, &a0))
        {
            sipCpp->ortho(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        float a0;
        float a1;
        float a2;
        float a3;
        float a4;
        float a5;
         ::QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bffffff", &sipSelf, sipType_QMatrix4x4, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            sipCpp->ortho(a0,a1,a2,a3,a4,a5);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_ortho, doc_QMatrix4x4_ortho);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix4x4_frustum, "frustum(self, float, float, float, float, float, float)");

extern "C" {static PyObject *meth_QMatrix4x4_frustum(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_frustum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
        float a1;
        float a2;
        float a3;
        float a4;
        float a5;
         ::QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bffffff", &sipSelf, sipType_QMatrix4x4, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            sipCpp->frustum(a0,a1,a2,a3,a4,a5);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_frustum, doc_QMatrix4x4_frustum);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix4x4_perspective, "perspective(self, float, float, float, float)");

extern "C" {static PyObject *meth_QMatrix4x4_perspective(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_perspective(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
        float a1;
        float a2;
        float a3;
         ::QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bffff", &sipSelf, sipType_QMatrix4x4, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->perspective(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_perspective, doc_QMatrix4x4_perspective);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix4x4_lookAt, "lookAt(self, QVector3D, QVector3D, QVector3D)");

extern "C" {static PyObject *meth_QMatrix4x4_lookAt(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_lookAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector3D* a0;
        const  ::QVector3D* a1;
        const  ::QVector3D* a2;
         ::QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J9", &sipSelf, sipType_QMatrix4x4, &sipCpp, sipType_QVector3D, &a0, sipType_QVector3D, &a1, sipType_QVector3D, &a2))
        {
            sipCpp->lookAt(*a0,*a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_lookAt, doc_QMatrix4x4_lookAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix4x4_copyDataTo, "copyDataTo(self) -> List[float]");

extern "C" {static PyObject *meth_QMatrix4x4_copyDataTo(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_copyDataTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix4x4, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;
            sipErrorState sipError = sipErrorNone;

#line 129 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qmatrix4x4.sip"
        float values[16];
        
        sipCpp->copyDataTo(values);
        sipError = qtgui_matrixDataAsList(16, values, &sipRes);
#line 31425 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipRes;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_copyDataTo, doc_QMatrix4x4_copyDataTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix4x4_toTransform, "toTransform(self) -> QTransform\n"
"toTransform(self, float) -> QTransform");

extern "C" {static PyObject *meth_QMatrix4x4_toTransform(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_toTransform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix4x4, &sipCpp))
        {
             ::QTransform*sipRes;

            sipRes = new  ::QTransform(sipCpp->toTransform());

            return sipConvertFromNewType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    {
        float a0;
        const  ::QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QMatrix4x4, &sipCpp, &a0))
        {
             ::QTransform*sipRes;

            sipRes = new  ::QTransform(sipCpp->toTransform(a0));

            return sipConvertFromNewType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_toTransform, doc_QMatrix4x4_toTransform);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix4x4_mapRect, "mapRect(self, QRect) -> QRect\n"
"mapRect(self, QRectF) -> QRectF");

extern "C" {static PyObject *meth_QMatrix4x4_mapRect(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_mapRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect* a0;
        const  ::QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMatrix4x4, &sipCpp, sipType_QRect, &a0))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->mapRect(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    {
        const  ::QRectF* a0;
        const  ::QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMatrix4x4, &sipCpp, sipType_QRectF, &a0))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->mapRect(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_mapRect, doc_QMatrix4x4_mapRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix4x4_data, "data(self) -> List[float]");

extern "C" {static PyObject *meth_QMatrix4x4_data(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix4x4, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;
            sipErrorState sipError = sipErrorNone;

#line 141 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qmatrix4x4.sip"
        sipError = qtgui_matrixDataAsList(16, sipCpp->constData(), &sipRes);
#line 31553 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipRes;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_data, doc_QMatrix4x4_data);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix4x4_optimize, "optimize(self)");

extern "C" {static PyObject *meth_QMatrix4x4_optimize(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_optimize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix4x4, &sipCpp))
        {
            sipCpp->optimize();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_optimize, doc_QMatrix4x4_optimize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix4x4_column, "column(self, int) -> QVector4D");

extern "C" {static PyObject *meth_QMatrix4x4_column(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_column(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMatrix4x4, &sipCpp, &a0))
        {
             ::QVector4D*sipRes;

            sipRes = new  ::QVector4D(sipCpp->column(a0));

            return sipConvertFromNewType(sipRes,sipType_QVector4D,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_column, doc_QMatrix4x4_column);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix4x4_setColumn, "setColumn(self, int, QVector4D)");

extern "C" {static PyObject *meth_QMatrix4x4_setColumn(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_setColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QVector4D* a1;
         ::QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QMatrix4x4, &sipCpp, &a0, sipType_QVector4D, &a1))
        {
            sipCpp->setColumn(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_setColumn, doc_QMatrix4x4_setColumn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix4x4_row, "row(self, int) -> QVector4D");

extern "C" {static PyObject *meth_QMatrix4x4_row(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_row(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMatrix4x4, &sipCpp, &a0))
        {
             ::QVector4D*sipRes;

            sipRes = new  ::QVector4D(sipCpp->row(a0));

            return sipConvertFromNewType(sipRes,sipType_QVector4D,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_row, doc_QMatrix4x4_row);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix4x4_setRow, "setRow(self, int, QVector4D)");

extern "C" {static PyObject *meth_QMatrix4x4_setRow(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_setRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QVector4D* a1;
         ::QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QMatrix4x4, &sipCpp, &a0, sipType_QVector4D, &a1))
        {
            sipCpp->setRow(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_setRow, doc_QMatrix4x4_setRow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix4x4_isIdentity, "isIdentity(self) -> bool");

extern "C" {static PyObject *meth_QMatrix4x4_isIdentity(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_isIdentity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix4x4, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isIdentity();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_isIdentity, doc_QMatrix4x4_isIdentity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix4x4_setToIdentity, "setToIdentity(self)");

extern "C" {static PyObject *meth_QMatrix4x4_setToIdentity(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_setToIdentity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix4x4, &sipCpp))
        {
            sipCpp->setToIdentity();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_setToIdentity, doc_QMatrix4x4_setToIdentity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix4x4_fill, "fill(self, float)");

extern "C" {static PyObject *meth_QMatrix4x4_fill(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_fill(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
         ::QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QMatrix4x4, &sipCpp, &a0))
        {
            sipCpp->fill(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_fill, doc_QMatrix4x4_fill);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix4x4_map, "map(self, QPoint) -> QPoint\n"
"map(self, Union[QPointF, QPoint]) -> QPointF\n"
"map(self, QVector3D) -> QVector3D\n"
"map(self, QVector4D) -> QVector4D");

extern "C" {static PyObject *meth_QMatrix4x4_map(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_map(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
        const  ::QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMatrix4x4, &sipCpp, sipType_QPoint, &a0))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->map(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMatrix4x4, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->map(*a0));
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    {
        const  ::QVector3D* a0;
        const  ::QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMatrix4x4, &sipCpp, sipType_QVector3D, &a0))
        {
             ::QVector3D*sipRes;

            sipRes = new  ::QVector3D(sipCpp->map(*a0));

            return sipConvertFromNewType(sipRes,sipType_QVector3D,SIP_NULLPTR);
        }
    }

    {
        const  ::QVector4D* a0;
        const  ::QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMatrix4x4, &sipCpp, sipType_QVector4D, &a0))
        {
             ::QVector4D*sipRes;

            sipRes = new  ::QVector4D(sipCpp->map(*a0));

            return sipConvertFromNewType(sipRes,sipType_QVector4D,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_map, doc_QMatrix4x4_map);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix4x4_mapVector, "mapVector(self, QVector3D) -> QVector3D");

extern "C" {static PyObject *meth_QMatrix4x4_mapVector(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_mapVector(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector3D* a0;
        const  ::QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMatrix4x4, &sipCpp, sipType_QVector3D, &a0))
        {
             ::QVector3D*sipRes;

            sipRes = new  ::QVector3D(sipCpp->mapVector(*a0));

            return sipConvertFromNewType(sipRes,sipType_QVector3D,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_mapVector, doc_QMatrix4x4_mapVector);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix4x4_viewport, "viewport(self, float, float, float, float, nearPlane: float = 0, farPlane: float = 1)\n"
"viewport(self, QRectF)");

extern "C" {static PyObject *meth_QMatrix4x4_viewport(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_viewport(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
        float a1;
        float a2;
        float a3;
        float a4 = 0;
        float a5 = 1;
         ::QMatrix4x4 *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_nearPlane,
            sipName_farPlane,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bffff|ff", &sipSelf, sipType_QMatrix4x4, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            sipCpp->viewport(a0,a1,a2,a3,a4,a5);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QRectF* a0;
         ::QMatrix4x4 *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ9", &sipSelf, sipType_QMatrix4x4, &sipCpp, sipType_QRectF, &a0))
        {
            sipCpp->viewport(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_viewport, doc_QMatrix4x4_viewport);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix4x4_isAffine, "isAffine(self) -> bool");

extern "C" {static PyObject *meth_QMatrix4x4_isAffine(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_isAffine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix4x4, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAffine();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_isAffine, doc_QMatrix4x4_isAffine);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QMatrix4x4___div__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix4x4___div__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix4x4* a0;
        float a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9f", sipType_QMatrix4x4, &a0, &a1))
        {
             ::QMatrix4x4*sipRes;

            sipRes = new  ::QMatrix4x4((*a0 / a1));

            return sipConvertFromNewType(sipRes,sipType_QMatrix4x4,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, div_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QMatrix4x4___add__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix4x4___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix4x4* a0;
        const  ::QMatrix4x4* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QMatrix4x4, &a0, sipType_QMatrix4x4, &a1))
        {
             ::QMatrix4x4*sipRes;

            sipRes = new  ::QMatrix4x4((*a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_QMatrix4x4,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, add_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QMatrix4x4___sub__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix4x4___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix4x4* a0;
        const  ::QMatrix4x4* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QMatrix4x4, &a0, sipType_QMatrix4x4, &a1))
        {
             ::QMatrix4x4*sipRes;

            sipRes = new  ::QMatrix4x4((*a0 - *a1));

            return sipConvertFromNewType(sipRes,sipType_QMatrix4x4,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, sub_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QMatrix4x4___mul__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix4x4___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix4x4* a0;
        const  ::QMatrix4x4* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QMatrix4x4, &a0, sipType_QMatrix4x4, &a1))
        {
             ::QMatrix4x4*sipRes;

            sipRes = new  ::QMatrix4x4((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QMatrix4x4,SIP_NULLPTR);
        }
    }

    {
        const  ::QMatrix4x4* a0;
        const  ::QVector3D* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QMatrix4x4, &a0, sipType_QVector3D, &a1))
        {
             ::QVector3D*sipRes;

            sipRes = new  ::QVector3D((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QVector3D,SIP_NULLPTR);
        }
    }

    {
        const  ::QMatrix4x4* a0;
        const  ::QVector4D* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QMatrix4x4, &a0, sipType_QVector4D, &a1))
        {
             ::QVector4D*sipRes;

            sipRes = new  ::QVector4D((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QVector4D,SIP_NULLPTR);
        }
    }

    {
        const  ::QMatrix4x4* a0;
        const  ::QPoint* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QMatrix4x4, &a0, sipType_QPoint, &a1))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    {
        const  ::QMatrix4x4* a0;
        const  ::QPointF* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J1", sipType_QMatrix4x4, &a0, sipType_QPointF, &a1, &a1State))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF((*a0 * *a1));
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    {
        float a0;
        const  ::QMatrix4x4* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "fJ9", &a0, sipType_QMatrix4x4, &a1))
        {
             ::QMatrix4x4*sipRes;

            sipRes = new  ::QMatrix4x4((a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QMatrix4x4,SIP_NULLPTR);
        }
    }

    {
        const  ::QMatrix4x4* a0;
        float a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9f", sipType_QMatrix4x4, &a0, &a1))
        {
             ::QMatrix4x4*sipRes;

            sipRes = new  ::QMatrix4x4((*a0 * a1));

            return sipConvertFromNewType(sipRes,sipType_QMatrix4x4,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, mul_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QMatrix4x4___matmul__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix4x4___matmul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix4x4* a0;
        const  ::QMatrix4x4* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QMatrix4x4, &a0, sipType_QMatrix4x4, &a1))
        {
             ::QMatrix4x4*sipRes;

            sipRes = new  ::QMatrix4x4((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QMatrix4x4,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, matmul_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QMatrix4x4___neg__(PyObject *);}
static PyObject *slot_QMatrix4x4___neg__(PyObject *sipSelf)
{
     ::QMatrix4x4 *sipCpp = reinterpret_cast< ::QMatrix4x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix4x4));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QMatrix4x4*sipRes;

            sipRes = new  ::QMatrix4x4(-(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QMatrix4x4,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QMatrix4x4___ne__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix4x4___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QMatrix4x4 *sipCpp = reinterpret_cast< ::QMatrix4x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix4x4));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix4x4* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix4x4, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QMatrix4x4::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QMatrix4x4, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QMatrix4x4___eq__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix4x4___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QMatrix4x4 *sipCpp = reinterpret_cast< ::QMatrix4x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix4x4));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix4x4* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix4x4, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QMatrix4x4::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QMatrix4x4, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QMatrix4x4___idiv__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix4x4___idiv__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix4x4)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMatrix4x4 *sipCpp = reinterpret_cast< ::QMatrix4x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix4x4));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1f", &a0))
        {
            sipCpp-> ::QMatrix4x4::operator/=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMatrix4x4___imatmul__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix4x4___imatmul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix4x4)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMatrix4x4 *sipCpp = reinterpret_cast< ::QMatrix4x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix4x4));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix4x4* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix4x4, &a0))
        {
            sipCpp-> ::QMatrix4x4::operator*=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMatrix4x4___imul__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix4x4___imul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix4x4)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMatrix4x4 *sipCpp = reinterpret_cast< ::QMatrix4x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix4x4));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix4x4* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix4x4, &a0))
        {
            sipCpp-> ::QMatrix4x4::operator*=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        float a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1f", &a0))
        {
            sipCpp-> ::QMatrix4x4::operator*=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMatrix4x4___isub__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix4x4___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix4x4)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMatrix4x4 *sipCpp = reinterpret_cast< ::QMatrix4x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix4x4));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix4x4* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix4x4, &a0))
        {
            sipCpp-> ::QMatrix4x4::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMatrix4x4___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix4x4___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix4x4)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMatrix4x4 *sipCpp = reinterpret_cast< ::QMatrix4x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix4x4));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix4x4* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix4x4, &a0))
        {
            sipCpp-> ::QMatrix4x4::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static int slot_QMatrix4x4___setitem__(PyObject *,PyObject *);}
static int slot_QMatrix4x4___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
     ::QMatrix4x4 *sipCpp = reinterpret_cast< ::QMatrix4x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix4x4));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;
         ::qreal a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "P0d", &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 160 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qmatrix4x4.sip"
        int row, column;
        
        if ((sipError = qtgui_matrixParseIndex(a0, 4, 4, &row, &column)) == sipErrorNone)
            sipCpp->operator()(row, column) = a1;
#line 32541 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorFail)
                return -1;

            if (sipError == sipErrorNone)
            {
            return 0;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName___setitem__, SIP_NULLPTR);

    return -1;
}


extern "C" {static PyObject *slot_QMatrix4x4___getitem__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix4x4___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QMatrix4x4 *sipCpp = reinterpret_cast< ::QMatrix4x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix4x4));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1P0", &a0))
        {
            PyObject * sipRes = SIP_NULLPTR;
            sipErrorState sipError = sipErrorNone;

#line 147 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qmatrix4x4.sip"
        int row, column;
        
        if ((sipError = qtgui_matrixParseIndex(a0, 4, 4, &row, &column)) == sipErrorNone)
        {
            sipRes = PyFloat_FromDouble(sipCpp->operator()(row, column));
        
            if (!sipRes)
                sipError = sipErrorFail;
        }
#line 32590 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipRes;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName___getitem__, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QMatrix4x4___repr__(PyObject *);}
static PyObject *slot_QMatrix4x4___repr__(PyObject *sipSelf)
{
     ::QMatrix4x4 *sipCpp = reinterpret_cast< ::QMatrix4x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix4x4));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 60 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qmatrix4x4.sip"
        bool bad = false;
        int i;
        PyObject *m[16];
        PYQT_FLOAT data[16];
        
        // The raw data is in column-major order but we want row-major order.
        sipCpp->copyDataTo(data);
        
        for (i = 0; i < 16; ++i)
        {
            m[i] = PyFloat_FromDouble(data[i]);
        
            if (!m[i])
                bad = true;
        }
        
        if (!bad)
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromFormat("PyQt5.QtGui.QMatrix4x4("
                    "%R, %R, %R, %R, "
                    "%R, %R, %R, %R, "
                    "%R, %R, %R, %R, "
                    "%R, %R, %R, %R)",
                    m[0], m[1], m[2], m[3],
                    m[4], m[5], m[6], m[7],
                    m[8], m[9], m[10], m[11],
                    m[12], m[13], m[14], m[15]);
        #else
            sipRes = PyString_FromString("PyQt5.QtGui.QMatrix4x4(");
        
            for (i = 0; i < 16; ++i)
            {
                if (i != 0)
                    PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));
        
                PyString_ConcatAndDel(&sipRes, PyObject_Repr(m[i]));
            }
        
            PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
        #endif
        }
        
        for (i = 0; i < 16; ++i)
            Py_XDECREF(m[i]);
#line 32670 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMatrix4x4(void *, int);}
static void release_QMatrix4x4(void *sipCppV, int)
{
    delete reinterpret_cast< ::QMatrix4x4 *>(sipCppV);
}


extern "C" {static PyObject *pickle_QMatrix4x4(void *);}
static PyObject *pickle_QMatrix4x4(void *sipCppV)
{
     ::QMatrix4x4 *sipCpp = reinterpret_cast< ::QMatrix4x4 *>(sipCppV);
    PyObject *sipRes;

#line 34 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qmatrix4x4.sip"
    PYQT_FLOAT data[16];
    
    // We want the data in row-major order.
    sipCpp->copyDataTo(data);
    
    sipRes = Py_BuildValue((char *)"dddddddddddddddd",
            (double)data[0], (double)data[1], (double)data[2], (double)data[3],
            (double)data[4], (double)data[5], (double)data[6], (double)data[7],
            (double)data[8], (double)data[9], (double)data[10], (double)data[11],
            (double)data[12], (double)data[13], (double)data[14], (double)data[15]);
#line 32705 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

    return sipRes;
}


extern "C" {static void assign_QMatrix4x4(void *, SIP_SSIZE_T, void *);}
static void assign_QMatrix4x4(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QMatrix4x4 *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QMatrix4x4 *>(sipSrc);
}


extern "C" {static void *array_QMatrix4x4(SIP_SSIZE_T);}
static void *array_QMatrix4x4(SIP_SSIZE_T sipNrElem)
{
    return new  ::QMatrix4x4[sipNrElem];
}


extern "C" {static void *copy_QMatrix4x4(const void *, SIP_SSIZE_T);}
static void *copy_QMatrix4x4(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QMatrix4x4(reinterpret_cast<const  ::QMatrix4x4 *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QMatrix4x4(sipSimpleWrapper *);}
static void dealloc_QMatrix4x4(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMatrix4x4(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QMatrix4x4(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMatrix4x4(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QMatrix4x4 *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QMatrix4x4();

            return sipCpp;
        }
    }

    {
        PyObject * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "P0", &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 50 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qmatrix4x4.sip"
        float values[16];
        
        if ((sipError = qtgui_matrixDataFromSequence(a0, 16, values)) == sipErrorNone)
            sipCpp = new QMatrix4x4(values);
#line 32768 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorNone)
                return sipCpp;

            if (sipUnused)
            {
                Py_XDECREF(*sipUnused);
            }

            sipAddException(sipError, sipParseErr);

            if (sipError == sipErrorFail)
                return SIP_NULLPTR;
        }
    }

    {
        float a0;
        float a1;
        float a2;
        float a3;
        float a4;
        float a5;
        float a6;
        float a7;
        float a8;
        float a9;
        float a10;
        float a11;
        float a12;
        float a13;
        float a14;
        float a15;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "ffffffffffffffff", &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12, &a13, &a14, &a15))
        {
            sipCpp = new  ::QMatrix4x4(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);

            return sipCpp;
        }
    }

    {
        const  ::QTransform* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTransform, &a0))
        {
            sipCpp = new  ::QMatrix4x4(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QMatrix4x4* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QMatrix4x4, &a0))
        {
            sipCpp = new  ::QMatrix4x4(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QMatrix4x4[] = {
    {(void *)slot_QMatrix4x4___div__, div_slot},
    {(void *)slot_QMatrix4x4___add__, add_slot},
    {(void *)slot_QMatrix4x4___sub__, sub_slot},
    {(void *)slot_QMatrix4x4___mul__, mul_slot},
    {(void *)slot_QMatrix4x4___matmul__, matmul_slot},
    {(void *)slot_QMatrix4x4___neg__, neg_slot},
    {(void *)slot_QMatrix4x4___ne__, ne_slot},
    {(void *)slot_QMatrix4x4___eq__, eq_slot},
    {(void *)slot_QMatrix4x4___idiv__, idiv_slot},
    {(void *)slot_QMatrix4x4___imatmul__, imatmul_slot},
    {(void *)slot_QMatrix4x4___imul__, imul_slot},
    {(void *)slot_QMatrix4x4___isub__, isub_slot},
    {(void *)slot_QMatrix4x4___iadd__, iadd_slot},
    {(void *)slot_QMatrix4x4___setitem__, setitem_slot},
    {(void *)slot_QMatrix4x4___getitem__, getitem_slot},
    {(void *)slot_QMatrix4x4___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QMatrix4x4[] = {
    {SIP_MLNAME_CAST(sipName_column), meth_QMatrix4x4_column, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix4x4_column)},
    {SIP_MLNAME_CAST(sipName_copyDataTo), meth_QMatrix4x4_copyDataTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix4x4_copyDataTo)},
    {SIP_MLNAME_CAST(sipName_data), meth_QMatrix4x4_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix4x4_data)},
    {SIP_MLNAME_CAST(sipName_determinant), meth_QMatrix4x4_determinant, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix4x4_determinant)},
    {SIP_MLNAME_CAST(sipName_fill), meth_QMatrix4x4_fill, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix4x4_fill)},
    {SIP_MLNAME_CAST(sipName_frustum), meth_QMatrix4x4_frustum, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix4x4_frustum)},
    {SIP_MLNAME_CAST(sipName_inverted), SIP_MLMETH_CAST(meth_QMatrix4x4_inverted), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMatrix4x4_inverted)},
    {SIP_MLNAME_CAST(sipName_isAffine), meth_QMatrix4x4_isAffine, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix4x4_isAffine)},
    {SIP_MLNAME_CAST(sipName_isIdentity), meth_QMatrix4x4_isIdentity, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix4x4_isIdentity)},
    {SIP_MLNAME_CAST(sipName_lookAt), meth_QMatrix4x4_lookAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix4x4_lookAt)},
    {SIP_MLNAME_CAST(sipName_map), meth_QMatrix4x4_map, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix4x4_map)},
    {SIP_MLNAME_CAST(sipName_mapRect), meth_QMatrix4x4_mapRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix4x4_mapRect)},
    {SIP_MLNAME_CAST(sipName_mapVector), meth_QMatrix4x4_mapVector, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix4x4_mapVector)},
    {SIP_MLNAME_CAST(sipName_normalMatrix), meth_QMatrix4x4_normalMatrix, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix4x4_normalMatrix)},
    {SIP_MLNAME_CAST(sipName_optimize), meth_QMatrix4x4_optimize, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix4x4_optimize)},
    {SIP_MLNAME_CAST(sipName_ortho), meth_QMatrix4x4_ortho, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix4x4_ortho)},
    {SIP_MLNAME_CAST(sipName_perspective), meth_QMatrix4x4_perspective, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix4x4_perspective)},
    {SIP_MLNAME_CAST(sipName_rotate), SIP_MLMETH_CAST(meth_QMatrix4x4_rotate), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMatrix4x4_rotate)},
    {SIP_MLNAME_CAST(sipName_row), meth_QMatrix4x4_row, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix4x4_row)},
    {SIP_MLNAME_CAST(sipName_scale), meth_QMatrix4x4_scale, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix4x4_scale)},
    {SIP_MLNAME_CAST(sipName_setColumn), meth_QMatrix4x4_setColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix4x4_setColumn)},
    {SIP_MLNAME_CAST(sipName_setRow), meth_QMatrix4x4_setRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix4x4_setRow)},
    {SIP_MLNAME_CAST(sipName_setToIdentity), meth_QMatrix4x4_setToIdentity, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix4x4_setToIdentity)},
    {SIP_MLNAME_CAST(sipName_toTransform), meth_QMatrix4x4_toTransform, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix4x4_toTransform)},
    {SIP_MLNAME_CAST(sipName_translate), meth_QMatrix4x4_translate, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix4x4_translate)},
    {SIP_MLNAME_CAST(sipName_transposed), meth_QMatrix4x4_transposed, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix4x4_transposed)},
    {SIP_MLNAME_CAST(sipName_viewport), SIP_MLMETH_CAST(meth_QMatrix4x4_viewport), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMatrix4x4_viewport)}
};

PyDoc_STRVAR(doc_QMatrix4x4, "\1QMatrix4x4()\n"
"QMatrix4x4(Sequence[float])\n"
"QMatrix4x4(float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float)\n"
"QMatrix4x4(QTransform)\n"
"QMatrix4x4(QMatrix4x4)");


static pyqt5ClassPluginDef plugin_QMatrix4x4 = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QMatrix4x4 = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMatrix4x4,
        {SIP_NULLPTR},
        &plugin_QMatrix4x4
    },
    {
        sipNameNr_QMatrix4x4,
        {0, 0, 1},
        27, methods_QMatrix4x4,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QMatrix4x4,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QMatrix4x4,
    init_type_QMatrix4x4,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QMatrix4x4,
    assign_QMatrix4x4,
    array_QMatrix4x4,
    copy_QMatrix4x4,
    release_QMatrix4x4,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    pickle_QMatrix4x4,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 32960 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 32964 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 32967 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 32970 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QKeySequence_count, "count(self) -> int");

extern "C" {static PyObject *meth_QKeySequence_count(PyObject *, PyObject *);}
static PyObject *meth_QKeySequence_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QKeySequence *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QKeySequence, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->count();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QKeySequence, sipName_count, doc_QKeySequence_count);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QKeySequence_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QKeySequence_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QKeySequence_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QKeySequence *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QKeySequence, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QKeySequence, sipName_isEmpty, doc_QKeySequence_isEmpty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QKeySequence_matches, "matches(self, Union[QKeySequence, QKeySequence.StandardKey, str, int]) -> QKeySequence.SequenceMatch");

extern "C" {static PyObject *meth_QKeySequence_matches(PyObject *, PyObject *);}
static PyObject *meth_QKeySequence_matches(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QKeySequence* a0;
        int a0State = 0;
        const  ::QKeySequence *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QKeySequence, &sipCpp, sipType_QKeySequence, &a0, &a0State))
        {
             ::QKeySequence::SequenceMatch sipRes;

            sipRes = sipCpp->matches(*a0);
            sipReleaseType(const_cast< ::QKeySequence *>(a0),sipType_QKeySequence,a0State);

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QKeySequence_SequenceMatch);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QKeySequence, sipName_matches, doc_QKeySequence_matches);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QKeySequence_mnemonic, "mnemonic(str) -> QKeySequence");

extern "C" {static PyObject *meth_QKeySequence_mnemonic(PyObject *, PyObject *);}
static PyObject *meth_QKeySequence_mnemonic(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QKeySequence*sipRes;

            sipRes = new  ::QKeySequence( ::QKeySequence::mnemonic(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QKeySequence,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QKeySequence, sipName_mnemonic, doc_QKeySequence_mnemonic);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QKeySequence_isDetached, "isDetached(self) -> bool");

extern "C" {static PyObject *meth_QKeySequence_isDetached(PyObject *, PyObject *);}
static PyObject *meth_QKeySequence_isDetached(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QKeySequence *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QKeySequence, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDetached();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QKeySequence, sipName_isDetached, doc_QKeySequence_isDetached);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QKeySequence_swap, "swap(self, QKeySequence)");

extern "C" {static PyObject *meth_QKeySequence_swap(PyObject *, PyObject *);}
static PyObject *meth_QKeySequence_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QKeySequence* a0;
         ::QKeySequence *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QKeySequence, &sipCpp, sipType_QKeySequence, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QKeySequence, sipName_swap, doc_QKeySequence_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QKeySequence_toString, "toString(self, format: QKeySequence.SequenceFormat = QKeySequence.PortableText) -> str");

extern "C" {static PyObject *meth_QKeySequence_toString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QKeySequence_toString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QKeySequence::SequenceFormat a0 = QKeySequence::PortableText;
        const  ::QKeySequence *sipCpp;

        static const char *sipKwdList[] = {
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|E", &sipSelf, sipType_QKeySequence, &sipCpp, sipType_QKeySequence_SequenceFormat, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toString(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QKeySequence, sipName_toString, doc_QKeySequence_toString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QKeySequence_fromString, "fromString(str, format: QKeySequence.SequenceFormat = QKeySequence.PortableText) -> QKeySequence");

extern "C" {static PyObject *meth_QKeySequence_fromString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QKeySequence_fromString(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QKeySequence::SequenceFormat a1 = QKeySequence::PortableText;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1|E", sipType_QString,&a0, &a0State, sipType_QKeySequence_SequenceFormat, &a1))
        {
             ::QKeySequence*sipRes;

            sipRes = new  ::QKeySequence( ::QKeySequence::fromString(*a0,a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QKeySequence,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QKeySequence, sipName_fromString, doc_QKeySequence_fromString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QKeySequence_keyBindings, "keyBindings(QKeySequence.StandardKey) -> List[QKeySequence]");

extern "C" {static PyObject *meth_QKeySequence_keyBindings(PyObject *, PyObject *);}
static PyObject *meth_QKeySequence_keyBindings(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QKeySequence::StandardKey a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QKeySequence_StandardKey, &a0))
        {
            QList< ::QKeySequence>*sipRes;

            sipRes = new QList< ::QKeySequence>( ::QKeySequence::keyBindings(a0));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QKeySequence,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QKeySequence, sipName_keyBindings, doc_QKeySequence_keyBindings);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QKeySequence_listFromString, "listFromString(str, format: QKeySequence.SequenceFormat = QKeySequence.PortableText) -> List[QKeySequence]");

extern "C" {static PyObject *meth_QKeySequence_listFromString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QKeySequence_listFromString(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QKeySequence::SequenceFormat a1 = QKeySequence::PortableText;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1|E", sipType_QString,&a0, &a0State, sipType_QKeySequence_SequenceFormat, &a1))
        {
            QList< ::QKeySequence>*sipRes;

            sipRes = new QList< ::QKeySequence>( ::QKeySequence::listFromString(*a0,a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QKeySequence,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QKeySequence, sipName_listFromString, doc_QKeySequence_listFromString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QKeySequence_listToString, "listToString(Iterable[Union[QKeySequence, QKeySequence.StandardKey, str, int]], format: QKeySequence.SequenceFormat = QKeySequence.PortableText) -> str");

extern "C" {static PyObject *meth_QKeySequence_listToString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QKeySequence_listToString(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QList< ::QKeySequence>* a0;
        int a0State = 0;
         ::QKeySequence::SequenceFormat a1 = QKeySequence::PortableText;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1|E", sipType_QList_0100QKeySequence,&a0, &a0State, sipType_QKeySequence_SequenceFormat, &a1))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QKeySequence::listToString(*a0,a1));
            sipReleaseType(const_cast<QList< ::QKeySequence> *>(a0),sipType_QList_0100QKeySequence,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QKeySequence, sipName_listToString, doc_QKeySequence_listToString);

    return SIP_NULLPTR;
}


extern "C" {static long slot_QKeySequence___hash__(PyObject *);}
static long slot_QKeySequence___hash__(PyObject *sipSelf)
{
     ::QKeySequence *sipCpp = reinterpret_cast< ::QKeySequence *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QKeySequence));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 238 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qkeysequence.sip"
        sipRes = qHash(*sipCpp);
#line 33330 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QKeySequence___ge__(PyObject *,PyObject *);}
static PyObject *slot_QKeySequence___ge__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QKeySequence *sipCpp = reinterpret_cast< ::QKeySequence *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QKeySequence));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QKeySequence* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QKeySequence, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QKeySequence::operator>=(*a0);
            sipReleaseType(const_cast< ::QKeySequence *>(a0),sipType_QKeySequence,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ge_slot, sipType_QKeySequence, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QKeySequence___le__(PyObject *,PyObject *);}
static PyObject *slot_QKeySequence___le__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QKeySequence *sipCpp = reinterpret_cast< ::QKeySequence *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QKeySequence));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QKeySequence* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QKeySequence, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QKeySequence::operator<=(*a0);
            sipReleaseType(const_cast< ::QKeySequence *>(a0),sipType_QKeySequence,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, le_slot, sipType_QKeySequence, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QKeySequence___gt__(PyObject *,PyObject *);}
static PyObject *slot_QKeySequence___gt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QKeySequence *sipCpp = reinterpret_cast< ::QKeySequence *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QKeySequence));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QKeySequence* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QKeySequence, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QKeySequence::operator>(*a0);
            sipReleaseType(const_cast< ::QKeySequence *>(a0),sipType_QKeySequence,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, gt_slot, sipType_QKeySequence, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QKeySequence___lt__(PyObject *,PyObject *);}
static PyObject *slot_QKeySequence___lt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QKeySequence *sipCpp = reinterpret_cast< ::QKeySequence *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QKeySequence));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QKeySequence* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QKeySequence, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QKeySequence::operator<(*a0);
            sipReleaseType(const_cast< ::QKeySequence *>(a0),sipType_QKeySequence,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, lt_slot, sipType_QKeySequence, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QKeySequence___ne__(PyObject *,PyObject *);}
static PyObject *slot_QKeySequence___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QKeySequence *sipCpp = reinterpret_cast< ::QKeySequence *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QKeySequence));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QKeySequence* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QKeySequence, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QKeySequence::operator!=(*a0);
            sipReleaseType(const_cast< ::QKeySequence *>(a0),sipType_QKeySequence,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QKeySequence, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QKeySequence___eq__(PyObject *,PyObject *);}
static PyObject *slot_QKeySequence___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QKeySequence *sipCpp = reinterpret_cast< ::QKeySequence *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QKeySequence));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QKeySequence* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QKeySequence, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QKeySequence::operator==(*a0);
            sipReleaseType(const_cast< ::QKeySequence *>(a0),sipType_QKeySequence,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QKeySequence, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QKeySequence___getitem__(PyObject *,PyObject *);}
static PyObject *slot_QKeySequence___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QKeySequence *sipCpp = reinterpret_cast< ::QKeySequence *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QKeySequence));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            int sipRes = 0;
            int sipIsErr = 0;

#line 210 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qkeysequence.sip"
        Py_ssize_t idx = sipConvertFromSequenceIndex(a0, sipCpp->count());
        
        if (idx < 0)
            sipIsErr = 1;
        else
            sipRes = sipCpp->operator[]((uint)idx);
#line 33569 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipIsErr)
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QKeySequence, sipName___getitem__, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static SIP_SSIZE_T slot_QKeySequence___len__(PyObject *);}
static SIP_SSIZE_T slot_QKeySequence___len__(PyObject *sipSelf)
{
     ::QKeySequence *sipCpp = reinterpret_cast< ::QKeySequence *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QKeySequence));

    if (!sipCpp)
        return 0;


    {
        {
            SIP_SSIZE_T sipRes = 0;

#line 1 "Auto-generated"
            sipRes = (SIP_SSIZE_T)sipCpp->count();
#line 33600 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QKeySequence(void *, int);}
static void release_QKeySequence(void *sipCppV, int)
{
    delete reinterpret_cast< ::QKeySequence *>(sipCppV);
}


extern "C" {static PyObject *pickle_QKeySequence(void *);}
static PyObject *pickle_QKeySequence(void *sipCppV)
{
     ::QKeySequence *sipCpp = reinterpret_cast< ::QKeySequence *>(sipCppV);
    PyObject *sipRes;

#line 91 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qkeysequence.sip"
    sipRes = Py_BuildValue((char *)"iiii", sipCpp->operator[](0), sipCpp->operator[](1), sipCpp->operator[](2), sipCpp->operator[](3));
#line 33626 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

    return sipRes;
}


extern "C" {static void assign_QKeySequence(void *, SIP_SSIZE_T, void *);}
static void assign_QKeySequence(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QKeySequence *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QKeySequence *>(sipSrc);
}


extern "C" {static void *array_QKeySequence(SIP_SSIZE_T);}
static void *array_QKeySequence(SIP_SSIZE_T sipNrElem)
{
    return new  ::QKeySequence[sipNrElem];
}


extern "C" {static void *copy_QKeySequence(const void *, SIP_SSIZE_T);}
static void *copy_QKeySequence(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QKeySequence(reinterpret_cast<const  ::QKeySequence *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QKeySequence(sipSimpleWrapper *);}
static void dealloc_QKeySequence(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QKeySequence(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QKeySequence(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QKeySequence(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QKeySequence *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QKeySequence();

            return sipCpp;
        }
    }

    {
        const  ::QKeySequence* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QKeySequence, &a0, &a0State))
        {
            sipCpp = new  ::QKeySequence(*a0);
            sipReleaseType(const_cast< ::QKeySequence *>(a0),sipType_QKeySequence,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QKeySequence::SequenceFormat a1 = QKeySequence::NativeText;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|E", sipType_QString,&a0, &a0State, sipType_QKeySequence_SequenceFormat, &a1))
        {
            sipCpp = new  ::QKeySequence(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        int a0;
        int a1 = 0;
        int a2 = 0;
        int a3 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_key2,
            sipName_key3,
            sipName_key4,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "i|iii", &a0, &a1, &a2, &a3))
        {
            sipCpp = new  ::QKeySequence(a0,a1,a2,a3);

            return sipCpp;
        }
    }

    {
        const  ::QVariant* a0;
        PyObject *a0Wrapper;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "@J1", &a0Wrapper, sipType_QVariant, &a0, &a0State))
        {
            sipErrorState sipError = sipErrorNone;

#line 197 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qkeysequence.sip"
        if (a0->canConvert<QKeySequence>())
            sipCpp = new QKeySequence(a0->value<QKeySequence>());
        else
            sipError = sipBadCallableArg(0, a0Wrapper);
#line 33744 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            if (sipError == sipErrorNone)
                return sipCpp;

            if (sipUnused)
            {
                Py_XDECREF(*sipUnused);
            }

            sipAddException(sipError, sipParseErr);

            if (sipError == sipErrorFail)
                return SIP_NULLPTR;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QKeySequence(PyObject *, void **, int *, PyObject *);}
static int convertTo_QKeySequence(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QKeySequence **sipCppPtr = reinterpret_cast< ::QKeySequence **>(sipCppPtrV);

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qkeysequence.sip"
// Allow a StandardKey, QString or an integer whenever a QKeySequence is
// expected.

if (sipIsErr == NULL)
{
    if (sipCanConvertToType(sipPy, sipType_QKeySequence, SIP_NO_CONVERTORS))
        return 1;

    if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QKeySequence_StandardKey)))
        return 1;

    if (sipCanConvertToType(sipPy, sipType_QString, 0))
        return 1;

    PyErr_Clear();

    SIPLong_AsLong(sipPy);

    return !PyErr_Occurred();
}

if (sipCanConvertToType(sipPy, sipType_QKeySequence, SIP_NO_CONVERTORS))
{
    *sipCppPtr = reinterpret_cast<QKeySequence *>(sipConvertToType(sipPy, sipType_QKeySequence, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

    return 0;
}

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QKeySequence_StandardKey)))
{
    *sipCppPtr = new QKeySequence((QKeySequence::StandardKey)SIPLong_AsLong(sipPy));

    return sipGetState(sipTransferObj);
}

if (sipCanConvertToType(sipPy, sipType_QString, 0))
{
    int state;
    QString *qs = reinterpret_cast<QString *>(sipConvertToType(sipPy, sipType_QString, 0, 0, &state, sipIsErr));

    if (*sipIsErr)
    {
        sipReleaseType(qs, sipType_QString, state);
        return 0;
    }

    *sipCppPtr = new QKeySequence(*qs);

    sipReleaseType(qs, sipType_QString, state);

    return sipGetState(sipTransferObj);
}

int key = SIPLong_AsLong(sipPy);

*sipCppPtr = new QKeySequence(key);

return sipGetState(sipTransferObj);
#line 33830 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QKeySequence[] = {
    {(void *)slot_QKeySequence___hash__, hash_slot},
    {(void *)slot_QKeySequence___ge__, ge_slot},
    {(void *)slot_QKeySequence___le__, le_slot},
    {(void *)slot_QKeySequence___gt__, gt_slot},
    {(void *)slot_QKeySequence___lt__, lt_slot},
    {(void *)slot_QKeySequence___ne__, ne_slot},
    {(void *)slot_QKeySequence___eq__, eq_slot},
    {(void *)slot_QKeySequence___getitem__, getitem_slot},
    {(void *)slot_QKeySequence___len__, len_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QKeySequence[] = {
    {SIP_MLNAME_CAST(sipName_count), meth_QKeySequence_count, METH_VARARGS, SIP_MLDOC_CAST(doc_QKeySequence_count)},
    {SIP_MLNAME_CAST(sipName_fromString), SIP_MLMETH_CAST(meth_QKeySequence_fromString), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QKeySequence_fromString)},
    {SIP_MLNAME_CAST(sipName_isDetached), meth_QKeySequence_isDetached, METH_VARARGS, SIP_MLDOC_CAST(doc_QKeySequence_isDetached)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QKeySequence_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QKeySequence_isEmpty)},
    {SIP_MLNAME_CAST(sipName_keyBindings), meth_QKeySequence_keyBindings, METH_VARARGS, SIP_MLDOC_CAST(doc_QKeySequence_keyBindings)},
    {SIP_MLNAME_CAST(sipName_listFromString), SIP_MLMETH_CAST(meth_QKeySequence_listFromString), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QKeySequence_listFromString)},
    {SIP_MLNAME_CAST(sipName_listToString), SIP_MLMETH_CAST(meth_QKeySequence_listToString), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QKeySequence_listToString)},
    {SIP_MLNAME_CAST(sipName_matches), meth_QKeySequence_matches, METH_VARARGS, SIP_MLDOC_CAST(doc_QKeySequence_matches)},
    {SIP_MLNAME_CAST(sipName_mnemonic), meth_QKeySequence_mnemonic, METH_VARARGS, SIP_MLDOC_CAST(doc_QKeySequence_mnemonic)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QKeySequence_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QKeySequence_swap)},
    {SIP_MLNAME_CAST(sipName_toString), SIP_MLMETH_CAST(meth_QKeySequence_toString), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QKeySequence_toString)}
};

static sipEnumMemberDef enummembers_QKeySequence[] = {
    {sipName_AddTab, static_cast<int>( ::QKeySequence::AddTab), 89},
    {sipName_Back, static_cast<int>( ::QKeySequence::Back), 89},
    {sipName_Backspace, static_cast<int>( ::QKeySequence::Backspace), 89},
    {sipName_Bold, static_cast<int>( ::QKeySequence::Bold), 89},
    {sipName_Cancel, static_cast<int>( ::QKeySequence::Cancel), 89},
    {sipName_Close, static_cast<int>( ::QKeySequence::Close), 89},
    {sipName_Copy, static_cast<int>( ::QKeySequence::Copy), 89},
    {sipName_Cut, static_cast<int>( ::QKeySequence::Cut), 89},
    {sipName_Delete, static_cast<int>( ::QKeySequence::Delete), 89},
    {sipName_DeleteCompleteLine, static_cast<int>( ::QKeySequence::DeleteCompleteLine), 89},
    {sipName_DeleteEndOfLine, static_cast<int>( ::QKeySequence::DeleteEndOfLine), 89},
    {sipName_DeleteEndOfWord, static_cast<int>( ::QKeySequence::DeleteEndOfWord), 89},
    {sipName_DeleteStartOfWord, static_cast<int>( ::QKeySequence::DeleteStartOfWord), 89},
    {sipName_Deselect, static_cast<int>( ::QKeySequence::Deselect), 89},
    {sipName_ExactMatch, static_cast<int>( ::QKeySequence::ExactMatch), 88},
    {sipName_Find, static_cast<int>( ::QKeySequence::Find), 89},
    {sipName_FindNext, static_cast<int>( ::QKeySequence::FindNext), 89},
    {sipName_FindPrevious, static_cast<int>( ::QKeySequence::FindPrevious), 89},
    {sipName_Forward, static_cast<int>( ::QKeySequence::Forward), 89},
    {sipName_FullScreen, static_cast<int>( ::QKeySequence::FullScreen), 89},
    {sipName_HelpContents, static_cast<int>( ::QKeySequence::HelpContents), 89},
    {sipName_InsertLineSeparator, static_cast<int>( ::QKeySequence::InsertLineSeparator), 89},
    {sipName_InsertParagraphSeparator, static_cast<int>( ::QKeySequence::InsertParagraphSeparator), 89},
    {sipName_Italic, static_cast<int>( ::QKeySequence::Italic), 89},
    {sipName_MoveToEndOfBlock, static_cast<int>( ::QKeySequence::MoveToEndOfBlock), 89},
    {sipName_MoveToEndOfDocument, static_cast<int>( ::QKeySequence::MoveToEndOfDocument), 89},
    {sipName_MoveToEndOfLine, static_cast<int>( ::QKeySequence::MoveToEndOfLine), 89},
    {sipName_MoveToNextChar, static_cast<int>( ::QKeySequence::MoveToNextChar), 89},
    {sipName_MoveToNextLine, static_cast<int>( ::QKeySequence::MoveToNextLine), 89},
    {sipName_MoveToNextPage, static_cast<int>( ::QKeySequence::MoveToNextPage), 89},
    {sipName_MoveToNextWord, static_cast<int>( ::QKeySequence::MoveToNextWord), 89},
    {sipName_MoveToPreviousChar, static_cast<int>( ::QKeySequence::MoveToPreviousChar), 89},
    {sipName_MoveToPreviousLine, static_cast<int>( ::QKeySequence::MoveToPreviousLine), 89},
    {sipName_MoveToPreviousPage, static_cast<int>( ::QKeySequence::MoveToPreviousPage), 89},
    {sipName_MoveToPreviousWord, static_cast<int>( ::QKeySequence::MoveToPreviousWord), 89},
    {sipName_MoveToStartOfBlock, static_cast<int>( ::QKeySequence::MoveToStartOfBlock), 89},
    {sipName_MoveToStartOfDocument, static_cast<int>( ::QKeySequence::MoveToStartOfDocument), 89},
    {sipName_MoveToStartOfLine, static_cast<int>( ::QKeySequence::MoveToStartOfLine), 89},
    {sipName_NativeText, static_cast<int>( ::QKeySequence::NativeText), 87},
    {sipName_New, static_cast<int>( ::QKeySequence::New), 89},
    {sipName_NextChild, static_cast<int>( ::QKeySequence::NextChild), 89},
    {sipName_NoMatch, static_cast<int>( ::QKeySequence::NoMatch), 88},
    {sipName_Open, static_cast<int>( ::QKeySequence::Open), 89},
    {sipName_PartialMatch, static_cast<int>( ::QKeySequence::PartialMatch), 88},
    {sipName_Paste, static_cast<int>( ::QKeySequence::Paste), 89},
    {sipName_PortableText, static_cast<int>( ::QKeySequence::PortableText), 87},
    {sipName_Preferences, static_cast<int>( ::QKeySequence::Preferences), 89},
    {sipName_PreviousChild, static_cast<int>( ::QKeySequence::PreviousChild), 89},
    {sipName_Print, static_cast<int>( ::QKeySequence::Print), 89},
    {sipName_Quit, static_cast<int>( ::QKeySequence::Quit), 89},
    {sipName_Redo, static_cast<int>( ::QKeySequence::Redo), 89},
    {sipName_Refresh, static_cast<int>( ::QKeySequence::Refresh), 89},
    {sipName_Replace, static_cast<int>( ::QKeySequence::Replace), 89},
    {sipName_Save, static_cast<int>( ::QKeySequence::Save), 89},
    {sipName_SaveAs, static_cast<int>( ::QKeySequence::SaveAs), 89},
    {sipName_SelectAll, static_cast<int>( ::QKeySequence::SelectAll), 89},
    {sipName_SelectEndOfBlock, static_cast<int>( ::QKeySequence::SelectEndOfBlock), 89},
    {sipName_SelectEndOfDocument, static_cast<int>( ::QKeySequence::SelectEndOfDocument), 89},
    {sipName_SelectEndOfLine, static_cast<int>( ::QKeySequence::SelectEndOfLine), 89},
    {sipName_SelectNextChar, static_cast<int>( ::QKeySequence::SelectNextChar), 89},
    {sipName_SelectNextLine, static_cast<int>( ::QKeySequence::SelectNextLine), 89},
    {sipName_SelectNextPage, static_cast<int>( ::QKeySequence::SelectNextPage), 89},
    {sipName_SelectNextWord, static_cast<int>( ::QKeySequence::SelectNextWord), 89},
    {sipName_SelectPreviousChar, static_cast<int>( ::QKeySequence::SelectPreviousChar), 89},
    {sipName_SelectPreviousLine, static_cast<int>( ::QKeySequence::SelectPreviousLine), 89},
    {sipName_SelectPreviousPage, static_cast<int>( ::QKeySequence::SelectPreviousPage), 89},
    {sipName_SelectPreviousWord, static_cast<int>( ::QKeySequence::SelectPreviousWord), 89},
    {sipName_SelectStartOfBlock, static_cast<int>( ::QKeySequence::SelectStartOfBlock), 89},
    {sipName_SelectStartOfDocument, static_cast<int>( ::QKeySequence::SelectStartOfDocument), 89},
    {sipName_SelectStartOfLine, static_cast<int>( ::QKeySequence::SelectStartOfLine), 89},
    {sipName_Underline, static_cast<int>( ::QKeySequence::Underline), 89},
    {sipName_Undo, static_cast<int>( ::QKeySequence::Undo), 89},
    {sipName_UnknownKey, static_cast<int>( ::QKeySequence::UnknownKey), 89},
    {sipName_WhatsThis, static_cast<int>( ::QKeySequence::WhatsThis), 89},
    {sipName_ZoomIn, static_cast<int>( ::QKeySequence::ZoomIn), 89},
    {sipName_ZoomOut, static_cast<int>( ::QKeySequence::ZoomOut), 89},
};

PyDoc_STRVAR(doc_QKeySequence, "\1QKeySequence()\n"
"QKeySequence(Union[QKeySequence, QKeySequence.StandardKey, str, int])\n"
"QKeySequence(str, format: QKeySequence.SequenceFormat = QKeySequence.NativeText)\n"
"QKeySequence(int, key2: int = 0, key3: int = 0, key4: int = 0)\n"
"QKeySequence(Any)");


static pyqt5ClassPluginDef plugin_QKeySequence = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QKeySequence = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QKeySequence,
        {SIP_NULLPTR},
        &plugin_QKeySequence
    },
    {
        sipNameNr_QKeySequence,
        {0, 0, 1},
        11, methods_QKeySequence,
        76, enummembers_QKeySequence,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QKeySequence,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QKeySequence,
    init_type_QKeySequence,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QKeySequence,
    assign_QKeySequence,
    array_QKeySequence,
    copy_QKeySequence,
    release_QKeySequence,
    SIP_NULLPTR,
    convertTo_QKeySequence,
    SIP_NULLPTR,
    SIP_NULLPTR,
    pickle_QKeySequence,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qinputmethod.sip"
#include <qinputmethod.h>
#line 34013 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 34017 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 34020 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 34023 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 34026 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 34029 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 34032 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 34035 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 34038 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 34041 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 34044 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 34047 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 34050 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 34053 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 34056 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 34059 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 34062 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 34065 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 34068 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 34071 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 34074 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QInputMethod_inputItemTransform, "inputItemTransform(self) -> QTransform");

extern "C" {static PyObject *meth_QInputMethod_inputItemTransform(PyObject *, PyObject *);}
static PyObject *meth_QInputMethod_inputItemTransform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QInputMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputMethod, &sipCpp))
        {
             ::QTransform*sipRes;

            sipRes = new  ::QTransform(sipCpp->inputItemTransform());

            return sipConvertFromNewType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputMethod, sipName_inputItemTransform, doc_QInputMethod_inputItemTransform);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QInputMethod_setInputItemTransform, "setInputItemTransform(self, QTransform)");

extern "C" {static PyObject *meth_QInputMethod_setInputItemTransform(PyObject *, PyObject *);}
static PyObject *meth_QInputMethod_setInputItemTransform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform* a0;
         ::QInputMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QInputMethod, &sipCpp, sipType_QTransform, &a0))
        {
            sipCpp->setInputItemTransform(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputMethod, sipName_setInputItemTransform, doc_QInputMethod_setInputItemTransform);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QInputMethod_cursorRectangle, "cursorRectangle(self) -> QRectF");

extern "C" {static PyObject *meth_QInputMethod_cursorRectangle(PyObject *, PyObject *);}
static PyObject *meth_QInputMethod_cursorRectangle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QInputMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputMethod, &sipCpp))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->cursorRectangle());

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputMethod, sipName_cursorRectangle, doc_QInputMethod_cursorRectangle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QInputMethod_keyboardRectangle, "keyboardRectangle(self) -> QRectF");

extern "C" {static PyObject *meth_QInputMethod_keyboardRectangle(PyObject *, PyObject *);}
static PyObject *meth_QInputMethod_keyboardRectangle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QInputMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputMethod, &sipCpp))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->keyboardRectangle());

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputMethod, sipName_keyboardRectangle, doc_QInputMethod_keyboardRectangle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QInputMethod_isVisible, "isVisible(self) -> bool");

extern "C" {static PyObject *meth_QInputMethod_isVisible(PyObject *, PyObject *);}
static PyObject *meth_QInputMethod_isVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QInputMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputMethod, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isVisible();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputMethod, sipName_isVisible, doc_QInputMethod_isVisible);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QInputMethod_setVisible, "setVisible(self, bool)");

extern "C" {static PyObject *meth_QInputMethod_setVisible(PyObject *, PyObject *);}
static PyObject *meth_QInputMethod_setVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QInputMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QInputMethod, &sipCpp, &a0))
        {
            sipCpp->setVisible(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputMethod, sipName_setVisible, doc_QInputMethod_setVisible);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QInputMethod_isAnimating, "isAnimating(self) -> bool");

extern "C" {static PyObject *meth_QInputMethod_isAnimating(PyObject *, PyObject *);}
static PyObject *meth_QInputMethod_isAnimating(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QInputMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputMethod, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAnimating();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputMethod, sipName_isAnimating, doc_QInputMethod_isAnimating);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QInputMethod_locale, "locale(self) -> QLocale");

extern "C" {static PyObject *meth_QInputMethod_locale(PyObject *, PyObject *);}
static PyObject *meth_QInputMethod_locale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QInputMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputMethod, &sipCpp))
        {
             ::QLocale*sipRes;

            sipRes = new  ::QLocale(sipCpp->locale());

            return sipConvertFromNewType(sipRes,sipType_QLocale,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputMethod, sipName_locale, doc_QInputMethod_locale);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QInputMethod_inputDirection, "inputDirection(self) -> Qt.LayoutDirection");

extern "C" {static PyObject *meth_QInputMethod_inputDirection(PyObject *, PyObject *);}
static PyObject *meth_QInputMethod_inputDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QInputMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputMethod, &sipCpp))
        {
             ::Qt::LayoutDirection sipRes;

            sipRes = sipCpp->inputDirection();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_LayoutDirection);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputMethod, sipName_inputDirection, doc_QInputMethod_inputDirection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QInputMethod_inputItemRectangle, "inputItemRectangle(self) -> QRectF");

extern "C" {static PyObject *meth_QInputMethod_inputItemRectangle(PyObject *, PyObject *);}
static PyObject *meth_QInputMethod_inputItemRectangle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QInputMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputMethod, &sipCpp))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->inputItemRectangle());

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputMethod, sipName_inputItemRectangle, doc_QInputMethod_inputItemRectangle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QInputMethod_setInputItemRectangle, "setInputItemRectangle(self, QRectF)");

extern "C" {static PyObject *meth_QInputMethod_setInputItemRectangle(PyObject *, PyObject *);}
static PyObject *meth_QInputMethod_setInputItemRectangle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
         ::QInputMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QInputMethod, &sipCpp, sipType_QRectF, &a0))
        {
            sipCpp->setInputItemRectangle(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputMethod, sipName_setInputItemRectangle, doc_QInputMethod_setInputItemRectangle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QInputMethod_queryFocusObject, "queryFocusObject(Qt.InputMethodQuery, Any) -> Any");

extern "C" {static PyObject *meth_QInputMethod_queryFocusObject(PyObject *, PyObject *);}
static PyObject *meth_QInputMethod_queryFocusObject(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::InputMethodQuery a0;
         ::QVariant* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "EJ1", sipType_Qt_InputMethodQuery, &a0, sipType_QVariant, &a1, &a1State))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant( ::QInputMethod::queryFocusObject(a0,*a1));
            sipReleaseType(a1,sipType_QVariant,a1State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputMethod, sipName_queryFocusObject, doc_QInputMethod_queryFocusObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QInputMethod_show, "show(self)");

extern "C" {static PyObject *meth_QInputMethod_show(PyObject *, PyObject *);}
static PyObject *meth_QInputMethod_show(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QInputMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputMethod, &sipCpp))
        {
            sipCpp->show();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputMethod, sipName_show, doc_QInputMethod_show);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QInputMethod_hide, "hide(self)");

extern "C" {static PyObject *meth_QInputMethod_hide(PyObject *, PyObject *);}
static PyObject *meth_QInputMethod_hide(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QInputMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputMethod, &sipCpp))
        {
            sipCpp->hide();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputMethod, sipName_hide, doc_QInputMethod_hide);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QInputMethod_update, "update(self, Union[Qt.InputMethodQueries, Qt.InputMethodQuery])");

extern "C" {static PyObject *meth_QInputMethod_update(PyObject *, PyObject *);}
static PyObject *meth_QInputMethod_update(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::InputMethodQueries* a0;
        int a0State = 0;
         ::QInputMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QInputMethod, &sipCpp, sipType_Qt_InputMethodQueries, &a0, &a0State))
        {
            sipCpp->update(*a0);
            sipReleaseType(a0,sipType_Qt_InputMethodQueries,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputMethod, sipName_update, doc_QInputMethod_update);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QInputMethod_reset, "reset(self)");

extern "C" {static PyObject *meth_QInputMethod_reset(PyObject *, PyObject *);}
static PyObject *meth_QInputMethod_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QInputMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputMethod, &sipCpp))
        {
            sipCpp->reset();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputMethod, sipName_reset, doc_QInputMethod_reset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QInputMethod_commit, "commit(self)");

extern "C" {static PyObject *meth_QInputMethod_commit(PyObject *, PyObject *);}
static PyObject *meth_QInputMethod_commit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QInputMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputMethod, &sipCpp))
        {
            sipCpp->commit();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputMethod, sipName_commit, doc_QInputMethod_commit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QInputMethod_invokeAction, "invokeAction(self, QInputMethod.Action, int)");

extern "C" {static PyObject *meth_QInputMethod_invokeAction(PyObject *, PyObject *);}
static PyObject *meth_QInputMethod_invokeAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QInputMethod::Action a0;
        int a1;
         ::QInputMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEi", &sipSelf, sipType_QInputMethod, &sipCpp, sipType_QInputMethod_Action, &a0, &a1))
        {
            sipCpp->invokeAction(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputMethod, sipName_invokeAction, doc_QInputMethod_invokeAction);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QInputMethod_anchorRectangle, "anchorRectangle(self) -> QRectF");

extern "C" {static PyObject *meth_QInputMethod_anchorRectangle(PyObject *, PyObject *);}
static PyObject *meth_QInputMethod_anchorRectangle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QInputMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputMethod, &sipCpp))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->anchorRectangle());

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputMethod, sipName_anchorRectangle, doc_QInputMethod_anchorRectangle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QInputMethod_inputItemClipRectangle, "inputItemClipRectangle(self) -> QRectF");

extern "C" {static PyObject *meth_QInputMethod_inputItemClipRectangle(PyObject *, PyObject *);}
static PyObject *meth_QInputMethod_inputItemClipRectangle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QInputMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputMethod, &sipCpp))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->inputItemClipRectangle());

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputMethod, sipName_inputItemClipRectangle, doc_QInputMethod_inputItemClipRectangle);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QInputMethod(void *, const sipTypeDef *);}
static void *cast_QInputMethod(void *sipCppV, const sipTypeDef *targetType)
{
     ::QInputMethod *sipCpp = reinterpret_cast< ::QInputMethod *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QInputMethod(void *, int);}
static void release_QInputMethod(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QInputMethod[] = {{25, 0, 1}};


static PyMethodDef methods_QInputMethod[] = {
    {SIP_MLNAME_CAST(sipName_anchorRectangle), meth_QInputMethod_anchorRectangle, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputMethod_anchorRectangle)},
    {SIP_MLNAME_CAST(sipName_commit), meth_QInputMethod_commit, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputMethod_commit)},
    {SIP_MLNAME_CAST(sipName_cursorRectangle), meth_QInputMethod_cursorRectangle, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputMethod_cursorRectangle)},
    {SIP_MLNAME_CAST(sipName_hide), meth_QInputMethod_hide, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputMethod_hide)},
    {SIP_MLNAME_CAST(sipName_inputDirection), meth_QInputMethod_inputDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputMethod_inputDirection)},
    {SIP_MLNAME_CAST(sipName_inputItemClipRectangle), meth_QInputMethod_inputItemClipRectangle, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputMethod_inputItemClipRectangle)},
    {SIP_MLNAME_CAST(sipName_inputItemRectangle), meth_QInputMethod_inputItemRectangle, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputMethod_inputItemRectangle)},
    {SIP_MLNAME_CAST(sipName_inputItemTransform), meth_QInputMethod_inputItemTransform, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputMethod_inputItemTransform)},
    {SIP_MLNAME_CAST(sipName_invokeAction), meth_QInputMethod_invokeAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputMethod_invokeAction)},
    {SIP_MLNAME_CAST(sipName_isAnimating), meth_QInputMethod_isAnimating, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputMethod_isAnimating)},
    {SIP_MLNAME_CAST(sipName_isVisible), meth_QInputMethod_isVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputMethod_isVisible)},
    {SIP_MLNAME_CAST(sipName_keyboardRectangle), meth_QInputMethod_keyboardRectangle, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputMethod_keyboardRectangle)},
    {SIP_MLNAME_CAST(sipName_locale), meth_QInputMethod_locale, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputMethod_locale)},
    {SIP_MLNAME_CAST(sipName_queryFocusObject), meth_QInputMethod_queryFocusObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputMethod_queryFocusObject)},
    {SIP_MLNAME_CAST(sipName_reset), meth_QInputMethod_reset, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputMethod_reset)},
    {SIP_MLNAME_CAST(sipName_setInputItemRectangle), meth_QInputMethod_setInputItemRectangle, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputMethod_setInputItemRectangle)},
    {SIP_MLNAME_CAST(sipName_setInputItemTransform), meth_QInputMethod_setInputItemTransform, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputMethod_setInputItemTransform)},
    {SIP_MLNAME_CAST(sipName_setVisible), meth_QInputMethod_setVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputMethod_setVisible)},
    {SIP_MLNAME_CAST(sipName_show), meth_QInputMethod_show, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputMethod_show)},
    {SIP_MLNAME_CAST(sipName_update), meth_QInputMethod_update, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputMethod_update)}
};

static sipEnumMemberDef enummembers_QInputMethod[] = {
    {sipName_Click, static_cast<int>( ::QInputMethod::Click), 79},
    {sipName_ContextMenu, static_cast<int>( ::QInputMethod::ContextMenu), 79},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QInputMethod[] = {
    {"inputItemClipRectangleChanged()", "\1inputItemClipRectangleChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"anchorRectangleChanged()", "\1anchorRectangleChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"inputDirectionChanged(Qt::LayoutDirection)", "\1inputDirectionChanged(self, Qt.LayoutDirection)", SIP_NULLPTR, SIP_NULLPTR},
    {"localeChanged()", "\1localeChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"animatingChanged()", "\1animatingChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"visibleChanged()", "\1visibleChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"keyboardRectangleChanged()", "\1keyboardRectangleChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"cursorRectangleChanged()", "\1cursorRectangleChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QInputMethod = {
    & ::QInputMethod::staticMetaObject,
    0,
    signals_QInputMethod,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QInputMethod = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QInputMethod,
        {SIP_NULLPTR},
        &plugin_QInputMethod
    },
    {
        sipNameNr_QInputMethod,
        {0, 0, 1},
        20, methods_QInputMethod,
        2, enummembers_QInputMethod,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_QInputMethod,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QInputMethod,
    cast_QInputMethod,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qimagewriter.sip"
#include <qimagewriter.h>
#line 34765 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 34769 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 34772 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 34775 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 34778 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qimageiohandler.sip"
#include <qimageiohandler.h>
#line 34781 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qimageiohandler.sip"
#include <qimageiohandler.h>
#line 34784 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qimage.sip"
#include <qimage.h>
#line 34787 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QImageWriter_setFormat, "setFormat(self, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QImageWriter_setFormat(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_setFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QImageWriter, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->setFormat(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_setFormat, doc_QImageWriter_setFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageWriter_format, "format(self) -> QByteArray");

extern "C" {static PyObject *meth_QImageWriter_format(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageWriter, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->format());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_format, doc_QImageWriter_format);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageWriter_setDevice, "setDevice(self, QIODevice)");

extern "C" {static PyObject *meth_QImageWriter_setDevice(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_setDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QIODevice* a0;
         ::QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QImageWriter, &sipCpp, sipType_QIODevice, &a0))
        {
            sipCpp->setDevice(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_setDevice, doc_QImageWriter_setDevice);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageWriter_device, "device(self) -> QIODevice");

extern "C" {static PyObject *meth_QImageWriter_device(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_device(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageWriter, &sipCpp))
        {
             ::QIODevice*sipRes;

            sipRes = sipCpp->device();

            return sipConvertFromType(sipRes,sipType_QIODevice,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_device, doc_QImageWriter_device);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageWriter_setFileName, "setFileName(self, str)");

extern "C" {static PyObject *meth_QImageWriter_setFileName(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_setFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QImageWriter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setFileName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_setFileName, doc_QImageWriter_setFileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageWriter_fileName, "fileName(self) -> str");

extern "C" {static PyObject *meth_QImageWriter_fileName(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_fileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageWriter, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->fileName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_fileName, doc_QImageWriter_fileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageWriter_setQuality, "setQuality(self, int)");

extern "C" {static PyObject *meth_QImageWriter_setQuality(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_setQuality(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QImageWriter, &sipCpp, &a0))
        {
            sipCpp->setQuality(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_setQuality, doc_QImageWriter_setQuality);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageWriter_quality, "quality(self) -> int");

extern "C" {static PyObject *meth_QImageWriter_quality(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_quality(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageWriter, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->quality();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_quality, doc_QImageWriter_quality);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageWriter_setGamma, "setGamma(self, float)");

extern "C" {static PyObject *meth_QImageWriter_setGamma(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_setGamma(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
         ::QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QImageWriter, &sipCpp, &a0))
        {
            sipCpp->setGamma(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_setGamma, doc_QImageWriter_setGamma);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageWriter_gamma, "gamma(self) -> float");

extern "C" {static PyObject *meth_QImageWriter_gamma(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_gamma(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageWriter, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->gamma();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_gamma, doc_QImageWriter_gamma);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageWriter_canWrite, "canWrite(self) -> bool");

extern "C" {static PyObject *meth_QImageWriter_canWrite(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_canWrite(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageWriter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->canWrite();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_canWrite, doc_QImageWriter_canWrite);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageWriter_write, "write(self, QImage) -> bool");

extern "C" {static PyObject *meth_QImageWriter_write(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_write(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage* a0;
         ::QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QImageWriter, &sipCpp, sipType_QImage, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->write(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_write, doc_QImageWriter_write);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageWriter_error, "error(self) -> QImageWriter.ImageWriterError");

extern "C" {static PyObject *meth_QImageWriter_error(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageWriter, &sipCpp))
        {
             ::QImageWriter::ImageWriterError sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QImageWriter_ImageWriterError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_error, doc_QImageWriter_error);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageWriter_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QImageWriter_errorString(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageWriter, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_errorString, doc_QImageWriter_errorString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageWriter_supportedImageFormats, "supportedImageFormats() -> List[QByteArray]");

extern "C" {static PyObject *meth_QImageWriter_supportedImageFormats(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_supportedImageFormats(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList< ::QByteArray>*sipRes;

            sipRes = new QList< ::QByteArray>( ::QImageWriter::supportedImageFormats());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_supportedImageFormats, doc_QImageWriter_supportedImageFormats);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageWriter_setText, "setText(self, str, str)");

extern "C" {static PyObject *meth_QImageWriter_setText(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QImageWriter, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            sipCpp->setText(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_setText, doc_QImageWriter_setText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageWriter_supportsOption, "supportsOption(self, QImageIOHandler.ImageOption) -> bool");

extern "C" {static PyObject *meth_QImageWriter_supportsOption(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_supportsOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QImageIOHandler::ImageOption a0;
        const  ::QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QImageWriter, &sipCpp, sipType_QImageIOHandler_ImageOption, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->supportsOption(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_supportsOption, doc_QImageWriter_supportsOption);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageWriter_setCompression, "setCompression(self, int)");

extern "C" {static PyObject *meth_QImageWriter_setCompression(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_setCompression(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QImageWriter, &sipCpp, &a0))
        {
            sipCpp->setCompression(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_setCompression, doc_QImageWriter_setCompression);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageWriter_compression, "compression(self) -> int");

extern "C" {static PyObject *meth_QImageWriter_compression(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_compression(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageWriter, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->compression();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_compression, doc_QImageWriter_compression);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageWriter_supportedMimeTypes, "supportedMimeTypes() -> List[QByteArray]");

extern "C" {static PyObject *meth_QImageWriter_supportedMimeTypes(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_supportedMimeTypes(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList< ::QByteArray>*sipRes;

            sipRes = new QList< ::QByteArray>( ::QImageWriter::supportedMimeTypes());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_supportedMimeTypes, doc_QImageWriter_supportedMimeTypes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageWriter_setSubType, "setSubType(self, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QImageWriter_setSubType(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_setSubType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QImageWriter, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->setSubType(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_setSubType, doc_QImageWriter_setSubType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageWriter_subType, "subType(self) -> QByteArray");

extern "C" {static PyObject *meth_QImageWriter_subType(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_subType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageWriter, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->subType());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_subType, doc_QImageWriter_subType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageWriter_supportedSubTypes, "supportedSubTypes(self) -> List[QByteArray]");

extern "C" {static PyObject *meth_QImageWriter_supportedSubTypes(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_supportedSubTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageWriter, &sipCpp))
        {
            QList< ::QByteArray>*sipRes;

            sipRes = new QList< ::QByteArray>(sipCpp->supportedSubTypes());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_supportedSubTypes, doc_QImageWriter_supportedSubTypes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageWriter_setOptimizedWrite, "setOptimizedWrite(self, bool)");

extern "C" {static PyObject *meth_QImageWriter_setOptimizedWrite(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_setOptimizedWrite(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QImageWriter, &sipCpp, &a0))
        {
            sipCpp->setOptimizedWrite(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_setOptimizedWrite, doc_QImageWriter_setOptimizedWrite);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageWriter_optimizedWrite, "optimizedWrite(self) -> bool");

extern "C" {static PyObject *meth_QImageWriter_optimizedWrite(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_optimizedWrite(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageWriter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->optimizedWrite();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_optimizedWrite, doc_QImageWriter_optimizedWrite);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageWriter_setProgressiveScanWrite, "setProgressiveScanWrite(self, bool)");

extern "C" {static PyObject *meth_QImageWriter_setProgressiveScanWrite(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_setProgressiveScanWrite(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QImageWriter, &sipCpp, &a0))
        {
            sipCpp->setProgressiveScanWrite(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_setProgressiveScanWrite, doc_QImageWriter_setProgressiveScanWrite);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageWriter_progressiveScanWrite, "progressiveScanWrite(self) -> bool");

extern "C" {static PyObject *meth_QImageWriter_progressiveScanWrite(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_progressiveScanWrite(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageWriter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->progressiveScanWrite();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_progressiveScanWrite, doc_QImageWriter_progressiveScanWrite);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageWriter_transformation, "transformation(self) -> QImageIOHandler.Transformations");

extern "C" {static PyObject *meth_QImageWriter_transformation(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_transformation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageWriter, &sipCpp))
        {
             ::QImageIOHandler::Transformations*sipRes;

            sipRes = new  ::QImageIOHandler::Transformations(sipCpp->transformation());

            return sipConvertFromNewType(sipRes,sipType_QImageIOHandler_Transformations,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_transformation, doc_QImageWriter_transformation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageWriter_setTransformation, "setTransformation(self, Union[QImageIOHandler.Transformations, QImageIOHandler.Transformation])");

extern "C" {static PyObject *meth_QImageWriter_setTransformation(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_setTransformation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QImageIOHandler::Transformations* a0;
        int a0State = 0;
         ::QImageWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QImageWriter, &sipCpp, sipType_QImageIOHandler_Transformations, &a0, &a0State))
        {
            sipCpp->setTransformation(*a0);
            sipReleaseType(a0,sipType_QImageIOHandler_Transformations,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_setTransformation, doc_QImageWriter_setTransformation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageWriter_imageFormatsForMimeType, "imageFormatsForMimeType(Union[QByteArray, bytes, bytearray]) -> List[QByteArray]");

extern "C" {static PyObject *meth_QImageWriter_imageFormatsForMimeType(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_imageFormatsForMimeType(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QByteArray, &a0, &a0State))
        {
            QList< ::QByteArray>*sipRes;

            sipRes = new QList< ::QByteArray>( ::QImageWriter::imageFormatsForMimeType(*a0));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageWriter, sipName_imageFormatsForMimeType, doc_QImageWriter_imageFormatsForMimeType);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QImageWriter(void *, int);}
static void release_QImageWriter(void *sipCppV, int)
{
    delete reinterpret_cast< ::QImageWriter *>(sipCppV);
}


extern "C" {static void dealloc_QImageWriter(sipSimpleWrapper *);}
static void dealloc_QImageWriter(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QImageWriter(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QImageWriter(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QImageWriter(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QImageWriter *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QImageWriter();

            return sipCpp;
        }
    }

    {
         ::QIODevice* a0;
        const  ::QByteArray* a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8J1", sipType_QIODevice, &a0, sipType_QByteArray, &a1, &a1State))
        {
            sipCpp = new  ::QImageWriter(a0,*a1);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QByteArray& a1def = QByteArray();
        const  ::QByteArray* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|J1", sipType_QString,&a0, &a0State, sipType_QByteArray, &a1, &a1State))
        {
            sipCpp = new  ::QImageWriter(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QImageWriter[] = {
    {SIP_MLNAME_CAST(sipName_canWrite), meth_QImageWriter_canWrite, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_canWrite)},
    {SIP_MLNAME_CAST(sipName_compression), meth_QImageWriter_compression, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_compression)},
    {SIP_MLNAME_CAST(sipName_device), meth_QImageWriter_device, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_device)},
    {SIP_MLNAME_CAST(sipName_error), meth_QImageWriter_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QImageWriter_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_errorString)},
    {SIP_MLNAME_CAST(sipName_fileName), meth_QImageWriter_fileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_fileName)},
    {SIP_MLNAME_CAST(sipName_format), meth_QImageWriter_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_format)},
    {SIP_MLNAME_CAST(sipName_gamma), meth_QImageWriter_gamma, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_gamma)},
    {SIP_MLNAME_CAST(sipName_imageFormatsForMimeType), meth_QImageWriter_imageFormatsForMimeType, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_imageFormatsForMimeType)},
    {SIP_MLNAME_CAST(sipName_optimizedWrite), meth_QImageWriter_optimizedWrite, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_optimizedWrite)},
    {SIP_MLNAME_CAST(sipName_progressiveScanWrite), meth_QImageWriter_progressiveScanWrite, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_progressiveScanWrite)},
    {SIP_MLNAME_CAST(sipName_quality), meth_QImageWriter_quality, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_quality)},
    {SIP_MLNAME_CAST(sipName_setCompression), meth_QImageWriter_setCompression, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_setCompression)},
    {SIP_MLNAME_CAST(sipName_setDevice), meth_QImageWriter_setDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_setDevice)},
    {SIP_MLNAME_CAST(sipName_setFileName), meth_QImageWriter_setFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_setFileName)},
    {SIP_MLNAME_CAST(sipName_setFormat), meth_QImageWriter_setFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_setFormat)},
    {SIP_MLNAME_CAST(sipName_setGamma), meth_QImageWriter_setGamma, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_setGamma)},
    {SIP_MLNAME_CAST(sipName_setOptimizedWrite), meth_QImageWriter_setOptimizedWrite, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_setOptimizedWrite)},
    {SIP_MLNAME_CAST(sipName_setProgressiveScanWrite), meth_QImageWriter_setProgressiveScanWrite, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_setProgressiveScanWrite)},
    {SIP_MLNAME_CAST(sipName_setQuality), meth_QImageWriter_setQuality, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_setQuality)},
    {SIP_MLNAME_CAST(sipName_setSubType), meth_QImageWriter_setSubType, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_setSubType)},
    {SIP_MLNAME_CAST(sipName_setText), meth_QImageWriter_setText, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_setText)},
    {SIP_MLNAME_CAST(sipName_setTransformation), meth_QImageWriter_setTransformation, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_setTransformation)},
    {SIP_MLNAME_CAST(sipName_subType), meth_QImageWriter_subType, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_subType)},
    {SIP_MLNAME_CAST(sipName_supportedImageFormats), meth_QImageWriter_supportedImageFormats, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_supportedImageFormats)},
    {SIP_MLNAME_CAST(sipName_supportedMimeTypes), meth_QImageWriter_supportedMimeTypes, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_supportedMimeTypes)},
    {SIP_MLNAME_CAST(sipName_supportedSubTypes), meth_QImageWriter_supportedSubTypes, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_supportedSubTypes)},
    {SIP_MLNAME_CAST(sipName_supportsOption), meth_QImageWriter_supportsOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_supportsOption)},
    {SIP_MLNAME_CAST(sipName_transformation), meth_QImageWriter_transformation, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_transformation)},
    {SIP_MLNAME_CAST(sipName_write), meth_QImageWriter_write, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageWriter_write)}
};

static sipEnumMemberDef enummembers_QImageWriter[] = {
    {sipName_DeviceError, static_cast<int>( ::QImageWriter::DeviceError), 76},
    {sipName_InvalidImageError, static_cast<int>( ::QImageWriter::InvalidImageError), 76},
    {sipName_UnknownError, static_cast<int>( ::QImageWriter::UnknownError), 76},
    {sipName_UnsupportedFormatError, static_cast<int>( ::QImageWriter::UnsupportedFormatError), 76},
};

PyDoc_STRVAR(doc_QImageWriter, "\1QImageWriter()\n"
"QImageWriter(QIODevice, Union[QByteArray, bytes, bytearray])\n"
"QImageWriter(str, format: Union[QByteArray, bytes, bytearray] = QByteArray())");


static pyqt5ClassPluginDef plugin_QImageWriter = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QImageWriter = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QImageWriter,
        {SIP_NULLPTR},
        &plugin_QImageWriter
    },
    {
        sipNameNr_QImageWriter,
        {0, 0, 1},
        30, methods_QImageWriter,
        4, enummembers_QImageWriter,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QImageWriter,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QImageWriter,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QImageWriter,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QImageWriter,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qimagereader.sip"
#include <qimagereader.h>
#line 35824 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 35828 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 35831 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 35834 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 35837 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qimageiohandler.sip"
#include <qimageiohandler.h>
#line 35840 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qimageiohandler.sip"
#include <qimageiohandler.h>
#line 35843 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 35846 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 35849 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qimage.sip"
#include <qimage.h>
#line 35852 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 35855 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 35858 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QImageReader_setFormat, "setFormat(self, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QImageReader_setFormat(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_setFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QImageReader, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->setFormat(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_setFormat, doc_QImageReader_setFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_format, "format(self) -> QByteArray");

extern "C" {static PyObject *meth_QImageReader_format(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->format());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_format, doc_QImageReader_format);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_setDevice, "setDevice(self, QIODevice)");

extern "C" {static PyObject *meth_QImageReader_setDevice(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_setDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QIODevice* a0;
         ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QImageReader, &sipCpp, sipType_QIODevice, &a0))
        {
            sipCpp->setDevice(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_setDevice, doc_QImageReader_setDevice);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_device, "device(self) -> QIODevice");

extern "C" {static PyObject *meth_QImageReader_device(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_device(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
             ::QIODevice*sipRes;

            sipRes = sipCpp->device();

            return sipConvertFromType(sipRes,sipType_QIODevice,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_device, doc_QImageReader_device);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_setFileName, "setFileName(self, str)");

extern "C" {static PyObject *meth_QImageReader_setFileName(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_setFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QImageReader, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setFileName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_setFileName, doc_QImageReader_setFileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_fileName, "fileName(self) -> str");

extern "C" {static PyObject *meth_QImageReader_fileName(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_fileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->fileName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_fileName, doc_QImageReader_fileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_size, "size(self) -> QSize");

extern "C" {static PyObject *meth_QImageReader_size(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->size());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_size, doc_QImageReader_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_setClipRect, "setClipRect(self, QRect)");

extern "C" {static PyObject *meth_QImageReader_setClipRect(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_setClipRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect* a0;
         ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QImageReader, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->setClipRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_setClipRect, doc_QImageReader_setClipRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_clipRect, "clipRect(self) -> QRect");

extern "C" {static PyObject *meth_QImageReader_clipRect(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_clipRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->clipRect());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_clipRect, doc_QImageReader_clipRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_setScaledSize, "setScaledSize(self, QSize)");

extern "C" {static PyObject *meth_QImageReader_setScaledSize(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_setScaledSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
         ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QImageReader, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setScaledSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_setScaledSize, doc_QImageReader_setScaledSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_scaledSize, "scaledSize(self) -> QSize");

extern "C" {static PyObject *meth_QImageReader_scaledSize(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_scaledSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->scaledSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_scaledSize, doc_QImageReader_scaledSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_setScaledClipRect, "setScaledClipRect(self, QRect)");

extern "C" {static PyObject *meth_QImageReader_setScaledClipRect(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_setScaledClipRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect* a0;
         ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QImageReader, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->setScaledClipRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_setScaledClipRect, doc_QImageReader_setScaledClipRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_scaledClipRect, "scaledClipRect(self) -> QRect");

extern "C" {static PyObject *meth_QImageReader_scaledClipRect(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_scaledClipRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->scaledClipRect());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_scaledClipRect, doc_QImageReader_scaledClipRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_canRead, "canRead(self) -> bool");

extern "C" {static PyObject *meth_QImageReader_canRead(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_canRead(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->canRead();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_canRead, doc_QImageReader_canRead);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_read, "read(self) -> QImage\n"
"read(self, QImage) -> bool");

extern "C" {static PyObject *meth_QImageReader_read(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_read(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
             ::QImage*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QImage(sipCpp->read());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QImage,SIP_NULLPTR);
        }
    }

    {
         ::QImage* a0;
         ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QImageReader, &sipCpp, sipType_QImage, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->read(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_read, doc_QImageReader_read);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_jumpToNextImage, "jumpToNextImage(self) -> bool");

extern "C" {static PyObject *meth_QImageReader_jumpToNextImage(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_jumpToNextImage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->jumpToNextImage();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_jumpToNextImage, doc_QImageReader_jumpToNextImage);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_jumpToImage, "jumpToImage(self, int) -> bool");

extern "C" {static PyObject *meth_QImageReader_jumpToImage(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_jumpToImage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QImageReader, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->jumpToImage(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_jumpToImage, doc_QImageReader_jumpToImage);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_loopCount, "loopCount(self) -> int");

extern "C" {static PyObject *meth_QImageReader_loopCount(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_loopCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->loopCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_loopCount, doc_QImageReader_loopCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_imageCount, "imageCount(self) -> int");

extern "C" {static PyObject *meth_QImageReader_imageCount(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_imageCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->imageCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_imageCount, doc_QImageReader_imageCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_nextImageDelay, "nextImageDelay(self) -> int");

extern "C" {static PyObject *meth_QImageReader_nextImageDelay(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_nextImageDelay(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->nextImageDelay();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_nextImageDelay, doc_QImageReader_nextImageDelay);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_currentImageNumber, "currentImageNumber(self) -> int");

extern "C" {static PyObject *meth_QImageReader_currentImageNumber(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_currentImageNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->currentImageNumber();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_currentImageNumber, doc_QImageReader_currentImageNumber);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_currentImageRect, "currentImageRect(self) -> QRect");

extern "C" {static PyObject *meth_QImageReader_currentImageRect(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_currentImageRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->currentImageRect());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_currentImageRect, doc_QImageReader_currentImageRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_error, "error(self) -> QImageReader.ImageReaderError");

extern "C" {static PyObject *meth_QImageReader_error(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
             ::QImageReader::ImageReaderError sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QImageReader_ImageReaderError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_error, doc_QImageReader_error);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QImageReader_errorString(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_errorString, doc_QImageReader_errorString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_imageFormat, "imageFormat(str) -> QByteArray\n"
"imageFormat(QIODevice) -> QByteArray\n"
"imageFormat(self) -> QImage.Format");

extern "C" {static PyObject *meth_QImageReader_imageFormat(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_imageFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray( ::QImageReader::imageFormat(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    {
         ::QIODevice* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_QIODevice, &a0))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray( ::QImageReader::imageFormat(a0));

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    {
        const  ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
             ::QImage::Format sipRes;

            sipRes = sipCpp->imageFormat();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QImage_Format);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_imageFormat, doc_QImageReader_imageFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_supportedImageFormats, "supportedImageFormats() -> List[QByteArray]");

extern "C" {static PyObject *meth_QImageReader_supportedImageFormats(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_supportedImageFormats(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList< ::QByteArray>*sipRes;

            sipRes = new QList< ::QByteArray>( ::QImageReader::supportedImageFormats());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_supportedImageFormats, doc_QImageReader_supportedImageFormats);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_textKeys, "textKeys(self) -> List[str]");

extern "C" {static PyObject *meth_QImageReader_textKeys(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_textKeys(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->textKeys());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_textKeys, doc_QImageReader_textKeys);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_text, "text(self, str) -> str");

extern "C" {static PyObject *meth_QImageReader_text(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QImageReader, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->text(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_text, doc_QImageReader_text);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_setBackgroundColor, "setBackgroundColor(self, Union[QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QImageReader_setBackgroundColor(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_setBackgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor* a0;
        int a0State = 0;
         ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QImageReader, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->setBackgroundColor(*a0);
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_setBackgroundColor, doc_QImageReader_setBackgroundColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_backgroundColor, "backgroundColor(self) -> QColor");

extern "C" {static PyObject *meth_QImageReader_backgroundColor(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_backgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor(sipCpp->backgroundColor());

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_backgroundColor, doc_QImageReader_backgroundColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_supportsAnimation, "supportsAnimation(self) -> bool");

extern "C" {static PyObject *meth_QImageReader_supportsAnimation(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_supportsAnimation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->supportsAnimation();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_supportsAnimation, doc_QImageReader_supportsAnimation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_setQuality, "setQuality(self, int)");

extern "C" {static PyObject *meth_QImageReader_setQuality(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_setQuality(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QImageReader, &sipCpp, &a0))
        {
            sipCpp->setQuality(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_setQuality, doc_QImageReader_setQuality);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_quality, "quality(self) -> int");

extern "C" {static PyObject *meth_QImageReader_quality(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_quality(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->quality();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_quality, doc_QImageReader_quality);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_supportsOption, "supportsOption(self, QImageIOHandler.ImageOption) -> bool");

extern "C" {static PyObject *meth_QImageReader_supportsOption(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_supportsOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QImageIOHandler::ImageOption a0;
        const  ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QImageReader, &sipCpp, sipType_QImageIOHandler_ImageOption, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->supportsOption(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_supportsOption, doc_QImageReader_supportsOption);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_setAutoDetectImageFormat, "setAutoDetectImageFormat(self, bool)");

extern "C" {static PyObject *meth_QImageReader_setAutoDetectImageFormat(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_setAutoDetectImageFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QImageReader, &sipCpp, &a0))
        {
            sipCpp->setAutoDetectImageFormat(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_setAutoDetectImageFormat, doc_QImageReader_setAutoDetectImageFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_autoDetectImageFormat, "autoDetectImageFormat(self) -> bool");

extern "C" {static PyObject *meth_QImageReader_autoDetectImageFormat(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_autoDetectImageFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->autoDetectImageFormat();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_autoDetectImageFormat, doc_QImageReader_autoDetectImageFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_setDecideFormatFromContent, "setDecideFormatFromContent(self, bool)");

extern "C" {static PyObject *meth_QImageReader_setDecideFormatFromContent(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_setDecideFormatFromContent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QImageReader, &sipCpp, &a0))
        {
            sipCpp->setDecideFormatFromContent(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_setDecideFormatFromContent, doc_QImageReader_setDecideFormatFromContent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_decideFormatFromContent, "decideFormatFromContent(self) -> bool");

extern "C" {static PyObject *meth_QImageReader_decideFormatFromContent(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_decideFormatFromContent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->decideFormatFromContent();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_decideFormatFromContent, doc_QImageReader_decideFormatFromContent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_supportedMimeTypes, "supportedMimeTypes() -> List[QByteArray]");

extern "C" {static PyObject *meth_QImageReader_supportedMimeTypes(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_supportedMimeTypes(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList< ::QByteArray>*sipRes;

            sipRes = new QList< ::QByteArray>( ::QImageReader::supportedMimeTypes());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_supportedMimeTypes, doc_QImageReader_supportedMimeTypes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_subType, "subType(self) -> QByteArray");

extern "C" {static PyObject *meth_QImageReader_subType(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_subType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->subType());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_subType, doc_QImageReader_subType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_supportedSubTypes, "supportedSubTypes(self) -> List[QByteArray]");

extern "C" {static PyObject *meth_QImageReader_supportedSubTypes(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_supportedSubTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
            QList< ::QByteArray>*sipRes;

            sipRes = new QList< ::QByteArray>(sipCpp->supportedSubTypes());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_supportedSubTypes, doc_QImageReader_supportedSubTypes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_transformation, "transformation(self) -> QImageIOHandler.Transformations");

extern "C" {static PyObject *meth_QImageReader_transformation(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_transformation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
             ::QImageIOHandler::Transformations*sipRes;

            sipRes = new  ::QImageIOHandler::Transformations(sipCpp->transformation());

            return sipConvertFromNewType(sipRes,sipType_QImageIOHandler_Transformations,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_transformation, doc_QImageReader_transformation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_setAutoTransform, "setAutoTransform(self, bool)");

extern "C" {static PyObject *meth_QImageReader_setAutoTransform(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_setAutoTransform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QImageReader, &sipCpp, &a0))
        {
            sipCpp->setAutoTransform(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_setAutoTransform, doc_QImageReader_setAutoTransform);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_autoTransform, "autoTransform(self) -> bool");

extern "C" {static PyObject *meth_QImageReader_autoTransform(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_autoTransform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->autoTransform();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_autoTransform, doc_QImageReader_autoTransform);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_setGamma, "setGamma(self, float)");

extern "C" {static PyObject *meth_QImageReader_setGamma(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_setGamma(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
         ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QImageReader, &sipCpp, &a0))
        {
            sipCpp->setGamma(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_setGamma, doc_QImageReader_setGamma);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_gamma, "gamma(self) -> float");

extern "C" {static PyObject *meth_QImageReader_gamma(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_gamma(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->gamma();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_gamma, doc_QImageReader_gamma);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageReader_imageFormatsForMimeType, "imageFormatsForMimeType(Union[QByteArray, bytes, bytearray]) -> List[QByteArray]");

extern "C" {static PyObject *meth_QImageReader_imageFormatsForMimeType(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_imageFormatsForMimeType(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QByteArray, &a0, &a0State))
        {
            QList< ::QByteArray>*sipRes;

            sipRes = new QList< ::QByteArray>( ::QImageReader::imageFormatsForMimeType(*a0));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_imageFormatsForMimeType, doc_QImageReader_imageFormatsForMimeType);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QImageReader(void *, int);}
static void release_QImageReader(void *sipCppV, int)
{
    delete reinterpret_cast< ::QImageReader *>(sipCppV);
}


extern "C" {static void dealloc_QImageReader(sipSimpleWrapper *);}
static void dealloc_QImageReader(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QImageReader(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QImageReader(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QImageReader(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QImageReader *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QImageReader();

            return sipCpp;
        }
    }

    {
         ::QIODevice* a0;
        const  ::QByteArray& a1def = QByteArray();
        const  ::QByteArray* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|J1", sipType_QIODevice, &a0, sipType_QByteArray, &a1, &a1State))
        {
            sipCpp = new  ::QImageReader(a0,*a1);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QByteArray& a1def = QByteArray();
        const  ::QByteArray* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|J1", sipType_QString,&a0, &a0State, sipType_QByteArray, &a1, &a1State))
        {
            sipCpp = new  ::QImageReader(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QImageReader[] = {
    {SIP_MLNAME_CAST(sipName_autoDetectImageFormat), meth_QImageReader_autoDetectImageFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_autoDetectImageFormat)},
    {SIP_MLNAME_CAST(sipName_autoTransform), meth_QImageReader_autoTransform, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_autoTransform)},
    {SIP_MLNAME_CAST(sipName_backgroundColor), meth_QImageReader_backgroundColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_backgroundColor)},
    {SIP_MLNAME_CAST(sipName_canRead), meth_QImageReader_canRead, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_canRead)},
    {SIP_MLNAME_CAST(sipName_clipRect), meth_QImageReader_clipRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_clipRect)},
    {SIP_MLNAME_CAST(sipName_currentImageNumber), meth_QImageReader_currentImageNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_currentImageNumber)},
    {SIP_MLNAME_CAST(sipName_currentImageRect), meth_QImageReader_currentImageRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_currentImageRect)},
    {SIP_MLNAME_CAST(sipName_decideFormatFromContent), meth_QImageReader_decideFormatFromContent, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_decideFormatFromContent)},
    {SIP_MLNAME_CAST(sipName_device), meth_QImageReader_device, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_device)},
    {SIP_MLNAME_CAST(sipName_error), meth_QImageReader_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QImageReader_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_errorString)},
    {SIP_MLNAME_CAST(sipName_fileName), meth_QImageReader_fileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_fileName)},
    {SIP_MLNAME_CAST(sipName_format), meth_QImageReader_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_format)},
    {SIP_MLNAME_CAST(sipName_gamma), meth_QImageReader_gamma, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_gamma)},
    {SIP_MLNAME_CAST(sipName_imageCount), meth_QImageReader_imageCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_imageCount)},
    {SIP_MLNAME_CAST(sipName_imageFormat), meth_QImageReader_imageFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_imageFormat)},
    {SIP_MLNAME_CAST(sipName_imageFormatsForMimeType), meth_QImageReader_imageFormatsForMimeType, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_imageFormatsForMimeType)},
    {SIP_MLNAME_CAST(sipName_jumpToImage), meth_QImageReader_jumpToImage, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_jumpToImage)},
    {SIP_MLNAME_CAST(sipName_jumpToNextImage), meth_QImageReader_jumpToNextImage, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_jumpToNextImage)},
    {SIP_MLNAME_CAST(sipName_loopCount), meth_QImageReader_loopCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_loopCount)},
    {SIP_MLNAME_CAST(sipName_nextImageDelay), meth_QImageReader_nextImageDelay, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_nextImageDelay)},
    {SIP_MLNAME_CAST(sipName_quality), meth_QImageReader_quality, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_quality)},
    {SIP_MLNAME_CAST(sipName_read), meth_QImageReader_read, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_read)},
    {SIP_MLNAME_CAST(sipName_scaledClipRect), meth_QImageReader_scaledClipRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_scaledClipRect)},
    {SIP_MLNAME_CAST(sipName_scaledSize), meth_QImageReader_scaledSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_scaledSize)},
    {SIP_MLNAME_CAST(sipName_setAutoDetectImageFormat), meth_QImageReader_setAutoDetectImageFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_setAutoDetectImageFormat)},
    {SIP_MLNAME_CAST(sipName_setAutoTransform), meth_QImageReader_setAutoTransform, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_setAutoTransform)},
    {SIP_MLNAME_CAST(sipName_setBackgroundColor), meth_QImageReader_setBackgroundColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_setBackgroundColor)},
    {SIP_MLNAME_CAST(sipName_setClipRect), meth_QImageReader_setClipRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_setClipRect)},
    {SIP_MLNAME_CAST(sipName_setDecideFormatFromContent), meth_QImageReader_setDecideFormatFromContent, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_setDecideFormatFromContent)},
    {SIP_MLNAME_CAST(sipName_setDevice), meth_QImageReader_setDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_setDevice)},
    {SIP_MLNAME_CAST(sipName_setFileName), meth_QImageReader_setFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_setFileName)},
    {SIP_MLNAME_CAST(sipName_setFormat), meth_QImageReader_setFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_setFormat)},
    {SIP_MLNAME_CAST(sipName_setGamma), meth_QImageReader_setGamma, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_setGamma)},
    {SIP_MLNAME_CAST(sipName_setQuality), meth_QImageReader_setQuality, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_setQuality)},
    {SIP_MLNAME_CAST(sipName_setScaledClipRect), meth_QImageReader_setScaledClipRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_setScaledClipRect)},
    {SIP_MLNAME_CAST(sipName_setScaledSize), meth_QImageReader_setScaledSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_setScaledSize)},
    {SIP_MLNAME_CAST(sipName_size), meth_QImageReader_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_size)},
    {SIP_MLNAME_CAST(sipName_subType), meth_QImageReader_subType, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_subType)},
    {SIP_MLNAME_CAST(sipName_supportedImageFormats), meth_QImageReader_supportedImageFormats, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_supportedImageFormats)},
    {SIP_MLNAME_CAST(sipName_supportedMimeTypes), meth_QImageReader_supportedMimeTypes, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_supportedMimeTypes)},
    {SIP_MLNAME_CAST(sipName_supportedSubTypes), meth_QImageReader_supportedSubTypes, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_supportedSubTypes)},
    {SIP_MLNAME_CAST(sipName_supportsAnimation), meth_QImageReader_supportsAnimation, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_supportsAnimation)},
    {SIP_MLNAME_CAST(sipName_supportsOption), meth_QImageReader_supportsOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_supportsOption)},
    {SIP_MLNAME_CAST(sipName_text), meth_QImageReader_text, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_text)},
    {SIP_MLNAME_CAST(sipName_textKeys), meth_QImageReader_textKeys, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_textKeys)},
    {SIP_MLNAME_CAST(sipName_transformation), meth_QImageReader_transformation, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_transformation)}
};

static sipEnumMemberDef enummembers_QImageReader[] = {
    {sipName_DeviceError, static_cast<int>( ::QImageReader::DeviceError), 74},
    {sipName_FileNotFoundError, static_cast<int>( ::QImageReader::FileNotFoundError), 74},
    {sipName_InvalidDataError, static_cast<int>( ::QImageReader::InvalidDataError), 74},
    {sipName_UnknownError, static_cast<int>( ::QImageReader::UnknownError), 74},
    {sipName_UnsupportedFormatError, static_cast<int>( ::QImageReader::UnsupportedFormatError), 74},
};

PyDoc_STRVAR(doc_QImageReader, "\1QImageReader()\n"
"QImageReader(QIODevice, format: Union[QByteArray, bytes, bytearray] = QByteArray())\n"
"QImageReader(str, format: Union[QByteArray, bytes, bytearray] = QByteArray())");


static pyqt5ClassPluginDef plugin_QImageReader = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QImageReader = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QImageReader,
        {SIP_NULLPTR},
        &plugin_QImageReader
    },
    {
        sipNameNr_QImageReader,
        {0, 0, 1},
        47, methods_QImageReader,
        5, enummembers_QImageReader,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QImageReader,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QImageReader,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QImageReader,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QImageReader,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qimageiohandler.sip"
#include <qimageiohandler.h>
#line 37441 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qimageiohandler.sip"
#include <qimageiohandler.h>
#line 37445 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


extern "C" {static long slot_QImageIOHandler_Transformations___hash__(PyObject *);}
static long slot_QImageIOHandler_Transformations___hash__(PyObject *sipSelf)
{
     ::QImageIOHandler::Transformations *sipCpp = reinterpret_cast< ::QImageIOHandler::Transformations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QImageIOHandler_Transformations));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QImageIOHandler::Transformations::Int();
#line 37463 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QImageIOHandler_Transformations___bool__(PyObject *);}
static int slot_QImageIOHandler_Transformations___bool__(PyObject *sipSelf)
{
     ::QImageIOHandler::Transformations *sipCpp = reinterpret_cast< ::QImageIOHandler::Transformations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QImageIOHandler_Transformations));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QImageIOHandler::Transformations::Int() != 0);
#line 37488 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QImageIOHandler_Transformations___ne__(PyObject *,PyObject *);}
static PyObject *slot_QImageIOHandler_Transformations___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QImageIOHandler::Transformations *sipCpp = reinterpret_cast< ::QImageIOHandler::Transformations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QImageIOHandler_Transformations));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageIOHandler::Transformations* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QImageIOHandler_Transformations, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QImageIOHandler::Transformations::Int() != a0->operator QImageIOHandler::Transformations::Int());
#line 37518 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
            sipReleaseType(const_cast< ::QImageIOHandler::Transformations *>(a0),sipType_QImageIOHandler_Transformations,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QImageIOHandler_Transformations, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QImageIOHandler_Transformations___eq__(PyObject *,PyObject *);}
static PyObject *slot_QImageIOHandler_Transformations___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QImageIOHandler::Transformations *sipCpp = reinterpret_cast< ::QImageIOHandler::Transformations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QImageIOHandler_Transformations));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageIOHandler::Transformations* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QImageIOHandler_Transformations, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QImageIOHandler::Transformations::Int() == a0->operator QImageIOHandler::Transformations::Int());
#line 37554 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
            sipReleaseType(const_cast< ::QImageIOHandler::Transformations *>(a0),sipType_QImageIOHandler_Transformations,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QImageIOHandler_Transformations, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QImageIOHandler_Transformations___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QImageIOHandler_Transformations___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QImageIOHandler_Transformations)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QImageIOHandler::Transformations *sipCpp = reinterpret_cast< ::QImageIOHandler::Transformations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QImageIOHandler_Transformations));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QImageIOHandler::Transformations(*sipCpp ^ a0);
#line 37593 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QImageIOHandler_Transformations___xor__(PyObject *,PyObject *);}
static PyObject *slot_QImageIOHandler_Transformations___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QImageIOHandler::Transformations* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QImageIOHandler_Transformations, &a0, &a0State, &a1))
        {
             ::QImageIOHandler::Transformations*sipRes;

            sipRes = new  ::QImageIOHandler::Transformations((*a0 ^ a1));
            sipReleaseType(a0,sipType_QImageIOHandler_Transformations,a0State);

            return sipConvertFromNewType(sipRes,sipType_QImageIOHandler_Transformations,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QImageIOHandler_Transformations___ior__(PyObject *,PyObject *);}
static PyObject *slot_QImageIOHandler_Transformations___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QImageIOHandler_Transformations)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QImageIOHandler::Transformations *sipCpp = reinterpret_cast< ::QImageIOHandler::Transformations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QImageIOHandler_Transformations));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QImageIOHandler::Transformations(*sipCpp | a0);
#line 37665 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QImageIOHandler_Transformations___or__(PyObject *,PyObject *);}
static PyObject *slot_QImageIOHandler_Transformations___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QImageIOHandler::Transformations* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QImageIOHandler_Transformations, &a0, &a0State, &a1))
        {
             ::QImageIOHandler::Transformations*sipRes;

            sipRes = new  ::QImageIOHandler::Transformations((*a0 | a1));
            sipReleaseType(a0,sipType_QImageIOHandler_Transformations,a0State);

            return sipConvertFromNewType(sipRes,sipType_QImageIOHandler_Transformations,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QImageIOHandler_Transformations___iand__(PyObject *,PyObject *);}
static PyObject *slot_QImageIOHandler_Transformations___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QImageIOHandler_Transformations)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QImageIOHandler::Transformations *sipCpp = reinterpret_cast< ::QImageIOHandler::Transformations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QImageIOHandler_Transformations));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QImageIOHandler::Transformations::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QImageIOHandler_Transformations___and__(PyObject *,PyObject *);}
static PyObject *slot_QImageIOHandler_Transformations___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QImageIOHandler::Transformations* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QImageIOHandler_Transformations, &a0, &a0State, &a1))
        {
             ::QImageIOHandler::Transformations*sipRes;

            sipRes = new  ::QImageIOHandler::Transformations((*a0 & a1));
            sipReleaseType(a0,sipType_QImageIOHandler_Transformations,a0State);

            return sipConvertFromNewType(sipRes,sipType_QImageIOHandler_Transformations,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QImageIOHandler_Transformations___invert__(PyObject *);}
static PyObject *slot_QImageIOHandler_Transformations___invert__(PyObject *sipSelf)
{
     ::QImageIOHandler::Transformations *sipCpp = reinterpret_cast< ::QImageIOHandler::Transformations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QImageIOHandler_Transformations));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QImageIOHandler::Transformations*sipRes;

            sipRes = new  ::QImageIOHandler::Transformations(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QImageIOHandler_Transformations,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QImageIOHandler_Transformations___int__(PyObject *);}
static PyObject *slot_QImageIOHandler_Transformations___int__(PyObject *sipSelf)
{
     ::QImageIOHandler::Transformations *sipCpp = reinterpret_cast< ::QImageIOHandler::Transformations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QImageIOHandler_Transformations));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QImageIOHandler_Transformations(void *, int);}
static void release_QImageIOHandler_Transformations(void *sipCppV, int)
{
    delete reinterpret_cast< ::QImageIOHandler::Transformations *>(sipCppV);
}


extern "C" {static void assign_QImageIOHandler_Transformations(void *, SIP_SSIZE_T, void *);}
static void assign_QImageIOHandler_Transformations(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QImageIOHandler::Transformations *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QImageIOHandler::Transformations *>(sipSrc);
}


extern "C" {static void *array_QImageIOHandler_Transformations(SIP_SSIZE_T);}
static void *array_QImageIOHandler_Transformations(SIP_SSIZE_T sipNrElem)
{
    return new  ::QImageIOHandler::Transformations[sipNrElem];
}


extern "C" {static void *copy_QImageIOHandler_Transformations(const void *, SIP_SSIZE_T);}
static void *copy_QImageIOHandler_Transformations(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QImageIOHandler::Transformations(reinterpret_cast<const  ::QImageIOHandler::Transformations *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QImageIOHandler_Transformations(sipSimpleWrapper *);}
static void dealloc_QImageIOHandler_Transformations(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QImageIOHandler_Transformations(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QImageIOHandler_Transformations(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QImageIOHandler_Transformations(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QImageIOHandler::Transformations *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QImageIOHandler::Transformations();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QImageIOHandler::Transformations(a0);

            return sipCpp;
        }
    }

    {
        const  ::QImageIOHandler::Transformations* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QImageIOHandler_Transformations, &a0, &a0State))
        {
            sipCpp = new  ::QImageIOHandler::Transformations(*a0);
            sipReleaseType(const_cast< ::QImageIOHandler::Transformations *>(a0),sipType_QImageIOHandler_Transformations,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QImageIOHandler_Transformations(PyObject *, void **, int *, PyObject *);}
static int convertTo_QImageIOHandler_Transformations(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QImageIOHandler::Transformations **sipCppPtr = reinterpret_cast< ::QImageIOHandler::Transformations **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QImageIOHandler::Transformations is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QImageIOHandler_Transformation)) ||
            sipCanConvertToType(sipPy, sipType_QImageIOHandler_Transformations, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QImageIOHandler_Transformation)))
{
    *sipCppPtr = new QImageIOHandler::Transformations(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QImageIOHandler::Transformations *>(sipConvertToType(sipPy, sipType_QImageIOHandler_Transformations, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 37933 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QImageIOHandler_Transformations[] = {
    {(void *)slot_QImageIOHandler_Transformations___hash__, hash_slot},
    {(void *)slot_QImageIOHandler_Transformations___bool__, bool_slot},
    {(void *)slot_QImageIOHandler_Transformations___ne__, ne_slot},
    {(void *)slot_QImageIOHandler_Transformations___eq__, eq_slot},
    {(void *)slot_QImageIOHandler_Transformations___ixor__, ixor_slot},
    {(void *)slot_QImageIOHandler_Transformations___xor__, xor_slot},
    {(void *)slot_QImageIOHandler_Transformations___ior__, ior_slot},
    {(void *)slot_QImageIOHandler_Transformations___or__, or_slot},
    {(void *)slot_QImageIOHandler_Transformations___iand__, iand_slot},
    {(void *)slot_QImageIOHandler_Transformations___and__, and_slot},
    {(void *)slot_QImageIOHandler_Transformations___invert__, invert_slot},
    {(void *)slot_QImageIOHandler_Transformations___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QImageIOHandler_Transformations, "\1QImageIOHandler.Transformations()\n"
"QImageIOHandler.Transformations(Union[QImageIOHandler.Transformations, QImageIOHandler.Transformation])\n"
"QImageIOHandler.Transformations(QImageIOHandler.Transformations)");


static pyqt5ClassPluginDef plugin_QImageIOHandler_Transformations = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QImageIOHandler_Transformations = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QImageIOHandler__Transformations,
        {SIP_NULLPTR},
        &plugin_QImageIOHandler_Transformations
    },
    {
        sipNameNr_Transformations,
        {69, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QImageIOHandler_Transformations,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QImageIOHandler_Transformations,
    init_type_QImageIOHandler_Transformations,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QImageIOHandler_Transformations,
    assign_QImageIOHandler_Transformations,
    array_QImageIOHandler_Transformations,
    copy_QImageIOHandler_Transformations,
    release_QImageIOHandler_Transformations,
    SIP_NULLPTR,
    convertTo_QImageIOHandler_Transformations,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qimageiohandler.sip"
#include <qimageiohandler.h>
#line 38021 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 38025 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 38028 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qimage.sip"
#include <qimage.h>
#line 38031 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 38034 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 38037 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQImageIOHandler : public  ::QImageIOHandler
{
public:
    sipQImageIOHandler();
    virtual ~sipQImageIOHandler();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QRect currentImageRect() const SIP_OVERRIDE;
    int currentImageNumber() const SIP_OVERRIDE;
    int nextImageDelay() const SIP_OVERRIDE;
    int imageCount() const SIP_OVERRIDE;
    int loopCount() const SIP_OVERRIDE;
    bool jumpToImage(int) SIP_OVERRIDE;
    bool jumpToNextImage() SIP_OVERRIDE;
    bool supportsOption( ::QImageIOHandler::ImageOption) const SIP_OVERRIDE;
    void setOption( ::QImageIOHandler::ImageOption,const  ::QVariant&) SIP_OVERRIDE;
     ::QVariant option( ::QImageIOHandler::ImageOption) const SIP_OVERRIDE;
    bool write(const  ::QImage&) SIP_OVERRIDE;
    bool read( ::QImage*) SIP_OVERRIDE;
    bool canRead() const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQImageIOHandler(const sipQImageIOHandler &);
    sipQImageIOHandler &operator = (const sipQImageIOHandler &);

    char sipPyMethods[13];
};

sipQImageIOHandler::sipQImageIOHandler():  ::QImageIOHandler(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQImageIOHandler::~sipQImageIOHandler()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::QRect sipQImageIOHandler::currentImageRect() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_currentImageRect);

    if (!sipMeth)
        return  ::QImageIOHandler::currentImageRect();

    extern  ::QRect sipVH_QtGui_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_35(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQImageIOHandler::currentImageNumber() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_currentImageNumber);

    if (!sipMeth)
        return  ::QImageIOHandler::currentImageNumber();

    extern int sipVH_QtGui_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_8(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQImageIOHandler::nextImageDelay() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,SIP_NULLPTR,sipName_nextImageDelay);

    if (!sipMeth)
        return  ::QImageIOHandler::nextImageDelay();

    extern int sipVH_QtGui_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_8(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQImageIOHandler::imageCount() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,SIP_NULLPTR,sipName_imageCount);

    if (!sipMeth)
        return  ::QImageIOHandler::imageCount();

    extern int sipVH_QtGui_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_8(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQImageIOHandler::loopCount() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,SIP_NULLPTR,sipName_loopCount);

    if (!sipMeth)
        return  ::QImageIOHandler::loopCount();

    extern int sipVH_QtGui_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_8(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQImageIOHandler::jumpToImage(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_jumpToImage);

    if (!sipMeth)
        return  ::QImageIOHandler::jumpToImage(a0);

    extern bool sipVH_QtGui_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_34(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQImageIOHandler::jumpToNextImage()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_jumpToNextImage);

    if (!sipMeth)
        return  ::QImageIOHandler::jumpToNextImage();

    extern bool sipVH_QtGui_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_28(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQImageIOHandler::supportsOption( ::QImageIOHandler::ImageOption a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,SIP_NULLPTR,sipName_supportsOption);

    if (!sipMeth)
        return  ::QImageIOHandler::supportsOption(a0);

    extern bool sipVH_QtGui_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QImageIOHandler::ImageOption);

    return sipVH_QtGui_33(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQImageIOHandler::setOption( ::QImageIOHandler::ImageOption a0,const  ::QVariant& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_setOption);

    if (!sipMeth)
    {
         ::QImageIOHandler::setOption(a0,a1);
        return;
    }

    extern void sipVH_QtGui_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QImageIOHandler::ImageOption,const  ::QVariant&);

    sipVH_QtGui_32(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QVariant sipQImageIOHandler::option( ::QImageIOHandler::ImageOption a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,SIP_NULLPTR,sipName_option);

    if (!sipMeth)
        return  ::QImageIOHandler::option(a0);

    extern  ::QVariant sipVH_QtGui_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QImageIOHandler::ImageOption);

    return sipVH_QtGui_31(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQImageIOHandler::write(const  ::QImage& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_write);

    if (!sipMeth)
        return  ::QImageIOHandler::write(a0);

    extern bool sipVH_QtGui_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QImage&);

    return sipVH_QtGui_30(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQImageIOHandler::read( ::QImage*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,sipName_QImageIOHandler,sipName_read);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtGui_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QImage*);

    return sipVH_QtGui_29(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQImageIOHandler::canRead() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,sipName_QImageIOHandler,sipName_canRead);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtGui_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_28(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QImageIOHandler_setDevice, "setDevice(self, QIODevice)");

extern "C" {static PyObject *meth_QImageIOHandler_setDevice(PyObject *, PyObject *);}
static PyObject *meth_QImageIOHandler_setDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QIODevice* a0;
         ::QImageIOHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QImageIOHandler, &sipCpp, sipType_QIODevice, &a0))
        {
            sipCpp->setDevice(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageIOHandler, sipName_setDevice, doc_QImageIOHandler_setDevice);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageIOHandler_device, "device(self) -> QIODevice");

extern "C" {static PyObject *meth_QImageIOHandler_device(PyObject *, PyObject *);}
static PyObject *meth_QImageIOHandler_device(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageIOHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageIOHandler, &sipCpp))
        {
             ::QIODevice*sipRes;

            sipRes = sipCpp->device();

            return sipConvertFromType(sipRes,sipType_QIODevice,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageIOHandler, sipName_device, doc_QImageIOHandler_device);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageIOHandler_setFormat, "setFormat(self, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QImageIOHandler_setFormat(PyObject *, PyObject *);}
static PyObject *meth_QImageIOHandler_setFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QImageIOHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QImageIOHandler, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->setFormat(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageIOHandler, sipName_setFormat, doc_QImageIOHandler_setFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageIOHandler_format, "format(self) -> QByteArray");

extern "C" {static PyObject *meth_QImageIOHandler_format(PyObject *, PyObject *);}
static PyObject *meth_QImageIOHandler_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImageIOHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageIOHandler, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->format());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageIOHandler, sipName_format, doc_QImageIOHandler_format);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageIOHandler_canRead, "canRead(self) -> bool");

extern "C" {static PyObject *meth_QImageIOHandler_canRead(PyObject *, PyObject *);}
static PyObject *meth_QImageIOHandler_canRead(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QImageIOHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageIOHandler, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QImageIOHandler, sipName_canRead);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->canRead();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageIOHandler, sipName_canRead, doc_QImageIOHandler_canRead);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageIOHandler_read, "read(self, QImage) -> bool");

extern "C" {static PyObject *meth_QImageIOHandler_read(PyObject *, PyObject *);}
static PyObject *meth_QImageIOHandler_read(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QImage* a0;
         ::QImageIOHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QImageIOHandler, &sipCpp, sipType_QImage, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QImageIOHandler, sipName_read);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->read(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageIOHandler, sipName_read, doc_QImageIOHandler_read);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageIOHandler_write, "write(self, QImage) -> bool");

extern "C" {static PyObject *meth_QImageIOHandler_write(PyObject *, PyObject *);}
static PyObject *meth_QImageIOHandler_write(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QImage* a0;
         ::QImageIOHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QImageIOHandler, &sipCpp, sipType_QImage, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QImageIOHandler::write(*a0) : sipCpp->write(*a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageIOHandler, sipName_write, doc_QImageIOHandler_write);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageIOHandler_option, "option(self, QImageIOHandler.ImageOption) -> Any");

extern "C" {static PyObject *meth_QImageIOHandler_option(PyObject *, PyObject *);}
static PyObject *meth_QImageIOHandler_option(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QImageIOHandler::ImageOption a0;
        const  ::QImageIOHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QImageIOHandler, &sipCpp, sipType_QImageIOHandler_ImageOption, &a0))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QImageIOHandler::option(a0) : sipCpp->option(a0)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageIOHandler, sipName_option, doc_QImageIOHandler_option);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageIOHandler_setOption, "setOption(self, QImageIOHandler.ImageOption, Any)");

extern "C" {static PyObject *meth_QImageIOHandler_setOption(PyObject *, PyObject *);}
static PyObject *meth_QImageIOHandler_setOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QImageIOHandler::ImageOption a0;
        const  ::QVariant* a1;
        int a1State = 0;
         ::QImageIOHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QImageIOHandler, &sipCpp, sipType_QImageIOHandler_ImageOption, &a0, sipType_QVariant, &a1, &a1State))
        {
            (sipSelfWasArg ? sipCpp-> ::QImageIOHandler::setOption(a0,*a1) : sipCpp->setOption(a0,*a1));
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageIOHandler, sipName_setOption, doc_QImageIOHandler_setOption);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageIOHandler_supportsOption, "supportsOption(self, QImageIOHandler.ImageOption) -> bool");

extern "C" {static PyObject *meth_QImageIOHandler_supportsOption(PyObject *, PyObject *);}
static PyObject *meth_QImageIOHandler_supportsOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QImageIOHandler::ImageOption a0;
        const  ::QImageIOHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QImageIOHandler, &sipCpp, sipType_QImageIOHandler_ImageOption, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QImageIOHandler::supportsOption(a0) : sipCpp->supportsOption(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageIOHandler, sipName_supportsOption, doc_QImageIOHandler_supportsOption);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageIOHandler_jumpToNextImage, "jumpToNextImage(self) -> bool");

extern "C" {static PyObject *meth_QImageIOHandler_jumpToNextImage(PyObject *, PyObject *);}
static PyObject *meth_QImageIOHandler_jumpToNextImage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QImageIOHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageIOHandler, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QImageIOHandler::jumpToNextImage() : sipCpp->jumpToNextImage());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageIOHandler, sipName_jumpToNextImage, doc_QImageIOHandler_jumpToNextImage);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageIOHandler_jumpToImage, "jumpToImage(self, int) -> bool");

extern "C" {static PyObject *meth_QImageIOHandler_jumpToImage(PyObject *, PyObject *);}
static PyObject *meth_QImageIOHandler_jumpToImage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::QImageIOHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QImageIOHandler, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QImageIOHandler::jumpToImage(a0) : sipCpp->jumpToImage(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageIOHandler, sipName_jumpToImage, doc_QImageIOHandler_jumpToImage);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageIOHandler_loopCount, "loopCount(self) -> int");

extern "C" {static PyObject *meth_QImageIOHandler_loopCount(PyObject *, PyObject *);}
static PyObject *meth_QImageIOHandler_loopCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QImageIOHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageIOHandler, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QImageIOHandler::loopCount() : sipCpp->loopCount());

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageIOHandler, sipName_loopCount, doc_QImageIOHandler_loopCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageIOHandler_imageCount, "imageCount(self) -> int");

extern "C" {static PyObject *meth_QImageIOHandler_imageCount(PyObject *, PyObject *);}
static PyObject *meth_QImageIOHandler_imageCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QImageIOHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageIOHandler, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QImageIOHandler::imageCount() : sipCpp->imageCount());

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageIOHandler, sipName_imageCount, doc_QImageIOHandler_imageCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageIOHandler_nextImageDelay, "nextImageDelay(self) -> int");

extern "C" {static PyObject *meth_QImageIOHandler_nextImageDelay(PyObject *, PyObject *);}
static PyObject *meth_QImageIOHandler_nextImageDelay(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QImageIOHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageIOHandler, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QImageIOHandler::nextImageDelay() : sipCpp->nextImageDelay());

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageIOHandler, sipName_nextImageDelay, doc_QImageIOHandler_nextImageDelay);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageIOHandler_currentImageNumber, "currentImageNumber(self) -> int");

extern "C" {static PyObject *meth_QImageIOHandler_currentImageNumber(PyObject *, PyObject *);}
static PyObject *meth_QImageIOHandler_currentImageNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QImageIOHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageIOHandler, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QImageIOHandler::currentImageNumber() : sipCpp->currentImageNumber());

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageIOHandler, sipName_currentImageNumber, doc_QImageIOHandler_currentImageNumber);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImageIOHandler_currentImageRect, "currentImageRect(self) -> QRect");

extern "C" {static PyObject *meth_QImageIOHandler_currentImageRect(PyObject *, PyObject *);}
static PyObject *meth_QImageIOHandler_currentImageRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QImageIOHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageIOHandler, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect((sipSelfWasArg ? sipCpp-> ::QImageIOHandler::currentImageRect() : sipCpp->currentImageRect()));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageIOHandler, sipName_currentImageRect, doc_QImageIOHandler_currentImageRect);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QImageIOHandler(void *, int);}
static void release_QImageIOHandler(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQImageIOHandler *>(sipCppV);
    else
        delete reinterpret_cast< ::QImageIOHandler *>(sipCppV);
}


extern "C" {static void dealloc_QImageIOHandler(sipSimpleWrapper *);}
static void dealloc_QImageIOHandler(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQImageIOHandler *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QImageIOHandler(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QImageIOHandler(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QImageIOHandler(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQImageIOHandler *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQImageIOHandler();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QImageIOHandler[] = {
    {SIP_MLNAME_CAST(sipName_canRead), meth_QImageIOHandler_canRead, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageIOHandler_canRead)},
    {SIP_MLNAME_CAST(sipName_currentImageNumber), meth_QImageIOHandler_currentImageNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageIOHandler_currentImageNumber)},
    {SIP_MLNAME_CAST(sipName_currentImageRect), meth_QImageIOHandler_currentImageRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageIOHandler_currentImageRect)},
    {SIP_MLNAME_CAST(sipName_device), meth_QImageIOHandler_device, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageIOHandler_device)},
    {SIP_MLNAME_CAST(sipName_format), meth_QImageIOHandler_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageIOHandler_format)},
    {SIP_MLNAME_CAST(sipName_imageCount), meth_QImageIOHandler_imageCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageIOHandler_imageCount)},
    {SIP_MLNAME_CAST(sipName_jumpToImage), meth_QImageIOHandler_jumpToImage, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageIOHandler_jumpToImage)},
    {SIP_MLNAME_CAST(sipName_jumpToNextImage), meth_QImageIOHandler_jumpToNextImage, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageIOHandler_jumpToNextImage)},
    {SIP_MLNAME_CAST(sipName_loopCount), meth_QImageIOHandler_loopCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageIOHandler_loopCount)},
    {SIP_MLNAME_CAST(sipName_nextImageDelay), meth_QImageIOHandler_nextImageDelay, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageIOHandler_nextImageDelay)},
    {SIP_MLNAME_CAST(sipName_option), meth_QImageIOHandler_option, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageIOHandler_option)},
    {SIP_MLNAME_CAST(sipName_read), meth_QImageIOHandler_read, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageIOHandler_read)},
    {SIP_MLNAME_CAST(sipName_setDevice), meth_QImageIOHandler_setDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageIOHandler_setDevice)},
    {SIP_MLNAME_CAST(sipName_setFormat), meth_QImageIOHandler_setFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageIOHandler_setFormat)},
    {SIP_MLNAME_CAST(sipName_setOption), meth_QImageIOHandler_setOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageIOHandler_setOption)},
    {SIP_MLNAME_CAST(sipName_supportsOption), meth_QImageIOHandler_supportsOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageIOHandler_supportsOption)},
    {SIP_MLNAME_CAST(sipName_write), meth_QImageIOHandler_write, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageIOHandler_write)}
};

static sipEnumMemberDef enummembers_QImageIOHandler[] = {
    {sipName_Animation, static_cast<int>( ::QImageIOHandler::Animation), 70},
    {sipName_BackgroundColor, static_cast<int>( ::QImageIOHandler::BackgroundColor), 70},
    {sipName_ClipRect, static_cast<int>( ::QImageIOHandler::ClipRect), 70},
    {sipName_CompressionRatio, static_cast<int>( ::QImageIOHandler::CompressionRatio), 70},
    {sipName_Description, static_cast<int>( ::QImageIOHandler::Description), 70},
    {sipName_Endianness, static_cast<int>( ::QImageIOHandler::Endianness), 70},
    {sipName_Gamma, static_cast<int>( ::QImageIOHandler::Gamma), 70},
    {sipName_ImageTransformation, static_cast<int>( ::QImageIOHandler::ImageTransformation), 70},
    {sipName_IncrementalReading, static_cast<int>( ::QImageIOHandler::IncrementalReading), 70},
    {sipName_Name, static_cast<int>( ::QImageIOHandler::Name), 70},
    {sipName_OptimizedWrite, static_cast<int>( ::QImageIOHandler::OptimizedWrite), 70},
    {sipName_ProgressiveScanWrite, static_cast<int>( ::QImageIOHandler::ProgressiveScanWrite), 70},
    {sipName_Quality, static_cast<int>( ::QImageIOHandler::Quality), 70},
    {sipName_ScaledClipRect, static_cast<int>( ::QImageIOHandler::ScaledClipRect), 70},
    {sipName_ScaledSize, static_cast<int>( ::QImageIOHandler::ScaledSize), 70},
    {sipName_Size, static_cast<int>( ::QImageIOHandler::Size), 70},
    {sipName_SubType, static_cast<int>( ::QImageIOHandler::SubType), 70},
    {sipName_SupportedSubTypes, static_cast<int>( ::QImageIOHandler::SupportedSubTypes), 70},
    {sipName_TransformationFlip, static_cast<int>( ::QImageIOHandler::TransformationFlip), 71},
    {sipName_TransformationFlipAndRotate90, static_cast<int>( ::QImageIOHandler::TransformationFlipAndRotate90), 71},
    {sipName_TransformationMirror, static_cast<int>( ::QImageIOHandler::TransformationMirror), 71},
    {sipName_TransformationMirrorAndRotate90, static_cast<int>( ::QImageIOHandler::TransformationMirrorAndRotate90), 71},
    {sipName_TransformationNone, static_cast<int>( ::QImageIOHandler::TransformationNone), 71},
    {sipName_TransformationRotate180, static_cast<int>( ::QImageIOHandler::TransformationRotate180), 71},
    {sipName_TransformationRotate270, static_cast<int>( ::QImageIOHandler::TransformationRotate270), 71},
    {sipName_TransformationRotate90, static_cast<int>( ::QImageIOHandler::TransformationRotate90), 71},
    {sipName_TransformedByDefault, static_cast<int>( ::QImageIOHandler::TransformedByDefault), 70},
};

PyDoc_STRVAR(doc_QImageIOHandler, "\1QImageIOHandler()");


static pyqt5ClassPluginDef plugin_QImageIOHandler = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QImageIOHandler = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QImageIOHandler,
        {SIP_NULLPTR},
        &plugin_QImageIOHandler
    },
    {
        sipNameNr_QImageIOHandler,
        {0, 0, 1},
        17, methods_QImageIOHandler,
        27, enummembers_QImageIOHandler,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QImageIOHandler,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QImageIOHandler,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QImageIOHandler,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QImageIOHandler,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qimage.sip"
#include <qimage.h>
#line 38952 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 38956 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 38959 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 38962 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 38965 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 38968 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 34 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpixelformat.sip"
#include <qpixelformat.h>
#line 38971 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 38974 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 38977 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 38980 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 38983 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 52 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 38986 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 38989 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 38992 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 38995 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpygui_qvector.sip"
#include <qvector.h>
#line 38998 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 39001 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQImage : public  ::QImage
{
public:
    sipQImage();
    sipQImage(const  ::QSize&, ::QImage::Format);
    sipQImage(int,int, ::QImage::Format);
    sipQImage(const  ::uchar*,int,int, ::QImage::Format);
    sipQImage( ::uchar*,int,int, ::QImage::Format);
    sipQImage(const  ::uchar*,int,int,int, ::QImage::Format);
    sipQImage( ::uchar*,int,int,int, ::QImage::Format);
    sipQImage(const char**);
    sipQImage(const  ::QString&,const char*);
    sipQImage(const  ::QImage&);
    virtual ~sipQImage();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    int devType() const SIP_OVERRIDE;
     ::QPaintEngine* paintEngine() const SIP_OVERRIDE;
    int metric( ::QPaintDevice::PaintDeviceMetric) const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQImage(const sipQImage &);
    sipQImage &operator = (const sipQImage &);

    char sipPyMethods[3];
};

sipQImage::sipQImage():  ::QImage(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQImage::sipQImage(const  ::QSize& a0, ::QImage::Format a1):  ::QImage(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQImage::sipQImage(int a0,int a1, ::QImage::Format a2):  ::QImage(a0,a1,a2), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQImage::sipQImage(const  ::uchar*a0,int a1,int a2, ::QImage::Format a3):  ::QImage(a0,a1,a2,a3), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQImage::sipQImage( ::uchar*a0,int a1,int a2, ::QImage::Format a3):  ::QImage(a0,a1,a2,a3), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQImage::sipQImage(const  ::uchar*a0,int a1,int a2,int a3, ::QImage::Format a4):  ::QImage(a0,a1,a2,a3,a4), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQImage::sipQImage( ::uchar*a0,int a1,int a2,int a3, ::QImage::Format a4):  ::QImage(a0,a1,a2,a3,a4), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQImage::sipQImage(const char**a0):  ::QImage(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQImage::sipQImage(const  ::QString& a0,const char*a1):  ::QImage(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQImage::sipQImage(const  ::QImage& a0):  ::QImage(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQImage::~sipQImage()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

int sipQImage::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_devType);

    if (!sipMeth)
        return  ::QImage::devType();

    extern int sipVH_QtGui_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_8(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QPaintEngine* sipQImage::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_paintEngine);

    if (!sipMeth)
        return  ::QImage::paintEngine();

    extern  ::QPaintEngine* sipVH_QtGui_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_17(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQImage::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,SIP_NULLPTR,sipName_metric);

    if (!sipMeth)
        return  ::QImage::metric(a0);

    extern int sipVH_QtGui_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_18(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QImage_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QImage_isNull(PyObject *, PyObject *);}
static PyObject *meth_QImage_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_isNull, doc_QImage_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_devType, "devType(self) -> int");

extern "C" {static PyObject *meth_QImage_devType(PyObject *, PyObject *);}
static PyObject *meth_QImage_devType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QImage::devType() : sipCpp->devType());

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_devType, doc_QImage_devType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_detach, "detach(self)");

extern "C" {static PyObject *meth_QImage_detach(PyObject *, PyObject *);}
static PyObject *meth_QImage_detach(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            sipCpp->detach();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_detach, doc_QImage_detach);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_isDetached, "isDetached(self) -> bool");

extern "C" {static PyObject *meth_QImage_isDetached(PyObject *, PyObject *);}
static PyObject *meth_QImage_isDetached(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDetached();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_isDetached, doc_QImage_isDetached);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_copy, "copy(self, rect: QRect = QRect()) -> QImage\n"
"copy(self, int, int, int, int) -> QImage");

extern "C" {static PyObject *meth_QImage_copy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QImage_copy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect& a0def = QRect();
        const  ::QRect* a0 = &a0def;
        const  ::QImage *sipCpp;

        static const char *sipKwdList[] = {
            sipName_rect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J9", &sipSelf, sipType_QImage, &sipCpp, sipType_QRect, &a0))
        {
             ::QImage*sipRes;

            sipRes = new  ::QImage(sipCpp->copy(*a0));

            return sipConvertFromNewType(sipRes,sipType_QImage,SIP_NULLPTR);
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const  ::QImage *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "Biiii", &sipSelf, sipType_QImage, &sipCpp, &a0, &a1, &a2, &a3))
        {
             ::QImage*sipRes;

            sipRes = new  ::QImage(sipCpp->copy(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QImage,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_copy, doc_QImage_copy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_format, "format(self) -> QImage.Format");

extern "C" {static PyObject *meth_QImage_format(PyObject *, PyObject *);}
static PyObject *meth_QImage_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
             ::QImage::Format sipRes;

            sipRes = sipCpp->format();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QImage_Format);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_format, doc_QImage_format);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_convertToFormat, "convertToFormat(self, QImage.Format, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.AutoColor) -> QImage\n"
"convertToFormat(self, QImage.Format, Iterable[int], flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.AutoColor) -> QImage");

extern "C" {static PyObject *meth_QImage_convertToFormat(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QImage_convertToFormat(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QImage::Format a0;
         ::Qt::ImageConversionFlags a1def = Qt::AutoColor;
         ::Qt::ImageConversionFlags* a1 = &a1def;
        int a1State = 0;
        const  ::QImage *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE|J1", &sipSelf, sipType_QImage, &sipCpp, sipType_QImage_Format, &a0, sipType_Qt_ImageConversionFlags, &a1, &a1State))
        {
             ::QImage*sipRes;

            sipRes = new  ::QImage(sipCpp->convertToFormat(a0,*a1));
            sipReleaseType(a1,sipType_Qt_ImageConversionFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QImage,SIP_NULLPTR);
        }
    }

    {
         ::QImage::Format a0;
        const  ::QVector<uint>* a1;
        int a1State = 0;
         ::Qt::ImageConversionFlags a2def = Qt::AutoColor;
         ::Qt::ImageConversionFlags* a2 = &a2def;
        int a2State = 0;
        const  ::QImage *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BEJ1|J1", &sipSelf, sipType_QImage, &sipCpp, sipType_QImage_Format, &a0, sipType_QVector_1900,&a1, &a1State, sipType_Qt_ImageConversionFlags, &a2, &a2State))
        {
             ::QImage*sipRes;

            sipRes = new  ::QImage(sipCpp->convertToFormat(a0,*a1,*a2));
            sipReleaseType(const_cast< ::QVector<uint> *>(a1),sipType_QVector_1900,a1State);
            sipReleaseType(a2,sipType_Qt_ImageConversionFlags,a2State);

            return sipConvertFromNewType(sipRes,sipType_QImage,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_convertToFormat, doc_QImage_convertToFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_width, "width(self) -> int");

extern "C" {static PyObject *meth_QImage_width(PyObject *, PyObject *);}
static PyObject *meth_QImage_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->width();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_width, doc_QImage_width);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_height, "height(self) -> int");

extern "C" {static PyObject *meth_QImage_height(PyObject *, PyObject *);}
static PyObject *meth_QImage_height(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->height();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_height, doc_QImage_height);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_size, "size(self) -> QSize");

extern "C" {static PyObject *meth_QImage_size(PyObject *, PyObject *);}
static PyObject *meth_QImage_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->size());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_size, doc_QImage_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_rect, "rect(self) -> QRect");

extern "C" {static PyObject *meth_QImage_rect(PyObject *, PyObject *);}
static PyObject *meth_QImage_rect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->rect());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_rect, doc_QImage_rect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_depth, "depth(self) -> int");

extern "C" {static PyObject *meth_QImage_depth(PyObject *, PyObject *);}
static PyObject *meth_QImage_depth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->depth();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_depth, doc_QImage_depth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_color, "color(self, int) -> int");

extern "C" {static PyObject *meth_QImage_color(PyObject *, PyObject *);}
static PyObject *meth_QImage_color(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QImage, &sipCpp, &a0))
        {
             ::QRgb sipRes;

            sipRes = sipCpp->color(a0);

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_color, doc_QImage_color);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_setColor, "setColor(self, int, int)");

extern "C" {static PyObject *meth_QImage_setColor(PyObject *, PyObject *);}
static PyObject *meth_QImage_setColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QRgb a1;
         ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biu", &sipSelf, sipType_QImage, &sipCpp, &a0, &a1))
        {
            sipCpp->setColor(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_setColor, doc_QImage_setColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_allGray, "allGray(self) -> bool");

extern "C" {static PyObject *meth_QImage_allGray(PyObject *, PyObject *);}
static PyObject *meth_QImage_allGray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->allGray();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_allGray, doc_QImage_allGray);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_isGrayscale, "isGrayscale(self) -> bool");

extern "C" {static PyObject *meth_QImage_isGrayscale(PyObject *, PyObject *);}
static PyObject *meth_QImage_isGrayscale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isGrayscale();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_isGrayscale, doc_QImage_isGrayscale);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_bits, "bits(self) -> sip.voidptr");

extern "C" {static PyObject *meth_QImage_bits(PyObject *, PyObject *);}
static PyObject *meth_QImage_bits(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            void*sipRes;

            sipRes = sipCpp->bits();

            return sipConvertFromVoidPtr(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_bits, doc_QImage_bits);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_constBits, "constBits(self) -> sip.voidptr");

extern "C" {static PyObject *meth_QImage_constBits(PyObject *, PyObject *);}
static PyObject *meth_QImage_constBits(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            const void*sipRes;

            sipRes = sipCpp->constBits();

            return sipConvertFromConstVoidPtr(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_constBits, doc_QImage_constBits);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_scanLine, "scanLine(self, int) -> sip.voidptr");

extern "C" {static PyObject *meth_QImage_scanLine(PyObject *, PyObject *);}
static PyObject *meth_QImage_scanLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QImage, &sipCpp, &a0))
        {
            void*sipRes;

            sipRes = sipCpp->scanLine(a0);

            return sipConvertFromVoidPtr(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_scanLine, doc_QImage_scanLine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_constScanLine, "constScanLine(self, int) -> sip.voidptr");

extern "C" {static PyObject *meth_QImage_constScanLine(PyObject *, PyObject *);}
static PyObject *meth_QImage_constScanLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QImage, &sipCpp, &a0))
        {
            const void*sipRes;

            sipRes = sipCpp->constScanLine(a0);

            return sipConvertFromConstVoidPtr(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_constScanLine, doc_QImage_constScanLine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_bytesPerLine, "bytesPerLine(self) -> int");

extern "C" {static PyObject *meth_QImage_bytesPerLine(PyObject *, PyObject *);}
static PyObject *meth_QImage_bytesPerLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->bytesPerLine();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_bytesPerLine, doc_QImage_bytesPerLine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_valid, "valid(self, QPoint) -> bool\n"
"valid(self, int, int) -> bool");

extern "C" {static PyObject *meth_QImage_valid(PyObject *, PyObject *);}
static PyObject *meth_QImage_valid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QImage, &sipCpp, sipType_QPoint, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->valid(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        int a0;
        int a1;
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QImage, &sipCpp, &a0, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->valid(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_valid, doc_QImage_valid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_pixelIndex, "pixelIndex(self, QPoint) -> int\n"
"pixelIndex(self, int, int) -> int");

extern "C" {static PyObject *meth_QImage_pixelIndex(PyObject *, PyObject *);}
static PyObject *meth_QImage_pixelIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QImage, &sipCpp, sipType_QPoint, &a0))
        {
            int sipRes;

            sipRes = sipCpp->pixelIndex(*a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        int a0;
        int a1;
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QImage, &sipCpp, &a0, &a1))
        {
            int sipRes;

            sipRes = sipCpp->pixelIndex(a0,a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_pixelIndex, doc_QImage_pixelIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_pixel, "pixel(self, QPoint) -> int\n"
"pixel(self, int, int) -> int");

extern "C" {static PyObject *meth_QImage_pixel(PyObject *, PyObject *);}
static PyObject *meth_QImage_pixel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QImage, &sipCpp, sipType_QPoint, &a0))
        {
             ::QRgb sipRes;

            sipRes = sipCpp->pixel(*a0);

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    {
        int a0;
        int a1;
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QImage, &sipCpp, &a0, &a1))
        {
             ::QRgb sipRes;

            sipRes = sipCpp->pixel(a0,a1);

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_pixel, doc_QImage_pixel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_setPixel, "setPixel(self, QPoint, int)\n"
"setPixel(self, int, int, int)");

extern "C" {static PyObject *meth_QImage_setPixel(PyObject *, PyObject *);}
static PyObject *meth_QImage_setPixel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
         ::uint a1;
         ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9u", &sipSelf, sipType_QImage, &sipCpp, sipType_QPoint, &a0, &a1))
        {
            sipCpp->setPixel(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
         ::uint a2;
         ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiu", &sipSelf, sipType_QImage, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->setPixel(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_setPixel, doc_QImage_setPixel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_colorTable, "colorTable(self) -> List[int]");

extern "C" {static PyObject *meth_QImage_colorTable(PyObject *, PyObject *);}
static PyObject *meth_QImage_colorTable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
             ::QVector<uint>*sipRes;

            sipRes = new  ::QVector<uint>(sipCpp->colorTable());

            return sipConvertFromNewType(sipRes,sipType_QVector_1900,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_colorTable, doc_QImage_colorTable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_setColorTable, "setColorTable(self, Iterable[int])");

extern "C" {static PyObject *meth_QImage_setColorTable(PyObject *, PyObject *);}
static PyObject *meth_QImage_setColorTable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector<uint>* a0;
        int a0State = 0;
         ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QImage, &sipCpp, sipType_QVector_1900,&a0, &a0State))
        {
            sipCpp->setColorTable(*a0);
            sipReleaseType(const_cast< ::QVector<uint> *>(a0),sipType_QVector_1900,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_setColorTable, doc_QImage_setColorTable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_fill, "fill(self, Qt.GlobalColor)\n"
"fill(self, Union[QColor, Qt.GlobalColor, QGradient])\n"
"fill(self, int)");

extern "C" {static PyObject *meth_QImage_fill(PyObject *, PyObject *);}
static PyObject *meth_QImage_fill(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::GlobalColor a0;
         ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BXE", &sipSelf, sipType_QImage, &sipCpp, sipType_Qt_GlobalColor, &a0))
        {
            sipCpp->fill(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QColor* a0;
        int a0State = 0;
         ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QImage, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->fill(*a0);
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::uint a0;
         ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QImage, &sipCpp, &a0))
        {
            sipCpp->fill(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_fill, doc_QImage_fill);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_hasAlphaChannel, "hasAlphaChannel(self) -> bool");

extern "C" {static PyObject *meth_QImage_hasAlphaChannel(PyObject *, PyObject *);}
static PyObject *meth_QImage_hasAlphaChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasAlphaChannel();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_hasAlphaChannel, doc_QImage_hasAlphaChannel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_createAlphaMask, "createAlphaMask(self, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.AutoColor) -> QImage");

extern "C" {static PyObject *meth_QImage_createAlphaMask(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QImage_createAlphaMask(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ImageConversionFlags a0def = Qt::AutoColor;
         ::Qt::ImageConversionFlags* a0 = &a0def;
        int a0State = 0;
        const  ::QImage *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QImage, &sipCpp, sipType_Qt_ImageConversionFlags, &a0, &a0State))
        {
             ::QImage*sipRes;

            sipRes = new  ::QImage(sipCpp->createAlphaMask(*a0));
            sipReleaseType(a0,sipType_Qt_ImageConversionFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QImage,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_createAlphaMask, doc_QImage_createAlphaMask);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_createHeuristicMask, "createHeuristicMask(self, clipTight: bool = True) -> QImage");

extern "C" {static PyObject *meth_QImage_createHeuristicMask(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QImage_createHeuristicMask(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0 = 1;
        const  ::QImage *sipCpp;

        static const char *sipKwdList[] = {
            sipName_clipTight,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_QImage, &sipCpp, &a0))
        {
             ::QImage*sipRes;

            sipRes = new  ::QImage(sipCpp->createHeuristicMask(a0));

            return sipConvertFromNewType(sipRes,sipType_QImage,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_createHeuristicMask, doc_QImage_createHeuristicMask);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_scaled, "scaled(self, int, int, aspectRatioMode: Qt.AspectRatioMode = Qt.IgnoreAspectRatio, transformMode: Qt.TransformationMode = Qt.FastTransformation) -> QImage\n"
"scaled(self, QSize, aspectRatioMode: Qt.AspectRatioMode = Qt.IgnoreAspectRatio, transformMode: Qt.TransformationMode = Qt.FastTransformation) -> QImage");

extern "C" {static PyObject *meth_QImage_scaled(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QImage_scaled(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::Qt::AspectRatioMode a2 = Qt::IgnoreAspectRatio;
         ::Qt::TransformationMode a3 = Qt::FastTransformation;
        const  ::QImage *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_aspectRatioMode,
            sipName_transformMode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|EE", &sipSelf, sipType_QImage, &sipCpp, &a0, &a1, sipType_Qt_AspectRatioMode, &a2, sipType_Qt_TransformationMode, &a3))
        {
             ::QImage*sipRes;

            sipRes = new  ::QImage(sipCpp->scaled(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QImage,SIP_NULLPTR);
        }
    }

    {
        const  ::QSize* a0;
         ::Qt::AspectRatioMode a1 = Qt::IgnoreAspectRatio;
         ::Qt::TransformationMode a2 = Qt::FastTransformation;
        const  ::QImage *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_aspectRatioMode,
            sipName_transformMode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|EE", &sipSelf, sipType_QImage, &sipCpp, sipType_QSize, &a0, sipType_Qt_AspectRatioMode, &a1, sipType_Qt_TransformationMode, &a2))
        {
             ::QImage*sipRes;

            sipRes = new  ::QImage(sipCpp->scaled(*a0,a1,a2));

            return sipConvertFromNewType(sipRes,sipType_QImage,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_scaled, doc_QImage_scaled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_scaledToWidth, "scaledToWidth(self, int, mode: Qt.TransformationMode = Qt.FastTransformation) -> QImage");

extern "C" {static PyObject *meth_QImage_scaledToWidth(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QImage_scaledToWidth(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::Qt::TransformationMode a1 = Qt::FastTransformation;
        const  ::QImage *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|E", &sipSelf, sipType_QImage, &sipCpp, &a0, sipType_Qt_TransformationMode, &a1))
        {
             ::QImage*sipRes;

            sipRes = new  ::QImage(sipCpp->scaledToWidth(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QImage,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_scaledToWidth, doc_QImage_scaledToWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_scaledToHeight, "scaledToHeight(self, int, mode: Qt.TransformationMode = Qt.FastTransformation) -> QImage");

extern "C" {static PyObject *meth_QImage_scaledToHeight(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QImage_scaledToHeight(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::Qt::TransformationMode a1 = Qt::FastTransformation;
        const  ::QImage *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|E", &sipSelf, sipType_QImage, &sipCpp, &a0, sipType_Qt_TransformationMode, &a1))
        {
             ::QImage*sipRes;

            sipRes = new  ::QImage(sipCpp->scaledToHeight(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QImage,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_scaledToHeight, doc_QImage_scaledToHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_mirrored, "mirrored(self, horizontal: bool = False, vertical: bool = True) -> QImage");

extern "C" {static PyObject *meth_QImage_mirrored(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QImage_mirrored(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0 = 0;
        bool a1 = 1;
        const  ::QImage *sipCpp;

        static const char *sipKwdList[] = {
            sipName_horizontal,
            sipName_vertical,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|bb", &sipSelf, sipType_QImage, &sipCpp, &a0, &a1))
        {
             ::QImage*sipRes;

            sipRes = new  ::QImage(sipCpp->mirrored(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QImage,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_mirrored, doc_QImage_mirrored);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_rgbSwapped, "rgbSwapped(self) -> QImage");

extern "C" {static PyObject *meth_QImage_rgbSwapped(PyObject *, PyObject *);}
static PyObject *meth_QImage_rgbSwapped(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
             ::QImage*sipRes;

            sipRes = new  ::QImage(sipCpp->rgbSwapped());

            return sipConvertFromNewType(sipRes,sipType_QImage,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_rgbSwapped, doc_QImage_rgbSwapped);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_invertPixels, "invertPixels(self, mode: QImage.InvertMode = QImage.InvertRgb)");

extern "C" {static PyObject *meth_QImage_invertPixels(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QImage_invertPixels(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QImage::InvertMode a0 = QImage::InvertRgb;
         ::QImage *sipCpp;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|E", &sipSelf, sipType_QImage, &sipCpp, sipType_QImage_InvertMode, &a0))
        {
            sipCpp->invertPixels(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_invertPixels, doc_QImage_invertPixels);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_load, "load(self, QIODevice, str) -> bool\n"
"load(self, str, format: str = None) -> bool");

extern "C" {static PyObject *meth_QImage_load(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QImage_load(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QIODevice* a0;
        const char* a1;
        PyObject *a1Keep;
         ::QImage *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ8AA", &sipSelf, sipType_QImage, &sipCpp, sipType_QIODevice, &a0, &a1Keep, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->load(a0,a1);
            Py_END_ALLOW_THREADS
            Py_DECREF(a1Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const char* a1 = 0;
        PyObject *a1Keep = 0;
         ::QImage *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|AA", &sipSelf, sipType_QImage, &sipCpp, sipType_QString,&a0, &a0State, &a1Keep, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->load(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            Py_XDECREF(a1Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_load, doc_QImage_load);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_loadFromData, "loadFromData(self, bytes, format: str = None) -> bool\n"
"loadFromData(self, Union[QByteArray, bytes, bytearray], format: str = None) -> bool");

extern "C" {static PyObject *meth_QImage_loadFromData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QImage_loadFromData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::uchar* a0;
        SIP_SSIZE_T a1;
        const char* a2 = 0;
        PyObject *a2Keep = 0;
         ::QImage *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bk|AA", &sipSelf, sipType_QImage, &sipCpp, &a0, &a1, &a2Keep, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->loadFromData(a0,(int)a1,a2);
            Py_XDECREF(a2Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const char* a1 = 0;
        PyObject *a1Keep = 0;
         ::QImage *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|AA", &sipSelf, sipType_QImage, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1Keep, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->loadFromData(*a0,a1);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);
            Py_XDECREF(a1Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_loadFromData, doc_QImage_loadFromData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_save, "save(self, str, format: str = None, quality: int = -1) -> bool\n"
"save(self, QIODevice, format: str = None, quality: int = -1) -> bool");

extern "C" {static PyObject *meth_QImage_save(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QImage_save(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const char* a1 = 0;
        PyObject *a1Keep = 0;
        int a2 = -1;
        const  ::QImage *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
            sipName_quality,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|AAi", &sipSelf, sipType_QImage, &sipCpp, sipType_QString,&a0, &a0State, &a1Keep, &a1, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->save(*a0,a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            Py_XDECREF(a1Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::QIODevice* a0;
        const char* a1 = 0;
        PyObject *a1Keep = 0;
        int a2 = -1;
        const  ::QImage *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
            sipName_quality,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8|AAi", &sipSelf, sipType_QImage, &sipCpp, sipType_QIODevice, &a0, &a1Keep, &a1, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->save(a0,a1,a2);
            Py_END_ALLOW_THREADS
            Py_XDECREF(a1Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_save, doc_QImage_save);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_fromData, "fromData(bytes, format: str = None) -> QImage\n"
"fromData(Union[QByteArray, bytes, bytearray], format: str = None) -> QImage");

extern "C" {static PyObject *meth_QImage_fromData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QImage_fromData(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::uchar* a0;
        SIP_SSIZE_T a1;
        const char* a2 = 0;
        PyObject *a2Keep = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "k|AA", &a0, &a1, &a2Keep, &a2))
        {
             ::QImage*sipRes;

            sipRes = new  ::QImage( ::QImage::fromData(a0,(int)a1,a2));
            Py_XDECREF(a2Keep);

            return sipConvertFromNewType(sipRes,sipType_QImage,SIP_NULLPTR);
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const char* a1 = 0;
        PyObject *a1Keep = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1|AA", sipType_QByteArray, &a0, &a0State, &a1Keep, &a1))
        {
             ::QImage*sipRes;

            sipRes = new  ::QImage( ::QImage::fromData(*a0,a1));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);
            Py_XDECREF(a1Keep);

            return sipConvertFromNewType(sipRes,sipType_QImage,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_fromData, doc_QImage_fromData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_paintEngine, "paintEngine(self) -> QPaintEngine");

extern "C" {static PyObject *meth_QImage_paintEngine(PyObject *, PyObject *);}
static PyObject *meth_QImage_paintEngine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
             ::QPaintEngine*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QImage::paintEngine() : sipCpp->paintEngine());

            return sipConvertFromType(sipRes,sipType_QPaintEngine,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_paintEngine, doc_QImage_paintEngine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_dotsPerMeterX, "dotsPerMeterX(self) -> int");

extern "C" {static PyObject *meth_QImage_dotsPerMeterX(PyObject *, PyObject *);}
static PyObject *meth_QImage_dotsPerMeterX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->dotsPerMeterX();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_dotsPerMeterX, doc_QImage_dotsPerMeterX);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_dotsPerMeterY, "dotsPerMeterY(self) -> int");

extern "C" {static PyObject *meth_QImage_dotsPerMeterY(PyObject *, PyObject *);}
static PyObject *meth_QImage_dotsPerMeterY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->dotsPerMeterY();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_dotsPerMeterY, doc_QImage_dotsPerMeterY);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_setDotsPerMeterX, "setDotsPerMeterX(self, int)");

extern "C" {static PyObject *meth_QImage_setDotsPerMeterX(PyObject *, PyObject *);}
static PyObject *meth_QImage_setDotsPerMeterX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QImage, &sipCpp, &a0))
        {
            sipCpp->setDotsPerMeterX(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_setDotsPerMeterX, doc_QImage_setDotsPerMeterX);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_setDotsPerMeterY, "setDotsPerMeterY(self, int)");

extern "C" {static PyObject *meth_QImage_setDotsPerMeterY(PyObject *, PyObject *);}
static PyObject *meth_QImage_setDotsPerMeterY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QImage, &sipCpp, &a0))
        {
            sipCpp->setDotsPerMeterY(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_setDotsPerMeterY, doc_QImage_setDotsPerMeterY);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_offset, "offset(self) -> QPoint");

extern "C" {static PyObject *meth_QImage_offset(PyObject *, PyObject *);}
static PyObject *meth_QImage_offset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->offset());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_offset, doc_QImage_offset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_setOffset, "setOffset(self, QPoint)");

extern "C" {static PyObject *meth_QImage_setOffset(PyObject *, PyObject *);}
static PyObject *meth_QImage_setOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
         ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QImage, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->setOffset(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_setOffset, doc_QImage_setOffset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_textKeys, "textKeys(self) -> List[str]");

extern "C" {static PyObject *meth_QImage_textKeys(PyObject *, PyObject *);}
static PyObject *meth_QImage_textKeys(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->textKeys());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_textKeys, doc_QImage_textKeys);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_text, "text(self, key: str = '') -> str");

extern "C" {static PyObject *meth_QImage_text(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QImage_text(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString& a0def = QString();
        const  ::QString* a0 = &a0def;
        int a0State = 0;
        const  ::QImage *sipCpp;

        static const char *sipKwdList[] = {
            sipName_key,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QImage, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->text(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_text, doc_QImage_text);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_setText, "setText(self, str, str)");

extern "C" {static PyObject *meth_QImage_setText(PyObject *, PyObject *);}
static PyObject *meth_QImage_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QImage, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            sipCpp->setText(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_setText, doc_QImage_setText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_metric, "metric(self, QPaintDevice.PaintDeviceMetric) -> int");

extern "C" {static PyObject *meth_QImage_metric(PyObject *, PyObject *);}
static PyObject *meth_QImage_metric(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintDevice::PaintDeviceMetric a0;
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QImage, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QImage::metric(a0) : sipCpp->metric(a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_metric, doc_QImage_metric);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_smoothScaled, "smoothScaled(self, int, int) -> QImage");

extern "C" {static PyObject *meth_QImage_smoothScaled(PyObject *, PyObject *);}
static PyObject *meth_QImage_smoothScaled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pii", &sipSelf, sipType_QImage, &sipCpp, &a0, &a1))
        {
             ::QImage*sipRes;

            sipRes = new  ::QImage(sipCpp->smoothScaled(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QImage,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_smoothScaled, doc_QImage_smoothScaled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_createMaskFromColor, "createMaskFromColor(self, int, mode: Qt.MaskMode = Qt.MaskInColor) -> QImage");

extern "C" {static PyObject *meth_QImage_createMaskFromColor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QImage_createMaskFromColor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRgb a0;
         ::Qt::MaskMode a1 = Qt::MaskInColor;
        const  ::QImage *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bu|E", &sipSelf, sipType_QImage, &sipCpp, &a0, sipType_Qt_MaskMode, &a1))
        {
             ::QImage*sipRes;

            sipRes = new  ::QImage(sipCpp->createMaskFromColor(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QImage,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_createMaskFromColor, doc_QImage_createMaskFromColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_transformed, "transformed(self, QTransform, mode: Qt.TransformationMode = Qt.FastTransformation) -> QImage");

extern "C" {static PyObject *meth_QImage_transformed(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QImage_transformed(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform* a0;
         ::Qt::TransformationMode a1 = Qt::FastTransformation;
        const  ::QImage *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|E", &sipSelf, sipType_QImage, &sipCpp, sipType_QTransform, &a0, sipType_Qt_TransformationMode, &a1))
        {
             ::QImage*sipRes;

            sipRes = new  ::QImage(sipCpp->transformed(*a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QImage,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_transformed, doc_QImage_transformed);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_trueMatrix, "trueMatrix(QTransform, int, int) -> QTransform");

extern "C" {static PyObject *meth_QImage_trueMatrix(PyObject *, PyObject *);}
static PyObject *meth_QImage_trueMatrix(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform* a0;
        int a1;
        int a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9ii", sipType_QTransform, &a0, &a1, &a2))
        {
             ::QTransform*sipRes;

            sipRes = new  ::QTransform( ::QImage::trueMatrix(*a0,a1,a2));

            return sipConvertFromNewType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_trueMatrix, doc_QImage_trueMatrix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_cacheKey, "cacheKey(self) -> int");

extern "C" {static PyObject *meth_QImage_cacheKey(PyObject *, PyObject *);}
static PyObject *meth_QImage_cacheKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->cacheKey();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_cacheKey, doc_QImage_cacheKey);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_colorCount, "colorCount(self) -> int");

extern "C" {static PyObject *meth_QImage_colorCount(PyObject *, PyObject *);}
static PyObject *meth_QImage_colorCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->colorCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_colorCount, doc_QImage_colorCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_setColorCount, "setColorCount(self, int)");

extern "C" {static PyObject *meth_QImage_setColorCount(PyObject *, PyObject *);}
static PyObject *meth_QImage_setColorCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QImage, &sipCpp, &a0))
        {
            sipCpp->setColorCount(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_setColorCount, doc_QImage_setColorCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_byteCount, "byteCount(self) -> int");

extern "C" {static PyObject *meth_QImage_byteCount(PyObject *, PyObject *);}
static PyObject *meth_QImage_byteCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->byteCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_byteCount, doc_QImage_byteCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_bitPlaneCount, "bitPlaneCount(self) -> int");

extern "C" {static PyObject *meth_QImage_bitPlaneCount(PyObject *, PyObject *);}
static PyObject *meth_QImage_bitPlaneCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->bitPlaneCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_bitPlaneCount, doc_QImage_bitPlaneCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_swap, "swap(self, QImage)");

extern "C" {static PyObject *meth_QImage_swap(PyObject *, PyObject *);}
static PyObject *meth_QImage_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QImage* a0;
         ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QImage, &sipCpp, sipType_QImage, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_swap, doc_QImage_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_devicePixelRatio, "devicePixelRatio(self) -> float");

extern "C" {static PyObject *meth_QImage_devicePixelRatio(PyObject *, PyObject *);}
static PyObject *meth_QImage_devicePixelRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->devicePixelRatio();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_devicePixelRatio, doc_QImage_devicePixelRatio);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_setDevicePixelRatio, "setDevicePixelRatio(self, float)");

extern "C" {static PyObject *meth_QImage_setDevicePixelRatio(PyObject *, PyObject *);}
static PyObject *meth_QImage_setDevicePixelRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QImage, &sipCpp, &a0))
        {
            sipCpp->setDevicePixelRatio(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_setDevicePixelRatio, doc_QImage_setDevicePixelRatio);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_pixelFormat, "pixelFormat(self) -> QPixelFormat");

extern "C" {static PyObject *meth_QImage_pixelFormat(PyObject *, PyObject *);}
static PyObject *meth_QImage_pixelFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
             ::QPixelFormat*sipRes;

            sipRes = new  ::QPixelFormat(sipCpp->pixelFormat());

            return sipConvertFromNewType(sipRes,sipType_QPixelFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_pixelFormat, doc_QImage_pixelFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_toPixelFormat, "toPixelFormat(QImage.Format) -> QPixelFormat");

extern "C" {static PyObject *meth_QImage_toPixelFormat(PyObject *, PyObject *);}
static PyObject *meth_QImage_toPixelFormat(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QImage::Format a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QImage_Format, &a0))
        {
             ::QPixelFormat*sipRes;

            sipRes = new  ::QPixelFormat( ::QImage::toPixelFormat(a0));

            return sipConvertFromNewType(sipRes,sipType_QPixelFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_toPixelFormat, doc_QImage_toPixelFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_toImageFormat, "toImageFormat(QPixelFormat) -> QImage.Format");

extern "C" {static PyObject *meth_QImage_toImageFormat(PyObject *, PyObject *);}
static PyObject *meth_QImage_toImageFormat(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPixelFormat* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QPixelFormat, &a0))
        {
             ::QImage::Format sipRes;

            sipRes =  ::QImage::toImageFormat(*a0);

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QImage_Format);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_toImageFormat, doc_QImage_toImageFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_pixelColor, "pixelColor(self, int, int) -> QColor\n"
"pixelColor(self, QPoint) -> QColor");

extern "C" {static PyObject *meth_QImage_pixelColor(PyObject *, PyObject *);}
static PyObject *meth_QImage_pixelColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QImage, &sipCpp, &a0, &a1))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor(sipCpp->pixelColor(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    {
        const  ::QPoint* a0;
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QImage, &sipCpp, sipType_QPoint, &a0))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor(sipCpp->pixelColor(*a0));

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_pixelColor, doc_QImage_pixelColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_setPixelColor, "setPixelColor(self, int, int, Union[QColor, Qt.GlobalColor, QGradient])\n"
"setPixelColor(self, QPoint, Union[QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QImage_setPixelColor(PyObject *, PyObject *);}
static PyObject *meth_QImage_setPixelColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        const  ::QColor* a2;
        int a2State = 0;
         ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ1", &sipSelf, sipType_QImage, &sipCpp, &a0, &a1, sipType_QColor, &a2, &a2State))
        {
            sipCpp->setPixelColor(a0,a1,*a2);
            sipReleaseType(const_cast< ::QColor *>(a2),sipType_QColor,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPoint* a0;
        const  ::QColor* a1;
        int a1State = 0;
         ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QImage, &sipCpp, sipType_QPoint, &a0, sipType_QColor, &a1, &a1State))
        {
            sipCpp->setPixelColor(*a0,*a1);
            sipReleaseType(const_cast< ::QColor *>(a1),sipType_QColor,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_setPixelColor, doc_QImage_setPixelColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_reinterpretAsFormat, "reinterpretAsFormat(self, QImage.Format) -> bool");

extern "C" {static PyObject *meth_QImage_reinterpretAsFormat(PyObject *, PyObject *);}
static PyObject *meth_QImage_reinterpretAsFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QImage::Format a0;
         ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QImage, &sipCpp, sipType_QImage_Format, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->reinterpretAsFormat(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_reinterpretAsFormat, doc_QImage_reinterpretAsFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QImage_sizeInBytes, "sizeInBytes(self) -> int");

extern "C" {static PyObject *meth_QImage_sizeInBytes(PyObject *, PyObject *);}
static PyObject *meth_QImage_sizeInBytes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            SIP_SSIZE_T sipRes;

            sipRes = sipCpp->sizeInBytes();

        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_sizeInBytes, doc_QImage_sizeInBytes);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QImage___ne__(PyObject *,PyObject *);}
static PyObject *slot_QImage___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QImage *sipCpp = reinterpret_cast< ::QImage *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QImage));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QImage, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QImage::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QImage, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QImage___eq__(PyObject *,PyObject *);}
static PyObject *slot_QImage___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QImage *sipCpp = reinterpret_cast< ::QImage *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QImage));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QImage, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QImage::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QImage, sipSelf, sipArg);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QImage(void *, const sipTypeDef *);}
static void *cast_QImage(void *sipCppV, const sipTypeDef *targetType)
{
     ::QImage *sipCpp = reinterpret_cast< ::QImage *>(sipCppV);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QImage(void *, int);}
static void release_QImage(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQImage *>(sipCppV);
    else
        delete reinterpret_cast< ::QImage *>(sipCppV);
}


extern "C" {static void assign_QImage(void *, SIP_SSIZE_T, void *);}
static void assign_QImage(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QImage *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QImage *>(sipSrc);
}


extern "C" {static void *array_QImage(SIP_SSIZE_T);}
static void *array_QImage(SIP_SSIZE_T sipNrElem)
{
    return new  ::QImage[sipNrElem];
}


extern "C" {static void *copy_QImage(const void *, SIP_SSIZE_T);}
static void *copy_QImage(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QImage(reinterpret_cast<const  ::QImage *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QImage(sipSimpleWrapper *);}
static void dealloc_QImage(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQImage *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QImage(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QImage(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QImage(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQImage *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQImage();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QSize* a0;
         ::QImage::Format a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9E", sipType_QSize, &a0, sipType_QImage_Format, &a1))
        {
            sipCpp = new sipQImage(*a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        int a0;
        int a1;
         ::QImage::Format a2;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "iiE", &a0, &a1, sipType_QImage_Format, &a2))
        {
            sipCpp = new sipQImage(a0,a1,a2);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::uchar* a0;
        PyObject *a0Keep;
        int a1;
        int a2;
         ::QImage::Format a3;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "@siiE", &a0Keep, &a0, &a1, &a2, sipType_QImage_Format, &a3))
        {
            sipCpp = new sipQImage(a0,a1,a2,a3);

            sipKeepReference((PyObject *)sipSelf, -1, a0Keep);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        void* a0;
        int a1;
        int a2;
         ::QImage::Format a3;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "viiE", &a0, &a1, &a2, sipType_QImage_Format, &a3))
        {
            sipCpp = new sipQImage(reinterpret_cast< ::uchar *>(a0),a1,a2,a3);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::uchar* a0;
        PyObject *a0Keep;
        int a1;
        int a2;
        int a3;
         ::QImage::Format a4;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "@siiiE", &a0Keep, &a0, &a1, &a2, &a3, sipType_QImage_Format, &a4))
        {
            sipCpp = new sipQImage(a0,a1,a2,a3,a4);

            sipKeepReference((PyObject *)sipSelf, -2, a0Keep);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        void* a0;
        int a1;
        int a2;
        int a3;
         ::QImage::Format a4;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "viiiE", &a0, &a1, &a2, &a3, sipType_QImage_Format, &a4))
        {
            sipCpp = new sipQImage(reinterpret_cast< ::uchar *>(a0),a1,a2,a3,a4);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        PyObject * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "T", &PyList_Type, &a0))
        {
            int sipIsErr = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qimage.sip"
        // The Python interface is a list of strings that make up the image.
        
        const char **str = QtGui_ListToArray(a0);
        
        if (str)
        {
            sipCpp = new sipQImage(str);
            QtGui_DeleteArray(str);
        }
        else
            sipIsErr = 1;
#line 41855 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipIsErr)
            {
                if (sipUnused)
                {
                    Py_XDECREF(*sipUnused);
                }

                sipAddException(sipErrorFail, sipParseErr);
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const char* a1 = 0;
        PyObject *a1Keep = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|AA", sipType_QString,&a0, &a0State, &a1Keep, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQImage(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            Py_XDECREF(a1Keep);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QImage* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QImage, &a0))
        {
            sipCpp = new sipQImage(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QVariant* a0;
        PyObject *a0Wrapper;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "@J1", &a0Wrapper, sipType_QVariant, &a0, &a0State))
        {
            sipErrorState sipError = sipErrorNone;

#line 118 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qimage.sip"
        if (a0->canConvert<QImage>())
            sipCpp = new sipQImage(a0->value<QImage>());
        else
            sipError = sipBadCallableArg(0, a0Wrapper);
#line 41926 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            if (sipError == sipErrorNone)
            {
                sipCpp->sipPySelf = sipSelf;

                return sipCpp;
            }

            if (sipUnused)
            {
                Py_XDECREF(*sipUnused);
            }

            sipAddException(sipError, sipParseErr);

            if (sipError == sipErrorFail)
                return SIP_NULLPTR;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QImage[] = {{191, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_QImage[] = {
    {(void *)slot_QImage___ne__, ne_slot},
    {(void *)slot_QImage___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QImage[] = {
    {SIP_MLNAME_CAST(sipName_allGray), meth_QImage_allGray, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_allGray)},
    {SIP_MLNAME_CAST(sipName_bitPlaneCount), meth_QImage_bitPlaneCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_bitPlaneCount)},
    {SIP_MLNAME_CAST(sipName_bits), meth_QImage_bits, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_bits)},
    {SIP_MLNAME_CAST(sipName_byteCount), meth_QImage_byteCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_byteCount)},
    {SIP_MLNAME_CAST(sipName_bytesPerLine), meth_QImage_bytesPerLine, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_bytesPerLine)},
    {SIP_MLNAME_CAST(sipName_cacheKey), meth_QImage_cacheKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_cacheKey)},
    {SIP_MLNAME_CAST(sipName_color), meth_QImage_color, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_color)},
    {SIP_MLNAME_CAST(sipName_colorCount), meth_QImage_colorCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_colorCount)},
    {SIP_MLNAME_CAST(sipName_colorTable), meth_QImage_colorTable, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_colorTable)},
    {SIP_MLNAME_CAST(sipName_constBits), meth_QImage_constBits, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_constBits)},
    {SIP_MLNAME_CAST(sipName_constScanLine), meth_QImage_constScanLine, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_constScanLine)},
    {SIP_MLNAME_CAST(sipName_convertToFormat), SIP_MLMETH_CAST(meth_QImage_convertToFormat), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QImage_convertToFormat)},
    {SIP_MLNAME_CAST(sipName_copy), SIP_MLMETH_CAST(meth_QImage_copy), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QImage_copy)},
    {SIP_MLNAME_CAST(sipName_createAlphaMask), SIP_MLMETH_CAST(meth_QImage_createAlphaMask), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QImage_createAlphaMask)},
    {SIP_MLNAME_CAST(sipName_createHeuristicMask), SIP_MLMETH_CAST(meth_QImage_createHeuristicMask), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QImage_createHeuristicMask)},
    {SIP_MLNAME_CAST(sipName_createMaskFromColor), SIP_MLMETH_CAST(meth_QImage_createMaskFromColor), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QImage_createMaskFromColor)},
    {SIP_MLNAME_CAST(sipName_depth), meth_QImage_depth, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_depth)},
    {SIP_MLNAME_CAST(sipName_detach), meth_QImage_detach, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_detach)},
    {SIP_MLNAME_CAST(sipName_devType), meth_QImage_devType, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_devType)},
    {SIP_MLNAME_CAST(sipName_devicePixelRatio), meth_QImage_devicePixelRatio, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_devicePixelRatio)},
    {SIP_MLNAME_CAST(sipName_dotsPerMeterX), meth_QImage_dotsPerMeterX, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_dotsPerMeterX)},
    {SIP_MLNAME_CAST(sipName_dotsPerMeterY), meth_QImage_dotsPerMeterY, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_dotsPerMeterY)},
    {SIP_MLNAME_CAST(sipName_fill), meth_QImage_fill, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_fill)},
    {SIP_MLNAME_CAST(sipName_format), meth_QImage_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_format)},
    {SIP_MLNAME_CAST(sipName_fromData), SIP_MLMETH_CAST(meth_QImage_fromData), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QImage_fromData)},
    {SIP_MLNAME_CAST(sipName_hasAlphaChannel), meth_QImage_hasAlphaChannel, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_hasAlphaChannel)},
    {SIP_MLNAME_CAST(sipName_height), meth_QImage_height, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_height)},
    {SIP_MLNAME_CAST(sipName_invertPixels), SIP_MLMETH_CAST(meth_QImage_invertPixels), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QImage_invertPixels)},
    {SIP_MLNAME_CAST(sipName_isDetached), meth_QImage_isDetached, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_isDetached)},
    {SIP_MLNAME_CAST(sipName_isGrayscale), meth_QImage_isGrayscale, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_isGrayscale)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QImage_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_isNull)},
    {SIP_MLNAME_CAST(sipName_load), SIP_MLMETH_CAST(meth_QImage_load), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QImage_load)},
    {SIP_MLNAME_CAST(sipName_loadFromData), SIP_MLMETH_CAST(meth_QImage_loadFromData), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QImage_loadFromData)},
    {SIP_MLNAME_CAST(sipName_metric), meth_QImage_metric, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_metric)},
    {SIP_MLNAME_CAST(sipName_mirrored), SIP_MLMETH_CAST(meth_QImage_mirrored), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QImage_mirrored)},
    {SIP_MLNAME_CAST(sipName_offset), meth_QImage_offset, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_offset)},
    {SIP_MLNAME_CAST(sipName_paintEngine), meth_QImage_paintEngine, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_paintEngine)},
    {SIP_MLNAME_CAST(sipName_pixel), meth_QImage_pixel, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_pixel)},
    {SIP_MLNAME_CAST(sipName_pixelColor), meth_QImage_pixelColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_pixelColor)},
    {SIP_MLNAME_CAST(sipName_pixelFormat), meth_QImage_pixelFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_pixelFormat)},
    {SIP_MLNAME_CAST(sipName_pixelIndex), meth_QImage_pixelIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_pixelIndex)},
    {SIP_MLNAME_CAST(sipName_rect), meth_QImage_rect, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_rect)},
    {SIP_MLNAME_CAST(sipName_reinterpretAsFormat), meth_QImage_reinterpretAsFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_reinterpretAsFormat)},
    {SIP_MLNAME_CAST(sipName_rgbSwapped), meth_QImage_rgbSwapped, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_rgbSwapped)},
    {SIP_MLNAME_CAST(sipName_save), SIP_MLMETH_CAST(meth_QImage_save), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QImage_save)},
    {SIP_MLNAME_CAST(sipName_scaled), SIP_MLMETH_CAST(meth_QImage_scaled), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QImage_scaled)},
    {SIP_MLNAME_CAST(sipName_scaledToHeight), SIP_MLMETH_CAST(meth_QImage_scaledToHeight), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QImage_scaledToHeight)},
    {SIP_MLNAME_CAST(sipName_scaledToWidth), SIP_MLMETH_CAST(meth_QImage_scaledToWidth), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QImage_scaledToWidth)},
    {SIP_MLNAME_CAST(sipName_scanLine), meth_QImage_scanLine, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_scanLine)},
    {SIP_MLNAME_CAST(sipName_setColor), meth_QImage_setColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_setColor)},
    {SIP_MLNAME_CAST(sipName_setColorCount), meth_QImage_setColorCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_setColorCount)},
    {SIP_MLNAME_CAST(sipName_setColorTable), meth_QImage_setColorTable, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_setColorTable)},
    {SIP_MLNAME_CAST(sipName_setDevicePixelRatio), meth_QImage_setDevicePixelRatio, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_setDevicePixelRatio)},
    {SIP_MLNAME_CAST(sipName_setDotsPerMeterX), meth_QImage_setDotsPerMeterX, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_setDotsPerMeterX)},
    {SIP_MLNAME_CAST(sipName_setDotsPerMeterY), meth_QImage_setDotsPerMeterY, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_setDotsPerMeterY)},
    {SIP_MLNAME_CAST(sipName_setOffset), meth_QImage_setOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_setOffset)},
    {SIP_MLNAME_CAST(sipName_setPixel), meth_QImage_setPixel, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_setPixel)},
    {SIP_MLNAME_CAST(sipName_setPixelColor), meth_QImage_setPixelColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_setPixelColor)},
    {SIP_MLNAME_CAST(sipName_setText), meth_QImage_setText, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_setText)},
    {SIP_MLNAME_CAST(sipName_size), meth_QImage_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_size)},
    {SIP_MLNAME_CAST(sipName_sizeInBytes), meth_QImage_sizeInBytes, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_sizeInBytes)},
    {SIP_MLNAME_CAST(sipName_smoothScaled), meth_QImage_smoothScaled, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_smoothScaled)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QImage_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_swap)},
    {SIP_MLNAME_CAST(sipName_text), SIP_MLMETH_CAST(meth_QImage_text), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QImage_text)},
    {SIP_MLNAME_CAST(sipName_textKeys), meth_QImage_textKeys, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_textKeys)},
    {SIP_MLNAME_CAST(sipName_toImageFormat), meth_QImage_toImageFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_toImageFormat)},
    {SIP_MLNAME_CAST(sipName_toPixelFormat), meth_QImage_toPixelFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_toPixelFormat)},
    {SIP_MLNAME_CAST(sipName_transformed), SIP_MLMETH_CAST(meth_QImage_transformed), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QImage_transformed)},
    {SIP_MLNAME_CAST(sipName_trueMatrix), meth_QImage_trueMatrix, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_trueMatrix)},
    {SIP_MLNAME_CAST(sipName_valid), meth_QImage_valid, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_valid)},
    {SIP_MLNAME_CAST(sipName_width), meth_QImage_width, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_width)}
};

static sipEnumMemberDef enummembers_QImage[] = {
    {sipName_Format_A2BGR30_Premultiplied, static_cast<int>( ::QImage::Format_A2BGR30_Premultiplied), 67},
    {sipName_Format_A2RGB30_Premultiplied, static_cast<int>( ::QImage::Format_A2RGB30_Premultiplied), 67},
    {sipName_Format_ARGB32, static_cast<int>( ::QImage::Format_ARGB32), 67},
    {sipName_Format_ARGB32_Premultiplied, static_cast<int>( ::QImage::Format_ARGB32_Premultiplied), 67},
    {sipName_Format_ARGB4444_Premultiplied, static_cast<int>( ::QImage::Format_ARGB4444_Premultiplied), 67},
    {sipName_Format_ARGB6666_Premultiplied, static_cast<int>( ::QImage::Format_ARGB6666_Premultiplied), 67},
    {sipName_Format_ARGB8555_Premultiplied, static_cast<int>( ::QImage::Format_ARGB8555_Premultiplied), 67},
    {sipName_Format_ARGB8565_Premultiplied, static_cast<int>( ::QImage::Format_ARGB8565_Premultiplied), 67},
    {sipName_Format_Alpha8, static_cast<int>( ::QImage::Format_Alpha8), 67},
    {sipName_Format_BGR30, static_cast<int>( ::QImage::Format_BGR30), 67},
    {sipName_Format_Grayscale8, static_cast<int>( ::QImage::Format_Grayscale8), 67},
    {sipName_Format_Indexed8, static_cast<int>( ::QImage::Format_Indexed8), 67},
    {sipName_Format_Invalid, static_cast<int>( ::QImage::Format_Invalid), 67},
    {sipName_Format_Mono, static_cast<int>( ::QImage::Format_Mono), 67},
    {sipName_Format_MonoLSB, static_cast<int>( ::QImage::Format_MonoLSB), 67},
    {sipName_Format_RGB16, static_cast<int>( ::QImage::Format_RGB16), 67},
    {sipName_Format_RGB30, static_cast<int>( ::QImage::Format_RGB30), 67},
    {sipName_Format_RGB32, static_cast<int>( ::QImage::Format_RGB32), 67},
    {sipName_Format_RGB444, static_cast<int>( ::QImage::Format_RGB444), 67},
    {sipName_Format_RGB555, static_cast<int>( ::QImage::Format_RGB555), 67},
    {sipName_Format_RGB666, static_cast<int>( ::QImage::Format_RGB666), 67},
    {sipName_Format_RGB888, static_cast<int>( ::QImage::Format_RGB888), 67},
    {sipName_Format_RGBA64, static_cast<int>( ::QImage::Format_RGBA64), 67},
    {sipName_Format_RGBA64_Premultiplied, static_cast<int>( ::QImage::Format_RGBA64_Premultiplied), 67},
    {sipName_Format_RGBA8888, static_cast<int>( ::QImage::Format_RGBA8888), 67},
    {sipName_Format_RGBA8888_Premultiplied, static_cast<int>( ::QImage::Format_RGBA8888_Premultiplied), 67},
    {sipName_Format_RGBX64, static_cast<int>( ::QImage::Format_RGBX64), 67},
    {sipName_Format_RGBX8888, static_cast<int>( ::QImage::Format_RGBX8888), 67},
    {sipName_InvertRgb, static_cast<int>( ::QImage::InvertRgb), 68},
    {sipName_InvertRgba, static_cast<int>( ::QImage::InvertRgba), 68},
};

PyDoc_STRVAR(doc_QImage, "\1QImage()\n"
"QImage(QSize, QImage.Format)\n"
"QImage(int, int, QImage.Format)\n"
"QImage(bytes, int, int, QImage.Format)\n"
"QImage(sip.voidptr, int, int, QImage.Format)\n"
"QImage(bytes, int, int, int, QImage.Format)\n"
"QImage(sip.voidptr, int, int, int, QImage.Format)\n"
"QImage(List[str])\n"
"QImage(str, format: str = None)\n"
"QImage(QImage)\n"
"QImage(Any)");


static pyqt5ClassPluginDef plugin_QImage = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QImage = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QImage,
        {SIP_NULLPTR},
        &plugin_QImage
    },
    {
        sipNameNr_QImage,
        {0, 0, 1},
        71, methods_QImage,
        30, enummembers_QImage,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QImage,
    -1,
    -1,
    supers_QImage,
    slots_QImage,
    init_type_QImage,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QImage,
    assign_QImage,
    array_QImage,
    copy_QImage,
    release_QImage,
    cast_QImage,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 42154 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 52 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 42158 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQPaintDevice : public  ::QPaintDevice
{
public:
    sipQPaintDevice();
    virtual ~sipQPaintDevice();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    int metric( ::QPaintDevice::PaintDeviceMetric) const SIP_OVERRIDE;
     ::QPaintEngine* paintEngine() const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPaintDevice(const sipQPaintDevice &);
    sipQPaintDevice &operator = (const sipQPaintDevice &);

    char sipPyMethods[2];
};

sipQPaintDevice::sipQPaintDevice():  ::QPaintDevice(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPaintDevice::~sipQPaintDevice()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

int sipQPaintDevice::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_metric);

    if (!sipMeth)
        return  ::QPaintDevice::metric(a0);

    extern int sipVH_QtGui_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_18(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QPaintEngine* sipQPaintDevice::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,sipName_QPaintDevice,sipName_paintEngine);

    if (!sipMeth)
        return 0;

    extern  ::QPaintEngine* sipVH_QtGui_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_17(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QPaintDevice_paintEngine, "paintEngine(self) -> QPaintEngine");

extern "C" {static PyObject *meth_QPaintDevice_paintEngine(PyObject *, PyObject *);}
static PyObject *meth_QPaintDevice_paintEngine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintDevice, &sipCpp))
        {
             ::QPaintEngine*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QPaintDevice, sipName_paintEngine);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->paintEngine();

            return sipConvertFromType(sipRes,sipType_QPaintEngine,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintDevice, sipName_paintEngine, doc_QPaintDevice_paintEngine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintDevice_width, "width(self) -> int");

extern "C" {static PyObject *meth_QPaintDevice_width(PyObject *, PyObject *);}
static PyObject *meth_QPaintDevice_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintDevice, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->width();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintDevice, sipName_width, doc_QPaintDevice_width);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintDevice_height, "height(self) -> int");

extern "C" {static PyObject *meth_QPaintDevice_height(PyObject *, PyObject *);}
static PyObject *meth_QPaintDevice_height(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintDevice, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->height();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintDevice, sipName_height, doc_QPaintDevice_height);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintDevice_widthMM, "widthMM(self) -> int");

extern "C" {static PyObject *meth_QPaintDevice_widthMM(PyObject *, PyObject *);}
static PyObject *meth_QPaintDevice_widthMM(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintDevice, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->widthMM();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintDevice, sipName_widthMM, doc_QPaintDevice_widthMM);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintDevice_heightMM, "heightMM(self) -> int");

extern "C" {static PyObject *meth_QPaintDevice_heightMM(PyObject *, PyObject *);}
static PyObject *meth_QPaintDevice_heightMM(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintDevice, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->heightMM();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintDevice, sipName_heightMM, doc_QPaintDevice_heightMM);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintDevice_logicalDpiX, "logicalDpiX(self) -> int");

extern "C" {static PyObject *meth_QPaintDevice_logicalDpiX(PyObject *, PyObject *);}
static PyObject *meth_QPaintDevice_logicalDpiX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintDevice, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->logicalDpiX();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintDevice, sipName_logicalDpiX, doc_QPaintDevice_logicalDpiX);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintDevice_logicalDpiY, "logicalDpiY(self) -> int");

extern "C" {static PyObject *meth_QPaintDevice_logicalDpiY(PyObject *, PyObject *);}
static PyObject *meth_QPaintDevice_logicalDpiY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintDevice, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->logicalDpiY();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintDevice, sipName_logicalDpiY, doc_QPaintDevice_logicalDpiY);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintDevice_physicalDpiX, "physicalDpiX(self) -> int");

extern "C" {static PyObject *meth_QPaintDevice_physicalDpiX(PyObject *, PyObject *);}
static PyObject *meth_QPaintDevice_physicalDpiX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintDevice, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->physicalDpiX();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintDevice, sipName_physicalDpiX, doc_QPaintDevice_physicalDpiX);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintDevice_physicalDpiY, "physicalDpiY(self) -> int");

extern "C" {static PyObject *meth_QPaintDevice_physicalDpiY(PyObject *, PyObject *);}
static PyObject *meth_QPaintDevice_physicalDpiY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintDevice, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->physicalDpiY();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintDevice, sipName_physicalDpiY, doc_QPaintDevice_physicalDpiY);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintDevice_depth, "depth(self) -> int");

extern "C" {static PyObject *meth_QPaintDevice_depth(PyObject *, PyObject *);}
static PyObject *meth_QPaintDevice_depth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintDevice, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->depth();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintDevice, sipName_depth, doc_QPaintDevice_depth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintDevice_paintingActive, "paintingActive(self) -> bool");

extern "C" {static PyObject *meth_QPaintDevice_paintingActive(PyObject *, PyObject *);}
static PyObject *meth_QPaintDevice_paintingActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintDevice, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->paintingActive();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintDevice, sipName_paintingActive, doc_QPaintDevice_paintingActive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintDevice_colorCount, "colorCount(self) -> int");

extern "C" {static PyObject *meth_QPaintDevice_colorCount(PyObject *, PyObject *);}
static PyObject *meth_QPaintDevice_colorCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintDevice, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->colorCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintDevice, sipName_colorCount, doc_QPaintDevice_colorCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintDevice_devicePixelRatio, "devicePixelRatio(self) -> int");

extern "C" {static PyObject *meth_QPaintDevice_devicePixelRatio(PyObject *, PyObject *);}
static PyObject *meth_QPaintDevice_devicePixelRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintDevice, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->devicePixelRatio();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintDevice, sipName_devicePixelRatio, doc_QPaintDevice_devicePixelRatio);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintDevice_metric, "metric(self, QPaintDevice.PaintDeviceMetric) -> int");

extern "C" {static PyObject *meth_QPaintDevice_metric(PyObject *, PyObject *);}
static PyObject *meth_QPaintDevice_metric(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintDevice::PaintDeviceMetric a0;
        const  ::QPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QPaintDevice, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QPaintDevice::metric(a0) : sipCpp->metric(a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintDevice, sipName_metric, doc_QPaintDevice_metric);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintDevice_devicePixelRatioF, "devicePixelRatioF(self) -> float");

extern "C" {static PyObject *meth_QPaintDevice_devicePixelRatioF(PyObject *, PyObject *);}
static PyObject *meth_QPaintDevice_devicePixelRatioF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintDevice, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->devicePixelRatioF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintDevice, sipName_devicePixelRatioF, doc_QPaintDevice_devicePixelRatioF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintDevice_devicePixelRatioFScale, "devicePixelRatioFScale() -> float");

extern "C" {static PyObject *meth_QPaintDevice_devicePixelRatioFScale(PyObject *, PyObject *);}
static PyObject *meth_QPaintDevice_devicePixelRatioFScale(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::qreal sipRes;

            sipRes =  ::QPaintDevice::devicePixelRatioFScale();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintDevice, sipName_devicePixelRatioFScale, doc_QPaintDevice_devicePixelRatioFScale);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPaintDevice(void *, int);}
static void release_QPaintDevice(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQPaintDevice *>(sipCppV);
    else
        delete reinterpret_cast< ::QPaintDevice *>(sipCppV);
}


extern "C" {static void dealloc_QPaintDevice(sipSimpleWrapper *);}
static void dealloc_QPaintDevice(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQPaintDevice *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPaintDevice(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QPaintDevice(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPaintDevice(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQPaintDevice *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQPaintDevice();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QPaintDevice[] = {
    {SIP_MLNAME_CAST(sipName_colorCount), meth_QPaintDevice_colorCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintDevice_colorCount)},
    {SIP_MLNAME_CAST(sipName_depth), meth_QPaintDevice_depth, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintDevice_depth)},
    {SIP_MLNAME_CAST(sipName_devicePixelRatio), meth_QPaintDevice_devicePixelRatio, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintDevice_devicePixelRatio)},
    {SIP_MLNAME_CAST(sipName_devicePixelRatioF), meth_QPaintDevice_devicePixelRatioF, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintDevice_devicePixelRatioF)},
    {SIP_MLNAME_CAST(sipName_devicePixelRatioFScale), meth_QPaintDevice_devicePixelRatioFScale, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintDevice_devicePixelRatioFScale)},
    {SIP_MLNAME_CAST(sipName_height), meth_QPaintDevice_height, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintDevice_height)},
    {SIP_MLNAME_CAST(sipName_heightMM), meth_QPaintDevice_heightMM, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintDevice_heightMM)},
    {SIP_MLNAME_CAST(sipName_logicalDpiX), meth_QPaintDevice_logicalDpiX, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintDevice_logicalDpiX)},
    {SIP_MLNAME_CAST(sipName_logicalDpiY), meth_QPaintDevice_logicalDpiY, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintDevice_logicalDpiY)},
    {SIP_MLNAME_CAST(sipName_metric), meth_QPaintDevice_metric, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintDevice_metric)},
    {SIP_MLNAME_CAST(sipName_paintEngine), meth_QPaintDevice_paintEngine, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintDevice_paintEngine)},
    {SIP_MLNAME_CAST(sipName_paintingActive), meth_QPaintDevice_paintingActive, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintDevice_paintingActive)},
    {SIP_MLNAME_CAST(sipName_physicalDpiX), meth_QPaintDevice_physicalDpiX, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintDevice_physicalDpiX)},
    {SIP_MLNAME_CAST(sipName_physicalDpiY), meth_QPaintDevice_physicalDpiY, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintDevice_physicalDpiY)},
    {SIP_MLNAME_CAST(sipName_width), meth_QPaintDevice_width, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintDevice_width)},
    {SIP_MLNAME_CAST(sipName_widthMM), meth_QPaintDevice_widthMM, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintDevice_widthMM)}
};

static sipEnumMemberDef enummembers_QPaintDevice[] = {
    {sipName_PdmDepth, static_cast<int>( ::QPaintDevice::PdmDepth), 192},
    {sipName_PdmDevicePixelRatio, static_cast<int>( ::QPaintDevice::PdmDevicePixelRatio), 192},
    {sipName_PdmDevicePixelRatioScaled, static_cast<int>( ::QPaintDevice::PdmDevicePixelRatioScaled), 192},
    {sipName_PdmDpiX, static_cast<int>( ::QPaintDevice::PdmDpiX), 192},
    {sipName_PdmDpiY, static_cast<int>( ::QPaintDevice::PdmDpiY), 192},
    {sipName_PdmHeight, static_cast<int>( ::QPaintDevice::PdmHeight), 192},
    {sipName_PdmHeightMM, static_cast<int>( ::QPaintDevice::PdmHeightMM), 192},
    {sipName_PdmNumColors, static_cast<int>( ::QPaintDevice::PdmNumColors), 192},
    {sipName_PdmPhysicalDpiX, static_cast<int>( ::QPaintDevice::PdmPhysicalDpiX), 192},
    {sipName_PdmPhysicalDpiY, static_cast<int>( ::QPaintDevice::PdmPhysicalDpiY), 192},
    {sipName_PdmWidth, static_cast<int>( ::QPaintDevice::PdmWidth), 192},
    {sipName_PdmWidthMM, static_cast<int>( ::QPaintDevice::PdmWidthMM), 192},
};

PyDoc_STRVAR(doc_QPaintDevice, "\1QPaintDevice()");


static pyqt5ClassPluginDef plugin_QPaintDevice = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QPaintDevice = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPaintDevice,
        {SIP_NULLPTR},
        &plugin_QPaintDevice
    },
    {
        sipNameNr_QPaintDevice,
        {0, 0, 1},
        16, methods_QPaintDevice,
        12, enummembers_QPaintDevice,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPaintDevice,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QPaintDevice,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QPaintDevice,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QPaintDevice,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qiconengine.sip"
#include <qiconengine.h>
#line 83 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qiconengine.sip"
#include <qiconengine.h>
#line 42824 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 42828 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 42831 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 42834 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


/* Call the instance's destructor. */
extern "C" {static void release_QIconEngine_ScaledPixmapArgument(void *, int);}
static void release_QIconEngine_ScaledPixmapArgument(void *sipCppV, int)
{
    delete reinterpret_cast< ::QIconEngine::ScaledPixmapArgument *>(sipCppV);
}


extern "C" {static void assign_QIconEngine_ScaledPixmapArgument(void *, SIP_SSIZE_T, void *);}
static void assign_QIconEngine_ScaledPixmapArgument(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QIconEngine::ScaledPixmapArgument *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QIconEngine::ScaledPixmapArgument *>(sipSrc);
}


extern "C" {static void *array_QIconEngine_ScaledPixmapArgument(SIP_SSIZE_T);}
static void *array_QIconEngine_ScaledPixmapArgument(SIP_SSIZE_T sipNrElem)
{
    return new  ::QIconEngine::ScaledPixmapArgument[sipNrElem];
}


extern "C" {static void *copy_QIconEngine_ScaledPixmapArgument(const void *, SIP_SSIZE_T);}
static void *copy_QIconEngine_ScaledPixmapArgument(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QIconEngine::ScaledPixmapArgument(reinterpret_cast<const  ::QIconEngine::ScaledPixmapArgument *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QIconEngine_ScaledPixmapArgument(sipSimpleWrapper *);}
static void dealloc_QIconEngine_ScaledPixmapArgument(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QIconEngine_ScaledPixmapArgument(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QIconEngine_ScaledPixmapArgument(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QIconEngine_ScaledPixmapArgument(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QIconEngine::ScaledPixmapArgument *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QIconEngine::ScaledPixmapArgument();

            return sipCpp;
        }
    }

    {
        const  ::QIconEngine::ScaledPixmapArgument* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QIconEngine_ScaledPixmapArgument, &a0))
        {
            sipCpp = new  ::QIconEngine::ScaledPixmapArgument(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static PyObject *varget_QIconEngine_ScaledPixmapArgument_mode(void *, PyObject *, PyObject *);}
static PyObject *varget_QIconEngine_ScaledPixmapArgument_mode(void *sipSelf, PyObject *, PyObject *)
{
     ::QIcon::Mode sipVal;
     ::QIconEngine::ScaledPixmapArgument *sipCpp = reinterpret_cast< ::QIconEngine::ScaledPixmapArgument *>(sipSelf);

    sipVal = sipCpp->mode;

    return sipConvertFromEnum(static_cast<int>(sipVal), sipType_QIcon_Mode);
}


extern "C" {static int varset_QIconEngine_ScaledPixmapArgument_mode(void *, PyObject *, PyObject *);}
static int varset_QIconEngine_ScaledPixmapArgument_mode(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::QIcon::Mode sipVal;
     ::QIconEngine::ScaledPixmapArgument *sipCpp = reinterpret_cast< ::QIconEngine::ScaledPixmapArgument *>(sipSelf);

    sipVal = ( ::QIcon::Mode)sipConvertToEnum(sipPy, sipType_QIcon_Mode);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->mode = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QIconEngine_ScaledPixmapArgument_pixmap(void *, PyObject *, PyObject *);}
static PyObject *varget_QIconEngine_ScaledPixmapArgument_pixmap(void *sipSelf, PyObject *, PyObject *)
{
     ::QPixmap*sipVal;
     ::QIconEngine::ScaledPixmapArgument *sipCpp = reinterpret_cast< ::QIconEngine::ScaledPixmapArgument *>(sipSelf);

    sipVal = &sipCpp->pixmap;

    return sipConvertFromType(sipVal, sipType_QPixmap, SIP_NULLPTR);
}


extern "C" {static int varset_QIconEngine_ScaledPixmapArgument_pixmap(void *, PyObject *, PyObject *);}
static int varset_QIconEngine_ScaledPixmapArgument_pixmap(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::QPixmap*sipVal;
     ::QIconEngine::ScaledPixmapArgument *sipCpp = reinterpret_cast< ::QIconEngine::ScaledPixmapArgument *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::QPixmap *>(sipForceConvertToType(sipPy, sipType_QPixmap, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->pixmap = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QIconEngine_ScaledPixmapArgument_scale(void *, PyObject *, PyObject *);}
static PyObject *varget_QIconEngine_ScaledPixmapArgument_scale(void *sipSelf, PyObject *, PyObject *)
{
     ::qreal sipVal;
     ::QIconEngine::ScaledPixmapArgument *sipCpp = reinterpret_cast< ::QIconEngine::ScaledPixmapArgument *>(sipSelf);

    sipVal = sipCpp->scale;

    return PyFloat_FromDouble(sipVal);
}


extern "C" {static int varset_QIconEngine_ScaledPixmapArgument_scale(void *, PyObject *, PyObject *);}
static int varset_QIconEngine_ScaledPixmapArgument_scale(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::qreal sipVal;
     ::QIconEngine::ScaledPixmapArgument *sipCpp = reinterpret_cast< ::QIconEngine::ScaledPixmapArgument *>(sipSelf);

    sipVal = PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->scale = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QIconEngine_ScaledPixmapArgument_size(void *, PyObject *, PyObject *);}
static PyObject *varget_QIconEngine_ScaledPixmapArgument_size(void *sipSelf, PyObject *, PyObject *)
{
     ::QSize*sipVal;
     ::QIconEngine::ScaledPixmapArgument *sipCpp = reinterpret_cast< ::QIconEngine::ScaledPixmapArgument *>(sipSelf);

    sipVal = &sipCpp->size;

    return sipConvertFromType(sipVal, sipType_QSize, SIP_NULLPTR);
}


extern "C" {static int varset_QIconEngine_ScaledPixmapArgument_size(void *, PyObject *, PyObject *);}
static int varset_QIconEngine_ScaledPixmapArgument_size(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::QSize*sipVal;
     ::QIconEngine::ScaledPixmapArgument *sipCpp = reinterpret_cast< ::QIconEngine::ScaledPixmapArgument *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::QSize *>(sipForceConvertToType(sipPy, sipType_QSize, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->size = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QIconEngine_ScaledPixmapArgument_state(void *, PyObject *, PyObject *);}
static PyObject *varget_QIconEngine_ScaledPixmapArgument_state(void *sipSelf, PyObject *, PyObject *)
{
     ::QIcon::State sipVal;
     ::QIconEngine::ScaledPixmapArgument *sipCpp = reinterpret_cast< ::QIconEngine::ScaledPixmapArgument *>(sipSelf);

    sipVal = sipCpp->state;

    return sipConvertFromEnum(static_cast<int>(sipVal), sipType_QIcon_State);
}


extern "C" {static int varset_QIconEngine_ScaledPixmapArgument_state(void *, PyObject *, PyObject *);}
static int varset_QIconEngine_ScaledPixmapArgument_state(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::QIcon::State sipVal;
     ::QIconEngine::ScaledPixmapArgument *sipCpp = reinterpret_cast< ::QIconEngine::ScaledPixmapArgument *>(sipSelf);

    sipVal = ( ::QIcon::State)sipConvertToEnum(sipPy, sipType_QIcon_State);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->state = sipVal;

    return 0;
}

sipVariableDef variables_QIconEngine_ScaledPixmapArgument[] = {
    {InstanceVariable, sipName_mode, (PyMethodDef *)varget_QIconEngine_ScaledPixmapArgument_mode, (PyMethodDef *)varset_QIconEngine_ScaledPixmapArgument_mode, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_pixmap, (PyMethodDef *)varget_QIconEngine_ScaledPixmapArgument_pixmap, (PyMethodDef *)varset_QIconEngine_ScaledPixmapArgument_pixmap, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_scale, (PyMethodDef *)varget_QIconEngine_ScaledPixmapArgument_scale, (PyMethodDef *)varset_QIconEngine_ScaledPixmapArgument_scale, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_size, (PyMethodDef *)varget_QIconEngine_ScaledPixmapArgument_size, (PyMethodDef *)varset_QIconEngine_ScaledPixmapArgument_size, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_state, (PyMethodDef *)varget_QIconEngine_ScaledPixmapArgument_state, (PyMethodDef *)varset_QIconEngine_ScaledPixmapArgument_state, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_QIconEngine_ScaledPixmapArgument, "\1QIconEngine.ScaledPixmapArgument()\n"
"QIconEngine.ScaledPixmapArgument(QIconEngine.ScaledPixmapArgument)");


static pyqt5ClassPluginDef plugin_QIconEngine_ScaledPixmapArgument = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QIconEngine_ScaledPixmapArgument = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QIconEngine__ScaledPixmapArgument,
        {SIP_NULLPTR},
        &plugin_QIconEngine_ScaledPixmapArgument
    },
    {
        sipNameNr_ScaledPixmapArgument,
        {62, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        5, variables_QIconEngine_ScaledPixmapArgument,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QIconEngine_ScaledPixmapArgument,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QIconEngine_ScaledPixmapArgument,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QIconEngine_ScaledPixmapArgument,
    assign_QIconEngine_ScaledPixmapArgument,
    array_QIconEngine_ScaledPixmapArgument,
    copy_QIconEngine_ScaledPixmapArgument,
    release_QIconEngine_ScaledPixmapArgument,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qiconengine.sip"
#include <qiconengine.h>
#line 62 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qiconengine.sip"
#include <qiconengine.h>
#line 43128 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 43132 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 43135 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 43138 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


/* Call the instance's destructor. */
extern "C" {static void release_QIconEngine_AvailableSizesArgument(void *, int);}
static void release_QIconEngine_AvailableSizesArgument(void *sipCppV, int)
{
    delete reinterpret_cast< ::QIconEngine::AvailableSizesArgument *>(sipCppV);
}


extern "C" {static void assign_QIconEngine_AvailableSizesArgument(void *, SIP_SSIZE_T, void *);}
static void assign_QIconEngine_AvailableSizesArgument(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QIconEngine::AvailableSizesArgument *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QIconEngine::AvailableSizesArgument *>(sipSrc);
}


extern "C" {static void *array_QIconEngine_AvailableSizesArgument(SIP_SSIZE_T);}
static void *array_QIconEngine_AvailableSizesArgument(SIP_SSIZE_T sipNrElem)
{
    return new  ::QIconEngine::AvailableSizesArgument[sipNrElem];
}


extern "C" {static void *copy_QIconEngine_AvailableSizesArgument(const void *, SIP_SSIZE_T);}
static void *copy_QIconEngine_AvailableSizesArgument(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QIconEngine::AvailableSizesArgument(reinterpret_cast<const  ::QIconEngine::AvailableSizesArgument *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QIconEngine_AvailableSizesArgument(sipSimpleWrapper *);}
static void dealloc_QIconEngine_AvailableSizesArgument(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QIconEngine_AvailableSizesArgument(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QIconEngine_AvailableSizesArgument(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QIconEngine_AvailableSizesArgument(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QIconEngine::AvailableSizesArgument *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QIconEngine::AvailableSizesArgument();

            return sipCpp;
        }
    }

    {
        const  ::QIconEngine::AvailableSizesArgument* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QIconEngine_AvailableSizesArgument, &a0))
        {
            sipCpp = new  ::QIconEngine::AvailableSizesArgument(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static PyObject *varget_QIconEngine_AvailableSizesArgument_mode(void *, PyObject *, PyObject *);}
static PyObject *varget_QIconEngine_AvailableSizesArgument_mode(void *sipSelf, PyObject *, PyObject *)
{
     ::QIcon::Mode sipVal;
     ::QIconEngine::AvailableSizesArgument *sipCpp = reinterpret_cast< ::QIconEngine::AvailableSizesArgument *>(sipSelf);

    sipVal = sipCpp->mode;

    return sipConvertFromEnum(static_cast<int>(sipVal), sipType_QIcon_Mode);
}


extern "C" {static int varset_QIconEngine_AvailableSizesArgument_mode(void *, PyObject *, PyObject *);}
static int varset_QIconEngine_AvailableSizesArgument_mode(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::QIcon::Mode sipVal;
     ::QIconEngine::AvailableSizesArgument *sipCpp = reinterpret_cast< ::QIconEngine::AvailableSizesArgument *>(sipSelf);

    sipVal = ( ::QIcon::Mode)sipConvertToEnum(sipPy, sipType_QIcon_Mode);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->mode = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QIconEngine_AvailableSizesArgument_sizes(void *, PyObject *, PyObject *);}
static PyObject *varget_QIconEngine_AvailableSizesArgument_sizes(void *sipSelf, PyObject *, PyObject *)
{
    QList< ::QSize>*sipVal;
     ::QIconEngine::AvailableSizesArgument *sipCpp = reinterpret_cast< ::QIconEngine::AvailableSizesArgument *>(sipSelf);

    sipVal = &sipCpp->sizes;

    return sipConvertFromType(sipVal, sipType_QList_0100QSize, SIP_NULLPTR);
}


extern "C" {static int varset_QIconEngine_AvailableSizesArgument_sizes(void *, PyObject *, PyObject *);}
static int varset_QIconEngine_AvailableSizesArgument_sizes(void *sipSelf, PyObject *sipPy, PyObject *)
{
    QList< ::QSize>*sipVal;
     ::QIconEngine::AvailableSizesArgument *sipCpp = reinterpret_cast< ::QIconEngine::AvailableSizesArgument *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<QList< ::QSize> *>(sipForceConvertToType(sipPy, sipType_QList_0100QSize, SIP_NULLPTR, SIP_NOT_NONE, &sipValState, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->sizes = *sipVal;

    sipReleaseType(sipVal, sipType_QList_0100QSize, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_QIconEngine_AvailableSizesArgument_state(void *, PyObject *, PyObject *);}
static PyObject *varget_QIconEngine_AvailableSizesArgument_state(void *sipSelf, PyObject *, PyObject *)
{
     ::QIcon::State sipVal;
     ::QIconEngine::AvailableSizesArgument *sipCpp = reinterpret_cast< ::QIconEngine::AvailableSizesArgument *>(sipSelf);

    sipVal = sipCpp->state;

    return sipConvertFromEnum(static_cast<int>(sipVal), sipType_QIcon_State);
}


extern "C" {static int varset_QIconEngine_AvailableSizesArgument_state(void *, PyObject *, PyObject *);}
static int varset_QIconEngine_AvailableSizesArgument_state(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::QIcon::State sipVal;
     ::QIconEngine::AvailableSizesArgument *sipCpp = reinterpret_cast< ::QIconEngine::AvailableSizesArgument *>(sipSelf);

    sipVal = ( ::QIcon::State)sipConvertToEnum(sipPy, sipType_QIcon_State);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->state = sipVal;

    return 0;
}

sipVariableDef variables_QIconEngine_AvailableSizesArgument[] = {
    {InstanceVariable, sipName_mode, (PyMethodDef *)varget_QIconEngine_AvailableSizesArgument_mode, (PyMethodDef *)varset_QIconEngine_AvailableSizesArgument_mode, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_sizes, (PyMethodDef *)varget_QIconEngine_AvailableSizesArgument_sizes, (PyMethodDef *)varset_QIconEngine_AvailableSizesArgument_sizes, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_state, (PyMethodDef *)varget_QIconEngine_AvailableSizesArgument_state, (PyMethodDef *)varset_QIconEngine_AvailableSizesArgument_state, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_QIconEngine_AvailableSizesArgument, "\1QIconEngine.AvailableSizesArgument()\n"
"QIconEngine.AvailableSizesArgument(QIconEngine.AvailableSizesArgument)");


static pyqt5ClassPluginDef plugin_QIconEngine_AvailableSizesArgument = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QIconEngine_AvailableSizesArgument = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QIconEngine__AvailableSizesArgument,
        {SIP_NULLPTR},
        &plugin_QIconEngine_AvailableSizesArgument
    },
    {
        sipNameNr_AvailableSizesArgument,
        {62, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        3, variables_QIconEngine_AvailableSizesArgument,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QIconEngine_AvailableSizesArgument,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QIconEngine_AvailableSizesArgument,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QIconEngine_AvailableSizesArgument,
    assign_QIconEngine_AvailableSizesArgument,
    array_QIconEngine_AvailableSizesArgument,
    copy_QIconEngine_AvailableSizesArgument,
    release_QIconEngine_AvailableSizesArgument,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qiconengine.sip"
#include <qiconengine.h>
#line 43371 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 43375 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 43378 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 43381 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 43384 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 43387 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 43390 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 43393 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 43396 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQIconEngine : public  ::QIconEngine
{
public:
    sipQIconEngine();
    sipQIconEngine(const  ::QIconEngine&);
    virtual ~sipQIconEngine();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QString iconName() const SIP_OVERRIDE;
    QList< ::QSize> availableSizes( ::QIcon::Mode, ::QIcon::State) const SIP_OVERRIDE;
    bool write( ::QDataStream&) const SIP_OVERRIDE;
    bool read( ::QDataStream&) SIP_OVERRIDE;
     ::QIconEngine* clone() const SIP_OVERRIDE;
     ::QString key() const SIP_OVERRIDE;
    void addFile(const  ::QString&,const  ::QSize&, ::QIcon::Mode, ::QIcon::State) SIP_OVERRIDE;
    void addPixmap(const  ::QPixmap&, ::QIcon::Mode, ::QIcon::State) SIP_OVERRIDE;
     ::QPixmap pixmap(const  ::QSize&, ::QIcon::Mode, ::QIcon::State) SIP_OVERRIDE;
     ::QSize actualSize(const  ::QSize&, ::QIcon::Mode, ::QIcon::State) SIP_OVERRIDE;
    void paint( ::QPainter*,const  ::QRect&, ::QIcon::Mode, ::QIcon::State) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQIconEngine(const sipQIconEngine &);
    sipQIconEngine &operator = (const sipQIconEngine &);

    char sipPyMethods[11];
};

sipQIconEngine::sipQIconEngine():  ::QIconEngine(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQIconEngine::sipQIconEngine(const  ::QIconEngine& a0):  ::QIconEngine(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQIconEngine::~sipQIconEngine()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::QString sipQIconEngine::iconName() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_iconName);

    if (!sipMeth)
        return  ::QIconEngine::iconName();

    extern  ::QString sipVH_QtGui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_24(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

QList< ::QSize> sipQIconEngine::availableSizes( ::QIcon::Mode a0, ::QIcon::State a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_availableSizes);

    if (!sipMeth)
        return  ::QIconEngine::availableSizes(a0,a1);

    extern QList< ::QSize> sipVH_QtGui_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QIcon::Mode, ::QIcon::State);

    return sipVH_QtGui_27(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQIconEngine::write( ::QDataStream& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,SIP_NULLPTR,sipName_write);

    if (!sipMeth)
        return  ::QIconEngine::write(a0);

    extern bool sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDataStream&);

    return sipVH_QtGui_26(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQIconEngine::read( ::QDataStream& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_read);

    if (!sipMeth)
        return  ::QIconEngine::read(a0);

    extern bool sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDataStream&);

    return sipVH_QtGui_26(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QIconEngine* sipQIconEngine::clone() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,sipName_QIconEngine,sipName_clone);

    if (!sipMeth)
        return 0;

    extern  ::QIconEngine* sipVH_QtGui_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_25(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QString sipQIconEngine::key() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,SIP_NULLPTR,sipName_key);

    if (!sipMeth)
        return  ::QIconEngine::key();

    extern  ::QString sipVH_QtGui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_24(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQIconEngine::addFile(const  ::QString& a0,const  ::QSize& a1, ::QIcon::Mode a2, ::QIcon::State a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_addFile);

    if (!sipMeth)
    {
         ::QIconEngine::addFile(a0,a1,a2,a3);
        return;
    }

    extern void sipVH_QtGui_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&,const  ::QSize&, ::QIcon::Mode, ::QIcon::State);

    sipVH_QtGui_23(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2, a3);
}

void sipQIconEngine::addPixmap(const  ::QPixmap& a0, ::QIcon::Mode a1, ::QIcon::State a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_addPixmap);

    if (!sipMeth)
    {
         ::QIconEngine::addPixmap(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QPixmap&, ::QIcon::Mode, ::QIcon::State);

    sipVH_QtGui_22(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QPixmap sipQIconEngine::pixmap(const  ::QSize& a0, ::QIcon::Mode a1, ::QIcon::State a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_pixmap);

    if (!sipMeth)
        return  ::QIconEngine::pixmap(a0,a1,a2);

    extern  ::QPixmap sipVH_QtGui_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QSize&, ::QIcon::Mode, ::QIcon::State);

    return sipVH_QtGui_21(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QSize sipQIconEngine::actualSize(const  ::QSize& a0, ::QIcon::Mode a1, ::QIcon::State a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_actualSize);

    if (!sipMeth)
        return  ::QIconEngine::actualSize(a0,a1,a2);

    extern  ::QSize sipVH_QtGui_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QSize&, ::QIcon::Mode, ::QIcon::State);

    return sipVH_QtGui_20(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQIconEngine::paint( ::QPainter*a0,const  ::QRect& a1, ::QIcon::Mode a2, ::QIcon::State a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,sipName_QIconEngine,sipName_paint);

    if (!sipMeth)
        return;

    extern void sipVH_QtGui_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*,const  ::QRect&, ::QIcon::Mode, ::QIcon::State);

    sipVH_QtGui_19(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2, a3);
}


PyDoc_STRVAR(doc_QIconEngine_paint, "paint(self, QPainter, QRect, QIcon.Mode, QIcon.State)");

extern "C" {static PyObject *meth_QIconEngine_paint(PyObject *, PyObject *);}
static PyObject *meth_QIconEngine_paint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QPainter* a0;
        const  ::QRect* a1;
         ::QIcon::Mode a2;
         ::QIcon::State a3;
         ::QIconEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J9EE", &sipSelf, sipType_QIconEngine, &sipCpp, sipType_QPainter, &a0, sipType_QRect, &a1, sipType_QIcon_Mode, &a2, sipType_QIcon_State, &a3))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QIconEngine, sipName_paint);
                return SIP_NULLPTR;
            }

            sipCpp->paint(a0,*a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIconEngine, sipName_paint, doc_QIconEngine_paint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIconEngine_actualSize, "actualSize(self, QSize, QIcon.Mode, QIcon.State) -> QSize");

extern "C" {static PyObject *meth_QIconEngine_actualSize(PyObject *, PyObject *);}
static PyObject *meth_QIconEngine_actualSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSize* a0;
         ::QIcon::Mode a1;
         ::QIcon::State a2;
         ::QIconEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9EE", &sipSelf, sipType_QIconEngine, &sipCpp, sipType_QSize, &a0, sipType_QIcon_Mode, &a1, sipType_QIcon_State, &a2))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QIconEngine::actualSize(*a0,a1,a2) : sipCpp->actualSize(*a0,a1,a2)));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIconEngine, sipName_actualSize, doc_QIconEngine_actualSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIconEngine_pixmap, "pixmap(self, QSize, QIcon.Mode, QIcon.State) -> QPixmap");

extern "C" {static PyObject *meth_QIconEngine_pixmap(PyObject *, PyObject *);}
static PyObject *meth_QIconEngine_pixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSize* a0;
         ::QIcon::Mode a1;
         ::QIcon::State a2;
         ::QIconEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9EE", &sipSelf, sipType_QIconEngine, &sipCpp, sipType_QSize, &a0, sipType_QIcon_Mode, &a1, sipType_QIcon_State, &a2))
        {
             ::QPixmap*sipRes;

            sipRes = new  ::QPixmap((sipSelfWasArg ? sipCpp-> ::QIconEngine::pixmap(*a0,a1,a2) : sipCpp->pixmap(*a0,a1,a2)));

            return sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIconEngine, sipName_pixmap, doc_QIconEngine_pixmap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIconEngine_addPixmap, "addPixmap(self, QPixmap, QIcon.Mode, QIcon.State)");

extern "C" {static PyObject *meth_QIconEngine_addPixmap(PyObject *, PyObject *);}
static PyObject *meth_QIconEngine_addPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QPixmap* a0;
         ::QIcon::Mode a1;
         ::QIcon::State a2;
         ::QIconEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9EE", &sipSelf, sipType_QIconEngine, &sipCpp, sipType_QPixmap, &a0, sipType_QIcon_Mode, &a1, sipType_QIcon_State, &a2))
        {
            (sipSelfWasArg ? sipCpp-> ::QIconEngine::addPixmap(*a0,a1,a2) : sipCpp->addPixmap(*a0,a1,a2));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIconEngine, sipName_addPixmap, doc_QIconEngine_addPixmap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIconEngine_addFile, "addFile(self, str, QSize, QIcon.Mode, QIcon.State)");

extern "C" {static PyObject *meth_QIconEngine_addFile(PyObject *, PyObject *);}
static PyObject *meth_QIconEngine_addFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QSize* a1;
         ::QIcon::Mode a2;
         ::QIcon::State a3;
         ::QIconEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9EE", &sipSelf, sipType_QIconEngine, &sipCpp, sipType_QString,&a0, &a0State, sipType_QSize, &a1, sipType_QIcon_Mode, &a2, sipType_QIcon_State, &a3))
        {
            (sipSelfWasArg ? sipCpp-> ::QIconEngine::addFile(*a0,*a1,a2,a3) : sipCpp->addFile(*a0,*a1,a2,a3));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIconEngine, sipName_addFile, doc_QIconEngine_addFile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIconEngine_key, "key(self) -> str");

extern "C" {static PyObject *meth_QIconEngine_key(PyObject *, PyObject *);}
static PyObject *meth_QIconEngine_key(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QIconEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIconEngine, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString((sipSelfWasArg ? sipCpp-> ::QIconEngine::key() : sipCpp->key()));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIconEngine, sipName_key, doc_QIconEngine_key);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIconEngine_clone, "clone(self) -> QIconEngine");

extern "C" {static PyObject *meth_QIconEngine_clone(PyObject *, PyObject *);}
static PyObject *meth_QIconEngine_clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QIconEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIconEngine, &sipCpp))
        {
             ::QIconEngine*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QIconEngine, sipName_clone);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->clone();

            return sipConvertFromNewType(sipRes,sipType_QIconEngine,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIconEngine, sipName_clone, doc_QIconEngine_clone);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIconEngine_read, "read(self, QDataStream) -> bool");

extern "C" {static PyObject *meth_QIconEngine_read(PyObject *, PyObject *);}
static PyObject *meth_QIconEngine_read(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDataStream* a0;
         ::QIconEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QIconEngine, &sipCpp, sipType_QDataStream, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QIconEngine::read(*a0) : sipCpp->read(*a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIconEngine, sipName_read, doc_QIconEngine_read);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIconEngine_write, "write(self, QDataStream) -> bool");

extern "C" {static PyObject *meth_QIconEngine_write(PyObject *, PyObject *);}
static PyObject *meth_QIconEngine_write(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDataStream* a0;
        const  ::QIconEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QIconEngine, &sipCpp, sipType_QDataStream, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QIconEngine::write(*a0) : sipCpp->write(*a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIconEngine, sipName_write, doc_QIconEngine_write);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIconEngine_availableSizes, "availableSizes(self, mode: QIcon.Mode = QIcon.Normal, state: QIcon.State = QIcon.Off) -> List[QSize]");

extern "C" {static PyObject *meth_QIconEngine_availableSizes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIconEngine_availableSizes(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QIcon::Mode a0 = QIcon::Normal;
         ::QIcon::State a1 = QIcon::Off;
        const  ::QIconEngine *sipCpp;

        static const char *sipKwdList[] = {
            sipName_mode,
            sipName_state,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|EE", &sipSelf, sipType_QIconEngine, &sipCpp, sipType_QIcon_Mode, &a0, sipType_QIcon_State, &a1))
        {
            QList< ::QSize>*sipRes;

            sipRes = new QList< ::QSize>((sipSelfWasArg ? sipCpp-> ::QIconEngine::availableSizes(a0,a1) : sipCpp->availableSizes(a0,a1)));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIconEngine, sipName_availableSizes, doc_QIconEngine_availableSizes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIconEngine_iconName, "iconName(self) -> str");

extern "C" {static PyObject *meth_QIconEngine_iconName(PyObject *, PyObject *);}
static PyObject *meth_QIconEngine_iconName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QIconEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIconEngine, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString((sipSelfWasArg ? sipCpp-> ::QIconEngine::iconName() : sipCpp->iconName()));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIconEngine, sipName_iconName, doc_QIconEngine_iconName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIconEngine_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QIconEngine_isNull(PyObject *, PyObject *);}
static PyObject *meth_QIconEngine_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QIconEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIconEngine, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIconEngine, sipName_isNull, doc_QIconEngine_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIconEngine_scaledPixmap, "scaledPixmap(self, QSize, QIcon.Mode, QIcon.State, float) -> QPixmap");

extern "C" {static PyObject *meth_QIconEngine_scaledPixmap(PyObject *, PyObject *);}
static PyObject *meth_QIconEngine_scaledPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
         ::QIcon::Mode a1;
         ::QIcon::State a2;
         ::qreal a3;
         ::QIconEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9EEd", &sipSelf, sipType_QIconEngine, &sipCpp, sipType_QSize, &a0, sipType_QIcon_Mode, &a1, sipType_QIcon_State, &a2, &a3))
        {
             ::QPixmap*sipRes;

            sipRes = new  ::QPixmap(sipCpp->scaledPixmap(*a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIconEngine, sipName_scaledPixmap, doc_QIconEngine_scaledPixmap);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QIconEngine(void *, int);}
static void release_QIconEngine(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQIconEngine *>(sipCppV);
    else
        delete reinterpret_cast< ::QIconEngine *>(sipCppV);
}


extern "C" {static void dealloc_QIconEngine(sipSimpleWrapper *);}
static void dealloc_QIconEngine(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQIconEngine *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QIconEngine(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QIconEngine(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QIconEngine(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQIconEngine *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQIconEngine();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QIconEngine* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QIconEngine, &a0))
        {
            sipCpp = new sipQIconEngine(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QIconEngine[] = {
    {SIP_MLNAME_CAST(sipName_actualSize), meth_QIconEngine_actualSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QIconEngine_actualSize)},
    {SIP_MLNAME_CAST(sipName_addFile), meth_QIconEngine_addFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QIconEngine_addFile)},
    {SIP_MLNAME_CAST(sipName_addPixmap), meth_QIconEngine_addPixmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QIconEngine_addPixmap)},
    {SIP_MLNAME_CAST(sipName_availableSizes), SIP_MLMETH_CAST(meth_QIconEngine_availableSizes), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QIconEngine_availableSizes)},
    {SIP_MLNAME_CAST(sipName_clone), meth_QIconEngine_clone, METH_VARARGS, SIP_MLDOC_CAST(doc_QIconEngine_clone)},
    {SIP_MLNAME_CAST(sipName_iconName), meth_QIconEngine_iconName, METH_VARARGS, SIP_MLDOC_CAST(doc_QIconEngine_iconName)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QIconEngine_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QIconEngine_isNull)},
    {SIP_MLNAME_CAST(sipName_key), meth_QIconEngine_key, METH_VARARGS, SIP_MLDOC_CAST(doc_QIconEngine_key)},
    {SIP_MLNAME_CAST(sipName_paint), meth_QIconEngine_paint, METH_VARARGS, SIP_MLDOC_CAST(doc_QIconEngine_paint)},
    {SIP_MLNAME_CAST(sipName_pixmap), meth_QIconEngine_pixmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QIconEngine_pixmap)},
    {SIP_MLNAME_CAST(sipName_read), meth_QIconEngine_read, METH_VARARGS, SIP_MLDOC_CAST(doc_QIconEngine_read)},
    {SIP_MLNAME_CAST(sipName_scaledPixmap), meth_QIconEngine_scaledPixmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QIconEngine_scaledPixmap)},
    {SIP_MLNAME_CAST(sipName_write), meth_QIconEngine_write, METH_VARARGS, SIP_MLDOC_CAST(doc_QIconEngine_write)}
};

static sipEnumMemberDef enummembers_QIconEngine[] = {
    {sipName_AvailableSizesHook, static_cast<int>( ::QIconEngine::AvailableSizesHook), 64},
    {sipName_IconNameHook, static_cast<int>( ::QIconEngine::IconNameHook), 64},
    {sipName_IsNullHook, static_cast<int>( ::QIconEngine::IsNullHook), 64},
    {sipName_ScaledPixmapHook, static_cast<int>( ::QIconEngine::ScaledPixmapHook), 64},
};

PyDoc_STRVAR(doc_QIconEngine, "\1QIconEngine()\n"
"QIconEngine(QIconEngine)");


static pyqt5ClassPluginDef plugin_QIconEngine = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QIconEngine = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QIconEngine,
        {SIP_NULLPTR},
        &plugin_QIconEngine
    },
    {
        sipNameNr_QIconEngine,
        {0, 0, 1},
        13, methods_QIconEngine,
        4, enummembers_QIconEngine,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QIconEngine,
    -1,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QIconEngine,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QIconEngine,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QIconEngine,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 44181 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 44185 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 44188 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qiconengine.sip"
#include <qiconengine.h>
#line 44191 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 44194 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 44197 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 44200 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 44203 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 44206 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 44209 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 44212 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 44215 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QIcon_pixmap, "pixmap(self, QSize, mode: QIcon.Mode = QIcon.Normal, state: QIcon.State = QIcon.Off) -> QPixmap\n"
"pixmap(self, int, int, mode: QIcon.Mode = QIcon.Normal, state: QIcon.State = QIcon.Off) -> QPixmap\n"
"pixmap(self, int, mode: QIcon.Mode = QIcon.Normal, state: QIcon.State = QIcon.Off) -> QPixmap\n"
"pixmap(self, QWindow, QSize, mode: QIcon.Mode = QIcon.Normal, state: QIcon.State = QIcon.Off) -> QPixmap");

extern "C" {static PyObject *meth_QIcon_pixmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIcon_pixmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
         ::QIcon::Mode a1 = QIcon::Normal;
         ::QIcon::State a2 = QIcon::Off;
        const  ::QIcon *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
            sipName_state,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|EE", &sipSelf, sipType_QIcon, &sipCpp, sipType_QSize, &a0, sipType_QIcon_Mode, &a1, sipType_QIcon_State, &a2))
        {
             ::QPixmap*sipRes;

            sipRes = new  ::QPixmap(sipCpp->pixmap(*a0,a1,a2));

            return sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
        }
    }

    {
        int a0;
        int a1;
         ::QIcon::Mode a2 = QIcon::Normal;
         ::QIcon::State a3 = QIcon::Off;
        const  ::QIcon *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_mode,
            sipName_state,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|EE", &sipSelf, sipType_QIcon, &sipCpp, &a0, &a1, sipType_QIcon_Mode, &a2, sipType_QIcon_State, &a3))
        {
             ::QPixmap*sipRes;

            sipRes = new  ::QPixmap(sipCpp->pixmap(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
        }
    }

    {
        int a0;
         ::QIcon::Mode a1 = QIcon::Normal;
         ::QIcon::State a2 = QIcon::Off;
        const  ::QIcon *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
            sipName_state,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|EE", &sipSelf, sipType_QIcon, &sipCpp, &a0, sipType_QIcon_Mode, &a1, sipType_QIcon_State, &a2))
        {
             ::QPixmap*sipRes;

            sipRes = new  ::QPixmap(sipCpp->pixmap(a0,a1,a2));

            return sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
        }
    }

    {
         ::QWindow* a0;
        const  ::QSize* a1;
         ::QIcon::Mode a2 = QIcon::Normal;
         ::QIcon::State a3 = QIcon::Off;
        const  ::QIcon *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_mode,
            sipName_state,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J9|EE", &sipSelf, sipType_QIcon, &sipCpp, sipType_QWindow, &a0, sipType_QSize, &a1, sipType_QIcon_Mode, &a2, sipType_QIcon_State, &a3))
        {
             ::QPixmap*sipRes;

            sipRes = new  ::QPixmap(sipCpp->pixmap(a0,*a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIcon, sipName_pixmap, doc_QIcon_pixmap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIcon_actualSize, "actualSize(self, QSize, mode: QIcon.Mode = QIcon.Normal, state: QIcon.State = QIcon.Off) -> QSize\n"
"actualSize(self, QWindow, QSize, mode: QIcon.Mode = QIcon.Normal, state: QIcon.State = QIcon.Off) -> QSize");

extern "C" {static PyObject *meth_QIcon_actualSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIcon_actualSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
         ::QIcon::Mode a1 = QIcon::Normal;
         ::QIcon::State a2 = QIcon::Off;
        const  ::QIcon *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
            sipName_state,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|EE", &sipSelf, sipType_QIcon, &sipCpp, sipType_QSize, &a0, sipType_QIcon_Mode, &a1, sipType_QIcon_State, &a2))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->actualSize(*a0,a1,a2));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    {
         ::QWindow* a0;
        const  ::QSize* a1;
         ::QIcon::Mode a2 = QIcon::Normal;
         ::QIcon::State a3 = QIcon::Off;
        const  ::QIcon *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_mode,
            sipName_state,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J9|EE", &sipSelf, sipType_QIcon, &sipCpp, sipType_QWindow, &a0, sipType_QSize, &a1, sipType_QIcon_Mode, &a2, sipType_QIcon_State, &a3))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->actualSize(a0,*a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIcon, sipName_actualSize, doc_QIcon_actualSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIcon_availableSizes, "availableSizes(self, mode: QIcon.Mode = QIcon.Normal, state: QIcon.State = QIcon.Off) -> List[QSize]");

extern "C" {static PyObject *meth_QIcon_availableSizes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIcon_availableSizes(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QIcon::Mode a0 = QIcon::Normal;
         ::QIcon::State a1 = QIcon::Off;
        const  ::QIcon *sipCpp;

        static const char *sipKwdList[] = {
            sipName_mode,
            sipName_state,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|EE", &sipSelf, sipType_QIcon, &sipCpp, sipType_QIcon_Mode, &a0, sipType_QIcon_State, &a1))
        {
            QList< ::QSize>*sipRes;

            sipRes = new QList< ::QSize>(sipCpp->availableSizes(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIcon, sipName_availableSizes, doc_QIcon_availableSizes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIcon_paint, "paint(self, QPainter, QRect, alignment: Union[Qt.Alignment, Qt.AlignmentFlag] = Qt.AlignCenter, mode: QIcon.Mode = QIcon.Normal, state: QIcon.State = QIcon.Off)\n"
"paint(self, QPainter, int, int, int, int, alignment: Union[Qt.Alignment, Qt.AlignmentFlag] = Qt.AlignCenter, mode: QIcon.Mode = QIcon.Normal, state: QIcon.State = QIcon.Off)");

extern "C" {static PyObject *meth_QIcon_paint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIcon_paint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPainter* a0;
        const  ::QRect* a1;
         ::Qt::Alignment a2def = Qt::AlignCenter;
         ::Qt::Alignment* a2 = &a2def;
        int a2State = 0;
         ::QIcon::Mode a3 = QIcon::Normal;
         ::QIcon::State a4 = QIcon::Off;
        const  ::QIcon *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alignment,
            sipName_mode,
            sipName_state,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J9|J1EE", &sipSelf, sipType_QIcon, &sipCpp, sipType_QPainter, &a0, sipType_QRect, &a1, sipType_Qt_Alignment, &a2, &a2State, sipType_QIcon_Mode, &a3, sipType_QIcon_State, &a4))
        {
            sipCpp->paint(a0,*a1,*a2,a3,a4);
            sipReleaseType(a2,sipType_Qt_Alignment,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QPainter* a0;
        int a1;
        int a2;
        int a3;
        int a4;
         ::Qt::Alignment a5def = Qt::AlignCenter;
         ::Qt::Alignment* a5 = &a5def;
        int a5State = 0;
         ::QIcon::Mode a6 = QIcon::Normal;
         ::QIcon::State a7 = QIcon::Off;
        const  ::QIcon *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alignment,
            sipName_mode,
            sipName_state,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8iiii|J1EE", &sipSelf, sipType_QIcon, &sipCpp, sipType_QPainter, &a0, &a1, &a2, &a3, &a4, sipType_Qt_Alignment, &a5, &a5State, sipType_QIcon_Mode, &a6, sipType_QIcon_State, &a7))
        {
            sipCpp->paint(a0,a1,a2,a3,a4,*a5,a6,a7);
            sipReleaseType(a5,sipType_Qt_Alignment,a5State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIcon, sipName_paint, doc_QIcon_paint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIcon_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QIcon_isNull(PyObject *, PyObject *);}
static PyObject *meth_QIcon_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QIcon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIcon, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIcon, sipName_isNull, doc_QIcon_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIcon_isDetached, "isDetached(self) -> bool");

extern "C" {static PyObject *meth_QIcon_isDetached(PyObject *, PyObject *);}
static PyObject *meth_QIcon_isDetached(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QIcon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIcon, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDetached();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIcon, sipName_isDetached, doc_QIcon_isDetached);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIcon_addPixmap, "addPixmap(self, QPixmap, mode: QIcon.Mode = QIcon.Normal, state: QIcon.State = QIcon.Off)");

extern "C" {static PyObject *meth_QIcon_addPixmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIcon_addPixmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixmap* a0;
         ::QIcon::Mode a1 = QIcon::Normal;
         ::QIcon::State a2 = QIcon::Off;
         ::QIcon *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
            sipName_state,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|EE", &sipSelf, sipType_QIcon, &sipCpp, sipType_QPixmap, &a0, sipType_QIcon_Mode, &a1, sipType_QIcon_State, &a2))
        {
            sipCpp->addPixmap(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIcon, sipName_addPixmap, doc_QIcon_addPixmap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIcon_addFile, "addFile(self, str, size: QSize = QSize(), mode: QIcon.Mode = QIcon.Normal, state: QIcon.State = QIcon.Off)");

extern "C" {static PyObject *meth_QIcon_addFile(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIcon_addFile(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QSize& a1def = QSize();
        const  ::QSize* a1 = &a1def;
         ::QIcon::Mode a2 = QIcon::Normal;
         ::QIcon::State a3 = QIcon::Off;
         ::QIcon *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_size,
            sipName_mode,
            sipName_state,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J9EE", &sipSelf, sipType_QIcon, &sipCpp, sipType_QString,&a0, &a0State, sipType_QSize, &a1, sipType_QIcon_Mode, &a2, sipType_QIcon_State, &a3))
        {
            sipCpp->addFile(*a0,*a1,a2,a3);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIcon, sipName_addFile, doc_QIcon_addFile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIcon_cacheKey, "cacheKey(self) -> int");

extern "C" {static PyObject *meth_QIcon_cacheKey(PyObject *, PyObject *);}
static PyObject *meth_QIcon_cacheKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QIcon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIcon, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->cacheKey();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIcon, sipName_cacheKey, doc_QIcon_cacheKey);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIcon_fromTheme, "fromTheme(str) -> QIcon\n"
"fromTheme(str, QIcon) -> QIcon");

extern "C" {static PyObject *meth_QIcon_fromTheme(PyObject *, PyObject *);}
static PyObject *meth_QIcon_fromTheme(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QIcon*sipRes;

            sipRes = new  ::QIcon( ::QIcon::fromTheme(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QIcon,SIP_NULLPTR);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QIcon* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J9", sipType_QString,&a0, &a0State, sipType_QIcon, &a1))
        {
             ::QIcon*sipRes;

            sipRes = new  ::QIcon( ::QIcon::fromTheme(*a0,*a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QIcon,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIcon, sipName_fromTheme, doc_QIcon_fromTheme);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIcon_hasThemeIcon, "hasThemeIcon(str) -> bool");

extern "C" {static PyObject *meth_QIcon_hasThemeIcon(PyObject *, PyObject *);}
static PyObject *meth_QIcon_hasThemeIcon(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes =  ::QIcon::hasThemeIcon(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIcon, sipName_hasThemeIcon, doc_QIcon_hasThemeIcon);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIcon_themeSearchPaths, "themeSearchPaths() -> List[str]");

extern "C" {static PyObject *meth_QIcon_themeSearchPaths(PyObject *, PyObject *);}
static PyObject *meth_QIcon_themeSearchPaths(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList( ::QIcon::themeSearchPaths());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIcon, sipName_themeSearchPaths, doc_QIcon_themeSearchPaths);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIcon_setThemeSearchPaths, "setThemeSearchPaths(Iterable[str])");

extern "C" {static PyObject *meth_QIcon_setThemeSearchPaths(PyObject *, PyObject *);}
static PyObject *meth_QIcon_setThemeSearchPaths(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringList* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QStringList,&a0, &a0State))
        {
             ::QIcon::setThemeSearchPaths(*a0);
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIcon, sipName_setThemeSearchPaths, doc_QIcon_setThemeSearchPaths);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIcon_themeName, "themeName() -> str");

extern "C" {static PyObject *meth_QIcon_themeName(PyObject *, PyObject *);}
static PyObject *meth_QIcon_themeName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QIcon::themeName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIcon, sipName_themeName, doc_QIcon_themeName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIcon_setThemeName, "setThemeName(str)");

extern "C" {static PyObject *meth_QIcon_setThemeName(PyObject *, PyObject *);}
static PyObject *meth_QIcon_setThemeName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QIcon::setThemeName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIcon, sipName_setThemeName, doc_QIcon_setThemeName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIcon_name, "name(self) -> str");

extern "C" {static PyObject *meth_QIcon_name(PyObject *, PyObject *);}
static PyObject *meth_QIcon_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QIcon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIcon, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIcon, sipName_name, doc_QIcon_name);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIcon_swap, "swap(self, QIcon)");

extern "C" {static PyObject *meth_QIcon_swap(PyObject *, PyObject *);}
static PyObject *meth_QIcon_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QIcon* a0;
         ::QIcon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QIcon, &sipCpp, sipType_QIcon, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIcon, sipName_swap, doc_QIcon_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIcon_setIsMask, "setIsMask(self, bool)");

extern "C" {static PyObject *meth_QIcon_setIsMask(PyObject *, PyObject *);}
static PyObject *meth_QIcon_setIsMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QIcon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QIcon, &sipCpp, &a0))
        {
            sipCpp->setIsMask(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIcon, sipName_setIsMask, doc_QIcon_setIsMask);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIcon_isMask, "isMask(self) -> bool");

extern "C" {static PyObject *meth_QIcon_isMask(PyObject *, PyObject *);}
static PyObject *meth_QIcon_isMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QIcon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIcon, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isMask();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIcon, sipName_isMask, doc_QIcon_isMask);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIcon_fallbackSearchPaths, "fallbackSearchPaths() -> List[str]");

extern "C" {static PyObject *meth_QIcon_fallbackSearchPaths(PyObject *, PyObject *);}
static PyObject *meth_QIcon_fallbackSearchPaths(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList( ::QIcon::fallbackSearchPaths());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIcon, sipName_fallbackSearchPaths, doc_QIcon_fallbackSearchPaths);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIcon_setFallbackSearchPaths, "setFallbackSearchPaths(Iterable[str])");

extern "C" {static PyObject *meth_QIcon_setFallbackSearchPaths(PyObject *, PyObject *);}
static PyObject *meth_QIcon_setFallbackSearchPaths(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringList* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QStringList,&a0, &a0State))
        {
             ::QIcon::setFallbackSearchPaths(*a0);
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIcon, sipName_setFallbackSearchPaths, doc_QIcon_setFallbackSearchPaths);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIcon_fallbackThemeName, "fallbackThemeName() -> str");

extern "C" {static PyObject *meth_QIcon_fallbackThemeName(PyObject *, PyObject *);}
static PyObject *meth_QIcon_fallbackThemeName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QIcon::fallbackThemeName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIcon, sipName_fallbackThemeName, doc_QIcon_fallbackThemeName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIcon_setFallbackThemeName, "setFallbackThemeName(str)");

extern "C" {static PyObject *meth_QIcon_setFallbackThemeName(PyObject *, PyObject *);}
static PyObject *meth_QIcon_setFallbackThemeName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QIcon::setFallbackThemeName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIcon, sipName_setFallbackThemeName, doc_QIcon_setFallbackThemeName);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QIcon(void *, int);}
static void release_QIcon(void *sipCppV, int)
{
    delete reinterpret_cast< ::QIcon *>(sipCppV);
}


extern "C" {static void assign_QIcon(void *, SIP_SSIZE_T, void *);}
static void assign_QIcon(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QIcon *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QIcon *>(sipSrc);
}


extern "C" {static void *array_QIcon(SIP_SSIZE_T);}
static void *array_QIcon(SIP_SSIZE_T sipNrElem)
{
    return new  ::QIcon[sipNrElem];
}


extern "C" {static void *copy_QIcon(const void *, SIP_SSIZE_T);}
static void *copy_QIcon(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QIcon(reinterpret_cast<const  ::QIcon *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QIcon(sipSimpleWrapper *);}
static void dealloc_QIcon(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QIcon(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QIcon(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QIcon(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QIcon *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QIcon();

            return sipCpp;
        }
    }

    {
        const  ::QPixmap* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QPixmap, &a0))
        {
            sipCpp = new  ::QIcon(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QIcon* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QIcon, &a0))
        {
            sipCpp = new  ::QIcon(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new  ::QIcon(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
         ::QIconEngine* a0;
        PyObject *a0Wrapper;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "@J8", &a0Wrapper, sipType_QIconEngine, &a0))
        {
            sipCpp = new  ::QIcon(a0);

            sipTransferTo(a0Wrapper, (PyObject *)sipSelf);

            return sipCpp;
        }
    }

    {
        const  ::QVariant* a0;
        PyObject *a0Wrapper;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "@J1", &a0Wrapper, sipType_QVariant, &a0, &a0State))
        {
            sipErrorState sipError = sipErrorNone;

#line 51 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qicon.sip"
        if (a0->canConvert<QIcon>())
            sipCpp = new QIcon(a0->value<QIcon>());
        else
            sipError = sipBadCallableArg(0, a0Wrapper);
#line 45195 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            if (sipError == sipErrorNone)
                return sipCpp;

            if (sipUnused)
            {
                Py_XDECREF(*sipUnused);
            }

            sipAddException(sipError, sipParseErr);

            if (sipError == sipErrorFail)
                return SIP_NULLPTR;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QIcon[] = {
    {SIP_MLNAME_CAST(sipName_actualSize), SIP_MLMETH_CAST(meth_QIcon_actualSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QIcon_actualSize)},
    {SIP_MLNAME_CAST(sipName_addFile), SIP_MLMETH_CAST(meth_QIcon_addFile), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QIcon_addFile)},
    {SIP_MLNAME_CAST(sipName_addPixmap), SIP_MLMETH_CAST(meth_QIcon_addPixmap), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QIcon_addPixmap)},
    {SIP_MLNAME_CAST(sipName_availableSizes), SIP_MLMETH_CAST(meth_QIcon_availableSizes), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QIcon_availableSizes)},
    {SIP_MLNAME_CAST(sipName_cacheKey), meth_QIcon_cacheKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QIcon_cacheKey)},
    {SIP_MLNAME_CAST(sipName_fallbackSearchPaths), meth_QIcon_fallbackSearchPaths, METH_VARARGS, SIP_MLDOC_CAST(doc_QIcon_fallbackSearchPaths)},
    {SIP_MLNAME_CAST(sipName_fallbackThemeName), meth_QIcon_fallbackThemeName, METH_VARARGS, SIP_MLDOC_CAST(doc_QIcon_fallbackThemeName)},
    {SIP_MLNAME_CAST(sipName_fromTheme), meth_QIcon_fromTheme, METH_VARARGS, SIP_MLDOC_CAST(doc_QIcon_fromTheme)},
    {SIP_MLNAME_CAST(sipName_hasThemeIcon), meth_QIcon_hasThemeIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QIcon_hasThemeIcon)},
    {SIP_MLNAME_CAST(sipName_isDetached), meth_QIcon_isDetached, METH_VARARGS, SIP_MLDOC_CAST(doc_QIcon_isDetached)},
    {SIP_MLNAME_CAST(sipName_isMask), meth_QIcon_isMask, METH_VARARGS, SIP_MLDOC_CAST(doc_QIcon_isMask)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QIcon_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QIcon_isNull)},
    {SIP_MLNAME_CAST(sipName_name), meth_QIcon_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QIcon_name)},
    {SIP_MLNAME_CAST(sipName_paint), SIP_MLMETH_CAST(meth_QIcon_paint), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QIcon_paint)},
    {SIP_MLNAME_CAST(sipName_pixmap), SIP_MLMETH_CAST(meth_QIcon_pixmap), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QIcon_pixmap)},
    {SIP_MLNAME_CAST(sipName_setFallbackSearchPaths), meth_QIcon_setFallbackSearchPaths, METH_VARARGS, SIP_MLDOC_CAST(doc_QIcon_setFallbackSearchPaths)},
    {SIP_MLNAME_CAST(sipName_setFallbackThemeName), meth_QIcon_setFallbackThemeName, METH_VARARGS, SIP_MLDOC_CAST(doc_QIcon_setFallbackThemeName)},
    {SIP_MLNAME_CAST(sipName_setIsMask), meth_QIcon_setIsMask, METH_VARARGS, SIP_MLDOC_CAST(doc_QIcon_setIsMask)},
    {SIP_MLNAME_CAST(sipName_setThemeName), meth_QIcon_setThemeName, METH_VARARGS, SIP_MLDOC_CAST(doc_QIcon_setThemeName)},
    {SIP_MLNAME_CAST(sipName_setThemeSearchPaths), meth_QIcon_setThemeSearchPaths, METH_VARARGS, SIP_MLDOC_CAST(doc_QIcon_setThemeSearchPaths)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QIcon_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QIcon_swap)},
    {SIP_MLNAME_CAST(sipName_themeName), meth_QIcon_themeName, METH_VARARGS, SIP_MLDOC_CAST(doc_QIcon_themeName)},
    {SIP_MLNAME_CAST(sipName_themeSearchPaths), meth_QIcon_themeSearchPaths, METH_VARARGS, SIP_MLDOC_CAST(doc_QIcon_themeSearchPaths)}
};

static sipEnumMemberDef enummembers_QIcon[] = {
    {sipName_Active, static_cast<int>( ::QIcon::Active), 59},
    {sipName_Disabled, static_cast<int>( ::QIcon::Disabled), 59},
    {sipName_Normal, static_cast<int>( ::QIcon::Normal), 59},
    {sipName_Off, static_cast<int>( ::QIcon::Off), 60},
    {sipName_On, static_cast<int>( ::QIcon::On), 60},
    {sipName_Selected, static_cast<int>( ::QIcon::Selected), 59},
};

PyDoc_STRVAR(doc_QIcon, "\1QIcon()\n"
"QIcon(QPixmap)\n"
"QIcon(QIcon)\n"
"QIcon(str)\n"
"QIcon(QIconEngine)\n"
"QIcon(Any)");


static pyqt5ClassPluginDef plugin_QIcon = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QIcon = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QIcon,
        {SIP_NULLPTR},
        &plugin_QIcon
    },
    {
        sipNameNr_QIcon,
        {0, 0, 1},
        23, methods_QIcon,
        6, enummembers_QIcon,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QIcon,
    -1,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QIcon,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QIcon,
    assign_QIcon,
    array_QIcon,
    copy_QIcon,
    release_QIcon,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qguiapplication.sip"
#include <qguiapplication.h>
#line 45325 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 45329 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qscreen.sip"
#include <qscreen.h>
#line 45332 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 45335 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 45338 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 45341 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 45344 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 45347 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 45350 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qinputmethod.sip"
#include <qinputmethod.h>
#line 45353 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qstylehints.sip"
#include <qstylehints.h>
#line 45356 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 45359 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qsessionmanager.sip"
#include <qsessionmanager.h>
#line 45362 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 45365 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 45368 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 45371 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qclipboard.sip"
#include <qclipboard.h>
#line 45374 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 45377 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 45380 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 45383 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qabstractnativeeventfilter.sip"
#include <qabstractnativeeventfilter.h>
#line 45386 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qabstracteventdispatcher.sip"
#include <qabstracteventdispatcher.h>
#line 45389 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qtranslator.sip"
#include <qtranslator.h>
#line 45392 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 45395 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qeventloop.sip"
#include <qeventloop.h>
#line 45398 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "sip/QtCore/qcoreapplication.sip"
#include <qcoreapplication.h>
#line 45401 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 45404 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 45407 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 45410 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 45413 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 45416 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 45419 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 45422 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 45425 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 45428 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 45431 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 45434 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 45437 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQGuiApplication : public  ::QGuiApplication
{
public:
    sipQGuiApplication(int&,char**,int);
    virtual ~sipQGuiApplication();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool notify( ::QObject*, ::QEvent*) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQGuiApplication(const sipQGuiApplication &);
    sipQGuiApplication &operator = (const sipQGuiApplication &);

    char sipPyMethods[8];
};

sipQGuiApplication::sipQGuiApplication(int& a0,char**a1,int a2):  ::QGuiApplication(a0,a1,a2), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGuiApplication::~sipQGuiApplication()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQGuiApplication::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QGuiApplication);

    return  ::QGuiApplication::metaObject();
}

int sipQGuiApplication::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QGuiApplication::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QGuiApplication,_c,_id,_a);

    return _id;
}

void *sipQGuiApplication::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QGuiApplication, _clname, &sipCpp) ? sipCpp :  ::QGuiApplication::qt_metacast(_clname));
}

void sipQGuiApplication::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QGuiApplication::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGuiApplication::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QGuiApplication::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGuiApplication::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QGuiApplication::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_1(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGuiApplication::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QGuiApplication::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_2(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGuiApplication::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QGuiApplication::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_3(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQGuiApplication::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QGuiApplication::eventFilter(a0,a1);

    extern bool sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_4(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQGuiApplication::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QGuiApplication::event(a0);

    extern bool sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_5(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQGuiApplication::notify( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_notify);

    if (!sipMeth)
        return  ::QGuiApplication::notify(a0,a1);

    extern bool sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_4(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}


PyDoc_STRVAR(doc_QGuiApplication_allWindows, "allWindows() -> List[QWindow]");

extern "C" {static PyObject *meth_QGuiApplication_allWindows(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_allWindows(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QWindowList*sipRes;

            sipRes = new  ::QWindowList( ::QGuiApplication::allWindows());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QWindow,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_allWindows, doc_QGuiApplication_allWindows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_topLevelWindows, "topLevelWindows() -> List[QWindow]");

extern "C" {static PyObject *meth_QGuiApplication_topLevelWindows(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_topLevelWindows(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QWindowList*sipRes;

            sipRes = new  ::QWindowList( ::QGuiApplication::topLevelWindows());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QWindow,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_topLevelWindows, doc_QGuiApplication_topLevelWindows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_topLevelAt, "topLevelAt(QPoint) -> QWindow");

extern "C" {static PyObject *meth_QGuiApplication_topLevelAt(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_topLevelAt(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QPoint, &a0))
        {
             ::QWindow*sipRes;

            sipRes =  ::QGuiApplication::topLevelAt(*a0);

            return sipConvertFromType(sipRes,sipType_QWindow,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_topLevelAt, doc_QGuiApplication_topLevelAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_platformName, "platformName() -> str");

extern "C" {static PyObject *meth_QGuiApplication_platformName(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_platformName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QGuiApplication::platformName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_platformName, doc_QGuiApplication_platformName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_focusWindow, "focusWindow() -> QWindow");

extern "C" {static PyObject *meth_QGuiApplication_focusWindow(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_focusWindow(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QWindow*sipRes;

            sipRes =  ::QGuiApplication::focusWindow();

            return sipConvertFromType(sipRes,sipType_QWindow,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_focusWindow, doc_QGuiApplication_focusWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_focusObject, "focusObject() -> QObject");

extern "C" {static PyObject *meth_QGuiApplication_focusObject(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_focusObject(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QObject*sipRes;

            sipRes =  ::QGuiApplication::focusObject();

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_focusObject, doc_QGuiApplication_focusObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_primaryScreen, "primaryScreen() -> QScreen");

extern "C" {static PyObject *meth_QGuiApplication_primaryScreen(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_primaryScreen(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QScreen*sipRes;

            sipRes =  ::QGuiApplication::primaryScreen();

            return sipConvertFromType(sipRes,sipType_QScreen,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_primaryScreen, doc_QGuiApplication_primaryScreen);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_screens, "screens() -> List[QScreen]");

extern "C" {static PyObject *meth_QGuiApplication_screens(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_screens(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList< ::QScreen*>*sipRes;

            sipRes = new QList< ::QScreen*>( ::QGuiApplication::screens());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QScreen,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_screens, doc_QGuiApplication_screens);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_overrideCursor, "overrideCursor() -> QCursor");

extern "C" {static PyObject *meth_QGuiApplication_overrideCursor(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_overrideCursor(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QCursor*sipRes;

            sipRes =  ::QGuiApplication::overrideCursor();

            return sipConvertFromType(sipRes,sipType_QCursor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_overrideCursor, doc_QGuiApplication_overrideCursor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_setOverrideCursor, "setOverrideCursor(Union[QCursor, Qt.CursorShape])");

extern "C" {static PyObject *meth_QGuiApplication_setOverrideCursor(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_setOverrideCursor(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCursor* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QCursor, &a0, &a0State))
        {
             ::QGuiApplication::setOverrideCursor(*a0);
            sipReleaseType(const_cast< ::QCursor *>(a0),sipType_QCursor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_setOverrideCursor, doc_QGuiApplication_setOverrideCursor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_changeOverrideCursor, "changeOverrideCursor(Union[QCursor, Qt.CursorShape])");

extern "C" {static PyObject *meth_QGuiApplication_changeOverrideCursor(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_changeOverrideCursor(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCursor* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QCursor, &a0, &a0State))
        {
             ::QGuiApplication::changeOverrideCursor(*a0);
            sipReleaseType(const_cast< ::QCursor *>(a0),sipType_QCursor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_changeOverrideCursor, doc_QGuiApplication_changeOverrideCursor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_restoreOverrideCursor, "restoreOverrideCursor()");

extern "C" {static PyObject *meth_QGuiApplication_restoreOverrideCursor(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_restoreOverrideCursor(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QGuiApplication::restoreOverrideCursor();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_restoreOverrideCursor, doc_QGuiApplication_restoreOverrideCursor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_font, "font() -> QFont");

extern "C" {static PyObject *meth_QGuiApplication_font(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_font(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QFont*sipRes;

            sipRes = new  ::QFont( ::QGuiApplication::font());

            return sipConvertFromNewType(sipRes,sipType_QFont,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_font, doc_QGuiApplication_font);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_setFont, "setFont(QFont)");

extern "C" {static PyObject *meth_QGuiApplication_setFont(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_setFont(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QFont, &a0))
        {
             ::QGuiApplication::setFont(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_setFont, doc_QGuiApplication_setFont);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_clipboard, "clipboard() -> QClipboard");

extern "C" {static PyObject *meth_QGuiApplication_clipboard(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_clipboard(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QClipboard*sipRes;

            sipRes =  ::QGuiApplication::clipboard();

            return sipConvertFromType(sipRes,sipType_QClipboard,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_clipboard, doc_QGuiApplication_clipboard);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_palette, "palette() -> QPalette");

extern "C" {static PyObject *meth_QGuiApplication_palette(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_palette(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QPalette*sipRes;

            sipRes = new  ::QPalette( ::QGuiApplication::palette());

            return sipConvertFromNewType(sipRes,sipType_QPalette,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_palette, doc_QGuiApplication_palette);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_setPalette, "setPalette(QPalette)");

extern "C" {static PyObject *meth_QGuiApplication_setPalette(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_setPalette(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPalette* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QPalette, &a0))
        {
             ::QGuiApplication::setPalette(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_setPalette, doc_QGuiApplication_setPalette);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_keyboardModifiers, "keyboardModifiers() -> Qt.KeyboardModifiers");

extern "C" {static PyObject *meth_QGuiApplication_keyboardModifiers(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_keyboardModifiers(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::Qt::KeyboardModifiers*sipRes;

            sipRes = new  ::Qt::KeyboardModifiers( ::QGuiApplication::keyboardModifiers());

            return sipConvertFromNewType(sipRes,sipType_Qt_KeyboardModifiers,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_keyboardModifiers, doc_QGuiApplication_keyboardModifiers);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_queryKeyboardModifiers, "queryKeyboardModifiers() -> Qt.KeyboardModifiers");

extern "C" {static PyObject *meth_QGuiApplication_queryKeyboardModifiers(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_queryKeyboardModifiers(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::Qt::KeyboardModifiers*sipRes;

            sipRes = new  ::Qt::KeyboardModifiers( ::QGuiApplication::queryKeyboardModifiers());

            return sipConvertFromNewType(sipRes,sipType_Qt_KeyboardModifiers,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_queryKeyboardModifiers, doc_QGuiApplication_queryKeyboardModifiers);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_mouseButtons, "mouseButtons() -> Qt.MouseButtons");

extern "C" {static PyObject *meth_QGuiApplication_mouseButtons(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_mouseButtons(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::Qt::MouseButtons*sipRes;

            sipRes = new  ::Qt::MouseButtons( ::QGuiApplication::mouseButtons());

            return sipConvertFromNewType(sipRes,sipType_Qt_MouseButtons,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_mouseButtons, doc_QGuiApplication_mouseButtons);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_setLayoutDirection, "setLayoutDirection(Qt.LayoutDirection)");

extern "C" {static PyObject *meth_QGuiApplication_setLayoutDirection(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_setLayoutDirection(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::LayoutDirection a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_Qt_LayoutDirection, &a0))
        {
             ::QGuiApplication::setLayoutDirection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_setLayoutDirection, doc_QGuiApplication_setLayoutDirection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_layoutDirection, "layoutDirection() -> Qt.LayoutDirection");

extern "C" {static PyObject *meth_QGuiApplication_layoutDirection(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_layoutDirection(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::Qt::LayoutDirection sipRes;

            sipRes =  ::QGuiApplication::layoutDirection();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_LayoutDirection);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_layoutDirection, doc_QGuiApplication_layoutDirection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_isRightToLeft, "isRightToLeft() -> bool");

extern "C" {static PyObject *meth_QGuiApplication_isRightToLeft(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_isRightToLeft(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes =  ::QGuiApplication::isRightToLeft();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_isRightToLeft, doc_QGuiApplication_isRightToLeft);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_isLeftToRight, "isLeftToRight() -> bool");

extern "C" {static PyObject *meth_QGuiApplication_isLeftToRight(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_isLeftToRight(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes =  ::QGuiApplication::isLeftToRight();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_isLeftToRight, doc_QGuiApplication_isLeftToRight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_setDesktopSettingsAware, "setDesktopSettingsAware(bool)");

extern "C" {static PyObject *meth_QGuiApplication_setDesktopSettingsAware(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_setDesktopSettingsAware(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "b", &a0))
        {
             ::QGuiApplication::setDesktopSettingsAware(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_setDesktopSettingsAware, doc_QGuiApplication_setDesktopSettingsAware);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_desktopSettingsAware, "desktopSettingsAware() -> bool");

extern "C" {static PyObject *meth_QGuiApplication_desktopSettingsAware(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_desktopSettingsAware(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes =  ::QGuiApplication::desktopSettingsAware();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_desktopSettingsAware, doc_QGuiApplication_desktopSettingsAware);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_setQuitOnLastWindowClosed, "setQuitOnLastWindowClosed(bool)");

extern "C" {static PyObject *meth_QGuiApplication_setQuitOnLastWindowClosed(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_setQuitOnLastWindowClosed(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "b", &a0))
        {
             ::QGuiApplication::setQuitOnLastWindowClosed(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_setQuitOnLastWindowClosed, doc_QGuiApplication_setQuitOnLastWindowClosed);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_quitOnLastWindowClosed, "quitOnLastWindowClosed() -> bool");

extern "C" {static PyObject *meth_QGuiApplication_quitOnLastWindowClosed(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_quitOnLastWindowClosed(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes =  ::QGuiApplication::quitOnLastWindowClosed();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_quitOnLastWindowClosed, doc_QGuiApplication_quitOnLastWindowClosed);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_exec_, "exec_() -> int");

extern "C" {static PyObject *meth_QGuiApplication_exec_(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_exec_(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            sipCallHook("__pyQtPreEventLoopHook__");

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QGuiApplication::exec();
            Py_END_ALLOW_THREADS


            sipCallHook("__pyQtPostEventLoopHook__");
            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_exec_, doc_QGuiApplication_exec_);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_exec, "exec() -> int");

extern "C" {static PyObject *meth_QGuiApplication_exec(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_exec(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            sipCallHook("__pyQtPreEventLoopHook__");

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QGuiApplication::exec();
            Py_END_ALLOW_THREADS


            sipCallHook("__pyQtPostEventLoopHook__");
            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_exec, doc_QGuiApplication_exec);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_notify, "notify(self, QObject, QEvent) -> bool");

extern "C" {static PyObject *meth_QGuiApplication_notify(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_notify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QObject* a0;
         ::QEvent* a1;
         ::QGuiApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8", &sipSelf, sipType_QGuiApplication, &sipCpp, sipType_QObject, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QGuiApplication::notify(a0,a1) : sipCpp->notify(a0,a1));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_notify, doc_QGuiApplication_notify);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_setApplicationDisplayName, "setApplicationDisplayName(str)");

extern "C" {static PyObject *meth_QGuiApplication_setApplicationDisplayName(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_setApplicationDisplayName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QGuiApplication::setApplicationDisplayName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_setApplicationDisplayName, doc_QGuiApplication_setApplicationDisplayName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_applicationDisplayName, "applicationDisplayName() -> str");

extern "C" {static PyObject *meth_QGuiApplication_applicationDisplayName(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_applicationDisplayName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QGuiApplication::applicationDisplayName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_applicationDisplayName, doc_QGuiApplication_applicationDisplayName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_modalWindow, "modalWindow() -> QWindow");

extern "C" {static PyObject *meth_QGuiApplication_modalWindow(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_modalWindow(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QWindow*sipRes;

            sipRes =  ::QGuiApplication::modalWindow();

            return sipConvertFromType(sipRes,sipType_QWindow,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_modalWindow, doc_QGuiApplication_modalWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_styleHints, "styleHints() -> QStyleHints");

extern "C" {static PyObject *meth_QGuiApplication_styleHints(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_styleHints(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QStyleHints*sipRes;

            sipRes =  ::QGuiApplication::styleHints();

            return sipConvertFromType(sipRes,sipType_QStyleHints,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_styleHints, doc_QGuiApplication_styleHints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_inputMethod, "inputMethod() -> QInputMethod");

extern "C" {static PyObject *meth_QGuiApplication_inputMethod(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_inputMethod(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QInputMethod*sipRes;

            sipRes =  ::QGuiApplication::inputMethod();

            return sipConvertFromType(sipRes,sipType_QInputMethod,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_inputMethod, doc_QGuiApplication_inputMethod);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_devicePixelRatio, "devicePixelRatio(self) -> float");

extern "C" {static PyObject *meth_QGuiApplication_devicePixelRatio(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_devicePixelRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGuiApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGuiApplication, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->devicePixelRatio();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_devicePixelRatio, doc_QGuiApplication_devicePixelRatio);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_isSessionRestored, "isSessionRestored(self) -> bool");

extern "C" {static PyObject *meth_QGuiApplication_isSessionRestored(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_isSessionRestored(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGuiApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGuiApplication, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSessionRestored();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_isSessionRestored, doc_QGuiApplication_isSessionRestored);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_sessionId, "sessionId(self) -> str");

extern "C" {static PyObject *meth_QGuiApplication_sessionId(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_sessionId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGuiApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGuiApplication, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->sessionId());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_sessionId, doc_QGuiApplication_sessionId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_sessionKey, "sessionKey(self) -> str");

extern "C" {static PyObject *meth_QGuiApplication_sessionKey(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_sessionKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGuiApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGuiApplication, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->sessionKey());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_sessionKey, doc_QGuiApplication_sessionKey);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_isSavingSession, "isSavingSession(self) -> bool");

extern "C" {static PyObject *meth_QGuiApplication_isSavingSession(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_isSavingSession(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGuiApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGuiApplication, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSavingSession();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_isSavingSession, doc_QGuiApplication_isSavingSession);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_applicationState, "applicationState() -> Qt.ApplicationState");

extern "C" {static PyObject *meth_QGuiApplication_applicationState(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_applicationState(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::Qt::ApplicationState sipRes;

            sipRes =  ::QGuiApplication::applicationState();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_ApplicationState);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_applicationState, doc_QGuiApplication_applicationState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_sync, "sync()");

extern "C" {static PyObject *meth_QGuiApplication_sync(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_sync(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QGuiApplication::sync();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_sync, doc_QGuiApplication_sync);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_setWindowIcon, "setWindowIcon(QIcon)");

extern "C" {static PyObject *meth_QGuiApplication_setWindowIcon(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_setWindowIcon(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QIcon* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QIcon, &a0))
        {
             ::QGuiApplication::setWindowIcon(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_setWindowIcon, doc_QGuiApplication_setWindowIcon);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_windowIcon, "windowIcon() -> QIcon");

extern "C" {static PyObject *meth_QGuiApplication_windowIcon(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_windowIcon(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QIcon*sipRes;

            sipRes = new  ::QIcon( ::QGuiApplication::windowIcon());

            return sipConvertFromNewType(sipRes,sipType_QIcon,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_windowIcon, doc_QGuiApplication_windowIcon);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QGuiApplication_event(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QGuiApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGuiApplication, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QGuiApplication::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_event, doc_QGuiApplication_event);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_isFallbackSessionManagementEnabled, "isFallbackSessionManagementEnabled() -> bool");

extern "C" {static PyObject *meth_QGuiApplication_isFallbackSessionManagementEnabled(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_isFallbackSessionManagementEnabled(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes =  ::QGuiApplication::isFallbackSessionManagementEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_isFallbackSessionManagementEnabled, doc_QGuiApplication_isFallbackSessionManagementEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_setFallbackSessionManagementEnabled, "setFallbackSessionManagementEnabled(bool)");

extern "C" {static PyObject *meth_QGuiApplication_setFallbackSessionManagementEnabled(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_setFallbackSessionManagementEnabled(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "b", &a0))
        {
             ::QGuiApplication::setFallbackSessionManagementEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_setFallbackSessionManagementEnabled, doc_QGuiApplication_setFallbackSessionManagementEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_setDesktopFileName, "setDesktopFileName(str)");

extern "C" {static PyObject *meth_QGuiApplication_setDesktopFileName(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_setDesktopFileName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QGuiApplication::setDesktopFileName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_setDesktopFileName, doc_QGuiApplication_setDesktopFileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_desktopFileName, "desktopFileName() -> str");

extern "C" {static PyObject *meth_QGuiApplication_desktopFileName(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_desktopFileName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QGuiApplication::desktopFileName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_desktopFileName, doc_QGuiApplication_desktopFileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGuiApplication_screenAt, "screenAt(QPoint) -> QScreen");

extern "C" {static PyObject *meth_QGuiApplication_screenAt(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_screenAt(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QPoint, &a0))
        {
             ::QScreen*sipRes;

            sipRes =  ::QGuiApplication::screenAt(*a0);

            return sipConvertFromType(sipRes,sipType_QScreen,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_screenAt, doc_QGuiApplication_screenAt);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QGuiApplication(void *, const sipTypeDef *);}
static void *cast_QGuiApplication(void *sipCppV, const sipTypeDef *targetType)
{
     ::QGuiApplication *sipCpp = reinterpret_cast< ::QGuiApplication *>(sipCppV);

    if (targetType == sipType_QCoreApplication)
        return static_cast< ::QCoreApplication *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGuiApplication(void *, int);}
static void release_QGuiApplication(void *sipCppV, int)
{
     ::QGuiApplication *sipCpp = reinterpret_cast< ::QGuiApplication *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QGuiApplication(sipSimpleWrapper *);}
static void dealloc_QGuiApplication(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQGuiApplication *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QGuiApplication(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QGuiApplication(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QGuiApplication(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQGuiApplication *sipCpp = SIP_NULLPTR;

    {
        PyObject * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "T", &PyList_Type, &a0))
        {
            int sipIsErr = 0;

#line 151 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qguiapplication.sip"
        // The Python interface is a list of argument strings that is modified.
        
        int argc;
        char **argv;
        
        // Convert the list.
        if ((argv = pyqt5_qtgui_from_argv_list(a0, argc)) == NULL)
            sipIsErr = 1;
        else
        {
            // Create it now the arguments are right.
            static int nargc;
            nargc = argc;
        
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQGuiApplication(nargc, argv, QCoreApplication::ApplicationFlags);
            Py_END_ALLOW_THREADS
        
            // Now modify the original list.
            pyqt5_qtgui_update_argv_list(a0, argc, argv);
        }
#line 47103 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipIsErr)
            {
                if (sipUnused)
                {
                    Py_XDECREF(*sipUnused);
                }

                sipAddException(sipErrorFail, sipParseErr);
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            sipCallHook("__pyQtQAppHook__");

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGuiApplication[] = {{4, 0, 1}};


static PyMethodDef methods_QGuiApplication[] = {
    {SIP_MLNAME_CAST(sipName_allWindows), meth_QGuiApplication_allWindows, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_allWindows)},
    {SIP_MLNAME_CAST(sipName_applicationDisplayName), meth_QGuiApplication_applicationDisplayName, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_applicationDisplayName)},
    {SIP_MLNAME_CAST(sipName_applicationState), meth_QGuiApplication_applicationState, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_applicationState)},
    {SIP_MLNAME_CAST(sipName_changeOverrideCursor), meth_QGuiApplication_changeOverrideCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_changeOverrideCursor)},
    {SIP_MLNAME_CAST(sipName_clipboard), meth_QGuiApplication_clipboard, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_clipboard)},
    {SIP_MLNAME_CAST(sipName_desktopFileName), meth_QGuiApplication_desktopFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_desktopFileName)},
    {SIP_MLNAME_CAST(sipName_desktopSettingsAware), meth_QGuiApplication_desktopSettingsAware, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_desktopSettingsAware)},
    {SIP_MLNAME_CAST(sipName_devicePixelRatio), meth_QGuiApplication_devicePixelRatio, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_devicePixelRatio)},
    {SIP_MLNAME_CAST(sipName_event), meth_QGuiApplication_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_event)},
    {SIP_MLNAME_CAST(sipName_exec), meth_QGuiApplication_exec, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_exec)},
    {SIP_MLNAME_CAST(sipName_exec_), meth_QGuiApplication_exec_, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_exec_)},
    {SIP_MLNAME_CAST(sipName_focusObject), meth_QGuiApplication_focusObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_focusObject)},
    {SIP_MLNAME_CAST(sipName_focusWindow), meth_QGuiApplication_focusWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_focusWindow)},
    {SIP_MLNAME_CAST(sipName_font), meth_QGuiApplication_font, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_font)},
    {SIP_MLNAME_CAST(sipName_inputMethod), meth_QGuiApplication_inputMethod, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_inputMethod)},
    {SIP_MLNAME_CAST(sipName_isFallbackSessionManagementEnabled), meth_QGuiApplication_isFallbackSessionManagementEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_isFallbackSessionManagementEnabled)},
    {SIP_MLNAME_CAST(sipName_isLeftToRight), meth_QGuiApplication_isLeftToRight, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_isLeftToRight)},
    {SIP_MLNAME_CAST(sipName_isRightToLeft), meth_QGuiApplication_isRightToLeft, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_isRightToLeft)},
    {SIP_MLNAME_CAST(sipName_isSavingSession), meth_QGuiApplication_isSavingSession, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_isSavingSession)},
    {SIP_MLNAME_CAST(sipName_isSessionRestored), meth_QGuiApplication_isSessionRestored, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_isSessionRestored)},
    {SIP_MLNAME_CAST(sipName_keyboardModifiers), meth_QGuiApplication_keyboardModifiers, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_keyboardModifiers)},
    {SIP_MLNAME_CAST(sipName_layoutDirection), meth_QGuiApplication_layoutDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_layoutDirection)},
    {SIP_MLNAME_CAST(sipName_modalWindow), meth_QGuiApplication_modalWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_modalWindow)},
    {SIP_MLNAME_CAST(sipName_mouseButtons), meth_QGuiApplication_mouseButtons, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_mouseButtons)},
    {SIP_MLNAME_CAST(sipName_notify), meth_QGuiApplication_notify, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_notify)},
    {SIP_MLNAME_CAST(sipName_overrideCursor), meth_QGuiApplication_overrideCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_overrideCursor)},
    {SIP_MLNAME_CAST(sipName_palette), meth_QGuiApplication_palette, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_palette)},
    {SIP_MLNAME_CAST(sipName_platformName), meth_QGuiApplication_platformName, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_platformName)},
    {SIP_MLNAME_CAST(sipName_primaryScreen), meth_QGuiApplication_primaryScreen, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_primaryScreen)},
    {SIP_MLNAME_CAST(sipName_queryKeyboardModifiers), meth_QGuiApplication_queryKeyboardModifiers, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_queryKeyboardModifiers)},
    {SIP_MLNAME_CAST(sipName_quitOnLastWindowClosed), meth_QGuiApplication_quitOnLastWindowClosed, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_quitOnLastWindowClosed)},
    {SIP_MLNAME_CAST(sipName_restoreOverrideCursor), meth_QGuiApplication_restoreOverrideCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_restoreOverrideCursor)},
    {SIP_MLNAME_CAST(sipName_screenAt), meth_QGuiApplication_screenAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_screenAt)},
    {SIP_MLNAME_CAST(sipName_screens), meth_QGuiApplication_screens, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_screens)},
    {SIP_MLNAME_CAST(sipName_sessionId), meth_QGuiApplication_sessionId, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_sessionId)},
    {SIP_MLNAME_CAST(sipName_sessionKey), meth_QGuiApplication_sessionKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_sessionKey)},
    {SIP_MLNAME_CAST(sipName_setApplicationDisplayName), meth_QGuiApplication_setApplicationDisplayName, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_setApplicationDisplayName)},
    {SIP_MLNAME_CAST(sipName_setDesktopFileName), meth_QGuiApplication_setDesktopFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_setDesktopFileName)},
    {SIP_MLNAME_CAST(sipName_setDesktopSettingsAware), meth_QGuiApplication_setDesktopSettingsAware, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_setDesktopSettingsAware)},
    {SIP_MLNAME_CAST(sipName_setFallbackSessionManagementEnabled), meth_QGuiApplication_setFallbackSessionManagementEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_setFallbackSessionManagementEnabled)},
    {SIP_MLNAME_CAST(sipName_setFont), meth_QGuiApplication_setFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_setFont)},
    {SIP_MLNAME_CAST(sipName_setLayoutDirection), meth_QGuiApplication_setLayoutDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_setLayoutDirection)},
    {SIP_MLNAME_CAST(sipName_setOverrideCursor), meth_QGuiApplication_setOverrideCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_setOverrideCursor)},
    {SIP_MLNAME_CAST(sipName_setPalette), meth_QGuiApplication_setPalette, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_setPalette)},
    {SIP_MLNAME_CAST(sipName_setQuitOnLastWindowClosed), meth_QGuiApplication_setQuitOnLastWindowClosed, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_setQuitOnLastWindowClosed)},
    {SIP_MLNAME_CAST(sipName_setWindowIcon), meth_QGuiApplication_setWindowIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_setWindowIcon)},
    {SIP_MLNAME_CAST(sipName_styleHints), meth_QGuiApplication_styleHints, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_styleHints)},
    {SIP_MLNAME_CAST(sipName_sync), meth_QGuiApplication_sync, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_sync)},
    {SIP_MLNAME_CAST(sipName_topLevelAt), meth_QGuiApplication_topLevelAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_topLevelAt)},
    {SIP_MLNAME_CAST(sipName_topLevelWindows), meth_QGuiApplication_topLevelWindows, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_topLevelWindows)},
    {SIP_MLNAME_CAST(sipName_windowIcon), meth_QGuiApplication_windowIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_windowIcon)}
};

PyDoc_STRVAR(doc_QGuiApplication, "\1QGuiApplication(List[str])");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QGuiApplication[] = {
    {"fontChanged(QFont)", "\1fontChanged(self, QFont)", SIP_NULLPTR, SIP_NULLPTR},
    {"primaryScreenChanged(QScreen*)", "\1primaryScreenChanged(self, QScreen)", SIP_NULLPTR, SIP_NULLPTR},
    {"paletteChanged(QPalette)", "\1paletteChanged(self, QPalette)", SIP_NULLPTR, SIP_NULLPTR},
    {"layoutDirectionChanged(Qt::LayoutDirection)", "\1layoutDirectionChanged(self, Qt.LayoutDirection)", SIP_NULLPTR, SIP_NULLPTR},
    {"screenRemoved(QScreen*)", "\1screenRemoved(self, QScreen)", SIP_NULLPTR, SIP_NULLPTR},
    {"applicationDisplayNameChanged()", "\1applicationDisplayNameChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"applicationStateChanged(Qt::ApplicationState)", "\1applicationStateChanged(self, Qt.ApplicationState)", SIP_NULLPTR, SIP_NULLPTR},
    {"focusWindowChanged(QWindow*)", "\1focusWindowChanged(self, QWindow)", SIP_NULLPTR, SIP_NULLPTR},
    {"saveStateRequest(QSessionManager&)", "\1saveStateRequest(self, QSessionManager)", SIP_NULLPTR, SIP_NULLPTR},
    {"commitDataRequest(QSessionManager&)", "\1commitDataRequest(self, QSessionManager)", SIP_NULLPTR, SIP_NULLPTR},
    {"focusObjectChanged(QObject*)", "\1focusObjectChanged(self, QObject)", SIP_NULLPTR, SIP_NULLPTR},
    {"lastWindowClosed()", "\1lastWindowClosed(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"screenAdded(QScreen*)", "\1screenAdded(self, QScreen)", SIP_NULLPTR, SIP_NULLPTR},
    {"fontDatabaseChanged()", "\1fontDatabaseChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QGuiApplication = {
    & ::QGuiApplication::staticMetaObject,
    0,
    signals_QGuiApplication,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QGuiApplication = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QGuiApplication,
        {SIP_NULLPTR},
        &plugin_QGuiApplication
    },
    {
        sipNameNr_QGuiApplication,
        {0, 0, 1},
        51, methods_QGuiApplication,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QGuiApplication,
    -1,
    -1,
    supers_QGuiApplication,
    SIP_NULLPTR,
    init_type_QGuiApplication,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QGuiApplication,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QGuiApplication,
    cast_QGuiApplication,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qglyphrun.sip"
#include <qglyphrun.h>
#line 47269 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qglyphrun.sip"
#include <qglyphrun.h>
#line 47273 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


extern "C" {static long slot_QGlyphRun_GlyphRunFlags___hash__(PyObject *);}
static long slot_QGlyphRun_GlyphRunFlags___hash__(PyObject *sipSelf)
{
     ::QGlyphRun::GlyphRunFlags *sipCpp = reinterpret_cast< ::QGlyphRun::GlyphRunFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QGlyphRun_GlyphRunFlags));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QGlyphRun::GlyphRunFlags::Int();
#line 47291 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QGlyphRun_GlyphRunFlags___bool__(PyObject *);}
static int slot_QGlyphRun_GlyphRunFlags___bool__(PyObject *sipSelf)
{
     ::QGlyphRun::GlyphRunFlags *sipCpp = reinterpret_cast< ::QGlyphRun::GlyphRunFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QGlyphRun_GlyphRunFlags));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QGlyphRun::GlyphRunFlags::Int() != 0);
#line 47316 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QGlyphRun_GlyphRunFlags___ne__(PyObject *,PyObject *);}
static PyObject *slot_QGlyphRun_GlyphRunFlags___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QGlyphRun::GlyphRunFlags *sipCpp = reinterpret_cast< ::QGlyphRun::GlyphRunFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QGlyphRun_GlyphRunFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGlyphRun::GlyphRunFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QGlyphRun_GlyphRunFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QGlyphRun::GlyphRunFlags::Int() != a0->operator QGlyphRun::GlyphRunFlags::Int());
#line 47346 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
            sipReleaseType(const_cast< ::QGlyphRun::GlyphRunFlags *>(a0),sipType_QGlyphRun_GlyphRunFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QGlyphRun_GlyphRunFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QGlyphRun_GlyphRunFlags___eq__(PyObject *,PyObject *);}
static PyObject *slot_QGlyphRun_GlyphRunFlags___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QGlyphRun::GlyphRunFlags *sipCpp = reinterpret_cast< ::QGlyphRun::GlyphRunFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QGlyphRun_GlyphRunFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGlyphRun::GlyphRunFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QGlyphRun_GlyphRunFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QGlyphRun::GlyphRunFlags::Int() == a0->operator QGlyphRun::GlyphRunFlags::Int());
#line 47382 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
            sipReleaseType(const_cast< ::QGlyphRun::GlyphRunFlags *>(a0),sipType_QGlyphRun_GlyphRunFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QGlyphRun_GlyphRunFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QGlyphRun_GlyphRunFlags___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QGlyphRun_GlyphRunFlags___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QGlyphRun_GlyphRunFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QGlyphRun::GlyphRunFlags *sipCpp = reinterpret_cast< ::QGlyphRun::GlyphRunFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QGlyphRun_GlyphRunFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QGlyphRun::GlyphRunFlags(*sipCpp ^ a0);
#line 47421 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QGlyphRun_GlyphRunFlags___xor__(PyObject *,PyObject *);}
static PyObject *slot_QGlyphRun_GlyphRunFlags___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QGlyphRun::GlyphRunFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QGlyphRun_GlyphRunFlags, &a0, &a0State, &a1))
        {
             ::QGlyphRun::GlyphRunFlags*sipRes;

            sipRes = new  ::QGlyphRun::GlyphRunFlags((*a0 ^ a1));
            sipReleaseType(a0,sipType_QGlyphRun_GlyphRunFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QGlyphRun_GlyphRunFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QGlyphRun_GlyphRunFlags___ior__(PyObject *,PyObject *);}
static PyObject *slot_QGlyphRun_GlyphRunFlags___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QGlyphRun_GlyphRunFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QGlyphRun::GlyphRunFlags *sipCpp = reinterpret_cast< ::QGlyphRun::GlyphRunFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QGlyphRun_GlyphRunFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QGlyphRun::GlyphRunFlags(*sipCpp | a0);
#line 47493 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QGlyphRun_GlyphRunFlags___or__(PyObject *,PyObject *);}
static PyObject *slot_QGlyphRun_GlyphRunFlags___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QGlyphRun::GlyphRunFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QGlyphRun_GlyphRunFlags, &a0, &a0State, &a1))
        {
             ::QGlyphRun::GlyphRunFlags*sipRes;

            sipRes = new  ::QGlyphRun::GlyphRunFlags((*a0 | a1));
            sipReleaseType(a0,sipType_QGlyphRun_GlyphRunFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QGlyphRun_GlyphRunFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QGlyphRun_GlyphRunFlags___iand__(PyObject *,PyObject *);}
static PyObject *slot_QGlyphRun_GlyphRunFlags___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QGlyphRun_GlyphRunFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QGlyphRun::GlyphRunFlags *sipCpp = reinterpret_cast< ::QGlyphRun::GlyphRunFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QGlyphRun_GlyphRunFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QGlyphRun::GlyphRunFlags::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QGlyphRun_GlyphRunFlags___and__(PyObject *,PyObject *);}
static PyObject *slot_QGlyphRun_GlyphRunFlags___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QGlyphRun::GlyphRunFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QGlyphRun_GlyphRunFlags, &a0, &a0State, &a1))
        {
             ::QGlyphRun::GlyphRunFlags*sipRes;

            sipRes = new  ::QGlyphRun::GlyphRunFlags((*a0 & a1));
            sipReleaseType(a0,sipType_QGlyphRun_GlyphRunFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QGlyphRun_GlyphRunFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QGlyphRun_GlyphRunFlags___invert__(PyObject *);}
static PyObject *slot_QGlyphRun_GlyphRunFlags___invert__(PyObject *sipSelf)
{
     ::QGlyphRun::GlyphRunFlags *sipCpp = reinterpret_cast< ::QGlyphRun::GlyphRunFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QGlyphRun_GlyphRunFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QGlyphRun::GlyphRunFlags*sipRes;

            sipRes = new  ::QGlyphRun::GlyphRunFlags(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QGlyphRun_GlyphRunFlags,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QGlyphRun_GlyphRunFlags___int__(PyObject *);}
static PyObject *slot_QGlyphRun_GlyphRunFlags___int__(PyObject *sipSelf)
{
     ::QGlyphRun::GlyphRunFlags *sipCpp = reinterpret_cast< ::QGlyphRun::GlyphRunFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QGlyphRun_GlyphRunFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGlyphRun_GlyphRunFlags(void *, int);}
static void release_QGlyphRun_GlyphRunFlags(void *sipCppV, int)
{
    delete reinterpret_cast< ::QGlyphRun::GlyphRunFlags *>(sipCppV);
}


extern "C" {static void assign_QGlyphRun_GlyphRunFlags(void *, SIP_SSIZE_T, void *);}
static void assign_QGlyphRun_GlyphRunFlags(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QGlyphRun::GlyphRunFlags *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QGlyphRun::GlyphRunFlags *>(sipSrc);
}


extern "C" {static void *array_QGlyphRun_GlyphRunFlags(SIP_SSIZE_T);}
static void *array_QGlyphRun_GlyphRunFlags(SIP_SSIZE_T sipNrElem)
{
    return new  ::QGlyphRun::GlyphRunFlags[sipNrElem];
}


extern "C" {static void *copy_QGlyphRun_GlyphRunFlags(const void *, SIP_SSIZE_T);}
static void *copy_QGlyphRun_GlyphRunFlags(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QGlyphRun::GlyphRunFlags(reinterpret_cast<const  ::QGlyphRun::GlyphRunFlags *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QGlyphRun_GlyphRunFlags(sipSimpleWrapper *);}
static void dealloc_QGlyphRun_GlyphRunFlags(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QGlyphRun_GlyphRunFlags(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QGlyphRun_GlyphRunFlags(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QGlyphRun_GlyphRunFlags(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QGlyphRun::GlyphRunFlags *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QGlyphRun::GlyphRunFlags();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QGlyphRun::GlyphRunFlags(a0);

            return sipCpp;
        }
    }

    {
        const  ::QGlyphRun::GlyphRunFlags* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QGlyphRun_GlyphRunFlags, &a0, &a0State))
        {
            sipCpp = new  ::QGlyphRun::GlyphRunFlags(*a0);
            sipReleaseType(const_cast< ::QGlyphRun::GlyphRunFlags *>(a0),sipType_QGlyphRun_GlyphRunFlags,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QGlyphRun_GlyphRunFlags(PyObject *, void **, int *, PyObject *);}
static int convertTo_QGlyphRun_GlyphRunFlags(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QGlyphRun::GlyphRunFlags **sipCppPtr = reinterpret_cast< ::QGlyphRun::GlyphRunFlags **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QGlyphRun::GlyphRunFlags is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QGlyphRun_GlyphRunFlag)) ||
            sipCanConvertToType(sipPy, sipType_QGlyphRun_GlyphRunFlags, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QGlyphRun_GlyphRunFlag)))
{
    *sipCppPtr = new QGlyphRun::GlyphRunFlags(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QGlyphRun::GlyphRunFlags *>(sipConvertToType(sipPy, sipType_QGlyphRun_GlyphRunFlags, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 47761 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QGlyphRun_GlyphRunFlags[] = {
    {(void *)slot_QGlyphRun_GlyphRunFlags___hash__, hash_slot},
    {(void *)slot_QGlyphRun_GlyphRunFlags___bool__, bool_slot},
    {(void *)slot_QGlyphRun_GlyphRunFlags___ne__, ne_slot},
    {(void *)slot_QGlyphRun_GlyphRunFlags___eq__, eq_slot},
    {(void *)slot_QGlyphRun_GlyphRunFlags___ixor__, ixor_slot},
    {(void *)slot_QGlyphRun_GlyphRunFlags___xor__, xor_slot},
    {(void *)slot_QGlyphRun_GlyphRunFlags___ior__, ior_slot},
    {(void *)slot_QGlyphRun_GlyphRunFlags___or__, or_slot},
    {(void *)slot_QGlyphRun_GlyphRunFlags___iand__, iand_slot},
    {(void *)slot_QGlyphRun_GlyphRunFlags___and__, and_slot},
    {(void *)slot_QGlyphRun_GlyphRunFlags___invert__, invert_slot},
    {(void *)slot_QGlyphRun_GlyphRunFlags___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QGlyphRun_GlyphRunFlags, "\1QGlyphRun.GlyphRunFlags()\n"
"QGlyphRun.GlyphRunFlags(Union[QGlyphRun.GlyphRunFlags, QGlyphRun.GlyphRunFlag])\n"
"QGlyphRun.GlyphRunFlags(QGlyphRun.GlyphRunFlags)");


static pyqt5ClassPluginDef plugin_QGlyphRun_GlyphRunFlags = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QGlyphRun_GlyphRunFlags = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QGlyphRun__GlyphRunFlags,
        {SIP_NULLPTR},
        &plugin_QGlyphRun_GlyphRunFlags
    },
    {
        sipNameNr_GlyphRunFlags,
        {46, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QGlyphRun_GlyphRunFlags,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QGlyphRun_GlyphRunFlags,
    init_type_QGlyphRun_GlyphRunFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QGlyphRun_GlyphRunFlags,
    assign_QGlyphRun_GlyphRunFlags,
    array_QGlyphRun_GlyphRunFlags,
    copy_QGlyphRun_GlyphRunFlags,
    release_QGlyphRun_GlyphRunFlags,
    SIP_NULLPTR,
    convertTo_QGlyphRun_GlyphRunFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qglyphrun.sip"
#include <qglyphrun.h>
#line 47849 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 47853 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qglyphrun.sip"
#include <qglyphrun.h>
#line 47856 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 47859 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 47862 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpygui_qvector.sip"
#include <qvector.h>
#line 47865 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qrawfont.sip"
#include <qrawfont.h>
#line 47868 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QGlyphRun_rawFont, "rawFont(self) -> QRawFont");

extern "C" {static PyObject *meth_QGlyphRun_rawFont(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_rawFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGlyphRun, &sipCpp))
        {
             ::QRawFont*sipRes;

            sipRes = new  ::QRawFont(sipCpp->rawFont());

            return sipConvertFromNewType(sipRes,sipType_QRawFont,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_rawFont, doc_QGlyphRun_rawFont);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_setRawFont, "setRawFont(self, QRawFont)");

extern "C" {static PyObject *meth_QGlyphRun_setRawFont(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_setRawFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont* a0;
         ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGlyphRun, &sipCpp, sipType_QRawFont, &a0))
        {
            sipCpp->setRawFont(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_setRawFont, doc_QGlyphRun_setRawFont);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_glyphIndexes, "glyphIndexes(self) -> List[int]");

extern "C" {static PyObject *meth_QGlyphRun_glyphIndexes(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_glyphIndexes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGlyphRun, &sipCpp))
        {
             ::QVector<uint>*sipRes;

            sipRes = new  ::QVector<uint>(sipCpp->glyphIndexes());

            return sipConvertFromNewType(sipRes,sipType_QVector_1900,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_glyphIndexes, doc_QGlyphRun_glyphIndexes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_setGlyphIndexes, "setGlyphIndexes(self, Iterable[int])");

extern "C" {static PyObject *meth_QGlyphRun_setGlyphIndexes(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_setGlyphIndexes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector<uint>* a0;
        int a0State = 0;
         ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGlyphRun, &sipCpp, sipType_QVector_1900,&a0, &a0State))
        {
            sipCpp->setGlyphIndexes(*a0);
            sipReleaseType(const_cast< ::QVector<uint> *>(a0),sipType_QVector_1900,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_setGlyphIndexes, doc_QGlyphRun_setGlyphIndexes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_positions, "positions(self) -> List[QPointF]");

extern "C" {static PyObject *meth_QGlyphRun_positions(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_positions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGlyphRun, &sipCpp))
        {
            QVector< ::QPointF>*sipRes;

            sipRes = new QVector< ::QPointF>(sipCpp->positions());

            return sipConvertFromNewType(sipRes,sipType_QVector_0100QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_positions, doc_QGlyphRun_positions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_setPositions, "setPositions(self, Iterable[Union[QPointF, QPoint]])");

extern "C" {static PyObject *meth_QGlyphRun_setPositions(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_setPositions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QVector< ::QPointF>* a0;
        int a0State = 0;
         ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGlyphRun, &sipCpp, sipType_QVector_0100QPointF,&a0, &a0State))
        {
            sipCpp->setPositions(*a0);
            sipReleaseType(const_cast<QVector< ::QPointF> *>(a0),sipType_QVector_0100QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_setPositions, doc_QGlyphRun_setPositions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_clear, "clear(self)");

extern "C" {static PyObject *meth_QGlyphRun_clear(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGlyphRun, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_clear, doc_QGlyphRun_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_setOverline, "setOverline(self, bool)");

extern "C" {static PyObject *meth_QGlyphRun_setOverline(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_setOverline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGlyphRun, &sipCpp, &a0))
        {
            sipCpp->setOverline(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_setOverline, doc_QGlyphRun_setOverline);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_overline, "overline(self) -> bool");

extern "C" {static PyObject *meth_QGlyphRun_overline(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_overline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGlyphRun, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->overline();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_overline, doc_QGlyphRun_overline);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_setUnderline, "setUnderline(self, bool)");

extern "C" {static PyObject *meth_QGlyphRun_setUnderline(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_setUnderline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGlyphRun, &sipCpp, &a0))
        {
            sipCpp->setUnderline(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_setUnderline, doc_QGlyphRun_setUnderline);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_underline, "underline(self) -> bool");

extern "C" {static PyObject *meth_QGlyphRun_underline(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_underline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGlyphRun, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->underline();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_underline, doc_QGlyphRun_underline);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_setStrikeOut, "setStrikeOut(self, bool)");

extern "C" {static PyObject *meth_QGlyphRun_setStrikeOut(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_setStrikeOut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGlyphRun, &sipCpp, &a0))
        {
            sipCpp->setStrikeOut(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_setStrikeOut, doc_QGlyphRun_setStrikeOut);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_strikeOut, "strikeOut(self) -> bool");

extern "C" {static PyObject *meth_QGlyphRun_strikeOut(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_strikeOut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGlyphRun, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->strikeOut();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_strikeOut, doc_QGlyphRun_strikeOut);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_setRightToLeft, "setRightToLeft(self, bool)");

extern "C" {static PyObject *meth_QGlyphRun_setRightToLeft(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_setRightToLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGlyphRun, &sipCpp, &a0))
        {
            sipCpp->setRightToLeft(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_setRightToLeft, doc_QGlyphRun_setRightToLeft);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_isRightToLeft, "isRightToLeft(self) -> bool");

extern "C" {static PyObject *meth_QGlyphRun_isRightToLeft(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_isRightToLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGlyphRun, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRightToLeft();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_isRightToLeft, doc_QGlyphRun_isRightToLeft);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_setFlag, "setFlag(self, QGlyphRun.GlyphRunFlag, enabled: bool = True)");

extern "C" {static PyObject *meth_QGlyphRun_setFlag(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_setFlag(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QGlyphRun::GlyphRunFlag a0;
        bool a1 = 1;
         ::QGlyphRun *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE|b", &sipSelf, sipType_QGlyphRun, &sipCpp, sipType_QGlyphRun_GlyphRunFlag, &a0, &a1))
        {
            sipCpp->setFlag(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_setFlag, doc_QGlyphRun_setFlag);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_setFlags, "setFlags(self, Union[QGlyphRun.GlyphRunFlags, QGlyphRun.GlyphRunFlag])");

extern "C" {static PyObject *meth_QGlyphRun_setFlags(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_setFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QGlyphRun::GlyphRunFlags* a0;
        int a0State = 0;
         ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGlyphRun, &sipCpp, sipType_QGlyphRun_GlyphRunFlags, &a0, &a0State))
        {
            sipCpp->setFlags(*a0);
            sipReleaseType(a0,sipType_QGlyphRun_GlyphRunFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_setFlags, doc_QGlyphRun_setFlags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_flags, "flags(self) -> QGlyphRun.GlyphRunFlags");

extern "C" {static PyObject *meth_QGlyphRun_flags(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGlyphRun, &sipCpp))
        {
             ::QGlyphRun::GlyphRunFlags*sipRes;

            sipRes = new  ::QGlyphRun::GlyphRunFlags(sipCpp->flags());

            return sipConvertFromNewType(sipRes,sipType_QGlyphRun_GlyphRunFlags,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_flags, doc_QGlyphRun_flags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_setBoundingRect, "setBoundingRect(self, QRectF)");

extern "C" {static PyObject *meth_QGlyphRun_setBoundingRect(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_setBoundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
         ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGlyphRun, &sipCpp, sipType_QRectF, &a0))
        {
            sipCpp->setBoundingRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_setBoundingRect, doc_QGlyphRun_setBoundingRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_boundingRect, "boundingRect(self) -> QRectF");

extern "C" {static PyObject *meth_QGlyphRun_boundingRect(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_boundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGlyphRun, &sipCpp))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->boundingRect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_boundingRect, doc_QGlyphRun_boundingRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QGlyphRun_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGlyphRun, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_isEmpty, doc_QGlyphRun_isEmpty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGlyphRun_swap, "swap(self, QGlyphRun)");

extern "C" {static PyObject *meth_QGlyphRun_swap(PyObject *, PyObject *);}
static PyObject *meth_QGlyphRun_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QGlyphRun* a0;
         ::QGlyphRun *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGlyphRun, &sipCpp, sipType_QGlyphRun, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGlyphRun, sipName_swap, doc_QGlyphRun_swap);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QGlyphRun___ne__(PyObject *,PyObject *);}
static PyObject *slot_QGlyphRun___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QGlyphRun *sipCpp = reinterpret_cast< ::QGlyphRun *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QGlyphRun));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGlyphRun* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QGlyphRun, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QGlyphRun::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QGlyphRun, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QGlyphRun___eq__(PyObject *,PyObject *);}
static PyObject *slot_QGlyphRun___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QGlyphRun *sipCpp = reinterpret_cast< ::QGlyphRun *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QGlyphRun));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGlyphRun* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QGlyphRun, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QGlyphRun::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QGlyphRun, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QGlyphRun(void *, int);}
static void release_QGlyphRun(void *sipCppV, int)
{
    delete reinterpret_cast< ::QGlyphRun *>(sipCppV);
}


extern "C" {static void assign_QGlyphRun(void *, SIP_SSIZE_T, void *);}
static void assign_QGlyphRun(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QGlyphRun *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QGlyphRun *>(sipSrc);
}


extern "C" {static void *array_QGlyphRun(SIP_SSIZE_T);}
static void *array_QGlyphRun(SIP_SSIZE_T sipNrElem)
{
    return new  ::QGlyphRun[sipNrElem];
}


extern "C" {static void *copy_QGlyphRun(const void *, SIP_SSIZE_T);}
static void *copy_QGlyphRun(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QGlyphRun(reinterpret_cast<const  ::QGlyphRun *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QGlyphRun(sipSimpleWrapper *);}
static void dealloc_QGlyphRun(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QGlyphRun(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QGlyphRun(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QGlyphRun(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QGlyphRun *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QGlyphRun();

            return sipCpp;
        }
    }

    {
        const  ::QGlyphRun* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QGlyphRun, &a0))
        {
            sipCpp = new  ::QGlyphRun(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QGlyphRun[] = {
    {(void *)slot_QGlyphRun___ne__, ne_slot},
    {(void *)slot_QGlyphRun___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QGlyphRun[] = {
    {SIP_MLNAME_CAST(sipName_boundingRect), meth_QGlyphRun_boundingRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QGlyphRun_boundingRect)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QGlyphRun_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QGlyphRun_clear)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QGlyphRun_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QGlyphRun_flags)},
    {SIP_MLNAME_CAST(sipName_glyphIndexes), meth_QGlyphRun_glyphIndexes, METH_VARARGS, SIP_MLDOC_CAST(doc_QGlyphRun_glyphIndexes)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QGlyphRun_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QGlyphRun_isEmpty)},
    {SIP_MLNAME_CAST(sipName_isRightToLeft), meth_QGlyphRun_isRightToLeft, METH_VARARGS, SIP_MLDOC_CAST(doc_QGlyphRun_isRightToLeft)},
    {SIP_MLNAME_CAST(sipName_overline), meth_QGlyphRun_overline, METH_VARARGS, SIP_MLDOC_CAST(doc_QGlyphRun_overline)},
    {SIP_MLNAME_CAST(sipName_positions), meth_QGlyphRun_positions, METH_VARARGS, SIP_MLDOC_CAST(doc_QGlyphRun_positions)},
    {SIP_MLNAME_CAST(sipName_rawFont), meth_QGlyphRun_rawFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QGlyphRun_rawFont)},
    {SIP_MLNAME_CAST(sipName_setBoundingRect), meth_QGlyphRun_setBoundingRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QGlyphRun_setBoundingRect)},
    {SIP_MLNAME_CAST(sipName_setFlag), SIP_MLMETH_CAST(meth_QGlyphRun_setFlag), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGlyphRun_setFlag)},
    {SIP_MLNAME_CAST(sipName_setFlags), meth_QGlyphRun_setFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QGlyphRun_setFlags)},
    {SIP_MLNAME_CAST(sipName_setGlyphIndexes), meth_QGlyphRun_setGlyphIndexes, METH_VARARGS, SIP_MLDOC_CAST(doc_QGlyphRun_setGlyphIndexes)},
    {SIP_MLNAME_CAST(sipName_setOverline), meth_QGlyphRun_setOverline, METH_VARARGS, SIP_MLDOC_CAST(doc_QGlyphRun_setOverline)},
    {SIP_MLNAME_CAST(sipName_setPositions), meth_QGlyphRun_setPositions, METH_VARARGS, SIP_MLDOC_CAST(doc_QGlyphRun_setPositions)},
    {SIP_MLNAME_CAST(sipName_setRawFont), meth_QGlyphRun_setRawFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QGlyphRun_setRawFont)},
    {SIP_MLNAME_CAST(sipName_setRightToLeft), meth_QGlyphRun_setRightToLeft, METH_VARARGS, SIP_MLDOC_CAST(doc_QGlyphRun_setRightToLeft)},
    {SIP_MLNAME_CAST(sipName_setStrikeOut), meth_QGlyphRun_setStrikeOut, METH_VARARGS, SIP_MLDOC_CAST(doc_QGlyphRun_setStrikeOut)},
    {SIP_MLNAME_CAST(sipName_setUnderline), meth_QGlyphRun_setUnderline, METH_VARARGS, SIP_MLDOC_CAST(doc_QGlyphRun_setUnderline)},
    {SIP_MLNAME_CAST(sipName_strikeOut), meth_QGlyphRun_strikeOut, METH_VARARGS, SIP_MLDOC_CAST(doc_QGlyphRun_strikeOut)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QGlyphRun_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QGlyphRun_swap)},
    {SIP_MLNAME_CAST(sipName_underline), meth_QGlyphRun_underline, METH_VARARGS, SIP_MLDOC_CAST(doc_QGlyphRun_underline)}
};

static sipEnumMemberDef enummembers_QGlyphRun[] = {
    {sipName_Overline, static_cast<int>( ::QGlyphRun::Overline), 47},
    {sipName_RightToLeft, static_cast<int>( ::QGlyphRun::RightToLeft), 47},
    {sipName_SplitLigature, static_cast<int>( ::QGlyphRun::SplitLigature), 47},
    {sipName_StrikeOut, static_cast<int>( ::QGlyphRun::StrikeOut), 47},
    {sipName_Underline, static_cast<int>( ::QGlyphRun::Underline), 47},
};

PyDoc_STRVAR(doc_QGlyphRun, "\1QGlyphRun()\n"
"QGlyphRun(QGlyphRun)");


static pyqt5ClassPluginDef plugin_QGlyphRun = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QGlyphRun = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QGlyphRun,
        {SIP_NULLPTR},
        &plugin_QGlyphRun
    },
    {
        sipNameNr_QGlyphRun,
        {0, 0, 1},
        22, methods_QGlyphRun,
        5, enummembers_QGlyphRun,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QGlyphRun,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QGlyphRun,
    init_type_QGlyphRun,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QGlyphRun,
    assign_QGlyphRun,
    array_QGlyphRun,
    copy_QGlyphRun,
    release_QGlyphRun,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 1073 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 48736 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"



PyDoc_STRVAR(doc_QMatrix2x2_data, "data(self) -> List[float]");

extern "C" {static PyObject *meth_QMatrix2x2_data(PyObject *, PyObject *);}
static PyObject *meth_QMatrix2x2_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMatrix2x2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix2x2, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;
            sipErrorState sipError = sipErrorNone;

#line 1145 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        sipError = qtgui_matrixDataAsList(4, sipCpp->constData(), &sipRes);
#line 48758 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipRes;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix2x2, sipName_data, doc_QMatrix2x2_data);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix2x2_copyDataTo, "copyDataTo(self) -> List[float]");

extern "C" {static PyObject *meth_QMatrix2x2_copyDataTo(PyObject *, PyObject *);}
static PyObject *meth_QMatrix2x2_copyDataTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix2x2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix2x2, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;
            sipErrorState sipError = sipErrorNone;

#line 1150 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        PYQT_FLOAT values[4];

        sipCpp->copyDataTo(values);
        sipError = qtgui_matrixDataAsList(4, values, &sipRes);
#line 48800 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipRes;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix2x2, sipName_copyDataTo, doc_QMatrix2x2_copyDataTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix2x2_isIdentity, "isIdentity(self) -> bool");

extern "C" {static PyObject *meth_QMatrix2x2_isIdentity(PyObject *, PyObject *);}
static PyObject *meth_QMatrix2x2_isIdentity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix2x2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix2x2, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isIdentity();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix2x2, sipName_isIdentity, doc_QMatrix2x2_isIdentity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix2x2_setToIdentity, "setToIdentity(self)");

extern "C" {static PyObject *meth_QMatrix2x2_setToIdentity(PyObject *, PyObject *);}
static PyObject *meth_QMatrix2x2_setToIdentity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMatrix2x2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix2x2, &sipCpp))
        {
            sipCpp->setToIdentity();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix2x2, sipName_setToIdentity, doc_QMatrix2x2_setToIdentity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix2x2_fill, "fill(self, float)");

extern "C" {static PyObject *meth_QMatrix2x2_fill(PyObject *, PyObject *);}
static PyObject *meth_QMatrix2x2_fill(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
         ::QMatrix2x2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QMatrix2x2, &sipCpp, &a0))
        {
            sipCpp->fill(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix2x2, sipName_fill, doc_QMatrix2x2_fill);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix2x2_transposed, "transposed(self) -> QMatrix2x2");

extern "C" {static PyObject *meth_QMatrix2x2_transposed(PyObject *, PyObject *);}
static PyObject *meth_QMatrix2x2_transposed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix2x2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix2x2, &sipCpp))
        {
             ::QMatrix2x2*sipRes;

            sipRes = new  ::QMatrix2x2(sipCpp->transposed());

            return sipConvertFromNewType(sipRes,sipType_QMatrix2x2,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix2x2, sipName_transposed, doc_QMatrix2x2_transposed);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QMatrix2x2___ne__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix2x2___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QMatrix2x2 *sipCpp = reinterpret_cast< ::QMatrix2x2 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix2x2));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix2x2* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix2x2, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QMatrix2x2::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QMatrix2x2, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QMatrix2x2___eq__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix2x2___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QMatrix2x2 *sipCpp = reinterpret_cast< ::QMatrix2x2 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix2x2));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix2x2* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix2x2, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QMatrix2x2::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QMatrix2x2, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QMatrix2x2___idiv__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix2x2___idiv__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix2x2)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMatrix2x2 *sipCpp = reinterpret_cast< ::QMatrix2x2 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix2x2));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1f", &a0))
        {
            sipCpp-> ::QMatrix2x2::operator/=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMatrix2x2___imul__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix2x2___imul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix2x2)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMatrix2x2 *sipCpp = reinterpret_cast< ::QMatrix2x2 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix2x2));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1f", &a0))
        {
            sipCpp-> ::QMatrix2x2::operator*=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMatrix2x2___isub__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix2x2___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix2x2)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMatrix2x2 *sipCpp = reinterpret_cast< ::QMatrix2x2 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix2x2));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix2x2* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix2x2, &a0))
        {
            sipCpp-> ::QMatrix2x2::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMatrix2x2___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix2x2___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix2x2)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMatrix2x2 *sipCpp = reinterpret_cast< ::QMatrix2x2 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix2x2));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix2x2* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix2x2, &a0))
        {
            sipCpp-> ::QMatrix2x2::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static int slot_QMatrix2x2___setitem__(PyObject *,PyObject *);}
static int slot_QMatrix2x2___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
     ::QMatrix2x2 *sipCpp = reinterpret_cast< ::QMatrix2x2 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix2x2));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;
        float a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "P0f", &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 1172 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        int row, column;

        if ((sipError = qtgui_matrixParseIndex(a0, 2, 2, &row, &column)) == sipErrorNone)
            sipCpp->operator()(row, column) = a1;
#line 49179 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorFail)
                return -1;

            if (sipError == sipErrorNone)
            {
            return 0;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix2x2, sipName___setitem__, SIP_NULLPTR);

    return -1;
}


extern "C" {static PyObject *slot_QMatrix2x2___getitem__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix2x2___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QMatrix2x2 *sipCpp = reinterpret_cast< ::QMatrix2x2 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix2x2));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1P0", &a0))
        {
            PyObject * sipRes = SIP_NULLPTR;
            sipErrorState sipError = sipErrorNone;

#line 1158 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        int row, column;

        if ((sipError = qtgui_matrixParseIndex(a0, 2, 2, &row, &column)) == sipErrorNone)
        {
            sipRes = PyFloat_FromDouble(sipCpp->operator()(row, column));

            if (!sipRes)
                sipError = sipErrorFail;
        }
#line 49228 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipRes;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix2x2, sipName___getitem__, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QMatrix2x2___repr__(PyObject *);}
static PyObject *slot_QMatrix2x2___repr__(PyObject *sipSelf)
{
     ::QMatrix2x2 *sipCpp = reinterpret_cast< ::QMatrix2x2 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix2x2));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 1100 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        bool bad = false;
        int i;
        PyObject *m[4];
        PYQT_FLOAT data[4];

        // The raw data is in column-major order but we want row-major order.
        sipCpp->copyDataTo(data);

        for (i = 0; i < 4; ++i)
        {
            m[i] = PyFloat_FromDouble(data[i]);

            if (!m[i])
                bad = true;
        }

        if (!bad)
        {
#if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromFormat("PyQt5.QtGui.QMatrix2x2("
                    "%R, %R, "
                    "%R, %R)",
                    m[0], m[1],
                    m[2], m[3]);
#else
            sipRes = PyString_FromString("PyQt5.QtGui.QMatrix2x2(");

            for (i = 0; i < 4; ++i)
            {
                if (i != 0)
                    PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));

                PyString_ConcatAndDel(&sipRes, PyObject_Repr(m[i]));
            }

            PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
#endif
        }

        for (i = 0; i < 4; ++i)
            Py_XDECREF(m[i]);
#line 49304 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMatrix2x2(void *, int);}
static void release_QMatrix2x2(void *sipCppV, int)
{
    delete reinterpret_cast< ::QMatrix2x2 *>(sipCppV);
}


extern "C" {static PyObject *pickle_QMatrix2x2(void *);}
static PyObject *pickle_QMatrix2x2(void *sipCppV)
{
     ::QMatrix2x2 *sipCpp = reinterpret_cast< ::QMatrix2x2 *>(sipCppV);
    PyObject *sipRes;

#line 1077 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        PYQT_FLOAT data[4];

        // We want the data in row-major order.
        sipCpp->copyDataTo(data);

        sipRes = Py_BuildValue((char *)"dddd",
                (double)data[0], (double)data[1],
                (double)data[2], (double)data[3]);
#line 49337 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

    return sipRes;
}


extern "C" {static void assign_QMatrix2x2(void *, SIP_SSIZE_T, void *);}
static void assign_QMatrix2x2(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QMatrix2x2 *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QMatrix2x2 *>(sipSrc);
}


extern "C" {static void *array_QMatrix2x2(SIP_SSIZE_T);}
static void *array_QMatrix2x2(SIP_SSIZE_T sipNrElem)
{
    return new  ::QMatrix2x2[sipNrElem];
}


extern "C" {static void *copy_QMatrix2x2(const void *, SIP_SSIZE_T);}
static void *copy_QMatrix2x2(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QMatrix2x2(reinterpret_cast<const  ::QMatrix2x2 *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QMatrix2x2(sipSimpleWrapper *);}
static void dealloc_QMatrix2x2(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMatrix2x2(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QMatrix2x2(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMatrix2x2(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QMatrix2x2 *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QMatrix2x2();

            return sipCpp;
        }
    }

    {
        const  ::QMatrix2x2* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QMatrix2x2, &a0))
        {
            sipCpp = new  ::QMatrix2x2(*a0);

            return sipCpp;
        }
    }

    {
        PyObject * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "P0", &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1092 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        PYQT_FLOAT values[4];

        if ((sipError = qtgui_matrixDataFromSequence(a0, 4, values)) == sipErrorNone)
            sipCpp = new QMatrix2x2(values);
#line 49411 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorNone)
                return sipCpp;

            if (sipUnused)
            {
                Py_XDECREF(*sipUnused);
            }

            sipAddException(sipError, sipParseErr);

            if (sipError == sipErrorFail)
                return SIP_NULLPTR;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QMatrix2x2[] = {
    {(void *)slot_QMatrix2x2___ne__, ne_slot},
    {(void *)slot_QMatrix2x2___eq__, eq_slot},
    {(void *)slot_QMatrix2x2___idiv__, idiv_slot},
    {(void *)slot_QMatrix2x2___imul__, imul_slot},
    {(void *)slot_QMatrix2x2___isub__, isub_slot},
    {(void *)slot_QMatrix2x2___iadd__, iadd_slot},
    {(void *)slot_QMatrix2x2___setitem__, setitem_slot},
    {(void *)slot_QMatrix2x2___getitem__, getitem_slot},
    {(void *)slot_QMatrix2x2___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QMatrix2x2[] = {
    {SIP_MLNAME_CAST(sipName_copyDataTo), meth_QMatrix2x2_copyDataTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix2x2_copyDataTo)},
    {SIP_MLNAME_CAST(sipName_data), meth_QMatrix2x2_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix2x2_data)},
    {SIP_MLNAME_CAST(sipName_fill), meth_QMatrix2x2_fill, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix2x2_fill)},
    {SIP_MLNAME_CAST(sipName_isIdentity), meth_QMatrix2x2_isIdentity, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix2x2_isIdentity)},
    {SIP_MLNAME_CAST(sipName_setToIdentity), meth_QMatrix2x2_setToIdentity, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix2x2_setToIdentity)},
    {SIP_MLNAME_CAST(sipName_transposed), meth_QMatrix2x2_transposed, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix2x2_transposed)}
};

PyDoc_STRVAR(doc_QMatrix2x2, "\1QMatrix2x2()\n"
"QMatrix2x2(QMatrix2x2)\n"
"QMatrix2x2(Sequence[float])");


static pyqt5ClassPluginDef plugin_QMatrix2x2 = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QMatrix2x2 = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMatrix2x2,
        {SIP_NULLPTR},
        &plugin_QMatrix2x2
    },
    {
        sipNameNr_QMatrix2x2,
        {0, 0, 1},
        6, methods_QMatrix2x2,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QMatrix2x2,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QMatrix2x2,
    init_type_QMatrix2x2,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QMatrix2x2,
    assign_QMatrix2x2,
    array_QMatrix2x2,
    copy_QMatrix2x2,
    release_QMatrix2x2,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    pickle_QMatrix2x2,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 927 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 49523 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 632 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 49527 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QMatrix2x3_data, "data(self) -> List[float]");

extern "C" {static PyObject *meth_QMatrix2x3_data(PyObject *, PyObject *);}
static PyObject *meth_QMatrix2x3_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMatrix2x3 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix2x3, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;
            sipErrorState sipError = sipErrorNone;

#line 999 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        sipError = qtgui_matrixDataAsList(6, sipCpp->constData(), &sipRes);
#line 49548 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipRes;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix2x3, sipName_data, doc_QMatrix2x3_data);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix2x3_copyDataTo, "copyDataTo(self) -> List[float]");

extern "C" {static PyObject *meth_QMatrix2x3_copyDataTo(PyObject *, PyObject *);}
static PyObject *meth_QMatrix2x3_copyDataTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix2x3 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix2x3, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;
            sipErrorState sipError = sipErrorNone;

#line 1004 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        PYQT_FLOAT values[6];

        sipCpp->copyDataTo(values);
        sipError = qtgui_matrixDataAsList(6, values, &sipRes);
#line 49590 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipRes;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix2x3, sipName_copyDataTo, doc_QMatrix2x3_copyDataTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix2x3_isIdentity, "isIdentity(self) -> bool");

extern "C" {static PyObject *meth_QMatrix2x3_isIdentity(PyObject *, PyObject *);}
static PyObject *meth_QMatrix2x3_isIdentity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix2x3 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix2x3, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isIdentity();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix2x3, sipName_isIdentity, doc_QMatrix2x3_isIdentity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix2x3_setToIdentity, "setToIdentity(self)");

extern "C" {static PyObject *meth_QMatrix2x3_setToIdentity(PyObject *, PyObject *);}
static PyObject *meth_QMatrix2x3_setToIdentity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMatrix2x3 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix2x3, &sipCpp))
        {
            sipCpp->setToIdentity();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix2x3, sipName_setToIdentity, doc_QMatrix2x3_setToIdentity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix2x3_fill, "fill(self, float)");

extern "C" {static PyObject *meth_QMatrix2x3_fill(PyObject *, PyObject *);}
static PyObject *meth_QMatrix2x3_fill(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
         ::QMatrix2x3 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QMatrix2x3, &sipCpp, &a0))
        {
            sipCpp->fill(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix2x3, sipName_fill, doc_QMatrix2x3_fill);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix2x3_transposed, "transposed(self) -> QMatrix3x2");

extern "C" {static PyObject *meth_QMatrix2x3_transposed(PyObject *, PyObject *);}
static PyObject *meth_QMatrix2x3_transposed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix2x3 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix2x3, &sipCpp))
        {
             ::QMatrix3x2*sipRes;

            sipRes = new  ::QMatrix3x2(sipCpp->transposed());

            return sipConvertFromNewType(sipRes,sipType_QMatrix3x2,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix2x3, sipName_transposed, doc_QMatrix2x3_transposed);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QMatrix2x3___ne__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix2x3___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QMatrix2x3 *sipCpp = reinterpret_cast< ::QMatrix2x3 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix2x3));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix2x3* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix2x3, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QMatrix2x3::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QMatrix2x3, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QMatrix2x3___eq__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix2x3___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QMatrix2x3 *sipCpp = reinterpret_cast< ::QMatrix2x3 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix2x3));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix2x3* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix2x3, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QMatrix2x3::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QMatrix2x3, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QMatrix2x3___idiv__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix2x3___idiv__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix2x3)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMatrix2x3 *sipCpp = reinterpret_cast< ::QMatrix2x3 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix2x3));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1f", &a0))
        {
            sipCpp-> ::QMatrix2x3::operator/=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMatrix2x3___imul__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix2x3___imul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix2x3)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMatrix2x3 *sipCpp = reinterpret_cast< ::QMatrix2x3 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix2x3));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1f", &a0))
        {
            sipCpp-> ::QMatrix2x3::operator*=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMatrix2x3___isub__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix2x3___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix2x3)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMatrix2x3 *sipCpp = reinterpret_cast< ::QMatrix2x3 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix2x3));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix2x3* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix2x3, &a0))
        {
            sipCpp-> ::QMatrix2x3::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMatrix2x3___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix2x3___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix2x3)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMatrix2x3 *sipCpp = reinterpret_cast< ::QMatrix2x3 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix2x3));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix2x3* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix2x3, &a0))
        {
            sipCpp-> ::QMatrix2x3::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static int slot_QMatrix2x3___setitem__(PyObject *,PyObject *);}
static int slot_QMatrix2x3___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
     ::QMatrix2x3 *sipCpp = reinterpret_cast< ::QMatrix2x3 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix2x3));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;
        float a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "P0f", &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 1026 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        int row, column;

        if ((sipError = qtgui_matrixParseIndex(a0, 2, 3, &row, &column)) == sipErrorNone)
            sipCpp->operator()(row, column) = a1;
#line 49969 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorFail)
                return -1;

            if (sipError == sipErrorNone)
            {
            return 0;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix2x3, sipName___setitem__, SIP_NULLPTR);

    return -1;
}


extern "C" {static PyObject *slot_QMatrix2x3___getitem__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix2x3___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QMatrix2x3 *sipCpp = reinterpret_cast< ::QMatrix2x3 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix2x3));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1P0", &a0))
        {
            PyObject * sipRes = SIP_NULLPTR;
            sipErrorState sipError = sipErrorNone;

#line 1012 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        int row, column;

        if ((sipError = qtgui_matrixParseIndex(a0, 2, 3, &row, &column)) == sipErrorNone)
        {
            sipRes = PyFloat_FromDouble(sipCpp->operator()(row, column));

            if (!sipRes)
                sipError = sipErrorFail;
        }
#line 50018 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipRes;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix2x3, sipName___getitem__, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QMatrix2x3___repr__(PyObject *);}
static PyObject *slot_QMatrix2x3___repr__(PyObject *sipSelf)
{
     ::QMatrix2x3 *sipCpp = reinterpret_cast< ::QMatrix2x3 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix2x3));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 954 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        bool bad = false;
        int i;
        PyObject *m[6];
        PYQT_FLOAT data[6];

        // The raw data is in column-major order but we want row-major order.
        sipCpp->copyDataTo(data);

        for (i = 0; i < 6; ++i)
        {
            m[i] = PyFloat_FromDouble(data[i]);

            if (!m[i])
                bad = true;
        }

        if (!bad)
        {
#if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromFormat("PyQt5.QtGui.QMatrix2x3("
                    "%R, %R, %R, "
                    "%R, %R, %R)",
                    m[0], m[1], m[2],
                    m[3], m[4], m[5]);
#else
            sipRes = PyString_FromString("PyQt5.QtGui.QMatrix2x3(");

            for (i = 0; i < 6; ++i)
            {
                if (i != 0)
                    PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));

                PyString_ConcatAndDel(&sipRes, PyObject_Repr(m[i]));
            }

            PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
#endif
        }

        for (i = 0; i < 6; ++i)
            Py_XDECREF(m[i]);
#line 50094 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMatrix2x3(void *, int);}
static void release_QMatrix2x3(void *sipCppV, int)
{
    delete reinterpret_cast< ::QMatrix2x3 *>(sipCppV);
}


extern "C" {static PyObject *pickle_QMatrix2x3(void *);}
static PyObject *pickle_QMatrix2x3(void *sipCppV)
{
     ::QMatrix2x3 *sipCpp = reinterpret_cast< ::QMatrix2x3 *>(sipCppV);
    PyObject *sipRes;

#line 931 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        PYQT_FLOAT data[6];

        // We want the data in row-major order.
        sipCpp->copyDataTo(data);

        sipRes = Py_BuildValue((char *)"dddddd",
                (double)data[0], (double)data[1], (double)data[2],
                (double)data[3], (double)data[4], (double)data[5]);
#line 50127 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

    return sipRes;
}


extern "C" {static void assign_QMatrix2x3(void *, SIP_SSIZE_T, void *);}
static void assign_QMatrix2x3(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QMatrix2x3 *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QMatrix2x3 *>(sipSrc);
}


extern "C" {static void *array_QMatrix2x3(SIP_SSIZE_T);}
static void *array_QMatrix2x3(SIP_SSIZE_T sipNrElem)
{
    return new  ::QMatrix2x3[sipNrElem];
}


extern "C" {static void *copy_QMatrix2x3(const void *, SIP_SSIZE_T);}
static void *copy_QMatrix2x3(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QMatrix2x3(reinterpret_cast<const  ::QMatrix2x3 *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QMatrix2x3(sipSimpleWrapper *);}
static void dealloc_QMatrix2x3(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMatrix2x3(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QMatrix2x3(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMatrix2x3(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QMatrix2x3 *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QMatrix2x3();

            return sipCpp;
        }
    }

    {
        const  ::QMatrix2x3* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QMatrix2x3, &a0))
        {
            sipCpp = new  ::QMatrix2x3(*a0);

            return sipCpp;
        }
    }

    {
        PyObject * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "P0", &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 946 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        PYQT_FLOAT values[6];

        if ((sipError = qtgui_matrixDataFromSequence(a0, 6, values)) == sipErrorNone)
            sipCpp = new QMatrix2x3(values);
#line 50201 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorNone)
                return sipCpp;

            if (sipUnused)
            {
                Py_XDECREF(*sipUnused);
            }

            sipAddException(sipError, sipParseErr);

            if (sipError == sipErrorFail)
                return SIP_NULLPTR;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QMatrix2x3[] = {
    {(void *)slot_QMatrix2x3___ne__, ne_slot},
    {(void *)slot_QMatrix2x3___eq__, eq_slot},
    {(void *)slot_QMatrix2x3___idiv__, idiv_slot},
    {(void *)slot_QMatrix2x3___imul__, imul_slot},
    {(void *)slot_QMatrix2x3___isub__, isub_slot},
    {(void *)slot_QMatrix2x3___iadd__, iadd_slot},
    {(void *)slot_QMatrix2x3___setitem__, setitem_slot},
    {(void *)slot_QMatrix2x3___getitem__, getitem_slot},
    {(void *)slot_QMatrix2x3___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QMatrix2x3[] = {
    {SIP_MLNAME_CAST(sipName_copyDataTo), meth_QMatrix2x3_copyDataTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix2x3_copyDataTo)},
    {SIP_MLNAME_CAST(sipName_data), meth_QMatrix2x3_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix2x3_data)},
    {SIP_MLNAME_CAST(sipName_fill), meth_QMatrix2x3_fill, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix2x3_fill)},
    {SIP_MLNAME_CAST(sipName_isIdentity), meth_QMatrix2x3_isIdentity, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix2x3_isIdentity)},
    {SIP_MLNAME_CAST(sipName_setToIdentity), meth_QMatrix2x3_setToIdentity, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix2x3_setToIdentity)},
    {SIP_MLNAME_CAST(sipName_transposed), meth_QMatrix2x3_transposed, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix2x3_transposed)}
};

PyDoc_STRVAR(doc_QMatrix2x3, "\1QMatrix2x3()\n"
"QMatrix2x3(QMatrix2x3)\n"
"QMatrix2x3(Sequence[float])");


static pyqt5ClassPluginDef plugin_QMatrix2x3 = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QMatrix2x3 = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMatrix2x3,
        {SIP_NULLPTR},
        &plugin_QMatrix2x3
    },
    {
        sipNameNr_QMatrix2x3,
        {0, 0, 1},
        6, methods_QMatrix2x3,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QMatrix2x3,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QMatrix2x3,
    init_type_QMatrix2x3,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QMatrix2x3,
    assign_QMatrix2x3,
    array_QMatrix2x3,
    copy_QMatrix2x3,
    release_QMatrix2x3,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    pickle_QMatrix2x3,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 781 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 50313 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 179 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 50317 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QMatrix2x4_data, "data(self) -> List[float]");

extern "C" {static PyObject *meth_QMatrix2x4_data(PyObject *, PyObject *);}
static PyObject *meth_QMatrix2x4_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMatrix2x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix2x4, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;
            sipErrorState sipError = sipErrorNone;

#line 853 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        sipError = qtgui_matrixDataAsList(8, sipCpp->constData(), &sipRes);
#line 50338 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipRes;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix2x4, sipName_data, doc_QMatrix2x4_data);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix2x4_copyDataTo, "copyDataTo(self) -> List[float]");

extern "C" {static PyObject *meth_QMatrix2x4_copyDataTo(PyObject *, PyObject *);}
static PyObject *meth_QMatrix2x4_copyDataTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix2x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix2x4, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;
            sipErrorState sipError = sipErrorNone;

#line 858 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        PYQT_FLOAT values[8];

        sipCpp->copyDataTo(values);
        sipError = qtgui_matrixDataAsList(8, values, &sipRes);
#line 50380 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipRes;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix2x4, sipName_copyDataTo, doc_QMatrix2x4_copyDataTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix2x4_isIdentity, "isIdentity(self) -> bool");

extern "C" {static PyObject *meth_QMatrix2x4_isIdentity(PyObject *, PyObject *);}
static PyObject *meth_QMatrix2x4_isIdentity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix2x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix2x4, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isIdentity();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix2x4, sipName_isIdentity, doc_QMatrix2x4_isIdentity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix2x4_setToIdentity, "setToIdentity(self)");

extern "C" {static PyObject *meth_QMatrix2x4_setToIdentity(PyObject *, PyObject *);}
static PyObject *meth_QMatrix2x4_setToIdentity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMatrix2x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix2x4, &sipCpp))
        {
            sipCpp->setToIdentity();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix2x4, sipName_setToIdentity, doc_QMatrix2x4_setToIdentity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix2x4_fill, "fill(self, float)");

extern "C" {static PyObject *meth_QMatrix2x4_fill(PyObject *, PyObject *);}
static PyObject *meth_QMatrix2x4_fill(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
         ::QMatrix2x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QMatrix2x4, &sipCpp, &a0))
        {
            sipCpp->fill(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix2x4, sipName_fill, doc_QMatrix2x4_fill);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix2x4_transposed, "transposed(self) -> QMatrix4x2");

extern "C" {static PyObject *meth_QMatrix2x4_transposed(PyObject *, PyObject *);}
static PyObject *meth_QMatrix2x4_transposed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix2x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix2x4, &sipCpp))
        {
             ::QMatrix4x2*sipRes;

            sipRes = new  ::QMatrix4x2(sipCpp->transposed());

            return sipConvertFromNewType(sipRes,sipType_QMatrix4x2,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix2x4, sipName_transposed, doc_QMatrix2x4_transposed);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QMatrix2x4___ne__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix2x4___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QMatrix2x4 *sipCpp = reinterpret_cast< ::QMatrix2x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix2x4));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix2x4* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix2x4, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QMatrix2x4::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QMatrix2x4, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QMatrix2x4___eq__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix2x4___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QMatrix2x4 *sipCpp = reinterpret_cast< ::QMatrix2x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix2x4));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix2x4* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix2x4, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QMatrix2x4::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QMatrix2x4, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QMatrix2x4___idiv__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix2x4___idiv__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix2x4)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMatrix2x4 *sipCpp = reinterpret_cast< ::QMatrix2x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix2x4));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1f", &a0))
        {
            sipCpp-> ::QMatrix2x4::operator/=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMatrix2x4___imul__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix2x4___imul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix2x4)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMatrix2x4 *sipCpp = reinterpret_cast< ::QMatrix2x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix2x4));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1f", &a0))
        {
            sipCpp-> ::QMatrix2x4::operator*=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMatrix2x4___isub__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix2x4___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix2x4)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMatrix2x4 *sipCpp = reinterpret_cast< ::QMatrix2x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix2x4));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix2x4* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix2x4, &a0))
        {
            sipCpp-> ::QMatrix2x4::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMatrix2x4___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix2x4___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix2x4)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMatrix2x4 *sipCpp = reinterpret_cast< ::QMatrix2x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix2x4));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix2x4* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix2x4, &a0))
        {
            sipCpp-> ::QMatrix2x4::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static int slot_QMatrix2x4___setitem__(PyObject *,PyObject *);}
static int slot_QMatrix2x4___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
     ::QMatrix2x4 *sipCpp = reinterpret_cast< ::QMatrix2x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix2x4));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;
        float a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "P0f", &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 880 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        int row, column;

        if ((sipError = qtgui_matrixParseIndex(a0, 2, 4, &row, &column)) == sipErrorNone)
            sipCpp->operator()(row, column) = a1;
#line 50759 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorFail)
                return -1;

            if (sipError == sipErrorNone)
            {
            return 0;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix2x4, sipName___setitem__, SIP_NULLPTR);

    return -1;
}


extern "C" {static PyObject *slot_QMatrix2x4___getitem__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix2x4___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QMatrix2x4 *sipCpp = reinterpret_cast< ::QMatrix2x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix2x4));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1P0", &a0))
        {
            PyObject * sipRes = SIP_NULLPTR;
            sipErrorState sipError = sipErrorNone;

#line 866 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        int row, column;

        if ((sipError = qtgui_matrixParseIndex(a0, 2, 4, &row, &column)) == sipErrorNone)
        {
            sipRes = PyFloat_FromDouble(sipCpp->operator()(row, column));

            if (!sipRes)
                sipError = sipErrorFail;
        }
#line 50808 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipRes;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix2x4, sipName___getitem__, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QMatrix2x4___repr__(PyObject *);}
static PyObject *slot_QMatrix2x4___repr__(PyObject *sipSelf)
{
     ::QMatrix2x4 *sipCpp = reinterpret_cast< ::QMatrix2x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix2x4));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 808 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        bool bad = false;
        int i;
        PyObject *m[8];
        PYQT_FLOAT data[8];

        // The raw data is in column-major order but we want row-major order.
        sipCpp->copyDataTo(data);

        for (i = 0; i < 8; ++i)
        {
            m[i] = PyFloat_FromDouble(data[i]);

            if (!m[i])
                bad = true;
        }

        if (!bad)
        {
#if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromFormat("PyQt5.QtGui.QMatrix2x4("
                    "%R, %R, %R, %R, "
                    "%R, %R, %R, %R)",
                    m[0], m[1], m[2], m[3],
                    m[4], m[5], m[6], m[7]);
#else
            sipRes = PyString_FromString("PyQt5.QtGui.QMatrix2x4(");

            for (i = 0; i < 8; ++i)
            {
                if (i != 0)
                    PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));

                PyString_ConcatAndDel(&sipRes, PyObject_Repr(m[i]));
            }

            PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
#endif
        }

        for (i = 0; i < 8; ++i)
            Py_XDECREF(m[i]);
#line 50884 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMatrix2x4(void *, int);}
static void release_QMatrix2x4(void *sipCppV, int)
{
    delete reinterpret_cast< ::QMatrix2x4 *>(sipCppV);
}


extern "C" {static PyObject *pickle_QMatrix2x4(void *);}
static PyObject *pickle_QMatrix2x4(void *sipCppV)
{
     ::QMatrix2x4 *sipCpp = reinterpret_cast< ::QMatrix2x4 *>(sipCppV);
    PyObject *sipRes;

#line 785 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        PYQT_FLOAT data[8];

        // We want the data in row-major order.
        sipCpp->copyDataTo(data);

        sipRes = Py_BuildValue((char *)"dddddddd",
                (double)data[0], (double)data[1], (double)data[2], (double)data[3],
                (double)data[4], (double)data[5], (double)data[6], (double)data[7]);
#line 50917 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

    return sipRes;
}


extern "C" {static void assign_QMatrix2x4(void *, SIP_SSIZE_T, void *);}
static void assign_QMatrix2x4(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QMatrix2x4 *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QMatrix2x4 *>(sipSrc);
}


extern "C" {static void *array_QMatrix2x4(SIP_SSIZE_T);}
static void *array_QMatrix2x4(SIP_SSIZE_T sipNrElem)
{
    return new  ::QMatrix2x4[sipNrElem];
}


extern "C" {static void *copy_QMatrix2x4(const void *, SIP_SSIZE_T);}
static void *copy_QMatrix2x4(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QMatrix2x4(reinterpret_cast<const  ::QMatrix2x4 *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QMatrix2x4(sipSimpleWrapper *);}
static void dealloc_QMatrix2x4(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMatrix2x4(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QMatrix2x4(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMatrix2x4(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QMatrix2x4 *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QMatrix2x4();

            return sipCpp;
        }
    }

    {
        const  ::QMatrix2x4* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QMatrix2x4, &a0))
        {
            sipCpp = new  ::QMatrix2x4(*a0);

            return sipCpp;
        }
    }

    {
        PyObject * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "P0", &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 800 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        PYQT_FLOAT values[8];

        if ((sipError = qtgui_matrixDataFromSequence(a0, 8, values)) == sipErrorNone)
            sipCpp = new QMatrix2x4(values);
#line 50991 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorNone)
                return sipCpp;

            if (sipUnused)
            {
                Py_XDECREF(*sipUnused);
            }

            sipAddException(sipError, sipParseErr);

            if (sipError == sipErrorFail)
                return SIP_NULLPTR;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QMatrix2x4[] = {
    {(void *)slot_QMatrix2x4___ne__, ne_slot},
    {(void *)slot_QMatrix2x4___eq__, eq_slot},
    {(void *)slot_QMatrix2x4___idiv__, idiv_slot},
    {(void *)slot_QMatrix2x4___imul__, imul_slot},
    {(void *)slot_QMatrix2x4___isub__, isub_slot},
    {(void *)slot_QMatrix2x4___iadd__, iadd_slot},
    {(void *)slot_QMatrix2x4___setitem__, setitem_slot},
    {(void *)slot_QMatrix2x4___getitem__, getitem_slot},
    {(void *)slot_QMatrix2x4___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QMatrix2x4[] = {
    {SIP_MLNAME_CAST(sipName_copyDataTo), meth_QMatrix2x4_copyDataTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix2x4_copyDataTo)},
    {SIP_MLNAME_CAST(sipName_data), meth_QMatrix2x4_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix2x4_data)},
    {SIP_MLNAME_CAST(sipName_fill), meth_QMatrix2x4_fill, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix2x4_fill)},
    {SIP_MLNAME_CAST(sipName_isIdentity), meth_QMatrix2x4_isIdentity, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix2x4_isIdentity)},
    {SIP_MLNAME_CAST(sipName_setToIdentity), meth_QMatrix2x4_setToIdentity, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix2x4_setToIdentity)},
    {SIP_MLNAME_CAST(sipName_transposed), meth_QMatrix2x4_transposed, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix2x4_transposed)}
};

PyDoc_STRVAR(doc_QMatrix2x4, "\1QMatrix2x4()\n"
"QMatrix2x4(QMatrix2x4)\n"
"QMatrix2x4(Sequence[float])");


static pyqt5ClassPluginDef plugin_QMatrix2x4 = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QMatrix2x4 = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMatrix2x4,
        {SIP_NULLPTR},
        &plugin_QMatrix2x4
    },
    {
        sipNameNr_QMatrix2x4,
        {0, 0, 1},
        6, methods_QMatrix2x4,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QMatrix2x4,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QMatrix2x4,
    init_type_QMatrix2x4,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QMatrix2x4,
    assign_QMatrix2x4,
    array_QMatrix2x4,
    copy_QMatrix2x4,
    release_QMatrix2x4,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    pickle_QMatrix2x4,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 632 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 51103 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 927 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 51107 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QMatrix3x2_data, "data(self) -> List[float]");

extern "C" {static PyObject *meth_QMatrix3x2_data(PyObject *, PyObject *);}
static PyObject *meth_QMatrix3x2_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMatrix3x2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix3x2, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;
            sipErrorState sipError = sipErrorNone;

#line 707 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        sipError = qtgui_matrixDataAsList(6, sipCpp->constData(), &sipRes);
#line 51128 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipRes;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix3x2, sipName_data, doc_QMatrix3x2_data);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix3x2_copyDataTo, "copyDataTo(self) -> List[float]");

extern "C" {static PyObject *meth_QMatrix3x2_copyDataTo(PyObject *, PyObject *);}
static PyObject *meth_QMatrix3x2_copyDataTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix3x2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix3x2, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;
            sipErrorState sipError = sipErrorNone;

#line 712 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        PYQT_FLOAT values[6];

        sipCpp->copyDataTo(values);
        sipError = qtgui_matrixDataAsList(6, values, &sipRes);
#line 51170 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipRes;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix3x2, sipName_copyDataTo, doc_QMatrix3x2_copyDataTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix3x2_isIdentity, "isIdentity(self) -> bool");

extern "C" {static PyObject *meth_QMatrix3x2_isIdentity(PyObject *, PyObject *);}
static PyObject *meth_QMatrix3x2_isIdentity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix3x2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix3x2, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isIdentity();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix3x2, sipName_isIdentity, doc_QMatrix3x2_isIdentity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix3x2_setToIdentity, "setToIdentity(self)");

extern "C" {static PyObject *meth_QMatrix3x2_setToIdentity(PyObject *, PyObject *);}
static PyObject *meth_QMatrix3x2_setToIdentity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMatrix3x2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix3x2, &sipCpp))
        {
            sipCpp->setToIdentity();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix3x2, sipName_setToIdentity, doc_QMatrix3x2_setToIdentity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix3x2_fill, "fill(self, float)");

extern "C" {static PyObject *meth_QMatrix3x2_fill(PyObject *, PyObject *);}
static PyObject *meth_QMatrix3x2_fill(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
         ::QMatrix3x2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QMatrix3x2, &sipCpp, &a0))
        {
            sipCpp->fill(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix3x2, sipName_fill, doc_QMatrix3x2_fill);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix3x2_transposed, "transposed(self) -> QMatrix2x3");

extern "C" {static PyObject *meth_QMatrix3x2_transposed(PyObject *, PyObject *);}
static PyObject *meth_QMatrix3x2_transposed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix3x2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix3x2, &sipCpp))
        {
             ::QMatrix2x3*sipRes;

            sipRes = new  ::QMatrix2x3(sipCpp->transposed());

            return sipConvertFromNewType(sipRes,sipType_QMatrix2x3,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix3x2, sipName_transposed, doc_QMatrix3x2_transposed);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QMatrix3x2___ne__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix3x2___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QMatrix3x2 *sipCpp = reinterpret_cast< ::QMatrix3x2 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix3x2));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix3x2* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix3x2, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QMatrix3x2::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QMatrix3x2, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QMatrix3x2___eq__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix3x2___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QMatrix3x2 *sipCpp = reinterpret_cast< ::QMatrix3x2 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix3x2));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix3x2* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix3x2, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QMatrix3x2::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QMatrix3x2, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QMatrix3x2___idiv__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix3x2___idiv__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix3x2)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMatrix3x2 *sipCpp = reinterpret_cast< ::QMatrix3x2 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix3x2));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1f", &a0))
        {
            sipCpp-> ::QMatrix3x2::operator/=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMatrix3x2___imul__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix3x2___imul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix3x2)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMatrix3x2 *sipCpp = reinterpret_cast< ::QMatrix3x2 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix3x2));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1f", &a0))
        {
            sipCpp-> ::QMatrix3x2::operator*=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMatrix3x2___isub__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix3x2___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix3x2)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMatrix3x2 *sipCpp = reinterpret_cast< ::QMatrix3x2 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix3x2));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix3x2* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix3x2, &a0))
        {
            sipCpp-> ::QMatrix3x2::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMatrix3x2___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix3x2___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix3x2)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMatrix3x2 *sipCpp = reinterpret_cast< ::QMatrix3x2 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix3x2));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix3x2* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix3x2, &a0))
        {
            sipCpp-> ::QMatrix3x2::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static int slot_QMatrix3x2___setitem__(PyObject *,PyObject *);}
static int slot_QMatrix3x2___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
     ::QMatrix3x2 *sipCpp = reinterpret_cast< ::QMatrix3x2 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix3x2));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;
        float a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "P0f", &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 734 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        int row, column;

        if ((sipError = qtgui_matrixParseIndex(a0, 3, 2, &row, &column)) == sipErrorNone)
            sipCpp->operator()(row, column) = a1;
#line 51549 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorFail)
                return -1;

            if (sipError == sipErrorNone)
            {
            return 0;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix3x2, sipName___setitem__, SIP_NULLPTR);

    return -1;
}


extern "C" {static PyObject *slot_QMatrix3x2___getitem__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix3x2___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QMatrix3x2 *sipCpp = reinterpret_cast< ::QMatrix3x2 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix3x2));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1P0", &a0))
        {
            PyObject * sipRes = SIP_NULLPTR;
            sipErrorState sipError = sipErrorNone;

#line 720 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        int row, column;

        if ((sipError = qtgui_matrixParseIndex(a0, 3, 2, &row, &column)) == sipErrorNone)
        {
            sipRes = PyFloat_FromDouble(sipCpp->operator()(row, column));

            if (!sipRes)
                sipError = sipErrorFail;
        }
#line 51598 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipRes;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix3x2, sipName___getitem__, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QMatrix3x2___repr__(PyObject *);}
static PyObject *slot_QMatrix3x2___repr__(PyObject *sipSelf)
{
     ::QMatrix3x2 *sipCpp = reinterpret_cast< ::QMatrix3x2 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix3x2));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 660 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        bool bad = false;
        int i;
        PyObject *m[6];
        PYQT_FLOAT data[6];

        // The raw data is in column-major order but we want row-major order.
        sipCpp->copyDataTo(data);

        for (i = 0; i < 6; ++i)
        {
            m[i] = PyFloat_FromDouble(data[i]);

            if (!m[i])
                bad = true;
        }

        if (!bad)
        {
#if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromFormat("PyQt5.QtGui.QMatrix3x2("
                    "%R, %R, "
                    "%R, %R, "
                    "%R, %R)",
                    m[0], m[1],
                    m[2], m[3],
                    m[4], m[5]);
#else
            sipRes = PyString_FromString("PyQt5.QtGui.QMatrix3x2(");

            for (i = 0; i < 6; ++i)
            {
                if (i != 0)
                    PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));

                PyString_ConcatAndDel(&sipRes, PyObject_Repr(m[i]));
            }

            PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
#endif
        }

        for (i = 0; i < 6; ++i)
            Py_XDECREF(m[i]);
#line 51676 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMatrix3x2(void *, int);}
static void release_QMatrix3x2(void *sipCppV, int)
{
    delete reinterpret_cast< ::QMatrix3x2 *>(sipCppV);
}


extern "C" {static PyObject *pickle_QMatrix3x2(void *);}
static PyObject *pickle_QMatrix3x2(void *sipCppV)
{
     ::QMatrix3x2 *sipCpp = reinterpret_cast< ::QMatrix3x2 *>(sipCppV);
    PyObject *sipRes;

#line 636 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        PYQT_FLOAT data[6];

        // We want the data in row-major order.
        sipCpp->copyDataTo(data);

        sipRes = Py_BuildValue((char *)"dddddd",
                (double)data[0], (double)data[1],
                (double)data[2], (double)data[3],
                (double)data[4], (double)data[5]);
#line 51710 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

    return sipRes;
}


extern "C" {static void assign_QMatrix3x2(void *, SIP_SSIZE_T, void *);}
static void assign_QMatrix3x2(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QMatrix3x2 *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QMatrix3x2 *>(sipSrc);
}


extern "C" {static void *array_QMatrix3x2(SIP_SSIZE_T);}
static void *array_QMatrix3x2(SIP_SSIZE_T sipNrElem)
{
    return new  ::QMatrix3x2[sipNrElem];
}


extern "C" {static void *copy_QMatrix3x2(const void *, SIP_SSIZE_T);}
static void *copy_QMatrix3x2(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QMatrix3x2(reinterpret_cast<const  ::QMatrix3x2 *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QMatrix3x2(sipSimpleWrapper *);}
static void dealloc_QMatrix3x2(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMatrix3x2(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QMatrix3x2(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMatrix3x2(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QMatrix3x2 *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QMatrix3x2();

            return sipCpp;
        }
    }

    {
        const  ::QMatrix3x2* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QMatrix3x2, &a0))
        {
            sipCpp = new  ::QMatrix3x2(*a0);

            return sipCpp;
        }
    }

    {
        PyObject * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "P0", &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 652 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        PYQT_FLOAT values[6];

        if ((sipError = qtgui_matrixDataFromSequence(a0, 6, values)) == sipErrorNone)
            sipCpp = new QMatrix3x2(values);
#line 51784 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorNone)
                return sipCpp;

            if (sipUnused)
            {
                Py_XDECREF(*sipUnused);
            }

            sipAddException(sipError, sipParseErr);

            if (sipError == sipErrorFail)
                return SIP_NULLPTR;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QMatrix3x2[] = {
    {(void *)slot_QMatrix3x2___ne__, ne_slot},
    {(void *)slot_QMatrix3x2___eq__, eq_slot},
    {(void *)slot_QMatrix3x2___idiv__, idiv_slot},
    {(void *)slot_QMatrix3x2___imul__, imul_slot},
    {(void *)slot_QMatrix3x2___isub__, isub_slot},
    {(void *)slot_QMatrix3x2___iadd__, iadd_slot},
    {(void *)slot_QMatrix3x2___setitem__, setitem_slot},
    {(void *)slot_QMatrix3x2___getitem__, getitem_slot},
    {(void *)slot_QMatrix3x2___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QMatrix3x2[] = {
    {SIP_MLNAME_CAST(sipName_copyDataTo), meth_QMatrix3x2_copyDataTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix3x2_copyDataTo)},
    {SIP_MLNAME_CAST(sipName_data), meth_QMatrix3x2_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix3x2_data)},
    {SIP_MLNAME_CAST(sipName_fill), meth_QMatrix3x2_fill, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix3x2_fill)},
    {SIP_MLNAME_CAST(sipName_isIdentity), meth_QMatrix3x2_isIdentity, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix3x2_isIdentity)},
    {SIP_MLNAME_CAST(sipName_setToIdentity), meth_QMatrix3x2_setToIdentity, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix3x2_setToIdentity)},
    {SIP_MLNAME_CAST(sipName_transposed), meth_QMatrix3x2_transposed, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix3x2_transposed)}
};

PyDoc_STRVAR(doc_QMatrix3x2, "\1QMatrix3x2()\n"
"QMatrix3x2(QMatrix3x2)\n"
"QMatrix3x2(Sequence[float])");


static pyqt5ClassPluginDef plugin_QMatrix3x2 = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QMatrix3x2 = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMatrix3x2,
        {SIP_NULLPTR},
        &plugin_QMatrix3x2
    },
    {
        sipNameNr_QMatrix3x2,
        {0, 0, 1},
        6, methods_QMatrix3x2,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QMatrix3x2,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QMatrix3x2,
    init_type_QMatrix3x2,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QMatrix3x2,
    assign_QMatrix3x2,
    array_QMatrix3x2,
    copy_QMatrix3x2,
    release_QMatrix3x2,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    pickle_QMatrix3x2,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 483 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 51896 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"



PyDoc_STRVAR(doc_QMatrix3x3_data, "data(self) -> List[float]");

extern "C" {static PyObject *meth_QMatrix3x3_data(PyObject *, PyObject *);}
static PyObject *meth_QMatrix3x3_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMatrix3x3 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix3x3, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;
            sipErrorState sipError = sipErrorNone;

#line 558 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        sipError = qtgui_matrixDataAsList(9, sipCpp->constData(), &sipRes);
#line 51918 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipRes;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix3x3, sipName_data, doc_QMatrix3x3_data);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix3x3_copyDataTo, "copyDataTo(self) -> List[float]");

extern "C" {static PyObject *meth_QMatrix3x3_copyDataTo(PyObject *, PyObject *);}
static PyObject *meth_QMatrix3x3_copyDataTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix3x3 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix3x3, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;
            sipErrorState sipError = sipErrorNone;

#line 563 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        PYQT_FLOAT values[9];

        sipCpp->copyDataTo(values);
        sipError = qtgui_matrixDataAsList(9, values, &sipRes);
#line 51960 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipRes;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix3x3, sipName_copyDataTo, doc_QMatrix3x3_copyDataTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix3x3_isIdentity, "isIdentity(self) -> bool");

extern "C" {static PyObject *meth_QMatrix3x3_isIdentity(PyObject *, PyObject *);}
static PyObject *meth_QMatrix3x3_isIdentity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix3x3 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix3x3, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isIdentity();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix3x3, sipName_isIdentity, doc_QMatrix3x3_isIdentity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix3x3_setToIdentity, "setToIdentity(self)");

extern "C" {static PyObject *meth_QMatrix3x3_setToIdentity(PyObject *, PyObject *);}
static PyObject *meth_QMatrix3x3_setToIdentity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMatrix3x3 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix3x3, &sipCpp))
        {
            sipCpp->setToIdentity();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix3x3, sipName_setToIdentity, doc_QMatrix3x3_setToIdentity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix3x3_fill, "fill(self, float)");

extern "C" {static PyObject *meth_QMatrix3x3_fill(PyObject *, PyObject *);}
static PyObject *meth_QMatrix3x3_fill(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
         ::QMatrix3x3 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QMatrix3x3, &sipCpp, &a0))
        {
            sipCpp->fill(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix3x3, sipName_fill, doc_QMatrix3x3_fill);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix3x3_transposed, "transposed(self) -> QMatrix3x3");

extern "C" {static PyObject *meth_QMatrix3x3_transposed(PyObject *, PyObject *);}
static PyObject *meth_QMatrix3x3_transposed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix3x3 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix3x3, &sipCpp))
        {
             ::QMatrix3x3*sipRes;

            sipRes = new  ::QMatrix3x3(sipCpp->transposed());

            return sipConvertFromNewType(sipRes,sipType_QMatrix3x3,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix3x3, sipName_transposed, doc_QMatrix3x3_transposed);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QMatrix3x3___ne__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix3x3___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QMatrix3x3 *sipCpp = reinterpret_cast< ::QMatrix3x3 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix3x3));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix3x3* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix3x3, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QMatrix3x3::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QMatrix3x3, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QMatrix3x3___eq__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix3x3___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QMatrix3x3 *sipCpp = reinterpret_cast< ::QMatrix3x3 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix3x3));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix3x3* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix3x3, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QMatrix3x3::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QMatrix3x3, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QMatrix3x3___idiv__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix3x3___idiv__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix3x3)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMatrix3x3 *sipCpp = reinterpret_cast< ::QMatrix3x3 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix3x3));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1f", &a0))
        {
            sipCpp-> ::QMatrix3x3::operator/=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMatrix3x3___imul__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix3x3___imul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix3x3)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMatrix3x3 *sipCpp = reinterpret_cast< ::QMatrix3x3 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix3x3));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1f", &a0))
        {
            sipCpp-> ::QMatrix3x3::operator*=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMatrix3x3___isub__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix3x3___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix3x3)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMatrix3x3 *sipCpp = reinterpret_cast< ::QMatrix3x3 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix3x3));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix3x3* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix3x3, &a0))
        {
            sipCpp-> ::QMatrix3x3::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMatrix3x3___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix3x3___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix3x3)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMatrix3x3 *sipCpp = reinterpret_cast< ::QMatrix3x3 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix3x3));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix3x3* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix3x3, &a0))
        {
            sipCpp-> ::QMatrix3x3::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static int slot_QMatrix3x3___setitem__(PyObject *,PyObject *);}
static int slot_QMatrix3x3___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
     ::QMatrix3x3 *sipCpp = reinterpret_cast< ::QMatrix3x3 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix3x3));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;
        float a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "P0f", &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 585 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        int row, column;

        if ((sipError = qtgui_matrixParseIndex(a0, 3, 3, &row, &column)) == sipErrorNone)
            sipCpp->operator()(row, column) = a1;
#line 52339 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorFail)
                return -1;

            if (sipError == sipErrorNone)
            {
            return 0;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix3x3, sipName___setitem__, SIP_NULLPTR);

    return -1;
}


extern "C" {static PyObject *slot_QMatrix3x3___getitem__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix3x3___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QMatrix3x3 *sipCpp = reinterpret_cast< ::QMatrix3x3 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix3x3));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1P0", &a0))
        {
            PyObject * sipRes = SIP_NULLPTR;
            sipErrorState sipError = sipErrorNone;

#line 571 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        int row, column;

        if ((sipError = qtgui_matrixParseIndex(a0, 3, 3, &row, &column)) == sipErrorNone)
        {
            sipRes = PyFloat_FromDouble(sipCpp->operator()(row, column));

            if (!sipRes)
                sipError = sipErrorFail;
        }
#line 52388 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipRes;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix3x3, sipName___getitem__, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QMatrix3x3___repr__(PyObject *);}
static PyObject *slot_QMatrix3x3___repr__(PyObject *sipSelf)
{
     ::QMatrix3x3 *sipCpp = reinterpret_cast< ::QMatrix3x3 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix3x3));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 511 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        bool bad = false;
        int i;
        PyObject *m[9];
        PYQT_FLOAT data[9];

        // The raw data is in column-major order but we want row-major order.
        sipCpp->copyDataTo(data);

        for (i = 0; i < 9; ++i)
        {
            m[i] = PyFloat_FromDouble(data[i]);

            if (!m[i])
                bad = true;
        }

        if (!bad)
        {
#if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromFormat("PyQt5.QtGui.QMatrix3x3("
                    "%R, %R, %R, "
                    "%R, %R, %R, "
                    "%R, %R, %R)",
                    m[0], m[1], m[2],
                    m[3], m[4], m[5],
                    m[6], m[7], m[8]);
#else
            sipRes = PyString_FromString("PyQt5.QtGui.QMatrix3x3(");

            for (i = 0; i < 9; ++i)
            {
                if (i != 0)
                    PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));

                PyString_ConcatAndDel(&sipRes, PyObject_Repr(m[i]));
            }

            PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
#endif
        }

        for (i = 0; i < 9; ++i)
            Py_XDECREF(m[i]);
#line 52466 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMatrix3x3(void *, int);}
static void release_QMatrix3x3(void *sipCppV, int)
{
    delete reinterpret_cast< ::QMatrix3x3 *>(sipCppV);
}


extern "C" {static PyObject *pickle_QMatrix3x3(void *);}
static PyObject *pickle_QMatrix3x3(void *sipCppV)
{
     ::QMatrix3x3 *sipCpp = reinterpret_cast< ::QMatrix3x3 *>(sipCppV);
    PyObject *sipRes;

#line 487 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        PYQT_FLOAT data[9];

        // We want the data in row-major order.
        sipCpp->copyDataTo(data);

        sipRes = Py_BuildValue((char *)"ddddddddd",
                (double)data[0], (double)data[1], (double)data[2],
                (double)data[3], (double)data[4], (double)data[5],
                (double)data[6], (double)data[7], (double)data[8]);
#line 52500 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

    return sipRes;
}


extern "C" {static void assign_QMatrix3x3(void *, SIP_SSIZE_T, void *);}
static void assign_QMatrix3x3(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QMatrix3x3 *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QMatrix3x3 *>(sipSrc);
}


extern "C" {static void *array_QMatrix3x3(SIP_SSIZE_T);}
static void *array_QMatrix3x3(SIP_SSIZE_T sipNrElem)
{
    return new  ::QMatrix3x3[sipNrElem];
}


extern "C" {static void *copy_QMatrix3x3(const void *, SIP_SSIZE_T);}
static void *copy_QMatrix3x3(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QMatrix3x3(reinterpret_cast<const  ::QMatrix3x3 *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QMatrix3x3(sipSimpleWrapper *);}
static void dealloc_QMatrix3x3(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMatrix3x3(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QMatrix3x3(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMatrix3x3(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QMatrix3x3 *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QMatrix3x3();

            return sipCpp;
        }
    }

    {
        const  ::QMatrix3x3* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QMatrix3x3, &a0))
        {
            sipCpp = new  ::QMatrix3x3(*a0);

            return sipCpp;
        }
    }

    {
        PyObject * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "P0", &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 503 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        PYQT_FLOAT values[9];

        if ((sipError = qtgui_matrixDataFromSequence(a0, 9, values)) == sipErrorNone)
            sipCpp = new QMatrix3x3(values);
#line 52574 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorNone)
                return sipCpp;

            if (sipUnused)
            {
                Py_XDECREF(*sipUnused);
            }

            sipAddException(sipError, sipParseErr);

            if (sipError == sipErrorFail)
                return SIP_NULLPTR;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QMatrix3x3[] = {
    {(void *)slot_QMatrix3x3___ne__, ne_slot},
    {(void *)slot_QMatrix3x3___eq__, eq_slot},
    {(void *)slot_QMatrix3x3___idiv__, idiv_slot},
    {(void *)slot_QMatrix3x3___imul__, imul_slot},
    {(void *)slot_QMatrix3x3___isub__, isub_slot},
    {(void *)slot_QMatrix3x3___iadd__, iadd_slot},
    {(void *)slot_QMatrix3x3___setitem__, setitem_slot},
    {(void *)slot_QMatrix3x3___getitem__, getitem_slot},
    {(void *)slot_QMatrix3x3___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QMatrix3x3[] = {
    {SIP_MLNAME_CAST(sipName_copyDataTo), meth_QMatrix3x3_copyDataTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix3x3_copyDataTo)},
    {SIP_MLNAME_CAST(sipName_data), meth_QMatrix3x3_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix3x3_data)},
    {SIP_MLNAME_CAST(sipName_fill), meth_QMatrix3x3_fill, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix3x3_fill)},
    {SIP_MLNAME_CAST(sipName_isIdentity), meth_QMatrix3x3_isIdentity, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix3x3_isIdentity)},
    {SIP_MLNAME_CAST(sipName_setToIdentity), meth_QMatrix3x3_setToIdentity, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix3x3_setToIdentity)},
    {SIP_MLNAME_CAST(sipName_transposed), meth_QMatrix3x3_transposed, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix3x3_transposed)}
};

PyDoc_STRVAR(doc_QMatrix3x3, "\1QMatrix3x3()\n"
"QMatrix3x3(QMatrix3x3)\n"
"QMatrix3x3(Sequence[float])");


static pyqt5ClassPluginDef plugin_QMatrix3x3 = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QMatrix3x3 = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMatrix3x3,
        {SIP_NULLPTR},
        &plugin_QMatrix3x3
    },
    {
        sipNameNr_QMatrix3x3,
        {0, 0, 1},
        6, methods_QMatrix3x3,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QMatrix3x3,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QMatrix3x3,
    init_type_QMatrix3x3,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QMatrix3x3,
    assign_QMatrix3x3,
    array_QMatrix3x3,
    copy_QMatrix3x3,
    release_QMatrix3x3,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    pickle_QMatrix3x3,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 331 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 52686 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 52690 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QMatrix3x4_data, "data(self) -> List[float]");

extern "C" {static PyObject *meth_QMatrix3x4_data(PyObject *, PyObject *);}
static PyObject *meth_QMatrix3x4_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMatrix3x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix3x4, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;
            sipErrorState sipError = sipErrorNone;

#line 409 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        sipError = qtgui_matrixDataAsList(12, sipCpp->constData(), &sipRes);
#line 52711 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipRes;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix3x4, sipName_data, doc_QMatrix3x4_data);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix3x4_copyDataTo, "copyDataTo(self) -> List[float]");

extern "C" {static PyObject *meth_QMatrix3x4_copyDataTo(PyObject *, PyObject *);}
static PyObject *meth_QMatrix3x4_copyDataTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix3x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix3x4, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;
            sipErrorState sipError = sipErrorNone;

#line 414 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        PYQT_FLOAT values[12];

        sipCpp->copyDataTo(values);
        sipError = qtgui_matrixDataAsList(12, values, &sipRes);
#line 52753 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipRes;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix3x4, sipName_copyDataTo, doc_QMatrix3x4_copyDataTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix3x4_isIdentity, "isIdentity(self) -> bool");

extern "C" {static PyObject *meth_QMatrix3x4_isIdentity(PyObject *, PyObject *);}
static PyObject *meth_QMatrix3x4_isIdentity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix3x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix3x4, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isIdentity();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix3x4, sipName_isIdentity, doc_QMatrix3x4_isIdentity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix3x4_setToIdentity, "setToIdentity(self)");

extern "C" {static PyObject *meth_QMatrix3x4_setToIdentity(PyObject *, PyObject *);}
static PyObject *meth_QMatrix3x4_setToIdentity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMatrix3x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix3x4, &sipCpp))
        {
            sipCpp->setToIdentity();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix3x4, sipName_setToIdentity, doc_QMatrix3x4_setToIdentity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix3x4_fill, "fill(self, float)");

extern "C" {static PyObject *meth_QMatrix3x4_fill(PyObject *, PyObject *);}
static PyObject *meth_QMatrix3x4_fill(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QMatrix3x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QMatrix3x4, &sipCpp, &a0))
        {
            sipCpp->fill(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix3x4, sipName_fill, doc_QMatrix3x4_fill);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix3x4_transposed, "transposed(self) -> QMatrix4x3");

extern "C" {static PyObject *meth_QMatrix3x4_transposed(PyObject *, PyObject *);}
static PyObject *meth_QMatrix3x4_transposed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix3x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix3x4, &sipCpp))
        {
             ::QMatrix4x3*sipRes;

            sipRes = new  ::QMatrix4x3(sipCpp->transposed());

            return sipConvertFromNewType(sipRes,sipType_QMatrix4x3,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix3x4, sipName_transposed, doc_QMatrix3x4_transposed);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QMatrix3x4___ne__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix3x4___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QMatrix3x4 *sipCpp = reinterpret_cast< ::QMatrix3x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix3x4));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix3x4* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix3x4, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QMatrix3x4::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QMatrix3x4, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QMatrix3x4___eq__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix3x4___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QMatrix3x4 *sipCpp = reinterpret_cast< ::QMatrix3x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix3x4));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix3x4* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix3x4, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QMatrix3x4::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QMatrix3x4, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QMatrix3x4___idiv__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix3x4___idiv__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix3x4)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMatrix3x4 *sipCpp = reinterpret_cast< ::QMatrix3x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix3x4));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1f", &a0))
        {
            sipCpp-> ::QMatrix3x4::operator/=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMatrix3x4___imul__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix3x4___imul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix3x4)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMatrix3x4 *sipCpp = reinterpret_cast< ::QMatrix3x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix3x4));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1f", &a0))
        {
            sipCpp-> ::QMatrix3x4::operator*=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMatrix3x4___isub__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix3x4___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix3x4)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMatrix3x4 *sipCpp = reinterpret_cast< ::QMatrix3x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix3x4));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix3x4* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix3x4, &a0))
        {
            sipCpp-> ::QMatrix3x4::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMatrix3x4___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix3x4___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix3x4)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMatrix3x4 *sipCpp = reinterpret_cast< ::QMatrix3x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix3x4));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix3x4* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix3x4, &a0))
        {
            sipCpp-> ::QMatrix3x4::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static int slot_QMatrix3x4___setitem__(PyObject *,PyObject *);}
static int slot_QMatrix3x4___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
     ::QMatrix3x4 *sipCpp = reinterpret_cast< ::QMatrix3x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix3x4));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;
        float a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "P0f", &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 436 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        int row, column;

        if ((sipError = qtgui_matrixParseIndex(a0, 3, 4, &row, &column)) == sipErrorNone)
            sipCpp->operator()(row, column) = a1;
#line 53132 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorFail)
                return -1;

            if (sipError == sipErrorNone)
            {
            return 0;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix3x4, sipName___setitem__, SIP_NULLPTR);

    return -1;
}


extern "C" {static PyObject *slot_QMatrix3x4___getitem__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix3x4___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QMatrix3x4 *sipCpp = reinterpret_cast< ::QMatrix3x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix3x4));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1P0", &a0))
        {
            PyObject * sipRes = SIP_NULLPTR;
            sipErrorState sipError = sipErrorNone;

#line 422 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        int row, column;

        if ((sipError = qtgui_matrixParseIndex(a0, 3, 4, &row, &column)) == sipErrorNone)
        {
            sipRes = PyFloat_FromDouble(sipCpp->operator()(row, column));

            if (!sipRes)
                sipError = sipErrorFail;
        }
#line 53181 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipRes;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix3x4, sipName___getitem__, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QMatrix3x4___repr__(PyObject *);}
static PyObject *slot_QMatrix3x4___repr__(PyObject *sipSelf)
{
     ::QMatrix3x4 *sipCpp = reinterpret_cast< ::QMatrix3x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix3x4));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 360 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        bool bad = false;
        int i;
        PyObject *m[12];
        PYQT_FLOAT data[12];

        // The raw data is in column-major order but we want row-major order.
        sipCpp->copyDataTo(data);

        for (i = 0; i < 12; ++i)
        {
            m[i] = PyFloat_FromDouble(data[i]);

            if (!m[i])
                bad = true;
        }

        if (!bad)
        {
#if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromFormat("PyQt5.QtGui.QMatrix3x4("
                    "%R, %R, %R, "
                    "%R, %R, %R, "
                    "%R, %R, %R, "
                    "%R, %R, %R)",
                    m[0], m[1], m[2],
                    m[3], m[4], m[5],
                    m[6], m[7], m[8],
                    m[9], m[10], m[11]);
#else
            sipRes = PyString_FromString("PyQt5.QtGui.QMatrix3x4(");

            for (i = 0; i < 12; ++i)
            {
                if (i != 0)
                    PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));

                PyString_ConcatAndDel(&sipRes, PyObject_Repr(m[i]));
            }

            PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
#endif
        }

        for (i = 0; i < 12; ++i)
            Py_XDECREF(m[i]);
#line 53261 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMatrix3x4(void *, int);}
static void release_QMatrix3x4(void *sipCppV, int)
{
    delete reinterpret_cast< ::QMatrix3x4 *>(sipCppV);
}


extern "C" {static PyObject *pickle_QMatrix3x4(void *);}
static PyObject *pickle_QMatrix3x4(void *sipCppV)
{
     ::QMatrix3x4 *sipCpp = reinterpret_cast< ::QMatrix3x4 *>(sipCppV);
    PyObject *sipRes;

#line 335 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        PYQT_FLOAT data[12];

        // We want the data in row-major order.
        sipCpp->copyDataTo(data);

        sipRes = Py_BuildValue((char *)"dddddddddddd",
                (double)data[0], (double)data[1], (double)data[2],
                (double)data[3], (double)data[4], (double)data[5],
                (double)data[6], (double)data[7], (double)data[8],
                (double)data[9], (double)data[10], (double)data[11]);
#line 53296 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

    return sipRes;
}


extern "C" {static void assign_QMatrix3x4(void *, SIP_SSIZE_T, void *);}
static void assign_QMatrix3x4(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QMatrix3x4 *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QMatrix3x4 *>(sipSrc);
}


extern "C" {static void *array_QMatrix3x4(SIP_SSIZE_T);}
static void *array_QMatrix3x4(SIP_SSIZE_T sipNrElem)
{
    return new  ::QMatrix3x4[sipNrElem];
}


extern "C" {static void *copy_QMatrix3x4(const void *, SIP_SSIZE_T);}
static void *copy_QMatrix3x4(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QMatrix3x4(reinterpret_cast<const  ::QMatrix3x4 *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QMatrix3x4(sipSimpleWrapper *);}
static void dealloc_QMatrix3x4(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMatrix3x4(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QMatrix3x4(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMatrix3x4(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QMatrix3x4 *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QMatrix3x4();

            return sipCpp;
        }
    }

    {
        const  ::QMatrix3x4* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QMatrix3x4, &a0))
        {
            sipCpp = new  ::QMatrix3x4(*a0);

            return sipCpp;
        }
    }

    {
        PyObject * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "P0", &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 352 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        PYQT_FLOAT values[12];

        if ((sipError = qtgui_matrixDataFromSequence(a0, 12, values)) == sipErrorNone)
            sipCpp = new QMatrix3x4(values);
#line 53370 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorNone)
                return sipCpp;

            if (sipUnused)
            {
                Py_XDECREF(*sipUnused);
            }

            sipAddException(sipError, sipParseErr);

            if (sipError == sipErrorFail)
                return SIP_NULLPTR;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QMatrix3x4[] = {
    {(void *)slot_QMatrix3x4___ne__, ne_slot},
    {(void *)slot_QMatrix3x4___eq__, eq_slot},
    {(void *)slot_QMatrix3x4___idiv__, idiv_slot},
    {(void *)slot_QMatrix3x4___imul__, imul_slot},
    {(void *)slot_QMatrix3x4___isub__, isub_slot},
    {(void *)slot_QMatrix3x4___iadd__, iadd_slot},
    {(void *)slot_QMatrix3x4___setitem__, setitem_slot},
    {(void *)slot_QMatrix3x4___getitem__, getitem_slot},
    {(void *)slot_QMatrix3x4___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QMatrix3x4[] = {
    {SIP_MLNAME_CAST(sipName_copyDataTo), meth_QMatrix3x4_copyDataTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix3x4_copyDataTo)},
    {SIP_MLNAME_CAST(sipName_data), meth_QMatrix3x4_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix3x4_data)},
    {SIP_MLNAME_CAST(sipName_fill), meth_QMatrix3x4_fill, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix3x4_fill)},
    {SIP_MLNAME_CAST(sipName_isIdentity), meth_QMatrix3x4_isIdentity, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix3x4_isIdentity)},
    {SIP_MLNAME_CAST(sipName_setToIdentity), meth_QMatrix3x4_setToIdentity, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix3x4_setToIdentity)},
    {SIP_MLNAME_CAST(sipName_transposed), meth_QMatrix3x4_transposed, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix3x4_transposed)}
};

PyDoc_STRVAR(doc_QMatrix3x4, "\1QMatrix3x4()\n"
"QMatrix3x4(QMatrix3x4)\n"
"QMatrix3x4(Sequence[float])");


static pyqt5ClassPluginDef plugin_QMatrix3x4 = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QMatrix3x4 = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMatrix3x4,
        {SIP_NULLPTR},
        &plugin_QMatrix3x4
    },
    {
        sipNameNr_QMatrix3x4,
        {0, 0, 1},
        6, methods_QMatrix3x4,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QMatrix3x4,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QMatrix3x4,
    init_type_QMatrix3x4,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QMatrix3x4,
    assign_QMatrix3x4,
    array_QMatrix3x4,
    copy_QMatrix3x4,
    release_QMatrix3x4,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    pickle_QMatrix3x4,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 179 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 53482 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 781 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 53486 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QMatrix4x2_data, "data(self) -> List[float]");

extern "C" {static PyObject *meth_QMatrix4x2_data(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x2_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMatrix4x2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix4x2, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;
            sipErrorState sipError = sipErrorNone;

#line 257 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        sipError = qtgui_matrixDataAsList(8, sipCpp->constData(), &sipRes);
#line 53507 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipRes;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x2, sipName_data, doc_QMatrix4x2_data);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix4x2_copyDataTo, "copyDataTo(self) -> List[float]");

extern "C" {static PyObject *meth_QMatrix4x2_copyDataTo(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x2_copyDataTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix4x2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix4x2, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;
            sipErrorState sipError = sipErrorNone;

#line 262 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        PYQT_FLOAT values[8];

        sipCpp->copyDataTo(values);
        sipError = qtgui_matrixDataAsList(8, values, &sipRes);
#line 53549 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipRes;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x2, sipName_copyDataTo, doc_QMatrix4x2_copyDataTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix4x2_isIdentity, "isIdentity(self) -> bool");

extern "C" {static PyObject *meth_QMatrix4x2_isIdentity(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x2_isIdentity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix4x2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix4x2, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isIdentity();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x2, sipName_isIdentity, doc_QMatrix4x2_isIdentity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix4x2_setToIdentity, "setToIdentity(self)");

extern "C" {static PyObject *meth_QMatrix4x2_setToIdentity(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x2_setToIdentity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMatrix4x2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix4x2, &sipCpp))
        {
            sipCpp->setToIdentity();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x2, sipName_setToIdentity, doc_QMatrix4x2_setToIdentity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix4x2_fill, "fill(self, float)");

extern "C" {static PyObject *meth_QMatrix4x2_fill(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x2_fill(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
         ::QMatrix4x2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QMatrix4x2, &sipCpp, &a0))
        {
            sipCpp->fill(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x2, sipName_fill, doc_QMatrix4x2_fill);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix4x2_transposed, "transposed(self) -> QMatrix2x4");

extern "C" {static PyObject *meth_QMatrix4x2_transposed(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x2_transposed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix4x2 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix4x2, &sipCpp))
        {
             ::QMatrix2x4*sipRes;

            sipRes = new  ::QMatrix2x4(sipCpp->transposed());

            return sipConvertFromNewType(sipRes,sipType_QMatrix2x4,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x2, sipName_transposed, doc_QMatrix4x2_transposed);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QMatrix4x2___ne__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix4x2___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QMatrix4x2 *sipCpp = reinterpret_cast< ::QMatrix4x2 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix4x2));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix4x2* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix4x2, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QMatrix4x2::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QMatrix4x2, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QMatrix4x2___eq__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix4x2___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QMatrix4x2 *sipCpp = reinterpret_cast< ::QMatrix4x2 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix4x2));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix4x2* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix4x2, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QMatrix4x2::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QMatrix4x2, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QMatrix4x2___idiv__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix4x2___idiv__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix4x2)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMatrix4x2 *sipCpp = reinterpret_cast< ::QMatrix4x2 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix4x2));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1f", &a0))
        {
            sipCpp-> ::QMatrix4x2::operator/=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMatrix4x2___imul__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix4x2___imul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix4x2)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMatrix4x2 *sipCpp = reinterpret_cast< ::QMatrix4x2 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix4x2));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1f", &a0))
        {
            sipCpp-> ::QMatrix4x2::operator*=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMatrix4x2___isub__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix4x2___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix4x2)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMatrix4x2 *sipCpp = reinterpret_cast< ::QMatrix4x2 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix4x2));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix4x2* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix4x2, &a0))
        {
            sipCpp-> ::QMatrix4x2::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMatrix4x2___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix4x2___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix4x2)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMatrix4x2 *sipCpp = reinterpret_cast< ::QMatrix4x2 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix4x2));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix4x2* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix4x2, &a0))
        {
            sipCpp-> ::QMatrix4x2::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static int slot_QMatrix4x2___setitem__(PyObject *,PyObject *);}
static int slot_QMatrix4x2___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
     ::QMatrix4x2 *sipCpp = reinterpret_cast< ::QMatrix4x2 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix4x2));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;
        float a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "P0f", &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 284 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        int row, column;

        if ((sipError = qtgui_matrixParseIndex(a0, 4, 2, &row, &column)) == sipErrorNone)
            sipCpp->operator()(row, column) = a1;
#line 53928 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorFail)
                return -1;

            if (sipError == sipErrorNone)
            {
            return 0;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x2, sipName___setitem__, SIP_NULLPTR);

    return -1;
}


extern "C" {static PyObject *slot_QMatrix4x2___getitem__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix4x2___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QMatrix4x2 *sipCpp = reinterpret_cast< ::QMatrix4x2 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix4x2));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1P0", &a0))
        {
            PyObject * sipRes = SIP_NULLPTR;
            sipErrorState sipError = sipErrorNone;

#line 270 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        int row, column;

        if ((sipError = qtgui_matrixParseIndex(a0, 4, 2, &row, &column)) == sipErrorNone)
        {
            sipRes = PyFloat_FromDouble(sipCpp->operator()(row, column));

            if (!sipRes)
                sipError = sipErrorFail;
        }
#line 53977 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipRes;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x2, sipName___getitem__, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QMatrix4x2___repr__(PyObject *);}
static PyObject *slot_QMatrix4x2___repr__(PyObject *sipSelf)
{
     ::QMatrix4x2 *sipCpp = reinterpret_cast< ::QMatrix4x2 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix4x2));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 208 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        bool bad = false;
        int i;
        PyObject *m[8];
        PYQT_FLOAT data[8];

        // The raw data is in column-major order but we want row-major order.
        sipCpp->copyDataTo(data);

        for (i = 0; i < 8; ++i)
        {
            m[i] = PyFloat_FromDouble(data[i]);

            if (!m[i])
                bad = true;
        }

        if (!bad)
        {
#if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromFormat("PyQt5.QtGui.QMatrix4x2("
                    "%R, %R, "
                    "%R, %R, "
                    "%R, %R, "
                    "%R, %R)",
                    m[0], m[1],
                    m[2], m[3],
                    m[4], m[5],
                    m[6], m[7]);
#else
            sipRes = PyString_FromString("PyQt5.QtGui.QMatrix4x2(");

            for (i = 0; i < 8; ++i)
            {
                if (i != 0)
                    PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));

                PyString_ConcatAndDel(&sipRes, PyObject_Repr(m[i]));
            }

            PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
#endif
        }

        for (i = 0; i < 8; ++i)
            Py_XDECREF(m[i]);
#line 54057 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMatrix4x2(void *, int);}
static void release_QMatrix4x2(void *sipCppV, int)
{
    delete reinterpret_cast< ::QMatrix4x2 *>(sipCppV);
}


extern "C" {static PyObject *pickle_QMatrix4x2(void *);}
static PyObject *pickle_QMatrix4x2(void *sipCppV)
{
     ::QMatrix4x2 *sipCpp = reinterpret_cast< ::QMatrix4x2 *>(sipCppV);
    PyObject *sipRes;

#line 183 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        PYQT_FLOAT data[8];

        // We want the data in row-major order.
        sipCpp->copyDataTo(data);

        sipRes = Py_BuildValue((char *)"dddddddd",
                (double)data[0], (double)data[1],
                (double)data[2], (double)data[3],
                (double)data[4], (double)data[5],
                (double)data[6], (double)data[7]);
#line 54092 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

    return sipRes;
}


extern "C" {static void assign_QMatrix4x2(void *, SIP_SSIZE_T, void *);}
static void assign_QMatrix4x2(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QMatrix4x2 *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QMatrix4x2 *>(sipSrc);
}


extern "C" {static void *array_QMatrix4x2(SIP_SSIZE_T);}
static void *array_QMatrix4x2(SIP_SSIZE_T sipNrElem)
{
    return new  ::QMatrix4x2[sipNrElem];
}


extern "C" {static void *copy_QMatrix4x2(const void *, SIP_SSIZE_T);}
static void *copy_QMatrix4x2(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QMatrix4x2(reinterpret_cast<const  ::QMatrix4x2 *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QMatrix4x2(sipSimpleWrapper *);}
static void dealloc_QMatrix4x2(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMatrix4x2(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QMatrix4x2(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMatrix4x2(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QMatrix4x2 *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QMatrix4x2();

            return sipCpp;
        }
    }

    {
        const  ::QMatrix4x2* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QMatrix4x2, &a0))
        {
            sipCpp = new  ::QMatrix4x2(*a0);

            return sipCpp;
        }
    }

    {
        PyObject * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "P0", &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 200 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        PYQT_FLOAT values[8];

        if ((sipError = qtgui_matrixDataFromSequence(a0, 8, values)) == sipErrorNone)
            sipCpp = new QMatrix4x2(values);
#line 54166 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorNone)
                return sipCpp;

            if (sipUnused)
            {
                Py_XDECREF(*sipUnused);
            }

            sipAddException(sipError, sipParseErr);

            if (sipError == sipErrorFail)
                return SIP_NULLPTR;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QMatrix4x2[] = {
    {(void *)slot_QMatrix4x2___ne__, ne_slot},
    {(void *)slot_QMatrix4x2___eq__, eq_slot},
    {(void *)slot_QMatrix4x2___idiv__, idiv_slot},
    {(void *)slot_QMatrix4x2___imul__, imul_slot},
    {(void *)slot_QMatrix4x2___isub__, isub_slot},
    {(void *)slot_QMatrix4x2___iadd__, iadd_slot},
    {(void *)slot_QMatrix4x2___setitem__, setitem_slot},
    {(void *)slot_QMatrix4x2___getitem__, getitem_slot},
    {(void *)slot_QMatrix4x2___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QMatrix4x2[] = {
    {SIP_MLNAME_CAST(sipName_copyDataTo), meth_QMatrix4x2_copyDataTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix4x2_copyDataTo)},
    {SIP_MLNAME_CAST(sipName_data), meth_QMatrix4x2_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix4x2_data)},
    {SIP_MLNAME_CAST(sipName_fill), meth_QMatrix4x2_fill, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix4x2_fill)},
    {SIP_MLNAME_CAST(sipName_isIdentity), meth_QMatrix4x2_isIdentity, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix4x2_isIdentity)},
    {SIP_MLNAME_CAST(sipName_setToIdentity), meth_QMatrix4x2_setToIdentity, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix4x2_setToIdentity)},
    {SIP_MLNAME_CAST(sipName_transposed), meth_QMatrix4x2_transposed, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix4x2_transposed)}
};

PyDoc_STRVAR(doc_QMatrix4x2, "\1QMatrix4x2()\n"
"QMatrix4x2(QMatrix4x2)\n"
"QMatrix4x2(Sequence[float])");


static pyqt5ClassPluginDef plugin_QMatrix4x2 = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QMatrix4x2 = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMatrix4x2,
        {SIP_NULLPTR},
        &plugin_QMatrix4x2
    },
    {
        sipNameNr_QMatrix4x2,
        {0, 0, 1},
        6, methods_QMatrix4x2,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QMatrix4x2,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QMatrix4x2,
    init_type_QMatrix4x2,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QMatrix4x2,
    assign_QMatrix4x2,
    array_QMatrix4x2,
    copy_QMatrix4x2,
    release_QMatrix4x2,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    pickle_QMatrix4x2,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 54278 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 331 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 54282 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QMatrix4x3_data, "data(self) -> List[float]");

extern "C" {static PyObject *meth_QMatrix4x3_data(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x3_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMatrix4x3 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix4x3, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;
            sipErrorState sipError = sipErrorNone;

#line 105 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        sipError = qtgui_matrixDataAsList(12, sipCpp->constData(), &sipRes);
#line 54303 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipRes;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x3, sipName_data, doc_QMatrix4x3_data);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix4x3_copyDataTo, "copyDataTo(self) -> List[float]");

extern "C" {static PyObject *meth_QMatrix4x3_copyDataTo(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x3_copyDataTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix4x3 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix4x3, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;
            sipErrorState sipError = sipErrorNone;

#line 110 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        PYQT_FLOAT values[12];

        sipCpp->copyDataTo(values);
        sipError = qtgui_matrixDataAsList(12, values, &sipRes);
#line 54345 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipRes;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x3, sipName_copyDataTo, doc_QMatrix4x3_copyDataTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix4x3_isIdentity, "isIdentity(self) -> bool");

extern "C" {static PyObject *meth_QMatrix4x3_isIdentity(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x3_isIdentity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix4x3 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix4x3, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isIdentity();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x3, sipName_isIdentity, doc_QMatrix4x3_isIdentity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix4x3_setToIdentity, "setToIdentity(self)");

extern "C" {static PyObject *meth_QMatrix4x3_setToIdentity(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x3_setToIdentity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMatrix4x3 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix4x3, &sipCpp))
        {
            sipCpp->setToIdentity();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x3, sipName_setToIdentity, doc_QMatrix4x3_setToIdentity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix4x3_fill, "fill(self, float)");

extern "C" {static PyObject *meth_QMatrix4x3_fill(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x3_fill(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
         ::QMatrix4x3 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QMatrix4x3, &sipCpp, &a0))
        {
            sipCpp->fill(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x3, sipName_fill, doc_QMatrix4x3_fill);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMatrix4x3_transposed, "transposed(self) -> QMatrix3x4");

extern "C" {static PyObject *meth_QMatrix4x3_transposed(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x3_transposed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix4x3 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix4x3, &sipCpp))
        {
             ::QMatrix3x4*sipRes;

            sipRes = new  ::QMatrix3x4(sipCpp->transposed());

            return sipConvertFromNewType(sipRes,sipType_QMatrix3x4,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x3, sipName_transposed, doc_QMatrix4x3_transposed);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QMatrix4x3___ne__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix4x3___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QMatrix4x3 *sipCpp = reinterpret_cast< ::QMatrix4x3 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix4x3));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix4x3* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix4x3, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QMatrix4x3::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QMatrix4x3, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QMatrix4x3___eq__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix4x3___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QMatrix4x3 *sipCpp = reinterpret_cast< ::QMatrix4x3 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix4x3));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix4x3* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix4x3, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QMatrix4x3::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QMatrix4x3, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QMatrix4x3___idiv__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix4x3___idiv__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix4x3)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMatrix4x3 *sipCpp = reinterpret_cast< ::QMatrix4x3 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix4x3));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1f", &a0))
        {
            sipCpp-> ::QMatrix4x3::operator/=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMatrix4x3___imul__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix4x3___imul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix4x3)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMatrix4x3 *sipCpp = reinterpret_cast< ::QMatrix4x3 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix4x3));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1f", &a0))
        {
            sipCpp-> ::QMatrix4x3::operator*=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMatrix4x3___isub__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix4x3___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix4x3)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMatrix4x3 *sipCpp = reinterpret_cast< ::QMatrix4x3 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix4x3));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix4x3* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix4x3, &a0))
        {
            sipCpp-> ::QMatrix4x3::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMatrix4x3___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix4x3___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix4x3)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMatrix4x3 *sipCpp = reinterpret_cast< ::QMatrix4x3 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix4x3));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix4x3* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix4x3, &a0))
        {
            sipCpp-> ::QMatrix4x3::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static int slot_QMatrix4x3___setitem__(PyObject *,PyObject *);}
static int slot_QMatrix4x3___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
     ::QMatrix4x3 *sipCpp = reinterpret_cast< ::QMatrix4x3 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix4x3));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;
        float a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "P0f", &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 132 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        int row, column;

        if ((sipError = qtgui_matrixParseIndex(a0, 4, 3, &row, &column)) == sipErrorNone)
            sipCpp->operator()(row, column) = a1;
#line 54724 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorFail)
                return -1;

            if (sipError == sipErrorNone)
            {
            return 0;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x3, sipName___setitem__, SIP_NULLPTR);

    return -1;
}


extern "C" {static PyObject *slot_QMatrix4x3___getitem__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix4x3___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QMatrix4x3 *sipCpp = reinterpret_cast< ::QMatrix4x3 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix4x3));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1P0", &a0))
        {
            PyObject * sipRes = SIP_NULLPTR;
            sipErrorState sipError = sipErrorNone;

#line 118 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        int row, column;

        if ((sipError = qtgui_matrixParseIndex(a0, 4, 3, &row, &column)) == sipErrorNone)
        {
            sipRes = PyFloat_FromDouble(sipCpp->operator()(row, column));

            if (!sipRes)
                sipError = sipErrorFail;
        }
#line 54773 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipRes;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x3, sipName___getitem__, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QMatrix4x3___repr__(PyObject *);}
static PyObject *slot_QMatrix4x3___repr__(PyObject *sipSelf)
{
     ::QMatrix4x3 *sipCpp = reinterpret_cast< ::QMatrix4x3 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix4x3));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 56 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        bool bad = false;
        int i;
        PyObject *m[12];
        PYQT_FLOAT data[12];

        // The raw data is in column-major order but we want row-major order.
        sipCpp->copyDataTo(data);

        for (i = 0; i < 12; ++i)
        {
            m[i] = PyFloat_FromDouble(data[i]);

            if (!m[i])
                bad = true;
        }

        if (!bad)
        {
#if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromFormat("PyQt5.QtGui.QMatrix4x3("
                    "%R, %R, %R, "
                    "%R, %R, %R, "
                    "%R, %R, %R, "
                    "%R, %R, %R)",
                    m[0], m[1], m[2],
                    m[3], m[4], m[5],
                    m[6], m[7], m[8],
                    m[9], m[10], m[11]);
#else
            sipRes = PyString_FromString("PyQt5.QtGui.QMatrix4x3(");

            for (i = 0; i < 12; ++i)
            {
                if (i != 0)
                    PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));

                PyString_ConcatAndDel(&sipRes, PyObject_Repr(m[i]));
            }

            PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
#endif
        }

        for (i = 0; i < 12; ++i)
            Py_XDECREF(m[i]);
#line 54853 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMatrix4x3(void *, int);}
static void release_QMatrix4x3(void *sipCppV, int)
{
    delete reinterpret_cast< ::QMatrix4x3 *>(sipCppV);
}


extern "C" {static PyObject *pickle_QMatrix4x3(void *);}
static PyObject *pickle_QMatrix4x3(void *sipCppV)
{
     ::QMatrix4x3 *sipCpp = reinterpret_cast< ::QMatrix4x3 *>(sipCppV);
    PyObject *sipRes;

#line 31 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        PYQT_FLOAT data[12];

        // We want the data in row-major order.
        sipCpp->copyDataTo(data);
    
        sipRes = Py_BuildValue((char *)"dddddddddddd",
                (double)data[0], (double)data[1], (double)data[2],
                (double)data[3], (double)data[4], (double)data[5],
                (double)data[6], (double)data[7], (double)data[8],
                (double)data[9], (double)data[10], (double)data[11]);
#line 54888 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

    return sipRes;
}


extern "C" {static void assign_QMatrix4x3(void *, SIP_SSIZE_T, void *);}
static void assign_QMatrix4x3(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QMatrix4x3 *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QMatrix4x3 *>(sipSrc);
}


extern "C" {static void *array_QMatrix4x3(SIP_SSIZE_T);}
static void *array_QMatrix4x3(SIP_SSIZE_T sipNrElem)
{
    return new  ::QMatrix4x3[sipNrElem];
}


extern "C" {static void *copy_QMatrix4x3(const void *, SIP_SSIZE_T);}
static void *copy_QMatrix4x3(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QMatrix4x3(reinterpret_cast<const  ::QMatrix4x3 *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QMatrix4x3(sipSimpleWrapper *);}
static void dealloc_QMatrix4x3(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMatrix4x3(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QMatrix4x3(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMatrix4x3(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QMatrix4x3 *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QMatrix4x3();

            return sipCpp;
        }
    }

    {
        const  ::QMatrix4x3* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QMatrix4x3, &a0))
        {
            sipCpp = new  ::QMatrix4x3(*a0);

            return sipCpp;
        }
    }

    {
        PyObject * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "P0", &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 48 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
        PYQT_FLOAT values[12];

        if ((sipError = qtgui_matrixDataFromSequence(a0, 12, values)) == sipErrorNone)
            sipCpp = new QMatrix4x3(values);
#line 54962 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipError == sipErrorNone)
                return sipCpp;

            if (sipUnused)
            {
                Py_XDECREF(*sipUnused);
            }

            sipAddException(sipError, sipParseErr);

            if (sipError == sipErrorFail)
                return SIP_NULLPTR;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QMatrix4x3[] = {
    {(void *)slot_QMatrix4x3___ne__, ne_slot},
    {(void *)slot_QMatrix4x3___eq__, eq_slot},
    {(void *)slot_QMatrix4x3___idiv__, idiv_slot},
    {(void *)slot_QMatrix4x3___imul__, imul_slot},
    {(void *)slot_QMatrix4x3___isub__, isub_slot},
    {(void *)slot_QMatrix4x3___iadd__, iadd_slot},
    {(void *)slot_QMatrix4x3___setitem__, setitem_slot},
    {(void *)slot_QMatrix4x3___getitem__, getitem_slot},
    {(void *)slot_QMatrix4x3___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QMatrix4x3[] = {
    {SIP_MLNAME_CAST(sipName_copyDataTo), meth_QMatrix4x3_copyDataTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix4x3_copyDataTo)},
    {SIP_MLNAME_CAST(sipName_data), meth_QMatrix4x3_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix4x3_data)},
    {SIP_MLNAME_CAST(sipName_fill), meth_QMatrix4x3_fill, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix4x3_fill)},
    {SIP_MLNAME_CAST(sipName_isIdentity), meth_QMatrix4x3_isIdentity, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix4x3_isIdentity)},
    {SIP_MLNAME_CAST(sipName_setToIdentity), meth_QMatrix4x3_setToIdentity, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix4x3_setToIdentity)},
    {SIP_MLNAME_CAST(sipName_transposed), meth_QMatrix4x3_transposed, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix4x3_transposed)}
};

PyDoc_STRVAR(doc_QMatrix4x3, "\1QMatrix4x3()\n"
"QMatrix4x3(QMatrix4x3)\n"
"QMatrix4x3(Sequence[float])");


static pyqt5ClassPluginDef plugin_QMatrix4x3 = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QMatrix4x3 = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMatrix4x3,
        {SIP_NULLPTR},
        &plugin_QMatrix4x3
    },
    {
        sipNameNr_QMatrix4x3,
        {0, 0, 1},
        6, methods_QMatrix4x3,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QMatrix4x3,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QMatrix4x3,
    init_type_QMatrix4x3,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QMatrix4x3,
    assign_QMatrix4x3,
    array_QMatrix4x3,
    copy_QMatrix4x3,
    release_QMatrix4x3,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    pickle_QMatrix4x3,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 102 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 55074 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 55078 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 55081 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 55084 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 55087 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 55090 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 55093 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 97 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 55096 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 27 "sip/QtCore/qchar.sip"
#include <qchar.h>
#line 55099 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QFontMetricsF_ascent, "ascent(self) -> float");

extern "C" {static PyObject *meth_QFontMetricsF_ascent(PyObject *, PyObject *);}
static PyObject *meth_QFontMetricsF_ascent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetricsF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetricsF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->ascent();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetricsF, sipName_ascent, doc_QFontMetricsF_ascent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetricsF_descent, "descent(self) -> float");

extern "C" {static PyObject *meth_QFontMetricsF_descent(PyObject *, PyObject *);}
static PyObject *meth_QFontMetricsF_descent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetricsF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetricsF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->descent();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetricsF, sipName_descent, doc_QFontMetricsF_descent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetricsF_height, "height(self) -> float");

extern "C" {static PyObject *meth_QFontMetricsF_height(PyObject *, PyObject *);}
static PyObject *meth_QFontMetricsF_height(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetricsF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetricsF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->height();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetricsF, sipName_height, doc_QFontMetricsF_height);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetricsF_leading, "leading(self) -> float");

extern "C" {static PyObject *meth_QFontMetricsF_leading(PyObject *, PyObject *);}
static PyObject *meth_QFontMetricsF_leading(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetricsF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetricsF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->leading();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetricsF, sipName_leading, doc_QFontMetricsF_leading);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetricsF_lineSpacing, "lineSpacing(self) -> float");

extern "C" {static PyObject *meth_QFontMetricsF_lineSpacing(PyObject *, PyObject *);}
static PyObject *meth_QFontMetricsF_lineSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetricsF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetricsF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->lineSpacing();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetricsF, sipName_lineSpacing, doc_QFontMetricsF_lineSpacing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetricsF_minLeftBearing, "minLeftBearing(self) -> float");

extern "C" {static PyObject *meth_QFontMetricsF_minLeftBearing(PyObject *, PyObject *);}
static PyObject *meth_QFontMetricsF_minLeftBearing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetricsF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetricsF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->minLeftBearing();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetricsF, sipName_minLeftBearing, doc_QFontMetricsF_minLeftBearing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetricsF_minRightBearing, "minRightBearing(self) -> float");

extern "C" {static PyObject *meth_QFontMetricsF_minRightBearing(PyObject *, PyObject *);}
static PyObject *meth_QFontMetricsF_minRightBearing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetricsF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetricsF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->minRightBearing();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetricsF, sipName_minRightBearing, doc_QFontMetricsF_minRightBearing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetricsF_maxWidth, "maxWidth(self) -> float");

extern "C" {static PyObject *meth_QFontMetricsF_maxWidth(PyObject *, PyObject *);}
static PyObject *meth_QFontMetricsF_maxWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetricsF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetricsF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->maxWidth();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetricsF, sipName_maxWidth, doc_QFontMetricsF_maxWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetricsF_xHeight, "xHeight(self) -> float");

extern "C" {static PyObject *meth_QFontMetricsF_xHeight(PyObject *, PyObject *);}
static PyObject *meth_QFontMetricsF_xHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetricsF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetricsF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->xHeight();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetricsF, sipName_xHeight, doc_QFontMetricsF_xHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetricsF_inFont, "inFont(self, str) -> bool");

extern "C" {static PyObject *meth_QFontMetricsF_inFont(PyObject *, PyObject *);}
static PyObject *meth_QFontMetricsF_inFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QChar* a0;
        int a0State = 0;
        const  ::QFontMetricsF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFontMetricsF, &sipCpp, sipType_QChar,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->inFont(*a0);
            sipReleaseType(a0,sipType_QChar,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetricsF, sipName_inFont, doc_QFontMetricsF_inFont);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetricsF_leftBearing, "leftBearing(self, str) -> float");

extern "C" {static PyObject *meth_QFontMetricsF_leftBearing(PyObject *, PyObject *);}
static PyObject *meth_QFontMetricsF_leftBearing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QChar* a0;
        int a0State = 0;
        const  ::QFontMetricsF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFontMetricsF, &sipCpp, sipType_QChar,&a0, &a0State))
        {
             ::qreal sipRes;

            sipRes = sipCpp->leftBearing(*a0);
            sipReleaseType(a0,sipType_QChar,a0State);

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetricsF, sipName_leftBearing, doc_QFontMetricsF_leftBearing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetricsF_rightBearing, "rightBearing(self, str) -> float");

extern "C" {static PyObject *meth_QFontMetricsF_rightBearing(PyObject *, PyObject *);}
static PyObject *meth_QFontMetricsF_rightBearing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QChar* a0;
        int a0State = 0;
        const  ::QFontMetricsF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFontMetricsF, &sipCpp, sipType_QChar,&a0, &a0State))
        {
             ::qreal sipRes;

            sipRes = sipCpp->rightBearing(*a0);
            sipReleaseType(a0,sipType_QChar,a0State);

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetricsF, sipName_rightBearing, doc_QFontMetricsF_rightBearing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetricsF_widthChar, "widthChar(self, str) -> float");

extern "C" {static PyObject *meth_QFontMetricsF_widthChar(PyObject *, PyObject *);}
static PyObject *meth_QFontMetricsF_widthChar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QChar* a0;
        int a0State = 0;
        const  ::QFontMetricsF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFontMetricsF, &sipCpp, sipType_QChar,&a0, &a0State))
        {
             ::qreal sipRes;

            sipRes = sipCpp->width(*a0);
            sipReleaseType(a0,sipType_QChar,a0State);

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetricsF, sipName_widthChar, doc_QFontMetricsF_widthChar);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetricsF_width, "width(self, str) -> float");

extern "C" {static PyObject *meth_QFontMetricsF_width(PyObject *, PyObject *);}
static PyObject *meth_QFontMetricsF_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QFontMetricsF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFontMetricsF, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::qreal sipRes;

            sipRes = sipCpp->width(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetricsF, sipName_width, doc_QFontMetricsF_width);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetricsF_boundingRectChar, "boundingRectChar(self, str) -> QRectF");

extern "C" {static PyObject *meth_QFontMetricsF_boundingRectChar(PyObject *, PyObject *);}
static PyObject *meth_QFontMetricsF_boundingRectChar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QChar* a0;
        int a0State = 0;
        const  ::QFontMetricsF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFontMetricsF, &sipCpp, sipType_QChar,&a0, &a0State))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->boundingRect(*a0));
            sipReleaseType(a0,sipType_QChar,a0State);

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetricsF, sipName_boundingRectChar, doc_QFontMetricsF_boundingRectChar);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetricsF_boundingRect, "boundingRect(self, str) -> QRectF\n"
"boundingRect(self, QRectF, int, str, tabStops: int = 0, tabArray: Optional[List[int]] = 0) -> QRectF");

extern "C" {static PyObject *meth_QFontMetricsF_boundingRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFontMetricsF_boundingRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QFontMetricsF *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ1", &sipSelf, sipType_QFontMetricsF, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->boundingRect(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    {
        const  ::QRectF* a0;
        int a1;
        const  ::QString* a2;
        int a2State = 0;
        int a3 = 0;
        PyObject * a4 = 0;
        const  ::QFontMetricsF *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_tabStops,
            sipName_tabArray,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9iJ1|iN", &sipSelf, sipType_QFontMetricsF, &sipCpp, sipType_QRectF, &a0, &a1, sipType_QString,&a2, &a2State, &a3, &PyList_Type, &a4))
        {
             ::QRectF*sipRes = 0;

#line 129 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qfontmetrics.sip"
        int *tabarray = qtgui_tabarray(a4);
        
        sipRes = new QRectF(sipCpp->boundingRect(*a0, a1, *a2, a3, tabarray));
        
        if (!tabarray)
            delete[] tabarray;
#line 55594 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetricsF, sipName_boundingRect, doc_QFontMetricsF_boundingRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetricsF_size, "size(self, int, str, tabStops: int = 0, tabArray: Optional[List[int]] = 0) -> QSizeF");

extern "C" {static PyObject *meth_QFontMetricsF_size(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFontMetricsF_size(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QString* a1;
        int a1State = 0;
        int a2 = 0;
        PyObject * a3 = 0;
        const  ::QFontMetricsF *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_tabStops,
            sipName_tabArray,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiJ1|iN", &sipSelf, sipType_QFontMetricsF, &sipCpp, &a0, sipType_QString,&a1, &a1State, &a2, &PyList_Type, &a3))
        {
             ::QSizeF*sipRes = 0;

#line 139 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qfontmetrics.sip"
        int *tabarray = qtgui_tabarray(a3);
        
        sipRes = new QSizeF(sipCpp->size(a0, *a1, a2, tabarray));
        
        if (!tabarray)
            delete[] tabarray;
#line 55642 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QSizeF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetricsF, sipName_size, doc_QFontMetricsF_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetricsF_underlinePos, "underlinePos(self) -> float");

extern "C" {static PyObject *meth_QFontMetricsF_underlinePos(PyObject *, PyObject *);}
static PyObject *meth_QFontMetricsF_underlinePos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetricsF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetricsF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->underlinePos();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetricsF, sipName_underlinePos, doc_QFontMetricsF_underlinePos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetricsF_overlinePos, "overlinePos(self) -> float");

extern "C" {static PyObject *meth_QFontMetricsF_overlinePos(PyObject *, PyObject *);}
static PyObject *meth_QFontMetricsF_overlinePos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetricsF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetricsF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->overlinePos();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetricsF, sipName_overlinePos, doc_QFontMetricsF_overlinePos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetricsF_strikeOutPos, "strikeOutPos(self) -> float");

extern "C" {static PyObject *meth_QFontMetricsF_strikeOutPos(PyObject *, PyObject *);}
static PyObject *meth_QFontMetricsF_strikeOutPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetricsF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetricsF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->strikeOutPos();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetricsF, sipName_strikeOutPos, doc_QFontMetricsF_strikeOutPos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetricsF_lineWidth, "lineWidth(self) -> float");

extern "C" {static PyObject *meth_QFontMetricsF_lineWidth(PyObject *, PyObject *);}
static PyObject *meth_QFontMetricsF_lineWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetricsF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetricsF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->lineWidth();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetricsF, sipName_lineWidth, doc_QFontMetricsF_lineWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetricsF_averageCharWidth, "averageCharWidth(self) -> float");

extern "C" {static PyObject *meth_QFontMetricsF_averageCharWidth(PyObject *, PyObject *);}
static PyObject *meth_QFontMetricsF_averageCharWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetricsF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetricsF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->averageCharWidth();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetricsF, sipName_averageCharWidth, doc_QFontMetricsF_averageCharWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetricsF_elidedText, "elidedText(self, str, Qt.TextElideMode, float, flags: int = 0) -> str");

extern "C" {static PyObject *meth_QFontMetricsF_elidedText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFontMetricsF_elidedText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::Qt::TextElideMode a1;
         ::qreal a2;
        int a3 = 0;
        const  ::QFontMetricsF *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1Ed|i", &sipSelf, sipType_QFontMetricsF, &sipCpp, sipType_QString,&a0, &a0State, sipType_Qt_TextElideMode, &a1, &a2, &a3))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->elidedText(*a0,a1,a2,a3));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetricsF, sipName_elidedText, doc_QFontMetricsF_elidedText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetricsF_tightBoundingRect, "tightBoundingRect(self, str) -> QRectF");

extern "C" {static PyObject *meth_QFontMetricsF_tightBoundingRect(PyObject *, PyObject *);}
static PyObject *meth_QFontMetricsF_tightBoundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QFontMetricsF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFontMetricsF, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->tightBoundingRect(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetricsF, sipName_tightBoundingRect, doc_QFontMetricsF_tightBoundingRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetricsF_inFontUcs4, "inFontUcs4(self, int) -> bool");

extern "C" {static PyObject *meth_QFontMetricsF_inFontUcs4(PyObject *, PyObject *);}
static PyObject *meth_QFontMetricsF_inFontUcs4(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::uint a0;
        const  ::QFontMetricsF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QFontMetricsF, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->inFontUcs4(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetricsF, sipName_inFontUcs4, doc_QFontMetricsF_inFontUcs4);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetricsF_swap, "swap(self, QFontMetricsF)");

extern "C" {static PyObject *meth_QFontMetricsF_swap(PyObject *, PyObject *);}
static PyObject *meth_QFontMetricsF_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFontMetricsF* a0;
         ::QFontMetricsF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFontMetricsF, &sipCpp, sipType_QFontMetricsF, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetricsF, sipName_swap, doc_QFontMetricsF_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetricsF_capHeight, "capHeight(self) -> float");

extern "C" {static PyObject *meth_QFontMetricsF_capHeight(PyObject *, PyObject *);}
static PyObject *meth_QFontMetricsF_capHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetricsF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetricsF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->capHeight();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetricsF, sipName_capHeight, doc_QFontMetricsF_capHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetricsF_horizontalAdvance, "horizontalAdvance(self, str, length: int = -1) -> float");

extern "C" {static PyObject *meth_QFontMetricsF_horizontalAdvance(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFontMetricsF_horizontalAdvance(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1 = -1;
        const  ::QFontMetricsF *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_length,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|i", &sipSelf, sipType_QFontMetricsF, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
             ::qreal sipRes;

            sipRes = sipCpp->horizontalAdvance(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetricsF, sipName_horizontalAdvance, doc_QFontMetricsF_horizontalAdvance);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QFontMetricsF___ne__(PyObject *,PyObject *);}
static PyObject *slot_QFontMetricsF___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QFontMetricsF *sipCpp = reinterpret_cast< ::QFontMetricsF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFontMetricsF));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetricsF* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QFontMetricsF, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QFontMetricsF::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QFontMetricsF, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QFontMetricsF___eq__(PyObject *,PyObject *);}
static PyObject *slot_QFontMetricsF___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QFontMetricsF *sipCpp = reinterpret_cast< ::QFontMetricsF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFontMetricsF));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetricsF* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QFontMetricsF, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QFontMetricsF::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QFontMetricsF, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QFontMetricsF(void *, int);}
static void release_QFontMetricsF(void *sipCppV, int)
{
    delete reinterpret_cast< ::QFontMetricsF *>(sipCppV);
}


extern "C" {static void dealloc_QFontMetricsF(sipSimpleWrapper *);}
static void dealloc_QFontMetricsF(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QFontMetricsF(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QFontMetricsF(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QFontMetricsF(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QFontMetricsF *sipCpp = SIP_NULLPTR;

    {
        const  ::QFont* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QFont, &a0))
        {
            sipCpp = new  ::QFontMetricsF(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QFont* a0;
         ::QPaintDevice* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9J8", sipType_QFont, &a0, sipType_QPaintDevice, &a1))
        {
            sipCpp = new  ::QFontMetricsF(*a0,a1);

            return sipCpp;
        }
    }

    {
        const  ::QFontMetrics* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QFontMetrics, &a0))
        {
            sipCpp = new  ::QFontMetricsF(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QFontMetricsF* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QFontMetricsF, &a0))
        {
            sipCpp = new  ::QFontMetricsF(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QFontMetricsF[] = {
    {(void *)slot_QFontMetricsF___ne__, ne_slot},
    {(void *)slot_QFontMetricsF___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QFontMetricsF[] = {
    {SIP_MLNAME_CAST(sipName_ascent), meth_QFontMetricsF_ascent, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetricsF_ascent)},
    {SIP_MLNAME_CAST(sipName_averageCharWidth), meth_QFontMetricsF_averageCharWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetricsF_averageCharWidth)},
    {SIP_MLNAME_CAST(sipName_boundingRect), SIP_MLMETH_CAST(meth_QFontMetricsF_boundingRect), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFontMetricsF_boundingRect)},
    {SIP_MLNAME_CAST(sipName_boundingRectChar), meth_QFontMetricsF_boundingRectChar, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetricsF_boundingRectChar)},
    {SIP_MLNAME_CAST(sipName_capHeight), meth_QFontMetricsF_capHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetricsF_capHeight)},
    {SIP_MLNAME_CAST(sipName_descent), meth_QFontMetricsF_descent, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetricsF_descent)},
    {SIP_MLNAME_CAST(sipName_elidedText), SIP_MLMETH_CAST(meth_QFontMetricsF_elidedText), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFontMetricsF_elidedText)},
    {SIP_MLNAME_CAST(sipName_height), meth_QFontMetricsF_height, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetricsF_height)},
    {SIP_MLNAME_CAST(sipName_horizontalAdvance), SIP_MLMETH_CAST(meth_QFontMetricsF_horizontalAdvance), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFontMetricsF_horizontalAdvance)},
    {SIP_MLNAME_CAST(sipName_inFont), meth_QFontMetricsF_inFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetricsF_inFont)},
    {SIP_MLNAME_CAST(sipName_inFontUcs4), meth_QFontMetricsF_inFontUcs4, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetricsF_inFontUcs4)},
    {SIP_MLNAME_CAST(sipName_leading), meth_QFontMetricsF_leading, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetricsF_leading)},
    {SIP_MLNAME_CAST(sipName_leftBearing), meth_QFontMetricsF_leftBearing, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetricsF_leftBearing)},
    {SIP_MLNAME_CAST(sipName_lineSpacing), meth_QFontMetricsF_lineSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetricsF_lineSpacing)},
    {SIP_MLNAME_CAST(sipName_lineWidth), meth_QFontMetricsF_lineWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetricsF_lineWidth)},
    {SIP_MLNAME_CAST(sipName_maxWidth), meth_QFontMetricsF_maxWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetricsF_maxWidth)},
    {SIP_MLNAME_CAST(sipName_minLeftBearing), meth_QFontMetricsF_minLeftBearing, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetricsF_minLeftBearing)},
    {SIP_MLNAME_CAST(sipName_minRightBearing), meth_QFontMetricsF_minRightBearing, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetricsF_minRightBearing)},
    {SIP_MLNAME_CAST(sipName_overlinePos), meth_QFontMetricsF_overlinePos, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetricsF_overlinePos)},
    {SIP_MLNAME_CAST(sipName_rightBearing), meth_QFontMetricsF_rightBearing, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetricsF_rightBearing)},
    {SIP_MLNAME_CAST(sipName_size), SIP_MLMETH_CAST(meth_QFontMetricsF_size), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFontMetricsF_size)},
    {SIP_MLNAME_CAST(sipName_strikeOutPos), meth_QFontMetricsF_strikeOutPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetricsF_strikeOutPos)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QFontMetricsF_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetricsF_swap)},
    {SIP_MLNAME_CAST(sipName_tightBoundingRect), meth_QFontMetricsF_tightBoundingRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetricsF_tightBoundingRect)},
    {SIP_MLNAME_CAST(sipName_underlinePos), meth_QFontMetricsF_underlinePos, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetricsF_underlinePos)},
    {SIP_MLNAME_CAST(sipName_width), meth_QFontMetricsF_width, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetricsF_width)},
    {SIP_MLNAME_CAST(sipName_widthChar), meth_QFontMetricsF_widthChar, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetricsF_widthChar)},
    {SIP_MLNAME_CAST(sipName_xHeight), meth_QFontMetricsF_xHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetricsF_xHeight)}
};

PyDoc_STRVAR(doc_QFontMetricsF, "\1QFontMetricsF(QFont)\n"
"QFontMetricsF(QFont, QPaintDevice)\n"
"QFontMetricsF(QFontMetrics)\n"
"QFontMetricsF(QFontMetricsF)");


static pyqt5ClassPluginDef plugin_QFontMetricsF = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QFontMetricsF = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QFontMetricsF,
        {SIP_NULLPTR},
        &plugin_QFontMetricsF
    },
    {
        sipNameNr_QFontMetricsF,
        {0, 0, 1},
        28, methods_QFontMetricsF,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QFontMetricsF,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QFontMetricsF,
    init_type_QFontMetricsF,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QFontMetricsF,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QFontMetricsF,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 56234 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 56238 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 56241 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 56244 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 56247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 56250 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 56253 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 27 "sip/QtCore/qchar.sip"
#include <qchar.h>
#line 56256 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QFontMetrics_ascent, "ascent(self) -> int");

extern "C" {static PyObject *meth_QFontMetrics_ascent(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_ascent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetrics, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->ascent();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_ascent, doc_QFontMetrics_ascent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_descent, "descent(self) -> int");

extern "C" {static PyObject *meth_QFontMetrics_descent(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_descent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetrics, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->descent();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_descent, doc_QFontMetrics_descent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_height, "height(self) -> int");

extern "C" {static PyObject *meth_QFontMetrics_height(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_height(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetrics, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->height();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_height, doc_QFontMetrics_height);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_leading, "leading(self) -> int");

extern "C" {static PyObject *meth_QFontMetrics_leading(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_leading(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetrics, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->leading();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_leading, doc_QFontMetrics_leading);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_lineSpacing, "lineSpacing(self) -> int");

extern "C" {static PyObject *meth_QFontMetrics_lineSpacing(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_lineSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetrics, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->lineSpacing();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_lineSpacing, doc_QFontMetrics_lineSpacing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_minLeftBearing, "minLeftBearing(self) -> int");

extern "C" {static PyObject *meth_QFontMetrics_minLeftBearing(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_minLeftBearing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetrics, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->minLeftBearing();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_minLeftBearing, doc_QFontMetrics_minLeftBearing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_minRightBearing, "minRightBearing(self) -> int");

extern "C" {static PyObject *meth_QFontMetrics_minRightBearing(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_minRightBearing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetrics, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->minRightBearing();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_minRightBearing, doc_QFontMetrics_minRightBearing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_maxWidth, "maxWidth(self) -> int");

extern "C" {static PyObject *meth_QFontMetrics_maxWidth(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_maxWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetrics, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maxWidth();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_maxWidth, doc_QFontMetrics_maxWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_xHeight, "xHeight(self) -> int");

extern "C" {static PyObject *meth_QFontMetrics_xHeight(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_xHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetrics, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->xHeight();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_xHeight, doc_QFontMetrics_xHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_inFont, "inFont(self, str) -> bool");

extern "C" {static PyObject *meth_QFontMetrics_inFont(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_inFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QChar* a0;
        int a0State = 0;
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFontMetrics, &sipCpp, sipType_QChar,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->inFont(*a0);
            sipReleaseType(a0,sipType_QChar,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_inFont, doc_QFontMetrics_inFont);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_leftBearing, "leftBearing(self, str) -> int");

extern "C" {static PyObject *meth_QFontMetrics_leftBearing(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_leftBearing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QChar* a0;
        int a0State = 0;
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFontMetrics, &sipCpp, sipType_QChar,&a0, &a0State))
        {
            int sipRes;

            sipRes = sipCpp->leftBearing(*a0);
            sipReleaseType(a0,sipType_QChar,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_leftBearing, doc_QFontMetrics_leftBearing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_rightBearing, "rightBearing(self, str) -> int");

extern "C" {static PyObject *meth_QFontMetrics_rightBearing(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_rightBearing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QChar* a0;
        int a0State = 0;
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFontMetrics, &sipCpp, sipType_QChar,&a0, &a0State))
        {
            int sipRes;

            sipRes = sipCpp->rightBearing(*a0);
            sipReleaseType(a0,sipType_QChar,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_rightBearing, doc_QFontMetrics_rightBearing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_widthChar, "widthChar(self, str) -> int");

extern "C" {static PyObject *meth_QFontMetrics_widthChar(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_widthChar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QChar* a0;
        int a0State = 0;
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFontMetrics, &sipCpp, sipType_QChar,&a0, &a0State))
        {
            int sipRes;

            sipRes = sipCpp->width(*a0);
            sipReleaseType(a0,sipType_QChar,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_widthChar, doc_QFontMetrics_widthChar);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_width, "width(self, str, length: int = -1) -> int");

extern "C" {static PyObject *meth_QFontMetrics_width(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_width(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1 = -1;
        const  ::QFontMetrics *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_length,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|i", &sipSelf, sipType_QFontMetrics, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            int sipRes;

            sipRes = sipCpp->width(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_width, doc_QFontMetrics_width);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_boundingRectChar, "boundingRectChar(self, str) -> QRect");

extern "C" {static PyObject *meth_QFontMetrics_boundingRectChar(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_boundingRectChar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QChar* a0;
        int a0State = 0;
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFontMetrics, &sipCpp, sipType_QChar,&a0, &a0State))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->boundingRect(*a0));
            sipReleaseType(a0,sipType_QChar,a0State);

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_boundingRectChar, doc_QFontMetrics_boundingRectChar);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_boundingRect, "boundingRect(self, str) -> QRect\n"
"boundingRect(self, QRect, int, str, tabStops: int = 0, tabArray: Optional[List[int]] = 0) -> QRect\n"
"boundingRect(self, int, int, int, int, int, str, tabStops: int = 0, tabArray: Optional[List[int]] = 0) -> QRect");

extern "C" {static PyObject *meth_QFontMetrics_boundingRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_boundingRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QFontMetrics *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ1", &sipSelf, sipType_QFontMetrics, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->boundingRect(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    {
        const  ::QRect* a0;
        int a1;
        const  ::QString* a2;
        int a2State = 0;
        int a3 = 0;
        PyObject * a4 = 0;
        const  ::QFontMetrics *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_tabStops,
            sipName_tabArray,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9iJ1|iN", &sipSelf, sipType_QFontMetrics, &sipCpp, sipType_QRect, &a0, &a1, sipType_QString,&a2, &a2State, &a3, &PyList_Type, &a4))
        {
             ::QRect*sipRes = 0;

#line 52 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qfontmetrics.sip"
        int *tabarray = qtgui_tabarray(a4);
        
        sipRes = new QRect(sipCpp->boundingRect(*a0, a1, *a2, a3, tabarray));
        
        if (!tabarray)
            delete[] tabarray;
#line 56759 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4;
        const  ::QString* a5;
        int a5State = 0;
        int a6 = 0;
        PyObject * a7 = 0;
        const  ::QFontMetrics *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_tabStops,
            sipName_tabArray,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiiiiiJ1|iN", &sipSelf, sipType_QFontMetrics, &sipCpp, &a0, &a1, &a2, &a3, &a4, sipType_QString,&a5, &a5State, &a6, &PyList_Type, &a7))
        {
             ::QRect*sipRes = 0;

#line 62 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qfontmetrics.sip"
        int *tabarray = qtgui_tabarray(a7);
        
        sipRes = new QRect(sipCpp->boundingRect(a0, a1, a2, a3, a4, *a5, a6, tabarray));
        
        if (!tabarray)
            delete[] tabarray;
#line 56800 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
            sipReleaseType(const_cast< ::QString *>(a5),sipType_QString,a5State);

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_boundingRect, doc_QFontMetrics_boundingRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_size, "size(self, int, str, tabStops: int = 0, tabArray: Optional[List[int]] = 0) -> QSize");

extern "C" {static PyObject *meth_QFontMetrics_size(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_size(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QString* a1;
        int a1State = 0;
        int a2 = 0;
        PyObject * a3 = 0;
        const  ::QFontMetrics *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_tabStops,
            sipName_tabArray,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiJ1|iN", &sipSelf, sipType_QFontMetrics, &sipCpp, &a0, sipType_QString,&a1, &a1State, &a2, &PyList_Type, &a3))
        {
             ::QSize*sipRes = 0;

#line 72 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qfontmetrics.sip"
        int *tabarray = qtgui_tabarray(a3);
        
        sipRes = new QSize(sipCpp->size(a0, *a1, a2, tabarray));
        
        if (!tabarray)
            delete[] tabarray;
#line 56848 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_size, doc_QFontMetrics_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_underlinePos, "underlinePos(self) -> int");

extern "C" {static PyObject *meth_QFontMetrics_underlinePos(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_underlinePos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetrics, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->underlinePos();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_underlinePos, doc_QFontMetrics_underlinePos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_overlinePos, "overlinePos(self) -> int");

extern "C" {static PyObject *meth_QFontMetrics_overlinePos(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_overlinePos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetrics, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->overlinePos();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_overlinePos, doc_QFontMetrics_overlinePos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_strikeOutPos, "strikeOutPos(self) -> int");

extern "C" {static PyObject *meth_QFontMetrics_strikeOutPos(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_strikeOutPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetrics, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->strikeOutPos();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_strikeOutPos, doc_QFontMetrics_strikeOutPos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_lineWidth, "lineWidth(self) -> int");

extern "C" {static PyObject *meth_QFontMetrics_lineWidth(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_lineWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetrics, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->lineWidth();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_lineWidth, doc_QFontMetrics_lineWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_averageCharWidth, "averageCharWidth(self) -> int");

extern "C" {static PyObject *meth_QFontMetrics_averageCharWidth(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_averageCharWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetrics, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->averageCharWidth();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_averageCharWidth, doc_QFontMetrics_averageCharWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_elidedText, "elidedText(self, str, Qt.TextElideMode, int, flags: int = 0) -> str");

extern "C" {static PyObject *meth_QFontMetrics_elidedText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_elidedText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::Qt::TextElideMode a1;
        int a2;
        int a3 = 0;
        const  ::QFontMetrics *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1Ei|i", &sipSelf, sipType_QFontMetrics, &sipCpp, sipType_QString,&a0, &a0State, sipType_Qt_TextElideMode, &a1, &a2, &a3))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->elidedText(*a0,a1,a2,a3));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_elidedText, doc_QFontMetrics_elidedText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_tightBoundingRect, "tightBoundingRect(self, str) -> QRect");

extern "C" {static PyObject *meth_QFontMetrics_tightBoundingRect(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_tightBoundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFontMetrics, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->tightBoundingRect(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_tightBoundingRect, doc_QFontMetrics_tightBoundingRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_inFontUcs4, "inFontUcs4(self, int) -> bool");

extern "C" {static PyObject *meth_QFontMetrics_inFontUcs4(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_inFontUcs4(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::uint a0;
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QFontMetrics, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->inFontUcs4(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_inFontUcs4, doc_QFontMetrics_inFontUcs4);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_swap, "swap(self, QFontMetrics)");

extern "C" {static PyObject *meth_QFontMetrics_swap(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFontMetrics* a0;
         ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFontMetrics, &sipCpp, sipType_QFontMetrics, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_swap, doc_QFontMetrics_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_capHeight, "capHeight(self) -> int");

extern "C" {static PyObject *meth_QFontMetrics_capHeight(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_capHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetrics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontMetrics, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->capHeight();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_capHeight, doc_QFontMetrics_capHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontMetrics_horizontalAdvance, "horizontalAdvance(self, str, length: int = -1) -> int");

extern "C" {static PyObject *meth_QFontMetrics_horizontalAdvance(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_horizontalAdvance(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1 = -1;
        const  ::QFontMetrics *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_length,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|i", &sipSelf, sipType_QFontMetrics, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            int sipRes;

            sipRes = sipCpp->horizontalAdvance(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontMetrics, sipName_horizontalAdvance, doc_QFontMetrics_horizontalAdvance);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QFontMetrics___ne__(PyObject *,PyObject *);}
static PyObject *slot_QFontMetrics___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QFontMetrics *sipCpp = reinterpret_cast< ::QFontMetrics *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFontMetrics));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetrics* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QFontMetrics, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QFontMetrics::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QFontMetrics, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QFontMetrics___eq__(PyObject *,PyObject *);}
static PyObject *slot_QFontMetrics___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QFontMetrics *sipCpp = reinterpret_cast< ::QFontMetrics *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFontMetrics));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontMetrics* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QFontMetrics, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QFontMetrics::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QFontMetrics, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QFontMetrics(void *, int);}
static void release_QFontMetrics(void *sipCppV, int)
{
    delete reinterpret_cast< ::QFontMetrics *>(sipCppV);
}


extern "C" {static void dealloc_QFontMetrics(sipSimpleWrapper *);}
static void dealloc_QFontMetrics(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QFontMetrics(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QFontMetrics(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QFontMetrics(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QFontMetrics *sipCpp = SIP_NULLPTR;

    {
        const  ::QFont* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QFont, &a0))
        {
            sipCpp = new  ::QFontMetrics(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QFont* a0;
         ::QPaintDevice* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9J8", sipType_QFont, &a0, sipType_QPaintDevice, &a1))
        {
            sipCpp = new  ::QFontMetrics(*a0,a1);

            return sipCpp;
        }
    }

    {
        const  ::QFontMetrics* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QFontMetrics, &a0))
        {
            sipCpp = new  ::QFontMetrics(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QFontMetrics[] = {
    {(void *)slot_QFontMetrics___ne__, ne_slot},
    {(void *)slot_QFontMetrics___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QFontMetrics[] = {
    {SIP_MLNAME_CAST(sipName_ascent), meth_QFontMetrics_ascent, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetrics_ascent)},
    {SIP_MLNAME_CAST(sipName_averageCharWidth), meth_QFontMetrics_averageCharWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetrics_averageCharWidth)},
    {SIP_MLNAME_CAST(sipName_boundingRect), SIP_MLMETH_CAST(meth_QFontMetrics_boundingRect), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFontMetrics_boundingRect)},
    {SIP_MLNAME_CAST(sipName_boundingRectChar), meth_QFontMetrics_boundingRectChar, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetrics_boundingRectChar)},
    {SIP_MLNAME_CAST(sipName_capHeight), meth_QFontMetrics_capHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetrics_capHeight)},
    {SIP_MLNAME_CAST(sipName_descent), meth_QFontMetrics_descent, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetrics_descent)},
    {SIP_MLNAME_CAST(sipName_elidedText), SIP_MLMETH_CAST(meth_QFontMetrics_elidedText), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFontMetrics_elidedText)},
    {SIP_MLNAME_CAST(sipName_height), meth_QFontMetrics_height, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetrics_height)},
    {SIP_MLNAME_CAST(sipName_horizontalAdvance), SIP_MLMETH_CAST(meth_QFontMetrics_horizontalAdvance), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFontMetrics_horizontalAdvance)},
    {SIP_MLNAME_CAST(sipName_inFont), meth_QFontMetrics_inFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetrics_inFont)},
    {SIP_MLNAME_CAST(sipName_inFontUcs4), meth_QFontMetrics_inFontUcs4, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetrics_inFontUcs4)},
    {SIP_MLNAME_CAST(sipName_leading), meth_QFontMetrics_leading, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetrics_leading)},
    {SIP_MLNAME_CAST(sipName_leftBearing), meth_QFontMetrics_leftBearing, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetrics_leftBearing)},
    {SIP_MLNAME_CAST(sipName_lineSpacing), meth_QFontMetrics_lineSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetrics_lineSpacing)},
    {SIP_MLNAME_CAST(sipName_lineWidth), meth_QFontMetrics_lineWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetrics_lineWidth)},
    {SIP_MLNAME_CAST(sipName_maxWidth), meth_QFontMetrics_maxWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetrics_maxWidth)},
    {SIP_MLNAME_CAST(sipName_minLeftBearing), meth_QFontMetrics_minLeftBearing, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetrics_minLeftBearing)},
    {SIP_MLNAME_CAST(sipName_minRightBearing), meth_QFontMetrics_minRightBearing, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetrics_minRightBearing)},
    {SIP_MLNAME_CAST(sipName_overlinePos), meth_QFontMetrics_overlinePos, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetrics_overlinePos)},
    {SIP_MLNAME_CAST(sipName_rightBearing), meth_QFontMetrics_rightBearing, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetrics_rightBearing)},
    {SIP_MLNAME_CAST(sipName_size), SIP_MLMETH_CAST(meth_QFontMetrics_size), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFontMetrics_size)},
    {SIP_MLNAME_CAST(sipName_strikeOutPos), meth_QFontMetrics_strikeOutPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetrics_strikeOutPos)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QFontMetrics_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetrics_swap)},
    {SIP_MLNAME_CAST(sipName_tightBoundingRect), meth_QFontMetrics_tightBoundingRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetrics_tightBoundingRect)},
    {SIP_MLNAME_CAST(sipName_underlinePos), meth_QFontMetrics_underlinePos, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetrics_underlinePos)},
    {SIP_MLNAME_CAST(sipName_width), SIP_MLMETH_CAST(meth_QFontMetrics_width), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFontMetrics_width)},
    {SIP_MLNAME_CAST(sipName_widthChar), meth_QFontMetrics_widthChar, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetrics_widthChar)},
    {SIP_MLNAME_CAST(sipName_xHeight), meth_QFontMetrics_xHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontMetrics_xHeight)}
};

PyDoc_STRVAR(doc_QFontMetrics, "\1QFontMetrics(QFont)\n"
"QFontMetrics(QFont, QPaintDevice)\n"
"QFontMetrics(QFontMetrics)");


static pyqt5ClassPluginDef plugin_QFontMetrics = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QFontMetrics = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QFontMetrics,
        {SIP_NULLPTR},
        &plugin_QFontMetrics
    },
    {
        sipNameNr_QFontMetrics,
        {0, 0, 1},
        28, methods_QFontMetrics,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QFontMetrics,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QFontMetrics,
    init_type_QFontMetrics,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QFontMetrics,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QFontMetrics,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 57427 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 57431 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 57434 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QFontInfo_family, "family(self) -> str");

extern "C" {static PyObject *meth_QFontInfo_family(PyObject *, PyObject *);}
static PyObject *meth_QFontInfo_family(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->family());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontInfo, sipName_family, doc_QFontInfo_family);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontInfo_pixelSize, "pixelSize(self) -> int");

extern "C" {static PyObject *meth_QFontInfo_pixelSize(PyObject *, PyObject *);}
static PyObject *meth_QFontInfo_pixelSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontInfo, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->pixelSize();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontInfo, sipName_pixelSize, doc_QFontInfo_pixelSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontInfo_pointSize, "pointSize(self) -> int");

extern "C" {static PyObject *meth_QFontInfo_pointSize(PyObject *, PyObject *);}
static PyObject *meth_QFontInfo_pointSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontInfo, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->pointSize();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontInfo, sipName_pointSize, doc_QFontInfo_pointSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontInfo_pointSizeF, "pointSizeF(self) -> float");

extern "C" {static PyObject *meth_QFontInfo_pointSizeF(PyObject *, PyObject *);}
static PyObject *meth_QFontInfo_pointSizeF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontInfo, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->pointSizeF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontInfo, sipName_pointSizeF, doc_QFontInfo_pointSizeF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontInfo_italic, "italic(self) -> bool");

extern "C" {static PyObject *meth_QFontInfo_italic(PyObject *, PyObject *);}
static PyObject *meth_QFontInfo_italic(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->italic();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontInfo, sipName_italic, doc_QFontInfo_italic);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontInfo_style, "style(self) -> QFont.Style");

extern "C" {static PyObject *meth_QFontInfo_style(PyObject *, PyObject *);}
static PyObject *meth_QFontInfo_style(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontInfo, &sipCpp))
        {
             ::QFont::Style sipRes;

            sipRes = sipCpp->style();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QFont_Style);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontInfo, sipName_style, doc_QFontInfo_style);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontInfo_weight, "weight(self) -> int");

extern "C" {static PyObject *meth_QFontInfo_weight(PyObject *, PyObject *);}
static PyObject *meth_QFontInfo_weight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontInfo, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->weight();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontInfo, sipName_weight, doc_QFontInfo_weight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontInfo_bold, "bold(self) -> bool");

extern "C" {static PyObject *meth_QFontInfo_bold(PyObject *, PyObject *);}
static PyObject *meth_QFontInfo_bold(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->bold();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontInfo, sipName_bold, doc_QFontInfo_bold);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontInfo_fixedPitch, "fixedPitch(self) -> bool");

extern "C" {static PyObject *meth_QFontInfo_fixedPitch(PyObject *, PyObject *);}
static PyObject *meth_QFontInfo_fixedPitch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->fixedPitch();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontInfo, sipName_fixedPitch, doc_QFontInfo_fixedPitch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontInfo_styleHint, "styleHint(self) -> QFont.StyleHint");

extern "C" {static PyObject *meth_QFontInfo_styleHint(PyObject *, PyObject *);}
static PyObject *meth_QFontInfo_styleHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontInfo, &sipCpp))
        {
             ::QFont::StyleHint sipRes;

            sipRes = sipCpp->styleHint();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QFont_StyleHint);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontInfo, sipName_styleHint, doc_QFontInfo_styleHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontInfo_rawMode, "rawMode(self) -> bool");

extern "C" {static PyObject *meth_QFontInfo_rawMode(PyObject *, PyObject *);}
static PyObject *meth_QFontInfo_rawMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->rawMode();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontInfo, sipName_rawMode, doc_QFontInfo_rawMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontInfo_exactMatch, "exactMatch(self) -> bool");

extern "C" {static PyObject *meth_QFontInfo_exactMatch(PyObject *, PyObject *);}
static PyObject *meth_QFontInfo_exactMatch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->exactMatch();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontInfo, sipName_exactMatch, doc_QFontInfo_exactMatch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontInfo_styleName, "styleName(self) -> str");

extern "C" {static PyObject *meth_QFontInfo_styleName(PyObject *, PyObject *);}
static PyObject *meth_QFontInfo_styleName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->styleName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontInfo, sipName_styleName, doc_QFontInfo_styleName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontInfo_swap, "swap(self, QFontInfo)");

extern "C" {static PyObject *meth_QFontInfo_swap(PyObject *, PyObject *);}
static PyObject *meth_QFontInfo_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFontInfo* a0;
         ::QFontInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFontInfo, &sipCpp, sipType_QFontInfo, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontInfo, sipName_swap, doc_QFontInfo_swap);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QFontInfo(void *, int);}
static void release_QFontInfo(void *sipCppV, int)
{
    delete reinterpret_cast< ::QFontInfo *>(sipCppV);
}


extern "C" {static void dealloc_QFontInfo(sipSimpleWrapper *);}
static void dealloc_QFontInfo(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QFontInfo(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QFontInfo(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QFontInfo(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QFontInfo *sipCpp = SIP_NULLPTR;

    {
        const  ::QFont* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QFont, &a0))
        {
            sipCpp = new  ::QFontInfo(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QFontInfo* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QFontInfo, &a0))
        {
            sipCpp = new  ::QFontInfo(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QFontInfo[] = {
    {SIP_MLNAME_CAST(sipName_bold), meth_QFontInfo_bold, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontInfo_bold)},
    {SIP_MLNAME_CAST(sipName_exactMatch), meth_QFontInfo_exactMatch, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontInfo_exactMatch)},
    {SIP_MLNAME_CAST(sipName_family), meth_QFontInfo_family, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontInfo_family)},
    {SIP_MLNAME_CAST(sipName_fixedPitch), meth_QFontInfo_fixedPitch, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontInfo_fixedPitch)},
    {SIP_MLNAME_CAST(sipName_italic), meth_QFontInfo_italic, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontInfo_italic)},
    {SIP_MLNAME_CAST(sipName_pixelSize), meth_QFontInfo_pixelSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontInfo_pixelSize)},
    {SIP_MLNAME_CAST(sipName_pointSize), meth_QFontInfo_pointSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontInfo_pointSize)},
    {SIP_MLNAME_CAST(sipName_pointSizeF), meth_QFontInfo_pointSizeF, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontInfo_pointSizeF)},
    {SIP_MLNAME_CAST(sipName_rawMode), meth_QFontInfo_rawMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontInfo_rawMode)},
    {SIP_MLNAME_CAST(sipName_style), meth_QFontInfo_style, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontInfo_style)},
    {SIP_MLNAME_CAST(sipName_styleHint), meth_QFontInfo_styleHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontInfo_styleHint)},
    {SIP_MLNAME_CAST(sipName_styleName), meth_QFontInfo_styleName, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontInfo_styleName)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QFontInfo_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontInfo_swap)},
    {SIP_MLNAME_CAST(sipName_weight), meth_QFontInfo_weight, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontInfo_weight)}
};

PyDoc_STRVAR(doc_QFontInfo, "\1QFontInfo(QFont)\n"
"QFontInfo(QFontInfo)");


static pyqt5ClassPluginDef plugin_QFontInfo = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QFontInfo = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QFontInfo,
        {SIP_NULLPTR},
        &plugin_QFontInfo
    },
    {
        sipNameNr_QFontInfo,
        {0, 0, 1},
        14, methods_QFontInfo,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QFontInfo,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QFontInfo,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QFontInfo,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QFontInfo,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qfontdatabase.sip"
#include <qfontdatabase.h>
#line 57960 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 57964 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 57967 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 57970 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 57973 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 57976 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 646 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 57979 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpygui_qlist.sip"
#include <qfontdatabase.h>
#line 57982 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QFontDatabase_standardSizes, "standardSizes() -> List[int]");

extern "C" {static PyObject *meth_QFontDatabase_standardSizes(PyObject *, PyObject *);}
static PyObject *meth_QFontDatabase_standardSizes(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QList<int>*sipRes;

            sipRes = new  ::QList<int>( ::QFontDatabase::standardSizes());

            return sipConvertFromNewType(sipRes,sipType_QList_1800,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontDatabase, sipName_standardSizes, doc_QFontDatabase_standardSizes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontDatabase_writingSystems, "writingSystems(self) -> List[QFontDatabase.WritingSystem]\n"
"writingSystems(self, str) -> List[QFontDatabase.WritingSystem]");

extern "C" {static PyObject *meth_QFontDatabase_writingSystems(PyObject *, PyObject *);}
static PyObject *meth_QFontDatabase_writingSystems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFontDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFontDatabase, &sipCpp))
        {
             ::QList< ::QFontDatabase::WritingSystem>*sipRes;

            sipRes = new  ::QList< ::QFontDatabase::WritingSystem>(sipCpp->writingSystems());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QFontDatabase_WritingSystem,SIP_NULLPTR);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QFontDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFontDatabase, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QList< ::QFontDatabase::WritingSystem>*sipRes;

            sipRes = new  ::QList< ::QFontDatabase::WritingSystem>(sipCpp->writingSystems(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QFontDatabase_WritingSystem,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontDatabase, sipName_writingSystems, doc_QFontDatabase_writingSystems);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontDatabase_families, "families(self, writingSystem: QFontDatabase.WritingSystem = QFontDatabase.Any) -> List[str]");

extern "C" {static PyObject *meth_QFontDatabase_families(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFontDatabase_families(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFontDatabase::WritingSystem a0 = QFontDatabase::Any;
        const  ::QFontDatabase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_writingSystem,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|E", &sipSelf, sipType_QFontDatabase, &sipCpp, sipType_QFontDatabase_WritingSystem, &a0))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->families(a0));

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontDatabase, sipName_families, doc_QFontDatabase_families);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontDatabase_styles, "styles(self, str) -> List[str]");

extern "C" {static PyObject *meth_QFontDatabase_styles(PyObject *, PyObject *);}
static PyObject *meth_QFontDatabase_styles(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QFontDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFontDatabase, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->styles(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontDatabase, sipName_styles, doc_QFontDatabase_styles);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontDatabase_pointSizes, "pointSizes(self, str, style: str = '') -> List[int]");

extern "C" {static PyObject *meth_QFontDatabase_pointSizes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFontDatabase_pointSizes(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
         ::QFontDatabase *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J1", &sipSelf, sipType_QFontDatabase, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
             ::QList<int>*sipRes;

            sipRes = new  ::QList<int>(sipCpp->pointSizes(*a0,*a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QList_1800,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontDatabase, sipName_pointSizes, doc_QFontDatabase_pointSizes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontDatabase_smoothSizes, "smoothSizes(self, str, str) -> List[int]");

extern "C" {static PyObject *meth_QFontDatabase_smoothSizes(PyObject *, PyObject *);}
static PyObject *meth_QFontDatabase_smoothSizes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QFontDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QFontDatabase, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
             ::QList<int>*sipRes;

            sipRes = new  ::QList<int>(sipCpp->smoothSizes(*a0,*a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QList_1800,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontDatabase, sipName_smoothSizes, doc_QFontDatabase_smoothSizes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontDatabase_styleString, "styleString(self, QFont) -> str\n"
"styleString(self, QFontInfo) -> str");

extern "C" {static PyObject *meth_QFontDatabase_styleString(PyObject *, PyObject *);}
static PyObject *meth_QFontDatabase_styleString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont* a0;
         ::QFontDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFontDatabase, &sipCpp, sipType_QFont, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->styleString(*a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    {
        const  ::QFontInfo* a0;
         ::QFontDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFontDatabase, &sipCpp, sipType_QFontInfo, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->styleString(*a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontDatabase, sipName_styleString, doc_QFontDatabase_styleString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontDatabase_font, "font(self, str, str, int) -> QFont");

extern "C" {static PyObject *meth_QFontDatabase_font(PyObject *, PyObject *);}
static PyObject *meth_QFontDatabase_font(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        int a2;
        const  ::QFontDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1i", &sipSelf, sipType_QFontDatabase, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, &a2))
        {
             ::QFont*sipRes;

            sipRes = new  ::QFont(sipCpp->font(*a0,*a1,a2));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QFont,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontDatabase, sipName_font, doc_QFontDatabase_font);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontDatabase_isBitmapScalable, "isBitmapScalable(self, str, style: str = '') -> bool");

extern "C" {static PyObject *meth_QFontDatabase_isBitmapScalable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFontDatabase_isBitmapScalable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        const  ::QFontDatabase *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J1", &sipSelf, sipType_QFontDatabase, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->isBitmapScalable(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontDatabase, sipName_isBitmapScalable, doc_QFontDatabase_isBitmapScalable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontDatabase_isSmoothlyScalable, "isSmoothlyScalable(self, str, style: str = '') -> bool");

extern "C" {static PyObject *meth_QFontDatabase_isSmoothlyScalable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFontDatabase_isSmoothlyScalable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        const  ::QFontDatabase *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J1", &sipSelf, sipType_QFontDatabase, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->isSmoothlyScalable(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontDatabase, sipName_isSmoothlyScalable, doc_QFontDatabase_isSmoothlyScalable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontDatabase_isScalable, "isScalable(self, str, style: str = '') -> bool");

extern "C" {static PyObject *meth_QFontDatabase_isScalable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFontDatabase_isScalable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        const  ::QFontDatabase *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J1", &sipSelf, sipType_QFontDatabase, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->isScalable(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontDatabase, sipName_isScalable, doc_QFontDatabase_isScalable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontDatabase_isFixedPitch, "isFixedPitch(self, str, style: str = '') -> bool");

extern "C" {static PyObject *meth_QFontDatabase_isFixedPitch(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFontDatabase_isFixedPitch(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        const  ::QFontDatabase *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J1", &sipSelf, sipType_QFontDatabase, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->isFixedPitch(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontDatabase, sipName_isFixedPitch, doc_QFontDatabase_isFixedPitch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontDatabase_italic, "italic(self, str, str) -> bool");

extern "C" {static PyObject *meth_QFontDatabase_italic(PyObject *, PyObject *);}
static PyObject *meth_QFontDatabase_italic(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QFontDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QFontDatabase, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->italic(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontDatabase, sipName_italic, doc_QFontDatabase_italic);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontDatabase_bold, "bold(self, str, str) -> bool");

extern "C" {static PyObject *meth_QFontDatabase_bold(PyObject *, PyObject *);}
static PyObject *meth_QFontDatabase_bold(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QFontDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QFontDatabase, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->bold(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontDatabase, sipName_bold, doc_QFontDatabase_bold);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontDatabase_weight, "weight(self, str, str) -> int");

extern "C" {static PyObject *meth_QFontDatabase_weight(PyObject *, PyObject *);}
static PyObject *meth_QFontDatabase_weight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QFontDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QFontDatabase, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            int sipRes;

            sipRes = sipCpp->weight(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontDatabase, sipName_weight, doc_QFontDatabase_weight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontDatabase_writingSystemName, "writingSystemName(QFontDatabase.WritingSystem) -> str");

extern "C" {static PyObject *meth_QFontDatabase_writingSystemName(PyObject *, PyObject *);}
static PyObject *meth_QFontDatabase_writingSystemName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFontDatabase::WritingSystem a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QFontDatabase_WritingSystem, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QFontDatabase::writingSystemName(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontDatabase, sipName_writingSystemName, doc_QFontDatabase_writingSystemName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontDatabase_writingSystemSample, "writingSystemSample(QFontDatabase.WritingSystem) -> str");

extern "C" {static PyObject *meth_QFontDatabase_writingSystemSample(PyObject *, PyObject *);}
static PyObject *meth_QFontDatabase_writingSystemSample(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFontDatabase::WritingSystem a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QFontDatabase_WritingSystem, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QFontDatabase::writingSystemSample(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontDatabase, sipName_writingSystemSample, doc_QFontDatabase_writingSystemSample);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontDatabase_addApplicationFont, "addApplicationFont(str) -> int");

extern "C" {static PyObject *meth_QFontDatabase_addApplicationFont(PyObject *, PyObject *);}
static PyObject *meth_QFontDatabase_addApplicationFont(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            int sipRes;

            sipRes =  ::QFontDatabase::addApplicationFont(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontDatabase, sipName_addApplicationFont, doc_QFontDatabase_addApplicationFont);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontDatabase_addApplicationFontFromData, "addApplicationFontFromData(Union[QByteArray, bytes, bytearray]) -> int");

extern "C" {static PyObject *meth_QFontDatabase_addApplicationFontFromData(PyObject *, PyObject *);}
static PyObject *meth_QFontDatabase_addApplicationFontFromData(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QByteArray, &a0, &a0State))
        {
            int sipRes;

            sipRes =  ::QFontDatabase::addApplicationFontFromData(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontDatabase, sipName_addApplicationFontFromData, doc_QFontDatabase_addApplicationFontFromData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontDatabase_applicationFontFamilies, "applicationFontFamilies(int) -> List[str]");

extern "C" {static PyObject *meth_QFontDatabase_applicationFontFamilies(PyObject *, PyObject *);}
static PyObject *meth_QFontDatabase_applicationFontFamilies(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList( ::QFontDatabase::applicationFontFamilies(a0));

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontDatabase, sipName_applicationFontFamilies, doc_QFontDatabase_applicationFontFamilies);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontDatabase_removeApplicationFont, "removeApplicationFont(int) -> bool");

extern "C" {static PyObject *meth_QFontDatabase_removeApplicationFont(PyObject *, PyObject *);}
static PyObject *meth_QFontDatabase_removeApplicationFont(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
            bool sipRes;

            sipRes =  ::QFontDatabase::removeApplicationFont(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontDatabase, sipName_removeApplicationFont, doc_QFontDatabase_removeApplicationFont);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontDatabase_removeAllApplicationFonts, "removeAllApplicationFonts() -> bool");

extern "C" {static PyObject *meth_QFontDatabase_removeAllApplicationFonts(PyObject *, PyObject *);}
static PyObject *meth_QFontDatabase_removeAllApplicationFonts(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes =  ::QFontDatabase::removeAllApplicationFonts();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontDatabase, sipName_removeAllApplicationFonts, doc_QFontDatabase_removeAllApplicationFonts);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontDatabase_supportsThreadedFontRendering, "supportsThreadedFontRendering() -> bool");

extern "C" {static PyObject *meth_QFontDatabase_supportsThreadedFontRendering(PyObject *, PyObject *);}
static PyObject *meth_QFontDatabase_supportsThreadedFontRendering(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes =  ::QFontDatabase::supportsThreadedFontRendering();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontDatabase, sipName_supportsThreadedFontRendering, doc_QFontDatabase_supportsThreadedFontRendering);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontDatabase_systemFont, "systemFont(QFontDatabase.SystemFont) -> QFont");

extern "C" {static PyObject *meth_QFontDatabase_systemFont(PyObject *, PyObject *);}
static PyObject *meth_QFontDatabase_systemFont(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFontDatabase::SystemFont a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QFontDatabase_SystemFont, &a0))
        {
             ::QFont*sipRes;

            sipRes = new  ::QFont( ::QFontDatabase::systemFont(a0));

            return sipConvertFromNewType(sipRes,sipType_QFont,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontDatabase, sipName_systemFont, doc_QFontDatabase_systemFont);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFontDatabase_isPrivateFamily, "isPrivateFamily(self, str) -> bool");

extern "C" {static PyObject *meth_QFontDatabase_isPrivateFamily(PyObject *, PyObject *);}
static PyObject *meth_QFontDatabase_isPrivateFamily(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QFontDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFontDatabase, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->isPrivateFamily(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFontDatabase, sipName_isPrivateFamily, doc_QFontDatabase_isPrivateFamily);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QFontDatabase(void *, int);}
static void release_QFontDatabase(void *sipCppV, int)
{
    delete reinterpret_cast< ::QFontDatabase *>(sipCppV);
}


extern "C" {static void assign_QFontDatabase(void *, SIP_SSIZE_T, void *);}
static void assign_QFontDatabase(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QFontDatabase *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QFontDatabase *>(sipSrc);
}


extern "C" {static void *array_QFontDatabase(SIP_SSIZE_T);}
static void *array_QFontDatabase(SIP_SSIZE_T sipNrElem)
{
    return new  ::QFontDatabase[sipNrElem];
}


extern "C" {static void *copy_QFontDatabase(const void *, SIP_SSIZE_T);}
static void *copy_QFontDatabase(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QFontDatabase(reinterpret_cast<const  ::QFontDatabase *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QFontDatabase(sipSimpleWrapper *);}
static void dealloc_QFontDatabase(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QFontDatabase(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QFontDatabase(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QFontDatabase(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QFontDatabase *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QFontDatabase();

            return sipCpp;
        }
    }

    {
        const  ::QFontDatabase* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QFontDatabase, &a0))
        {
            sipCpp = new  ::QFontDatabase(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QFontDatabase[] = {
    {SIP_MLNAME_CAST(sipName_addApplicationFont), meth_QFontDatabase_addApplicationFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontDatabase_addApplicationFont)},
    {SIP_MLNAME_CAST(sipName_addApplicationFontFromData), meth_QFontDatabase_addApplicationFontFromData, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontDatabase_addApplicationFontFromData)},
    {SIP_MLNAME_CAST(sipName_applicationFontFamilies), meth_QFontDatabase_applicationFontFamilies, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontDatabase_applicationFontFamilies)},
    {SIP_MLNAME_CAST(sipName_bold), meth_QFontDatabase_bold, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontDatabase_bold)},
    {SIP_MLNAME_CAST(sipName_families), SIP_MLMETH_CAST(meth_QFontDatabase_families), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFontDatabase_families)},
    {SIP_MLNAME_CAST(sipName_font), meth_QFontDatabase_font, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontDatabase_font)},
    {SIP_MLNAME_CAST(sipName_isBitmapScalable), SIP_MLMETH_CAST(meth_QFontDatabase_isBitmapScalable), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFontDatabase_isBitmapScalable)},
    {SIP_MLNAME_CAST(sipName_isFixedPitch), SIP_MLMETH_CAST(meth_QFontDatabase_isFixedPitch), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFontDatabase_isFixedPitch)},
    {SIP_MLNAME_CAST(sipName_isPrivateFamily), meth_QFontDatabase_isPrivateFamily, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontDatabase_isPrivateFamily)},
    {SIP_MLNAME_CAST(sipName_isScalable), SIP_MLMETH_CAST(meth_QFontDatabase_isScalable), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFontDatabase_isScalable)},
    {SIP_MLNAME_CAST(sipName_isSmoothlyScalable), SIP_MLMETH_CAST(meth_QFontDatabase_isSmoothlyScalable), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFontDatabase_isSmoothlyScalable)},
    {SIP_MLNAME_CAST(sipName_italic), meth_QFontDatabase_italic, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontDatabase_italic)},
    {SIP_MLNAME_CAST(sipName_pointSizes), SIP_MLMETH_CAST(meth_QFontDatabase_pointSizes), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFontDatabase_pointSizes)},
    {SIP_MLNAME_CAST(sipName_removeAllApplicationFonts), meth_QFontDatabase_removeAllApplicationFonts, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontDatabase_removeAllApplicationFonts)},
    {SIP_MLNAME_CAST(sipName_removeApplicationFont), meth_QFontDatabase_removeApplicationFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontDatabase_removeApplicationFont)},
    {SIP_MLNAME_CAST(sipName_smoothSizes), meth_QFontDatabase_smoothSizes, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontDatabase_smoothSizes)},
    {SIP_MLNAME_CAST(sipName_standardSizes), meth_QFontDatabase_standardSizes, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontDatabase_standardSizes)},
    {SIP_MLNAME_CAST(sipName_styleString), meth_QFontDatabase_styleString, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontDatabase_styleString)},
    {SIP_MLNAME_CAST(sipName_styles), meth_QFontDatabase_styles, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontDatabase_styles)},
    {SIP_MLNAME_CAST(sipName_supportsThreadedFontRendering), meth_QFontDatabase_supportsThreadedFontRendering, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontDatabase_supportsThreadedFontRendering)},
    {SIP_MLNAME_CAST(sipName_systemFont), meth_QFontDatabase_systemFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontDatabase_systemFont)},
    {SIP_MLNAME_CAST(sipName_weight), meth_QFontDatabase_weight, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontDatabase_weight)},
    {SIP_MLNAME_CAST(sipName_writingSystemName), meth_QFontDatabase_writingSystemName, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontDatabase_writingSystemName)},
    {SIP_MLNAME_CAST(sipName_writingSystemSample), meth_QFontDatabase_writingSystemSample, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontDatabase_writingSystemSample)},
    {SIP_MLNAME_CAST(sipName_writingSystems), meth_QFontDatabase_writingSystems, METH_VARARGS, SIP_MLDOC_CAST(doc_QFontDatabase_writingSystems)}
};

static sipEnumMemberDef enummembers_QFontDatabase[] = {
    {sipName_Any, static_cast<int>( ::QFontDatabase::Any), 42},
    {sipName_Arabic, static_cast<int>( ::QFontDatabase::Arabic), 42},
    {sipName_Armenian, static_cast<int>( ::QFontDatabase::Armenian), 42},
    {sipName_Bengali, static_cast<int>( ::QFontDatabase::Bengali), 42},
    {sipName_Cyrillic, static_cast<int>( ::QFontDatabase::Cyrillic), 42},
    {sipName_Devanagari, static_cast<int>( ::QFontDatabase::Devanagari), 42},
    {sipName_FixedFont, static_cast<int>( ::QFontDatabase::FixedFont), 41},
    {sipName_GeneralFont, static_cast<int>( ::QFontDatabase::GeneralFont), 41},
    {sipName_Georgian, static_cast<int>( ::QFontDatabase::Georgian), 42},
    {sipName_Greek, static_cast<int>( ::QFontDatabase::Greek), 42},
    {sipName_Gujarati, static_cast<int>( ::QFontDatabase::Gujarati), 42},
    {sipName_Gurmukhi, static_cast<int>( ::QFontDatabase::Gurmukhi), 42},
    {sipName_Hebrew, static_cast<int>( ::QFontDatabase::Hebrew), 42},
    {sipName_Japanese, static_cast<int>( ::QFontDatabase::Japanese), 42},
    {sipName_Kannada, static_cast<int>( ::QFontDatabase::Kannada), 42},
    {sipName_Khmer, static_cast<int>( ::QFontDatabase::Khmer), 42},
    {sipName_Korean, static_cast<int>( ::QFontDatabase::Korean), 42},
    {sipName_Lao, static_cast<int>( ::QFontDatabase::Lao), 42},
    {sipName_Latin, static_cast<int>( ::QFontDatabase::Latin), 42},
    {sipName_Malayalam, static_cast<int>( ::QFontDatabase::Malayalam), 42},
    {sipName_Myanmar, static_cast<int>( ::QFontDatabase::Myanmar), 42},
    {sipName_Nko, static_cast<int>( ::QFontDatabase::Nko), 42},
    {sipName_Ogham, static_cast<int>( ::QFontDatabase::Ogham), 42},
    {sipName_Oriya, static_cast<int>( ::QFontDatabase::Oriya), 42},
    {sipName_Other, static_cast<int>( ::QFontDatabase::Other), 42},
    {sipName_Runic, static_cast<int>( ::QFontDatabase::Runic), 42},
    {sipName_SimplifiedChinese, static_cast<int>( ::QFontDatabase::SimplifiedChinese), 42},
    {sipName_Sinhala, static_cast<int>( ::QFontDatabase::Sinhala), 42},
    {sipName_SmallestReadableFont, static_cast<int>( ::QFontDatabase::SmallestReadableFont), 41},
    {sipName_Symbol, static_cast<int>( ::QFontDatabase::Symbol), 42},
    {sipName_Syriac, static_cast<int>( ::QFontDatabase::Syriac), 42},
    {sipName_Tamil, static_cast<int>( ::QFontDatabase::Tamil), 42},
    {sipName_Telugu, static_cast<int>( ::QFontDatabase::Telugu), 42},
    {sipName_Thaana, static_cast<int>( ::QFontDatabase::Thaana), 42},
    {sipName_Thai, static_cast<int>( ::QFontDatabase::Thai), 42},
    {sipName_Tibetan, static_cast<int>( ::QFontDatabase::Tibetan), 42},
    {sipName_TitleFont, static_cast<int>( ::QFontDatabase::TitleFont), 41},
    {sipName_TraditionalChinese, static_cast<int>( ::QFontDatabase::TraditionalChinese), 42},
    {sipName_Vietnamese, static_cast<int>( ::QFontDatabase::Vietnamese), 42},
};

PyDoc_STRVAR(doc_QFontDatabase, "\1QFontDatabase()\n"
"QFontDatabase(QFontDatabase)");


static pyqt5ClassPluginDef plugin_QFontDatabase = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QFontDatabase = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QFontDatabase,
        {SIP_NULLPTR},
        &plugin_QFontDatabase
    },
    {
        sipNameNr_QFontDatabase,
        {0, 0, 1},
        25, methods_QFontDatabase,
        39, enummembers_QFontDatabase,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QFontDatabase,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QFontDatabase,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QFontDatabase,
    assign_QFontDatabase,
    array_QFontDatabase,
    copy_QFontDatabase,
    release_QFontDatabase,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 59023 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 59027 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 59030 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 59033 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 59036 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QFont_family, "family(self) -> str");

extern "C" {static PyObject *meth_QFont_family(PyObject *, PyObject *);}
static PyObject *meth_QFont_family(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->family());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_family, doc_QFont_family);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_setFamily, "setFamily(self, str)");

extern "C" {static PyObject *meth_QFont_setFamily(PyObject *, PyObject *);}
static PyObject *meth_QFont_setFamily(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFont, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setFamily(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setFamily, doc_QFont_setFamily);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_pointSize, "pointSize(self) -> int");

extern "C" {static PyObject *meth_QFont_pointSize(PyObject *, PyObject *);}
static PyObject *meth_QFont_pointSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->pointSize();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_pointSize, doc_QFont_pointSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_setPointSize, "setPointSize(self, int)");

extern "C" {static PyObject *meth_QFont_setPointSize(PyObject *, PyObject *);}
static PyObject *meth_QFont_setPointSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QFont, &sipCpp, &a0))
        {
            sipCpp->setPointSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setPointSize, doc_QFont_setPointSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_pointSizeF, "pointSizeF(self) -> float");

extern "C" {static PyObject *meth_QFont_pointSizeF(PyObject *, PyObject *);}
static PyObject *meth_QFont_pointSizeF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->pointSizeF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_pointSizeF, doc_QFont_pointSizeF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_setPointSizeF, "setPointSizeF(self, float)");

extern "C" {static PyObject *meth_QFont_setPointSizeF(PyObject *, PyObject *);}
static PyObject *meth_QFont_setPointSizeF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QFont, &sipCpp, &a0))
        {
            sipCpp->setPointSizeF(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setPointSizeF, doc_QFont_setPointSizeF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_pixelSize, "pixelSize(self) -> int");

extern "C" {static PyObject *meth_QFont_pixelSize(PyObject *, PyObject *);}
static PyObject *meth_QFont_pixelSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->pixelSize();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_pixelSize, doc_QFont_pixelSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_setPixelSize, "setPixelSize(self, int)");

extern "C" {static PyObject *meth_QFont_setPixelSize(PyObject *, PyObject *);}
static PyObject *meth_QFont_setPixelSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QFont, &sipCpp, &a0))
        {
            sipCpp->setPixelSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setPixelSize, doc_QFont_setPixelSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_weight, "weight(self) -> int");

extern "C" {static PyObject *meth_QFont_weight(PyObject *, PyObject *);}
static PyObject *meth_QFont_weight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->weight();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_weight, doc_QFont_weight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_setWeight, "setWeight(self, int)");

extern "C" {static PyObject *meth_QFont_setWeight(PyObject *, PyObject *);}
static PyObject *meth_QFont_setWeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QFont, &sipCpp, &a0))
        {
            sipCpp->setWeight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setWeight, doc_QFont_setWeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_setStyle, "setStyle(self, QFont.Style)");

extern "C" {static PyObject *meth_QFont_setStyle(PyObject *, PyObject *);}
static PyObject *meth_QFont_setStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFont::Style a0;
         ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QFont, &sipCpp, sipType_QFont_Style, &a0))
        {
            sipCpp->setStyle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setStyle, doc_QFont_setStyle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_style, "style(self) -> QFont.Style");

extern "C" {static PyObject *meth_QFont_style(PyObject *, PyObject *);}
static PyObject *meth_QFont_style(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
             ::QFont::Style sipRes;

            sipRes = sipCpp->style();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QFont_Style);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_style, doc_QFont_style);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_underline, "underline(self) -> bool");

extern "C" {static PyObject *meth_QFont_underline(PyObject *, PyObject *);}
static PyObject *meth_QFont_underline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->underline();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_underline, doc_QFont_underline);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_setUnderline, "setUnderline(self, bool)");

extern "C" {static PyObject *meth_QFont_setUnderline(PyObject *, PyObject *);}
static PyObject *meth_QFont_setUnderline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QFont, &sipCpp, &a0))
        {
            sipCpp->setUnderline(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setUnderline, doc_QFont_setUnderline);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_overline, "overline(self) -> bool");

extern "C" {static PyObject *meth_QFont_overline(PyObject *, PyObject *);}
static PyObject *meth_QFont_overline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->overline();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_overline, doc_QFont_overline);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_setOverline, "setOverline(self, bool)");

extern "C" {static PyObject *meth_QFont_setOverline(PyObject *, PyObject *);}
static PyObject *meth_QFont_setOverline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QFont, &sipCpp, &a0))
        {
            sipCpp->setOverline(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setOverline, doc_QFont_setOverline);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_strikeOut, "strikeOut(self) -> bool");

extern "C" {static PyObject *meth_QFont_strikeOut(PyObject *, PyObject *);}
static PyObject *meth_QFont_strikeOut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->strikeOut();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_strikeOut, doc_QFont_strikeOut);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_setStrikeOut, "setStrikeOut(self, bool)");

extern "C" {static PyObject *meth_QFont_setStrikeOut(PyObject *, PyObject *);}
static PyObject *meth_QFont_setStrikeOut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QFont, &sipCpp, &a0))
        {
            sipCpp->setStrikeOut(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setStrikeOut, doc_QFont_setStrikeOut);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_fixedPitch, "fixedPitch(self) -> bool");

extern "C" {static PyObject *meth_QFont_fixedPitch(PyObject *, PyObject *);}
static PyObject *meth_QFont_fixedPitch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->fixedPitch();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_fixedPitch, doc_QFont_fixedPitch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_setFixedPitch, "setFixedPitch(self, bool)");

extern "C" {static PyObject *meth_QFont_setFixedPitch(PyObject *, PyObject *);}
static PyObject *meth_QFont_setFixedPitch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QFont, &sipCpp, &a0))
        {
            sipCpp->setFixedPitch(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setFixedPitch, doc_QFont_setFixedPitch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_kerning, "kerning(self) -> bool");

extern "C" {static PyObject *meth_QFont_kerning(PyObject *, PyObject *);}
static PyObject *meth_QFont_kerning(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->kerning();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_kerning, doc_QFont_kerning);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_setKerning, "setKerning(self, bool)");

extern "C" {static PyObject *meth_QFont_setKerning(PyObject *, PyObject *);}
static PyObject *meth_QFont_setKerning(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QFont, &sipCpp, &a0))
        {
            sipCpp->setKerning(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setKerning, doc_QFont_setKerning);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_styleHint, "styleHint(self) -> QFont.StyleHint");

extern "C" {static PyObject *meth_QFont_styleHint(PyObject *, PyObject *);}
static PyObject *meth_QFont_styleHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
             ::QFont::StyleHint sipRes;

            sipRes = sipCpp->styleHint();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QFont_StyleHint);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_styleHint, doc_QFont_styleHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_styleStrategy, "styleStrategy(self) -> QFont.StyleStrategy");

extern "C" {static PyObject *meth_QFont_styleStrategy(PyObject *, PyObject *);}
static PyObject *meth_QFont_styleStrategy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
             ::QFont::StyleStrategy sipRes;

            sipRes = sipCpp->styleStrategy();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QFont_StyleStrategy);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_styleStrategy, doc_QFont_styleStrategy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_setStyleHint, "setStyleHint(self, QFont.StyleHint, strategy: QFont.StyleStrategy = QFont.PreferDefault)");

extern "C" {static PyObject *meth_QFont_setStyleHint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFont_setStyleHint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFont::StyleHint a0;
         ::QFont::StyleStrategy a1 = QFont::PreferDefault;
         ::QFont *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_strategy,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE|E", &sipSelf, sipType_QFont, &sipCpp, sipType_QFont_StyleHint, &a0, sipType_QFont_StyleStrategy, &a1))
        {
            sipCpp->setStyleHint(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setStyleHint, doc_QFont_setStyleHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_setStyleStrategy, "setStyleStrategy(self, QFont.StyleStrategy)");

extern "C" {static PyObject *meth_QFont_setStyleStrategy(PyObject *, PyObject *);}
static PyObject *meth_QFont_setStyleStrategy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFont::StyleStrategy a0;
         ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QFont, &sipCpp, sipType_QFont_StyleStrategy, &a0))
        {
            sipCpp->setStyleStrategy(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setStyleStrategy, doc_QFont_setStyleStrategy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_stretch, "stretch(self) -> int");

extern "C" {static PyObject *meth_QFont_stretch(PyObject *, PyObject *);}
static PyObject *meth_QFont_stretch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->stretch();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_stretch, doc_QFont_stretch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_setStretch, "setStretch(self, int)");

extern "C" {static PyObject *meth_QFont_setStretch(PyObject *, PyObject *);}
static PyObject *meth_QFont_setStretch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QFont, &sipCpp, &a0))
        {
            sipCpp->setStretch(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setStretch, doc_QFont_setStretch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_rawMode, "rawMode(self) -> bool");

extern "C" {static PyObject *meth_QFont_rawMode(PyObject *, PyObject *);}
static PyObject *meth_QFont_rawMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->rawMode();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_rawMode, doc_QFont_rawMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_setRawMode, "setRawMode(self, bool)");

extern "C" {static PyObject *meth_QFont_setRawMode(PyObject *, PyObject *);}
static PyObject *meth_QFont_setRawMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QFont, &sipCpp, &a0))
        {
            sipCpp->setRawMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setRawMode, doc_QFont_setRawMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_exactMatch, "exactMatch(self) -> bool");

extern "C" {static PyObject *meth_QFont_exactMatch(PyObject *, PyObject *);}
static PyObject *meth_QFont_exactMatch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->exactMatch();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_exactMatch, doc_QFont_exactMatch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_isCopyOf, "isCopyOf(self, QFont) -> bool");

extern "C" {static PyObject *meth_QFont_isCopyOf(PyObject *, PyObject *);}
static PyObject *meth_QFont_isCopyOf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont* a0;
        const  ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFont, &sipCpp, sipType_QFont, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isCopyOf(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_isCopyOf, doc_QFont_isCopyOf);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_setRawName, "setRawName(self, str)");

extern "C" {static PyObject *meth_QFont_setRawName(PyObject *, PyObject *);}
static PyObject *meth_QFont_setRawName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFont, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setRawName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setRawName, doc_QFont_setRawName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_rawName, "rawName(self) -> str");

extern "C" {static PyObject *meth_QFont_rawName(PyObject *, PyObject *);}
static PyObject *meth_QFont_rawName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->rawName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_rawName, doc_QFont_rawName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_key, "key(self) -> str");

extern "C" {static PyObject *meth_QFont_key(PyObject *, PyObject *);}
static PyObject *meth_QFont_key(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->key());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_key, doc_QFont_key);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_toString, "toString(self) -> str");

extern "C" {static PyObject *meth_QFont_toString(PyObject *, PyObject *);}
static PyObject *meth_QFont_toString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_toString, doc_QFont_toString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_fromString, "fromString(self, str) -> bool");

extern "C" {static PyObject *meth_QFont_fromString(PyObject *, PyObject *);}
static PyObject *meth_QFont_fromString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFont, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->fromString(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_fromString, doc_QFont_fromString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_substitute, "substitute(str) -> str");

extern "C" {static PyObject *meth_QFont_substitute(PyObject *, PyObject *);}
static PyObject *meth_QFont_substitute(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QFont::substitute(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_substitute, doc_QFont_substitute);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_substitutes, "substitutes(str) -> List[str]");

extern "C" {static PyObject *meth_QFont_substitutes(PyObject *, PyObject *);}
static PyObject *meth_QFont_substitutes(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList( ::QFont::substitutes(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_substitutes, doc_QFont_substitutes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_substitutions, "substitutions() -> List[str]");

extern "C" {static PyObject *meth_QFont_substitutions(PyObject *, PyObject *);}
static PyObject *meth_QFont_substitutions(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList( ::QFont::substitutions());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_substitutions, doc_QFont_substitutions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_insertSubstitution, "insertSubstitution(str, str)");

extern "C" {static PyObject *meth_QFont_insertSubstitution(PyObject *, PyObject *);}
static PyObject *meth_QFont_insertSubstitution(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
             ::QFont::insertSubstitution(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_insertSubstitution, doc_QFont_insertSubstitution);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_insertSubstitutions, "insertSubstitutions(str, Iterable[str])");

extern "C" {static PyObject *meth_QFont_insertSubstitutions(PyObject *, PyObject *);}
static PyObject *meth_QFont_insertSubstitutions(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QStringList* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QString,&a0, &a0State, sipType_QStringList,&a1, &a1State))
        {
             ::QFont::insertSubstitutions(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QStringList *>(a1),sipType_QStringList,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_insertSubstitutions, doc_QFont_insertSubstitutions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_removeSubstitutions, "removeSubstitutions(str)");

extern "C" {static PyObject *meth_QFont_removeSubstitutions(PyObject *, PyObject *);}
static PyObject *meth_QFont_removeSubstitutions(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QFont::removeSubstitutions(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_removeSubstitutions, doc_QFont_removeSubstitutions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_initialize, "initialize()");

extern "C" {static PyObject *meth_QFont_initialize(PyObject *, PyObject *);}
static PyObject *meth_QFont_initialize(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QFont::initialize();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_initialize, doc_QFont_initialize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_cleanup, "cleanup()");

extern "C" {static PyObject *meth_QFont_cleanup(PyObject *, PyObject *);}
static PyObject *meth_QFont_cleanup(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QFont::cleanup();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_cleanup, doc_QFont_cleanup);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_cacheStatistics, "cacheStatistics()");

extern "C" {static PyObject *meth_QFont_cacheStatistics(PyObject *, PyObject *);}
static PyObject *meth_QFont_cacheStatistics(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QFont::cacheStatistics();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_cacheStatistics, doc_QFont_cacheStatistics);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_defaultFamily, "defaultFamily(self) -> str");

extern "C" {static PyObject *meth_QFont_defaultFamily(PyObject *, PyObject *);}
static PyObject *meth_QFont_defaultFamily(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->defaultFamily());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_defaultFamily, doc_QFont_defaultFamily);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_lastResortFamily, "lastResortFamily(self) -> str");

extern "C" {static PyObject *meth_QFont_lastResortFamily(PyObject *, PyObject *);}
static PyObject *meth_QFont_lastResortFamily(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->lastResortFamily());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_lastResortFamily, doc_QFont_lastResortFamily);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_lastResortFont, "lastResortFont(self) -> str");

extern "C" {static PyObject *meth_QFont_lastResortFont(PyObject *, PyObject *);}
static PyObject *meth_QFont_lastResortFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->lastResortFont());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_lastResortFont, doc_QFont_lastResortFont);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_resolve, "resolve(self, QFont) -> QFont");

extern "C" {static PyObject *meth_QFont_resolve(PyObject *, PyObject *);}
static PyObject *meth_QFont_resolve(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont* a0;
        const  ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFont, &sipCpp, sipType_QFont, &a0))
        {
             ::QFont*sipRes;

            sipRes = new  ::QFont(sipCpp->resolve(*a0));

            return sipConvertFromNewType(sipRes,sipType_QFont,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_resolve, doc_QFont_resolve);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_bold, "bold(self) -> bool");

extern "C" {static PyObject *meth_QFont_bold(PyObject *, PyObject *);}
static PyObject *meth_QFont_bold(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->bold();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_bold, doc_QFont_bold);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_setBold, "setBold(self, bool)");

extern "C" {static PyObject *meth_QFont_setBold(PyObject *, PyObject *);}
static PyObject *meth_QFont_setBold(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QFont, &sipCpp, &a0))
        {
            sipCpp->setBold(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setBold, doc_QFont_setBold);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_italic, "italic(self) -> bool");

extern "C" {static PyObject *meth_QFont_italic(PyObject *, PyObject *);}
static PyObject *meth_QFont_italic(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->italic();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_italic, doc_QFont_italic);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_setItalic, "setItalic(self, bool)");

extern "C" {static PyObject *meth_QFont_setItalic(PyObject *, PyObject *);}
static PyObject *meth_QFont_setItalic(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QFont, &sipCpp, &a0))
        {
            sipCpp->setItalic(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setItalic, doc_QFont_setItalic);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_letterSpacing, "letterSpacing(self) -> float");

extern "C" {static PyObject *meth_QFont_letterSpacing(PyObject *, PyObject *);}
static PyObject *meth_QFont_letterSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->letterSpacing();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_letterSpacing, doc_QFont_letterSpacing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_letterSpacingType, "letterSpacingType(self) -> QFont.SpacingType");

extern "C" {static PyObject *meth_QFont_letterSpacingType(PyObject *, PyObject *);}
static PyObject *meth_QFont_letterSpacingType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
             ::QFont::SpacingType sipRes;

            sipRes = sipCpp->letterSpacingType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QFont_SpacingType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_letterSpacingType, doc_QFont_letterSpacingType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_setLetterSpacing, "setLetterSpacing(self, QFont.SpacingType, float)");

extern "C" {static PyObject *meth_QFont_setLetterSpacing(PyObject *, PyObject *);}
static PyObject *meth_QFont_setLetterSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFont::SpacingType a0;
         ::qreal a1;
         ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEd", &sipSelf, sipType_QFont, &sipCpp, sipType_QFont_SpacingType, &a0, &a1))
        {
            sipCpp->setLetterSpacing(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setLetterSpacing, doc_QFont_setLetterSpacing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_wordSpacing, "wordSpacing(self) -> float");

extern "C" {static PyObject *meth_QFont_wordSpacing(PyObject *, PyObject *);}
static PyObject *meth_QFont_wordSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->wordSpacing();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_wordSpacing, doc_QFont_wordSpacing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_setWordSpacing, "setWordSpacing(self, float)");

extern "C" {static PyObject *meth_QFont_setWordSpacing(PyObject *, PyObject *);}
static PyObject *meth_QFont_setWordSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QFont, &sipCpp, &a0))
        {
            sipCpp->setWordSpacing(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setWordSpacing, doc_QFont_setWordSpacing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_setCapitalization, "setCapitalization(self, QFont.Capitalization)");

extern "C" {static PyObject *meth_QFont_setCapitalization(PyObject *, PyObject *);}
static PyObject *meth_QFont_setCapitalization(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFont::Capitalization a0;
         ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QFont, &sipCpp, sipType_QFont_Capitalization, &a0))
        {
            sipCpp->setCapitalization(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setCapitalization, doc_QFont_setCapitalization);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_capitalization, "capitalization(self) -> QFont.Capitalization");

extern "C" {static PyObject *meth_QFont_capitalization(PyObject *, PyObject *);}
static PyObject *meth_QFont_capitalization(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
             ::QFont::Capitalization sipRes;

            sipRes = sipCpp->capitalization();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QFont_Capitalization);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_capitalization, doc_QFont_capitalization);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_styleName, "styleName(self) -> str");

extern "C" {static PyObject *meth_QFont_styleName(PyObject *, PyObject *);}
static PyObject *meth_QFont_styleName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->styleName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_styleName, doc_QFont_styleName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_setStyleName, "setStyleName(self, str)");

extern "C" {static PyObject *meth_QFont_setStyleName(PyObject *, PyObject *);}
static PyObject *meth_QFont_setStyleName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFont, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setStyleName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setStyleName, doc_QFont_setStyleName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_setHintingPreference, "setHintingPreference(self, QFont.HintingPreference)");

extern "C" {static PyObject *meth_QFont_setHintingPreference(PyObject *, PyObject *);}
static PyObject *meth_QFont_setHintingPreference(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFont::HintingPreference a0;
         ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QFont, &sipCpp, sipType_QFont_HintingPreference, &a0))
        {
            sipCpp->setHintingPreference(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_setHintingPreference, doc_QFont_setHintingPreference);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_hintingPreference, "hintingPreference(self) -> QFont.HintingPreference");

extern "C" {static PyObject *meth_QFont_hintingPreference(PyObject *, PyObject *);}
static PyObject *meth_QFont_hintingPreference(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFont, &sipCpp))
        {
             ::QFont::HintingPreference sipRes;

            sipRes = sipCpp->hintingPreference();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QFont_HintingPreference);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_hintingPreference, doc_QFont_hintingPreference);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFont_swap, "swap(self, QFont)");

extern "C" {static PyObject *meth_QFont_swap(PyObject *, PyObject *);}
static PyObject *meth_QFont_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFont* a0;
         ::QFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFont, &sipCpp, sipType_QFont, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFont, sipName_swap, doc_QFont_swap);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QFont___ge__(PyObject *,PyObject *);}
static PyObject *slot_QFont___ge__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QFont *sipCpp = reinterpret_cast< ::QFont *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFont));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QFont, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::QFont::operator<(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ge_slot, sipType_QFont, sipSelf, sipArg);
}


extern "C" {static long slot_QFont___hash__(PyObject *);}
static long slot_QFont___hash__(PyObject *sipSelf)
{
     ::QFont *sipCpp = reinterpret_cast< ::QFont *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFont));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 223 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qfont.sip"
        sipRes = qHash(*sipCpp);
#line 60954 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QFont___lt__(PyObject *,PyObject *);}
static PyObject *slot_QFont___lt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QFont *sipCpp = reinterpret_cast< ::QFont *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFont));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QFont, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QFont::operator<(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, lt_slot, sipType_QFont, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QFont___ne__(PyObject *,PyObject *);}
static PyObject *slot_QFont___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QFont *sipCpp = reinterpret_cast< ::QFont *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFont));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QFont, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QFont::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QFont, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QFont___eq__(PyObject *,PyObject *);}
static PyObject *slot_QFont___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QFont *sipCpp = reinterpret_cast< ::QFont *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFont));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QFont, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QFont::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QFont, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QFont(void *, int);}
static void release_QFont(void *sipCppV, int)
{
    delete reinterpret_cast< ::QFont *>(sipCppV);
}


extern "C" {static void assign_QFont(void *, SIP_SSIZE_T, void *);}
static void assign_QFont(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QFont *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QFont *>(sipSrc);
}


extern "C" {static void *array_QFont(SIP_SSIZE_T);}
static void *array_QFont(SIP_SSIZE_T sipNrElem)
{
    return new  ::QFont[sipNrElem];
}


extern "C" {static void *copy_QFont(const void *, SIP_SSIZE_T);}
static void *copy_QFont(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QFont(reinterpret_cast<const  ::QFont *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QFont(sipSimpleWrapper *);}
static void dealloc_QFont(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QFont(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QFont(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QFont(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QFont *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QFont();

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1 = -1;
        int a2 = -1;
        bool a3 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_pointSize,
            sipName_weight,
            sipName_italic,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|iib", sipType_QString,&a0, &a0State, &a1, &a2, &a3))
        {
            sipCpp = new  ::QFont(*a0,a1,a2,a3);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QFont* a0;
         ::QPaintDevice* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9J8", sipType_QFont, &a0, sipType_QPaintDevice, &a1))
        {
            sipCpp = new  ::QFont(*a0,a1);

            return sipCpp;
        }
    }

    {
        const  ::QFont* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QFont, &a0))
        {
            sipCpp = new  ::QFont(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QVariant* a0;
        PyObject *a0Wrapper;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "@J1", &a0Wrapper, sipType_QVariant, &a0, &a0State))
        {
            sipErrorState sipError = sipErrorNone;

#line 119 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qfont.sip"
        if (a0->canConvert<QFont>())
            sipCpp = new QFont(a0->value<QFont>());
        else
            sipError = sipBadCallableArg(0, a0Wrapper);
#line 61173 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            if (sipError == sipErrorNone)
                return sipCpp;

            if (sipUnused)
            {
                Py_XDECREF(*sipUnused);
            }

            sipAddException(sipError, sipParseErr);

            if (sipError == sipErrorFail)
                return SIP_NULLPTR;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QFont[] = {
    {(void *)slot_QFont___ge__, ge_slot},
    {(void *)slot_QFont___hash__, hash_slot},
    {(void *)slot_QFont___lt__, lt_slot},
    {(void *)slot_QFont___ne__, ne_slot},
    {(void *)slot_QFont___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QFont[] = {
    {SIP_MLNAME_CAST(sipName_bold), meth_QFont_bold, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_bold)},
    {SIP_MLNAME_CAST(sipName_cacheStatistics), meth_QFont_cacheStatistics, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_cacheStatistics)},
    {SIP_MLNAME_CAST(sipName_capitalization), meth_QFont_capitalization, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_capitalization)},
    {SIP_MLNAME_CAST(sipName_cleanup), meth_QFont_cleanup, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_cleanup)},
    {SIP_MLNAME_CAST(sipName_defaultFamily), meth_QFont_defaultFamily, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_defaultFamily)},
    {SIP_MLNAME_CAST(sipName_exactMatch), meth_QFont_exactMatch, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_exactMatch)},
    {SIP_MLNAME_CAST(sipName_family), meth_QFont_family, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_family)},
    {SIP_MLNAME_CAST(sipName_fixedPitch), meth_QFont_fixedPitch, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_fixedPitch)},
    {SIP_MLNAME_CAST(sipName_fromString), meth_QFont_fromString, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_fromString)},
    {SIP_MLNAME_CAST(sipName_hintingPreference), meth_QFont_hintingPreference, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_hintingPreference)},
    {SIP_MLNAME_CAST(sipName_initialize), meth_QFont_initialize, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_initialize)},
    {SIP_MLNAME_CAST(sipName_insertSubstitution), meth_QFont_insertSubstitution, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_insertSubstitution)},
    {SIP_MLNAME_CAST(sipName_insertSubstitutions), meth_QFont_insertSubstitutions, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_insertSubstitutions)},
    {SIP_MLNAME_CAST(sipName_isCopyOf), meth_QFont_isCopyOf, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_isCopyOf)},
    {SIP_MLNAME_CAST(sipName_italic), meth_QFont_italic, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_italic)},
    {SIP_MLNAME_CAST(sipName_kerning), meth_QFont_kerning, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_kerning)},
    {SIP_MLNAME_CAST(sipName_key), meth_QFont_key, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_key)},
    {SIP_MLNAME_CAST(sipName_lastResortFamily), meth_QFont_lastResortFamily, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_lastResortFamily)},
    {SIP_MLNAME_CAST(sipName_lastResortFont), meth_QFont_lastResortFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_lastResortFont)},
    {SIP_MLNAME_CAST(sipName_letterSpacing), meth_QFont_letterSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_letterSpacing)},
    {SIP_MLNAME_CAST(sipName_letterSpacingType), meth_QFont_letterSpacingType, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_letterSpacingType)},
    {SIP_MLNAME_CAST(sipName_overline), meth_QFont_overline, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_overline)},
    {SIP_MLNAME_CAST(sipName_pixelSize), meth_QFont_pixelSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_pixelSize)},
    {SIP_MLNAME_CAST(sipName_pointSize), meth_QFont_pointSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_pointSize)},
    {SIP_MLNAME_CAST(sipName_pointSizeF), meth_QFont_pointSizeF, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_pointSizeF)},
    {SIP_MLNAME_CAST(sipName_rawMode), meth_QFont_rawMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_rawMode)},
    {SIP_MLNAME_CAST(sipName_rawName), meth_QFont_rawName, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_rawName)},
    {SIP_MLNAME_CAST(sipName_removeSubstitutions), meth_QFont_removeSubstitutions, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_removeSubstitutions)},
    {SIP_MLNAME_CAST(sipName_resolve), meth_QFont_resolve, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_resolve)},
    {SIP_MLNAME_CAST(sipName_setBold), meth_QFont_setBold, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setBold)},
    {SIP_MLNAME_CAST(sipName_setCapitalization), meth_QFont_setCapitalization, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setCapitalization)},
    {SIP_MLNAME_CAST(sipName_setFamily), meth_QFont_setFamily, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setFamily)},
    {SIP_MLNAME_CAST(sipName_setFixedPitch), meth_QFont_setFixedPitch, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setFixedPitch)},
    {SIP_MLNAME_CAST(sipName_setHintingPreference), meth_QFont_setHintingPreference, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setHintingPreference)},
    {SIP_MLNAME_CAST(sipName_setItalic), meth_QFont_setItalic, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setItalic)},
    {SIP_MLNAME_CAST(sipName_setKerning), meth_QFont_setKerning, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setKerning)},
    {SIP_MLNAME_CAST(sipName_setLetterSpacing), meth_QFont_setLetterSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setLetterSpacing)},
    {SIP_MLNAME_CAST(sipName_setOverline), meth_QFont_setOverline, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setOverline)},
    {SIP_MLNAME_CAST(sipName_setPixelSize), meth_QFont_setPixelSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setPixelSize)},
    {SIP_MLNAME_CAST(sipName_setPointSize), meth_QFont_setPointSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setPointSize)},
    {SIP_MLNAME_CAST(sipName_setPointSizeF), meth_QFont_setPointSizeF, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setPointSizeF)},
    {SIP_MLNAME_CAST(sipName_setRawMode), meth_QFont_setRawMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setRawMode)},
    {SIP_MLNAME_CAST(sipName_setRawName), meth_QFont_setRawName, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setRawName)},
    {SIP_MLNAME_CAST(sipName_setStretch), meth_QFont_setStretch, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setStretch)},
    {SIP_MLNAME_CAST(sipName_setStrikeOut), meth_QFont_setStrikeOut, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setStrikeOut)},
    {SIP_MLNAME_CAST(sipName_setStyle), meth_QFont_setStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setStyle)},
    {SIP_MLNAME_CAST(sipName_setStyleHint), SIP_MLMETH_CAST(meth_QFont_setStyleHint), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFont_setStyleHint)},
    {SIP_MLNAME_CAST(sipName_setStyleName), meth_QFont_setStyleName, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setStyleName)},
    {SIP_MLNAME_CAST(sipName_setStyleStrategy), meth_QFont_setStyleStrategy, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setStyleStrategy)},
    {SIP_MLNAME_CAST(sipName_setUnderline), meth_QFont_setUnderline, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setUnderline)},
    {SIP_MLNAME_CAST(sipName_setWeight), meth_QFont_setWeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setWeight)},
    {SIP_MLNAME_CAST(sipName_setWordSpacing), meth_QFont_setWordSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_setWordSpacing)},
    {SIP_MLNAME_CAST(sipName_stretch), meth_QFont_stretch, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_stretch)},
    {SIP_MLNAME_CAST(sipName_strikeOut), meth_QFont_strikeOut, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_strikeOut)},
    {SIP_MLNAME_CAST(sipName_style), meth_QFont_style, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_style)},
    {SIP_MLNAME_CAST(sipName_styleHint), meth_QFont_styleHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_styleHint)},
    {SIP_MLNAME_CAST(sipName_styleName), meth_QFont_styleName, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_styleName)},
    {SIP_MLNAME_CAST(sipName_styleStrategy), meth_QFont_styleStrategy, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_styleStrategy)},
    {SIP_MLNAME_CAST(sipName_substitute), meth_QFont_substitute, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_substitute)},
    {SIP_MLNAME_CAST(sipName_substitutes), meth_QFont_substitutes, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_substitutes)},
    {SIP_MLNAME_CAST(sipName_substitutions), meth_QFont_substitutions, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_substitutions)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QFont_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_swap)},
    {SIP_MLNAME_CAST(sipName_toString), meth_QFont_toString, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_toString)},
    {SIP_MLNAME_CAST(sipName_underline), meth_QFont_underline, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_underline)},
    {SIP_MLNAME_CAST(sipName_weight), meth_QFont_weight, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_weight)},
    {SIP_MLNAME_CAST(sipName_wordSpacing), meth_QFont_wordSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QFont_wordSpacing)}
};

static sipEnumMemberDef enummembers_QFont[] = {
    {sipName_AbsoluteSpacing, static_cast<int>( ::QFont::AbsoluteSpacing), 34},
    {sipName_AllLowercase, static_cast<int>( ::QFont::AllLowercase), 32},
    {sipName_AllUppercase, static_cast<int>( ::QFont::AllUppercase), 32},
    {sipName_AnyStretch, static_cast<int>( ::QFont::AnyStretch), 35},
    {sipName_AnyStyle, static_cast<int>( ::QFont::AnyStyle), 37},
    {sipName_Black, static_cast<int>( ::QFont::Black), 39},
    {sipName_Bold, static_cast<int>( ::QFont::Bold), 39},
    {sipName_Capitalize, static_cast<int>( ::QFont::Capitalize), 32},
    {sipName_Condensed, static_cast<int>( ::QFont::Condensed), 35},
    {sipName_Courier, static_cast<int>( ::QFont::Courier), 37},
    {sipName_Cursive, static_cast<int>( ::QFont::Cursive), 37},
    {sipName_Decorative, static_cast<int>( ::QFont::Decorative), 37},
    {sipName_DemiBold, static_cast<int>( ::QFont::DemiBold), 39},
    {sipName_Expanded, static_cast<int>( ::QFont::Expanded), 35},
    {sipName_ExtraBold, static_cast<int>( ::QFont::ExtraBold), 39},
    {sipName_ExtraCondensed, static_cast<int>( ::QFont::ExtraCondensed), 35},
    {sipName_ExtraExpanded, static_cast<int>( ::QFont::ExtraExpanded), 35},
    {sipName_ExtraLight, static_cast<int>( ::QFont::ExtraLight), 39},
    {sipName_Fantasy, static_cast<int>( ::QFont::Fantasy), 37},
    {sipName_ForceIntegerMetrics, static_cast<int>( ::QFont::ForceIntegerMetrics), 38},
    {sipName_ForceOutline, static_cast<int>( ::QFont::ForceOutline), 38},
    {sipName_Helvetica, static_cast<int>( ::QFont::Helvetica), 37},
    {sipName_Light, static_cast<int>( ::QFont::Light), 39},
    {sipName_Medium, static_cast<int>( ::QFont::Medium), 39},
    {sipName_MixedCase, static_cast<int>( ::QFont::MixedCase), 32},
    {sipName_Monospace, static_cast<int>( ::QFont::Monospace), 37},
    {sipName_NoAntialias, static_cast<int>( ::QFont::NoAntialias), 38},
    {sipName_NoFontMerging, static_cast<int>( ::QFont::NoFontMerging), 38},
    {sipName_NoSubpixelAntialias, static_cast<int>( ::QFont::NoSubpixelAntialias), 38},
    {sipName_Normal, static_cast<int>( ::QFont::Normal), 39},
    {sipName_OldEnglish, static_cast<int>( ::QFont::OldEnglish), 37},
    {sipName_OpenGLCompatible, static_cast<int>( ::QFont::OpenGLCompatible), 38},
    {sipName_PercentageSpacing, static_cast<int>( ::QFont::PercentageSpacing), 34},
    {sipName_PreferAntialias, static_cast<int>( ::QFont::PreferAntialias), 38},
    {sipName_PreferBitmap, static_cast<int>( ::QFont::PreferBitmap), 38},
    {sipName_PreferDefault, static_cast<int>( ::QFont::PreferDefault), 38},
    {sipName_PreferDefaultHinting, static_cast<int>( ::QFont::PreferDefaultHinting), 33},
    {sipName_PreferDevice, static_cast<int>( ::QFont::PreferDevice), 38},
    {sipName_PreferFullHinting, static_cast<int>( ::QFont::PreferFullHinting), 33},
    {sipName_PreferMatch, static_cast<int>( ::QFont::PreferMatch), 38},
    {sipName_PreferNoHinting, static_cast<int>( ::QFont::PreferNoHinting), 33},
    {sipName_PreferNoShaping, static_cast<int>( ::QFont::PreferNoShaping), 38},
    {sipName_PreferOutline, static_cast<int>( ::QFont::PreferOutline), 38},
    {sipName_PreferQuality, static_cast<int>( ::QFont::PreferQuality), 38},
    {sipName_PreferVerticalHinting, static_cast<int>( ::QFont::PreferVerticalHinting), 33},
    {sipName_SansSerif, static_cast<int>( ::QFont::SansSerif), 37},
    {sipName_SemiCondensed, static_cast<int>( ::QFont::SemiCondensed), 35},
    {sipName_SemiExpanded, static_cast<int>( ::QFont::SemiExpanded), 35},
    {sipName_Serif, static_cast<int>( ::QFont::Serif), 37},
    {sipName_SmallCaps, static_cast<int>( ::QFont::SmallCaps), 32},
    {sipName_StyleItalic, static_cast<int>( ::QFont::StyleItalic), 36},
    {sipName_StyleNormal, static_cast<int>( ::QFont::StyleNormal), 36},
    {sipName_StyleOblique, static_cast<int>( ::QFont::StyleOblique), 36},
    {sipName_System, static_cast<int>( ::QFont::System), 37},
    {sipName_Thin, static_cast<int>( ::QFont::Thin), 39},
    {sipName_Times, static_cast<int>( ::QFont::Times), 37},
    {sipName_TypeWriter, static_cast<int>( ::QFont::TypeWriter), 37},
    {sipName_UltraCondensed, static_cast<int>( ::QFont::UltraCondensed), 35},
    {sipName_UltraExpanded, static_cast<int>( ::QFont::UltraExpanded), 35},
    {sipName_Unstretched, static_cast<int>( ::QFont::Unstretched), 35},
};

PyDoc_STRVAR(doc_QFont, "\1QFont()\n"
"QFont(str, pointSize: int = -1, weight: int = -1, italic: bool = False)\n"
"QFont(QFont, QPaintDevice)\n"
"QFont(QFont)\n"
"QFont(Any)");


static pyqt5ClassPluginDef plugin_QFont = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QFont = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QFont,
        {SIP_NULLPTR},
        &plugin_QFont
    },
    {
        sipNameNr_QFont,
        {0, 0, 1},
        66, methods_QFont,
        60, enummembers_QFont,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QFont,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QFont,
    init_type_QFont,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QFont,
    assign_QFont,
    array_QFont,
    copy_QFont,
    release_QFont,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 913 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 61409 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"



PyDoc_STRVAR(doc_QPointingDeviceUniqueId_fromNumericId, "fromNumericId(int) -> QPointingDeviceUniqueId");

extern "C" {static PyObject *meth_QPointingDeviceUniqueId_fromNumericId(PyObject *, PyObject *);}
static PyObject *meth_QPointingDeviceUniqueId_fromNumericId(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "n", &a0))
        {
             ::QPointingDeviceUniqueId*sipRes;

            sipRes = new  ::QPointingDeviceUniqueId( ::QPointingDeviceUniqueId::fromNumericId(a0));

            return sipConvertFromNewType(sipRes,sipType_QPointingDeviceUniqueId,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPointingDeviceUniqueId, sipName_fromNumericId, doc_QPointingDeviceUniqueId_fromNumericId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPointingDeviceUniqueId_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QPointingDeviceUniqueId_isValid(PyObject *, PyObject *);}
static PyObject *meth_QPointingDeviceUniqueId_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointingDeviceUniqueId *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPointingDeviceUniqueId, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPointingDeviceUniqueId, sipName_isValid, doc_QPointingDeviceUniqueId_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPointingDeviceUniqueId_numericId, "numericId(self) -> int");

extern "C" {static PyObject *meth_QPointingDeviceUniqueId_numericId(PyObject *, PyObject *);}
static PyObject *meth_QPointingDeviceUniqueId_numericId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointingDeviceUniqueId *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPointingDeviceUniqueId, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->numericId();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPointingDeviceUniqueId, sipName_numericId, doc_QPointingDeviceUniqueId_numericId);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QPointingDeviceUniqueId___eq__(PyObject *,PyObject *);}
static PyObject *slot_QPointingDeviceUniqueId___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPointingDeviceUniqueId *sipCpp = reinterpret_cast< ::QPointingDeviceUniqueId *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPointingDeviceUniqueId));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPointingDeviceUniqueId* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPointingDeviceUniqueId, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QPointingDeviceUniqueId, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QPointingDeviceUniqueId___ne__(PyObject *,PyObject *);}
static PyObject *slot_QPointingDeviceUniqueId___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPointingDeviceUniqueId *sipCpp = reinterpret_cast< ::QPointingDeviceUniqueId *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPointingDeviceUniqueId));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPointingDeviceUniqueId* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPointingDeviceUniqueId, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QPointingDeviceUniqueId, sipSelf, sipArg);
}


extern "C" {static long slot_QPointingDeviceUniqueId___hash__(PyObject *);}
static long slot_QPointingDeviceUniqueId___hash__(PyObject *sipSelf)
{
     ::QPointingDeviceUniqueId *sipCpp = reinterpret_cast< ::QPointingDeviceUniqueId *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPointingDeviceUniqueId));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 923 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
        sipRes = qHash(*sipCpp);
#line 61576 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPointingDeviceUniqueId(void *, int);}
static void release_QPointingDeviceUniqueId(void *sipCppV, int)
{
    delete reinterpret_cast< ::QPointingDeviceUniqueId *>(sipCppV);
}


extern "C" {static void assign_QPointingDeviceUniqueId(void *, SIP_SSIZE_T, void *);}
static void assign_QPointingDeviceUniqueId(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QPointingDeviceUniqueId *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QPointingDeviceUniqueId *>(sipSrc);
}


extern "C" {static void *array_QPointingDeviceUniqueId(SIP_SSIZE_T);}
static void *array_QPointingDeviceUniqueId(SIP_SSIZE_T sipNrElem)
{
    return new  ::QPointingDeviceUniqueId[sipNrElem];
}


extern "C" {static void *copy_QPointingDeviceUniqueId(const void *, SIP_SSIZE_T);}
static void *copy_QPointingDeviceUniqueId(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QPointingDeviceUniqueId(reinterpret_cast<const  ::QPointingDeviceUniqueId *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPointingDeviceUniqueId(sipSimpleWrapper *);}
static void dealloc_QPointingDeviceUniqueId(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPointingDeviceUniqueId(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QPointingDeviceUniqueId(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPointingDeviceUniqueId(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QPointingDeviceUniqueId *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QPointingDeviceUniqueId();

            return sipCpp;
        }
    }

    {
        const  ::QPointingDeviceUniqueId* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QPointingDeviceUniqueId, &a0))
        {
            sipCpp = new  ::QPointingDeviceUniqueId(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QPointingDeviceUniqueId[] = {
    {(void *)slot_QPointingDeviceUniqueId___eq__, eq_slot},
    {(void *)slot_QPointingDeviceUniqueId___ne__, ne_slot},
    {(void *)slot_QPointingDeviceUniqueId___hash__, hash_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QPointingDeviceUniqueId[] = {
    {SIP_MLNAME_CAST(sipName_fromNumericId), meth_QPointingDeviceUniqueId_fromNumericId, METH_VARARGS, SIP_MLDOC_CAST(doc_QPointingDeviceUniqueId_fromNumericId)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QPointingDeviceUniqueId_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QPointingDeviceUniqueId_isValid)},
    {SIP_MLNAME_CAST(sipName_numericId), meth_QPointingDeviceUniqueId_numericId, METH_VARARGS, SIP_MLDOC_CAST(doc_QPointingDeviceUniqueId_numericId)}
};

PyDoc_STRVAR(doc_QPointingDeviceUniqueId, "\1QPointingDeviceUniqueId()\n"
"QPointingDeviceUniqueId(QPointingDeviceUniqueId)");


static pyqt5ClassPluginDef plugin_QPointingDeviceUniqueId = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QPointingDeviceUniqueId = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPointingDeviceUniqueId,
        {SIP_NULLPTR},
        &plugin_QPointingDeviceUniqueId
    },
    {
        sipNameNr_QPointingDeviceUniqueId,
        {0, 0, 1},
        3, methods_QPointingDeviceUniqueId,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPointingDeviceUniqueId,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QPointingDeviceUniqueId,
    init_type_QPointingDeviceUniqueId,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QPointingDeviceUniqueId,
    assign_QPointingDeviceUniqueId,
    array_QPointingDeviceUniqueId,
    copy_QPointingDeviceUniqueId,
    release_QPointingDeviceUniqueId,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 892 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 61734 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 61738 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQPlatformSurfaceEvent : public  ::QPlatformSurfaceEvent
{
public:
    sipQPlatformSurfaceEvent( ::QPlatformSurfaceEvent::SurfaceEventType);
    sipQPlatformSurfaceEvent(const  ::QPlatformSurfaceEvent&);
    ~sipQPlatformSurfaceEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPlatformSurfaceEvent(const sipQPlatformSurfaceEvent &);
    sipQPlatformSurfaceEvent &operator = (const sipQPlatformSurfaceEvent &);
};

sipQPlatformSurfaceEvent::sipQPlatformSurfaceEvent( ::QPlatformSurfaceEvent::SurfaceEventType a0):  ::QPlatformSurfaceEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQPlatformSurfaceEvent::sipQPlatformSurfaceEvent(const  ::QPlatformSurfaceEvent& a0):  ::QPlatformSurfaceEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQPlatformSurfaceEvent::~sipQPlatformSurfaceEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QPlatformSurfaceEvent_surfaceEventType, "surfaceEventType(self) -> QPlatformSurfaceEvent.SurfaceEventType");

extern "C" {static PyObject *meth_QPlatformSurfaceEvent_surfaceEventType(PyObject *, PyObject *);}
static PyObject *meth_QPlatformSurfaceEvent_surfaceEventType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPlatformSurfaceEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlatformSurfaceEvent, &sipCpp))
        {
             ::QPlatformSurfaceEvent::SurfaceEventType sipRes;

            sipRes = sipCpp->surfaceEventType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QPlatformSurfaceEvent_SurfaceEventType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlatformSurfaceEvent, sipName_surfaceEventType, doc_QPlatformSurfaceEvent_surfaceEventType);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QPlatformSurfaceEvent(void *, const sipTypeDef *);}
static void *cast_QPlatformSurfaceEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QPlatformSurfaceEvent *sipCpp = reinterpret_cast< ::QPlatformSurfaceEvent *>(sipCppV);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPlatformSurfaceEvent(void *, int);}
static void release_QPlatformSurfaceEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQPlatformSurfaceEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QPlatformSurfaceEvent *>(sipCppV);
}


extern "C" {static void dealloc_QPlatformSurfaceEvent(sipSimpleWrapper *);}
static void dealloc_QPlatformSurfaceEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQPlatformSurfaceEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPlatformSurfaceEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QPlatformSurfaceEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPlatformSurfaceEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQPlatformSurfaceEvent *sipCpp = SIP_NULLPTR;

    {
         ::QPlatformSurfaceEvent::SurfaceEventType a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "E", sipType_QPlatformSurfaceEvent_SurfaceEventType, &a0))
        {
            sipCpp = new sipQPlatformSurfaceEvent(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QPlatformSurfaceEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QPlatformSurfaceEvent, &a0))
        {
            sipCpp = new sipQPlatformSurfaceEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QPlatformSurfaceEvent[] = {{6, 0, 1}};


static PyMethodDef methods_QPlatformSurfaceEvent[] = {
    {SIP_MLNAME_CAST(sipName_surfaceEventType), meth_QPlatformSurfaceEvent_surfaceEventType, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlatformSurfaceEvent_surfaceEventType)}
};

static sipEnumMemberDef enummembers_QPlatformSurfaceEvent[] = {
    {sipName_SurfaceAboutToBeDestroyed, static_cast<int>( ::QPlatformSurfaceEvent::SurfaceAboutToBeDestroyed), 235},
    {sipName_SurfaceCreated, static_cast<int>( ::QPlatformSurfaceEvent::SurfaceCreated), 235},
};

PyDoc_STRVAR(doc_QPlatformSurfaceEvent, "\1QPlatformSurfaceEvent(QPlatformSurfaceEvent.SurfaceEventType)\n"
"QPlatformSurfaceEvent(QPlatformSurfaceEvent)");


static pyqt5ClassPluginDef plugin_QPlatformSurfaceEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QPlatformSurfaceEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPlatformSurfaceEvent,
        {SIP_NULLPTR},
        &plugin_QPlatformSurfaceEvent
    },
    {
        sipNameNr_QPlatformSurfaceEvent,
        {0, 0, 1},
        1, methods_QPlatformSurfaceEvent,
        2, enummembers_QPlatformSurfaceEvent,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPlatformSurfaceEvent,
    -1,
    -1,
    supers_QPlatformSurfaceEvent,
    SIP_NULLPTR,
    init_type_QPlatformSurfaceEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QPlatformSurfaceEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QPlatformSurfaceEvent,
    cast_QPlatformSurfaceEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 863 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 61948 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 61952 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 61955 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtouchdevice.sip"
#include <qtouchdevice.h>
#line 61958 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 61961 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 61964 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 61967 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQNativeGestureEvent : public  ::QNativeGestureEvent
{
public:
    sipQNativeGestureEvent( ::Qt::NativeGestureType,const  ::QPointF&,const  ::QPointF&,const  ::QPointF&, ::qreal, ::ulong, ::quint64);
    sipQNativeGestureEvent( ::Qt::NativeGestureType,const  ::QTouchDevice*,const  ::QPointF&,const  ::QPointF&,const  ::QPointF&, ::qreal, ::ulong, ::quint64);
    sipQNativeGestureEvent(const  ::QNativeGestureEvent&);
    ~sipQNativeGestureEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQNativeGestureEvent(const sipQNativeGestureEvent &);
    sipQNativeGestureEvent &operator = (const sipQNativeGestureEvent &);
};

sipQNativeGestureEvent::sipQNativeGestureEvent( ::Qt::NativeGestureType a0,const  ::QPointF& a1,const  ::QPointF& a2,const  ::QPointF& a3, ::qreal a4, ::ulong a5, ::quint64 a6):  ::QNativeGestureEvent(a0,a1,a2,a3,a4,a5,a6), sipPySelf(SIP_NULLPTR)
{
}

sipQNativeGestureEvent::sipQNativeGestureEvent( ::Qt::NativeGestureType a0,const  ::QTouchDevice*a1,const  ::QPointF& a2,const  ::QPointF& a3,const  ::QPointF& a4, ::qreal a5, ::ulong a6, ::quint64 a7):  ::QNativeGestureEvent(a0,a1,a2,a3,a4,a5,a6,a7), sipPySelf(SIP_NULLPTR)
{
}

sipQNativeGestureEvent::sipQNativeGestureEvent(const  ::QNativeGestureEvent& a0):  ::QNativeGestureEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQNativeGestureEvent::~sipQNativeGestureEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QNativeGestureEvent_gestureType, "gestureType(self) -> Qt.NativeGestureType");

extern "C" {static PyObject *meth_QNativeGestureEvent_gestureType(PyObject *, PyObject *);}
static PyObject *meth_QNativeGestureEvent_gestureType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNativeGestureEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNativeGestureEvent, &sipCpp))
        {
             ::Qt::NativeGestureType sipRes;

            sipRes = sipCpp->gestureType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_NativeGestureType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNativeGestureEvent, sipName_gestureType, doc_QNativeGestureEvent_gestureType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNativeGestureEvent_value, "value(self) -> float");

extern "C" {static PyObject *meth_QNativeGestureEvent_value(PyObject *, PyObject *);}
static PyObject *meth_QNativeGestureEvent_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNativeGestureEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNativeGestureEvent, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->value();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNativeGestureEvent, sipName_value, doc_QNativeGestureEvent_value);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNativeGestureEvent_pos, "pos(self) -> QPoint");

extern "C" {static PyObject *meth_QNativeGestureEvent_pos(PyObject *, PyObject *);}
static PyObject *meth_QNativeGestureEvent_pos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNativeGestureEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNativeGestureEvent, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->pos());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNativeGestureEvent, sipName_pos, doc_QNativeGestureEvent_pos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNativeGestureEvent_globalPos, "globalPos(self) -> QPoint");

extern "C" {static PyObject *meth_QNativeGestureEvent_globalPos(PyObject *, PyObject *);}
static PyObject *meth_QNativeGestureEvent_globalPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNativeGestureEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNativeGestureEvent, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->globalPos());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNativeGestureEvent, sipName_globalPos, doc_QNativeGestureEvent_globalPos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNativeGestureEvent_localPos, "localPos(self) -> QPointF");

extern "C" {static PyObject *meth_QNativeGestureEvent_localPos(PyObject *, PyObject *);}
static PyObject *meth_QNativeGestureEvent_localPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNativeGestureEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNativeGestureEvent, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->localPos());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNativeGestureEvent, sipName_localPos, doc_QNativeGestureEvent_localPos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNativeGestureEvent_windowPos, "windowPos(self) -> QPointF");

extern "C" {static PyObject *meth_QNativeGestureEvent_windowPos(PyObject *, PyObject *);}
static PyObject *meth_QNativeGestureEvent_windowPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNativeGestureEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNativeGestureEvent, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->windowPos());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNativeGestureEvent, sipName_windowPos, doc_QNativeGestureEvent_windowPos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNativeGestureEvent_screenPos, "screenPos(self) -> QPointF");

extern "C" {static PyObject *meth_QNativeGestureEvent_screenPos(PyObject *, PyObject *);}
static PyObject *meth_QNativeGestureEvent_screenPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNativeGestureEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNativeGestureEvent, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->screenPos());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNativeGestureEvent, sipName_screenPos, doc_QNativeGestureEvent_screenPos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNativeGestureEvent_device, "device(self) -> QTouchDevice");

extern "C" {static PyObject *meth_QNativeGestureEvent_device(PyObject *, PyObject *);}
static PyObject *meth_QNativeGestureEvent_device(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNativeGestureEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNativeGestureEvent, &sipCpp))
        {
            const  ::QTouchDevice*sipRes;

            sipRes = sipCpp->device();

            return sipConvertFromType(const_cast< ::QTouchDevice *>(sipRes),sipType_QTouchDevice,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNativeGestureEvent, sipName_device, doc_QNativeGestureEvent_device);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QNativeGestureEvent(void *, const sipTypeDef *);}
static void *cast_QNativeGestureEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QNativeGestureEvent *sipCpp = reinterpret_cast< ::QNativeGestureEvent *>(sipCppV);

    if (targetType == sipType_QInputEvent)
        return static_cast< ::QInputEvent *>(sipCpp);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QNativeGestureEvent(void *, int);}
static void release_QNativeGestureEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQNativeGestureEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QNativeGestureEvent *>(sipCppV);
}


extern "C" {static void dealloc_QNativeGestureEvent(sipSimpleWrapper *);}
static void dealloc_QNativeGestureEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQNativeGestureEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QNativeGestureEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QNativeGestureEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNativeGestureEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQNativeGestureEvent *sipCpp = SIP_NULLPTR;

    {
         ::Qt::NativeGestureType a0;
        const  ::QPointF* a1;
        int a1State = 0;
        const  ::QPointF* a2;
        int a2State = 0;
        const  ::QPointF* a3;
        int a3State = 0;
         ::qreal a4;
         ::ulong a5;
         ::quint64 a6;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "EJ1J1J1dmo", sipType_Qt_NativeGestureType, &a0, sipType_QPointF, &a1, &a1State, sipType_QPointF, &a2, &a2State, sipType_QPointF, &a3, &a3State, &a4, &a5, &a6))
        {
            sipCpp = new sipQNativeGestureEvent(a0,*a1,*a2,*a3,a4,a5,a6);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);
            sipReleaseType(const_cast< ::QPointF *>(a2),sipType_QPointF,a2State);
            sipReleaseType(const_cast< ::QPointF *>(a3),sipType_QPointF,a3State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::Qt::NativeGestureType a0;
        const  ::QTouchDevice* a1;
        const  ::QPointF* a2;
        int a2State = 0;
        const  ::QPointF* a3;
        int a3State = 0;
        const  ::QPointF* a4;
        int a4State = 0;
         ::qreal a5;
         ::ulong a6;
         ::quint64 a7;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "EJ8J1J1J1dmo", sipType_Qt_NativeGestureType, &a0, sipType_QTouchDevice, &a1, sipType_QPointF, &a2, &a2State, sipType_QPointF, &a3, &a3State, sipType_QPointF, &a4, &a4State, &a5, &a6, &a7))
        {
            sipCpp = new sipQNativeGestureEvent(a0,a1,*a2,*a3,*a4,a5,a6,a7);
            sipReleaseType(const_cast< ::QPointF *>(a2),sipType_QPointF,a2State);
            sipReleaseType(const_cast< ::QPointF *>(a3),sipType_QPointF,a3State);
            sipReleaseType(const_cast< ::QPointF *>(a4),sipType_QPointF,a4State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QNativeGestureEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QNativeGestureEvent, &a0))
        {
            sipCpp = new sipQNativeGestureEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QNativeGestureEvent[] = {{77, 255, 1}};


static PyMethodDef methods_QNativeGestureEvent[] = {
    {SIP_MLNAME_CAST(sipName_device), meth_QNativeGestureEvent_device, METH_VARARGS, SIP_MLDOC_CAST(doc_QNativeGestureEvent_device)},
    {SIP_MLNAME_CAST(sipName_gestureType), meth_QNativeGestureEvent_gestureType, METH_VARARGS, SIP_MLDOC_CAST(doc_QNativeGestureEvent_gestureType)},
    {SIP_MLNAME_CAST(sipName_globalPos), meth_QNativeGestureEvent_globalPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QNativeGestureEvent_globalPos)},
    {SIP_MLNAME_CAST(sipName_localPos), meth_QNativeGestureEvent_localPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QNativeGestureEvent_localPos)},
    {SIP_MLNAME_CAST(sipName_pos), meth_QNativeGestureEvent_pos, METH_VARARGS, SIP_MLDOC_CAST(doc_QNativeGestureEvent_pos)},
    {SIP_MLNAME_CAST(sipName_screenPos), meth_QNativeGestureEvent_screenPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QNativeGestureEvent_screenPos)},
    {SIP_MLNAME_CAST(sipName_value), meth_QNativeGestureEvent_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QNativeGestureEvent_value)},
    {SIP_MLNAME_CAST(sipName_windowPos), meth_QNativeGestureEvent_windowPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QNativeGestureEvent_windowPos)}
};

PyDoc_STRVAR(doc_QNativeGestureEvent, "\1QNativeGestureEvent(Qt.NativeGestureType, Union[QPointF, QPoint], Union[QPointF, QPoint], Union[QPointF, QPoint], float, int, int)\n"
"QNativeGestureEvent(Qt.NativeGestureType, QTouchDevice, Union[QPointF, QPoint], Union[QPointF, QPoint], Union[QPointF, QPoint], float, int, int)\n"
"QNativeGestureEvent(QNativeGestureEvent)");


static pyqt5ClassPluginDef plugin_QNativeGestureEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QNativeGestureEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QNativeGestureEvent,
        {SIP_NULLPTR},
        &plugin_QNativeGestureEvent
    },
    {
        sipNameNr_QNativeGestureEvent,
        {0, 0, 1},
        8, methods_QNativeGestureEvent,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QNativeGestureEvent,
    -1,
    -1,
    supers_QNativeGestureEvent,
    SIP_NULLPTR,
    init_type_QNativeGestureEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QNativeGestureEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QNativeGestureEvent,
    cast_QNativeGestureEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 840 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 62423 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 62427 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 62430 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 62433 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQEnterEvent : public  ::QEnterEvent
{
public:
    sipQEnterEvent(const  ::QPointF&,const  ::QPointF&,const  ::QPointF&);
    sipQEnterEvent(const  ::QEnterEvent&);
    ~sipQEnterEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQEnterEvent(const sipQEnterEvent &);
    sipQEnterEvent &operator = (const sipQEnterEvent &);
};

sipQEnterEvent::sipQEnterEvent(const  ::QPointF& a0,const  ::QPointF& a1,const  ::QPointF& a2):  ::QEnterEvent(a0,a1,a2), sipPySelf(SIP_NULLPTR)
{
}

sipQEnterEvent::sipQEnterEvent(const  ::QEnterEvent& a0):  ::QEnterEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQEnterEvent::~sipQEnterEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QEnterEvent_pos, "pos(self) -> QPoint");

extern "C" {static PyObject *meth_QEnterEvent_pos(PyObject *, PyObject *);}
static PyObject *meth_QEnterEvent_pos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QEnterEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEnterEvent, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->pos());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEnterEvent, sipName_pos, doc_QEnterEvent_pos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEnterEvent_globalPos, "globalPos(self) -> QPoint");

extern "C" {static PyObject *meth_QEnterEvent_globalPos(PyObject *, PyObject *);}
static PyObject *meth_QEnterEvent_globalPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QEnterEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEnterEvent, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->globalPos());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEnterEvent, sipName_globalPos, doc_QEnterEvent_globalPos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEnterEvent_x, "x(self) -> int");

extern "C" {static PyObject *meth_QEnterEvent_x(PyObject *, PyObject *);}
static PyObject *meth_QEnterEvent_x(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QEnterEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEnterEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->x();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEnterEvent, sipName_x, doc_QEnterEvent_x);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEnterEvent_y, "y(self) -> int");

extern "C" {static PyObject *meth_QEnterEvent_y(PyObject *, PyObject *);}
static PyObject *meth_QEnterEvent_y(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QEnterEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEnterEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->y();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEnterEvent, sipName_y, doc_QEnterEvent_y);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEnterEvent_globalX, "globalX(self) -> int");

extern "C" {static PyObject *meth_QEnterEvent_globalX(PyObject *, PyObject *);}
static PyObject *meth_QEnterEvent_globalX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QEnterEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEnterEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->globalX();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEnterEvent, sipName_globalX, doc_QEnterEvent_globalX);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEnterEvent_globalY, "globalY(self) -> int");

extern "C" {static PyObject *meth_QEnterEvent_globalY(PyObject *, PyObject *);}
static PyObject *meth_QEnterEvent_globalY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QEnterEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEnterEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->globalY();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEnterEvent, sipName_globalY, doc_QEnterEvent_globalY);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEnterEvent_localPos, "localPos(self) -> QPointF");

extern "C" {static PyObject *meth_QEnterEvent_localPos(PyObject *, PyObject *);}
static PyObject *meth_QEnterEvent_localPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QEnterEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEnterEvent, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->localPos());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEnterEvent, sipName_localPos, doc_QEnterEvent_localPos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEnterEvent_windowPos, "windowPos(self) -> QPointF");

extern "C" {static PyObject *meth_QEnterEvent_windowPos(PyObject *, PyObject *);}
static PyObject *meth_QEnterEvent_windowPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QEnterEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEnterEvent, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->windowPos());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEnterEvent, sipName_windowPos, doc_QEnterEvent_windowPos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEnterEvent_screenPos, "screenPos(self) -> QPointF");

extern "C" {static PyObject *meth_QEnterEvent_screenPos(PyObject *, PyObject *);}
static PyObject *meth_QEnterEvent_screenPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QEnterEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEnterEvent, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->screenPos());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEnterEvent, sipName_screenPos, doc_QEnterEvent_screenPos);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QEnterEvent(void *, const sipTypeDef *);}
static void *cast_QEnterEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QEnterEvent *sipCpp = reinterpret_cast< ::QEnterEvent *>(sipCppV);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QEnterEvent(void *, int);}
static void release_QEnterEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQEnterEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QEnterEvent *>(sipCppV);
}


extern "C" {static void dealloc_QEnterEvent(sipSimpleWrapper *);}
static void dealloc_QEnterEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQEnterEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QEnterEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QEnterEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QEnterEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQEnterEvent *sipCpp = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QPointF* a1;
        int a1State = 0;
        const  ::QPointF* a2;
        int a2State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1J1J1", sipType_QPointF, &a0, &a0State, sipType_QPointF, &a1, &a1State, sipType_QPointF, &a2, &a2State))
        {
            sipCpp = new sipQEnterEvent(*a0,*a1,*a2);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);
            sipReleaseType(const_cast< ::QPointF *>(a2),sipType_QPointF,a2State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QEnterEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QEnterEvent, &a0))
        {
            sipCpp = new sipQEnterEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QEnterEvent[] = {{6, 0, 1}};


static PyMethodDef methods_QEnterEvent[] = {
    {SIP_MLNAME_CAST(sipName_globalPos), meth_QEnterEvent_globalPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QEnterEvent_globalPos)},
    {SIP_MLNAME_CAST(sipName_globalX), meth_QEnterEvent_globalX, METH_VARARGS, SIP_MLDOC_CAST(doc_QEnterEvent_globalX)},
    {SIP_MLNAME_CAST(sipName_globalY), meth_QEnterEvent_globalY, METH_VARARGS, SIP_MLDOC_CAST(doc_QEnterEvent_globalY)},
    {SIP_MLNAME_CAST(sipName_localPos), meth_QEnterEvent_localPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QEnterEvent_localPos)},
    {SIP_MLNAME_CAST(sipName_pos), meth_QEnterEvent_pos, METH_VARARGS, SIP_MLDOC_CAST(doc_QEnterEvent_pos)},
    {SIP_MLNAME_CAST(sipName_screenPos), meth_QEnterEvent_screenPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QEnterEvent_screenPos)},
    {SIP_MLNAME_CAST(sipName_windowPos), meth_QEnterEvent_windowPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QEnterEvent_windowPos)},
    {SIP_MLNAME_CAST(sipName_x), meth_QEnterEvent_x, METH_VARARGS, SIP_MLDOC_CAST(doc_QEnterEvent_x)},
    {SIP_MLNAME_CAST(sipName_y), meth_QEnterEvent_y, METH_VARARGS, SIP_MLDOC_CAST(doc_QEnterEvent_y)}
};

PyDoc_STRVAR(doc_QEnterEvent, "\1QEnterEvent(Union[QPointF, QPoint], Union[QPointF, QPoint], Union[QPointF, QPoint])\n"
"QEnterEvent(QEnterEvent)");


static pyqt5ClassPluginDef plugin_QEnterEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QEnterEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QEnterEvent,
        {SIP_NULLPTR},
        &plugin_QEnterEvent
    },
    {
        sipNameNr_QEnterEvent,
        {0, 0, 1},
        9, methods_QEnterEvent,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QEnterEvent,
    -1,
    -1,
    supers_QEnterEvent,
    SIP_NULLPTR,
    init_type_QEnterEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QEnterEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QEnterEvent,
    cast_QEnterEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 816 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 62878 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 62882 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 62885 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQScrollEvent : public  ::QScrollEvent
{
public:
    sipQScrollEvent(const  ::QPointF&,const  ::QPointF&, ::QScrollEvent::ScrollState);
    sipQScrollEvent(const  ::QScrollEvent&);
    ~sipQScrollEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQScrollEvent(const sipQScrollEvent &);
    sipQScrollEvent &operator = (const sipQScrollEvent &);
};

sipQScrollEvent::sipQScrollEvent(const  ::QPointF& a0,const  ::QPointF& a1, ::QScrollEvent::ScrollState a2):  ::QScrollEvent(a0,a1,a2), sipPySelf(SIP_NULLPTR)
{
}

sipQScrollEvent::sipQScrollEvent(const  ::QScrollEvent& a0):  ::QScrollEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQScrollEvent::~sipQScrollEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QScrollEvent_contentPos, "contentPos(self) -> QPointF");

extern "C" {static PyObject *meth_QScrollEvent_contentPos(PyObject *, PyObject *);}
static PyObject *meth_QScrollEvent_contentPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QScrollEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScrollEvent, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->contentPos());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScrollEvent, sipName_contentPos, doc_QScrollEvent_contentPos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScrollEvent_overshootDistance, "overshootDistance(self) -> QPointF");

extern "C" {static PyObject *meth_QScrollEvent_overshootDistance(PyObject *, PyObject *);}
static PyObject *meth_QScrollEvent_overshootDistance(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QScrollEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScrollEvent, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->overshootDistance());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScrollEvent, sipName_overshootDistance, doc_QScrollEvent_overshootDistance);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScrollEvent_scrollState, "scrollState(self) -> QScrollEvent.ScrollState");

extern "C" {static PyObject *meth_QScrollEvent_scrollState(PyObject *, PyObject *);}
static PyObject *meth_QScrollEvent_scrollState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QScrollEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScrollEvent, &sipCpp))
        {
             ::QScrollEvent::ScrollState sipRes;

            sipRes = sipCpp->scrollState();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QScrollEvent_ScrollState);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScrollEvent, sipName_scrollState, doc_QScrollEvent_scrollState);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QScrollEvent(void *, const sipTypeDef *);}
static void *cast_QScrollEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QScrollEvent *sipCpp = reinterpret_cast< ::QScrollEvent *>(sipCppV);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QScrollEvent(void *, int);}
static void release_QScrollEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQScrollEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QScrollEvent *>(sipCppV);
}


extern "C" {static void dealloc_QScrollEvent(sipSimpleWrapper *);}
static void dealloc_QScrollEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQScrollEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QScrollEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QScrollEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QScrollEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQScrollEvent *sipCpp = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QPointF* a1;
        int a1State = 0;
         ::QScrollEvent::ScrollState a2;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1J1E", sipType_QPointF, &a0, &a0State, sipType_QPointF, &a1, &a1State, sipType_QScrollEvent_ScrollState, &a2))
        {
            sipCpp = new sipQScrollEvent(*a0,*a1,a2);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QScrollEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QScrollEvent, &a0))
        {
            sipCpp = new sipQScrollEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QScrollEvent[] = {{6, 0, 1}};


static PyMethodDef methods_QScrollEvent[] = {
    {SIP_MLNAME_CAST(sipName_contentPos), meth_QScrollEvent_contentPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QScrollEvent_contentPos)},
    {SIP_MLNAME_CAST(sipName_overshootDistance), meth_QScrollEvent_overshootDistance, METH_VARARGS, SIP_MLDOC_CAST(doc_QScrollEvent_overshootDistance)},
    {SIP_MLNAME_CAST(sipName_scrollState), meth_QScrollEvent_scrollState, METH_VARARGS, SIP_MLDOC_CAST(doc_QScrollEvent_scrollState)}
};

static sipEnumMemberDef enummembers_QScrollEvent[] = {
    {sipName_ScrollFinished, static_cast<int>( ::QScrollEvent::ScrollFinished), 254},
    {sipName_ScrollStarted, static_cast<int>( ::QScrollEvent::ScrollStarted), 254},
    {sipName_ScrollUpdated, static_cast<int>( ::QScrollEvent::ScrollUpdated), 254},
};

PyDoc_STRVAR(doc_QScrollEvent, "\1QScrollEvent(Union[QPointF, QPoint], Union[QPointF, QPoint], QScrollEvent.ScrollState)\n"
"QScrollEvent(QScrollEvent)");


static pyqt5ClassPluginDef plugin_QScrollEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QScrollEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QScrollEvent,
        {SIP_NULLPTR},
        &plugin_QScrollEvent
    },
    {
        sipNameNr_QScrollEvent,
        {0, 0, 1},
        3, methods_QScrollEvent,
        3, enummembers_QScrollEvent,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QScrollEvent,
    -1,
    -1,
    supers_QScrollEvent,
    SIP_NULLPTR,
    init_type_QScrollEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QScrollEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QScrollEvent,
    cast_QScrollEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 798 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 63160 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 63164 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 63167 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 97 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 63170 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63173 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQScrollPrepareEvent : public  ::QScrollPrepareEvent
{
public:
    sipQScrollPrepareEvent(const  ::QPointF&);
    sipQScrollPrepareEvent(const  ::QScrollPrepareEvent&);
    ~sipQScrollPrepareEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQScrollPrepareEvent(const sipQScrollPrepareEvent &);
    sipQScrollPrepareEvent &operator = (const sipQScrollPrepareEvent &);
};

sipQScrollPrepareEvent::sipQScrollPrepareEvent(const  ::QPointF& a0):  ::QScrollPrepareEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQScrollPrepareEvent::sipQScrollPrepareEvent(const  ::QScrollPrepareEvent& a0):  ::QScrollPrepareEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQScrollPrepareEvent::~sipQScrollPrepareEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QScrollPrepareEvent_startPos, "startPos(self) -> QPointF");

extern "C" {static PyObject *meth_QScrollPrepareEvent_startPos(PyObject *, PyObject *);}
static PyObject *meth_QScrollPrepareEvent_startPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QScrollPrepareEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScrollPrepareEvent, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->startPos());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScrollPrepareEvent, sipName_startPos, doc_QScrollPrepareEvent_startPos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScrollPrepareEvent_viewportSize, "viewportSize(self) -> QSizeF");

extern "C" {static PyObject *meth_QScrollPrepareEvent_viewportSize(PyObject *, PyObject *);}
static PyObject *meth_QScrollPrepareEvent_viewportSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QScrollPrepareEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScrollPrepareEvent, &sipCpp))
        {
             ::QSizeF*sipRes;

            sipRes = new  ::QSizeF(sipCpp->viewportSize());

            return sipConvertFromNewType(sipRes,sipType_QSizeF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScrollPrepareEvent, sipName_viewportSize, doc_QScrollPrepareEvent_viewportSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScrollPrepareEvent_contentPosRange, "contentPosRange(self) -> QRectF");

extern "C" {static PyObject *meth_QScrollPrepareEvent_contentPosRange(PyObject *, PyObject *);}
static PyObject *meth_QScrollPrepareEvent_contentPosRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QScrollPrepareEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScrollPrepareEvent, &sipCpp))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->contentPosRange());

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScrollPrepareEvent, sipName_contentPosRange, doc_QScrollPrepareEvent_contentPosRange);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScrollPrepareEvent_contentPos, "contentPos(self) -> QPointF");

extern "C" {static PyObject *meth_QScrollPrepareEvent_contentPos(PyObject *, PyObject *);}
static PyObject *meth_QScrollPrepareEvent_contentPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QScrollPrepareEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScrollPrepareEvent, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->contentPos());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScrollPrepareEvent, sipName_contentPos, doc_QScrollPrepareEvent_contentPos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScrollPrepareEvent_setViewportSize, "setViewportSize(self, QSizeF)");

extern "C" {static PyObject *meth_QScrollPrepareEvent_setViewportSize(PyObject *, PyObject *);}
static PyObject *meth_QScrollPrepareEvent_setViewportSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSizeF* a0;
         ::QScrollPrepareEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QScrollPrepareEvent, &sipCpp, sipType_QSizeF, &a0))
        {
            sipCpp->setViewportSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScrollPrepareEvent, sipName_setViewportSize, doc_QScrollPrepareEvent_setViewportSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScrollPrepareEvent_setContentPosRange, "setContentPosRange(self, QRectF)");

extern "C" {static PyObject *meth_QScrollPrepareEvent_setContentPosRange(PyObject *, PyObject *);}
static PyObject *meth_QScrollPrepareEvent_setContentPosRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
         ::QScrollPrepareEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QScrollPrepareEvent, &sipCpp, sipType_QRectF, &a0))
        {
            sipCpp->setContentPosRange(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScrollPrepareEvent, sipName_setContentPosRange, doc_QScrollPrepareEvent_setContentPosRange);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScrollPrepareEvent_setContentPos, "setContentPos(self, Union[QPointF, QPoint])");

extern "C" {static PyObject *meth_QScrollPrepareEvent_setContentPos(PyObject *, PyObject *);}
static PyObject *meth_QScrollPrepareEvent_setContentPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::QScrollPrepareEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QScrollPrepareEvent, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->setContentPos(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScrollPrepareEvent, sipName_setContentPos, doc_QScrollPrepareEvent_setContentPos);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QScrollPrepareEvent(void *, const sipTypeDef *);}
static void *cast_QScrollPrepareEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QScrollPrepareEvent *sipCpp = reinterpret_cast< ::QScrollPrepareEvent *>(sipCppV);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QScrollPrepareEvent(void *, int);}
static void release_QScrollPrepareEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQScrollPrepareEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QScrollPrepareEvent *>(sipCppV);
}


extern "C" {static void dealloc_QScrollPrepareEvent(sipSimpleWrapper *);}
static void dealloc_QScrollPrepareEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQScrollPrepareEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QScrollPrepareEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QScrollPrepareEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QScrollPrepareEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQScrollPrepareEvent *sipCpp = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QPointF, &a0, &a0State))
        {
            sipCpp = new sipQScrollPrepareEvent(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QScrollPrepareEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QScrollPrepareEvent, &a0))
        {
            sipCpp = new sipQScrollPrepareEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QScrollPrepareEvent[] = {{6, 0, 1}};


static PyMethodDef methods_QScrollPrepareEvent[] = {
    {SIP_MLNAME_CAST(sipName_contentPos), meth_QScrollPrepareEvent_contentPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QScrollPrepareEvent_contentPos)},
    {SIP_MLNAME_CAST(sipName_contentPosRange), meth_QScrollPrepareEvent_contentPosRange, METH_VARARGS, SIP_MLDOC_CAST(doc_QScrollPrepareEvent_contentPosRange)},
    {SIP_MLNAME_CAST(sipName_setContentPos), meth_QScrollPrepareEvent_setContentPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QScrollPrepareEvent_setContentPos)},
    {SIP_MLNAME_CAST(sipName_setContentPosRange), meth_QScrollPrepareEvent_setContentPosRange, METH_VARARGS, SIP_MLDOC_CAST(doc_QScrollPrepareEvent_setContentPosRange)},
    {SIP_MLNAME_CAST(sipName_setViewportSize), meth_QScrollPrepareEvent_setViewportSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QScrollPrepareEvent_setViewportSize)},
    {SIP_MLNAME_CAST(sipName_startPos), meth_QScrollPrepareEvent_startPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QScrollPrepareEvent_startPos)},
    {SIP_MLNAME_CAST(sipName_viewportSize), meth_QScrollPrepareEvent_viewportSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QScrollPrepareEvent_viewportSize)}
};

PyDoc_STRVAR(doc_QScrollPrepareEvent, "\1QScrollPrepareEvent(Union[QPointF, QPoint])\n"
"QScrollPrepareEvent(QScrollPrepareEvent)");


static pyqt5ClassPluginDef plugin_QScrollPrepareEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QScrollPrepareEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QScrollPrepareEvent,
        {SIP_NULLPTR},
        &plugin_QScrollPrepareEvent
    },
    {
        sipNameNr_QScrollPrepareEvent,
        {0, 0, 1},
        7, methods_QScrollPrepareEvent,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QScrollPrepareEvent,
    -1,
    -1,
    supers_QScrollPrepareEvent,
    SIP_NULLPTR,
    init_type_QScrollPrepareEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QScrollPrepareEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QScrollPrepareEvent,
    cast_QScrollPrepareEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 786 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 63556 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 63560 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63563 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQExposeEvent : public  ::QExposeEvent
{
public:
    sipQExposeEvent(const  ::QRegion&);
    sipQExposeEvent(const  ::QExposeEvent&);
    ~sipQExposeEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQExposeEvent(const sipQExposeEvent &);
    sipQExposeEvent &operator = (const sipQExposeEvent &);
};

sipQExposeEvent::sipQExposeEvent(const  ::QRegion& a0):  ::QExposeEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQExposeEvent::sipQExposeEvent(const  ::QExposeEvent& a0):  ::QExposeEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQExposeEvent::~sipQExposeEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QExposeEvent_region, "region(self) -> QRegion");

extern "C" {static PyObject *meth_QExposeEvent_region(PyObject *, PyObject *);}
static PyObject *meth_QExposeEvent_region(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QExposeEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QExposeEvent, &sipCpp))
        {
             ::QRegion*sipRes;

            sipRes = new  ::QRegion(sipCpp->region());

            return sipConvertFromNewType(sipRes,sipType_QRegion,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QExposeEvent, sipName_region, doc_QExposeEvent_region);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QExposeEvent(void *, const sipTypeDef *);}
static void *cast_QExposeEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QExposeEvent *sipCpp = reinterpret_cast< ::QExposeEvent *>(sipCppV);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QExposeEvent(void *, int);}
static void release_QExposeEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQExposeEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QExposeEvent *>(sipCppV);
}


extern "C" {static void dealloc_QExposeEvent(sipSimpleWrapper *);}
static void dealloc_QExposeEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQExposeEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QExposeEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QExposeEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QExposeEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQExposeEvent *sipCpp = SIP_NULLPTR;

    {
        const  ::QRegion* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QRegion, &a0))
        {
            sipCpp = new sipQExposeEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QExposeEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QExposeEvent, &a0))
        {
            sipCpp = new sipQExposeEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QExposeEvent[] = {{6, 0, 1}};


static PyMethodDef methods_QExposeEvent[] = {
    {SIP_MLNAME_CAST(sipName_region), meth_QExposeEvent_region, METH_VARARGS, SIP_MLDOC_CAST(doc_QExposeEvent_region)}
};

PyDoc_STRVAR(doc_QExposeEvent, "\1QExposeEvent(QRegion)\n"
"QExposeEvent(QExposeEvent)");


static pyqt5ClassPluginDef plugin_QExposeEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QExposeEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QExposeEvent,
        {SIP_NULLPTR},
        &plugin_QExposeEvent
    },
    {
        sipNameNr_QExposeEvent,
        {0, 0, 1},
        1, methods_QExposeEvent,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QExposeEvent,
    -1,
    -1,
    supers_QExposeEvent,
    SIP_NULLPTR,
    init_type_QExposeEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QExposeEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QExposeEvent,
    cast_QExposeEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 717 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 724 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 63770 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 717 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 724 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 63776 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


extern "C" {static long slot_QTouchEvent_TouchPoint_InfoFlags___hash__(PyObject *);}
static long slot_QTouchEvent_TouchPoint_InfoFlags___hash__(PyObject *sipSelf)
{
     ::QTouchEvent::TouchPoint::InfoFlags *sipCpp = reinterpret_cast< ::QTouchEvent::TouchPoint::InfoFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTouchEvent_TouchPoint_InfoFlags));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QTouchEvent::TouchPoint::InfoFlags::Int();
#line 63794 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QTouchEvent_TouchPoint_InfoFlags___bool__(PyObject *);}
static int slot_QTouchEvent_TouchPoint_InfoFlags___bool__(PyObject *sipSelf)
{
     ::QTouchEvent::TouchPoint::InfoFlags *sipCpp = reinterpret_cast< ::QTouchEvent::TouchPoint::InfoFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTouchEvent_TouchPoint_InfoFlags));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QTouchEvent::TouchPoint::InfoFlags::Int() != 0);
#line 63819 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QTouchEvent_TouchPoint_InfoFlags___ne__(PyObject *,PyObject *);}
static PyObject *slot_QTouchEvent_TouchPoint_InfoFlags___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTouchEvent::TouchPoint::InfoFlags *sipCpp = reinterpret_cast< ::QTouchEvent::TouchPoint::InfoFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTouchEvent_TouchPoint_InfoFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTouchEvent::TouchPoint::InfoFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QTouchEvent_TouchPoint_InfoFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QTouchEvent::TouchPoint::InfoFlags::Int() != a0->operator QTouchEvent::TouchPoint::InfoFlags::Int());
#line 63849 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
            sipReleaseType(const_cast< ::QTouchEvent::TouchPoint::InfoFlags *>(a0),sipType_QTouchEvent_TouchPoint_InfoFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QTouchEvent_TouchPoint_InfoFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTouchEvent_TouchPoint_InfoFlags___eq__(PyObject *,PyObject *);}
static PyObject *slot_QTouchEvent_TouchPoint_InfoFlags___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTouchEvent::TouchPoint::InfoFlags *sipCpp = reinterpret_cast< ::QTouchEvent::TouchPoint::InfoFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTouchEvent_TouchPoint_InfoFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTouchEvent::TouchPoint::InfoFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QTouchEvent_TouchPoint_InfoFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QTouchEvent::TouchPoint::InfoFlags::Int() == a0->operator QTouchEvent::TouchPoint::InfoFlags::Int());
#line 63885 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
            sipReleaseType(const_cast< ::QTouchEvent::TouchPoint::InfoFlags *>(a0),sipType_QTouchEvent_TouchPoint_InfoFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QTouchEvent_TouchPoint_InfoFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTouchEvent_TouchPoint_InfoFlags___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QTouchEvent_TouchPoint_InfoFlags___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTouchEvent_TouchPoint_InfoFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTouchEvent::TouchPoint::InfoFlags *sipCpp = reinterpret_cast< ::QTouchEvent::TouchPoint::InfoFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTouchEvent_TouchPoint_InfoFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QTouchEvent::TouchPoint::InfoFlags(*sipCpp ^ a0);
#line 63924 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTouchEvent_TouchPoint_InfoFlags___xor__(PyObject *,PyObject *);}
static PyObject *slot_QTouchEvent_TouchPoint_InfoFlags___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTouchEvent::TouchPoint::InfoFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QTouchEvent_TouchPoint_InfoFlags, &a0, &a0State, &a1))
        {
             ::QTouchEvent::TouchPoint::InfoFlags*sipRes;

            sipRes = new  ::QTouchEvent::TouchPoint::InfoFlags((*a0 ^ a1));
            sipReleaseType(a0,sipType_QTouchEvent_TouchPoint_InfoFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTouchEvent_TouchPoint_InfoFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QTouchEvent_TouchPoint_InfoFlags___ior__(PyObject *,PyObject *);}
static PyObject *slot_QTouchEvent_TouchPoint_InfoFlags___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTouchEvent_TouchPoint_InfoFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTouchEvent::TouchPoint::InfoFlags *sipCpp = reinterpret_cast< ::QTouchEvent::TouchPoint::InfoFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTouchEvent_TouchPoint_InfoFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QTouchEvent::TouchPoint::InfoFlags(*sipCpp | a0);
#line 63996 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTouchEvent_TouchPoint_InfoFlags___or__(PyObject *,PyObject *);}
static PyObject *slot_QTouchEvent_TouchPoint_InfoFlags___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTouchEvent::TouchPoint::InfoFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QTouchEvent_TouchPoint_InfoFlags, &a0, &a0State, &a1))
        {
             ::QTouchEvent::TouchPoint::InfoFlags*sipRes;

            sipRes = new  ::QTouchEvent::TouchPoint::InfoFlags((*a0 | a1));
            sipReleaseType(a0,sipType_QTouchEvent_TouchPoint_InfoFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTouchEvent_TouchPoint_InfoFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QTouchEvent_TouchPoint_InfoFlags___iand__(PyObject *,PyObject *);}
static PyObject *slot_QTouchEvent_TouchPoint_InfoFlags___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTouchEvent_TouchPoint_InfoFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTouchEvent::TouchPoint::InfoFlags *sipCpp = reinterpret_cast< ::QTouchEvent::TouchPoint::InfoFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTouchEvent_TouchPoint_InfoFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QTouchEvent::TouchPoint::InfoFlags::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTouchEvent_TouchPoint_InfoFlags___and__(PyObject *,PyObject *);}
static PyObject *slot_QTouchEvent_TouchPoint_InfoFlags___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTouchEvent::TouchPoint::InfoFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QTouchEvent_TouchPoint_InfoFlags, &a0, &a0State, &a1))
        {
             ::QTouchEvent::TouchPoint::InfoFlags*sipRes;

            sipRes = new  ::QTouchEvent::TouchPoint::InfoFlags((*a0 & a1));
            sipReleaseType(a0,sipType_QTouchEvent_TouchPoint_InfoFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTouchEvent_TouchPoint_InfoFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QTouchEvent_TouchPoint_InfoFlags___invert__(PyObject *);}
static PyObject *slot_QTouchEvent_TouchPoint_InfoFlags___invert__(PyObject *sipSelf)
{
     ::QTouchEvent::TouchPoint::InfoFlags *sipCpp = reinterpret_cast< ::QTouchEvent::TouchPoint::InfoFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTouchEvent_TouchPoint_InfoFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QTouchEvent::TouchPoint::InfoFlags*sipRes;

            sipRes = new  ::QTouchEvent::TouchPoint::InfoFlags(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QTouchEvent_TouchPoint_InfoFlags,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QTouchEvent_TouchPoint_InfoFlags___int__(PyObject *);}
static PyObject *slot_QTouchEvent_TouchPoint_InfoFlags___int__(PyObject *sipSelf)
{
     ::QTouchEvent::TouchPoint::InfoFlags *sipCpp = reinterpret_cast< ::QTouchEvent::TouchPoint::InfoFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTouchEvent_TouchPoint_InfoFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTouchEvent_TouchPoint_InfoFlags(void *, int);}
static void release_QTouchEvent_TouchPoint_InfoFlags(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTouchEvent::TouchPoint::InfoFlags *>(sipCppV);
}


extern "C" {static void assign_QTouchEvent_TouchPoint_InfoFlags(void *, SIP_SSIZE_T, void *);}
static void assign_QTouchEvent_TouchPoint_InfoFlags(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTouchEvent::TouchPoint::InfoFlags *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTouchEvent::TouchPoint::InfoFlags *>(sipSrc);
}


extern "C" {static void *array_QTouchEvent_TouchPoint_InfoFlags(SIP_SSIZE_T);}
static void *array_QTouchEvent_TouchPoint_InfoFlags(SIP_SSIZE_T sipNrElem)
{
    return new  ::QTouchEvent::TouchPoint::InfoFlags[sipNrElem];
}


extern "C" {static void *copy_QTouchEvent_TouchPoint_InfoFlags(const void *, SIP_SSIZE_T);}
static void *copy_QTouchEvent_TouchPoint_InfoFlags(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QTouchEvent::TouchPoint::InfoFlags(reinterpret_cast<const  ::QTouchEvent::TouchPoint::InfoFlags *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTouchEvent_TouchPoint_InfoFlags(sipSimpleWrapper *);}
static void dealloc_QTouchEvent_TouchPoint_InfoFlags(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTouchEvent_TouchPoint_InfoFlags(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTouchEvent_TouchPoint_InfoFlags(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTouchEvent_TouchPoint_InfoFlags(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTouchEvent::TouchPoint::InfoFlags *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTouchEvent::TouchPoint::InfoFlags();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QTouchEvent::TouchPoint::InfoFlags(a0);

            return sipCpp;
        }
    }

    {
        const  ::QTouchEvent::TouchPoint::InfoFlags* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QTouchEvent_TouchPoint_InfoFlags, &a0, &a0State))
        {
            sipCpp = new  ::QTouchEvent::TouchPoint::InfoFlags(*a0);
            sipReleaseType(const_cast< ::QTouchEvent::TouchPoint::InfoFlags *>(a0),sipType_QTouchEvent_TouchPoint_InfoFlags,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QTouchEvent_TouchPoint_InfoFlags(PyObject *, void **, int *, PyObject *);}
static int convertTo_QTouchEvent_TouchPoint_InfoFlags(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QTouchEvent::TouchPoint::InfoFlags **sipCppPtr = reinterpret_cast< ::QTouchEvent::TouchPoint::InfoFlags **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QTouchEvent::TouchPoint::InfoFlags is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QTouchEvent_TouchPoint_InfoFlag)) ||
            sipCanConvertToType(sipPy, sipType_QTouchEvent_TouchPoint_InfoFlags, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QTouchEvent_TouchPoint_InfoFlag)))
{
    *sipCppPtr = new QTouchEvent::TouchPoint::InfoFlags(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QTouchEvent::TouchPoint::InfoFlags *>(sipConvertToType(sipPy, sipType_QTouchEvent_TouchPoint_InfoFlags, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 64264 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QTouchEvent_TouchPoint_InfoFlags[] = {
    {(void *)slot_QTouchEvent_TouchPoint_InfoFlags___hash__, hash_slot},
    {(void *)slot_QTouchEvent_TouchPoint_InfoFlags___bool__, bool_slot},
    {(void *)slot_QTouchEvent_TouchPoint_InfoFlags___ne__, ne_slot},
    {(void *)slot_QTouchEvent_TouchPoint_InfoFlags___eq__, eq_slot},
    {(void *)slot_QTouchEvent_TouchPoint_InfoFlags___ixor__, ixor_slot},
    {(void *)slot_QTouchEvent_TouchPoint_InfoFlags___xor__, xor_slot},
    {(void *)slot_QTouchEvent_TouchPoint_InfoFlags___ior__, ior_slot},
    {(void *)slot_QTouchEvent_TouchPoint_InfoFlags___or__, or_slot},
    {(void *)slot_QTouchEvent_TouchPoint_InfoFlags___iand__, iand_slot},
    {(void *)slot_QTouchEvent_TouchPoint_InfoFlags___and__, and_slot},
    {(void *)slot_QTouchEvent_TouchPoint_InfoFlags___invert__, invert_slot},
    {(void *)slot_QTouchEvent_TouchPoint_InfoFlags___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QTouchEvent_TouchPoint_InfoFlags, "\1QTouchEvent.TouchPoint.InfoFlags()\n"
"QTouchEvent.TouchPoint.InfoFlags(Union[QTouchEvent.TouchPoint.InfoFlags, QTouchEvent.TouchPoint.InfoFlag])\n"
"QTouchEvent.TouchPoint.InfoFlags(QTouchEvent.TouchPoint.InfoFlags)");


static pyqt5ClassPluginDef plugin_QTouchEvent_TouchPoint_InfoFlags = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTouchEvent_TouchPoint_InfoFlags = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTouchEvent__TouchPoint__InfoFlags,
        {SIP_NULLPTR},
        &plugin_QTouchEvent_TouchPoint_InfoFlags
    },
    {
        sipNameNr_InfoFlags,
        {349, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTouchEvent_TouchPoint_InfoFlags,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QTouchEvent_TouchPoint_InfoFlags,
    init_type_QTouchEvent_TouchPoint_InfoFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTouchEvent_TouchPoint_InfoFlags,
    assign_QTouchEvent_TouchPoint_InfoFlags,
    array_QTouchEvent_TouchPoint_InfoFlags,
    copy_QTouchEvent_TouchPoint_InfoFlags,
    release_QTouchEvent_TouchPoint_InfoFlags,
    SIP_NULLPTR,
    convertTo_QTouchEvent_TouchPoint_InfoFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 717 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 724 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 64354 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 97 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 64358 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 913 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 64361 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 64364 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 64367 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 717 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 724 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 64372 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qvector2d.sip"
#include <qvector2d.h>
#line 64375 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 64378 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 64381 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QTouchEvent_TouchPoint_id, "id(self) -> int");

extern "C" {static PyObject *meth_QTouchEvent_TouchPoint_id(PyObject *, PyObject *);}
static PyObject *meth_QTouchEvent_TouchPoint_id(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTouchEvent::TouchPoint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTouchEvent_TouchPoint, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->id();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TouchPoint, sipName_id, doc_QTouchEvent_TouchPoint_id);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTouchEvent_TouchPoint_state, "state(self) -> Qt.TouchPointState");

extern "C" {static PyObject *meth_QTouchEvent_TouchPoint_state(PyObject *, PyObject *);}
static PyObject *meth_QTouchEvent_TouchPoint_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTouchEvent::TouchPoint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTouchEvent_TouchPoint, &sipCpp))
        {
             ::Qt::TouchPointState sipRes;

            sipRes = sipCpp->state();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_TouchPointState);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TouchPoint, sipName_state, doc_QTouchEvent_TouchPoint_state);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTouchEvent_TouchPoint_pos, "pos(self) -> QPointF");

extern "C" {static PyObject *meth_QTouchEvent_TouchPoint_pos(PyObject *, PyObject *);}
static PyObject *meth_QTouchEvent_TouchPoint_pos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTouchEvent::TouchPoint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTouchEvent_TouchPoint, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->pos());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TouchPoint, sipName_pos, doc_QTouchEvent_TouchPoint_pos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTouchEvent_TouchPoint_startPos, "startPos(self) -> QPointF");

extern "C" {static PyObject *meth_QTouchEvent_TouchPoint_startPos(PyObject *, PyObject *);}
static PyObject *meth_QTouchEvent_TouchPoint_startPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTouchEvent::TouchPoint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTouchEvent_TouchPoint, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->startPos());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TouchPoint, sipName_startPos, doc_QTouchEvent_TouchPoint_startPos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTouchEvent_TouchPoint_lastPos, "lastPos(self) -> QPointF");

extern "C" {static PyObject *meth_QTouchEvent_TouchPoint_lastPos(PyObject *, PyObject *);}
static PyObject *meth_QTouchEvent_TouchPoint_lastPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTouchEvent::TouchPoint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTouchEvent_TouchPoint, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->lastPos());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TouchPoint, sipName_lastPos, doc_QTouchEvent_TouchPoint_lastPos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTouchEvent_TouchPoint_scenePos, "scenePos(self) -> QPointF");

extern "C" {static PyObject *meth_QTouchEvent_TouchPoint_scenePos(PyObject *, PyObject *);}
static PyObject *meth_QTouchEvent_TouchPoint_scenePos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTouchEvent::TouchPoint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTouchEvent_TouchPoint, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->scenePos());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TouchPoint, sipName_scenePos, doc_QTouchEvent_TouchPoint_scenePos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTouchEvent_TouchPoint_startScenePos, "startScenePos(self) -> QPointF");

extern "C" {static PyObject *meth_QTouchEvent_TouchPoint_startScenePos(PyObject *, PyObject *);}
static PyObject *meth_QTouchEvent_TouchPoint_startScenePos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTouchEvent::TouchPoint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTouchEvent_TouchPoint, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->startScenePos());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TouchPoint, sipName_startScenePos, doc_QTouchEvent_TouchPoint_startScenePos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTouchEvent_TouchPoint_lastScenePos, "lastScenePos(self) -> QPointF");

extern "C" {static PyObject *meth_QTouchEvent_TouchPoint_lastScenePos(PyObject *, PyObject *);}
static PyObject *meth_QTouchEvent_TouchPoint_lastScenePos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTouchEvent::TouchPoint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTouchEvent_TouchPoint, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->lastScenePos());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TouchPoint, sipName_lastScenePos, doc_QTouchEvent_TouchPoint_lastScenePos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTouchEvent_TouchPoint_screenPos, "screenPos(self) -> QPointF");

extern "C" {static PyObject *meth_QTouchEvent_TouchPoint_screenPos(PyObject *, PyObject *);}
static PyObject *meth_QTouchEvent_TouchPoint_screenPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTouchEvent::TouchPoint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTouchEvent_TouchPoint, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->screenPos());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TouchPoint, sipName_screenPos, doc_QTouchEvent_TouchPoint_screenPos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTouchEvent_TouchPoint_startScreenPos, "startScreenPos(self) -> QPointF");

extern "C" {static PyObject *meth_QTouchEvent_TouchPoint_startScreenPos(PyObject *, PyObject *);}
static PyObject *meth_QTouchEvent_TouchPoint_startScreenPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTouchEvent::TouchPoint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTouchEvent_TouchPoint, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->startScreenPos());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TouchPoint, sipName_startScreenPos, doc_QTouchEvent_TouchPoint_startScreenPos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTouchEvent_TouchPoint_lastScreenPos, "lastScreenPos(self) -> QPointF");

extern "C" {static PyObject *meth_QTouchEvent_TouchPoint_lastScreenPos(PyObject *, PyObject *);}
static PyObject *meth_QTouchEvent_TouchPoint_lastScreenPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTouchEvent::TouchPoint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTouchEvent_TouchPoint, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->lastScreenPos());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TouchPoint, sipName_lastScreenPos, doc_QTouchEvent_TouchPoint_lastScreenPos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTouchEvent_TouchPoint_normalizedPos, "normalizedPos(self) -> QPointF");

extern "C" {static PyObject *meth_QTouchEvent_TouchPoint_normalizedPos(PyObject *, PyObject *);}
static PyObject *meth_QTouchEvent_TouchPoint_normalizedPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTouchEvent::TouchPoint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTouchEvent_TouchPoint, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->normalizedPos());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TouchPoint, sipName_normalizedPos, doc_QTouchEvent_TouchPoint_normalizedPos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTouchEvent_TouchPoint_startNormalizedPos, "startNormalizedPos(self) -> QPointF");

extern "C" {static PyObject *meth_QTouchEvent_TouchPoint_startNormalizedPos(PyObject *, PyObject *);}
static PyObject *meth_QTouchEvent_TouchPoint_startNormalizedPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTouchEvent::TouchPoint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTouchEvent_TouchPoint, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->startNormalizedPos());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TouchPoint, sipName_startNormalizedPos, doc_QTouchEvent_TouchPoint_startNormalizedPos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTouchEvent_TouchPoint_lastNormalizedPos, "lastNormalizedPos(self) -> QPointF");

extern "C" {static PyObject *meth_QTouchEvent_TouchPoint_lastNormalizedPos(PyObject *, PyObject *);}
static PyObject *meth_QTouchEvent_TouchPoint_lastNormalizedPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTouchEvent::TouchPoint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTouchEvent_TouchPoint, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->lastNormalizedPos());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TouchPoint, sipName_lastNormalizedPos, doc_QTouchEvent_TouchPoint_lastNormalizedPos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTouchEvent_TouchPoint_rect, "rect(self) -> QRectF");

extern "C" {static PyObject *meth_QTouchEvent_TouchPoint_rect(PyObject *, PyObject *);}
static PyObject *meth_QTouchEvent_TouchPoint_rect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTouchEvent::TouchPoint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTouchEvent_TouchPoint, &sipCpp))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->rect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TouchPoint, sipName_rect, doc_QTouchEvent_TouchPoint_rect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTouchEvent_TouchPoint_sceneRect, "sceneRect(self) -> QRectF");

extern "C" {static PyObject *meth_QTouchEvent_TouchPoint_sceneRect(PyObject *, PyObject *);}
static PyObject *meth_QTouchEvent_TouchPoint_sceneRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTouchEvent::TouchPoint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTouchEvent_TouchPoint, &sipCpp))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->sceneRect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TouchPoint, sipName_sceneRect, doc_QTouchEvent_TouchPoint_sceneRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTouchEvent_TouchPoint_screenRect, "screenRect(self) -> QRectF");

extern "C" {static PyObject *meth_QTouchEvent_TouchPoint_screenRect(PyObject *, PyObject *);}
static PyObject *meth_QTouchEvent_TouchPoint_screenRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTouchEvent::TouchPoint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTouchEvent_TouchPoint, &sipCpp))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->screenRect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TouchPoint, sipName_screenRect, doc_QTouchEvent_TouchPoint_screenRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTouchEvent_TouchPoint_pressure, "pressure(self) -> float");

extern "C" {static PyObject *meth_QTouchEvent_TouchPoint_pressure(PyObject *, PyObject *);}
static PyObject *meth_QTouchEvent_TouchPoint_pressure(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTouchEvent::TouchPoint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTouchEvent_TouchPoint, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->pressure();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TouchPoint, sipName_pressure, doc_QTouchEvent_TouchPoint_pressure);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTouchEvent_TouchPoint_velocity, "velocity(self) -> QVector2D");

extern "C" {static PyObject *meth_QTouchEvent_TouchPoint_velocity(PyObject *, PyObject *);}
static PyObject *meth_QTouchEvent_TouchPoint_velocity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTouchEvent::TouchPoint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTouchEvent_TouchPoint, &sipCpp))
        {
             ::QVector2D*sipRes;

            sipRes = new  ::QVector2D(sipCpp->velocity());

            return sipConvertFromNewType(sipRes,sipType_QVector2D,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TouchPoint, sipName_velocity, doc_QTouchEvent_TouchPoint_velocity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTouchEvent_TouchPoint_flags, "flags(self) -> QTouchEvent.TouchPoint.InfoFlags");

extern "C" {static PyObject *meth_QTouchEvent_TouchPoint_flags(PyObject *, PyObject *);}
static PyObject *meth_QTouchEvent_TouchPoint_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTouchEvent::TouchPoint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTouchEvent_TouchPoint, &sipCpp))
        {
             ::QTouchEvent::TouchPoint::InfoFlags*sipRes;

            sipRes = new  ::QTouchEvent::TouchPoint::InfoFlags(sipCpp->flags());

            return sipConvertFromNewType(sipRes,sipType_QTouchEvent_TouchPoint_InfoFlags,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TouchPoint, sipName_flags, doc_QTouchEvent_TouchPoint_flags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTouchEvent_TouchPoint_rawScreenPositions, "rawScreenPositions(self) -> List[QPointF]");

extern "C" {static PyObject *meth_QTouchEvent_TouchPoint_rawScreenPositions(PyObject *, PyObject *);}
static PyObject *meth_QTouchEvent_TouchPoint_rawScreenPositions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTouchEvent::TouchPoint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTouchEvent_TouchPoint, &sipCpp))
        {
            QVector< ::QPointF>*sipRes;

            sipRes = new QVector< ::QPointF>(sipCpp->rawScreenPositions());

            return sipConvertFromNewType(sipRes,sipType_QVector_0100QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TouchPoint, sipName_rawScreenPositions, doc_QTouchEvent_TouchPoint_rawScreenPositions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTouchEvent_TouchPoint_uniqueId, "uniqueId(self) -> QPointingDeviceUniqueId");

extern "C" {static PyObject *meth_QTouchEvent_TouchPoint_uniqueId(PyObject *, PyObject *);}
static PyObject *meth_QTouchEvent_TouchPoint_uniqueId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTouchEvent::TouchPoint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTouchEvent_TouchPoint, &sipCpp))
        {
             ::QPointingDeviceUniqueId*sipRes;

            sipRes = new  ::QPointingDeviceUniqueId(sipCpp->uniqueId());

            return sipConvertFromNewType(sipRes,sipType_QPointingDeviceUniqueId,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TouchPoint, sipName_uniqueId, doc_QTouchEvent_TouchPoint_uniqueId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTouchEvent_TouchPoint_rotation, "rotation(self) -> float");

extern "C" {static PyObject *meth_QTouchEvent_TouchPoint_rotation(PyObject *, PyObject *);}
static PyObject *meth_QTouchEvent_TouchPoint_rotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTouchEvent::TouchPoint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTouchEvent_TouchPoint, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->rotation();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TouchPoint, sipName_rotation, doc_QTouchEvent_TouchPoint_rotation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTouchEvent_TouchPoint_ellipseDiameters, "ellipseDiameters(self) -> QSizeF");

extern "C" {static PyObject *meth_QTouchEvent_TouchPoint_ellipseDiameters(PyObject *, PyObject *);}
static PyObject *meth_QTouchEvent_TouchPoint_ellipseDiameters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTouchEvent::TouchPoint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTouchEvent_TouchPoint, &sipCpp))
        {
             ::QSizeF*sipRes;

            sipRes = new  ::QSizeF(sipCpp->ellipseDiameters());

            return sipConvertFromNewType(sipRes,sipType_QSizeF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TouchPoint, sipName_ellipseDiameters, doc_QTouchEvent_TouchPoint_ellipseDiameters);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTouchEvent_TouchPoint(void *, int);}
static void release_QTouchEvent_TouchPoint(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTouchEvent::TouchPoint *>(sipCppV);
}


extern "C" {static void dealloc_QTouchEvent_TouchPoint(sipSimpleWrapper *);}
static void dealloc_QTouchEvent_TouchPoint(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTouchEvent_TouchPoint(sipGetAddress(sipSelf), 0);
    }
}


static PyMethodDef methods_QTouchEvent_TouchPoint[] = {
    {SIP_MLNAME_CAST(sipName_ellipseDiameters), meth_QTouchEvent_TouchPoint_ellipseDiameters, METH_VARARGS, SIP_MLDOC_CAST(doc_QTouchEvent_TouchPoint_ellipseDiameters)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QTouchEvent_TouchPoint_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QTouchEvent_TouchPoint_flags)},
    {SIP_MLNAME_CAST(sipName_id), meth_QTouchEvent_TouchPoint_id, METH_VARARGS, SIP_MLDOC_CAST(doc_QTouchEvent_TouchPoint_id)},
    {SIP_MLNAME_CAST(sipName_lastNormalizedPos), meth_QTouchEvent_TouchPoint_lastNormalizedPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QTouchEvent_TouchPoint_lastNormalizedPos)},
    {SIP_MLNAME_CAST(sipName_lastPos), meth_QTouchEvent_TouchPoint_lastPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QTouchEvent_TouchPoint_lastPos)},
    {SIP_MLNAME_CAST(sipName_lastScenePos), meth_QTouchEvent_TouchPoint_lastScenePos, METH_VARARGS, SIP_MLDOC_CAST(doc_QTouchEvent_TouchPoint_lastScenePos)},
    {SIP_MLNAME_CAST(sipName_lastScreenPos), meth_QTouchEvent_TouchPoint_lastScreenPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QTouchEvent_TouchPoint_lastScreenPos)},
    {SIP_MLNAME_CAST(sipName_normalizedPos), meth_QTouchEvent_TouchPoint_normalizedPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QTouchEvent_TouchPoint_normalizedPos)},
    {SIP_MLNAME_CAST(sipName_pos), meth_QTouchEvent_TouchPoint_pos, METH_VARARGS, SIP_MLDOC_CAST(doc_QTouchEvent_TouchPoint_pos)},
    {SIP_MLNAME_CAST(sipName_pressure), meth_QTouchEvent_TouchPoint_pressure, METH_VARARGS, SIP_MLDOC_CAST(doc_QTouchEvent_TouchPoint_pressure)},
    {SIP_MLNAME_CAST(sipName_rawScreenPositions), meth_QTouchEvent_TouchPoint_rawScreenPositions, METH_VARARGS, SIP_MLDOC_CAST(doc_QTouchEvent_TouchPoint_rawScreenPositions)},
    {SIP_MLNAME_CAST(sipName_rect), meth_QTouchEvent_TouchPoint_rect, METH_VARARGS, SIP_MLDOC_CAST(doc_QTouchEvent_TouchPoint_rect)},
    {SIP_MLNAME_CAST(sipName_rotation), meth_QTouchEvent_TouchPoint_rotation, METH_VARARGS, SIP_MLDOC_CAST(doc_QTouchEvent_TouchPoint_rotation)},
    {SIP_MLNAME_CAST(sipName_scenePos), meth_QTouchEvent_TouchPoint_scenePos, METH_VARARGS, SIP_MLDOC_CAST(doc_QTouchEvent_TouchPoint_scenePos)},
    {SIP_MLNAME_CAST(sipName_sceneRect), meth_QTouchEvent_TouchPoint_sceneRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QTouchEvent_TouchPoint_sceneRect)},
    {SIP_MLNAME_CAST(sipName_screenPos), meth_QTouchEvent_TouchPoint_screenPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QTouchEvent_TouchPoint_screenPos)},
    {SIP_MLNAME_CAST(sipName_screenRect), meth_QTouchEvent_TouchPoint_screenRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QTouchEvent_TouchPoint_screenRect)},
    {SIP_MLNAME_CAST(sipName_startNormalizedPos), meth_QTouchEvent_TouchPoint_startNormalizedPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QTouchEvent_TouchPoint_startNormalizedPos)},
    {SIP_MLNAME_CAST(sipName_startPos), meth_QTouchEvent_TouchPoint_startPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QTouchEvent_TouchPoint_startPos)},
    {SIP_MLNAME_CAST(sipName_startScenePos), meth_QTouchEvent_TouchPoint_startScenePos, METH_VARARGS, SIP_MLDOC_CAST(doc_QTouchEvent_TouchPoint_startScenePos)},
    {SIP_MLNAME_CAST(sipName_startScreenPos), meth_QTouchEvent_TouchPoint_startScreenPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QTouchEvent_TouchPoint_startScreenPos)},
    {SIP_MLNAME_CAST(sipName_state), meth_QTouchEvent_TouchPoint_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QTouchEvent_TouchPoint_state)},
    {SIP_MLNAME_CAST(sipName_uniqueId), meth_QTouchEvent_TouchPoint_uniqueId, METH_VARARGS, SIP_MLDOC_CAST(doc_QTouchEvent_TouchPoint_uniqueId)},
    {SIP_MLNAME_CAST(sipName_velocity), meth_QTouchEvent_TouchPoint_velocity, METH_VARARGS, SIP_MLDOC_CAST(doc_QTouchEvent_TouchPoint_velocity)}
};

static sipEnumMemberDef enummembers_QTouchEvent_TouchPoint[] = {
    {sipName_Pen, static_cast<int>( ::QTouchEvent::TouchPoint::Pen), 350},
    {sipName_Token, static_cast<int>( ::QTouchEvent::TouchPoint::Token), 350},
};


static pyqt5ClassPluginDef plugin_QTouchEvent_TouchPoint = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTouchEvent_TouchPoint = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTouchEvent__TouchPoint,
        {SIP_NULLPTR},
        &plugin_QTouchEvent_TouchPoint
    },
    {
        sipNameNr_TouchPoint,
        {348, 255, 0},
        24, methods_QTouchEvent_TouchPoint,
        2, enummembers_QTouchEvent_TouchPoint,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTouchEvent_TouchPoint,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QTouchEvent_TouchPoint,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 717 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 65166 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 65170 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtouchdevice.sip"
#include <qtouchdevice.h>
#line 65173 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 65176 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 65179 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 65182 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 717 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 724 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 65187 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 65190 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 65193 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQTouchEvent : public  ::QTouchEvent
{
public:
    sipQTouchEvent( ::QEvent::Type, ::QTouchDevice*, ::Qt::KeyboardModifiers, ::Qt::TouchPointStates,const QList< ::QTouchEvent::TouchPoint>&);
    sipQTouchEvent(const  ::QTouchEvent&);
    ~sipQTouchEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTouchEvent(const sipQTouchEvent &);
    sipQTouchEvent &operator = (const sipQTouchEvent &);
};

sipQTouchEvent::sipQTouchEvent( ::QEvent::Type a0, ::QTouchDevice*a1, ::Qt::KeyboardModifiers a2, ::Qt::TouchPointStates a3,const QList< ::QTouchEvent::TouchPoint>& a4):  ::QTouchEvent(a0,a1,a2,a3,a4), sipPySelf(SIP_NULLPTR)
{
}

sipQTouchEvent::sipQTouchEvent(const  ::QTouchEvent& a0):  ::QTouchEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQTouchEvent::~sipQTouchEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QTouchEvent_target, "target(self) -> QObject");

extern "C" {static PyObject *meth_QTouchEvent_target(PyObject *, PyObject *);}
static PyObject *meth_QTouchEvent_target(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTouchEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTouchEvent, &sipCpp))
        {
             ::QObject*sipRes;

            sipRes = sipCpp->target();

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTouchEvent, sipName_target, doc_QTouchEvent_target);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTouchEvent_touchPointStates, "touchPointStates(self) -> Qt.TouchPointStates");

extern "C" {static PyObject *meth_QTouchEvent_touchPointStates(PyObject *, PyObject *);}
static PyObject *meth_QTouchEvent_touchPointStates(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTouchEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTouchEvent, &sipCpp))
        {
             ::Qt::TouchPointStates*sipRes;

            sipRes = new  ::Qt::TouchPointStates(sipCpp->touchPointStates());

            return sipConvertFromNewType(sipRes,sipType_Qt_TouchPointStates,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTouchEvent, sipName_touchPointStates, doc_QTouchEvent_touchPointStates);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTouchEvent_touchPoints, "touchPoints(self) -> List[QTouchEvent.TouchPoint]");

extern "C" {static PyObject *meth_QTouchEvent_touchPoints(PyObject *, PyObject *);}
static PyObject *meth_QTouchEvent_touchPoints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTouchEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTouchEvent, &sipCpp))
        {
            QList< ::QTouchEvent::TouchPoint>*sipRes;

            sipRes = new QList< ::QTouchEvent::TouchPoint>(sipCpp->touchPoints());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QTouchEvent_TouchPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTouchEvent, sipName_touchPoints, doc_QTouchEvent_touchPoints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTouchEvent_window, "window(self) -> QWindow");

extern "C" {static PyObject *meth_QTouchEvent_window(PyObject *, PyObject *);}
static PyObject *meth_QTouchEvent_window(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTouchEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTouchEvent, &sipCpp))
        {
             ::QWindow*sipRes;

            sipRes = sipCpp->window();

            return sipConvertFromType(sipRes,sipType_QWindow,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTouchEvent, sipName_window, doc_QTouchEvent_window);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTouchEvent_device, "device(self) -> QTouchDevice");

extern "C" {static PyObject *meth_QTouchEvent_device(PyObject *, PyObject *);}
static PyObject *meth_QTouchEvent_device(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTouchEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTouchEvent, &sipCpp))
        {
             ::QTouchDevice*sipRes;

            sipRes = sipCpp->device();

            return sipConvertFromType(sipRes,sipType_QTouchDevice,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTouchEvent, sipName_device, doc_QTouchEvent_device);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTouchEvent_setDevice, "setDevice(self, QTouchDevice)");

extern "C" {static PyObject *meth_QTouchEvent_setDevice(PyObject *, PyObject *);}
static PyObject *meth_QTouchEvent_setDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTouchDevice* a0;
         ::QTouchEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTouchEvent, &sipCpp, sipType_QTouchDevice, &a0))
        {
            sipCpp->setDevice(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTouchEvent, sipName_setDevice, doc_QTouchEvent_setDevice);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QTouchEvent(void *, const sipTypeDef *);}
static void *cast_QTouchEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QTouchEvent *sipCpp = reinterpret_cast< ::QTouchEvent *>(sipCppV);

    if (targetType == sipType_QInputEvent)
        return static_cast< ::QInputEvent *>(sipCpp);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTouchEvent(void *, int);}
static void release_QTouchEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQTouchEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QTouchEvent *>(sipCppV);
}


extern "C" {static void dealloc_QTouchEvent(sipSimpleWrapper *);}
static void dealloc_QTouchEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQTouchEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTouchEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QTouchEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTouchEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQTouchEvent *sipCpp = SIP_NULLPTR;

    {
         ::QEvent::Type a0;
         ::QTouchDevice* a1 = 0;
         ::Qt::KeyboardModifiers a2def = Qt::NoModifier;
         ::Qt::KeyboardModifiers* a2 = &a2def;
        int a2State = 0;
         ::Qt::TouchPointStates a3def = Qt::TouchPointStates();
         ::Qt::TouchPointStates* a3 = &a3def;
        int a3State = 0;
        const QList< ::QTouchEvent::TouchPoint>& a4def = QList<QTouchEvent::TouchPoint>();
        const QList< ::QTouchEvent::TouchPoint>* a4 = &a4def;
        int a4State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_device,
            sipName_modifiers,
            sipName_touchPointStates,
            sipName_touchPoints,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "E|J8J1J1J1", sipType_QEvent_Type, &a0, sipType_QTouchDevice, &a1, sipType_Qt_KeyboardModifiers, &a2, &a2State, sipType_Qt_TouchPointStates, &a3, &a3State, sipType_QList_0100QTouchEvent_TouchPoint,&a4, &a4State))
        {
            sipCpp = new sipQTouchEvent(a0,a1,*a2,*a3,*a4);
            sipReleaseType(a2,sipType_Qt_KeyboardModifiers,a2State);
            sipReleaseType(a3,sipType_Qt_TouchPointStates,a3State);
            sipReleaseType(const_cast<QList< ::QTouchEvent::TouchPoint> *>(a4),sipType_QList_0100QTouchEvent_TouchPoint,a4State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QTouchEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTouchEvent, &a0))
        {
            sipCpp = new sipQTouchEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTouchEvent[] = {{77, 255, 1}};


static PyMethodDef methods_QTouchEvent[] = {
    {SIP_MLNAME_CAST(sipName_device), meth_QTouchEvent_device, METH_VARARGS, SIP_MLDOC_CAST(doc_QTouchEvent_device)},
    {SIP_MLNAME_CAST(sipName_setDevice), meth_QTouchEvent_setDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QTouchEvent_setDevice)},
    {SIP_MLNAME_CAST(sipName_target), meth_QTouchEvent_target, METH_VARARGS, SIP_MLDOC_CAST(doc_QTouchEvent_target)},
    {SIP_MLNAME_CAST(sipName_touchPointStates), meth_QTouchEvent_touchPointStates, METH_VARARGS, SIP_MLDOC_CAST(doc_QTouchEvent_touchPointStates)},
    {SIP_MLNAME_CAST(sipName_touchPoints), meth_QTouchEvent_touchPoints, METH_VARARGS, SIP_MLDOC_CAST(doc_QTouchEvent_touchPoints)},
    {SIP_MLNAME_CAST(sipName_window), meth_QTouchEvent_window, METH_VARARGS, SIP_MLDOC_CAST(doc_QTouchEvent_window)}
};

PyDoc_STRVAR(doc_QTouchEvent, "\1QTouchEvent(QEvent.Type, device: QTouchDevice = None, modifiers: Union[Qt.KeyboardModifiers, Qt.KeyboardModifier] = Qt.NoModifier, touchPointStates: Union[Qt.TouchPointStates, Qt.TouchPointState] = Qt.TouchPointStates(), touchPoints: Iterable[QTouchEvent.TouchPoint] = [])\n"
"QTouchEvent(QTouchEvent)");


static pyqt5ClassPluginDef plugin_QTouchEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTouchEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTouchEvent,
        {SIP_NULLPTR},
        &plugin_QTouchEvent
    },
    {
        sipNameNr_QTouchEvent,
        {0, 0, 1},
        6, methods_QTouchEvent,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTouchEvent,
    -1,
    -1,
    supers_QTouchEvent,
    SIP_NULLPTR,
    init_type_QTouchEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTouchEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QTouchEvent,
    cast_QTouchEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 706 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 65567 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 65571 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 65574 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QWindowStateChangeEvent_oldState, "oldState(self) -> Qt.WindowStates");

extern "C" {static PyObject *meth_QWindowStateChangeEvent_oldState(PyObject *, PyObject *);}
static PyObject *meth_QWindowStateChangeEvent_oldState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindowStateChangeEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindowStateChangeEvent, &sipCpp))
        {
             ::Qt::WindowStates*sipRes;

            sipRes = new  ::Qt::WindowStates(sipCpp->oldState());

            return sipConvertFromNewType(sipRes,sipType_Qt_WindowStates,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindowStateChangeEvent, sipName_oldState, doc_QWindowStateChangeEvent_oldState);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QWindowStateChangeEvent(void *, const sipTypeDef *);}
static void *cast_QWindowStateChangeEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QWindowStateChangeEvent *sipCpp = reinterpret_cast< ::QWindowStateChangeEvent *>(sipCppV);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWindowStateChangeEvent(void *, int);}
static void release_QWindowStateChangeEvent(void *sipCppV, int)
{
    delete reinterpret_cast< ::QWindowStateChangeEvent *>(sipCppV);
}


extern "C" {static void dealloc_QWindowStateChangeEvent(sipSimpleWrapper *);}
static void dealloc_QWindowStateChangeEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QWindowStateChangeEvent(sipGetAddress(sipSelf), 0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWindowStateChangeEvent[] = {{6, 0, 1}};


static PyMethodDef methods_QWindowStateChangeEvent[] = {
    {SIP_MLNAME_CAST(sipName_oldState), meth_QWindowStateChangeEvent_oldState, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindowStateChangeEvent_oldState)}
};


static pyqt5ClassPluginDef plugin_QWindowStateChangeEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QWindowStateChangeEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QWindowStateChangeEvent,
        {SIP_NULLPTR},
        &plugin_QWindowStateChangeEvent
    },
    {
        sipNameNr_QWindowStateChangeEvent,
        {0, 0, 1},
        1, methods_QWindowStateChangeEvent,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_QWindowStateChangeEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QWindowStateChangeEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QWindowStateChangeEvent,
    cast_QWindowStateChangeEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 692 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 65704 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 65708 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 65711 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQShortcutEvent : public  ::QShortcutEvent
{
public:
    sipQShortcutEvent(const  ::QKeySequence&,int,bool);
    sipQShortcutEvent(const  ::QShortcutEvent&);
    ~sipQShortcutEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQShortcutEvent(const sipQShortcutEvent &);
    sipQShortcutEvent &operator = (const sipQShortcutEvent &);
};

sipQShortcutEvent::sipQShortcutEvent(const  ::QKeySequence& a0,int a1,bool a2):  ::QShortcutEvent(a0,a1,a2), sipPySelf(SIP_NULLPTR)
{
}

sipQShortcutEvent::sipQShortcutEvent(const  ::QShortcutEvent& a0):  ::QShortcutEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQShortcutEvent::~sipQShortcutEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QShortcutEvent_isAmbiguous, "isAmbiguous(self) -> bool");

extern "C" {static PyObject *meth_QShortcutEvent_isAmbiguous(PyObject *, PyObject *);}
static PyObject *meth_QShortcutEvent_isAmbiguous(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QShortcutEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QShortcutEvent, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAmbiguous();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QShortcutEvent, sipName_isAmbiguous, doc_QShortcutEvent_isAmbiguous);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QShortcutEvent_key, "key(self) -> QKeySequence");

extern "C" {static PyObject *meth_QShortcutEvent_key(PyObject *, PyObject *);}
static PyObject *meth_QShortcutEvent_key(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QShortcutEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QShortcutEvent, &sipCpp))
        {
             ::QKeySequence*sipRes;

            sipRes = new  ::QKeySequence(sipCpp->key());

            return sipConvertFromNewType(sipRes,sipType_QKeySequence,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QShortcutEvent, sipName_key, doc_QShortcutEvent_key);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QShortcutEvent_shortcutId, "shortcutId(self) -> int");

extern "C" {static PyObject *meth_QShortcutEvent_shortcutId(PyObject *, PyObject *);}
static PyObject *meth_QShortcutEvent_shortcutId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QShortcutEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QShortcutEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->shortcutId();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QShortcutEvent, sipName_shortcutId, doc_QShortcutEvent_shortcutId);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QShortcutEvent(void *, const sipTypeDef *);}
static void *cast_QShortcutEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QShortcutEvent *sipCpp = reinterpret_cast< ::QShortcutEvent *>(sipCppV);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QShortcutEvent(void *, int);}
static void release_QShortcutEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQShortcutEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QShortcutEvent *>(sipCppV);
}


extern "C" {static void dealloc_QShortcutEvent(sipSimpleWrapper *);}
static void dealloc_QShortcutEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQShortcutEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QShortcutEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QShortcutEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QShortcutEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQShortcutEvent *sipCpp = SIP_NULLPTR;

    {
        const  ::QKeySequence* a0;
        int a0State = 0;
        int a1;
        bool a2 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_ambiguous,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1i|b", sipType_QKeySequence, &a0, &a0State, &a1, &a2))
        {
            sipCpp = new sipQShortcutEvent(*a0,a1,a2);
            sipReleaseType(const_cast< ::QKeySequence *>(a0),sipType_QKeySequence,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QShortcutEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QShortcutEvent, &a0))
        {
            sipCpp = new sipQShortcutEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QShortcutEvent[] = {{6, 0, 1}};


static PyMethodDef methods_QShortcutEvent[] = {
    {SIP_MLNAME_CAST(sipName_isAmbiguous), meth_QShortcutEvent_isAmbiguous, METH_VARARGS, SIP_MLDOC_CAST(doc_QShortcutEvent_isAmbiguous)},
    {SIP_MLNAME_CAST(sipName_key), meth_QShortcutEvent_key, METH_VARARGS, SIP_MLDOC_CAST(doc_QShortcutEvent_key)},
    {SIP_MLNAME_CAST(sipName_shortcutId), meth_QShortcutEvent_shortcutId, METH_VARARGS, SIP_MLDOC_CAST(doc_QShortcutEvent_shortcutId)}
};

PyDoc_STRVAR(doc_QShortcutEvent, "\1QShortcutEvent(Union[QKeySequence, QKeySequence.StandardKey, str, int], int, ambiguous: bool = False)\n"
"QShortcutEvent(QShortcutEvent)");


static pyqt5ClassPluginDef plugin_QShortcutEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QShortcutEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QShortcutEvent,
        {SIP_NULLPTR},
        &plugin_QShortcutEvent
    },
    {
        sipNameNr_QShortcutEvent,
        {0, 0, 1},
        3, methods_QShortcutEvent,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QShortcutEvent,
    -1,
    -1,
    supers_QShortcutEvent,
    SIP_NULLPTR,
    init_type_QShortcutEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QShortcutEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QShortcutEvent,
    cast_QShortcutEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 679 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 65984 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "sip/QtCore/qfile.sip"
#include <qfile.h>
#line 65988 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 65991 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 65994 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 65997 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66000 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QFileOpenEvent_file, "file(self) -> str");

extern "C" {static PyObject *meth_QFileOpenEvent_file(PyObject *, PyObject *);}
static PyObject *meth_QFileOpenEvent_file(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileOpenEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileOpenEvent, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->file());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileOpenEvent, sipName_file, doc_QFileOpenEvent_file);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileOpenEvent_url, "url(self) -> QUrl");

extern "C" {static PyObject *meth_QFileOpenEvent_url(PyObject *, PyObject *);}
static PyObject *meth_QFileOpenEvent_url(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileOpenEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileOpenEvent, &sipCpp))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl(sipCpp->url());

            return sipConvertFromNewType(sipRes,sipType_QUrl,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileOpenEvent, sipName_url, doc_QFileOpenEvent_url);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileOpenEvent_openFile, "openFile(self, QFile, Union[QIODevice.OpenMode, QIODevice.OpenModeFlag]) -> bool");

extern "C" {static PyObject *meth_QFileOpenEvent_openFile(PyObject *, PyObject *);}
static PyObject *meth_QFileOpenEvent_openFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFile* a0;
         ::QIODevice::OpenMode* a1;
        int a1State = 0;
        const  ::QFileOpenEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QFileOpenEvent, &sipCpp, sipType_QFile, &a0, sipType_QIODevice_OpenMode, &a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->openFile(*a0,*a1);
            sipReleaseType(a1,sipType_QIODevice_OpenMode,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileOpenEvent, sipName_openFile, doc_QFileOpenEvent_openFile);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QFileOpenEvent(void *, const sipTypeDef *);}
static void *cast_QFileOpenEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QFileOpenEvent *sipCpp = reinterpret_cast< ::QFileOpenEvent *>(sipCppV);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QFileOpenEvent(void *, int);}
static void release_QFileOpenEvent(void *sipCppV, int)
{
    delete reinterpret_cast< ::QFileOpenEvent *>(sipCppV);
}


extern "C" {static void dealloc_QFileOpenEvent(sipSimpleWrapper *);}
static void dealloc_QFileOpenEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QFileOpenEvent(sipGetAddress(sipSelf), 0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QFileOpenEvent[] = {{6, 0, 1}};


static PyMethodDef methods_QFileOpenEvent[] = {
    {SIP_MLNAME_CAST(sipName_file), meth_QFileOpenEvent_file, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileOpenEvent_file)},
    {SIP_MLNAME_CAST(sipName_openFile), meth_QFileOpenEvent_openFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileOpenEvent_openFile)},
    {SIP_MLNAME_CAST(sipName_url), meth_QFileOpenEvent_url, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileOpenEvent_url)}
};


static pyqt5ClassPluginDef plugin_QFileOpenEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QFileOpenEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QFileOpenEvent,
        {SIP_NULLPTR},
        &plugin_QFileOpenEvent
    },
    {
        sipNameNr_QFileOpenEvent,
        {0, 0, 1},
        3, methods_QFileOpenEvent,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_QFileOpenEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QFileOpenEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QFileOpenEvent,
    cast_QFileOpenEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 666 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 66192 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66196 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQActionEvent : public  ::QActionEvent
{
public:
    sipQActionEvent(int, ::QAction*, ::QAction*);
    sipQActionEvent(const  ::QActionEvent&);
    ~sipQActionEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQActionEvent(const sipQActionEvent &);
    sipQActionEvent &operator = (const sipQActionEvent &);
};

sipQActionEvent::sipQActionEvent(int a0, ::QAction*a1, ::QAction*a2):  ::QActionEvent(a0,a1,a2), sipPySelf(SIP_NULLPTR)
{
}

sipQActionEvent::sipQActionEvent(const  ::QActionEvent& a0):  ::QActionEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQActionEvent::~sipQActionEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QActionEvent_action, "action(self) -> QAction");

extern "C" {static PyObject *meth_QActionEvent_action(PyObject *, PyObject *);}
static PyObject *meth_QActionEvent_action(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QActionEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QActionEvent, &sipCpp))
        {
             ::QAction*sipRes;

            sipRes = sipCpp->action();

            return sipConvertFromType(sipRes,sipType_QAction,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QActionEvent, sipName_action, doc_QActionEvent_action);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QActionEvent_before, "before(self) -> QAction");

extern "C" {static PyObject *meth_QActionEvent_before(PyObject *, PyObject *);}
static PyObject *meth_QActionEvent_before(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QActionEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QActionEvent, &sipCpp))
        {
             ::QAction*sipRes;

            sipRes = sipCpp->before();

            return sipConvertFromType(sipRes,sipType_QAction,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QActionEvent, sipName_before, doc_QActionEvent_before);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QActionEvent(void *, const sipTypeDef *);}
static void *cast_QActionEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QActionEvent *sipCpp = reinterpret_cast< ::QActionEvent *>(sipCppV);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QActionEvent(void *, int);}
static void release_QActionEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQActionEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QActionEvent *>(sipCppV);
}


extern "C" {static void dealloc_QActionEvent(sipSimpleWrapper *);}
static void dealloc_QActionEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQActionEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QActionEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QActionEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QActionEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQActionEvent *sipCpp = SIP_NULLPTR;

    {
        int a0;
         ::QAction* a1;
         ::QAction* a2 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_before,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "iJ8|J8", &a0, sipType_QAction, &a1, sipType_QAction, &a2))
        {
            sipCpp = new sipQActionEvent(a0,a1,a2);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QActionEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QActionEvent, &a0))
        {
            sipCpp = new sipQActionEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QActionEvent[] = {{6, 0, 1}};


static PyMethodDef methods_QActionEvent[] = {
    {SIP_MLNAME_CAST(sipName_action), meth_QActionEvent_action, METH_VARARGS, SIP_MLDOC_CAST(doc_QActionEvent_action)},
    {SIP_MLNAME_CAST(sipName_before), meth_QActionEvent_before, METH_VARARGS, SIP_MLDOC_CAST(doc_QActionEvent_before)}
};

PyDoc_STRVAR(doc_QActionEvent, "\1QActionEvent(int, QAction, before: QAction = None)\n"
"QActionEvent(QActionEvent)");


static pyqt5ClassPluginDef plugin_QActionEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QActionEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QActionEvent,
        {SIP_NULLPTR},
        &plugin_QActionEvent
    },
    {
        sipNameNr_QActionEvent,
        {0, 0, 1},
        2, methods_QActionEvent,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QActionEvent,
    -1,
    -1,
    supers_QActionEvent,
    SIP_NULLPTR,
    init_type_QActionEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QActionEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QActionEvent,
    cast_QActionEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 650 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 66438 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 66442 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66445 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQWhatsThisClickedEvent : public  ::QWhatsThisClickedEvent
{
public:
    sipQWhatsThisClickedEvent(const  ::QString&);
    sipQWhatsThisClickedEvent(const  ::QWhatsThisClickedEvent&);
    ~sipQWhatsThisClickedEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQWhatsThisClickedEvent(const sipQWhatsThisClickedEvent &);
    sipQWhatsThisClickedEvent &operator = (const sipQWhatsThisClickedEvent &);
};

sipQWhatsThisClickedEvent::sipQWhatsThisClickedEvent(const  ::QString& a0):  ::QWhatsThisClickedEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQWhatsThisClickedEvent::sipQWhatsThisClickedEvent(const  ::QWhatsThisClickedEvent& a0):  ::QWhatsThisClickedEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQWhatsThisClickedEvent::~sipQWhatsThisClickedEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QWhatsThisClickedEvent_href, "href(self) -> str");

extern "C" {static PyObject *meth_QWhatsThisClickedEvent_href(PyObject *, PyObject *);}
static PyObject *meth_QWhatsThisClickedEvent_href(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWhatsThisClickedEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWhatsThisClickedEvent, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->href());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWhatsThisClickedEvent, sipName_href, doc_QWhatsThisClickedEvent_href);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QWhatsThisClickedEvent(void *, const sipTypeDef *);}
static void *cast_QWhatsThisClickedEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QWhatsThisClickedEvent *sipCpp = reinterpret_cast< ::QWhatsThisClickedEvent *>(sipCppV);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWhatsThisClickedEvent(void *, int);}
static void release_QWhatsThisClickedEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQWhatsThisClickedEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QWhatsThisClickedEvent *>(sipCppV);
}


extern "C" {static void dealloc_QWhatsThisClickedEvent(sipSimpleWrapper *);}
static void dealloc_QWhatsThisClickedEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQWhatsThisClickedEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QWhatsThisClickedEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QWhatsThisClickedEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWhatsThisClickedEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQWhatsThisClickedEvent *sipCpp = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new sipQWhatsThisClickedEvent(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QWhatsThisClickedEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QWhatsThisClickedEvent, &a0))
        {
            sipCpp = new sipQWhatsThisClickedEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWhatsThisClickedEvent[] = {{6, 0, 1}};


static PyMethodDef methods_QWhatsThisClickedEvent[] = {
    {SIP_MLNAME_CAST(sipName_href), meth_QWhatsThisClickedEvent_href, METH_VARARGS, SIP_MLDOC_CAST(doc_QWhatsThisClickedEvent_href)}
};

PyDoc_STRVAR(doc_QWhatsThisClickedEvent, "\1QWhatsThisClickedEvent(str)\n"
"QWhatsThisClickedEvent(QWhatsThisClickedEvent)");


static pyqt5ClassPluginDef plugin_QWhatsThisClickedEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QWhatsThisClickedEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QWhatsThisClickedEvent,
        {SIP_NULLPTR},
        &plugin_QWhatsThisClickedEvent
    },
    {
        sipNameNr_QWhatsThisClickedEvent,
        {0, 0, 1},
        1, methods_QWhatsThisClickedEvent,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QWhatsThisClickedEvent,
    -1,
    -1,
    supers_QWhatsThisClickedEvent,
    SIP_NULLPTR,
    init_type_QWhatsThisClickedEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QWhatsThisClickedEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QWhatsThisClickedEvent,
    cast_QWhatsThisClickedEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 638 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 66652 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 66656 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66659 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQStatusTipEvent : public  ::QStatusTipEvent
{
public:
    sipQStatusTipEvent(const  ::QString&);
    sipQStatusTipEvent(const  ::QStatusTipEvent&);
    ~sipQStatusTipEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQStatusTipEvent(const sipQStatusTipEvent &);
    sipQStatusTipEvent &operator = (const sipQStatusTipEvent &);
};

sipQStatusTipEvent::sipQStatusTipEvent(const  ::QString& a0):  ::QStatusTipEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQStatusTipEvent::sipQStatusTipEvent(const  ::QStatusTipEvent& a0):  ::QStatusTipEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQStatusTipEvent::~sipQStatusTipEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QStatusTipEvent_tip, "tip(self) -> str");

extern "C" {static PyObject *meth_QStatusTipEvent_tip(PyObject *, PyObject *);}
static PyObject *meth_QStatusTipEvent_tip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStatusTipEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStatusTipEvent, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->tip());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStatusTipEvent, sipName_tip, doc_QStatusTipEvent_tip);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QStatusTipEvent(void *, const sipTypeDef *);}
static void *cast_QStatusTipEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QStatusTipEvent *sipCpp = reinterpret_cast< ::QStatusTipEvent *>(sipCppV);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QStatusTipEvent(void *, int);}
static void release_QStatusTipEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQStatusTipEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QStatusTipEvent *>(sipCppV);
}


extern "C" {static void dealloc_QStatusTipEvent(sipSimpleWrapper *);}
static void dealloc_QStatusTipEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQStatusTipEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QStatusTipEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QStatusTipEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QStatusTipEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQStatusTipEvent *sipCpp = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new sipQStatusTipEvent(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QStatusTipEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QStatusTipEvent, &a0))
        {
            sipCpp = new sipQStatusTipEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QStatusTipEvent[] = {{6, 0, 1}};


static PyMethodDef methods_QStatusTipEvent[] = {
    {SIP_MLNAME_CAST(sipName_tip), meth_QStatusTipEvent_tip, METH_VARARGS, SIP_MLDOC_CAST(doc_QStatusTipEvent_tip)}
};

PyDoc_STRVAR(doc_QStatusTipEvent, "\1QStatusTipEvent(str)\n"
"QStatusTipEvent(QStatusTipEvent)");


static pyqt5ClassPluginDef plugin_QStatusTipEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QStatusTipEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QStatusTipEvent,
        {SIP_NULLPTR},
        &plugin_QStatusTipEvent
    },
    {
        sipNameNr_QStatusTipEvent,
        {0, 0, 1},
        1, methods_QStatusTipEvent,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QStatusTipEvent,
    -1,
    -1,
    supers_QStatusTipEvent,
    SIP_NULLPTR,
    init_type_QStatusTipEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QStatusTipEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QStatusTipEvent,
    cast_QStatusTipEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 621 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 66866 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66870 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 66873 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQHelpEvent : public  ::QHelpEvent
{
public:
    sipQHelpEvent( ::QEvent::Type,const  ::QPoint&,const  ::QPoint&);
    sipQHelpEvent(const  ::QHelpEvent&);
    ~sipQHelpEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQHelpEvent(const sipQHelpEvent &);
    sipQHelpEvent &operator = (const sipQHelpEvent &);
};

sipQHelpEvent::sipQHelpEvent( ::QEvent::Type a0,const  ::QPoint& a1,const  ::QPoint& a2):  ::QHelpEvent(a0,a1,a2), sipPySelf(SIP_NULLPTR)
{
}

sipQHelpEvent::sipQHelpEvent(const  ::QHelpEvent& a0):  ::QHelpEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQHelpEvent::~sipQHelpEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QHelpEvent_x, "x(self) -> int");

extern "C" {static PyObject *meth_QHelpEvent_x(PyObject *, PyObject *);}
static PyObject *meth_QHelpEvent_x(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHelpEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHelpEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->x();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEvent, sipName_x, doc_QHelpEvent_x);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHelpEvent_y, "y(self) -> int");

extern "C" {static PyObject *meth_QHelpEvent_y(PyObject *, PyObject *);}
static PyObject *meth_QHelpEvent_y(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHelpEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHelpEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->y();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEvent, sipName_y, doc_QHelpEvent_y);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHelpEvent_globalX, "globalX(self) -> int");

extern "C" {static PyObject *meth_QHelpEvent_globalX(PyObject *, PyObject *);}
static PyObject *meth_QHelpEvent_globalX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHelpEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHelpEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->globalX();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEvent, sipName_globalX, doc_QHelpEvent_globalX);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHelpEvent_globalY, "globalY(self) -> int");

extern "C" {static PyObject *meth_QHelpEvent_globalY(PyObject *, PyObject *);}
static PyObject *meth_QHelpEvent_globalY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHelpEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHelpEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->globalY();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEvent, sipName_globalY, doc_QHelpEvent_globalY);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHelpEvent_pos, "pos(self) -> QPoint");

extern "C" {static PyObject *meth_QHelpEvent_pos(PyObject *, PyObject *);}
static PyObject *meth_QHelpEvent_pos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHelpEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHelpEvent, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->pos());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEvent, sipName_pos, doc_QHelpEvent_pos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHelpEvent_globalPos, "globalPos(self) -> QPoint");

extern "C" {static PyObject *meth_QHelpEvent_globalPos(PyObject *, PyObject *);}
static PyObject *meth_QHelpEvent_globalPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHelpEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHelpEvent, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->globalPos());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEvent, sipName_globalPos, doc_QHelpEvent_globalPos);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QHelpEvent(void *, const sipTypeDef *);}
static void *cast_QHelpEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QHelpEvent *sipCpp = reinterpret_cast< ::QHelpEvent *>(sipCppV);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QHelpEvent(void *, int);}
static void release_QHelpEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQHelpEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QHelpEvent *>(sipCppV);
}


extern "C" {static void dealloc_QHelpEvent(sipSimpleWrapper *);}
static void dealloc_QHelpEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQHelpEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QHelpEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QHelpEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QHelpEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQHelpEvent *sipCpp = SIP_NULLPTR;

    {
         ::QEvent::Type a0;
        const  ::QPoint* a1;
        const  ::QPoint* a2;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "EJ9J9", sipType_QEvent_Type, &a0, sipType_QPoint, &a1, sipType_QPoint, &a2))
        {
            sipCpp = new sipQHelpEvent(a0,*a1,*a2);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QHelpEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QHelpEvent, &a0))
        {
            sipCpp = new sipQHelpEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QHelpEvent[] = {{6, 0, 1}};


static PyMethodDef methods_QHelpEvent[] = {
    {SIP_MLNAME_CAST(sipName_globalPos), meth_QHelpEvent_globalPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpEvent_globalPos)},
    {SIP_MLNAME_CAST(sipName_globalX), meth_QHelpEvent_globalX, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpEvent_globalX)},
    {SIP_MLNAME_CAST(sipName_globalY), meth_QHelpEvent_globalY, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpEvent_globalY)},
    {SIP_MLNAME_CAST(sipName_pos), meth_QHelpEvent_pos, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpEvent_pos)},
    {SIP_MLNAME_CAST(sipName_x), meth_QHelpEvent_x, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpEvent_x)},
    {SIP_MLNAME_CAST(sipName_y), meth_QHelpEvent_y, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpEvent_y)}
};

PyDoc_STRVAR(doc_QHelpEvent, "\1QHelpEvent(QEvent.Type, QPoint, QPoint)\n"
"QHelpEvent(QHelpEvent)");


static pyqt5ClassPluginDef plugin_QHelpEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QHelpEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QHelpEvent,
        {SIP_NULLPTR},
        &plugin_QHelpEvent
    },
    {
        sipNameNr_QHelpEvent,
        {0, 0, 1},
        6, methods_QHelpEvent,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QHelpEvent,
    -1,
    -1,
    supers_QHelpEvent,
    SIP_NULLPTR,
    init_type_QHelpEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QHelpEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QHelpEvent,
    cast_QHelpEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 610 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 67225 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 67229 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQDragLeaveEvent : public  ::QDragLeaveEvent
{
public:
    sipQDragLeaveEvent();
    sipQDragLeaveEvent(const  ::QDragLeaveEvent&);
    ~sipQDragLeaveEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQDragLeaveEvent(const sipQDragLeaveEvent &);
    sipQDragLeaveEvent &operator = (const sipQDragLeaveEvent &);
};

sipQDragLeaveEvent::sipQDragLeaveEvent():  ::QDragLeaveEvent(), sipPySelf(SIP_NULLPTR)
{
}

sipQDragLeaveEvent::sipQDragLeaveEvent(const  ::QDragLeaveEvent& a0):  ::QDragLeaveEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQDragLeaveEvent::~sipQDragLeaveEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QDragLeaveEvent(void *, const sipTypeDef *);}
static void *cast_QDragLeaveEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QDragLeaveEvent *sipCpp = reinterpret_cast< ::QDragLeaveEvent *>(sipCppV);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDragLeaveEvent(void *, int);}
static void release_QDragLeaveEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQDragLeaveEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QDragLeaveEvent *>(sipCppV);
}


extern "C" {static void assign_QDragLeaveEvent(void *, SIP_SSIZE_T, void *);}
static void assign_QDragLeaveEvent(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QDragLeaveEvent *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QDragLeaveEvent *>(sipSrc);
}


extern "C" {static void *array_QDragLeaveEvent(SIP_SSIZE_T);}
static void *array_QDragLeaveEvent(SIP_SSIZE_T sipNrElem)
{
    return new  ::QDragLeaveEvent[sipNrElem];
}


extern "C" {static void *copy_QDragLeaveEvent(const void *, SIP_SSIZE_T);}
static void *copy_QDragLeaveEvent(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QDragLeaveEvent(reinterpret_cast<const  ::QDragLeaveEvent *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QDragLeaveEvent(sipSimpleWrapper *);}
static void dealloc_QDragLeaveEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQDragLeaveEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDragLeaveEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QDragLeaveEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDragLeaveEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQDragLeaveEvent *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQDragLeaveEvent();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QDragLeaveEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QDragLeaveEvent, &a0))
        {
            sipCpp = new sipQDragLeaveEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDragLeaveEvent[] = {{6, 0, 1}};

PyDoc_STRVAR(doc_QDragLeaveEvent, "\1QDragLeaveEvent()\n"
"QDragLeaveEvent(QDragLeaveEvent)");


static pyqt5ClassPluginDef plugin_QDragLeaveEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QDragLeaveEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QDragLeaveEvent,
        {SIP_NULLPTR},
        &plugin_QDragLeaveEvent
    },
    {
        sipNameNr_QDragLeaveEvent,
        {0, 0, 1},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QDragLeaveEvent,
    -1,
    -1,
    supers_QDragLeaveEvent,
    SIP_NULLPTR,
    init_type_QDragLeaveEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QDragLeaveEvent,
    assign_QDragLeaveEvent,
    array_QDragLeaveEvent,
    copy_QDragLeaveEvent,
    release_QDragLeaveEvent,
    cast_QDragLeaveEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 599 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 67420 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 67424 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 67427 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 67430 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 67433 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 67436 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 67439 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 67442 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 67445 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 67448 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 67451 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQDragEnterEvent : public  ::QDragEnterEvent
{
public:
    sipQDragEnterEvent(const  ::QPoint&, ::Qt::DropActions,const  ::QMimeData*, ::Qt::MouseButtons, ::Qt::KeyboardModifiers);
    sipQDragEnterEvent(const  ::QDragEnterEvent&);
    ~sipQDragEnterEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQDragEnterEvent(const sipQDragEnterEvent &);
    sipQDragEnterEvent &operator = (const sipQDragEnterEvent &);
};

sipQDragEnterEvent::sipQDragEnterEvent(const  ::QPoint& a0, ::Qt::DropActions a1,const  ::QMimeData*a2, ::Qt::MouseButtons a3, ::Qt::KeyboardModifiers a4):  ::QDragEnterEvent(a0,a1,a2,a3,a4), sipPySelf(SIP_NULLPTR)
{
}

sipQDragEnterEvent::sipQDragEnterEvent(const  ::QDragEnterEvent& a0):  ::QDragEnterEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQDragEnterEvent::~sipQDragEnterEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QDragEnterEvent(void *, const sipTypeDef *);}
static void *cast_QDragEnterEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QDragEnterEvent *sipCpp = reinterpret_cast< ::QDragEnterEvent *>(sipCppV);

    if (targetType == sipType_QDragMoveEvent)
        return static_cast< ::QDragMoveEvent *>(sipCpp);

    if (targetType == sipType_QDropEvent)
        return static_cast< ::QDropEvent *>(sipCpp);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDragEnterEvent(void *, int);}
static void release_QDragEnterEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQDragEnterEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QDragEnterEvent *>(sipCppV);
}


extern "C" {static void dealloc_QDragEnterEvent(sipSimpleWrapper *);}
static void dealloc_QDragEnterEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQDragEnterEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDragEnterEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QDragEnterEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDragEnterEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQDragEnterEvent *sipCpp = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
         ::Qt::DropActions* a1;
        int a1State = 0;
        const  ::QMimeData* a2;
         ::Qt::MouseButtons* a3;
        int a3State = 0;
         ::Qt::KeyboardModifiers* a4;
        int a4State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9J1J8J1J1", sipType_QPoint, &a0, sipType_Qt_DropActions, &a1, &a1State, sipType_QMimeData, &a2, sipType_Qt_MouseButtons, &a3, &a3State, sipType_Qt_KeyboardModifiers, &a4, &a4State))
        {
            sipCpp = new sipQDragEnterEvent(*a0,*a1,a2,*a3,*a4);
            sipReleaseType(a1,sipType_Qt_DropActions,a1State);
            sipReleaseType(a3,sipType_Qt_MouseButtons,a3State);
            sipReleaseType(a4,sipType_Qt_KeyboardModifiers,a4State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QDragEnterEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QDragEnterEvent, &a0))
        {
            sipCpp = new sipQDragEnterEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDragEnterEvent[] = {{25, 255, 1}};

PyDoc_STRVAR(doc_QDragEnterEvent, "\1QDragEnterEvent(QPoint, Union[Qt.DropActions, Qt.DropAction], QMimeData, Union[Qt.MouseButtons, Qt.MouseButton], Union[Qt.KeyboardModifiers, Qt.KeyboardModifier])\n"
"QDragEnterEvent(QDragEnterEvent)");


static pyqt5ClassPluginDef plugin_QDragEnterEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QDragEnterEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QDragEnterEvent,
        {SIP_NULLPTR},
        &plugin_QDragEnterEvent
    },
    {
        sipNameNr_QDragEnterEvent,
        {0, 0, 1},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QDragEnterEvent,
    -1,
    -1,
    supers_QDragEnterEvent,
    SIP_NULLPTR,
    init_type_QDragEnterEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QDragEnterEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QDragEnterEvent,
    cast_QDragEnterEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 583 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 67639 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 67643 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 67646 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 67649 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 67652 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 67655 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 67658 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 67661 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 67664 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 67667 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 67670 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQDragMoveEvent : public  ::QDragMoveEvent
{
public:
    sipQDragMoveEvent(const  ::QPoint&, ::Qt::DropActions,const  ::QMimeData*, ::Qt::MouseButtons, ::Qt::KeyboardModifiers, ::QEvent::Type);
    sipQDragMoveEvent(const  ::QDragMoveEvent&);
    ~sipQDragMoveEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQDragMoveEvent(const sipQDragMoveEvent &);
    sipQDragMoveEvent &operator = (const sipQDragMoveEvent &);
};

sipQDragMoveEvent::sipQDragMoveEvent(const  ::QPoint& a0, ::Qt::DropActions a1,const  ::QMimeData*a2, ::Qt::MouseButtons a3, ::Qt::KeyboardModifiers a4, ::QEvent::Type a5):  ::QDragMoveEvent(a0,a1,a2,a3,a4,a5), sipPySelf(SIP_NULLPTR)
{
}

sipQDragMoveEvent::sipQDragMoveEvent(const  ::QDragMoveEvent& a0):  ::QDragMoveEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQDragMoveEvent::~sipQDragMoveEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QDragMoveEvent_answerRect, "answerRect(self) -> QRect");

extern "C" {static PyObject *meth_QDragMoveEvent_answerRect(PyObject *, PyObject *);}
static PyObject *meth_QDragMoveEvent_answerRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDragMoveEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDragMoveEvent, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->answerRect());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDragMoveEvent, sipName_answerRect, doc_QDragMoveEvent_answerRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDragMoveEvent_accept, "accept(self)\n"
"accept(self, QRect)");

extern "C" {static PyObject *meth_QDragMoveEvent_accept(PyObject *, PyObject *);}
static PyObject *meth_QDragMoveEvent_accept(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDragMoveEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDragMoveEvent, &sipCpp))
        {
            sipCpp->accept();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QRect* a0;
         ::QDragMoveEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDragMoveEvent, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->accept(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDragMoveEvent, sipName_accept, doc_QDragMoveEvent_accept);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDragMoveEvent_ignore, "ignore(self)\n"
"ignore(self, QRect)");

extern "C" {static PyObject *meth_QDragMoveEvent_ignore(PyObject *, PyObject *);}
static PyObject *meth_QDragMoveEvent_ignore(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDragMoveEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDragMoveEvent, &sipCpp))
        {
            sipCpp->ignore();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QRect* a0;
         ::QDragMoveEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDragMoveEvent, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->ignore(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDragMoveEvent, sipName_ignore, doc_QDragMoveEvent_ignore);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QDragMoveEvent(void *, const sipTypeDef *);}
static void *cast_QDragMoveEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QDragMoveEvent *sipCpp = reinterpret_cast< ::QDragMoveEvent *>(sipCppV);

    if (targetType == sipType_QDropEvent)
        return static_cast< ::QDropEvent *>(sipCpp);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDragMoveEvent(void *, int);}
static void release_QDragMoveEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQDragMoveEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QDragMoveEvent *>(sipCppV);
}


extern "C" {static void dealloc_QDragMoveEvent(sipSimpleWrapper *);}
static void dealloc_QDragMoveEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQDragMoveEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDragMoveEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QDragMoveEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDragMoveEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQDragMoveEvent *sipCpp = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
         ::Qt::DropActions* a1;
        int a1State = 0;
        const  ::QMimeData* a2;
         ::Qt::MouseButtons* a3;
        int a3State = 0;
         ::Qt::KeyboardModifiers* a4;
        int a4State = 0;
         ::QEvent::Type a5 = QEvent::DragMove;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9J1J8J1J1|E", sipType_QPoint, &a0, sipType_Qt_DropActions, &a1, &a1State, sipType_QMimeData, &a2, sipType_Qt_MouseButtons, &a3, &a3State, sipType_Qt_KeyboardModifiers, &a4, &a4State, sipType_QEvent_Type, &a5))
        {
            sipCpp = new sipQDragMoveEvent(*a0,*a1,a2,*a3,*a4,a5);
            sipReleaseType(a1,sipType_Qt_DropActions,a1State);
            sipReleaseType(a3,sipType_Qt_MouseButtons,a3State);
            sipReleaseType(a4,sipType_Qt_KeyboardModifiers,a4State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QDragMoveEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QDragMoveEvent, &a0))
        {
            sipCpp = new sipQDragMoveEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDragMoveEvent[] = {{26, 255, 1}};


static PyMethodDef methods_QDragMoveEvent[] = {
    {SIP_MLNAME_CAST(sipName_accept), meth_QDragMoveEvent_accept, METH_VARARGS, SIP_MLDOC_CAST(doc_QDragMoveEvent_accept)},
    {SIP_MLNAME_CAST(sipName_answerRect), meth_QDragMoveEvent_answerRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QDragMoveEvent_answerRect)},
    {SIP_MLNAME_CAST(sipName_ignore), meth_QDragMoveEvent_ignore, METH_VARARGS, SIP_MLDOC_CAST(doc_QDragMoveEvent_ignore)}
};

PyDoc_STRVAR(doc_QDragMoveEvent, "\1QDragMoveEvent(QPoint, Union[Qt.DropActions, Qt.DropAction], QMimeData, Union[Qt.MouseButtons, Qt.MouseButton], Union[Qt.KeyboardModifiers, Qt.KeyboardModifier], type: QEvent.Type = QEvent.DragMove)\n"
"QDragMoveEvent(QDragMoveEvent)");


static pyqt5ClassPluginDef plugin_QDragMoveEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QDragMoveEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QDragMoveEvent,
        {SIP_NULLPTR},
        &plugin_QDragMoveEvent
    },
    {
        sipNameNr_QDragMoveEvent,
        {0, 0, 1},
        3, methods_QDragMoveEvent,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QDragMoveEvent,
    -1,
    -1,
    supers_QDragMoveEvent,
    SIP_NULLPTR,
    init_type_QDragMoveEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QDragMoveEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QDragMoveEvent,
    cast_QDragMoveEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 561 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 67984 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 67988 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 67991 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 67994 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 67997 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 68000 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 68003 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 68006 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 68009 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 68012 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQDropEvent : public  ::QDropEvent
{
public:
    sipQDropEvent(const  ::QPointF&, ::Qt::DropActions,const  ::QMimeData*, ::Qt::MouseButtons, ::Qt::KeyboardModifiers, ::QEvent::Type);
    sipQDropEvent(const  ::QDropEvent&);
    ~sipQDropEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQDropEvent(const sipQDropEvent &);
    sipQDropEvent &operator = (const sipQDropEvent &);
};

sipQDropEvent::sipQDropEvent(const  ::QPointF& a0, ::Qt::DropActions a1,const  ::QMimeData*a2, ::Qt::MouseButtons a3, ::Qt::KeyboardModifiers a4, ::QEvent::Type a5):  ::QDropEvent(a0,a1,a2,a3,a4,a5), sipPySelf(SIP_NULLPTR)
{
}

sipQDropEvent::sipQDropEvent(const  ::QDropEvent& a0):  ::QDropEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQDropEvent::~sipQDropEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QDropEvent_pos, "pos(self) -> QPoint");

extern "C" {static PyObject *meth_QDropEvent_pos(PyObject *, PyObject *);}
static PyObject *meth_QDropEvent_pos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDropEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDropEvent, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->pos());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDropEvent, sipName_pos, doc_QDropEvent_pos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDropEvent_posF, "posF(self) -> QPointF");

extern "C" {static PyObject *meth_QDropEvent_posF(PyObject *, PyObject *);}
static PyObject *meth_QDropEvent_posF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDropEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDropEvent, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->posF());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDropEvent, sipName_posF, doc_QDropEvent_posF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDropEvent_mouseButtons, "mouseButtons(self) -> Qt.MouseButtons");

extern "C" {static PyObject *meth_QDropEvent_mouseButtons(PyObject *, PyObject *);}
static PyObject *meth_QDropEvent_mouseButtons(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDropEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDropEvent, &sipCpp))
        {
             ::Qt::MouseButtons*sipRes;

            sipRes = new  ::Qt::MouseButtons(sipCpp->mouseButtons());

            return sipConvertFromNewType(sipRes,sipType_Qt_MouseButtons,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDropEvent, sipName_mouseButtons, doc_QDropEvent_mouseButtons);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDropEvent_keyboardModifiers, "keyboardModifiers(self) -> Qt.KeyboardModifiers");

extern "C" {static PyObject *meth_QDropEvent_keyboardModifiers(PyObject *, PyObject *);}
static PyObject *meth_QDropEvent_keyboardModifiers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDropEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDropEvent, &sipCpp))
        {
             ::Qt::KeyboardModifiers*sipRes;

            sipRes = new  ::Qt::KeyboardModifiers(sipCpp->keyboardModifiers());

            return sipConvertFromNewType(sipRes,sipType_Qt_KeyboardModifiers,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDropEvent, sipName_keyboardModifiers, doc_QDropEvent_keyboardModifiers);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDropEvent_possibleActions, "possibleActions(self) -> Qt.DropActions");

extern "C" {static PyObject *meth_QDropEvent_possibleActions(PyObject *, PyObject *);}
static PyObject *meth_QDropEvent_possibleActions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDropEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDropEvent, &sipCpp))
        {
             ::Qt::DropActions*sipRes;

            sipRes = new  ::Qt::DropActions(sipCpp->possibleActions());

            return sipConvertFromNewType(sipRes,sipType_Qt_DropActions,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDropEvent, sipName_possibleActions, doc_QDropEvent_possibleActions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDropEvent_proposedAction, "proposedAction(self) -> Qt.DropAction");

extern "C" {static PyObject *meth_QDropEvent_proposedAction(PyObject *, PyObject *);}
static PyObject *meth_QDropEvent_proposedAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDropEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDropEvent, &sipCpp))
        {
             ::Qt::DropAction sipRes;

            sipRes = sipCpp->proposedAction();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_DropAction);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDropEvent, sipName_proposedAction, doc_QDropEvent_proposedAction);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDropEvent_acceptProposedAction, "acceptProposedAction(self)");

extern "C" {static PyObject *meth_QDropEvent_acceptProposedAction(PyObject *, PyObject *);}
static PyObject *meth_QDropEvent_acceptProposedAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDropEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDropEvent, &sipCpp))
        {
            sipCpp->acceptProposedAction();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDropEvent, sipName_acceptProposedAction, doc_QDropEvent_acceptProposedAction);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDropEvent_dropAction, "dropAction(self) -> Qt.DropAction");

extern "C" {static PyObject *meth_QDropEvent_dropAction(PyObject *, PyObject *);}
static PyObject *meth_QDropEvent_dropAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDropEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDropEvent, &sipCpp))
        {
             ::Qt::DropAction sipRes;

            sipRes = sipCpp->dropAction();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_DropAction);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDropEvent, sipName_dropAction, doc_QDropEvent_dropAction);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDropEvent_setDropAction, "setDropAction(self, Qt.DropAction)");

extern "C" {static PyObject *meth_QDropEvent_setDropAction(PyObject *, PyObject *);}
static PyObject *meth_QDropEvent_setDropAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::DropAction a0;
         ::QDropEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QDropEvent, &sipCpp, sipType_Qt_DropAction, &a0))
        {
            sipCpp->setDropAction(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDropEvent, sipName_setDropAction, doc_QDropEvent_setDropAction);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDropEvent_source, "source(self) -> QObject");

extern "C" {static PyObject *meth_QDropEvent_source(PyObject *, PyObject *);}
static PyObject *meth_QDropEvent_source(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDropEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDropEvent, &sipCpp))
        {
             ::QObject*sipRes;

            sipRes = sipCpp->source();

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDropEvent, sipName_source, doc_QDropEvent_source);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDropEvent_mimeData, "mimeData(self) -> QMimeData");

extern "C" {static PyObject *meth_QDropEvent_mimeData(PyObject *, PyObject *);}
static PyObject *meth_QDropEvent_mimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDropEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDropEvent, &sipCpp))
        {
            const  ::QMimeData*sipRes;

            sipRes = sipCpp->mimeData();

            return sipConvertFromType(const_cast< ::QMimeData *>(sipRes),sipType_QMimeData,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDropEvent, sipName_mimeData, doc_QDropEvent_mimeData);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QDropEvent(void *, const sipTypeDef *);}
static void *cast_QDropEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QDropEvent *sipCpp = reinterpret_cast< ::QDropEvent *>(sipCppV);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDropEvent(void *, int);}
static void release_QDropEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQDropEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QDropEvent *>(sipCppV);
}


extern "C" {static void dealloc_QDropEvent(sipSimpleWrapper *);}
static void dealloc_QDropEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQDropEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDropEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QDropEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDropEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQDropEvent *sipCpp = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::Qt::DropActions* a1;
        int a1State = 0;
        const  ::QMimeData* a2;
         ::Qt::MouseButtons* a3;
        int a3State = 0;
         ::Qt::KeyboardModifiers* a4;
        int a4State = 0;
         ::QEvent::Type a5 = QEvent::Drop;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1J1J8J1J1|E", sipType_QPointF, &a0, &a0State, sipType_Qt_DropActions, &a1, &a1State, sipType_QMimeData, &a2, sipType_Qt_MouseButtons, &a3, &a3State, sipType_Qt_KeyboardModifiers, &a4, &a4State, sipType_QEvent_Type, &a5))
        {
            sipCpp = new sipQDropEvent(*a0,*a1,a2,*a3,*a4,a5);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);
            sipReleaseType(a1,sipType_Qt_DropActions,a1State);
            sipReleaseType(a3,sipType_Qt_MouseButtons,a3State);
            sipReleaseType(a4,sipType_Qt_KeyboardModifiers,a4State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QDropEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QDropEvent, &a0))
        {
            sipCpp = new sipQDropEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDropEvent[] = {{6, 0, 1}};


static PyMethodDef methods_QDropEvent[] = {
    {SIP_MLNAME_CAST(sipName_acceptProposedAction), meth_QDropEvent_acceptProposedAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QDropEvent_acceptProposedAction)},
    {SIP_MLNAME_CAST(sipName_dropAction), meth_QDropEvent_dropAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QDropEvent_dropAction)},
    {SIP_MLNAME_CAST(sipName_keyboardModifiers), meth_QDropEvent_keyboardModifiers, METH_VARARGS, SIP_MLDOC_CAST(doc_QDropEvent_keyboardModifiers)},
    {SIP_MLNAME_CAST(sipName_mimeData), meth_QDropEvent_mimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QDropEvent_mimeData)},
    {SIP_MLNAME_CAST(sipName_mouseButtons), meth_QDropEvent_mouseButtons, METH_VARARGS, SIP_MLDOC_CAST(doc_QDropEvent_mouseButtons)},
    {SIP_MLNAME_CAST(sipName_pos), meth_QDropEvent_pos, METH_VARARGS, SIP_MLDOC_CAST(doc_QDropEvent_pos)},
    {SIP_MLNAME_CAST(sipName_posF), meth_QDropEvent_posF, METH_VARARGS, SIP_MLDOC_CAST(doc_QDropEvent_posF)},
    {SIP_MLNAME_CAST(sipName_possibleActions), meth_QDropEvent_possibleActions, METH_VARARGS, SIP_MLDOC_CAST(doc_QDropEvent_possibleActions)},
    {SIP_MLNAME_CAST(sipName_proposedAction), meth_QDropEvent_proposedAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QDropEvent_proposedAction)},
    {SIP_MLNAME_CAST(sipName_setDropAction), meth_QDropEvent_setDropAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QDropEvent_setDropAction)},
    {SIP_MLNAME_CAST(sipName_source), meth_QDropEvent_source, METH_VARARGS, SIP_MLDOC_CAST(doc_QDropEvent_source)}
};

PyDoc_STRVAR(doc_QDropEvent, "\1QDropEvent(Union[QPointF, QPoint], Union[Qt.DropActions, Qt.DropAction], QMimeData, Union[Qt.MouseButtons, Qt.MouseButton], Union[Qt.KeyboardModifiers, Qt.KeyboardModifier], type: QEvent.Type = QEvent.Drop)\n"
"QDropEvent(QDropEvent)");


static pyqt5ClassPluginDef plugin_QDropEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QDropEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QDropEvent,
        {SIP_NULLPTR},
        &plugin_QDropEvent
    },
    {
        sipNameNr_QDropEvent,
        {0, 0, 1},
        11, methods_QDropEvent,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QDropEvent,
    -1,
    -1,
    supers_QDropEvent,
    SIP_NULLPTR,
    init_type_QDropEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QDropEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QDropEvent,
    cast_QDropEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 547 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 68528 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 68532 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 68535 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 68538 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 68541 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQInputMethodQueryEvent : public  ::QInputMethodQueryEvent
{
public:
    sipQInputMethodQueryEvent( ::Qt::InputMethodQueries);
    sipQInputMethodQueryEvent(const  ::QInputMethodQueryEvent&);
    ~sipQInputMethodQueryEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQInputMethodQueryEvent(const sipQInputMethodQueryEvent &);
    sipQInputMethodQueryEvent &operator = (const sipQInputMethodQueryEvent &);
};

sipQInputMethodQueryEvent::sipQInputMethodQueryEvent( ::Qt::InputMethodQueries a0):  ::QInputMethodQueryEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQInputMethodQueryEvent::sipQInputMethodQueryEvent(const  ::QInputMethodQueryEvent& a0):  ::QInputMethodQueryEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQInputMethodQueryEvent::~sipQInputMethodQueryEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QInputMethodQueryEvent_queries, "queries(self) -> Qt.InputMethodQueries");

extern "C" {static PyObject *meth_QInputMethodQueryEvent_queries(PyObject *, PyObject *);}
static PyObject *meth_QInputMethodQueryEvent_queries(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QInputMethodQueryEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputMethodQueryEvent, &sipCpp))
        {
             ::Qt::InputMethodQueries*sipRes;

            sipRes = new  ::Qt::InputMethodQueries(sipCpp->queries());

            return sipConvertFromNewType(sipRes,sipType_Qt_InputMethodQueries,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputMethodQueryEvent, sipName_queries, doc_QInputMethodQueryEvent_queries);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QInputMethodQueryEvent_setValue, "setValue(self, Qt.InputMethodQuery, Any)");

extern "C" {static PyObject *meth_QInputMethodQueryEvent_setValue(PyObject *, PyObject *);}
static PyObject *meth_QInputMethodQueryEvent_setValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::InputMethodQuery a0;
        const  ::QVariant* a1;
        int a1State = 0;
         ::QInputMethodQueryEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QInputMethodQueryEvent, &sipCpp, sipType_Qt_InputMethodQuery, &a0, sipType_QVariant, &a1, &a1State))
        {
            sipCpp->setValue(a0,*a1);
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputMethodQueryEvent, sipName_setValue, doc_QInputMethodQueryEvent_setValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QInputMethodQueryEvent_value, "value(self, Qt.InputMethodQuery) -> Any");

extern "C" {static PyObject *meth_QInputMethodQueryEvent_value(PyObject *, PyObject *);}
static PyObject *meth_QInputMethodQueryEvent_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::InputMethodQuery a0;
        const  ::QInputMethodQueryEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QInputMethodQueryEvent, &sipCpp, sipType_Qt_InputMethodQuery, &a0))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->value(a0));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputMethodQueryEvent, sipName_value, doc_QInputMethodQueryEvent_value);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QInputMethodQueryEvent(void *, const sipTypeDef *);}
static void *cast_QInputMethodQueryEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QInputMethodQueryEvent *sipCpp = reinterpret_cast< ::QInputMethodQueryEvent *>(sipCppV);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QInputMethodQueryEvent(void *, int);}
static void release_QInputMethodQueryEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQInputMethodQueryEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QInputMethodQueryEvent *>(sipCppV);
}


extern "C" {static void dealloc_QInputMethodQueryEvent(sipSimpleWrapper *);}
static void dealloc_QInputMethodQueryEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQInputMethodQueryEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QInputMethodQueryEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QInputMethodQueryEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QInputMethodQueryEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQInputMethodQueryEvent *sipCpp = SIP_NULLPTR;

    {
         ::Qt::InputMethodQueries* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_Qt_InputMethodQueries, &a0, &a0State))
        {
            sipCpp = new sipQInputMethodQueryEvent(*a0);
            sipReleaseType(a0,sipType_Qt_InputMethodQueries,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QInputMethodQueryEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QInputMethodQueryEvent, &a0))
        {
            sipCpp = new sipQInputMethodQueryEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QInputMethodQueryEvent[] = {{6, 0, 1}};


static PyMethodDef methods_QInputMethodQueryEvent[] = {
    {SIP_MLNAME_CAST(sipName_queries), meth_QInputMethodQueryEvent_queries, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputMethodQueryEvent_queries)},
    {SIP_MLNAME_CAST(sipName_setValue), meth_QInputMethodQueryEvent_setValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputMethodQueryEvent_setValue)},
    {SIP_MLNAME_CAST(sipName_value), meth_QInputMethodQueryEvent_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputMethodQueryEvent_value)}
};

PyDoc_STRVAR(doc_QInputMethodQueryEvent, "\1QInputMethodQueryEvent(Union[Qt.InputMethodQueries, Qt.InputMethodQuery])\n"
"QInputMethodQueryEvent(QInputMethodQueryEvent)");


static pyqt5ClassPluginDef plugin_QInputMethodQueryEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QInputMethodQueryEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QInputMethodQueryEvent,
        {SIP_NULLPTR},
        &plugin_QInputMethodQueryEvent
    },
    {
        sipNameNr_QInputMethodQueryEvent,
        {0, 0, 1},
        3, methods_QInputMethodQueryEvent,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QInputMethodQueryEvent,
    -1,
    -1,
    supers_QInputMethodQueryEvent,
    SIP_NULLPTR,
    init_type_QInputMethodQueryEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QInputMethodQueryEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QInputMethodQueryEvent,
    cast_QInputMethodQueryEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 500 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 516 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 68812 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 500 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 68816 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 68819 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


/* Call the instance's destructor. */
extern "C" {static void release_QInputMethodEvent_Attribute(void *, int);}
static void release_QInputMethodEvent_Attribute(void *sipCppV, int)
{
    delete reinterpret_cast< ::QInputMethodEvent::Attribute *>(sipCppV);
}


extern "C" {static void dealloc_QInputMethodEvent_Attribute(sipSimpleWrapper *);}
static void dealloc_QInputMethodEvent_Attribute(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QInputMethodEvent_Attribute(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QInputMethodEvent_Attribute(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QInputMethodEvent_Attribute(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QInputMethodEvent::Attribute *sipCpp = SIP_NULLPTR;

    {
         ::QInputMethodEvent::AttributeType a0;
        int a1;
        int a2;
         ::QVariant* a3;
        int a3State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "EiiJ1", sipType_QInputMethodEvent_AttributeType, &a0, &a1, &a2, sipType_QVariant, &a3, &a3State))
        {
            sipCpp = new  ::QInputMethodEvent::Attribute(a0,a1,a2,*a3);
            sipReleaseType(a3,sipType_QVariant,a3State);

            return sipCpp;
        }
    }

    {
         ::QInputMethodEvent::AttributeType a0;
        int a1;
        int a2;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "Eii", sipType_QInputMethodEvent_AttributeType, &a0, &a1, &a2))
        {
            sipCpp = new  ::QInputMethodEvent::Attribute(a0,a1,a2);

            return sipCpp;
        }
    }

    {
        const  ::QInputMethodEvent::Attribute* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QInputMethodEvent_Attribute, &a0))
        {
            sipCpp = new  ::QInputMethodEvent::Attribute(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static PyObject *varget_QInputMethodEvent_Attribute_length(void *, PyObject *, PyObject *);}
static PyObject *varget_QInputMethodEvent_Attribute_length(void *sipSelf, PyObject *, PyObject *)
{
    int sipVal;
     ::QInputMethodEvent::Attribute *sipCpp = reinterpret_cast< ::QInputMethodEvent::Attribute *>(sipSelf);

    sipVal = sipCpp->length;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_QInputMethodEvent_Attribute_length(void *, PyObject *, PyObject *);}
static int varset_QInputMethodEvent_Attribute_length(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
     ::QInputMethodEvent::Attribute *sipCpp = reinterpret_cast< ::QInputMethodEvent::Attribute *>(sipSelf);

    sipVal = sipLong_AsInt(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->length = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QInputMethodEvent_Attribute_start(void *, PyObject *, PyObject *);}
static PyObject *varget_QInputMethodEvent_Attribute_start(void *sipSelf, PyObject *, PyObject *)
{
    int sipVal;
     ::QInputMethodEvent::Attribute *sipCpp = reinterpret_cast< ::QInputMethodEvent::Attribute *>(sipSelf);

    sipVal = sipCpp->start;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_QInputMethodEvent_Attribute_start(void *, PyObject *, PyObject *);}
static int varset_QInputMethodEvent_Attribute_start(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
     ::QInputMethodEvent::Attribute *sipCpp = reinterpret_cast< ::QInputMethodEvent::Attribute *>(sipSelf);

    sipVal = sipLong_AsInt(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->start = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QInputMethodEvent_Attribute_type(void *, PyObject *, PyObject *);}
static PyObject *varget_QInputMethodEvent_Attribute_type(void *sipSelf, PyObject *, PyObject *)
{
     ::QInputMethodEvent::AttributeType sipVal;
     ::QInputMethodEvent::Attribute *sipCpp = reinterpret_cast< ::QInputMethodEvent::Attribute *>(sipSelf);

    sipVal = sipCpp->type;

    return sipConvertFromEnum(static_cast<int>(sipVal), sipType_QInputMethodEvent_AttributeType);
}


extern "C" {static int varset_QInputMethodEvent_Attribute_type(void *, PyObject *, PyObject *);}
static int varset_QInputMethodEvent_Attribute_type(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::QInputMethodEvent::AttributeType sipVal;
     ::QInputMethodEvent::Attribute *sipCpp = reinterpret_cast< ::QInputMethodEvent::Attribute *>(sipSelf);

    sipVal = ( ::QInputMethodEvent::AttributeType)sipConvertToEnum(sipPy, sipType_QInputMethodEvent_AttributeType);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->type = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QInputMethodEvent_Attribute_value(void *, PyObject *, PyObject *);}
static PyObject *varget_QInputMethodEvent_Attribute_value(void *sipSelf, PyObject *, PyObject *)
{
     ::QVariant*sipVal;
     ::QInputMethodEvent::Attribute *sipCpp = reinterpret_cast< ::QInputMethodEvent::Attribute *>(sipSelf);

    sipVal = &sipCpp->value;

    return sipConvertFromType(sipVal, sipType_QVariant, SIP_NULLPTR);
}


extern "C" {static int varset_QInputMethodEvent_Attribute_value(void *, PyObject *, PyObject *);}
static int varset_QInputMethodEvent_Attribute_value(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::QVariant*sipVal;
     ::QInputMethodEvent::Attribute *sipCpp = reinterpret_cast< ::QInputMethodEvent::Attribute *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::QVariant *>(sipForceConvertToType(sipPy, sipType_QVariant, SIP_NULLPTR, SIP_NOT_NONE, &sipValState, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->value = *sipVal;

    sipReleaseType(sipVal, sipType_QVariant, sipValState);

    return 0;
}

sipVariableDef variables_QInputMethodEvent_Attribute[] = {
    {InstanceVariable, sipName_length, (PyMethodDef *)varget_QInputMethodEvent_Attribute_length, (PyMethodDef *)varset_QInputMethodEvent_Attribute_length, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_start, (PyMethodDef *)varget_QInputMethodEvent_Attribute_start, (PyMethodDef *)varset_QInputMethodEvent_Attribute_start, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_type, (PyMethodDef *)varget_QInputMethodEvent_Attribute_type, (PyMethodDef *)varset_QInputMethodEvent_Attribute_type, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_value, (PyMethodDef *)varget_QInputMethodEvent_Attribute_value, (PyMethodDef *)varset_QInputMethodEvent_Attribute_value, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_QInputMethodEvent_Attribute, "\1QInputMethodEvent.Attribute(QInputMethodEvent.AttributeType, int, int, Any)\n"
"QInputMethodEvent.Attribute(QInputMethodEvent.AttributeType, int, int)\n"
"QInputMethodEvent.Attribute(QInputMethodEvent.Attribute)");


static pyqt5ClassPluginDef plugin_QInputMethodEvent_Attribute = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QInputMethodEvent_Attribute = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QInputMethodEvent__Attribute,
        {SIP_NULLPTR},
        &plugin_QInputMethodEvent_Attribute
    },
    {
        sipNameNr_Attribute,
        {80, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        4, variables_QInputMethodEvent_Attribute,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QInputMethodEvent_Attribute,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QInputMethodEvent_Attribute,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QInputMethodEvent_Attribute,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QInputMethodEvent_Attribute,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 500 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 69083 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 69087 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 69090 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 500 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 516 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 69095 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 69098 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQInputMethodEvent : public  ::QInputMethodEvent
{
public:
    sipQInputMethodEvent();
    sipQInputMethodEvent(const  ::QString&,const QList< ::QInputMethodEvent::Attribute>&);
    sipQInputMethodEvent(const  ::QInputMethodEvent&);
    ~sipQInputMethodEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQInputMethodEvent(const sipQInputMethodEvent &);
    sipQInputMethodEvent &operator = (const sipQInputMethodEvent &);
};

sipQInputMethodEvent::sipQInputMethodEvent():  ::QInputMethodEvent(), sipPySelf(SIP_NULLPTR)
{
}

sipQInputMethodEvent::sipQInputMethodEvent(const  ::QString& a0,const QList< ::QInputMethodEvent::Attribute>& a1):  ::QInputMethodEvent(a0,a1), sipPySelf(SIP_NULLPTR)
{
}

sipQInputMethodEvent::sipQInputMethodEvent(const  ::QInputMethodEvent& a0):  ::QInputMethodEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQInputMethodEvent::~sipQInputMethodEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QInputMethodEvent_setCommitString, "setCommitString(self, str, from_: int = 0, length: int = 0)");

extern "C" {static PyObject *meth_QInputMethodEvent_setCommitString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QInputMethodEvent_setCommitString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1 = 0;
        int a2 = 0;
         ::QInputMethodEvent *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_from,
            sipName_length,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|ii", &sipSelf, sipType_QInputMethodEvent, &sipCpp, sipType_QString,&a0, &a0State, &a1, &a2))
        {
            sipCpp->setCommitString(*a0,a1,a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputMethodEvent, sipName_setCommitString, doc_QInputMethodEvent_setCommitString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QInputMethodEvent_attributes, "attributes(self) -> List[QInputMethodEvent.Attribute]");

extern "C" {static PyObject *meth_QInputMethodEvent_attributes(PyObject *, PyObject *);}
static PyObject *meth_QInputMethodEvent_attributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QInputMethodEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputMethodEvent, &sipCpp))
        {
            QList< ::QInputMethodEvent::Attribute>*sipRes;

            sipRes = new QList< ::QInputMethodEvent::Attribute>(sipCpp->attributes());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QInputMethodEvent_Attribute,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputMethodEvent, sipName_attributes, doc_QInputMethodEvent_attributes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QInputMethodEvent_preeditString, "preeditString(self) -> str");

extern "C" {static PyObject *meth_QInputMethodEvent_preeditString(PyObject *, PyObject *);}
static PyObject *meth_QInputMethodEvent_preeditString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QInputMethodEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputMethodEvent, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->preeditString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputMethodEvent, sipName_preeditString, doc_QInputMethodEvent_preeditString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QInputMethodEvent_commitString, "commitString(self) -> str");

extern "C" {static PyObject *meth_QInputMethodEvent_commitString(PyObject *, PyObject *);}
static PyObject *meth_QInputMethodEvent_commitString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QInputMethodEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputMethodEvent, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->commitString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputMethodEvent, sipName_commitString, doc_QInputMethodEvent_commitString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QInputMethodEvent_replacementStart, "replacementStart(self) -> int");

extern "C" {static PyObject *meth_QInputMethodEvent_replacementStart(PyObject *, PyObject *);}
static PyObject *meth_QInputMethodEvent_replacementStart(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QInputMethodEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputMethodEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->replacementStart();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputMethodEvent, sipName_replacementStart, doc_QInputMethodEvent_replacementStart);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QInputMethodEvent_replacementLength, "replacementLength(self) -> int");

extern "C" {static PyObject *meth_QInputMethodEvent_replacementLength(PyObject *, PyObject *);}
static PyObject *meth_QInputMethodEvent_replacementLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QInputMethodEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputMethodEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->replacementLength();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputMethodEvent, sipName_replacementLength, doc_QInputMethodEvent_replacementLength);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QInputMethodEvent(void *, const sipTypeDef *);}
static void *cast_QInputMethodEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QInputMethodEvent *sipCpp = reinterpret_cast< ::QInputMethodEvent *>(sipCppV);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QInputMethodEvent(void *, int);}
static void release_QInputMethodEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQInputMethodEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QInputMethodEvent *>(sipCppV);
}


extern "C" {static void assign_QInputMethodEvent(void *, SIP_SSIZE_T, void *);}
static void assign_QInputMethodEvent(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QInputMethodEvent *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QInputMethodEvent *>(sipSrc);
}


extern "C" {static void *array_QInputMethodEvent(SIP_SSIZE_T);}
static void *array_QInputMethodEvent(SIP_SSIZE_T sipNrElem)
{
    return new  ::QInputMethodEvent[sipNrElem];
}


extern "C" {static void *copy_QInputMethodEvent(const void *, SIP_SSIZE_T);}
static void *copy_QInputMethodEvent(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QInputMethodEvent(reinterpret_cast<const  ::QInputMethodEvent *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QInputMethodEvent(sipSimpleWrapper *);}
static void dealloc_QInputMethodEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQInputMethodEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QInputMethodEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QInputMethodEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QInputMethodEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQInputMethodEvent *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQInputMethodEvent();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const QList< ::QInputMethodEvent::Attribute>* a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1J1", sipType_QString,&a0, &a0State, sipType_QList_0100QInputMethodEvent_Attribute,&a1, &a1State))
        {
            sipCpp = new sipQInputMethodEvent(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QList< ::QInputMethodEvent::Attribute> *>(a1),sipType_QList_0100QInputMethodEvent_Attribute,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QInputMethodEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QInputMethodEvent, &a0))
        {
            sipCpp = new sipQInputMethodEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QInputMethodEvent[] = {{6, 0, 1}};


static PyMethodDef methods_QInputMethodEvent[] = {
    {SIP_MLNAME_CAST(sipName_attributes), meth_QInputMethodEvent_attributes, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputMethodEvent_attributes)},
    {SIP_MLNAME_CAST(sipName_commitString), meth_QInputMethodEvent_commitString, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputMethodEvent_commitString)},
    {SIP_MLNAME_CAST(sipName_preeditString), meth_QInputMethodEvent_preeditString, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputMethodEvent_preeditString)},
    {SIP_MLNAME_CAST(sipName_replacementLength), meth_QInputMethodEvent_replacementLength, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputMethodEvent_replacementLength)},
    {SIP_MLNAME_CAST(sipName_replacementStart), meth_QInputMethodEvent_replacementStart, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputMethodEvent_replacementStart)},
    {SIP_MLNAME_CAST(sipName_setCommitString), SIP_MLMETH_CAST(meth_QInputMethodEvent_setCommitString), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QInputMethodEvent_setCommitString)}
};

static sipEnumMemberDef enummembers_QInputMethodEvent[] = {
    {sipName_Cursor, static_cast<int>( ::QInputMethodEvent::Cursor), 82},
    {sipName_Language, static_cast<int>( ::QInputMethodEvent::Language), 82},
    {sipName_Ruby, static_cast<int>( ::QInputMethodEvent::Ruby), 82},
    {sipName_Selection, static_cast<int>( ::QInputMethodEvent::Selection), 82},
    {sipName_TextFormat, static_cast<int>( ::QInputMethodEvent::TextFormat), 82},
};

PyDoc_STRVAR(doc_QInputMethodEvent, "\1QInputMethodEvent()\n"
"QInputMethodEvent(str, Iterable[QInputMethodEvent.Attribute])\n"
"QInputMethodEvent(QInputMethodEvent)");


static pyqt5ClassPluginDef plugin_QInputMethodEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QInputMethodEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QInputMethodEvent,
        {SIP_NULLPTR},
        &plugin_QInputMethodEvent
    },
    {
        sipNameNr_QInputMethodEvent,
        {0, 0, 1},
        6, methods_QInputMethodEvent,
        5, enummembers_QInputMethodEvent,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QInputMethodEvent,
    -1,
    -1,
    supers_QInputMethodEvent,
    SIP_NULLPTR,
    init_type_QInputMethodEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QInputMethodEvent,
    assign_QInputMethodEvent,
    array_QInputMethodEvent,
    copy_QInputMethodEvent,
    release_QInputMethodEvent,
    cast_QInputMethodEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 473 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 69510 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 69514 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 69517 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 69520 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQContextMenuEvent : public  ::QContextMenuEvent
{
public:
    sipQContextMenuEvent( ::QContextMenuEvent::Reason,const  ::QPoint&,const  ::QPoint&, ::Qt::KeyboardModifiers);
    sipQContextMenuEvent( ::QContextMenuEvent::Reason,const  ::QPoint&,const  ::QPoint&);
    sipQContextMenuEvent( ::QContextMenuEvent::Reason,const  ::QPoint&);
    sipQContextMenuEvent(const  ::QContextMenuEvent&);
    ~sipQContextMenuEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQContextMenuEvent(const sipQContextMenuEvent &);
    sipQContextMenuEvent &operator = (const sipQContextMenuEvent &);
};

sipQContextMenuEvent::sipQContextMenuEvent( ::QContextMenuEvent::Reason a0,const  ::QPoint& a1,const  ::QPoint& a2, ::Qt::KeyboardModifiers a3):  ::QContextMenuEvent(a0,a1,a2,a3), sipPySelf(SIP_NULLPTR)
{
}

sipQContextMenuEvent::sipQContextMenuEvent( ::QContextMenuEvent::Reason a0,const  ::QPoint& a1,const  ::QPoint& a2):  ::QContextMenuEvent(a0,a1,a2), sipPySelf(SIP_NULLPTR)
{
}

sipQContextMenuEvent::sipQContextMenuEvent( ::QContextMenuEvent::Reason a0,const  ::QPoint& a1):  ::QContextMenuEvent(a0,a1), sipPySelf(SIP_NULLPTR)
{
}

sipQContextMenuEvent::sipQContextMenuEvent(const  ::QContextMenuEvent& a0):  ::QContextMenuEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQContextMenuEvent::~sipQContextMenuEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QContextMenuEvent_x, "x(self) -> int");

extern "C" {static PyObject *meth_QContextMenuEvent_x(PyObject *, PyObject *);}
static PyObject *meth_QContextMenuEvent_x(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QContextMenuEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QContextMenuEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->x();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QContextMenuEvent, sipName_x, doc_QContextMenuEvent_x);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QContextMenuEvent_y, "y(self) -> int");

extern "C" {static PyObject *meth_QContextMenuEvent_y(PyObject *, PyObject *);}
static PyObject *meth_QContextMenuEvent_y(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QContextMenuEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QContextMenuEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->y();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QContextMenuEvent, sipName_y, doc_QContextMenuEvent_y);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QContextMenuEvent_globalX, "globalX(self) -> int");

extern "C" {static PyObject *meth_QContextMenuEvent_globalX(PyObject *, PyObject *);}
static PyObject *meth_QContextMenuEvent_globalX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QContextMenuEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QContextMenuEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->globalX();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QContextMenuEvent, sipName_globalX, doc_QContextMenuEvent_globalX);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QContextMenuEvent_globalY, "globalY(self) -> int");

extern "C" {static PyObject *meth_QContextMenuEvent_globalY(PyObject *, PyObject *);}
static PyObject *meth_QContextMenuEvent_globalY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QContextMenuEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QContextMenuEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->globalY();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QContextMenuEvent, sipName_globalY, doc_QContextMenuEvent_globalY);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QContextMenuEvent_pos, "pos(self) -> QPoint");

extern "C" {static PyObject *meth_QContextMenuEvent_pos(PyObject *, PyObject *);}
static PyObject *meth_QContextMenuEvent_pos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QContextMenuEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QContextMenuEvent, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->pos());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QContextMenuEvent, sipName_pos, doc_QContextMenuEvent_pos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QContextMenuEvent_globalPos, "globalPos(self) -> QPoint");

extern "C" {static PyObject *meth_QContextMenuEvent_globalPos(PyObject *, PyObject *);}
static PyObject *meth_QContextMenuEvent_globalPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QContextMenuEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QContextMenuEvent, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->globalPos());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QContextMenuEvent, sipName_globalPos, doc_QContextMenuEvent_globalPos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QContextMenuEvent_reason, "reason(self) -> QContextMenuEvent.Reason");

extern "C" {static PyObject *meth_QContextMenuEvent_reason(PyObject *, PyObject *);}
static PyObject *meth_QContextMenuEvent_reason(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QContextMenuEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QContextMenuEvent, &sipCpp))
        {
             ::QContextMenuEvent::Reason sipRes;

            sipRes = sipCpp->reason();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QContextMenuEvent_Reason);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QContextMenuEvent, sipName_reason, doc_QContextMenuEvent_reason);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QContextMenuEvent(void *, const sipTypeDef *);}
static void *cast_QContextMenuEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QContextMenuEvent *sipCpp = reinterpret_cast< ::QContextMenuEvent *>(sipCppV);

    if (targetType == sipType_QInputEvent)
        return static_cast< ::QInputEvent *>(sipCpp);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QContextMenuEvent(void *, int);}
static void release_QContextMenuEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQContextMenuEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QContextMenuEvent *>(sipCppV);
}


extern "C" {static void dealloc_QContextMenuEvent(sipSimpleWrapper *);}
static void dealloc_QContextMenuEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQContextMenuEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QContextMenuEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QContextMenuEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QContextMenuEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQContextMenuEvent *sipCpp = SIP_NULLPTR;

    {
         ::QContextMenuEvent::Reason a0;
        const  ::QPoint* a1;
        const  ::QPoint* a2;
         ::Qt::KeyboardModifiers* a3;
        int a3State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "EJ9J9J1", sipType_QContextMenuEvent_Reason, &a0, sipType_QPoint, &a1, sipType_QPoint, &a2, sipType_Qt_KeyboardModifiers, &a3, &a3State))
        {
            sipCpp = new sipQContextMenuEvent(a0,*a1,*a2,*a3);
            sipReleaseType(a3,sipType_Qt_KeyboardModifiers,a3State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QContextMenuEvent::Reason a0;
        const  ::QPoint* a1;
        const  ::QPoint* a2;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "EJ9J9", sipType_QContextMenuEvent_Reason, &a0, sipType_QPoint, &a1, sipType_QPoint, &a2))
        {
            sipCpp = new sipQContextMenuEvent(a0,*a1,*a2);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QContextMenuEvent::Reason a0;
        const  ::QPoint* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "EJ9", sipType_QContextMenuEvent_Reason, &a0, sipType_QPoint, &a1))
        {
            sipCpp = new sipQContextMenuEvent(a0,*a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QContextMenuEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QContextMenuEvent, &a0))
        {
            sipCpp = new sipQContextMenuEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QContextMenuEvent[] = {{77, 255, 1}};


static PyMethodDef methods_QContextMenuEvent[] = {
    {SIP_MLNAME_CAST(sipName_globalPos), meth_QContextMenuEvent_globalPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QContextMenuEvent_globalPos)},
    {SIP_MLNAME_CAST(sipName_globalX), meth_QContextMenuEvent_globalX, METH_VARARGS, SIP_MLDOC_CAST(doc_QContextMenuEvent_globalX)},
    {SIP_MLNAME_CAST(sipName_globalY), meth_QContextMenuEvent_globalY, METH_VARARGS, SIP_MLDOC_CAST(doc_QContextMenuEvent_globalY)},
    {SIP_MLNAME_CAST(sipName_pos), meth_QContextMenuEvent_pos, METH_VARARGS, SIP_MLDOC_CAST(doc_QContextMenuEvent_pos)},
    {SIP_MLNAME_CAST(sipName_reason), meth_QContextMenuEvent_reason, METH_VARARGS, SIP_MLDOC_CAST(doc_QContextMenuEvent_reason)},
    {SIP_MLNAME_CAST(sipName_x), meth_QContextMenuEvent_x, METH_VARARGS, SIP_MLDOC_CAST(doc_QContextMenuEvent_x)},
    {SIP_MLNAME_CAST(sipName_y), meth_QContextMenuEvent_y, METH_VARARGS, SIP_MLDOC_CAST(doc_QContextMenuEvent_y)}
};

static sipEnumMemberDef enummembers_QContextMenuEvent[] = {
    {sipName_Keyboard, static_cast<int>( ::QContextMenuEvent::Keyboard), 17},
    {sipName_Mouse, static_cast<int>( ::QContextMenuEvent::Mouse), 17},
    {sipName_Other, static_cast<int>( ::QContextMenuEvent::Other), 17},
};

PyDoc_STRVAR(doc_QContextMenuEvent, "\1QContextMenuEvent(QContextMenuEvent.Reason, QPoint, QPoint, Union[Qt.KeyboardModifiers, Qt.KeyboardModifier])\n"
"QContextMenuEvent(QContextMenuEvent.Reason, QPoint, QPoint)\n"
"QContextMenuEvent(QContextMenuEvent.Reason, QPoint)\n"
"QContextMenuEvent(QContextMenuEvent)");


static pyqt5ClassPluginDef plugin_QContextMenuEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QContextMenuEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QContextMenuEvent,
        {SIP_NULLPTR},
        &plugin_QContextMenuEvent
    },
    {
        sipNameNr_QContextMenuEvent,
        {0, 0, 1},
        7, methods_QContextMenuEvent,
        3, enummembers_QContextMenuEvent,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QContextMenuEvent,
    -1,
    -1,
    supers_QContextMenuEvent,
    SIP_NULLPTR,
    init_type_QContextMenuEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QContextMenuEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QContextMenuEvent,
    cast_QContextMenuEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 462 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 69956 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 69960 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQHideEvent : public  ::QHideEvent
{
public:
    sipQHideEvent();
    sipQHideEvent(const  ::QHideEvent&);
    ~sipQHideEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQHideEvent(const sipQHideEvent &);
    sipQHideEvent &operator = (const sipQHideEvent &);
};

sipQHideEvent::sipQHideEvent():  ::QHideEvent(), sipPySelf(SIP_NULLPTR)
{
}

sipQHideEvent::sipQHideEvent(const  ::QHideEvent& a0):  ::QHideEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQHideEvent::~sipQHideEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QHideEvent(void *, const sipTypeDef *);}
static void *cast_QHideEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QHideEvent *sipCpp = reinterpret_cast< ::QHideEvent *>(sipCppV);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QHideEvent(void *, int);}
static void release_QHideEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQHideEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QHideEvent *>(sipCppV);
}


extern "C" {static void assign_QHideEvent(void *, SIP_SSIZE_T, void *);}
static void assign_QHideEvent(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QHideEvent *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QHideEvent *>(sipSrc);
}


extern "C" {static void *array_QHideEvent(SIP_SSIZE_T);}
static void *array_QHideEvent(SIP_SSIZE_T sipNrElem)
{
    return new  ::QHideEvent[sipNrElem];
}


extern "C" {static void *copy_QHideEvent(const void *, SIP_SSIZE_T);}
static void *copy_QHideEvent(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QHideEvent(reinterpret_cast<const  ::QHideEvent *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QHideEvent(sipSimpleWrapper *);}
static void dealloc_QHideEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQHideEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QHideEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QHideEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QHideEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQHideEvent *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQHideEvent();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QHideEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QHideEvent, &a0))
        {
            sipCpp = new sipQHideEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QHideEvent[] = {{6, 0, 1}};

PyDoc_STRVAR(doc_QHideEvent, "\1QHideEvent()\n"
"QHideEvent(QHideEvent)");


static pyqt5ClassPluginDef plugin_QHideEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QHideEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QHideEvent,
        {SIP_NULLPTR},
        &plugin_QHideEvent
    },
    {
        sipNameNr_QHideEvent,
        {0, 0, 1},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QHideEvent,
    -1,
    -1,
    supers_QHideEvent,
    SIP_NULLPTR,
    init_type_QHideEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QHideEvent,
    assign_QHideEvent,
    array_QHideEvent,
    copy_QHideEvent,
    release_QHideEvent,
    cast_QHideEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 451 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 70151 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 70155 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQShowEvent : public  ::QShowEvent
{
public:
    sipQShowEvent();
    sipQShowEvent(const  ::QShowEvent&);
    ~sipQShowEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQShowEvent(const sipQShowEvent &);
    sipQShowEvent &operator = (const sipQShowEvent &);
};

sipQShowEvent::sipQShowEvent():  ::QShowEvent(), sipPySelf(SIP_NULLPTR)
{
}

sipQShowEvent::sipQShowEvent(const  ::QShowEvent& a0):  ::QShowEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQShowEvent::~sipQShowEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QShowEvent(void *, const sipTypeDef *);}
static void *cast_QShowEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QShowEvent *sipCpp = reinterpret_cast< ::QShowEvent *>(sipCppV);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QShowEvent(void *, int);}
static void release_QShowEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQShowEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QShowEvent *>(sipCppV);
}


extern "C" {static void assign_QShowEvent(void *, SIP_SSIZE_T, void *);}
static void assign_QShowEvent(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QShowEvent *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QShowEvent *>(sipSrc);
}


extern "C" {static void *array_QShowEvent(SIP_SSIZE_T);}
static void *array_QShowEvent(SIP_SSIZE_T sipNrElem)
{
    return new  ::QShowEvent[sipNrElem];
}


extern "C" {static void *copy_QShowEvent(const void *, SIP_SSIZE_T);}
static void *copy_QShowEvent(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QShowEvent(reinterpret_cast<const  ::QShowEvent *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QShowEvent(sipSimpleWrapper *);}
static void dealloc_QShowEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQShowEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QShowEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QShowEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QShowEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQShowEvent *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQShowEvent();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QShowEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QShowEvent, &a0))
        {
            sipCpp = new sipQShowEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QShowEvent[] = {{6, 0, 1}};

PyDoc_STRVAR(doc_QShowEvent, "\1QShowEvent()\n"
"QShowEvent(QShowEvent)");


static pyqt5ClassPluginDef plugin_QShowEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QShowEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QShowEvent,
        {SIP_NULLPTR},
        &plugin_QShowEvent
    },
    {
        sipNameNr_QShowEvent,
        {0, 0, 1},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QShowEvent,
    -1,
    -1,
    supers_QShowEvent,
    SIP_NULLPTR,
    init_type_QShowEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QShowEvent,
    assign_QShowEvent,
    array_QShowEvent,
    copy_QShowEvent,
    release_QShowEvent,
    cast_QShowEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 440 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 70346 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 70350 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQIconDragEvent : public  ::QIconDragEvent
{
public:
    sipQIconDragEvent();
    sipQIconDragEvent(const  ::QIconDragEvent&);
    ~sipQIconDragEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQIconDragEvent(const sipQIconDragEvent &);
    sipQIconDragEvent &operator = (const sipQIconDragEvent &);
};

sipQIconDragEvent::sipQIconDragEvent():  ::QIconDragEvent(), sipPySelf(SIP_NULLPTR)
{
}

sipQIconDragEvent::sipQIconDragEvent(const  ::QIconDragEvent& a0):  ::QIconDragEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQIconDragEvent::~sipQIconDragEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QIconDragEvent(void *, const sipTypeDef *);}
static void *cast_QIconDragEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QIconDragEvent *sipCpp = reinterpret_cast< ::QIconDragEvent *>(sipCppV);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QIconDragEvent(void *, int);}
static void release_QIconDragEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQIconDragEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QIconDragEvent *>(sipCppV);
}


extern "C" {static void assign_QIconDragEvent(void *, SIP_SSIZE_T, void *);}
static void assign_QIconDragEvent(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QIconDragEvent *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QIconDragEvent *>(sipSrc);
}


extern "C" {static void *array_QIconDragEvent(SIP_SSIZE_T);}
static void *array_QIconDragEvent(SIP_SSIZE_T sipNrElem)
{
    return new  ::QIconDragEvent[sipNrElem];
}


extern "C" {static void *copy_QIconDragEvent(const void *, SIP_SSIZE_T);}
static void *copy_QIconDragEvent(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QIconDragEvent(reinterpret_cast<const  ::QIconDragEvent *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QIconDragEvent(sipSimpleWrapper *);}
static void dealloc_QIconDragEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQIconDragEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QIconDragEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QIconDragEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QIconDragEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQIconDragEvent *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQIconDragEvent();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QIconDragEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QIconDragEvent, &a0))
        {
            sipCpp = new sipQIconDragEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QIconDragEvent[] = {{6, 0, 1}};

PyDoc_STRVAR(doc_QIconDragEvent, "\1QIconDragEvent()\n"
"QIconDragEvent(QIconDragEvent)");


static pyqt5ClassPluginDef plugin_QIconDragEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QIconDragEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QIconDragEvent,
        {SIP_NULLPTR},
        &plugin_QIconDragEvent
    },
    {
        sipNameNr_QIconDragEvent,
        {0, 0, 1},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QIconDragEvent,
    -1,
    -1,
    supers_QIconDragEvent,
    SIP_NULLPTR,
    init_type_QIconDragEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QIconDragEvent,
    assign_QIconDragEvent,
    array_QIconDragEvent,
    copy_QIconDragEvent,
    release_QIconDragEvent,
    cast_QIconDragEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 429 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 70541 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 70545 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQCloseEvent : public  ::QCloseEvent
{
public:
    sipQCloseEvent();
    sipQCloseEvent(const  ::QCloseEvent&);
    ~sipQCloseEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQCloseEvent(const sipQCloseEvent &);
    sipQCloseEvent &operator = (const sipQCloseEvent &);
};

sipQCloseEvent::sipQCloseEvent():  ::QCloseEvent(), sipPySelf(SIP_NULLPTR)
{
}

sipQCloseEvent::sipQCloseEvent(const  ::QCloseEvent& a0):  ::QCloseEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQCloseEvent::~sipQCloseEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QCloseEvent(void *, const sipTypeDef *);}
static void *cast_QCloseEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QCloseEvent *sipCpp = reinterpret_cast< ::QCloseEvent *>(sipCppV);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QCloseEvent(void *, int);}
static void release_QCloseEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQCloseEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QCloseEvent *>(sipCppV);
}


extern "C" {static void assign_QCloseEvent(void *, SIP_SSIZE_T, void *);}
static void assign_QCloseEvent(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QCloseEvent *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QCloseEvent *>(sipSrc);
}


extern "C" {static void *array_QCloseEvent(SIP_SSIZE_T);}
static void *array_QCloseEvent(SIP_SSIZE_T sipNrElem)
{
    return new  ::QCloseEvent[sipNrElem];
}


extern "C" {static void *copy_QCloseEvent(const void *, SIP_SSIZE_T);}
static void *copy_QCloseEvent(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QCloseEvent(reinterpret_cast<const  ::QCloseEvent *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QCloseEvent(sipSimpleWrapper *);}
static void dealloc_QCloseEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQCloseEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QCloseEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QCloseEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QCloseEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQCloseEvent *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQCloseEvent();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QCloseEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QCloseEvent, &a0))
        {
            sipCpp = new sipQCloseEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QCloseEvent[] = {{6, 0, 1}};

PyDoc_STRVAR(doc_QCloseEvent, "\1QCloseEvent()\n"
"QCloseEvent(QCloseEvent)");


static pyqt5ClassPluginDef plugin_QCloseEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QCloseEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QCloseEvent,
        {SIP_NULLPTR},
        &plugin_QCloseEvent
    },
    {
        sipNameNr_QCloseEvent,
        {0, 0, 1},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QCloseEvent,
    -1,
    -1,
    supers_QCloseEvent,
    SIP_NULLPTR,
    init_type_QCloseEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QCloseEvent,
    assign_QCloseEvent,
    array_QCloseEvent,
    copy_QCloseEvent,
    release_QCloseEvent,
    cast_QCloseEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 416 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 70736 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 70740 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 70743 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQResizeEvent : public  ::QResizeEvent
{
public:
    sipQResizeEvent(const  ::QSize&,const  ::QSize&);
    sipQResizeEvent(const  ::QResizeEvent&);
    ~sipQResizeEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQResizeEvent(const sipQResizeEvent &);
    sipQResizeEvent &operator = (const sipQResizeEvent &);
};

sipQResizeEvent::sipQResizeEvent(const  ::QSize& a0,const  ::QSize& a1):  ::QResizeEvent(a0,a1), sipPySelf(SIP_NULLPTR)
{
}

sipQResizeEvent::sipQResizeEvent(const  ::QResizeEvent& a0):  ::QResizeEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQResizeEvent::~sipQResizeEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QResizeEvent_size, "size(self) -> QSize");

extern "C" {static PyObject *meth_QResizeEvent_size(PyObject *, PyObject *);}
static PyObject *meth_QResizeEvent_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QResizeEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QResizeEvent, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->size());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QResizeEvent, sipName_size, doc_QResizeEvent_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QResizeEvent_oldSize, "oldSize(self) -> QSize");

extern "C" {static PyObject *meth_QResizeEvent_oldSize(PyObject *, PyObject *);}
static PyObject *meth_QResizeEvent_oldSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QResizeEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QResizeEvent, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->oldSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QResizeEvent, sipName_oldSize, doc_QResizeEvent_oldSize);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QResizeEvent(void *, const sipTypeDef *);}
static void *cast_QResizeEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QResizeEvent *sipCpp = reinterpret_cast< ::QResizeEvent *>(sipCppV);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QResizeEvent(void *, int);}
static void release_QResizeEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQResizeEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QResizeEvent *>(sipCppV);
}


extern "C" {static void dealloc_QResizeEvent(sipSimpleWrapper *);}
static void dealloc_QResizeEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQResizeEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QResizeEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QResizeEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QResizeEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQResizeEvent *sipCpp = SIP_NULLPTR;

    {
        const  ::QSize* a0;
        const  ::QSize* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9J9", sipType_QSize, &a0, sipType_QSize, &a1))
        {
            sipCpp = new sipQResizeEvent(*a0,*a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QResizeEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QResizeEvent, &a0))
        {
            sipCpp = new sipQResizeEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QResizeEvent[] = {{6, 0, 1}};


static PyMethodDef methods_QResizeEvent[] = {
    {SIP_MLNAME_CAST(sipName_oldSize), meth_QResizeEvent_oldSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QResizeEvent_oldSize)},
    {SIP_MLNAME_CAST(sipName_size), meth_QResizeEvent_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QResizeEvent_size)}
};

PyDoc_STRVAR(doc_QResizeEvent, "\1QResizeEvent(QSize, QSize)\n"
"QResizeEvent(QResizeEvent)");


static pyqt5ClassPluginDef plugin_QResizeEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QResizeEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QResizeEvent,
        {SIP_NULLPTR},
        &plugin_QResizeEvent
    },
    {
        sipNameNr_QResizeEvent,
        {0, 0, 1},
        2, methods_QResizeEvent,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QResizeEvent,
    -1,
    -1,
    supers_QResizeEvent,
    SIP_NULLPTR,
    init_type_QResizeEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QResizeEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QResizeEvent,
    cast_QResizeEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 403 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 70978 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 70982 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 70985 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQMoveEvent : public  ::QMoveEvent
{
public:
    sipQMoveEvent(const  ::QPoint&,const  ::QPoint&);
    sipQMoveEvent(const  ::QMoveEvent&);
    ~sipQMoveEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQMoveEvent(const sipQMoveEvent &);
    sipQMoveEvent &operator = (const sipQMoveEvent &);
};

sipQMoveEvent::sipQMoveEvent(const  ::QPoint& a0,const  ::QPoint& a1):  ::QMoveEvent(a0,a1), sipPySelf(SIP_NULLPTR)
{
}

sipQMoveEvent::sipQMoveEvent(const  ::QMoveEvent& a0):  ::QMoveEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQMoveEvent::~sipQMoveEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QMoveEvent_pos, "pos(self) -> QPoint");

extern "C" {static PyObject *meth_QMoveEvent_pos(PyObject *, PyObject *);}
static PyObject *meth_QMoveEvent_pos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMoveEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMoveEvent, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->pos());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMoveEvent, sipName_pos, doc_QMoveEvent_pos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMoveEvent_oldPos, "oldPos(self) -> QPoint");

extern "C" {static PyObject *meth_QMoveEvent_oldPos(PyObject *, PyObject *);}
static PyObject *meth_QMoveEvent_oldPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMoveEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMoveEvent, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->oldPos());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMoveEvent, sipName_oldPos, doc_QMoveEvent_oldPos);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QMoveEvent(void *, const sipTypeDef *);}
static void *cast_QMoveEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QMoveEvent *sipCpp = reinterpret_cast< ::QMoveEvent *>(sipCppV);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMoveEvent(void *, int);}
static void release_QMoveEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQMoveEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QMoveEvent *>(sipCppV);
}


extern "C" {static void dealloc_QMoveEvent(sipSimpleWrapper *);}
static void dealloc_QMoveEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQMoveEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMoveEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QMoveEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMoveEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQMoveEvent *sipCpp = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
        const  ::QPoint* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9J9", sipType_QPoint, &a0, sipType_QPoint, &a1))
        {
            sipCpp = new sipQMoveEvent(*a0,*a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QMoveEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QMoveEvent, &a0))
        {
            sipCpp = new sipQMoveEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QMoveEvent[] = {{6, 0, 1}};


static PyMethodDef methods_QMoveEvent[] = {
    {SIP_MLNAME_CAST(sipName_oldPos), meth_QMoveEvent_oldPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QMoveEvent_oldPos)},
    {SIP_MLNAME_CAST(sipName_pos), meth_QMoveEvent_pos, METH_VARARGS, SIP_MLDOC_CAST(doc_QMoveEvent_pos)}
};

PyDoc_STRVAR(doc_QMoveEvent, "\1QMoveEvent(QPoint, QPoint)\n"
"QMoveEvent(QMoveEvent)");


static pyqt5ClassPluginDef plugin_QMoveEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QMoveEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMoveEvent,
        {SIP_NULLPTR},
        &plugin_QMoveEvent
    },
    {
        sipNameNr_QMoveEvent,
        {0, 0, 1},
        2, methods_QMoveEvent,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QMoveEvent,
    -1,
    -1,
    supers_QMoveEvent,
    SIP_NULLPTR,
    init_type_QMoveEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QMoveEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QMoveEvent,
    cast_QMoveEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 389 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 71220 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 71224 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 71227 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 71230 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQPaintEvent : public  ::QPaintEvent
{
public:
    sipQPaintEvent(const  ::QRegion&);
    sipQPaintEvent(const  ::QRect&);
    sipQPaintEvent(const  ::QPaintEvent&);
    ~sipQPaintEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPaintEvent(const sipQPaintEvent &);
    sipQPaintEvent &operator = (const sipQPaintEvent &);
};

sipQPaintEvent::sipQPaintEvent(const  ::QRegion& a0):  ::QPaintEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQPaintEvent::sipQPaintEvent(const  ::QRect& a0):  ::QPaintEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQPaintEvent::sipQPaintEvent(const  ::QPaintEvent& a0):  ::QPaintEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQPaintEvent::~sipQPaintEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QPaintEvent_rect, "rect(self) -> QRect");

extern "C" {static PyObject *meth_QPaintEvent_rect(PyObject *, PyObject *);}
static PyObject *meth_QPaintEvent_rect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEvent, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->rect());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEvent, sipName_rect, doc_QPaintEvent_rect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEvent_region, "region(self) -> QRegion");

extern "C" {static PyObject *meth_QPaintEvent_region(PyObject *, PyObject *);}
static PyObject *meth_QPaintEvent_region(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEvent, &sipCpp))
        {
             ::QRegion*sipRes;

            sipRes = new  ::QRegion(sipCpp->region());

            return sipConvertFromNewType(sipRes,sipType_QRegion,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEvent, sipName_region, doc_QPaintEvent_region);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QPaintEvent(void *, const sipTypeDef *);}
static void *cast_QPaintEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QPaintEvent *sipCpp = reinterpret_cast< ::QPaintEvent *>(sipCppV);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPaintEvent(void *, int);}
static void release_QPaintEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQPaintEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QPaintEvent *>(sipCppV);
}


extern "C" {static void dealloc_QPaintEvent(sipSimpleWrapper *);}
static void dealloc_QPaintEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQPaintEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPaintEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QPaintEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPaintEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQPaintEvent *sipCpp = SIP_NULLPTR;

    {
        const  ::QRegion* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QRegion, &a0))
        {
            sipCpp = new sipQPaintEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QRect* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QRect, &a0))
        {
            sipCpp = new sipQPaintEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QPaintEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QPaintEvent, &a0))
        {
            sipCpp = new sipQPaintEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QPaintEvent[] = {{6, 0, 1}};


static PyMethodDef methods_QPaintEvent[] = {
    {SIP_MLNAME_CAST(sipName_rect), meth_QPaintEvent_rect, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEvent_rect)},
    {SIP_MLNAME_CAST(sipName_region), meth_QPaintEvent_region, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEvent_region)}
};

PyDoc_STRVAR(doc_QPaintEvent, "\1QPaintEvent(QRegion)\n"
"QPaintEvent(QRect)\n"
"QPaintEvent(QPaintEvent)");


static pyqt5ClassPluginDef plugin_QPaintEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QPaintEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPaintEvent,
        {SIP_NULLPTR},
        &plugin_QPaintEvent
    },
    {
        sipNameNr_QPaintEvent,
        {0, 0, 1},
        2, methods_QPaintEvent,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPaintEvent,
    -1,
    -1,
    supers_QPaintEvent,
    SIP_NULLPTR,
    init_type_QPaintEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QPaintEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QPaintEvent,
    cast_QPaintEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 375 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 71484 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 71488 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 71491 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQFocusEvent : public  ::QFocusEvent
{
public:
    sipQFocusEvent( ::QEvent::Type, ::Qt::FocusReason);
    sipQFocusEvent(const  ::QFocusEvent&);
    ~sipQFocusEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQFocusEvent(const sipQFocusEvent &);
    sipQFocusEvent &operator = (const sipQFocusEvent &);
};

sipQFocusEvent::sipQFocusEvent( ::QEvent::Type a0, ::Qt::FocusReason a1):  ::QFocusEvent(a0,a1), sipPySelf(SIP_NULLPTR)
{
}

sipQFocusEvent::sipQFocusEvent(const  ::QFocusEvent& a0):  ::QFocusEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQFocusEvent::~sipQFocusEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QFocusEvent_gotFocus, "gotFocus(self) -> bool");

extern "C" {static PyObject *meth_QFocusEvent_gotFocus(PyObject *, PyObject *);}
static PyObject *meth_QFocusEvent_gotFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFocusEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFocusEvent, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->gotFocus();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFocusEvent, sipName_gotFocus, doc_QFocusEvent_gotFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFocusEvent_lostFocus, "lostFocus(self) -> bool");

extern "C" {static PyObject *meth_QFocusEvent_lostFocus(PyObject *, PyObject *);}
static PyObject *meth_QFocusEvent_lostFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFocusEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFocusEvent, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->lostFocus();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFocusEvent, sipName_lostFocus, doc_QFocusEvent_lostFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFocusEvent_reason, "reason(self) -> Qt.FocusReason");

extern "C" {static PyObject *meth_QFocusEvent_reason(PyObject *, PyObject *);}
static PyObject *meth_QFocusEvent_reason(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFocusEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFocusEvent, &sipCpp))
        {
             ::Qt::FocusReason sipRes;

            sipRes = sipCpp->reason();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_FocusReason);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFocusEvent, sipName_reason, doc_QFocusEvent_reason);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QFocusEvent(void *, const sipTypeDef *);}
static void *cast_QFocusEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QFocusEvent *sipCpp = reinterpret_cast< ::QFocusEvent *>(sipCppV);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QFocusEvent(void *, int);}
static void release_QFocusEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQFocusEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QFocusEvent *>(sipCppV);
}


extern "C" {static void dealloc_QFocusEvent(sipSimpleWrapper *);}
static void dealloc_QFocusEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQFocusEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QFocusEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QFocusEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QFocusEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQFocusEvent *sipCpp = SIP_NULLPTR;

    {
         ::QEvent::Type a0;
         ::Qt::FocusReason a1 = Qt::OtherFocusReason;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_reason,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "E|E", sipType_QEvent_Type, &a0, sipType_Qt_FocusReason, &a1))
        {
            sipCpp = new sipQFocusEvent(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QFocusEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QFocusEvent, &a0))
        {
            sipCpp = new sipQFocusEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QFocusEvent[] = {{6, 0, 1}};


static PyMethodDef methods_QFocusEvent[] = {
    {SIP_MLNAME_CAST(sipName_gotFocus), meth_QFocusEvent_gotFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_QFocusEvent_gotFocus)},
    {SIP_MLNAME_CAST(sipName_lostFocus), meth_QFocusEvent_lostFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_QFocusEvent_lostFocus)},
    {SIP_MLNAME_CAST(sipName_reason), meth_QFocusEvent_reason, METH_VARARGS, SIP_MLDOC_CAST(doc_QFocusEvent_reason)}
};

PyDoc_STRVAR(doc_QFocusEvent, "\1QFocusEvent(QEvent.Type, reason: Qt.FocusReason = Qt.OtherFocusReason)\n"
"QFocusEvent(QFocusEvent)");


static pyqt5ClassPluginDef plugin_QFocusEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QFocusEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QFocusEvent,
        {SIP_NULLPTR},
        &plugin_QFocusEvent
    },
    {
        sipNameNr_QFocusEvent,
        {0, 0, 1},
        3, methods_QFocusEvent,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QFocusEvent,
    -1,
    -1,
    supers_QFocusEvent,
    SIP_NULLPTR,
    init_type_QFocusEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QFocusEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QFocusEvent,
    cast_QFocusEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 354 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 71760 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 71764 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 71767 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 71770 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 71773 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQKeyEvent : public  ::QKeyEvent
{
public:
    sipQKeyEvent( ::QEvent::Type,int, ::Qt::KeyboardModifiers, ::quint32, ::quint32, ::quint32,const  ::QString&,bool, ::ushort);
    sipQKeyEvent( ::QEvent::Type,int, ::Qt::KeyboardModifiers,const  ::QString&,bool, ::ushort);
    sipQKeyEvent(const  ::QKeyEvent&);
    ~sipQKeyEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQKeyEvent(const sipQKeyEvent &);
    sipQKeyEvent &operator = (const sipQKeyEvent &);
};

sipQKeyEvent::sipQKeyEvent( ::QEvent::Type a0,int a1, ::Qt::KeyboardModifiers a2, ::quint32 a3, ::quint32 a4, ::quint32 a5,const  ::QString& a6,bool a7, ::ushort a8):  ::QKeyEvent(a0,a1,a2,a3,a4,a5,a6,a7,a8), sipPySelf(SIP_NULLPTR)
{
}

sipQKeyEvent::sipQKeyEvent( ::QEvent::Type a0,int a1, ::Qt::KeyboardModifiers a2,const  ::QString& a3,bool a4, ::ushort a5):  ::QKeyEvent(a0,a1,a2,a3,a4,a5), sipPySelf(SIP_NULLPTR)
{
}

sipQKeyEvent::sipQKeyEvent(const  ::QKeyEvent& a0):  ::QKeyEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQKeyEvent::~sipQKeyEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QKeyEvent_key, "key(self) -> int");

extern "C" {static PyObject *meth_QKeyEvent_key(PyObject *, PyObject *);}
static PyObject *meth_QKeyEvent_key(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QKeyEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QKeyEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->key();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QKeyEvent, sipName_key, doc_QKeyEvent_key);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QKeyEvent_modifiers, "modifiers(self) -> Qt.KeyboardModifiers");

extern "C" {static PyObject *meth_QKeyEvent_modifiers(PyObject *, PyObject *);}
static PyObject *meth_QKeyEvent_modifiers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QKeyEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QKeyEvent, &sipCpp))
        {
             ::Qt::KeyboardModifiers*sipRes;

            sipRes = new  ::Qt::KeyboardModifiers(sipCpp->modifiers());

            return sipConvertFromNewType(sipRes,sipType_Qt_KeyboardModifiers,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QKeyEvent, sipName_modifiers, doc_QKeyEvent_modifiers);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QKeyEvent_text, "text(self) -> str");

extern "C" {static PyObject *meth_QKeyEvent_text(PyObject *, PyObject *);}
static PyObject *meth_QKeyEvent_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QKeyEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QKeyEvent, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->text());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QKeyEvent, sipName_text, doc_QKeyEvent_text);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QKeyEvent_isAutoRepeat, "isAutoRepeat(self) -> bool");

extern "C" {static PyObject *meth_QKeyEvent_isAutoRepeat(PyObject *, PyObject *);}
static PyObject *meth_QKeyEvent_isAutoRepeat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QKeyEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QKeyEvent, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAutoRepeat();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QKeyEvent, sipName_isAutoRepeat, doc_QKeyEvent_isAutoRepeat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QKeyEvent_count, "count(self) -> int");

extern "C" {static PyObject *meth_QKeyEvent_count(PyObject *, PyObject *);}
static PyObject *meth_QKeyEvent_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QKeyEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QKeyEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->count();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QKeyEvent, sipName_count, doc_QKeyEvent_count);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QKeyEvent_matches, "matches(self, QKeySequence.StandardKey) -> bool");

extern "C" {static PyObject *meth_QKeyEvent_matches(PyObject *, PyObject *);}
static PyObject *meth_QKeyEvent_matches(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QKeySequence::StandardKey a0;
        const  ::QKeyEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QKeyEvent, &sipCpp, sipType_QKeySequence_StandardKey, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->matches(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QKeyEvent, sipName_matches, doc_QKeyEvent_matches);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QKeyEvent_nativeModifiers, "nativeModifiers(self) -> int");

extern "C" {static PyObject *meth_QKeyEvent_nativeModifiers(PyObject *, PyObject *);}
static PyObject *meth_QKeyEvent_nativeModifiers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QKeyEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QKeyEvent, &sipCpp))
        {
             ::quint32 sipRes;

            sipRes = sipCpp->nativeModifiers();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QKeyEvent, sipName_nativeModifiers, doc_QKeyEvent_nativeModifiers);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QKeyEvent_nativeScanCode, "nativeScanCode(self) -> int");

extern "C" {static PyObject *meth_QKeyEvent_nativeScanCode(PyObject *, PyObject *);}
static PyObject *meth_QKeyEvent_nativeScanCode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QKeyEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QKeyEvent, &sipCpp))
        {
             ::quint32 sipRes;

            sipRes = sipCpp->nativeScanCode();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QKeyEvent, sipName_nativeScanCode, doc_QKeyEvent_nativeScanCode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QKeyEvent_nativeVirtualKey, "nativeVirtualKey(self) -> int");

extern "C" {static PyObject *meth_QKeyEvent_nativeVirtualKey(PyObject *, PyObject *);}
static PyObject *meth_QKeyEvent_nativeVirtualKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QKeyEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QKeyEvent, &sipCpp))
        {
             ::quint32 sipRes;

            sipRes = sipCpp->nativeVirtualKey();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QKeyEvent, sipName_nativeVirtualKey, doc_QKeyEvent_nativeVirtualKey);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QKeyEvent___ne__(PyObject *,PyObject *);}
static PyObject *slot_QKeyEvent___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QKeyEvent *sipCpp = reinterpret_cast< ::QKeyEvent *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QKeyEvent));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QKeySequence::StandardKey a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1E", sipType_QKeySequence_StandardKey, &a0))
        {
            bool sipRes;

            sipRes = !operator==(sipCpp, a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QKeyEvent, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QKeyEvent___eq__(PyObject *,PyObject *);}
static PyObject *slot_QKeyEvent___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QKeyEvent *sipCpp = reinterpret_cast< ::QKeyEvent *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QKeyEvent));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QKeySequence::StandardKey a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1E", sipType_QKeySequence_StandardKey, &a0))
        {
            bool sipRes;

            sipRes = operator==(sipCpp, a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QKeyEvent, sipSelf, sipArg);
}


extern "C" {static SIP_SSIZE_T slot_QKeyEvent___len__(PyObject *);}
static SIP_SSIZE_T slot_QKeyEvent___len__(PyObject *sipSelf)
{
     ::QKeyEvent *sipCpp = reinterpret_cast< ::QKeyEvent *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QKeyEvent));

    if (!sipCpp)
        return 0;


    {
        {
            SIP_SSIZE_T sipRes = 0;

#line 1 "Auto-generated"
            sipRes = (SIP_SSIZE_T)sipCpp->count();
#line 72142 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QKeyEvent(void *, const sipTypeDef *);}
static void *cast_QKeyEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QKeyEvent *sipCpp = reinterpret_cast< ::QKeyEvent *>(sipCppV);

    if (targetType == sipType_QInputEvent)
        return static_cast< ::QInputEvent *>(sipCpp);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QKeyEvent(void *, int);}
static void release_QKeyEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQKeyEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QKeyEvent *>(sipCppV);
}


extern "C" {static void dealloc_QKeyEvent(sipSimpleWrapper *);}
static void dealloc_QKeyEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQKeyEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QKeyEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QKeyEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QKeyEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQKeyEvent *sipCpp = SIP_NULLPTR;

    {
         ::QEvent::Type a0;
        int a1;
         ::Qt::KeyboardModifiers* a2;
        int a2State = 0;
         ::quint32 a3;
         ::quint32 a4;
         ::quint32 a5;
        const  ::QString& a6def = QString();
        const  ::QString* a6 = &a6def;
        int a6State = 0;
        bool a7 = 0;
         ::ushort a8 = 1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_text,
            sipName_autorep,
            sipName_count,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "EiJ1uuu|J1bt", sipType_QEvent_Type, &a0, &a1, sipType_Qt_KeyboardModifiers, &a2, &a2State, &a3, &a4, &a5, sipType_QString,&a6, &a6State, &a7, &a8))
        {
            sipCpp = new sipQKeyEvent(a0,a1,*a2,a3,a4,a5,*a6,a7,a8);
            sipReleaseType(a2,sipType_Qt_KeyboardModifiers,a2State);
            sipReleaseType(const_cast< ::QString *>(a6),sipType_QString,a6State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QEvent::Type a0;
        int a1;
         ::Qt::KeyboardModifiers* a2;
        int a2State = 0;
        const  ::QString& a3def = QString();
        const  ::QString* a3 = &a3def;
        int a3State = 0;
        bool a4 = 0;
         ::ushort a5 = 1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_text,
            sipName_autorep,
            sipName_count,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "EiJ1|J1bt", sipType_QEvent_Type, &a0, &a1, sipType_Qt_KeyboardModifiers, &a2, &a2State, sipType_QString,&a3, &a3State, &a4, &a5))
        {
            sipCpp = new sipQKeyEvent(a0,a1,*a2,*a3,a4,a5);
            sipReleaseType(a2,sipType_Qt_KeyboardModifiers,a2State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QKeyEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QKeyEvent, &a0))
        {
            sipCpp = new sipQKeyEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QKeyEvent[] = {{77, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_QKeyEvent[] = {
    {(void *)slot_QKeyEvent___ne__, ne_slot},
    {(void *)slot_QKeyEvent___eq__, eq_slot},
    {(void *)slot_QKeyEvent___len__, len_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QKeyEvent[] = {
    {SIP_MLNAME_CAST(sipName_count), meth_QKeyEvent_count, METH_VARARGS, SIP_MLDOC_CAST(doc_QKeyEvent_count)},
    {SIP_MLNAME_CAST(sipName_isAutoRepeat), meth_QKeyEvent_isAutoRepeat, METH_VARARGS, SIP_MLDOC_CAST(doc_QKeyEvent_isAutoRepeat)},
    {SIP_MLNAME_CAST(sipName_key), meth_QKeyEvent_key, METH_VARARGS, SIP_MLDOC_CAST(doc_QKeyEvent_key)},
    {SIP_MLNAME_CAST(sipName_matches), meth_QKeyEvent_matches, METH_VARARGS, SIP_MLDOC_CAST(doc_QKeyEvent_matches)},
    {SIP_MLNAME_CAST(sipName_modifiers), meth_QKeyEvent_modifiers, METH_VARARGS, SIP_MLDOC_CAST(doc_QKeyEvent_modifiers)},
    {SIP_MLNAME_CAST(sipName_nativeModifiers), meth_QKeyEvent_nativeModifiers, METH_VARARGS, SIP_MLDOC_CAST(doc_QKeyEvent_nativeModifiers)},
    {SIP_MLNAME_CAST(sipName_nativeScanCode), meth_QKeyEvent_nativeScanCode, METH_VARARGS, SIP_MLDOC_CAST(doc_QKeyEvent_nativeScanCode)},
    {SIP_MLNAME_CAST(sipName_nativeVirtualKey), meth_QKeyEvent_nativeVirtualKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QKeyEvent_nativeVirtualKey)},
    {SIP_MLNAME_CAST(sipName_text), meth_QKeyEvent_text, METH_VARARGS, SIP_MLDOC_CAST(doc_QKeyEvent_text)}
};

PyDoc_STRVAR(doc_QKeyEvent, "\1QKeyEvent(QEvent.Type, int, Union[Qt.KeyboardModifiers, Qt.KeyboardModifier], int, int, int, text: str = '', autorep: bool = False, count: int = 1)\n"
"QKeyEvent(QEvent.Type, int, Union[Qt.KeyboardModifiers, Qt.KeyboardModifier], text: str = '', autorep: bool = False, count: int = 1)\n"
"QKeyEvent(QKeyEvent)");


static pyqt5ClassPluginDef plugin_QKeyEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QKeyEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QKeyEvent,
        {SIP_NULLPTR},
        &plugin_QKeyEvent
    },
    {
        sipNameNr_QKeyEvent,
        {0, 0, 1},
        9, methods_QKeyEvent,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QKeyEvent,
    -1,
    -1,
    supers_QKeyEvent,
    slots_QKeyEvent,
    init_type_QKeyEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QKeyEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QKeyEvent,
    cast_QKeyEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 296 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 72376 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 72380 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 72383 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72386 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72389 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72392 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 72395 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQTabletEvent : public  ::QTabletEvent
{
public:
    sipQTabletEvent( ::QEvent::Type,const  ::QPointF&,const  ::QPointF&,int,int, ::qreal,int,int, ::qreal, ::qreal,int, ::Qt::KeyboardModifiers, ::qint64, ::Qt::MouseButton, ::Qt::MouseButtons);
    sipQTabletEvent( ::QEvent::Type,const  ::QPointF&,const  ::QPointF&,int,int, ::qreal,int,int, ::qreal, ::qreal,int, ::Qt::KeyboardModifiers, ::qint64);
    sipQTabletEvent(const  ::QTabletEvent&);
    ~sipQTabletEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTabletEvent(const sipQTabletEvent &);
    sipQTabletEvent &operator = (const sipQTabletEvent &);
};

sipQTabletEvent::sipQTabletEvent( ::QEvent::Type a0,const  ::QPointF& a1,const  ::QPointF& a2,int a3,int a4, ::qreal a5,int a6,int a7, ::qreal a8, ::qreal a9,int a10, ::Qt::KeyboardModifiers a11, ::qint64 a12, ::Qt::MouseButton a13, ::Qt::MouseButtons a14):  ::QTabletEvent(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14), sipPySelf(SIP_NULLPTR)
{
}

sipQTabletEvent::sipQTabletEvent( ::QEvent::Type a0,const  ::QPointF& a1,const  ::QPointF& a2,int a3,int a4, ::qreal a5,int a6,int a7, ::qreal a8, ::qreal a9,int a10, ::Qt::KeyboardModifiers a11, ::qint64 a12):  ::QTabletEvent(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12), sipPySelf(SIP_NULLPTR)
{
}

sipQTabletEvent::sipQTabletEvent(const  ::QTabletEvent& a0):  ::QTabletEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQTabletEvent::~sipQTabletEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QTabletEvent_pos, "pos(self) -> QPoint");

extern "C" {static PyObject *meth_QTabletEvent_pos(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_pos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->pos());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_pos, doc_QTabletEvent_pos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabletEvent_globalPos, "globalPos(self) -> QPoint");

extern "C" {static PyObject *meth_QTabletEvent_globalPos(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_globalPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->globalPos());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_globalPos, doc_QTabletEvent_globalPos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabletEvent_x, "x(self) -> int");

extern "C" {static PyObject *meth_QTabletEvent_x(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_x(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->x();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_x, doc_QTabletEvent_x);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabletEvent_y, "y(self) -> int");

extern "C" {static PyObject *meth_QTabletEvent_y(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_y(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->y();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_y, doc_QTabletEvent_y);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabletEvent_globalX, "globalX(self) -> int");

extern "C" {static PyObject *meth_QTabletEvent_globalX(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_globalX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->globalX();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_globalX, doc_QTabletEvent_globalX);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabletEvent_globalY, "globalY(self) -> int");

extern "C" {static PyObject *meth_QTabletEvent_globalY(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_globalY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->globalY();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_globalY, doc_QTabletEvent_globalY);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabletEvent_hiResGlobalX, "hiResGlobalX(self) -> float");

extern "C" {static PyObject *meth_QTabletEvent_hiResGlobalX(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_hiResGlobalX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->hiResGlobalX();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_hiResGlobalX, doc_QTabletEvent_hiResGlobalX);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabletEvent_hiResGlobalY, "hiResGlobalY(self) -> float");

extern "C" {static PyObject *meth_QTabletEvent_hiResGlobalY(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_hiResGlobalY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->hiResGlobalY();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_hiResGlobalY, doc_QTabletEvent_hiResGlobalY);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabletEvent_device, "device(self) -> QTabletEvent.TabletDevice");

extern "C" {static PyObject *meth_QTabletEvent_device(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_device(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
             ::QTabletEvent::TabletDevice sipRes;

            sipRes = sipCpp->device();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QTabletEvent_TabletDevice);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_device, doc_QTabletEvent_device);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabletEvent_pointerType, "pointerType(self) -> QTabletEvent.PointerType");

extern "C" {static PyObject *meth_QTabletEvent_pointerType(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_pointerType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
             ::QTabletEvent::PointerType sipRes;

            sipRes = sipCpp->pointerType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QTabletEvent_PointerType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_pointerType, doc_QTabletEvent_pointerType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabletEvent_uniqueId, "uniqueId(self) -> int");

extern "C" {static PyObject *meth_QTabletEvent_uniqueId(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_uniqueId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->uniqueId();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_uniqueId, doc_QTabletEvent_uniqueId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabletEvent_pressure, "pressure(self) -> float");

extern "C" {static PyObject *meth_QTabletEvent_pressure(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_pressure(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->pressure();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_pressure, doc_QTabletEvent_pressure);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabletEvent_z, "z(self) -> int");

extern "C" {static PyObject *meth_QTabletEvent_z(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_z(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->z();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_z, doc_QTabletEvent_z);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabletEvent_tangentialPressure, "tangentialPressure(self) -> float");

extern "C" {static PyObject *meth_QTabletEvent_tangentialPressure(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_tangentialPressure(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->tangentialPressure();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_tangentialPressure, doc_QTabletEvent_tangentialPressure);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabletEvent_rotation, "rotation(self) -> float");

extern "C" {static PyObject *meth_QTabletEvent_rotation(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_rotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->rotation();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_rotation, doc_QTabletEvent_rotation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabletEvent_xTilt, "xTilt(self) -> int");

extern "C" {static PyObject *meth_QTabletEvent_xTilt(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_xTilt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->xTilt();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_xTilt, doc_QTabletEvent_xTilt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabletEvent_yTilt, "yTilt(self) -> int");

extern "C" {static PyObject *meth_QTabletEvent_yTilt(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_yTilt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->yTilt();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_yTilt, doc_QTabletEvent_yTilt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabletEvent_posF, "posF(self) -> QPointF");

extern "C" {static PyObject *meth_QTabletEvent_posF(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_posF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->posF());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_posF, doc_QTabletEvent_posF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabletEvent_globalPosF, "globalPosF(self) -> QPointF");

extern "C" {static PyObject *meth_QTabletEvent_globalPosF(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_globalPosF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->globalPosF());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_globalPosF, doc_QTabletEvent_globalPosF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabletEvent_button, "button(self) -> Qt.MouseButton");

extern "C" {static PyObject *meth_QTabletEvent_button(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_button(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
             ::Qt::MouseButton sipRes;

            sipRes = sipCpp->button();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_MouseButton);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_button, doc_QTabletEvent_button);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTabletEvent_buttons, "buttons(self) -> Qt.MouseButtons");

extern "C" {static PyObject *meth_QTabletEvent_buttons(PyObject *, PyObject *);}
static PyObject *meth_QTabletEvent_buttons(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTabletEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabletEvent, &sipCpp))
        {
             ::Qt::MouseButtons*sipRes;

            sipRes = new  ::Qt::MouseButtons(sipCpp->buttons());

            return sipConvertFromNewType(sipRes,sipType_Qt_MouseButtons,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabletEvent, sipName_buttons, doc_QTabletEvent_buttons);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QTabletEvent(void *, const sipTypeDef *);}
static void *cast_QTabletEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QTabletEvent *sipCpp = reinterpret_cast< ::QTabletEvent *>(sipCppV);

    if (targetType == sipType_QInputEvent)
        return static_cast< ::QInputEvent *>(sipCpp);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTabletEvent(void *, int);}
static void release_QTabletEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQTabletEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QTabletEvent *>(sipCppV);
}


extern "C" {static void dealloc_QTabletEvent(sipSimpleWrapper *);}
static void dealloc_QTabletEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQTabletEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTabletEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QTabletEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTabletEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQTabletEvent *sipCpp = SIP_NULLPTR;

    {
         ::QEvent::Type a0;
        const  ::QPointF* a1;
        int a1State = 0;
        const  ::QPointF* a2;
        int a2State = 0;
        int a3;
        int a4;
         ::qreal a5;
        int a6;
        int a7;
         ::qreal a8;
         ::qreal a9;
        int a10;
         ::Qt::KeyboardModifiers* a11;
        int a11State = 0;
         ::qint64 a12;
         ::Qt::MouseButton a13;
         ::Qt::MouseButtons* a14;
        int a14State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "EJ1J1iidiiddiJ1nEJ1", sipType_QEvent_Type, &a0, sipType_QPointF, &a1, &a1State, sipType_QPointF, &a2, &a2State, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, sipType_Qt_KeyboardModifiers, &a11, &a11State, &a12, sipType_Qt_MouseButton, &a13, sipType_Qt_MouseButtons, &a14, &a14State))
        {
            sipCpp = new sipQTabletEvent(a0,*a1,*a2,a3,a4,a5,a6,a7,a8,a9,a10,*a11,a12,a13,*a14);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);
            sipReleaseType(const_cast< ::QPointF *>(a2),sipType_QPointF,a2State);
            sipReleaseType(a11,sipType_Qt_KeyboardModifiers,a11State);
            sipReleaseType(a14,sipType_Qt_MouseButtons,a14State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QEvent::Type a0;
        const  ::QPointF* a1;
        int a1State = 0;
        const  ::QPointF* a2;
        int a2State = 0;
        int a3;
        int a4;
         ::qreal a5;
        int a6;
        int a7;
         ::qreal a8;
         ::qreal a9;
        int a10;
         ::Qt::KeyboardModifiers* a11;
        int a11State = 0;
         ::qint64 a12;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "EJ1J1iidiiddiJ1n", sipType_QEvent_Type, &a0, sipType_QPointF, &a1, &a1State, sipType_QPointF, &a2, &a2State, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, sipType_Qt_KeyboardModifiers, &a11, &a11State, &a12))
        {
            sipCpp = new sipQTabletEvent(a0,*a1,*a2,a3,a4,a5,a6,a7,a8,a9,a10,*a11,a12);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);
            sipReleaseType(const_cast< ::QPointF *>(a2),sipType_QPointF,a2State);
            sipReleaseType(a11,sipType_Qt_KeyboardModifiers,a11State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QTabletEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTabletEvent, &a0))
        {
            sipCpp = new sipQTabletEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTabletEvent[] = {{77, 255, 1}};


static PyMethodDef methods_QTabletEvent[] = {
    {SIP_MLNAME_CAST(sipName_button), meth_QTabletEvent_button, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_button)},
    {SIP_MLNAME_CAST(sipName_buttons), meth_QTabletEvent_buttons, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_buttons)},
    {SIP_MLNAME_CAST(sipName_device), meth_QTabletEvent_device, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_device)},
    {SIP_MLNAME_CAST(sipName_globalPos), meth_QTabletEvent_globalPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_globalPos)},
    {SIP_MLNAME_CAST(sipName_globalPosF), meth_QTabletEvent_globalPosF, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_globalPosF)},
    {SIP_MLNAME_CAST(sipName_globalX), meth_QTabletEvent_globalX, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_globalX)},
    {SIP_MLNAME_CAST(sipName_globalY), meth_QTabletEvent_globalY, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_globalY)},
    {SIP_MLNAME_CAST(sipName_hiResGlobalX), meth_QTabletEvent_hiResGlobalX, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_hiResGlobalX)},
    {SIP_MLNAME_CAST(sipName_hiResGlobalY), meth_QTabletEvent_hiResGlobalY, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_hiResGlobalY)},
    {SIP_MLNAME_CAST(sipName_pointerType), meth_QTabletEvent_pointerType, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_pointerType)},
    {SIP_MLNAME_CAST(sipName_pos), meth_QTabletEvent_pos, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_pos)},
    {SIP_MLNAME_CAST(sipName_posF), meth_QTabletEvent_posF, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_posF)},
    {SIP_MLNAME_CAST(sipName_pressure), meth_QTabletEvent_pressure, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_pressure)},
    {SIP_MLNAME_CAST(sipName_rotation), meth_QTabletEvent_rotation, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_rotation)},
    {SIP_MLNAME_CAST(sipName_tangentialPressure), meth_QTabletEvent_tangentialPressure, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_tangentialPressure)},
    {SIP_MLNAME_CAST(sipName_uniqueId), meth_QTabletEvent_uniqueId, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_uniqueId)},
    {SIP_MLNAME_CAST(sipName_x), meth_QTabletEvent_x, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_x)},
    {SIP_MLNAME_CAST(sipName_xTilt), meth_QTabletEvent_xTilt, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_xTilt)},
    {SIP_MLNAME_CAST(sipName_y), meth_QTabletEvent_y, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_y)},
    {SIP_MLNAME_CAST(sipName_yTilt), meth_QTabletEvent_yTilt, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_yTilt)},
    {SIP_MLNAME_CAST(sipName_z), meth_QTabletEvent_z, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabletEvent_z)}
};

static sipEnumMemberDef enummembers_QTabletEvent[] = {
    {sipName_Airbrush, static_cast<int>( ::QTabletEvent::Airbrush), 281},
    {sipName_Cursor, static_cast<int>( ::QTabletEvent::Cursor), 280},
    {sipName_Eraser, static_cast<int>( ::QTabletEvent::Eraser), 280},
    {sipName_FourDMouse, static_cast<int>( ::QTabletEvent::FourDMouse), 281},
    {sipName_NoDevice, static_cast<int>( ::QTabletEvent::NoDevice), 281},
    {sipName_Pen, static_cast<int>( ::QTabletEvent::Pen), 280},
    {sipName_Puck, static_cast<int>( ::QTabletEvent::Puck), 281},
    {sipName_RotationStylus, static_cast<int>( ::QTabletEvent::RotationStylus), 281},
    {sipName_Stylus, static_cast<int>( ::QTabletEvent::Stylus), 281},
    {sipName_UnknownPointer, static_cast<int>( ::QTabletEvent::UnknownPointer), 280},
    {sipName_XFreeEraser, static_cast<int>( ::QTabletEvent::XFreeEraser), 281},
};

PyDoc_STRVAR(doc_QTabletEvent, "\1QTabletEvent(QEvent.Type, Union[QPointF, QPoint], Union[QPointF, QPoint], int, int, float, int, int, float, float, int, Union[Qt.KeyboardModifiers, Qt.KeyboardModifier], int, Qt.MouseButton, Union[Qt.MouseButtons, Qt.MouseButton])\n"
"QTabletEvent(QEvent.Type, Union[QPointF, QPoint], Union[QPointF, QPoint], int, int, float, int, int, float, float, int, Union[Qt.KeyboardModifiers, Qt.KeyboardModifier], int)\n"
"QTabletEvent(QTabletEvent)");


static pyqt5ClassPluginDef plugin_QTabletEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTabletEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTabletEvent,
        {SIP_NULLPTR},
        &plugin_QTabletEvent
    },
    {
        sipNameNr_QTabletEvent,
        {0, 0, 1},
        21, methods_QTabletEvent,
        11, enummembers_QTabletEvent,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTabletEvent,
    -1,
    -1,
    supers_QTabletEvent,
    SIP_NULLPTR,
    init_type_QTabletEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTabletEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QTabletEvent,
    cast_QTabletEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 253 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 73257 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 73261 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 73264 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 73267 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 73270 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 73273 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 73276 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQWheelEvent : public  ::QWheelEvent
{
public:
    sipQWheelEvent(const  ::QPointF&,const  ::QPointF&, ::QPoint, ::QPoint,int, ::Qt::Orientation, ::Qt::MouseButtons, ::Qt::KeyboardModifiers);
    sipQWheelEvent(const  ::QPointF&,const  ::QPointF&, ::QPoint, ::QPoint,int, ::Qt::Orientation, ::Qt::MouseButtons, ::Qt::KeyboardModifiers, ::Qt::ScrollPhase);
    sipQWheelEvent(const  ::QPointF&,const  ::QPointF&, ::QPoint, ::QPoint,int, ::Qt::Orientation, ::Qt::MouseButtons, ::Qt::KeyboardModifiers, ::Qt::ScrollPhase, ::Qt::MouseEventSource);
    sipQWheelEvent(const  ::QPointF&,const  ::QPointF&, ::QPoint, ::QPoint,int, ::Qt::Orientation, ::Qt::MouseButtons, ::Qt::KeyboardModifiers, ::Qt::ScrollPhase, ::Qt::MouseEventSource,bool);
    sipQWheelEvent( ::QPointF, ::QPointF, ::QPoint, ::QPoint, ::Qt::MouseButtons, ::Qt::KeyboardModifiers, ::Qt::ScrollPhase,bool, ::Qt::MouseEventSource);
    sipQWheelEvent(const  ::QWheelEvent&);
    ~sipQWheelEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQWheelEvent(const sipQWheelEvent &);
    sipQWheelEvent &operator = (const sipQWheelEvent &);
};

sipQWheelEvent::sipQWheelEvent(const  ::QPointF& a0,const  ::QPointF& a1, ::QPoint a2, ::QPoint a3,int a4, ::Qt::Orientation a5, ::Qt::MouseButtons a6, ::Qt::KeyboardModifiers a7):  ::QWheelEvent(a0,a1,a2,a3,a4,a5,a6,a7), sipPySelf(SIP_NULLPTR)
{
}

sipQWheelEvent::sipQWheelEvent(const  ::QPointF& a0,const  ::QPointF& a1, ::QPoint a2, ::QPoint a3,int a4, ::Qt::Orientation a5, ::Qt::MouseButtons a6, ::Qt::KeyboardModifiers a7, ::Qt::ScrollPhase a8):  ::QWheelEvent(a0,a1,a2,a3,a4,a5,a6,a7,a8), sipPySelf(SIP_NULLPTR)
{
}

sipQWheelEvent::sipQWheelEvent(const  ::QPointF& a0,const  ::QPointF& a1, ::QPoint a2, ::QPoint a3,int a4, ::Qt::Orientation a5, ::Qt::MouseButtons a6, ::Qt::KeyboardModifiers a7, ::Qt::ScrollPhase a8, ::Qt::MouseEventSource a9):  ::QWheelEvent(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9), sipPySelf(SIP_NULLPTR)
{
}

sipQWheelEvent::sipQWheelEvent(const  ::QPointF& a0,const  ::QPointF& a1, ::QPoint a2, ::QPoint a3,int a4, ::Qt::Orientation a5, ::Qt::MouseButtons a6, ::Qt::KeyboardModifiers a7, ::Qt::ScrollPhase a8, ::Qt::MouseEventSource a9,bool a10):  ::QWheelEvent(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10), sipPySelf(SIP_NULLPTR)
{
}

sipQWheelEvent::sipQWheelEvent( ::QPointF a0, ::QPointF a1, ::QPoint a2, ::QPoint a3, ::Qt::MouseButtons a4, ::Qt::KeyboardModifiers a5, ::Qt::ScrollPhase a6,bool a7, ::Qt::MouseEventSource a8):  ::QWheelEvent(a0,a1,a2,a3,a4,a5,a6,a7,a8), sipPySelf(SIP_NULLPTR)
{
}

sipQWheelEvent::sipQWheelEvent(const  ::QWheelEvent& a0):  ::QWheelEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQWheelEvent::~sipQWheelEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QWheelEvent_pos, "pos(self) -> QPoint");

extern "C" {static PyObject *meth_QWheelEvent_pos(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_pos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->pos());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_pos, doc_QWheelEvent_pos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWheelEvent_globalPos, "globalPos(self) -> QPoint");

extern "C" {static PyObject *meth_QWheelEvent_globalPos(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_globalPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->globalPos());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_globalPos, doc_QWheelEvent_globalPos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWheelEvent_x, "x(self) -> int");

extern "C" {static PyObject *meth_QWheelEvent_x(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_x(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->x();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_x, doc_QWheelEvent_x);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWheelEvent_y, "y(self) -> int");

extern "C" {static PyObject *meth_QWheelEvent_y(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_y(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->y();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_y, doc_QWheelEvent_y);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWheelEvent_globalX, "globalX(self) -> int");

extern "C" {static PyObject *meth_QWheelEvent_globalX(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_globalX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->globalX();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_globalX, doc_QWheelEvent_globalX);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWheelEvent_globalY, "globalY(self) -> int");

extern "C" {static PyObject *meth_QWheelEvent_globalY(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_globalY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->globalY();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_globalY, doc_QWheelEvent_globalY);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWheelEvent_buttons, "buttons(self) -> Qt.MouseButtons");

extern "C" {static PyObject *meth_QWheelEvent_buttons(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_buttons(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
             ::Qt::MouseButtons*sipRes;

            sipRes = new  ::Qt::MouseButtons(sipCpp->buttons());

            return sipConvertFromNewType(sipRes,sipType_Qt_MouseButtons,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_buttons, doc_QWheelEvent_buttons);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWheelEvent_pixelDelta, "pixelDelta(self) -> QPoint");

extern "C" {static PyObject *meth_QWheelEvent_pixelDelta(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_pixelDelta(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->pixelDelta());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_pixelDelta, doc_QWheelEvent_pixelDelta);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWheelEvent_angleDelta, "angleDelta(self) -> QPoint");

extern "C" {static PyObject *meth_QWheelEvent_angleDelta(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_angleDelta(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->angleDelta());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_angleDelta, doc_QWheelEvent_angleDelta);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWheelEvent_posF, "posF(self) -> QPointF");

extern "C" {static PyObject *meth_QWheelEvent_posF(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_posF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->posF());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_posF, doc_QWheelEvent_posF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWheelEvent_globalPosF, "globalPosF(self) -> QPointF");

extern "C" {static PyObject *meth_QWheelEvent_globalPosF(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_globalPosF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->globalPosF());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_globalPosF, doc_QWheelEvent_globalPosF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWheelEvent_phase, "phase(self) -> Qt.ScrollPhase");

extern "C" {static PyObject *meth_QWheelEvent_phase(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_phase(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
             ::Qt::ScrollPhase sipRes;

            sipRes = sipCpp->phase();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_ScrollPhase);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_phase, doc_QWheelEvent_phase);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWheelEvent_source, "source(self) -> Qt.MouseEventSource");

extern "C" {static PyObject *meth_QWheelEvent_source(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_source(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
             ::Qt::MouseEventSource sipRes;

            sipRes = sipCpp->source();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_MouseEventSource);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_source, doc_QWheelEvent_source);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWheelEvent_inverted, "inverted(self) -> bool");

extern "C" {static PyObject *meth_QWheelEvent_inverted(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_inverted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->inverted();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_inverted, doc_QWheelEvent_inverted);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QWheelEvent(void *, const sipTypeDef *);}
static void *cast_QWheelEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QWheelEvent *sipCpp = reinterpret_cast< ::QWheelEvent *>(sipCppV);

    if (targetType == sipType_QInputEvent)
        return static_cast< ::QInputEvent *>(sipCpp);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWheelEvent(void *, int);}
static void release_QWheelEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQWheelEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QWheelEvent *>(sipCppV);
}


extern "C" {static void dealloc_QWheelEvent(sipSimpleWrapper *);}
static void dealloc_QWheelEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQWheelEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QWheelEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QWheelEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWheelEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQWheelEvent *sipCpp = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QPointF* a1;
        int a1State = 0;
         ::QPoint* a2;
         ::QPoint* a3;
        int a4;
         ::Qt::Orientation a5;
         ::Qt::MouseButtons* a6;
        int a6State = 0;
         ::Qt::KeyboardModifiers* a7;
        int a7State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1J1J9J9iEJ1J1", sipType_QPointF, &a0, &a0State, sipType_QPointF, &a1, &a1State, sipType_QPoint, &a2, sipType_QPoint, &a3, &a4, sipType_Qt_Orientation, &a5, sipType_Qt_MouseButtons, &a6, &a6State, sipType_Qt_KeyboardModifiers, &a7, &a7State))
        {
            sipCpp = new sipQWheelEvent(*a0,*a1,*a2,*a3,a4,a5,*a6,*a7);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);
            sipReleaseType(a6,sipType_Qt_MouseButtons,a6State);
            sipReleaseType(a7,sipType_Qt_KeyboardModifiers,a7State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QPointF* a1;
        int a1State = 0;
         ::QPoint* a2;
         ::QPoint* a3;
        int a4;
         ::Qt::Orientation a5;
         ::Qt::MouseButtons* a6;
        int a6State = 0;
         ::Qt::KeyboardModifiers* a7;
        int a7State = 0;
         ::Qt::ScrollPhase a8;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1J1J9J9iEJ1J1E", sipType_QPointF, &a0, &a0State, sipType_QPointF, &a1, &a1State, sipType_QPoint, &a2, sipType_QPoint, &a3, &a4, sipType_Qt_Orientation, &a5, sipType_Qt_MouseButtons, &a6, &a6State, sipType_Qt_KeyboardModifiers, &a7, &a7State, sipType_Qt_ScrollPhase, &a8))
        {
            sipCpp = new sipQWheelEvent(*a0,*a1,*a2,*a3,a4,a5,*a6,*a7,a8);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);
            sipReleaseType(a6,sipType_Qt_MouseButtons,a6State);
            sipReleaseType(a7,sipType_Qt_KeyboardModifiers,a7State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QPointF* a1;
        int a1State = 0;
         ::QPoint* a2;
         ::QPoint* a3;
        int a4;
         ::Qt::Orientation a5;
         ::Qt::MouseButtons* a6;
        int a6State = 0;
         ::Qt::KeyboardModifiers* a7;
        int a7State = 0;
         ::Qt::ScrollPhase a8;
         ::Qt::MouseEventSource a9;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1J1J9J9iEJ1J1EE", sipType_QPointF, &a0, &a0State, sipType_QPointF, &a1, &a1State, sipType_QPoint, &a2, sipType_QPoint, &a3, &a4, sipType_Qt_Orientation, &a5, sipType_Qt_MouseButtons, &a6, &a6State, sipType_Qt_KeyboardModifiers, &a7, &a7State, sipType_Qt_ScrollPhase, &a8, sipType_Qt_MouseEventSource, &a9))
        {
            sipCpp = new sipQWheelEvent(*a0,*a1,*a2,*a3,a4,a5,*a6,*a7,a8,a9);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);
            sipReleaseType(a6,sipType_Qt_MouseButtons,a6State);
            sipReleaseType(a7,sipType_Qt_KeyboardModifiers,a7State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QPointF* a1;
        int a1State = 0;
         ::QPoint* a2;
         ::QPoint* a3;
        int a4;
         ::Qt::Orientation a5;
         ::Qt::MouseButtons* a6;
        int a6State = 0;
         ::Qt::KeyboardModifiers* a7;
        int a7State = 0;
         ::Qt::ScrollPhase a8;
         ::Qt::MouseEventSource a9;
        bool a10;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1J1J9J9iEJ1J1EEb", sipType_QPointF, &a0, &a0State, sipType_QPointF, &a1, &a1State, sipType_QPoint, &a2, sipType_QPoint, &a3, &a4, sipType_Qt_Orientation, &a5, sipType_Qt_MouseButtons, &a6, &a6State, sipType_Qt_KeyboardModifiers, &a7, &a7State, sipType_Qt_ScrollPhase, &a8, sipType_Qt_MouseEventSource, &a9, &a10))
        {
            sipCpp = new sipQWheelEvent(*a0,*a1,*a2,*a3,a4,a5,*a6,*a7,a8,a9,a10);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);
            sipReleaseType(a6,sipType_Qt_MouseButtons,a6State);
            sipReleaseType(a7,sipType_Qt_KeyboardModifiers,a7State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QPointF* a0;
        int a0State = 0;
         ::QPointF* a1;
        int a1State = 0;
         ::QPoint* a2;
         ::QPoint* a3;
         ::Qt::MouseButtons* a4;
        int a4State = 0;
         ::Qt::KeyboardModifiers* a5;
        int a5State = 0;
         ::Qt::ScrollPhase a6;
        bool a7;
         ::Qt::MouseEventSource a8 = Qt::MouseEventNotSynthesized;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_source,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1J1J9J9J1J1Eb|E", sipType_QPointF, &a0, &a0State, sipType_QPointF, &a1, &a1State, sipType_QPoint, &a2, sipType_QPoint, &a3, sipType_Qt_MouseButtons, &a4, &a4State, sipType_Qt_KeyboardModifiers, &a5, &a5State, sipType_Qt_ScrollPhase, &a6, &a7, sipType_Qt_MouseEventSource, &a8))
        {
            sipCpp = new sipQWheelEvent(*a0,*a1,*a2,*a3,*a4,*a5,a6,a7,a8);
            sipReleaseType(a0,sipType_QPointF,a0State);
            sipReleaseType(a1,sipType_QPointF,a1State);
            sipReleaseType(a4,sipType_Qt_MouseButtons,a4State);
            sipReleaseType(a5,sipType_Qt_KeyboardModifiers,a5State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QWheelEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QWheelEvent, &a0))
        {
            sipCpp = new sipQWheelEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWheelEvent[] = {{77, 255, 1}};


static PyMethodDef methods_QWheelEvent[] = {
    {SIP_MLNAME_CAST(sipName_angleDelta), meth_QWheelEvent_angleDelta, METH_VARARGS, SIP_MLDOC_CAST(doc_QWheelEvent_angleDelta)},
    {SIP_MLNAME_CAST(sipName_buttons), meth_QWheelEvent_buttons, METH_VARARGS, SIP_MLDOC_CAST(doc_QWheelEvent_buttons)},
    {SIP_MLNAME_CAST(sipName_globalPos), meth_QWheelEvent_globalPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QWheelEvent_globalPos)},
    {SIP_MLNAME_CAST(sipName_globalPosF), meth_QWheelEvent_globalPosF, METH_VARARGS, SIP_MLDOC_CAST(doc_QWheelEvent_globalPosF)},
    {SIP_MLNAME_CAST(sipName_globalX), meth_QWheelEvent_globalX, METH_VARARGS, SIP_MLDOC_CAST(doc_QWheelEvent_globalX)},
    {SIP_MLNAME_CAST(sipName_globalY), meth_QWheelEvent_globalY, METH_VARARGS, SIP_MLDOC_CAST(doc_QWheelEvent_globalY)},
    {SIP_MLNAME_CAST(sipName_inverted), meth_QWheelEvent_inverted, METH_VARARGS, SIP_MLDOC_CAST(doc_QWheelEvent_inverted)},
    {SIP_MLNAME_CAST(sipName_phase), meth_QWheelEvent_phase, METH_VARARGS, SIP_MLDOC_CAST(doc_QWheelEvent_phase)},
    {SIP_MLNAME_CAST(sipName_pixelDelta), meth_QWheelEvent_pixelDelta, METH_VARARGS, SIP_MLDOC_CAST(doc_QWheelEvent_pixelDelta)},
    {SIP_MLNAME_CAST(sipName_pos), meth_QWheelEvent_pos, METH_VARARGS, SIP_MLDOC_CAST(doc_QWheelEvent_pos)},
    {SIP_MLNAME_CAST(sipName_posF), meth_QWheelEvent_posF, METH_VARARGS, SIP_MLDOC_CAST(doc_QWheelEvent_posF)},
    {SIP_MLNAME_CAST(sipName_source), meth_QWheelEvent_source, METH_VARARGS, SIP_MLDOC_CAST(doc_QWheelEvent_source)},
    {SIP_MLNAME_CAST(sipName_x), meth_QWheelEvent_x, METH_VARARGS, SIP_MLDOC_CAST(doc_QWheelEvent_x)},
    {SIP_MLNAME_CAST(sipName_y), meth_QWheelEvent_y, METH_VARARGS, SIP_MLDOC_CAST(doc_QWheelEvent_y)}
};

PyDoc_STRVAR(doc_QWheelEvent, "\1QWheelEvent(Union[QPointF, QPoint], Union[QPointF, QPoint], QPoint, QPoint, int, Qt.Orientation, Union[Qt.MouseButtons, Qt.MouseButton], Union[Qt.KeyboardModifiers, Qt.KeyboardModifier])\n"
"QWheelEvent(Union[QPointF, QPoint], Union[QPointF, QPoint], QPoint, QPoint, int, Qt.Orientation, Union[Qt.MouseButtons, Qt.MouseButton], Union[Qt.KeyboardModifiers, Qt.KeyboardModifier], Qt.ScrollPhase)\n"
"QWheelEvent(Union[QPointF, QPoint], Union[QPointF, QPoint], QPoint, QPoint, int, Qt.Orientation, Union[Qt.MouseButtons, Qt.MouseButton], Union[Qt.KeyboardModifiers, Qt.KeyboardModifier], Qt.ScrollPhase, Qt.MouseEventSource)\n"
"QWheelEvent(Union[QPointF, QPoint], Union[QPointF, QPoint], QPoint, QPoint, int, Qt.Orientation, Union[Qt.MouseButtons, Qt.MouseButton], Union[Qt.KeyboardModifiers, Qt.KeyboardModifier], Qt.ScrollPhase, Qt.MouseEventSource, bool)\n"
"QWheelEvent(Union[QPointF, QPoint], Union[QPointF, QPoint], QPoint, QPoint, Union[Qt.MouseButtons, Qt.MouseButton], Union[Qt.KeyboardModifiers, Qt.KeyboardModifier], Qt.ScrollPhase, bool, source: Qt.MouseEventSource = Qt.MouseEventNotSynthesized)\n"
"QWheelEvent(QWheelEvent)");


static pyqt5ClassPluginDef plugin_QWheelEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QWheelEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QWheelEvent,
        {SIP_NULLPTR},
        &plugin_QWheelEvent
    },
    {
        sipNameNr_QWheelEvent,
        {0, 0, 1},
        14, methods_QWheelEvent,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QWheelEvent,
    -1,
    -1,
    supers_QWheelEvent,
    SIP_NULLPTR,
    init_type_QWheelEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QWheelEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QWheelEvent,
    cast_QWheelEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 238 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 74035 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 74039 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 74042 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 74045 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 74048 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQHoverEvent : public  ::QHoverEvent
{
public:
    sipQHoverEvent( ::QEvent::Type,const  ::QPointF&,const  ::QPointF&, ::Qt::KeyboardModifiers);
    sipQHoverEvent(const  ::QHoverEvent&);
    ~sipQHoverEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQHoverEvent(const sipQHoverEvent &);
    sipQHoverEvent &operator = (const sipQHoverEvent &);
};

sipQHoverEvent::sipQHoverEvent( ::QEvent::Type a0,const  ::QPointF& a1,const  ::QPointF& a2, ::Qt::KeyboardModifiers a3):  ::QHoverEvent(a0,a1,a2,a3), sipPySelf(SIP_NULLPTR)
{
}

sipQHoverEvent::sipQHoverEvent(const  ::QHoverEvent& a0):  ::QHoverEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQHoverEvent::~sipQHoverEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QHoverEvent_pos, "pos(self) -> QPoint");

extern "C" {static PyObject *meth_QHoverEvent_pos(PyObject *, PyObject *);}
static PyObject *meth_QHoverEvent_pos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHoverEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHoverEvent, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->pos());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHoverEvent, sipName_pos, doc_QHoverEvent_pos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHoverEvent_oldPos, "oldPos(self) -> QPoint");

extern "C" {static PyObject *meth_QHoverEvent_oldPos(PyObject *, PyObject *);}
static PyObject *meth_QHoverEvent_oldPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHoverEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHoverEvent, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->oldPos());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHoverEvent, sipName_oldPos, doc_QHoverEvent_oldPos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHoverEvent_posF, "posF(self) -> QPointF");

extern "C" {static PyObject *meth_QHoverEvent_posF(PyObject *, PyObject *);}
static PyObject *meth_QHoverEvent_posF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHoverEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHoverEvent, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->posF());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHoverEvent, sipName_posF, doc_QHoverEvent_posF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHoverEvent_oldPosF, "oldPosF(self) -> QPointF");

extern "C" {static PyObject *meth_QHoverEvent_oldPosF(PyObject *, PyObject *);}
static PyObject *meth_QHoverEvent_oldPosF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHoverEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHoverEvent, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->oldPosF());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHoverEvent, sipName_oldPosF, doc_QHoverEvent_oldPosF);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QHoverEvent(void *, const sipTypeDef *);}
static void *cast_QHoverEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QHoverEvent *sipCpp = reinterpret_cast< ::QHoverEvent *>(sipCppV);

    if (targetType == sipType_QInputEvent)
        return static_cast< ::QInputEvent *>(sipCpp);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QHoverEvent(void *, int);}
static void release_QHoverEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQHoverEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QHoverEvent *>(sipCppV);
}


extern "C" {static void dealloc_QHoverEvent(sipSimpleWrapper *);}
static void dealloc_QHoverEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQHoverEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QHoverEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QHoverEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QHoverEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQHoverEvent *sipCpp = SIP_NULLPTR;

    {
         ::QEvent::Type a0;
        const  ::QPointF* a1;
        int a1State = 0;
        const  ::QPointF* a2;
        int a2State = 0;
         ::Qt::KeyboardModifiers a3def = Qt::NoModifier;
         ::Qt::KeyboardModifiers* a3 = &a3def;
        int a3State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_modifiers,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "EJ1J1|J1", sipType_QEvent_Type, &a0, sipType_QPointF, &a1, &a1State, sipType_QPointF, &a2, &a2State, sipType_Qt_KeyboardModifiers, &a3, &a3State))
        {
            sipCpp = new sipQHoverEvent(a0,*a1,*a2,*a3);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);
            sipReleaseType(const_cast< ::QPointF *>(a2),sipType_QPointF,a2State);
            sipReleaseType(a3,sipType_Qt_KeyboardModifiers,a3State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QHoverEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QHoverEvent, &a0))
        {
            sipCpp = new sipQHoverEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QHoverEvent[] = {{77, 255, 1}};


static PyMethodDef methods_QHoverEvent[] = {
    {SIP_MLNAME_CAST(sipName_oldPos), meth_QHoverEvent_oldPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QHoverEvent_oldPos)},
    {SIP_MLNAME_CAST(sipName_oldPosF), meth_QHoverEvent_oldPosF, METH_VARARGS, SIP_MLDOC_CAST(doc_QHoverEvent_oldPosF)},
    {SIP_MLNAME_CAST(sipName_pos), meth_QHoverEvent_pos, METH_VARARGS, SIP_MLDOC_CAST(doc_QHoverEvent_pos)},
    {SIP_MLNAME_CAST(sipName_posF), meth_QHoverEvent_posF, METH_VARARGS, SIP_MLDOC_CAST(doc_QHoverEvent_posF)}
};

PyDoc_STRVAR(doc_QHoverEvent, "\1QHoverEvent(QEvent.Type, Union[QPointF, QPoint], Union[QPointF, QPoint], modifiers: Union[Qt.KeyboardModifiers, Qt.KeyboardModifier] = Qt.NoModifier)\n"
"QHoverEvent(QHoverEvent)");


static pyqt5ClassPluginDef plugin_QHoverEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QHoverEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QHoverEvent,
        {SIP_NULLPTR},
        &plugin_QHoverEvent
    },
    {
        sipNameNr_QHoverEvent,
        {0, 0, 1},
        4, methods_QHoverEvent,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QHoverEvent,
    -1,
    -1,
    supers_QHoverEvent,
    SIP_NULLPTR,
    init_type_QHoverEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QHoverEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QHoverEvent,
    cast_QHoverEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 205 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 74360 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 74364 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 74367 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 74370 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 74373 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 74376 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 74379 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 74382 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQMouseEvent : public  ::QMouseEvent
{
public:
    sipQMouseEvent( ::QEvent::Type,const  ::QPointF&, ::Qt::MouseButton, ::Qt::MouseButtons, ::Qt::KeyboardModifiers);
    sipQMouseEvent( ::QEvent::Type,const  ::QPointF&,const  ::QPointF&, ::Qt::MouseButton, ::Qt::MouseButtons, ::Qt::KeyboardModifiers);
    sipQMouseEvent( ::QEvent::Type,const  ::QPointF&,const  ::QPointF&,const  ::QPointF&, ::Qt::MouseButton, ::Qt::MouseButtons, ::Qt::KeyboardModifiers);
    sipQMouseEvent( ::QEvent::Type,const  ::QPointF&,const  ::QPointF&,const  ::QPointF&, ::Qt::MouseButton, ::Qt::MouseButtons, ::Qt::KeyboardModifiers, ::Qt::MouseEventSource);
    sipQMouseEvent(const  ::QMouseEvent&);
    ~sipQMouseEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQMouseEvent(const sipQMouseEvent &);
    sipQMouseEvent &operator = (const sipQMouseEvent &);
};

sipQMouseEvent::sipQMouseEvent( ::QEvent::Type a0,const  ::QPointF& a1, ::Qt::MouseButton a2, ::Qt::MouseButtons a3, ::Qt::KeyboardModifiers a4):  ::QMouseEvent(a0,a1,a2,a3,a4), sipPySelf(SIP_NULLPTR)
{
}

sipQMouseEvent::sipQMouseEvent( ::QEvent::Type a0,const  ::QPointF& a1,const  ::QPointF& a2, ::Qt::MouseButton a3, ::Qt::MouseButtons a4, ::Qt::KeyboardModifiers a5):  ::QMouseEvent(a0,a1,a2,a3,a4,a5), sipPySelf(SIP_NULLPTR)
{
}

sipQMouseEvent::sipQMouseEvent( ::QEvent::Type a0,const  ::QPointF& a1,const  ::QPointF& a2,const  ::QPointF& a3, ::Qt::MouseButton a4, ::Qt::MouseButtons a5, ::Qt::KeyboardModifiers a6):  ::QMouseEvent(a0,a1,a2,a3,a4,a5,a6), sipPySelf(SIP_NULLPTR)
{
}

sipQMouseEvent::sipQMouseEvent( ::QEvent::Type a0,const  ::QPointF& a1,const  ::QPointF& a2,const  ::QPointF& a3, ::Qt::MouseButton a4, ::Qt::MouseButtons a5, ::Qt::KeyboardModifiers a6, ::Qt::MouseEventSource a7):  ::QMouseEvent(a0,a1,a2,a3,a4,a5,a6,a7), sipPySelf(SIP_NULLPTR)
{
}

sipQMouseEvent::sipQMouseEvent(const  ::QMouseEvent& a0):  ::QMouseEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQMouseEvent::~sipQMouseEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QMouseEvent_pos, "pos(self) -> QPoint");

extern "C" {static PyObject *meth_QMouseEvent_pos(PyObject *, PyObject *);}
static PyObject *meth_QMouseEvent_pos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMouseEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMouseEvent, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->pos());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMouseEvent, sipName_pos, doc_QMouseEvent_pos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMouseEvent_globalPos, "globalPos(self) -> QPoint");

extern "C" {static PyObject *meth_QMouseEvent_globalPos(PyObject *, PyObject *);}
static PyObject *meth_QMouseEvent_globalPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMouseEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMouseEvent, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->globalPos());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMouseEvent, sipName_globalPos, doc_QMouseEvent_globalPos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMouseEvent_x, "x(self) -> int");

extern "C" {static PyObject *meth_QMouseEvent_x(PyObject *, PyObject *);}
static PyObject *meth_QMouseEvent_x(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMouseEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMouseEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->x();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMouseEvent, sipName_x, doc_QMouseEvent_x);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMouseEvent_y, "y(self) -> int");

extern "C" {static PyObject *meth_QMouseEvent_y(PyObject *, PyObject *);}
static PyObject *meth_QMouseEvent_y(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMouseEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMouseEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->y();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMouseEvent, sipName_y, doc_QMouseEvent_y);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMouseEvent_globalX, "globalX(self) -> int");

extern "C" {static PyObject *meth_QMouseEvent_globalX(PyObject *, PyObject *);}
static PyObject *meth_QMouseEvent_globalX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMouseEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMouseEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->globalX();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMouseEvent, sipName_globalX, doc_QMouseEvent_globalX);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMouseEvent_globalY, "globalY(self) -> int");

extern "C" {static PyObject *meth_QMouseEvent_globalY(PyObject *, PyObject *);}
static PyObject *meth_QMouseEvent_globalY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMouseEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMouseEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->globalY();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMouseEvent, sipName_globalY, doc_QMouseEvent_globalY);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMouseEvent_button, "button(self) -> Qt.MouseButton");

extern "C" {static PyObject *meth_QMouseEvent_button(PyObject *, PyObject *);}
static PyObject *meth_QMouseEvent_button(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMouseEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMouseEvent, &sipCpp))
        {
             ::Qt::MouseButton sipRes;

            sipRes = sipCpp->button();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_MouseButton);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMouseEvent, sipName_button, doc_QMouseEvent_button);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMouseEvent_buttons, "buttons(self) -> Qt.MouseButtons");

extern "C" {static PyObject *meth_QMouseEvent_buttons(PyObject *, PyObject *);}
static PyObject *meth_QMouseEvent_buttons(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMouseEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMouseEvent, &sipCpp))
        {
             ::Qt::MouseButtons*sipRes;

            sipRes = new  ::Qt::MouseButtons(sipCpp->buttons());

            return sipConvertFromNewType(sipRes,sipType_Qt_MouseButtons,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMouseEvent, sipName_buttons, doc_QMouseEvent_buttons);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMouseEvent_localPos, "localPos(self) -> QPointF");

extern "C" {static PyObject *meth_QMouseEvent_localPos(PyObject *, PyObject *);}
static PyObject *meth_QMouseEvent_localPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMouseEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMouseEvent, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->localPos());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMouseEvent, sipName_localPos, doc_QMouseEvent_localPos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMouseEvent_windowPos, "windowPos(self) -> QPointF");

extern "C" {static PyObject *meth_QMouseEvent_windowPos(PyObject *, PyObject *);}
static PyObject *meth_QMouseEvent_windowPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMouseEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMouseEvent, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->windowPos());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMouseEvent, sipName_windowPos, doc_QMouseEvent_windowPos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMouseEvent_screenPos, "screenPos(self) -> QPointF");

extern "C" {static PyObject *meth_QMouseEvent_screenPos(PyObject *, PyObject *);}
static PyObject *meth_QMouseEvent_screenPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMouseEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMouseEvent, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->screenPos());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMouseEvent, sipName_screenPos, doc_QMouseEvent_screenPos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMouseEvent_source, "source(self) -> Qt.MouseEventSource");

extern "C" {static PyObject *meth_QMouseEvent_source(PyObject *, PyObject *);}
static PyObject *meth_QMouseEvent_source(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMouseEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMouseEvent, &sipCpp))
        {
             ::Qt::MouseEventSource sipRes;

            sipRes = sipCpp->source();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_MouseEventSource);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMouseEvent, sipName_source, doc_QMouseEvent_source);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMouseEvent_flags, "flags(self) -> Qt.MouseEventFlags");

extern "C" {static PyObject *meth_QMouseEvent_flags(PyObject *, PyObject *);}
static PyObject *meth_QMouseEvent_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMouseEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMouseEvent, &sipCpp))
        {
             ::Qt::MouseEventFlags*sipRes;

            sipRes = new  ::Qt::MouseEventFlags(sipCpp->flags());

            return sipConvertFromNewType(sipRes,sipType_Qt_MouseEventFlags,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMouseEvent, sipName_flags, doc_QMouseEvent_flags);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QMouseEvent(void *, const sipTypeDef *);}
static void *cast_QMouseEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QMouseEvent *sipCpp = reinterpret_cast< ::QMouseEvent *>(sipCppV);

    if (targetType == sipType_QInputEvent)
        return static_cast< ::QInputEvent *>(sipCpp);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMouseEvent(void *, int);}
static void release_QMouseEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQMouseEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QMouseEvent *>(sipCppV);
}


extern "C" {static void dealloc_QMouseEvent(sipSimpleWrapper *);}
static void dealloc_QMouseEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQMouseEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMouseEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QMouseEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMouseEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQMouseEvent *sipCpp = SIP_NULLPTR;

    {
         ::QEvent::Type a0;
        const  ::QPointF* a1;
        int a1State = 0;
         ::Qt::MouseButton a2;
         ::Qt::MouseButtons* a3;
        int a3State = 0;
         ::Qt::KeyboardModifiers* a4;
        int a4State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "EJ1EJ1J1", sipType_QEvent_Type, &a0, sipType_QPointF, &a1, &a1State, sipType_Qt_MouseButton, &a2, sipType_Qt_MouseButtons, &a3, &a3State, sipType_Qt_KeyboardModifiers, &a4, &a4State))
        {
            sipCpp = new sipQMouseEvent(a0,*a1,a2,*a3,*a4);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);
            sipReleaseType(a3,sipType_Qt_MouseButtons,a3State);
            sipReleaseType(a4,sipType_Qt_KeyboardModifiers,a4State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QEvent::Type a0;
        const  ::QPointF* a1;
        int a1State = 0;
        const  ::QPointF* a2;
        int a2State = 0;
         ::Qt::MouseButton a3;
         ::Qt::MouseButtons* a4;
        int a4State = 0;
         ::Qt::KeyboardModifiers* a5;
        int a5State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "EJ1J1EJ1J1", sipType_QEvent_Type, &a0, sipType_QPointF, &a1, &a1State, sipType_QPointF, &a2, &a2State, sipType_Qt_MouseButton, &a3, sipType_Qt_MouseButtons, &a4, &a4State, sipType_Qt_KeyboardModifiers, &a5, &a5State))
        {
            sipCpp = new sipQMouseEvent(a0,*a1,*a2,a3,*a4,*a5);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);
            sipReleaseType(const_cast< ::QPointF *>(a2),sipType_QPointF,a2State);
            sipReleaseType(a4,sipType_Qt_MouseButtons,a4State);
            sipReleaseType(a5,sipType_Qt_KeyboardModifiers,a5State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QEvent::Type a0;
        const  ::QPointF* a1;
        int a1State = 0;
        const  ::QPointF* a2;
        int a2State = 0;
        const  ::QPointF* a3;
        int a3State = 0;
         ::Qt::MouseButton a4;
         ::Qt::MouseButtons* a5;
        int a5State = 0;
         ::Qt::KeyboardModifiers* a6;
        int a6State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "EJ1J1J1EJ1J1", sipType_QEvent_Type, &a0, sipType_QPointF, &a1, &a1State, sipType_QPointF, &a2, &a2State, sipType_QPointF, &a3, &a3State, sipType_Qt_MouseButton, &a4, sipType_Qt_MouseButtons, &a5, &a5State, sipType_Qt_KeyboardModifiers, &a6, &a6State))
        {
            sipCpp = new sipQMouseEvent(a0,*a1,*a2,*a3,a4,*a5,*a6);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);
            sipReleaseType(const_cast< ::QPointF *>(a2),sipType_QPointF,a2State);
            sipReleaseType(const_cast< ::QPointF *>(a3),sipType_QPointF,a3State);
            sipReleaseType(a5,sipType_Qt_MouseButtons,a5State);
            sipReleaseType(a6,sipType_Qt_KeyboardModifiers,a6State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QEvent::Type a0;
        const  ::QPointF* a1;
        int a1State = 0;
        const  ::QPointF* a2;
        int a2State = 0;
        const  ::QPointF* a3;
        int a3State = 0;
         ::Qt::MouseButton a4;
         ::Qt::MouseButtons* a5;
        int a5State = 0;
         ::Qt::KeyboardModifiers* a6;
        int a6State = 0;
         ::Qt::MouseEventSource a7;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "EJ1J1J1EJ1J1E", sipType_QEvent_Type, &a0, sipType_QPointF, &a1, &a1State, sipType_QPointF, &a2, &a2State, sipType_QPointF, &a3, &a3State, sipType_Qt_MouseButton, &a4, sipType_Qt_MouseButtons, &a5, &a5State, sipType_Qt_KeyboardModifiers, &a6, &a6State, sipType_Qt_MouseEventSource, &a7))
        {
            sipCpp = new sipQMouseEvent(a0,*a1,*a2,*a3,a4,*a5,*a6,a7);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);
            sipReleaseType(const_cast< ::QPointF *>(a2),sipType_QPointF,a2State);
            sipReleaseType(const_cast< ::QPointF *>(a3),sipType_QPointF,a3State);
            sipReleaseType(a5,sipType_Qt_MouseButtons,a5State);
            sipReleaseType(a6,sipType_Qt_KeyboardModifiers,a6State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QMouseEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QMouseEvent, &a0))
        {
            sipCpp = new sipQMouseEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QMouseEvent[] = {{77, 255, 1}};


static PyMethodDef methods_QMouseEvent[] = {
    {SIP_MLNAME_CAST(sipName_button), meth_QMouseEvent_button, METH_VARARGS, SIP_MLDOC_CAST(doc_QMouseEvent_button)},
    {SIP_MLNAME_CAST(sipName_buttons), meth_QMouseEvent_buttons, METH_VARARGS, SIP_MLDOC_CAST(doc_QMouseEvent_buttons)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QMouseEvent_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QMouseEvent_flags)},
    {SIP_MLNAME_CAST(sipName_globalPos), meth_QMouseEvent_globalPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QMouseEvent_globalPos)},
    {SIP_MLNAME_CAST(sipName_globalX), meth_QMouseEvent_globalX, METH_VARARGS, SIP_MLDOC_CAST(doc_QMouseEvent_globalX)},
    {SIP_MLNAME_CAST(sipName_globalY), meth_QMouseEvent_globalY, METH_VARARGS, SIP_MLDOC_CAST(doc_QMouseEvent_globalY)},
    {SIP_MLNAME_CAST(sipName_localPos), meth_QMouseEvent_localPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QMouseEvent_localPos)},
    {SIP_MLNAME_CAST(sipName_pos), meth_QMouseEvent_pos, METH_VARARGS, SIP_MLDOC_CAST(doc_QMouseEvent_pos)},
    {SIP_MLNAME_CAST(sipName_screenPos), meth_QMouseEvent_screenPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QMouseEvent_screenPos)},
    {SIP_MLNAME_CAST(sipName_source), meth_QMouseEvent_source, METH_VARARGS, SIP_MLDOC_CAST(doc_QMouseEvent_source)},
    {SIP_MLNAME_CAST(sipName_windowPos), meth_QMouseEvent_windowPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QMouseEvent_windowPos)},
    {SIP_MLNAME_CAST(sipName_x), meth_QMouseEvent_x, METH_VARARGS, SIP_MLDOC_CAST(doc_QMouseEvent_x)},
    {SIP_MLNAME_CAST(sipName_y), meth_QMouseEvent_y, METH_VARARGS, SIP_MLDOC_CAST(doc_QMouseEvent_y)}
};

PyDoc_STRVAR(doc_QMouseEvent, "\1QMouseEvent(QEvent.Type, Union[QPointF, QPoint], Qt.MouseButton, Union[Qt.MouseButtons, Qt.MouseButton], Union[Qt.KeyboardModifiers, Qt.KeyboardModifier])\n"
"QMouseEvent(QEvent.Type, Union[QPointF, QPoint], Union[QPointF, QPoint], Qt.MouseButton, Union[Qt.MouseButtons, Qt.MouseButton], Union[Qt.KeyboardModifiers, Qt.KeyboardModifier])\n"
"QMouseEvent(QEvent.Type, Union[QPointF, QPoint], Union[QPointF, QPoint], Union[QPointF, QPoint], Qt.MouseButton, Union[Qt.MouseButtons, Qt.MouseButton], Union[Qt.KeyboardModifiers, Qt.KeyboardModifier])\n"
"QMouseEvent(QEvent.Type, Union[QPointF, QPoint], Union[QPointF, QPoint], Union[QPointF, QPoint], Qt.MouseButton, Union[Qt.MouseButtons, Qt.MouseButton], Union[Qt.KeyboardModifiers, Qt.KeyboardModifier], Qt.MouseEventSource)\n"
"QMouseEvent(QMouseEvent)");


static pyqt5ClassPluginDef plugin_QMouseEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QMouseEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMouseEvent,
        {SIP_NULLPTR},
        &plugin_QMouseEvent
    },
    {
        sipNameNr_QMouseEvent,
        {0, 0, 1},
        13, methods_QMouseEvent,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QMouseEvent,
    -1,
    -1,
    supers_QMouseEvent,
    SIP_NULLPTR,
    init_type_QMouseEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QMouseEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QMouseEvent,
    cast_QMouseEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 75054 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75058 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 75061 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QInputEvent_modifiers, "modifiers(self) -> Qt.KeyboardModifiers");

extern "C" {static PyObject *meth_QInputEvent_modifiers(PyObject *, PyObject *);}
static PyObject *meth_QInputEvent_modifiers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QInputEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputEvent, &sipCpp))
        {
             ::Qt::KeyboardModifiers*sipRes;

            sipRes = new  ::Qt::KeyboardModifiers(sipCpp->modifiers());

            return sipConvertFromNewType(sipRes,sipType_Qt_KeyboardModifiers,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputEvent, sipName_modifiers, doc_QInputEvent_modifiers);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QInputEvent_timestamp, "timestamp(self) -> int");

extern "C" {static PyObject *meth_QInputEvent_timestamp(PyObject *, PyObject *);}
static PyObject *meth_QInputEvent_timestamp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QInputEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputEvent, &sipCpp))
        {
             ::ulong sipRes;

            sipRes = sipCpp->timestamp();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputEvent, sipName_timestamp, doc_QInputEvent_timestamp);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QInputEvent_setTimestamp, "setTimestamp(self, int)");

extern "C" {static PyObject *meth_QInputEvent_setTimestamp(PyObject *, PyObject *);}
static PyObject *meth_QInputEvent_setTimestamp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::ulong a0;
         ::QInputEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bm", &sipSelf, sipType_QInputEvent, &sipCpp, &a0))
        {
            sipCpp->setTimestamp(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputEvent, sipName_setTimestamp, doc_QInputEvent_setTimestamp);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QInputEvent(void *, const sipTypeDef *);}
static void *cast_QInputEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QInputEvent *sipCpp = reinterpret_cast< ::QInputEvent *>(sipCppV);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QInputEvent(void *, int);}
static void release_QInputEvent(void *sipCppV, int)
{
    delete reinterpret_cast< ::QInputEvent *>(sipCppV);
}


extern "C" {static void dealloc_QInputEvent(sipSimpleWrapper *);}
static void dealloc_QInputEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QInputEvent(sipGetAddress(sipSelf), 0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QInputEvent[] = {{6, 0, 1}};


static PyMethodDef methods_QInputEvent[] = {
    {SIP_MLNAME_CAST(sipName_modifiers), meth_QInputEvent_modifiers, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputEvent_modifiers)},
    {SIP_MLNAME_CAST(sipName_setTimestamp), meth_QInputEvent_setTimestamp, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputEvent_setTimestamp)},
    {SIP_MLNAME_CAST(sipName_timestamp), meth_QInputEvent_timestamp, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputEvent_timestamp)}
};


static pyqt5ClassPluginDef plugin_QInputEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QInputEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QInputEvent,
        {SIP_NULLPTR},
        &plugin_QInputEvent
    },
    {
        sipNameNr_QInputEvent,
        {0, 0, 1},
        3, methods_QInputEvent,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_QInputEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QInputEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QInputEvent,
    cast_QInputEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qdrag.sip"
#include <qdrag.h>
#line 75249 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 75253 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75256 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75259 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 75262 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 75265 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 75268 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 75271 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 75274 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 75277 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 75280 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 75283 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 75286 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 75289 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 75292 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 75295 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 75298 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75301 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 75304 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 75307 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 75310 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQDrag : public  ::QDrag
{
public:
    sipQDrag( ::QObject*);
    virtual ~sipQDrag();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQDrag(const sipQDrag &);
    sipQDrag &operator = (const sipQDrag &);

    char sipPyMethods[7];
};

sipQDrag::sipQDrag( ::QObject*a0):  ::QDrag(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDrag::~sipQDrag()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQDrag::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QDrag);

    return  ::QDrag::metaObject();
}

int sipQDrag::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QDrag::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QDrag,_c,_id,_a);

    return _id;
}

void *sipQDrag::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QDrag, _clname, &sipCpp) ? sipCpp :  ::QDrag::qt_metacast(_clname));
}

bool sipQDrag::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QDrag::event(a0);

    extern bool sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_5(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQDrag::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QDrag::eventFilter(a0,a1);

    extern bool sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_4(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQDrag::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QDrag::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_3(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDrag::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QDrag::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_2(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDrag::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QDrag::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_1(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDrag::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QDrag::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDrag::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QDrag::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QDrag_exec_, "exec_(self, supportedActions: Union[Qt.DropActions, Qt.DropAction] = Qt.MoveAction) -> Qt.DropAction\n"
"exec_(self, Union[Qt.DropActions, Qt.DropAction], Qt.DropAction) -> Qt.DropAction");

extern "C" {static PyObject *meth_QDrag_exec_(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDrag_exec_(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::DropActions a0def = Qt::MoveAction;
         ::Qt::DropActions* a0 = &a0def;
        int a0State = 0;
         ::QDrag *sipCpp;

        static const char *sipKwdList[] = {
            sipName_supportedActions,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QDrag, &sipCpp, sipType_Qt_DropActions, &a0, &a0State))
        {
             ::Qt::DropAction sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->exec(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_Qt_DropActions,a0State);

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_DropAction);
        }
    }

    {
         ::Qt::DropActions* a0;
        int a0State = 0;
         ::Qt::DropAction a1;
         ::QDrag *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ1E", &sipSelf, sipType_QDrag, &sipCpp, sipType_Qt_DropActions, &a0, &a0State, sipType_Qt_DropAction, &a1))
        {
             ::Qt::DropAction sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->exec(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_Qt_DropActions,a0State);

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_DropAction);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDrag, sipName_exec_, doc_QDrag_exec_);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDrag_exec, "exec(self, supportedActions: Union[Qt.DropActions, Qt.DropAction] = Qt.MoveAction) -> Qt.DropAction\n"
"exec(self, Union[Qt.DropActions, Qt.DropAction], Qt.DropAction) -> Qt.DropAction");

extern "C" {static PyObject *meth_QDrag_exec(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDrag_exec(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::DropActions a0def = Qt::MoveAction;
         ::Qt::DropActions* a0 = &a0def;
        int a0State = 0;
         ::QDrag *sipCpp;

        static const char *sipKwdList[] = {
            sipName_supportedActions,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QDrag, &sipCpp, sipType_Qt_DropActions, &a0, &a0State))
        {
             ::Qt::DropAction sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->exec(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_Qt_DropActions,a0State);

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_DropAction);
        }
    }

    {
         ::Qt::DropActions* a0;
        int a0State = 0;
         ::Qt::DropAction a1;
         ::QDrag *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ1E", &sipSelf, sipType_QDrag, &sipCpp, sipType_Qt_DropActions, &a0, &a0State, sipType_Qt_DropAction, &a1))
        {
             ::Qt::DropAction sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->exec(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_Qt_DropActions,a0State);

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_DropAction);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDrag, sipName_exec, doc_QDrag_exec);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDrag_setMimeData, "setMimeData(self, QMimeData)");

extern "C" {static PyObject *meth_QDrag_setMimeData(PyObject *, PyObject *);}
static PyObject *meth_QDrag_setMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMimeData* a0;
         ::QDrag *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QDrag, &sipCpp, sipType_QMimeData, &a0))
        {
            sipCpp->setMimeData(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDrag, sipName_setMimeData, doc_QDrag_setMimeData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDrag_mimeData, "mimeData(self) -> QMimeData");

extern "C" {static PyObject *meth_QDrag_mimeData(PyObject *, PyObject *);}
static PyObject *meth_QDrag_mimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDrag *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDrag, &sipCpp))
        {
             ::QMimeData*sipRes;

            sipRes = sipCpp->mimeData();

            return sipConvertFromType(sipRes,sipType_QMimeData,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDrag, sipName_mimeData, doc_QDrag_mimeData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDrag_setPixmap, "setPixmap(self, QPixmap)");

extern "C" {static PyObject *meth_QDrag_setPixmap(PyObject *, PyObject *);}
static PyObject *meth_QDrag_setPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixmap* a0;
         ::QDrag *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDrag, &sipCpp, sipType_QPixmap, &a0))
        {
            sipCpp->setPixmap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDrag, sipName_setPixmap, doc_QDrag_setPixmap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDrag_pixmap, "pixmap(self) -> QPixmap");

extern "C" {static PyObject *meth_QDrag_pixmap(PyObject *, PyObject *);}
static PyObject *meth_QDrag_pixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDrag *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDrag, &sipCpp))
        {
             ::QPixmap*sipRes;

            sipRes = new  ::QPixmap(sipCpp->pixmap());

            return sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDrag, sipName_pixmap, doc_QDrag_pixmap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDrag_setHotSpot, "setHotSpot(self, QPoint)");

extern "C" {static PyObject *meth_QDrag_setHotSpot(PyObject *, PyObject *);}
static PyObject *meth_QDrag_setHotSpot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
         ::QDrag *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDrag, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->setHotSpot(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDrag, sipName_setHotSpot, doc_QDrag_setHotSpot);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDrag_hotSpot, "hotSpot(self) -> QPoint");

extern "C" {static PyObject *meth_QDrag_hotSpot(PyObject *, PyObject *);}
static PyObject *meth_QDrag_hotSpot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDrag *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDrag, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->hotSpot());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDrag, sipName_hotSpot, doc_QDrag_hotSpot);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDrag_source, "source(self) -> QObject");

extern "C" {static PyObject *meth_QDrag_source(PyObject *, PyObject *);}
static PyObject *meth_QDrag_source(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDrag *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDrag, &sipCpp))
        {
             ::QObject*sipRes;

            sipRes = sipCpp->source();

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDrag, sipName_source, doc_QDrag_source);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDrag_target, "target(self) -> QObject");

extern "C" {static PyObject *meth_QDrag_target(PyObject *, PyObject *);}
static PyObject *meth_QDrag_target(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDrag *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDrag, &sipCpp))
        {
             ::QObject*sipRes;

            sipRes = sipCpp->target();

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDrag, sipName_target, doc_QDrag_target);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDrag_setDragCursor, "setDragCursor(self, QPixmap, Qt.DropAction)");

extern "C" {static PyObject *meth_QDrag_setDragCursor(PyObject *, PyObject *);}
static PyObject *meth_QDrag_setDragCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixmap* a0;
         ::Qt::DropAction a1;
         ::QDrag *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QDrag, &sipCpp, sipType_QPixmap, &a0, sipType_Qt_DropAction, &a1))
        {
            sipCpp->setDragCursor(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDrag, sipName_setDragCursor, doc_QDrag_setDragCursor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDrag_dragCursor, "dragCursor(self, Qt.DropAction) -> QPixmap");

extern "C" {static PyObject *meth_QDrag_dragCursor(PyObject *, PyObject *);}
static PyObject *meth_QDrag_dragCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::DropAction a0;
        const  ::QDrag *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QDrag, &sipCpp, sipType_Qt_DropAction, &a0))
        {
             ::QPixmap*sipRes;

            sipRes = new  ::QPixmap(sipCpp->dragCursor(a0));

            return sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDrag, sipName_dragCursor, doc_QDrag_dragCursor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDrag_supportedActions, "supportedActions(self) -> Qt.DropActions");

extern "C" {static PyObject *meth_QDrag_supportedActions(PyObject *, PyObject *);}
static PyObject *meth_QDrag_supportedActions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDrag *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDrag, &sipCpp))
        {
             ::Qt::DropActions*sipRes;

            sipRes = new  ::Qt::DropActions(sipCpp->supportedActions());

            return sipConvertFromNewType(sipRes,sipType_Qt_DropActions,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDrag, sipName_supportedActions, doc_QDrag_supportedActions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDrag_defaultAction, "defaultAction(self) -> Qt.DropAction");

extern "C" {static PyObject *meth_QDrag_defaultAction(PyObject *, PyObject *);}
static PyObject *meth_QDrag_defaultAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDrag *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDrag, &sipCpp))
        {
             ::Qt::DropAction sipRes;

            sipRes = sipCpp->defaultAction();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_DropAction);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDrag, sipName_defaultAction, doc_QDrag_defaultAction);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDrag_cancel, "cancel()");

extern "C" {static PyObject *meth_QDrag_cancel(PyObject *, PyObject *);}
static PyObject *meth_QDrag_cancel(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QDrag::cancel();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDrag, sipName_cancel, doc_QDrag_cancel);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QDrag(void *, const sipTypeDef *);}
static void *cast_QDrag(void *sipCppV, const sipTypeDef *targetType)
{
     ::QDrag *sipCpp = reinterpret_cast< ::QDrag *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDrag(void *, int);}
static void release_QDrag(void *sipCppV, int)
{
     ::QDrag *sipCpp = reinterpret_cast< ::QDrag *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QDrag(sipSimpleWrapper *);}
static void dealloc_QDrag(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQDrag *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDrag(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QDrag(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDrag(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQDrag *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQDrag(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDrag[] = {{25, 0, 1}};


static PyMethodDef methods_QDrag[] = {
    {SIP_MLNAME_CAST(sipName_cancel), meth_QDrag_cancel, METH_VARARGS, SIP_MLDOC_CAST(doc_QDrag_cancel)},
    {SIP_MLNAME_CAST(sipName_defaultAction), meth_QDrag_defaultAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QDrag_defaultAction)},
    {SIP_MLNAME_CAST(sipName_dragCursor), meth_QDrag_dragCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QDrag_dragCursor)},
    {SIP_MLNAME_CAST(sipName_exec), SIP_MLMETH_CAST(meth_QDrag_exec), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDrag_exec)},
    {SIP_MLNAME_CAST(sipName_exec_), SIP_MLMETH_CAST(meth_QDrag_exec_), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDrag_exec_)},
    {SIP_MLNAME_CAST(sipName_hotSpot), meth_QDrag_hotSpot, METH_VARARGS, SIP_MLDOC_CAST(doc_QDrag_hotSpot)},
    {SIP_MLNAME_CAST(sipName_mimeData), meth_QDrag_mimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QDrag_mimeData)},
    {SIP_MLNAME_CAST(sipName_pixmap), meth_QDrag_pixmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QDrag_pixmap)},
    {SIP_MLNAME_CAST(sipName_setDragCursor), meth_QDrag_setDragCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QDrag_setDragCursor)},
    {SIP_MLNAME_CAST(sipName_setHotSpot), meth_QDrag_setHotSpot, METH_VARARGS, SIP_MLDOC_CAST(doc_QDrag_setHotSpot)},
    {SIP_MLNAME_CAST(sipName_setMimeData), meth_QDrag_setMimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QDrag_setMimeData)},
    {SIP_MLNAME_CAST(sipName_setPixmap), meth_QDrag_setPixmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QDrag_setPixmap)},
    {SIP_MLNAME_CAST(sipName_source), meth_QDrag_source, METH_VARARGS, SIP_MLDOC_CAST(doc_QDrag_source)},
    {SIP_MLNAME_CAST(sipName_supportedActions), meth_QDrag_supportedActions, METH_VARARGS, SIP_MLDOC_CAST(doc_QDrag_supportedActions)},
    {SIP_MLNAME_CAST(sipName_target), meth_QDrag_target, METH_VARARGS, SIP_MLDOC_CAST(doc_QDrag_target)}
};

PyDoc_STRVAR(doc_QDrag, "\1QDrag(QObject)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QDrag[] = {
    {"targetChanged(QObject*)", "\1targetChanged(self, QObject)", SIP_NULLPTR, SIP_NULLPTR},
    {"actionChanged(Qt::DropAction)", "\1actionChanged(self, Qt.DropAction)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QDrag = {
    & ::QDrag::staticMetaObject,
    0,
    signals_QDrag,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QDrag = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QDrag,
        {SIP_NULLPTR},
        &plugin_QDrag
    },
    {
        sipNameNr_QDrag,
        {0, 0, 1},
        15, methods_QDrag,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QDrag,
    -1,
    -1,
    supers_QDrag,
    SIP_NULLPTR,
    init_type_QDrag,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QDrag,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QDrag,
    cast_QDrag,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qdesktopservices.sip"
#include <qdesktopservices.h>
#line 76137 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 76141 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 76144 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 76147 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QDesktopServices_openUrl, "openUrl(QUrl) -> bool");

extern "C" {static PyObject *meth_QDesktopServices_openUrl(PyObject *, PyObject *);}
static PyObject *meth_QDesktopServices_openUrl(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QUrl, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QDesktopServices::openUrl(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesktopServices, sipName_openUrl, doc_QDesktopServices_openUrl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDesktopServices_setUrlHandler, "setUrlHandler(str, QObject, str)\n"
"setUrlHandler(str, Callable[[QUrl], None])");

extern "C" {static PyObject *meth_QDesktopServices_setUrlHandler(PyObject *, PyObject *);}
static PyObject *meth_QDesktopServices_setUrlHandler(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QObject* a1;
        const char* a2;
        PyObject *a2Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J8AA", sipType_QString,&a0, &a0State, sipType_QObject, &a1, &a2Keep, &a2))
        {
             ::QDesktopServices::setUrlHandler(*a0,a1,a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            Py_DECREF(a2Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        PyObject * a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1F", sipType_QString,&a0, &a0State, &a1))
        {
#line 34 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qdesktopservices.sip"
        // Allow a callable that must be a slot of a QObject, although we never tell
        // the user if it isn't.
        sipMethodDef pm;
        
        if (sipGetMethod(a1, &pm))
        {
            int iserr = 0;
            QObject *receiver = reinterpret_cast<QObject *>(sipForceConvertToType(
                    pm.pm_self, sipType_QObject, NULL, SIP_NOT_NONE, NULL, &iserr));
        
            if (!iserr)
            {
                PyObject *f_name_obj = PyObject_GetAttrString(pm.pm_function, "__name__");
        
                if (f_name_obj)
                {
                    // We only want a borrowed reference.
                    Py_DECREF(f_name_obj);
        
                    const char *f_name = sipString_AsASCIIString(&f_name_obj);
        
                    if (f_name)
                    {
                        QDesktopServices::setUrlHandler(*a0, receiver, f_name);
        
                        Py_DECREF(f_name_obj);
                    }
                }
            }
        }
#line 76246 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesktopServices, sipName_setUrlHandler, doc_QDesktopServices_setUrlHandler);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDesktopServices_unsetUrlHandler, "unsetUrlHandler(str)");

extern "C" {static PyObject *meth_QDesktopServices_unsetUrlHandler(PyObject *, PyObject *);}
static PyObject *meth_QDesktopServices_unsetUrlHandler(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QDesktopServices::unsetUrlHandler(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesktopServices, sipName_unsetUrlHandler, doc_QDesktopServices_unsetUrlHandler);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDesktopServices(void *, int);}
static void release_QDesktopServices(void *sipCppV, int)
{
    delete reinterpret_cast< ::QDesktopServices *>(sipCppV);
}


extern "C" {static void assign_QDesktopServices(void *, SIP_SSIZE_T, void *);}
static void assign_QDesktopServices(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QDesktopServices *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QDesktopServices *>(sipSrc);
}


extern "C" {static void *array_QDesktopServices(SIP_SSIZE_T);}
static void *array_QDesktopServices(SIP_SSIZE_T sipNrElem)
{
    return new  ::QDesktopServices[sipNrElem];
}


extern "C" {static void *copy_QDesktopServices(const void *, SIP_SSIZE_T);}
static void *copy_QDesktopServices(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QDesktopServices(reinterpret_cast<const  ::QDesktopServices *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QDesktopServices(sipSimpleWrapper *);}
static void dealloc_QDesktopServices(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDesktopServices(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QDesktopServices(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDesktopServices(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QDesktopServices *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QDesktopServices();

            return sipCpp;
        }
    }

    {
        const  ::QDesktopServices* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QDesktopServices, &a0))
        {
            sipCpp = new  ::QDesktopServices(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QDesktopServices[] = {
    {SIP_MLNAME_CAST(sipName_openUrl), meth_QDesktopServices_openUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesktopServices_openUrl)},
    {SIP_MLNAME_CAST(sipName_setUrlHandler), meth_QDesktopServices_setUrlHandler, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesktopServices_setUrlHandler)},
    {SIP_MLNAME_CAST(sipName_unsetUrlHandler), meth_QDesktopServices_unsetUrlHandler, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesktopServices_unsetUrlHandler)}
};

PyDoc_STRVAR(doc_QDesktopServices, "\1QDesktopServices()\n"
"QDesktopServices(QDesktopServices)");


static pyqt5ClassPluginDef plugin_QDesktopServices = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QDesktopServices = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QDesktopServices,
        {SIP_NULLPTR},
        &plugin_QDesktopServices
    },
    {
        sipNameNr_QDesktopServices,
        {0, 0, 1},
        3, methods_QDesktopServices,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QDesktopServices,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QDesktopServices,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QDesktopServices,
    assign_QDesktopServices,
    array_QDesktopServices,
    copy_QDesktopServices,
    release_QDesktopServices,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 76429 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 76433 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 76436 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 76439 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 76442 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 76445 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QCursor_shape, "shape(self) -> Qt.CursorShape");

extern "C" {static PyObject *meth_QCursor_shape(PyObject *, PyObject *);}
static PyObject *meth_QCursor_shape(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCursor, &sipCpp))
        {
             ::Qt::CursorShape sipRes;

            sipRes = sipCpp->shape();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_CursorShape);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCursor, sipName_shape, doc_QCursor_shape);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCursor_setShape, "setShape(self, Qt.CursorShape)");

extern "C" {static PyObject *meth_QCursor_setShape(PyObject *, PyObject *);}
static PyObject *meth_QCursor_setShape(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::CursorShape a0;
         ::QCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCursor, &sipCpp, sipType_Qt_CursorShape, &a0))
        {
            sipCpp->setShape(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCursor, sipName_setShape, doc_QCursor_setShape);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCursor_bitmap, "bitmap(self) -> QBitmap");

extern "C" {static PyObject *meth_QCursor_bitmap(PyObject *, PyObject *);}
static PyObject *meth_QCursor_bitmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCursor, &sipCpp))
        {
            const  ::QBitmap*sipRes;

            sipRes = sipCpp->bitmap();

            return sipConvertFromType(const_cast< ::QBitmap *>(sipRes),sipType_QBitmap,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCursor, sipName_bitmap, doc_QCursor_bitmap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCursor_mask, "mask(self) -> QBitmap");

extern "C" {static PyObject *meth_QCursor_mask(PyObject *, PyObject *);}
static PyObject *meth_QCursor_mask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCursor, &sipCpp))
        {
            const  ::QBitmap*sipRes;

            sipRes = sipCpp->mask();

            return sipConvertFromType(const_cast< ::QBitmap *>(sipRes),sipType_QBitmap,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCursor, sipName_mask, doc_QCursor_mask);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCursor_pixmap, "pixmap(self) -> QPixmap");

extern "C" {static PyObject *meth_QCursor_pixmap(PyObject *, PyObject *);}
static PyObject *meth_QCursor_pixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCursor, &sipCpp))
        {
             ::QPixmap*sipRes;

            sipRes = new  ::QPixmap(sipCpp->pixmap());

            return sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCursor, sipName_pixmap, doc_QCursor_pixmap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCursor_hotSpot, "hotSpot(self) -> QPoint");

extern "C" {static PyObject *meth_QCursor_hotSpot(PyObject *, PyObject *);}
static PyObject *meth_QCursor_hotSpot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCursor, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->hotSpot());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCursor, sipName_hotSpot, doc_QCursor_hotSpot);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCursor_pos, "pos() -> QPoint");

extern "C" {static PyObject *meth_QCursor_pos(PyObject *, PyObject *);}
static PyObject *meth_QCursor_pos(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint( ::QCursor::pos());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCursor, sipName_pos, doc_QCursor_pos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCursor_setPos, "setPos(int, int)\n"
"setPos(QPoint)");

extern "C" {static PyObject *meth_QCursor_setPos(PyObject *, PyObject *);}
static PyObject *meth_QCursor_setPos(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "ii", &a0, &a1))
        {
             ::QCursor::setPos(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPoint* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QPoint, &a0))
        {
             ::QCursor::setPos(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCursor, sipName_setPos, doc_QCursor_setPos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCursor_swap, "swap(self, Union[QCursor, Qt.CursorShape])");

extern "C" {static PyObject *meth_QCursor_swap(PyObject *, PyObject *);}
static PyObject *meth_QCursor_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCursor* a0;
        int a0State = 0;
         ::QCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCursor, &sipCpp, sipType_QCursor, &a0, &a0State))
        {
            sipCpp->swap(*a0);
            sipReleaseType(a0,sipType_QCursor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCursor, sipName_swap, doc_QCursor_swap);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QCursor___eq__(PyObject *,PyObject *);}
static PyObject *slot_QCursor___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QCursor *sipCpp = reinterpret_cast< ::QCursor *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QCursor));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCursor* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QCursor, &a0, &a0State))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);
            sipReleaseType(const_cast< ::QCursor *>(a0),sipType_QCursor,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QCursor, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QCursor___ne__(PyObject *,PyObject *);}
static PyObject *slot_QCursor___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QCursor *sipCpp = reinterpret_cast< ::QCursor *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QCursor));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCursor* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QCursor, &a0, &a0State))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);
            sipReleaseType(const_cast< ::QCursor *>(a0),sipType_QCursor,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QCursor, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QCursor(void *, int);}
static void release_QCursor(void *sipCppV, int)
{
    delete reinterpret_cast< ::QCursor *>(sipCppV);
}


extern "C" {static void assign_QCursor(void *, SIP_SSIZE_T, void *);}
static void assign_QCursor(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QCursor *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QCursor *>(sipSrc);
}


extern "C" {static void *array_QCursor(SIP_SSIZE_T);}
static void *array_QCursor(SIP_SSIZE_T sipNrElem)
{
    return new  ::QCursor[sipNrElem];
}


extern "C" {static void *copy_QCursor(const void *, SIP_SSIZE_T);}
static void *copy_QCursor(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QCursor(reinterpret_cast<const  ::QCursor *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QCursor(sipSimpleWrapper *);}
static void dealloc_QCursor(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QCursor(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QCursor(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QCursor(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QCursor *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QCursor();

            return sipCpp;
        }
    }

    {
        const  ::QBitmap* a0;
        const  ::QBitmap* a1;
        int a2 = -1;
        int a3 = -1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_hotX,
            sipName_hotY,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9J9|ii", sipType_QBitmap, &a0, sipType_QBitmap, &a1, &a2, &a3))
        {
            sipCpp = new  ::QCursor(*a0,*a1,a2,a3);

            return sipCpp;
        }
    }

    {
        const  ::QPixmap* a0;
        int a1 = -1;
        int a2 = -1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_hotX,
            sipName_hotY,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|ii", sipType_QPixmap, &a0, &a1, &a2))
        {
            sipCpp = new  ::QCursor(*a0,a1,a2);

            return sipCpp;
        }
    }

    {
        const  ::QCursor* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QCursor, &a0, &a0State))
        {
            sipCpp = new  ::QCursor(*a0);
            sipReleaseType(const_cast< ::QCursor *>(a0),sipType_QCursor,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QVariant* a0;
        PyObject *a0Wrapper;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "@J1", &a0Wrapper, sipType_QVariant, &a0, &a0State))
        {
            sipErrorState sipError = sipErrorNone;

#line 56 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qcursor.sip"
        if (a0->canConvert<QCursor>())
            sipCpp = new QCursor(a0->value<QCursor>());
        else
            sipError = sipBadCallableArg(0, a0Wrapper);
#line 76902 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            if (sipError == sipErrorNone)
                return sipCpp;

            if (sipUnused)
            {
                Py_XDECREF(*sipUnused);
            }

            sipAddException(sipError, sipParseErr);

            if (sipError == sipErrorFail)
                return SIP_NULLPTR;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QCursor(PyObject *, void **, int *, PyObject *);}
static int convertTo_QCursor(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QCursor **sipCppPtr = reinterpret_cast< ::QCursor **>(sipCppPtrV);

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qcursor.sip"
// SIP doesn't support automatic type convertors so we explicitly allow a
// Qt::CursorShape to be used whenever a QCursor is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_CursorShape)) ||
            sipCanConvertToType(sipPy, sipType_QCursor, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_CursorShape)))
{
    *sipCppPtr = new QCursor((Qt::CursorShape)SIPLong_AsLong(sipPy));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QCursor *>(sipConvertToType(sipPy, sipType_QCursor, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 76947 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QCursor[] = {
    {(void *)slot_QCursor___eq__, eq_slot},
    {(void *)slot_QCursor___ne__, ne_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QCursor[] = {
    {SIP_MLNAME_CAST(sipName_bitmap), meth_QCursor_bitmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QCursor_bitmap)},
    {SIP_MLNAME_CAST(sipName_hotSpot), meth_QCursor_hotSpot, METH_VARARGS, SIP_MLDOC_CAST(doc_QCursor_hotSpot)},
    {SIP_MLNAME_CAST(sipName_mask), meth_QCursor_mask, METH_VARARGS, SIP_MLDOC_CAST(doc_QCursor_mask)},
    {SIP_MLNAME_CAST(sipName_pixmap), meth_QCursor_pixmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QCursor_pixmap)},
    {SIP_MLNAME_CAST(sipName_pos), meth_QCursor_pos, METH_VARARGS, SIP_MLDOC_CAST(doc_QCursor_pos)},
    {SIP_MLNAME_CAST(sipName_setPos), meth_QCursor_setPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QCursor_setPos)},
    {SIP_MLNAME_CAST(sipName_setShape), meth_QCursor_setShape, METH_VARARGS, SIP_MLDOC_CAST(doc_QCursor_setShape)},
    {SIP_MLNAME_CAST(sipName_shape), meth_QCursor_shape, METH_VARARGS, SIP_MLDOC_CAST(doc_QCursor_shape)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QCursor_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QCursor_swap)}
};

PyDoc_STRVAR(doc_QCursor, "\1QCursor()\n"
"QCursor(QBitmap, QBitmap, hotX: int = -1, hotY: int = -1)\n"
"QCursor(QPixmap, hotX: int = -1, hotY: int = -1)\n"
"QCursor(Union[QCursor, Qt.CursorShape])\n"
"QCursor(Any)");


static pyqt5ClassPluginDef plugin_QCursor = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QCursor = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QCursor,
        {SIP_NULLPTR},
        &plugin_QCursor
    },
    {
        sipNameNr_QCursor,
        {0, 0, 1},
        9, methods_QCursor,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QCursor,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QCursor,
    init_type_QCursor,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QCursor,
    assign_QCursor,
    array_QCursor,
    copy_QCursor,
    release_QCursor,
    SIP_NULLPTR,
    convertTo_QCursor,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qclipboard.sip"
#include <qclipboard.h>
#line 77042 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 77046 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 77049 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qimage.sip"
#include <qimage.h>
#line 77052 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 77055 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 77058 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 77061 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 77064 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 77067 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 77070 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 77073 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 77076 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 77079 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 77082 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 77085 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 77088 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 77091 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 77094 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 77097 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 77100 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QClipboard_clear, "clear(self, mode: QClipboard.Mode = QClipboard.Clipboard)");

extern "C" {static PyObject *meth_QClipboard_clear(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QClipboard_clear(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QClipboard::Mode a0 = QClipboard::Clipboard;
         ::QClipboard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|E", &sipSelf, sipType_QClipboard, &sipCpp, sipType_QClipboard_Mode, &a0))
        {
            sipCpp->clear(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_clear, doc_QClipboard_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QClipboard_supportsFindBuffer, "supportsFindBuffer(self) -> bool");

extern "C" {static PyObject *meth_QClipboard_supportsFindBuffer(PyObject *, PyObject *);}
static PyObject *meth_QClipboard_supportsFindBuffer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QClipboard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QClipboard, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->supportsFindBuffer();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_supportsFindBuffer, doc_QClipboard_supportsFindBuffer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QClipboard_supportsSelection, "supportsSelection(self) -> bool");

extern "C" {static PyObject *meth_QClipboard_supportsSelection(PyObject *, PyObject *);}
static PyObject *meth_QClipboard_supportsSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QClipboard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QClipboard, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->supportsSelection();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_supportsSelection, doc_QClipboard_supportsSelection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QClipboard_ownsClipboard, "ownsClipboard(self) -> bool");

extern "C" {static PyObject *meth_QClipboard_ownsClipboard(PyObject *, PyObject *);}
static PyObject *meth_QClipboard_ownsClipboard(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QClipboard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QClipboard, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->ownsClipboard();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_ownsClipboard, doc_QClipboard_ownsClipboard);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QClipboard_ownsFindBuffer, "ownsFindBuffer(self) -> bool");

extern "C" {static PyObject *meth_QClipboard_ownsFindBuffer(PyObject *, PyObject *);}
static PyObject *meth_QClipboard_ownsFindBuffer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QClipboard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QClipboard, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->ownsFindBuffer();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_ownsFindBuffer, doc_QClipboard_ownsFindBuffer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QClipboard_ownsSelection, "ownsSelection(self) -> bool");

extern "C" {static PyObject *meth_QClipboard_ownsSelection(PyObject *, PyObject *);}
static PyObject *meth_QClipboard_ownsSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QClipboard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QClipboard, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->ownsSelection();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_ownsSelection, doc_QClipboard_ownsSelection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QClipboard_text, "text(self, mode: QClipboard.Mode = QClipboard.Clipboard) -> str\n"
"text(self, str, mode: QClipboard.Mode = QClipboard.Clipboard) -> Tuple[str, str]");

extern "C" {static PyObject *meth_QClipboard_text(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QClipboard_text(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QClipboard::Mode a0 = QClipboard::Clipboard;
        const  ::QClipboard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|E", &sipSelf, sipType_QClipboard, &sipCpp, sipType_QClipboard_Mode, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->text(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QClipboard::Mode a1 = QClipboard::Clipboard;
        const  ::QClipboard *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QClipboard, &sipCpp, sipType_QString,&a0, &a0State, sipType_QClipboard_Mode, &a1))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 49 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qclipboard.sip"
        QString *text;
        QString *subtype = new QString(*a0);
        
        Py_BEGIN_ALLOW_THREADS
        text = new QString(sipCpp->text(*subtype, a1));
        Py_END_ALLOW_THREADS
        
        PyObject *text_obj = sipConvertFromNewType(text, sipType_QString, NULL);
        PyObject *subtype_obj = sipConvertFromNewType(subtype, sipType_QString, NULL);
        
        if (text_obj && subtype_obj)
            sipRes = PyTuple_Pack(2, text_obj, subtype_obj);
        
        Py_XDECREF(text_obj);
        Py_XDECREF(subtype_obj);
#line 77334 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_text, doc_QClipboard_text);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QClipboard_setText, "setText(self, str, mode: QClipboard.Mode = QClipboard.Clipboard)");

extern "C" {static PyObject *meth_QClipboard_setText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QClipboard_setText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QClipboard::Mode a1 = QClipboard::Clipboard;
         ::QClipboard *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QClipboard, &sipCpp, sipType_QString,&a0, &a0State, sipType_QClipboard_Mode, &a1))
        {
            sipCpp->setText(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_setText, doc_QClipboard_setText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QClipboard_mimeData, "mimeData(self, mode: QClipboard.Mode = QClipboard.Clipboard) -> QMimeData");

extern "C" {static PyObject *meth_QClipboard_mimeData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QClipboard_mimeData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QClipboard::Mode a0 = QClipboard::Clipboard;
        const  ::QClipboard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|E", &sipSelf, sipType_QClipboard, &sipCpp, sipType_QClipboard_Mode, &a0))
        {
            const  ::QMimeData*sipRes;

            sipRes = sipCpp->mimeData(a0);

            return sipConvertFromType(const_cast< ::QMimeData *>(sipRes),sipType_QMimeData,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_mimeData, doc_QClipboard_mimeData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QClipboard_setMimeData, "setMimeData(self, QMimeData, mode: QClipboard.Mode = QClipboard.Clipboard)");

extern "C" {static PyObject *meth_QClipboard_setMimeData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QClipboard_setMimeData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMimeData* a0;
        PyObject *a0Wrapper;
         ::QClipboard::Mode a1 = QClipboard::Clipboard;
         ::QClipboard *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B@J8|E", &sipSelf, sipType_QClipboard, &sipCpp, &a0Wrapper, sipType_QMimeData, &a0, sipType_QClipboard_Mode, &a1))
        {
#line 70 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qclipboard.sip"
        Py_BEGIN_ALLOW_THREADS
        sipCpp->setMimeData(a0, a1);
        Py_END_ALLOW_THREADS
        
        // Transfer ownership to C++ and make sure the Python object stays alive by
        // giving it a reference to itself.  The cycle will be broken by QMimeData's
        // virtual dtor.  The reason we don't do the obvious and just use /Transfer/ is
        // that the QClipboard Python object we would transfer ownership to is likely
        // to be garbage collected immediately afterwards.
        sipTransferTo(a0Wrapper, a0Wrapper);
#line 77449 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_setMimeData, doc_QClipboard_setMimeData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QClipboard_image, "image(self, mode: QClipboard.Mode = QClipboard.Clipboard) -> QImage");

extern "C" {static PyObject *meth_QClipboard_image(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QClipboard_image(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QClipboard::Mode a0 = QClipboard::Clipboard;
        const  ::QClipboard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|E", &sipSelf, sipType_QClipboard, &sipCpp, sipType_QClipboard_Mode, &a0))
        {
             ::QImage*sipRes;

            sipRes = new  ::QImage(sipCpp->image(a0));

            return sipConvertFromNewType(sipRes,sipType_QImage,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_image, doc_QClipboard_image);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QClipboard_pixmap, "pixmap(self, mode: QClipboard.Mode = QClipboard.Clipboard) -> QPixmap");

extern "C" {static PyObject *meth_QClipboard_pixmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QClipboard_pixmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QClipboard::Mode a0 = QClipboard::Clipboard;
        const  ::QClipboard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|E", &sipSelf, sipType_QClipboard, &sipCpp, sipType_QClipboard_Mode, &a0))
        {
             ::QPixmap*sipRes;

            sipRes = new  ::QPixmap(sipCpp->pixmap(a0));

            return sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_pixmap, doc_QClipboard_pixmap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QClipboard_setImage, "setImage(self, QImage, mode: QClipboard.Mode = QClipboard.Clipboard)");

extern "C" {static PyObject *meth_QClipboard_setImage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QClipboard_setImage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage* a0;
         ::QClipboard::Mode a1 = QClipboard::Clipboard;
         ::QClipboard *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|E", &sipSelf, sipType_QClipboard, &sipCpp, sipType_QImage, &a0, sipType_QClipboard_Mode, &a1))
        {
            sipCpp->setImage(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_setImage, doc_QClipboard_setImage);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QClipboard_setPixmap, "setPixmap(self, QPixmap, mode: QClipboard.Mode = QClipboard.Clipboard)");

extern "C" {static PyObject *meth_QClipboard_setPixmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QClipboard_setPixmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixmap* a0;
         ::QClipboard::Mode a1 = QClipboard::Clipboard;
         ::QClipboard *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|E", &sipSelf, sipType_QClipboard, &sipCpp, sipType_QPixmap, &a0, sipType_QClipboard_Mode, &a1))
        {
            sipCpp->setPixmap(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_setPixmap, doc_QClipboard_setPixmap);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QClipboard(void *, const sipTypeDef *);}
static void *cast_QClipboard(void *sipCppV, const sipTypeDef *targetType)
{
     ::QClipboard *sipCpp = reinterpret_cast< ::QClipboard *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QClipboard(void *, int);}
static void release_QClipboard(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QClipboard[] = {{25, 0, 1}};


static PyMethodDef methods_QClipboard[] = {
    {SIP_MLNAME_CAST(sipName_clear), SIP_MLMETH_CAST(meth_QClipboard_clear), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QClipboard_clear)},
    {SIP_MLNAME_CAST(sipName_image), SIP_MLMETH_CAST(meth_QClipboard_image), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QClipboard_image)},
    {SIP_MLNAME_CAST(sipName_mimeData), SIP_MLMETH_CAST(meth_QClipboard_mimeData), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QClipboard_mimeData)},
    {SIP_MLNAME_CAST(sipName_ownsClipboard), meth_QClipboard_ownsClipboard, METH_VARARGS, SIP_MLDOC_CAST(doc_QClipboard_ownsClipboard)},
    {SIP_MLNAME_CAST(sipName_ownsFindBuffer), meth_QClipboard_ownsFindBuffer, METH_VARARGS, SIP_MLDOC_CAST(doc_QClipboard_ownsFindBuffer)},
    {SIP_MLNAME_CAST(sipName_ownsSelection), meth_QClipboard_ownsSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QClipboard_ownsSelection)},
    {SIP_MLNAME_CAST(sipName_pixmap), SIP_MLMETH_CAST(meth_QClipboard_pixmap), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QClipboard_pixmap)},
    {SIP_MLNAME_CAST(sipName_setImage), SIP_MLMETH_CAST(meth_QClipboard_setImage), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QClipboard_setImage)},
    {SIP_MLNAME_CAST(sipName_setMimeData), SIP_MLMETH_CAST(meth_QClipboard_setMimeData), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QClipboard_setMimeData)},
    {SIP_MLNAME_CAST(sipName_setPixmap), SIP_MLMETH_CAST(meth_QClipboard_setPixmap), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QClipboard_setPixmap)},
    {SIP_MLNAME_CAST(sipName_setText), SIP_MLMETH_CAST(meth_QClipboard_setText), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QClipboard_setText)},
    {SIP_MLNAME_CAST(sipName_supportsFindBuffer), meth_QClipboard_supportsFindBuffer, METH_VARARGS, SIP_MLDOC_CAST(doc_QClipboard_supportsFindBuffer)},
    {SIP_MLNAME_CAST(sipName_supportsSelection), meth_QClipboard_supportsSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QClipboard_supportsSelection)},
    {SIP_MLNAME_CAST(sipName_text), SIP_MLMETH_CAST(meth_QClipboard_text), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QClipboard_text)}
};

static sipEnumMemberDef enummembers_QClipboard[] = {
    {sipName_Clipboard, static_cast<int>( ::QClipboard::Clipboard), 10},
    {sipName_FindBuffer, static_cast<int>( ::QClipboard::FindBuffer), 10},
    {sipName_Selection, static_cast<int>( ::QClipboard::Selection), 10},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QClipboard[] = {
    {"selectionChanged()", "\1selectionChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"findBufferChanged()", "\1findBufferChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"dataChanged()", "\1dataChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"changed(QClipboard::Mode)", "\1changed(self, QClipboard.Mode)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QClipboard = {
    & ::QClipboard::staticMetaObject,
    0,
    signals_QClipboard,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QClipboard = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QClipboard,
        {SIP_NULLPTR},
        &plugin_QClipboard
    },
    {
        sipNameNr_QClipboard,
        {0, 0, 1},
        14, methods_QClipboard,
        3, enummembers_QClipboard,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_QClipboard,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QClipboard,
    cast_QClipboard,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 392 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 77714 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 77718 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 123 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 77721 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 139 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#include <qpair.h>
#line 77725 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 77728 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QConicalGradient_center, "center(self) -> QPointF");

extern "C" {static PyObject *meth_QConicalGradient_center(PyObject *, PyObject *);}
static PyObject *meth_QConicalGradient_center(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QConicalGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QConicalGradient, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->center());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QConicalGradient, sipName_center, doc_QConicalGradient_center);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QConicalGradient_angle, "angle(self) -> float");

extern "C" {static PyObject *meth_QConicalGradient_angle(PyObject *, PyObject *);}
static PyObject *meth_QConicalGradient_angle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QConicalGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QConicalGradient, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->angle();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QConicalGradient, sipName_angle, doc_QConicalGradient_angle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QConicalGradient_setCenter, "setCenter(self, Union[QPointF, QPoint])\n"
"setCenter(self, float, float)");

extern "C" {static PyObject *meth_QConicalGradient_setCenter(PyObject *, PyObject *);}
static PyObject *meth_QConicalGradient_setCenter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::QConicalGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QConicalGradient, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->setCenter(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
         ::QConicalGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QConicalGradient, &sipCpp, &a0, &a1))
        {
            sipCpp->setCenter(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QConicalGradient, sipName_setCenter, doc_QConicalGradient_setCenter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QConicalGradient_setAngle, "setAngle(self, float)");

extern "C" {static PyObject *meth_QConicalGradient_setAngle(PyObject *, PyObject *);}
static PyObject *meth_QConicalGradient_setAngle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QConicalGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QConicalGradient, &sipCpp, &a0))
        {
            sipCpp->setAngle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QConicalGradient, sipName_setAngle, doc_QConicalGradient_setAngle);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QConicalGradient(void *, const sipTypeDef *);}
static void *cast_QConicalGradient(void *sipCppV, const sipTypeDef *targetType)
{
     ::QConicalGradient *sipCpp = reinterpret_cast< ::QConicalGradient *>(sipCppV);

    if (targetType == sipType_QGradient)
        return static_cast< ::QGradient *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QConicalGradient(void *, int);}
static void release_QConicalGradient(void *sipCppV, int)
{
    delete reinterpret_cast< ::QConicalGradient *>(sipCppV);
}


extern "C" {static void assign_QConicalGradient(void *, SIP_SSIZE_T, void *);}
static void assign_QConicalGradient(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QConicalGradient *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QConicalGradient *>(sipSrc);
}


extern "C" {static void *array_QConicalGradient(SIP_SSIZE_T);}
static void *array_QConicalGradient(SIP_SSIZE_T sipNrElem)
{
    return new  ::QConicalGradient[sipNrElem];
}


extern "C" {static void *copy_QConicalGradient(const void *, SIP_SSIZE_T);}
static void *copy_QConicalGradient(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QConicalGradient(reinterpret_cast<const  ::QConicalGradient *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QConicalGradient(sipSimpleWrapper *);}
static void dealloc_QConicalGradient(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QConicalGradient(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QConicalGradient(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QConicalGradient(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QConicalGradient *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QConicalGradient();

            return sipCpp;
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::qreal a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1d", sipType_QPointF, &a0, &a0State, &a1))
        {
            sipCpp = new  ::QConicalGradient(*a0,a1);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return sipCpp;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "ddd", &a0, &a1, &a2))
        {
            sipCpp = new  ::QConicalGradient(a0,a1,a2);

            return sipCpp;
        }
    }

    {
        const  ::QConicalGradient* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QConicalGradient, &a0))
        {
            sipCpp = new  ::QConicalGradient(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QConicalGradient[] = {{49, 255, 1}};


static PyMethodDef methods_QConicalGradient[] = {
    {SIP_MLNAME_CAST(sipName_angle), meth_QConicalGradient_angle, METH_VARARGS, SIP_MLDOC_CAST(doc_QConicalGradient_angle)},
    {SIP_MLNAME_CAST(sipName_center), meth_QConicalGradient_center, METH_VARARGS, SIP_MLDOC_CAST(doc_QConicalGradient_center)},
    {SIP_MLNAME_CAST(sipName_setAngle), meth_QConicalGradient_setAngle, METH_VARARGS, SIP_MLDOC_CAST(doc_QConicalGradient_setAngle)},
    {SIP_MLNAME_CAST(sipName_setCenter), meth_QConicalGradient_setCenter, METH_VARARGS, SIP_MLDOC_CAST(doc_QConicalGradient_setCenter)}
};

PyDoc_STRVAR(doc_QConicalGradient, "\1QConicalGradient()\n"
"QConicalGradient(Union[QPointF, QPoint], float)\n"
"QConicalGradient(float, float, float)\n"
"QConicalGradient(QConicalGradient)");


static pyqt5ClassPluginDef plugin_QConicalGradient = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QConicalGradient = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QConicalGradient,
        {SIP_NULLPTR},
        &plugin_QConicalGradient
    },
    {
        sipNameNr_QConicalGradient,
        {0, 0, 1},
        4, methods_QConicalGradient,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QConicalGradient,
    -1,
    -1,
    supers_QConicalGradient,
    SIP_NULLPTR,
    init_type_QConicalGradient,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QConicalGradient,
    assign_QConicalGradient,
    array_QConicalGradient,
    copy_QConicalGradient,
    release_QConicalGradient,
    cast_QConicalGradient,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 364 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 78049 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 78053 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 123 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 78056 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 139 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#include <qpair.h>
#line 78060 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 78063 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QRadialGradient_center, "center(self) -> QPointF");

extern "C" {static PyObject *meth_QRadialGradient_center(PyObject *, PyObject *);}
static PyObject *meth_QRadialGradient_center(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRadialGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadialGradient, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->center());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadialGradient, sipName_center, doc_QRadialGradient_center);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRadialGradient_focalPoint, "focalPoint(self) -> QPointF");

extern "C" {static PyObject *meth_QRadialGradient_focalPoint(PyObject *, PyObject *);}
static PyObject *meth_QRadialGradient_focalPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRadialGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadialGradient, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->focalPoint());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadialGradient, sipName_focalPoint, doc_QRadialGradient_focalPoint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRadialGradient_radius, "radius(self) -> float");

extern "C" {static PyObject *meth_QRadialGradient_radius(PyObject *, PyObject *);}
static PyObject *meth_QRadialGradient_radius(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRadialGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadialGradient, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->radius();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadialGradient, sipName_radius, doc_QRadialGradient_radius);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRadialGradient_setCenter, "setCenter(self, Union[QPointF, QPoint])\n"
"setCenter(self, float, float)");

extern "C" {static PyObject *meth_QRadialGradient_setCenter(PyObject *, PyObject *);}
static PyObject *meth_QRadialGradient_setCenter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::QRadialGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QRadialGradient, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->setCenter(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
         ::QRadialGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QRadialGradient, &sipCpp, &a0, &a1))
        {
            sipCpp->setCenter(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadialGradient, sipName_setCenter, doc_QRadialGradient_setCenter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRadialGradient_setFocalPoint, "setFocalPoint(self, Union[QPointF, QPoint])\n"
"setFocalPoint(self, float, float)");

extern "C" {static PyObject *meth_QRadialGradient_setFocalPoint(PyObject *, PyObject *);}
static PyObject *meth_QRadialGradient_setFocalPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::QRadialGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QRadialGradient, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->setFocalPoint(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
         ::QRadialGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QRadialGradient, &sipCpp, &a0, &a1))
        {
            sipCpp->setFocalPoint(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadialGradient, sipName_setFocalPoint, doc_QRadialGradient_setFocalPoint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRadialGradient_setRadius, "setRadius(self, float)");

extern "C" {static PyObject *meth_QRadialGradient_setRadius(PyObject *, PyObject *);}
static PyObject *meth_QRadialGradient_setRadius(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QRadialGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QRadialGradient, &sipCpp, &a0))
        {
            sipCpp->setRadius(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadialGradient, sipName_setRadius, doc_QRadialGradient_setRadius);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRadialGradient_centerRadius, "centerRadius(self) -> float");

extern "C" {static PyObject *meth_QRadialGradient_centerRadius(PyObject *, PyObject *);}
static PyObject *meth_QRadialGradient_centerRadius(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRadialGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadialGradient, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->centerRadius();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadialGradient, sipName_centerRadius, doc_QRadialGradient_centerRadius);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRadialGradient_setCenterRadius, "setCenterRadius(self, float)");

extern "C" {static PyObject *meth_QRadialGradient_setCenterRadius(PyObject *, PyObject *);}
static PyObject *meth_QRadialGradient_setCenterRadius(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QRadialGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QRadialGradient, &sipCpp, &a0))
        {
            sipCpp->setCenterRadius(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadialGradient, sipName_setCenterRadius, doc_QRadialGradient_setCenterRadius);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRadialGradient_focalRadius, "focalRadius(self) -> float");

extern "C" {static PyObject *meth_QRadialGradient_focalRadius(PyObject *, PyObject *);}
static PyObject *meth_QRadialGradient_focalRadius(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRadialGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadialGradient, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->focalRadius();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadialGradient, sipName_focalRadius, doc_QRadialGradient_focalRadius);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRadialGradient_setFocalRadius, "setFocalRadius(self, float)");

extern "C" {static PyObject *meth_QRadialGradient_setFocalRadius(PyObject *, PyObject *);}
static PyObject *meth_QRadialGradient_setFocalRadius(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QRadialGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QRadialGradient, &sipCpp, &a0))
        {
            sipCpp->setFocalRadius(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadialGradient, sipName_setFocalRadius, doc_QRadialGradient_setFocalRadius);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QRadialGradient(void *, const sipTypeDef *);}
static void *cast_QRadialGradient(void *sipCppV, const sipTypeDef *targetType)
{
     ::QRadialGradient *sipCpp = reinterpret_cast< ::QRadialGradient *>(sipCppV);

    if (targetType == sipType_QGradient)
        return static_cast< ::QGradient *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QRadialGradient(void *, int);}
static void release_QRadialGradient(void *sipCppV, int)
{
    delete reinterpret_cast< ::QRadialGradient *>(sipCppV);
}


extern "C" {static void assign_QRadialGradient(void *, SIP_SSIZE_T, void *);}
static void assign_QRadialGradient(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QRadialGradient *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QRadialGradient *>(sipSrc);
}


extern "C" {static void *array_QRadialGradient(SIP_SSIZE_T);}
static void *array_QRadialGradient(SIP_SSIZE_T sipNrElem)
{
    return new  ::QRadialGradient[sipNrElem];
}


extern "C" {static void *copy_QRadialGradient(const void *, SIP_SSIZE_T);}
static void *copy_QRadialGradient(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QRadialGradient(reinterpret_cast<const  ::QRadialGradient *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QRadialGradient(sipSimpleWrapper *);}
static void dealloc_QRadialGradient(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QRadialGradient(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QRadialGradient(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QRadialGradient(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QRadialGradient *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QRadialGradient();

            return sipCpp;
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::qreal a1;
        const  ::QPointF* a2;
        int a2State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1dJ1", sipType_QPointF, &a0, &a0State, &a1, sipType_QPointF, &a2, &a2State))
        {
            sipCpp = new  ::QRadialGradient(*a0,a1,*a2);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);
            sipReleaseType(const_cast< ::QPointF *>(a2),sipType_QPointF,a2State);

            return sipCpp;
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::qreal a1;
        const  ::QPointF* a2;
        int a2State = 0;
         ::qreal a3;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1dJ1d", sipType_QPointF, &a0, &a0State, &a1, sipType_QPointF, &a2, &a2State, &a3))
        {
            sipCpp = new  ::QRadialGradient(*a0,a1,*a2,a3);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);
            sipReleaseType(const_cast< ::QPointF *>(a2),sipType_QPointF,a2State);

            return sipCpp;
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::qreal a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1d", sipType_QPointF, &a0, &a0State, &a1))
        {
            sipCpp = new  ::QRadialGradient(*a0,a1);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return sipCpp;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
         ::qreal a4;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "ddddd", &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp = new  ::QRadialGradient(a0,a1,a2,a3,a4);

            return sipCpp;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
         ::qreal a4;
         ::qreal a5;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "dddddd", &a0, &a1, &a2, &a3, &a4, &a5))
        {
            sipCpp = new  ::QRadialGradient(a0,a1,a2,a3,a4,a5);

            return sipCpp;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "ddd", &a0, &a1, &a2))
        {
            sipCpp = new  ::QRadialGradient(a0,a1,a2);

            return sipCpp;
        }
    }

    {
        const  ::QRadialGradient* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QRadialGradient, &a0))
        {
            sipCpp = new  ::QRadialGradient(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QRadialGradient[] = {{49, 255, 1}};


static PyMethodDef methods_QRadialGradient[] = {
    {SIP_MLNAME_CAST(sipName_center), meth_QRadialGradient_center, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadialGradient_center)},
    {SIP_MLNAME_CAST(sipName_centerRadius), meth_QRadialGradient_centerRadius, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadialGradient_centerRadius)},
    {SIP_MLNAME_CAST(sipName_focalPoint), meth_QRadialGradient_focalPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadialGradient_focalPoint)},
    {SIP_MLNAME_CAST(sipName_focalRadius), meth_QRadialGradient_focalRadius, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadialGradient_focalRadius)},
    {SIP_MLNAME_CAST(sipName_radius), meth_QRadialGradient_radius, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadialGradient_radius)},
    {SIP_MLNAME_CAST(sipName_setCenter), meth_QRadialGradient_setCenter, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadialGradient_setCenter)},
    {SIP_MLNAME_CAST(sipName_setCenterRadius), meth_QRadialGradient_setCenterRadius, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadialGradient_setCenterRadius)},
    {SIP_MLNAME_CAST(sipName_setFocalPoint), meth_QRadialGradient_setFocalPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadialGradient_setFocalPoint)},
    {SIP_MLNAME_CAST(sipName_setFocalRadius), meth_QRadialGradient_setFocalRadius, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadialGradient_setFocalRadius)},
    {SIP_MLNAME_CAST(sipName_setRadius), meth_QRadialGradient_setRadius, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadialGradient_setRadius)}
};

PyDoc_STRVAR(doc_QRadialGradient, "\1QRadialGradient()\n"
"QRadialGradient(Union[QPointF, QPoint], float, Union[QPointF, QPoint])\n"
"QRadialGradient(Union[QPointF, QPoint], float, Union[QPointF, QPoint], float)\n"
"QRadialGradient(Union[QPointF, QPoint], float)\n"
"QRadialGradient(float, float, float, float, float)\n"
"QRadialGradient(float, float, float, float, float, float)\n"
"QRadialGradient(float, float, float)\n"
"QRadialGradient(QRadialGradient)");


static pyqt5ClassPluginDef plugin_QRadialGradient = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QRadialGradient = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QRadialGradient,
        {SIP_NULLPTR},
        &plugin_QRadialGradient
    },
    {
        sipNameNr_QRadialGradient,
        {0, 0, 1},
        10, methods_QRadialGradient,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QRadialGradient,
    -1,
    -1,
    supers_QRadialGradient,
    SIP_NULLPTR,
    init_type_QRadialGradient,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QRadialGradient,
    assign_QRadialGradient,
    array_QRadialGradient,
    copy_QRadialGradient,
    release_QRadialGradient,
    cast_QRadialGradient,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 346 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 78650 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 78654 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 123 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 78657 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 139 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#include <qpair.h>
#line 78661 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 78664 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QLinearGradient_start, "start(self) -> QPointF");

extern "C" {static PyObject *meth_QLinearGradient_start(PyObject *, PyObject *);}
static PyObject *meth_QLinearGradient_start(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLinearGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLinearGradient, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->start());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLinearGradient, sipName_start, doc_QLinearGradient_start);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLinearGradient_finalStop, "finalStop(self) -> QPointF");

extern "C" {static PyObject *meth_QLinearGradient_finalStop(PyObject *, PyObject *);}
static PyObject *meth_QLinearGradient_finalStop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLinearGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLinearGradient, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->finalStop());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLinearGradient, sipName_finalStop, doc_QLinearGradient_finalStop);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLinearGradient_setStart, "setStart(self, Union[QPointF, QPoint])\n"
"setStart(self, float, float)");

extern "C" {static PyObject *meth_QLinearGradient_setStart(PyObject *, PyObject *);}
static PyObject *meth_QLinearGradient_setStart(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::QLinearGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLinearGradient, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->setStart(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
         ::QLinearGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QLinearGradient, &sipCpp, &a0, &a1))
        {
            sipCpp->setStart(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLinearGradient, sipName_setStart, doc_QLinearGradient_setStart);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLinearGradient_setFinalStop, "setFinalStop(self, Union[QPointF, QPoint])\n"
"setFinalStop(self, float, float)");

extern "C" {static PyObject *meth_QLinearGradient_setFinalStop(PyObject *, PyObject *);}
static PyObject *meth_QLinearGradient_setFinalStop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::QLinearGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLinearGradient, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->setFinalStop(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
         ::QLinearGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QLinearGradient, &sipCpp, &a0, &a1))
        {
            sipCpp->setFinalStop(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLinearGradient, sipName_setFinalStop, doc_QLinearGradient_setFinalStop);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QLinearGradient(void *, const sipTypeDef *);}
static void *cast_QLinearGradient(void *sipCppV, const sipTypeDef *targetType)
{
     ::QLinearGradient *sipCpp = reinterpret_cast< ::QLinearGradient *>(sipCppV);

    if (targetType == sipType_QGradient)
        return static_cast< ::QGradient *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QLinearGradient(void *, int);}
static void release_QLinearGradient(void *sipCppV, int)
{
    delete reinterpret_cast< ::QLinearGradient *>(sipCppV);
}


extern "C" {static void assign_QLinearGradient(void *, SIP_SSIZE_T, void *);}
static void assign_QLinearGradient(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QLinearGradient *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QLinearGradient *>(sipSrc);
}


extern "C" {static void *array_QLinearGradient(SIP_SSIZE_T);}
static void *array_QLinearGradient(SIP_SSIZE_T sipNrElem)
{
    return new  ::QLinearGradient[sipNrElem];
}


extern "C" {static void *copy_QLinearGradient(const void *, SIP_SSIZE_T);}
static void *copy_QLinearGradient(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QLinearGradient(reinterpret_cast<const  ::QLinearGradient *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QLinearGradient(sipSimpleWrapper *);}
static void dealloc_QLinearGradient(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QLinearGradient(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QLinearGradient(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QLinearGradient(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QLinearGradient *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QLinearGradient();

            return sipCpp;
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QPointF* a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1J1", sipType_QPointF, &a0, &a0State, sipType_QPointF, &a1, &a1State))
        {
            sipCpp = new  ::QLinearGradient(*a0,*a1);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);

            return sipCpp;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "dddd", &a0, &a1, &a2, &a3))
        {
            sipCpp = new  ::QLinearGradient(a0,a1,a2,a3);

            return sipCpp;
        }
    }

    {
        const  ::QLinearGradient* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QLinearGradient, &a0))
        {
            sipCpp = new  ::QLinearGradient(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QLinearGradient[] = {{49, 255, 1}};


static PyMethodDef methods_QLinearGradient[] = {
    {SIP_MLNAME_CAST(sipName_finalStop), meth_QLinearGradient_finalStop, METH_VARARGS, SIP_MLDOC_CAST(doc_QLinearGradient_finalStop)},
    {SIP_MLNAME_CAST(sipName_setFinalStop), meth_QLinearGradient_setFinalStop, METH_VARARGS, SIP_MLDOC_CAST(doc_QLinearGradient_setFinalStop)},
    {SIP_MLNAME_CAST(sipName_setStart), meth_QLinearGradient_setStart, METH_VARARGS, SIP_MLDOC_CAST(doc_QLinearGradient_setStart)},
    {SIP_MLNAME_CAST(sipName_start), meth_QLinearGradient_start, METH_VARARGS, SIP_MLDOC_CAST(doc_QLinearGradient_start)}
};

PyDoc_STRVAR(doc_QLinearGradient, "\1QLinearGradient()\n"
"QLinearGradient(Union[QPointF, QPoint], Union[QPointF, QPoint])\n"
"QLinearGradient(float, float, float, float)\n"
"QLinearGradient(QLinearGradient)");


static pyqt5ClassPluginDef plugin_QLinearGradient = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QLinearGradient = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QLinearGradient,
        {SIP_NULLPTR},
        &plugin_QLinearGradient
    },
    {
        sipNameNr_QLinearGradient,
        {0, 0, 1},
        4, methods_QLinearGradient,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QLinearGradient,
    -1,
    -1,
    supers_QLinearGradient,
    SIP_NULLPTR,
    init_type_QLinearGradient,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QLinearGradient,
    assign_QLinearGradient,
    array_QLinearGradient,
    copy_QLinearGradient,
    release_QLinearGradient,
    cast_QLinearGradient,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 123 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 79006 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 139 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#include <qpair.h>
#line 79011 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 79014 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QGradient_type, "type(self) -> QGradient.Type");

extern "C" {static PyObject *meth_QGradient_type(PyObject *, PyObject *);}
static PyObject *meth_QGradient_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGradient, &sipCpp))
        {
             ::QGradient::Type sipRes;

            sipRes = sipCpp->type();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QGradient_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGradient, sipName_type, doc_QGradient_type);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGradient_spread, "spread(self) -> QGradient.Spread");

extern "C" {static PyObject *meth_QGradient_spread(PyObject *, PyObject *);}
static PyObject *meth_QGradient_spread(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGradient, &sipCpp))
        {
             ::QGradient::Spread sipRes;

            sipRes = sipCpp->spread();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QGradient_Spread);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGradient, sipName_spread, doc_QGradient_spread);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGradient_setColorAt, "setColorAt(self, float, Union[QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QGradient_setColorAt(PyObject *, PyObject *);}
static PyObject *meth_QGradient_setColorAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
        const  ::QColor* a1;
        int a1State = 0;
         ::QGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BdJ1", &sipSelf, sipType_QGradient, &sipCpp, &a0, sipType_QColor, &a1, &a1State))
        {
            sipCpp->setColorAt(a0,*a1);
            sipReleaseType(const_cast< ::QColor *>(a1),sipType_QColor,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGradient, sipName_setColorAt, doc_QGradient_setColorAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGradient_setStops, "setStops(self, Iterable[Tuple[float, Union[QColor, Qt.GlobalColor, QGradient]]])");

extern "C" {static PyObject *meth_QGradient_setStops(PyObject *, PyObject *);}
static PyObject *meth_QGradient_setStops(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGradientStops* a0;
        int a0State = 0;
         ::QGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGradient, &sipCpp, sipType_QVector_0600QPair_2400_0100QColor,&a0, &a0State))
        {
            sipCpp->setStops(*a0);
            sipReleaseType(const_cast< ::QGradientStops *>(a0),sipType_QVector_0600QPair_2400_0100QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGradient, sipName_setStops, doc_QGradient_setStops);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGradient_stops, "stops(self) -> List[Tuple[float, QColor]]");

extern "C" {static PyObject *meth_QGradient_stops(PyObject *, PyObject *);}
static PyObject *meth_QGradient_stops(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGradient, &sipCpp))
        {
             ::QGradientStops*sipRes;

            sipRes = new  ::QGradientStops(sipCpp->stops());

            return sipConvertFromNewType(sipRes,sipType_QVector_0600QPair_2400_0100QColor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGradient, sipName_stops, doc_QGradient_stops);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGradient_setSpread, "setSpread(self, QGradient.Spread)");

extern "C" {static PyObject *meth_QGradient_setSpread(PyObject *, PyObject *);}
static PyObject *meth_QGradient_setSpread(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QGradient::Spread a0;
         ::QGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QGradient, &sipCpp, sipType_QGradient_Spread, &a0))
        {
            sipCpp->setSpread(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGradient, sipName_setSpread, doc_QGradient_setSpread);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGradient_coordinateMode, "coordinateMode(self) -> QGradient.CoordinateMode");

extern "C" {static PyObject *meth_QGradient_coordinateMode(PyObject *, PyObject *);}
static PyObject *meth_QGradient_coordinateMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGradient, &sipCpp))
        {
             ::QGradient::CoordinateMode sipRes;

            sipRes = sipCpp->coordinateMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QGradient_CoordinateMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGradient, sipName_coordinateMode, doc_QGradient_coordinateMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QGradient_setCoordinateMode, "setCoordinateMode(self, QGradient.CoordinateMode)");

extern "C" {static PyObject *meth_QGradient_setCoordinateMode(PyObject *, PyObject *);}
static PyObject *meth_QGradient_setCoordinateMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QGradient::CoordinateMode a0;
         ::QGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QGradient, &sipCpp, sipType_QGradient_CoordinateMode, &a0))
        {
            sipCpp->setCoordinateMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGradient, sipName_setCoordinateMode, doc_QGradient_setCoordinateMode);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QGradient___ne__(PyObject *,PyObject *);}
static PyObject *slot_QGradient___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QGradient *sipCpp = reinterpret_cast< ::QGradient *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QGradient));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGradient* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QGradient, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QGradient::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QGradient, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QGradient___eq__(PyObject *,PyObject *);}
static PyObject *slot_QGradient___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QGradient *sipCpp = reinterpret_cast< ::QGradient *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QGradient));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QGradient* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QGradient, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QGradient::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QGradient, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QGradient(void *, int);}
static void release_QGradient(void *sipCppV, int)
{
    delete reinterpret_cast< ::QGradient *>(sipCppV);
}


extern "C" {static void assign_QGradient(void *, SIP_SSIZE_T, void *);}
static void assign_QGradient(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QGradient *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QGradient *>(sipSrc);
}


extern "C" {static void *array_QGradient(SIP_SSIZE_T);}
static void *array_QGradient(SIP_SSIZE_T sipNrElem)
{
    return new  ::QGradient[sipNrElem];
}


extern "C" {static void *copy_QGradient(const void *, SIP_SSIZE_T);}
static void *copy_QGradient(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QGradient(reinterpret_cast<const  ::QGradient *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QGradient(sipSimpleWrapper *);}
static void dealloc_QGradient(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QGradient(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QGradient(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QGradient(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QGradient *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QGradient();

            return sipCpp;
        }
    }

    {
         ::QGradient::Preset a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "E", sipType_QGradient_Preset, &a0))
        {
            sipCpp = new  ::QGradient(a0);

            return sipCpp;
        }
    }

    {
        const  ::QGradient* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QGradient, &a0))
        {
            sipCpp = new  ::QGradient(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QGradient[] = {
    {(void *)slot_QGradient___ne__, ne_slot},
    {(void *)slot_QGradient___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QGradient[] = {
    {SIP_MLNAME_CAST(sipName_coordinateMode), meth_QGradient_coordinateMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QGradient_coordinateMode)},
    {SIP_MLNAME_CAST(sipName_setColorAt), meth_QGradient_setColorAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QGradient_setColorAt)},
    {SIP_MLNAME_CAST(sipName_setCoordinateMode), meth_QGradient_setCoordinateMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QGradient_setCoordinateMode)},
    {SIP_MLNAME_CAST(sipName_setSpread), meth_QGradient_setSpread, METH_VARARGS, SIP_MLDOC_CAST(doc_QGradient_setSpread)},
    {SIP_MLNAME_CAST(sipName_setStops), meth_QGradient_setStops, METH_VARARGS, SIP_MLDOC_CAST(doc_QGradient_setStops)},
    {SIP_MLNAME_CAST(sipName_spread), meth_QGradient_spread, METH_VARARGS, SIP_MLDOC_CAST(doc_QGradient_spread)},
    {SIP_MLNAME_CAST(sipName_stops), meth_QGradient_stops, METH_VARARGS, SIP_MLDOC_CAST(doc_QGradient_stops)},
    {SIP_MLNAME_CAST(sipName_type), meth_QGradient_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QGradient_type)}
};

static sipEnumMemberDef enummembers_QGradient[] = {
    {sipName_AboveTheSky, static_cast<int>( ::QGradient::AboveTheSky), 51},
    {sipName_AfricanField, static_cast<int>( ::QGradient::AfricanField), 51},
    {sipName_AlchemistLab, static_cast<int>( ::QGradient::AlchemistLab), 51},
    {sipName_AmourAmour, static_cast<int>( ::QGradient::AmourAmour), 51},
    {sipName_AmyCrisp, static_cast<int>( ::QGradient::AmyCrisp), 51},
    {sipName_AngelCare, static_cast<int>( ::QGradient::AngelCare), 51},
    {sipName_AquaGuidance, static_cast<int>( ::QGradient::AquaGuidance), 51},
    {sipName_AquaSplash, static_cast<int>( ::QGradient::AquaSplash), 51},
    {sipName_AwesomePine, static_cast<int>( ::QGradient::AwesomePine), 51},
    {sipName_BigMango, static_cast<int>( ::QGradient::BigMango), 51},
    {sipName_BlackSea, static_cast<int>( ::QGradient::BlackSea), 51},
    {sipName_Blessing, static_cast<int>( ::QGradient::Blessing), 51},
    {sipName_BurningSpring, static_cast<int>( ::QGradient::BurningSpring), 51},
    {sipName_CheerfulCaramel, static_cast<int>( ::QGradient::CheerfulCaramel), 51},
    {sipName_ChildCare, static_cast<int>( ::QGradient::ChildCare), 51},
    {sipName_CleanMirror, static_cast<int>( ::QGradient::CleanMirror), 51},
    {sipName_CloudyApple, static_cast<int>( ::QGradient::CloudyApple), 51},
    {sipName_CloudyKnoxville, static_cast<int>( ::QGradient::CloudyKnoxville), 51},
    {sipName_CochitiLake, static_cast<int>( ::QGradient::CochitiLake), 51},
    {sipName_ColdEvening, static_cast<int>( ::QGradient::ColdEvening), 51},
    {sipName_ColorfulPeach, static_cast<int>( ::QGradient::ColorfulPeach), 51},
    {sipName_ConfidentCloud, static_cast<int>( ::QGradient::ConfidentCloud), 51},
    {sipName_ConicalGradient, static_cast<int>( ::QGradient::ConicalGradient), 53},
    {sipName_CrystalRiver, static_cast<int>( ::QGradient::CrystalRiver), 51},
    {sipName_Crystalline, static_cast<int>( ::QGradient::Crystalline), 51},
    {sipName_DeepBlue, static_cast<int>( ::QGradient::DeepBlue), 51},
    {sipName_DeepRelief, static_cast<int>( ::QGradient::DeepRelief), 51},
    {sipName_DenseWater, static_cast<int>( ::QGradient::DenseWater), 51},
    {sipName_DesertHump, static_cast<int>( ::QGradient::DesertHump), 51},
    {sipName_DirtyBeauty, static_cast<int>( ::QGradient::DirtyBeauty), 51},
    {sipName_DustyGrass, static_cast<int>( ::QGradient::DustyGrass), 51},
    {sipName_EternalConstance, static_cast<int>( ::QGradient::EternalConstance), 51},
    {sipName_EverlastingSky, static_cast<int>( ::QGradient::EverlastingSky), 51},
    {sipName_FabledSunset, static_cast<int>( ::QGradient::FabledSunset), 51},
    {sipName_FarawayRiver, static_cast<int>( ::QGradient::FarawayRiver), 51},
    {sipName_FebruaryInk, static_cast<int>( ::QGradient::FebruaryInk), 51},
    {sipName_FlyHigh, static_cast<int>( ::QGradient::FlyHigh), 51},
    {sipName_FlyingLemon, static_cast<int>( ::QGradient::FlyingLemon), 51},
    {sipName_ForestInei, static_cast<int>( ::QGradient::ForestInei), 51},
    {sipName_FreshMilk, static_cast<int>( ::QGradient::FreshMilk), 51},
    {sipName_FreshOasis, static_cast<int>( ::QGradient::FreshOasis), 51},
    {sipName_FrozenBerry, static_cast<int>( ::QGradient::FrozenBerry), 51},
    {sipName_FrozenDreams, static_cast<int>( ::QGradient::FrozenDreams), 51},
    {sipName_FrozenHeat, static_cast<int>( ::QGradient::FrozenHeat), 51},
    {sipName_FruitBlend, static_cast<int>( ::QGradient::FruitBlend), 51},
    {sipName_GagarinView, static_cast<int>( ::QGradient::GagarinView), 51},
    {sipName_GentleCare, static_cast<int>( ::QGradient::GentleCare), 51},
    {sipName_GlassWater, static_cast<int>( ::QGradient::GlassWater), 51},
    {sipName_GrassShampoo, static_cast<int>( ::QGradient::GrassShampoo), 51},
    {sipName_GreatWhale, static_cast<int>( ::QGradient::GreatWhale), 51},
    {sipName_GrownEarly, static_cast<int>( ::QGradient::GrownEarly), 51},
    {sipName_HappyAcid, static_cast<int>( ::QGradient::HappyAcid), 51},
    {sipName_HappyFisher, static_cast<int>( ::QGradient::HappyFisher), 51},
    {sipName_HappyMemories, static_cast<int>( ::QGradient::HappyMemories), 51},
    {sipName_HappyUnicorn, static_cast<int>( ::QGradient::HappyUnicorn), 51},
    {sipName_HealthyWater, static_cast<int>( ::QGradient::HealthyWater), 51},
    {sipName_HeavenPeach, static_cast<int>( ::QGradient::HeavenPeach), 51},
    {sipName_HeavyRain, static_cast<int>( ::QGradient::HeavyRain), 51},
    {sipName_HiddenJaguar, static_cast<int>( ::QGradient::HiddenJaguar), 51},
    {sipName_HighFlight, static_cast<int>( ::QGradient::HighFlight), 51},
    {sipName_ItmeoBranding, static_cast<int>( ::QGradient::ItmeoBranding), 51},
    {sipName_JapanBlush, static_cast<int>( ::QGradient::JapanBlush), 51},
    {sipName_JuicyCake, static_cast<int>( ::QGradient::JuicyCake), 51},
    {sipName_JuicyPeach, static_cast<int>( ::QGradient::JuicyPeach), 51},
    {sipName_JungleDay, static_cast<int>( ::QGradient::JungleDay), 51},
    {sipName_KindSteel, static_cast<int>( ::QGradient::KindSteel), 51},
    {sipName_LadogaBottom, static_cast<int>( ::QGradient::LadogaBottom), 51},
    {sipName_LadyLips, static_cast<int>( ::QGradient::LadyLips), 51},
    {sipName_LandingAircraft, static_cast<int>( ::QGradient::LandingAircraft), 51},
    {sipName_LeCocktail, static_cast<int>( ::QGradient::LeCocktail), 51},
    {sipName_LemonGate, static_cast<int>( ::QGradient::LemonGate), 51},
    {sipName_LightBlue, static_cast<int>( ::QGradient::LightBlue), 51},
    {sipName_LilyMeadow, static_cast<int>( ::QGradient::LilyMeadow), 51},
    {sipName_LinearGradient, static_cast<int>( ::QGradient::LinearGradient), 53},
    {sipName_LogicalMode, static_cast<int>( ::QGradient::LogicalMode), 50},
    {sipName_LoveKiss, static_cast<int>( ::QGradient::LoveKiss), 51},
    {sipName_MagicLake, static_cast<int>( ::QGradient::MagicLake), 51},
    {sipName_MagicRay, static_cast<int>( ::QGradient::MagicRay), 51},
    {sipName_MalibuBeach, static_cast<int>( ::QGradient::MalibuBeach), 51},
    {sipName_MarbleWall, static_cast<int>( ::QGradient::MarbleWall), 51},
    {sipName_MarsParty, static_cast<int>( ::QGradient::MarsParty), 51},
    {sipName_MeanFruit, static_cast<int>( ::QGradient::MeanFruit), 51},
    {sipName_MidnightBloom, static_cast<int>( ::QGradient::MidnightBloom), 51},
    {sipName_MillenniumPine, static_cast<int>( ::QGradient::MillenniumPine), 51},
    {sipName_MindCrawl, static_cast<int>( ::QGradient::MindCrawl), 51},
    {sipName_MixedHopes, static_cast<int>( ::QGradient::MixedHopes), 51},
    {sipName_MoleHall, static_cast<int>( ::QGradient::MoleHall), 51},
    {sipName_MorningSalad, static_cast<int>( ::QGradient::MorningSalad), 51},
    {sipName_MorpheusDen, static_cast<int>( ::QGradient::MorpheusDen), 51},
    {sipName_MountainRock, static_cast<int>( ::QGradient::MountainRock), 51},
    {sipName_NearMoon, static_cast<int>( ::QGradient::NearMoon), 51},
    {sipName_Nega, static_cast<int>( ::QGradient::Nega), 51},
    {sipName_NewLife, static_cast<int>( ::QGradient::NewLife), 51},
    {sipName_NewRetrowave, static_cast<int>( ::QGradient::NewRetrowave), 51},
    {sipName_NewYork, static_cast<int>( ::QGradient::NewYork), 51},
    {sipName_NightCall, static_cast<int>( ::QGradient::NightCall), 51},
    {sipName_NightFade, static_cast<int>( ::QGradient::NightFade), 51},
    {sipName_NightParty, static_cast<int>( ::QGradient::NightParty), 51},
    {sipName_NightSky, static_cast<int>( ::QGradient::NightSky), 51},
    {sipName_NoGradient, static_cast<int>( ::QGradient::NoGradient), 53},
    {sipName_NorseBeauty, static_cast<int>( ::QGradient::NorseBeauty), 51},
    {sipName_NorthMiracle, static_cast<int>( ::QGradient::NorthMiracle), 51},
    {sipName_ObjectBoundingMode, static_cast<int>( ::QGradient::ObjectBoundingMode), 50},
    {sipName_ObjectMode, static_cast<int>( ::QGradient::ObjectMode), 50},
    {sipName_OctoberSilence, static_cast<int>( ::QGradient::OctoberSilence), 51},
    {sipName_OldHat, static_cast<int>( ::QGradient::OldHat), 51},
    {sipName_OrangeJuice, static_cast<int>( ::QGradient::OrangeJuice), 51},
    {sipName_OverSun, static_cast<int>( ::QGradient::OverSun), 51},
    {sipName_PadSpread, static_cast<int>( ::QGradient::PadSpread), 52},
    {sipName_PaloAlto, static_cast<int>( ::QGradient::PaloAlto), 51},
    {sipName_PartyBliss, static_cast<int>( ::QGradient::PartyBliss), 51},
    {sipName_PassionateBed, static_cast<int>( ::QGradient::PassionateBed), 51},
    {sipName_PerfectBlue, static_cast<int>( ::QGradient::PerfectBlue), 51},
    {sipName_PerfectWhite, static_cast<int>( ::QGradient::PerfectWhite), 51},
    {sipName_PhoenixStart, static_cast<int>( ::QGradient::PhoenixStart), 51},
    {sipName_PlumBath, static_cast<int>( ::QGradient::PlumBath), 51},
    {sipName_PlumPlate, static_cast<int>( ::QGradient::PlumPlate), 51},
    {sipName_PoliteRumors, static_cast<int>( ::QGradient::PoliteRumors), 51},
    {sipName_PremiumDark, static_cast<int>( ::QGradient::PremiumDark), 51},
    {sipName_PremiumWhite, static_cast<int>( ::QGradient::PremiumWhite), 51},
    {sipName_PurpleDivision, static_cast<int>( ::QGradient::PurpleDivision), 51},
    {sipName_RadialGradient, static_cast<int>( ::QGradient::RadialGradient), 53},
    {sipName_RainyAshville, static_cast<int>( ::QGradient::RainyAshville), 51},
    {sipName_RareWind, static_cast<int>( ::QGradient::RareWind), 51},
    {sipName_RedSalvation, static_cast<int>( ::QGradient::RedSalvation), 51},
    {sipName_ReflectSpread, static_cast<int>( ::QGradient::ReflectSpread), 52},
    {sipName_RepeatSpread, static_cast<int>( ::QGradient::RepeatSpread), 52},
    {sipName_RichMetal, static_cast<int>( ::QGradient::RichMetal), 51},
    {sipName_RipeMalinka, static_cast<int>( ::QGradient::RipeMalinka), 51},
    {sipName_RiskyConcrete, static_cast<int>( ::QGradient::RiskyConcrete), 51},
    {sipName_RiverCity, static_cast<int>( ::QGradient::RiverCity), 51},
    {sipName_RoyalGarden, static_cast<int>( ::QGradient::RoyalGarden), 51},
    {sipName_SaintPetersburg, static_cast<int>( ::QGradient::SaintPetersburg), 51},
    {sipName_SaltMountain, static_cast<int>( ::QGradient::SaltMountain), 51},
    {sipName_SandStrike, static_cast<int>( ::QGradient::SandStrike), 51},
    {sipName_SeaLord, static_cast<int>( ::QGradient::SeaLord), 51},
    {sipName_SeaStrike, static_cast<int>( ::QGradient::SeaStrike), 51},
    {sipName_Seashore, static_cast<int>( ::QGradient::Seashore), 51},
    {sipName_ShadyWater, static_cast<int>( ::QGradient::ShadyWater), 51},
    {sipName_SharpBlues, static_cast<int>( ::QGradient::SharpBlues), 51},
    {sipName_SharpeyeEagle, static_cast<int>( ::QGradient::SharpeyeEagle), 51},
    {sipName_ShyRainbow, static_cast<int>( ::QGradient::ShyRainbow), 51},
    {sipName_SkyGlider, static_cast<int>( ::QGradient::SkyGlider), 51},
    {sipName_SleeplessNight, static_cast<int>( ::QGradient::SleeplessNight), 51},
    {sipName_SmartIndigo, static_cast<int>( ::QGradient::SmartIndigo), 51},
    {sipName_SmilingRain, static_cast<int>( ::QGradient::SmilingRain), 51},
    {sipName_SnowAgain, static_cast<int>( ::QGradient::SnowAgain), 51},
    {sipName_SoftCherish, static_cast<int>( ::QGradient::SoftCherish), 51},
    {sipName_SoftGrass, static_cast<int>( ::QGradient::SoftGrass), 51},
    {sipName_SoftLipstick, static_cast<int>( ::QGradient::SoftLipstick), 51},
    {sipName_SolidStone, static_cast<int>( ::QGradient::SolidStone), 51},
    {sipName_SpaceShift, static_cast<int>( ::QGradient::SpaceShift), 51},
    {sipName_SpikyNaga, static_cast<int>( ::QGradient::SpikyNaga), 51},
    {sipName_SpringWarmth, static_cast<int>( ::QGradient::SpringWarmth), 51},
    {sipName_StarWine, static_cast<int>( ::QGradient::StarWine), 51},
    {sipName_StretchToDeviceMode, static_cast<int>( ::QGradient::StretchToDeviceMode), 50},
    {sipName_StrictNovember, static_cast<int>( ::QGradient::StrictNovember), 51},
    {sipName_StrongBliss, static_cast<int>( ::QGradient::StrongBliss), 51},
    {sipName_StrongStick, static_cast<int>( ::QGradient::StrongStick), 51},
    {sipName_SugarLollipop, static_cast<int>( ::QGradient::SugarLollipop), 51},
    {sipName_SummerGames, static_cast<int>( ::QGradient::SummerGames), 51},
    {sipName_SunVeggie, static_cast<int>( ::QGradient::SunVeggie), 51},
    {sipName_SunnyMorning, static_cast<int>( ::QGradient::SunnyMorning), 51},
    {sipName_SupremeSky, static_cast<int>( ::QGradient::SupremeSky), 51},
    {sipName_SweetDessert, static_cast<int>( ::QGradient::SweetDessert), 51},
    {sipName_SweetPeriod, static_cast<int>( ::QGradient::SweetPeriod), 51},
    {sipName_TeenNotebook, static_cast<int>( ::QGradient::TeenNotebook), 51},
    {sipName_TeenParty, static_cast<int>( ::QGradient::TeenParty), 51},
    {sipName_TemptingAzure, static_cast<int>( ::QGradient::TemptingAzure), 51},
    {sipName_TrueSunset, static_cast<int>( ::QGradient::TrueSunset), 51},
    {sipName_ViciousStance, static_cast<int>( ::QGradient::ViciousStance), 51},
    {sipName_WarmFlame, static_cast<int>( ::QGradient::WarmFlame), 51},
    {sipName_WideMatrix, static_cast<int>( ::QGradient::WideMatrix), 51},
    {sipName_WildApple, static_cast<int>( ::QGradient::WildApple), 51},
    {sipName_WinterNeva, static_cast<int>( ::QGradient::WinterNeva), 51},
    {sipName_WitchDance, static_cast<int>( ::QGradient::WitchDance), 51},
    {sipName_YoungGrass, static_cast<int>( ::QGradient::YoungGrass), 51},
    {sipName_YoungPassion, static_cast<int>( ::QGradient::YoungPassion), 51},
    {sipName_ZeusMiracle, static_cast<int>( ::QGradient::ZeusMiracle), 51},
};

PyDoc_STRVAR(doc_QGradient, "\1QGradient()\n"
"QGradient(QGradient.Preset)\n"
"QGradient(QGradient)");


static pyqt5ClassPluginDef plugin_QGradient = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QGradient = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QGradient,
        {SIP_NULLPTR},
        &plugin_QGradient
    },
    {
        sipNameNr_QGradient,
        {0, 0, 1},
        8, methods_QGradient,
        179, enummembers_QGradient,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QGradient,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QGradient,
    init_type_QGradient,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QGradient,
    assign_QGradient,
    array_QGradient,
    copy_QGradient,
    release_QGradient,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 79657 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 79661 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 79664 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 79667 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qimage.sip"
#include <qimage.h>
#line 79670 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 79673 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 79676 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 123 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 79679 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QBrush_setStyle, "setStyle(self, Qt.BrushStyle)");

extern "C" {static PyObject *meth_QBrush_setStyle(PyObject *, PyObject *);}
static PyObject *meth_QBrush_setStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::BrushStyle a0;
         ::QBrush *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QBrush, &sipCpp, sipType_Qt_BrushStyle, &a0))
        {
            sipCpp->setStyle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBrush, sipName_setStyle, doc_QBrush_setStyle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBrush_texture, "texture(self) -> QPixmap");

extern "C" {static PyObject *meth_QBrush_texture(PyObject *, PyObject *);}
static PyObject *meth_QBrush_texture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBrush *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBrush, &sipCpp))
        {
             ::QPixmap*sipRes;

            sipRes = new  ::QPixmap(sipCpp->texture());

            return sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBrush, sipName_texture, doc_QBrush_texture);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBrush_setTexture, "setTexture(self, QPixmap)");

extern "C" {static PyObject *meth_QBrush_setTexture(PyObject *, PyObject *);}
static PyObject *meth_QBrush_setTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixmap* a0;
         ::QBrush *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QBrush, &sipCpp, sipType_QPixmap, &a0))
        {
            sipCpp->setTexture(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBrush, sipName_setTexture, doc_QBrush_setTexture);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBrush_setColor, "setColor(self, Union[QColor, Qt.GlobalColor, QGradient])\n"
"setColor(self, Qt.GlobalColor)");

extern "C" {static PyObject *meth_QBrush_setColor(PyObject *, PyObject *);}
static PyObject *meth_QBrush_setColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor* a0;
        int a0State = 0;
         ::QBrush *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QBrush, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->setColor(*a0);
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::Qt::GlobalColor a0;
         ::QBrush *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QBrush, &sipCpp, sipType_Qt_GlobalColor, &a0))
        {
            sipCpp->setColor(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBrush, sipName_setColor, doc_QBrush_setColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBrush_gradient, "gradient(self) -> QGradient");

extern "C" {static PyObject *meth_QBrush_gradient(PyObject *, PyObject *);}
static PyObject *meth_QBrush_gradient(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBrush *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBrush, &sipCpp))
        {
            const  ::QGradient*sipRes;

            sipRes = sipCpp->gradient();

            return sipConvertFromType(const_cast< ::QGradient *>(sipRes),sipType_QGradient,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBrush, sipName_gradient, doc_QBrush_gradient);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBrush_isOpaque, "isOpaque(self) -> bool");

extern "C" {static PyObject *meth_QBrush_isOpaque(PyObject *, PyObject *);}
static PyObject *meth_QBrush_isOpaque(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBrush *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBrush, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isOpaque();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBrush, sipName_isOpaque, doc_QBrush_isOpaque);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBrush_style, "style(self) -> Qt.BrushStyle");

extern "C" {static PyObject *meth_QBrush_style(PyObject *, PyObject *);}
static PyObject *meth_QBrush_style(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBrush *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBrush, &sipCpp))
        {
             ::Qt::BrushStyle sipRes;

            sipRes = sipCpp->style();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_BrushStyle);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBrush, sipName_style, doc_QBrush_style);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBrush_color, "color(self) -> QColor");

extern "C" {static PyObject *meth_QBrush_color(PyObject *, PyObject *);}
static PyObject *meth_QBrush_color(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBrush *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBrush, &sipCpp))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor(sipCpp->color());

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBrush, sipName_color, doc_QBrush_color);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBrush_setTextureImage, "setTextureImage(self, QImage)");

extern "C" {static PyObject *meth_QBrush_setTextureImage(PyObject *, PyObject *);}
static PyObject *meth_QBrush_setTextureImage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage* a0;
         ::QBrush *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QBrush, &sipCpp, sipType_QImage, &a0))
        {
            sipCpp->setTextureImage(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBrush, sipName_setTextureImage, doc_QBrush_setTextureImage);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBrush_textureImage, "textureImage(self) -> QImage");

extern "C" {static PyObject *meth_QBrush_textureImage(PyObject *, PyObject *);}
static PyObject *meth_QBrush_textureImage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBrush *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBrush, &sipCpp))
        {
             ::QImage*sipRes;

            sipRes = new  ::QImage(sipCpp->textureImage());

            return sipConvertFromNewType(sipRes,sipType_QImage,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBrush, sipName_textureImage, doc_QBrush_textureImage);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBrush_setTransform, "setTransform(self, QTransform)");

extern "C" {static PyObject *meth_QBrush_setTransform(PyObject *, PyObject *);}
static PyObject *meth_QBrush_setTransform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform* a0;
         ::QBrush *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QBrush, &sipCpp, sipType_QTransform, &a0))
        {
            sipCpp->setTransform(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBrush, sipName_setTransform, doc_QBrush_setTransform);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBrush_transform, "transform(self) -> QTransform");

extern "C" {static PyObject *meth_QBrush_transform(PyObject *, PyObject *);}
static PyObject *meth_QBrush_transform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBrush *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBrush, &sipCpp))
        {
             ::QTransform*sipRes;

            sipRes = new  ::QTransform(sipCpp->transform());

            return sipConvertFromNewType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBrush, sipName_transform, doc_QBrush_transform);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBrush_swap, "swap(self, QBrush)");

extern "C" {static PyObject *meth_QBrush_swap(PyObject *, PyObject *);}
static PyObject *meth_QBrush_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBrush* a0;
         ::QBrush *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QBrush, &sipCpp, sipType_QBrush, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBrush, sipName_swap, doc_QBrush_swap);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QBrush___ne__(PyObject *,PyObject *);}
static PyObject *slot_QBrush___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QBrush *sipCpp = reinterpret_cast< ::QBrush *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBrush));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBrush* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QBrush, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QBrush::operator!=(*a0);
            sipReleaseType(const_cast< ::QBrush *>(a0),sipType_QBrush,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QBrush, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QBrush___eq__(PyObject *,PyObject *);}
static PyObject *slot_QBrush___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QBrush *sipCpp = reinterpret_cast< ::QBrush *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBrush));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBrush* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QBrush, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QBrush::operator==(*a0);
            sipReleaseType(const_cast< ::QBrush *>(a0),sipType_QBrush,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QBrush, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QBrush(void *, int);}
static void release_QBrush(void *sipCppV, int)
{
    delete reinterpret_cast< ::QBrush *>(sipCppV);
}


extern "C" {static void assign_QBrush(void *, SIP_SSIZE_T, void *);}
static void assign_QBrush(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QBrush *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QBrush *>(sipSrc);
}


extern "C" {static void *array_QBrush(SIP_SSIZE_T);}
static void *array_QBrush(SIP_SSIZE_T sipNrElem)
{
    return new  ::QBrush[sipNrElem];
}


extern "C" {static void *copy_QBrush(const void *, SIP_SSIZE_T);}
static void *copy_QBrush(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QBrush(reinterpret_cast<const  ::QBrush *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QBrush(sipSimpleWrapper *);}
static void dealloc_QBrush(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QBrush(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QBrush(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QBrush(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QBrush *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QBrush();

            return sipCpp;
        }
    }

    {
         ::Qt::BrushStyle a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "E", sipType_Qt_BrushStyle, &a0))
        {
            sipCpp = new  ::QBrush(a0);

            return sipCpp;
        }
    }

    {
        const  ::QColor* a0;
        int a0State = 0;
         ::Qt::BrushStyle a1 = Qt::SolidPattern;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_style,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|E", sipType_QColor, &a0, &a0State, sipType_Qt_BrushStyle, &a1))
        {
            sipCpp = new  ::QBrush(*a0,a1);
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QColor* a0;
        int a0State = 0;
        const  ::QPixmap* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1J9", sipType_QColor, &a0, &a0State, sipType_QPixmap, &a1))
        {
            sipCpp = new  ::QBrush(*a0,*a1);
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QPixmap* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QPixmap, &a0))
        {
            sipCpp = new  ::QBrush(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QImage* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QImage, &a0))
        {
            sipCpp = new  ::QBrush(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QBrush* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QBrush, &a0, &a0State))
        {
            sipCpp = new  ::QBrush(*a0);
            sipReleaseType(const_cast< ::QBrush *>(a0),sipType_QBrush,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QVariant* a0;
        PyObject *a0Wrapper;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "@J1", &a0Wrapper, sipType_QVariant, &a0, &a0State))
        {
            sipErrorState sipError = sipErrorNone;

#line 91 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qbrush.sip"
        if (a0->canConvert<QBrush>())
            sipCpp = new QBrush(a0->value<QBrush>());
        else
            sipError = sipBadCallableArg(0, a0Wrapper);
#line 80277 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            if (sipError == sipErrorNone)
                return sipCpp;

            if (sipUnused)
            {
                Py_XDECREF(*sipUnused);
            }

            sipAddException(sipError, sipParseErr);

            if (sipError == sipErrorFail)
                return SIP_NULLPTR;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QBrush(PyObject *, void **, int *, PyObject *);}
static int convertTo_QBrush(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QBrush **sipCppPtr = reinterpret_cast< ::QBrush **>(sipCppPtrV);

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qbrush.sip"
// SIP doesn't support automatic type convertors so we explicitly allow a
// QColor or a QGradient to be used whenever a QBrush is expected.  Note that
// SIP must process QColor before QBrush so that the former's QVariant cast
// operator is applied before the latter's.

if (sipIsErr == NULL)
    return (sipCanConvertToType(sipPy, sipType_QBrush, SIP_NO_CONVERTORS) ||
            sipCanConvertToType(sipPy, sipType_QColor, 0) ||
            sipCanConvertToType(sipPy, sipType_QGradient, 0));

if (sipCanConvertToType(sipPy, sipType_QBrush, SIP_NO_CONVERTORS))
{
    *sipCppPtr = reinterpret_cast<QBrush *>(sipConvertToType(sipPy, sipType_QBrush, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

    return 0;
}

int state;

if (sipCanConvertToType(sipPy, sipType_QColor, 0))
{
    QColor *c = reinterpret_cast<QColor *>(sipConvertToType(sipPy, sipType_QColor, 0, 0, &state, sipIsErr));

    if (*sipIsErr)
    {
        sipReleaseType(c, sipType_QColor, state);
        return 0;
    }

    *sipCppPtr = new QBrush(*c);

    sipReleaseType(c, sipType_QColor, state);

    return sipGetState(sipTransferObj);
}

QGradient *g = reinterpret_cast<QGradient *>(sipConvertToType(sipPy, sipType_QGradient, 0, 0, &state, sipIsErr));

if (*sipIsErr)
{
    sipReleaseType(g, sipType_QGradient, state);
    return 0;
}

*sipCppPtr = new QBrush(*g);

sipReleaseType(g, sipType_QGradient, state);

return sipGetState(sipTransferObj);
#line 80354 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QBrush[] = {
    {(void *)slot_QBrush___ne__, ne_slot},
    {(void *)slot_QBrush___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QBrush[] = {
    {SIP_MLNAME_CAST(sipName_color), meth_QBrush_color, METH_VARARGS, SIP_MLDOC_CAST(doc_QBrush_color)},
    {SIP_MLNAME_CAST(sipName_gradient), meth_QBrush_gradient, METH_VARARGS, SIP_MLDOC_CAST(doc_QBrush_gradient)},
    {SIP_MLNAME_CAST(sipName_isOpaque), meth_QBrush_isOpaque, METH_VARARGS, SIP_MLDOC_CAST(doc_QBrush_isOpaque)},
    {SIP_MLNAME_CAST(sipName_setColor), meth_QBrush_setColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QBrush_setColor)},
    {SIP_MLNAME_CAST(sipName_setStyle), meth_QBrush_setStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QBrush_setStyle)},
    {SIP_MLNAME_CAST(sipName_setTexture), meth_QBrush_setTexture, METH_VARARGS, SIP_MLDOC_CAST(doc_QBrush_setTexture)},
    {SIP_MLNAME_CAST(sipName_setTextureImage), meth_QBrush_setTextureImage, METH_VARARGS, SIP_MLDOC_CAST(doc_QBrush_setTextureImage)},
    {SIP_MLNAME_CAST(sipName_setTransform), meth_QBrush_setTransform, METH_VARARGS, SIP_MLDOC_CAST(doc_QBrush_setTransform)},
    {SIP_MLNAME_CAST(sipName_style), meth_QBrush_style, METH_VARARGS, SIP_MLDOC_CAST(doc_QBrush_style)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QBrush_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QBrush_swap)},
    {SIP_MLNAME_CAST(sipName_texture), meth_QBrush_texture, METH_VARARGS, SIP_MLDOC_CAST(doc_QBrush_texture)},
    {SIP_MLNAME_CAST(sipName_textureImage), meth_QBrush_textureImage, METH_VARARGS, SIP_MLDOC_CAST(doc_QBrush_textureImage)},
    {SIP_MLNAME_CAST(sipName_transform), meth_QBrush_transform, METH_VARARGS, SIP_MLDOC_CAST(doc_QBrush_transform)}
};

PyDoc_STRVAR(doc_QBrush, "\1QBrush()\n"
"QBrush(Qt.BrushStyle)\n"
"QBrush(Union[QColor, Qt.GlobalColor, QGradient], style: Qt.BrushStyle = Qt.SolidPattern)\n"
"QBrush(Union[QColor, Qt.GlobalColor, QGradient], QPixmap)\n"
"QBrush(QPixmap)\n"
"QBrush(QImage)\n"
"QBrush(Union[QBrush, QColor, Qt.GlobalColor, QGradient])\n"
"QBrush(Any)");


static pyqt5ClassPluginDef plugin_QBrush = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QBrush = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QBrush,
        {SIP_NULLPTR},
        &plugin_QBrush
    },
    {
        sipNameNr_QBrush,
        {0, 0, 1},
        13, methods_QBrush,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QBrush,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QBrush,
    init_type_QBrush,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QBrush,
    assign_QBrush,
    array_QBrush,
    copy_QBrush,
    release_QBrush,
    SIP_NULLPTR,
    convertTo_QBrush,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 80459 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 80463 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 34 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qrgba64.sip"
#include <qrgba64.h>
#line 80466 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 80469 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 80472 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 80475 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QColor_name, "name(self) -> str\n"
"name(self, QColor.NameFormat) -> str");

extern "C" {static PyObject *meth_QColor_name(PyObject *, PyObject *);}
static PyObject *meth_QColor_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    {
         ::QColor::NameFormat a0;
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QColor, &sipCpp, sipType_QColor_NameFormat, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->name(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_name, doc_QColor_name);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_setNamedColor, "setNamedColor(self, str)");

extern "C" {static PyObject *meth_QColor_setNamedColor(PyObject *, PyObject *);}
static PyObject *meth_QColor_setNamedColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QColor, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setNamedColor(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_setNamedColor, doc_QColor_setNamedColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_colorNames, "colorNames() -> List[str]");

extern "C" {static PyObject *meth_QColor_colorNames(PyObject *, PyObject *);}
static PyObject *meth_QColor_colorNames(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList( ::QColor::colorNames());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_colorNames, doc_QColor_colorNames);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_spec, "spec(self) -> QColor.Spec");

extern "C" {static PyObject *meth_QColor_spec(PyObject *, PyObject *);}
static PyObject *meth_QColor_spec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::QColor::Spec sipRes;

            sipRes = sipCpp->spec();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QColor_Spec);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_spec, doc_QColor_spec);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_alpha, "alpha(self) -> int");

extern "C" {static PyObject *meth_QColor_alpha(PyObject *, PyObject *);}
static PyObject *meth_QColor_alpha(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->alpha();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_alpha, doc_QColor_alpha);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_setAlpha, "setAlpha(self, int)");

extern "C" {static PyObject *meth_QColor_setAlpha(PyObject *, PyObject *);}
static PyObject *meth_QColor_setAlpha(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QColor, &sipCpp, &a0))
        {
            sipCpp->setAlpha(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_setAlpha, doc_QColor_setAlpha);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_alphaF, "alphaF(self) -> float");

extern "C" {static PyObject *meth_QColor_alphaF(PyObject *, PyObject *);}
static PyObject *meth_QColor_alphaF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->alphaF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_alphaF, doc_QColor_alphaF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_setAlphaF, "setAlphaF(self, float)");

extern "C" {static PyObject *meth_QColor_setAlphaF(PyObject *, PyObject *);}
static PyObject *meth_QColor_setAlphaF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QColor, &sipCpp, &a0))
        {
            sipCpp->setAlphaF(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_setAlphaF, doc_QColor_setAlphaF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_red, "red(self) -> int");

extern "C" {static PyObject *meth_QColor_red(PyObject *, PyObject *);}
static PyObject *meth_QColor_red(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->red();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_red, doc_QColor_red);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_green, "green(self) -> int");

extern "C" {static PyObject *meth_QColor_green(PyObject *, PyObject *);}
static PyObject *meth_QColor_green(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->green();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_green, doc_QColor_green);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_blue, "blue(self) -> int");

extern "C" {static PyObject *meth_QColor_blue(PyObject *, PyObject *);}
static PyObject *meth_QColor_blue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->blue();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_blue, doc_QColor_blue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_setRed, "setRed(self, int)");

extern "C" {static PyObject *meth_QColor_setRed(PyObject *, PyObject *);}
static PyObject *meth_QColor_setRed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QColor, &sipCpp, &a0))
        {
            sipCpp->setRed(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_setRed, doc_QColor_setRed);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_setGreen, "setGreen(self, int)");

extern "C" {static PyObject *meth_QColor_setGreen(PyObject *, PyObject *);}
static PyObject *meth_QColor_setGreen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QColor, &sipCpp, &a0))
        {
            sipCpp->setGreen(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_setGreen, doc_QColor_setGreen);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_setBlue, "setBlue(self, int)");

extern "C" {static PyObject *meth_QColor_setBlue(PyObject *, PyObject *);}
static PyObject *meth_QColor_setBlue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QColor, &sipCpp, &a0))
        {
            sipCpp->setBlue(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_setBlue, doc_QColor_setBlue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_redF, "redF(self) -> float");

extern "C" {static PyObject *meth_QColor_redF(PyObject *, PyObject *);}
static PyObject *meth_QColor_redF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->redF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_redF, doc_QColor_redF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_greenF, "greenF(self) -> float");

extern "C" {static PyObject *meth_QColor_greenF(PyObject *, PyObject *);}
static PyObject *meth_QColor_greenF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->greenF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_greenF, doc_QColor_greenF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_blueF, "blueF(self) -> float");

extern "C" {static PyObject *meth_QColor_blueF(PyObject *, PyObject *);}
static PyObject *meth_QColor_blueF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->blueF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_blueF, doc_QColor_blueF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_setRedF, "setRedF(self, float)");

extern "C" {static PyObject *meth_QColor_setRedF(PyObject *, PyObject *);}
static PyObject *meth_QColor_setRedF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QColor, &sipCpp, &a0))
        {
            sipCpp->setRedF(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_setRedF, doc_QColor_setRedF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_setGreenF, "setGreenF(self, float)");

extern "C" {static PyObject *meth_QColor_setGreenF(PyObject *, PyObject *);}
static PyObject *meth_QColor_setGreenF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QColor, &sipCpp, &a0))
        {
            sipCpp->setGreenF(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_setGreenF, doc_QColor_setGreenF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_setBlueF, "setBlueF(self, float)");

extern "C" {static PyObject *meth_QColor_setBlueF(PyObject *, PyObject *);}
static PyObject *meth_QColor_setBlueF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QColor, &sipCpp, &a0))
        {
            sipCpp->setBlueF(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_setBlueF, doc_QColor_setBlueF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_getRgb, "getRgb(self) -> Tuple[int, int, int, int]");

extern "C" {static PyObject *meth_QColor_getRgb(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_getRgb(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const  ::QColor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            sipCpp->getRgb(&a0,&a1,&a2,&a3);

            return sipBuildResult(0,"(iiii)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_getRgb, doc_QColor_getRgb);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_setRgb, "setRgb(self, int, int, int, alpha: int = 255)\n"
"setRgb(self, int)");

extern "C" {static PyObject *meth_QColor_setRgb(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_setRgb(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3 = 255;
         ::QColor *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biii|i", &sipSelf, sipType_QColor, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setRgb(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QRgb a0;
         ::QColor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "Bu", &sipSelf, sipType_QColor, &sipCpp, &a0))
        {
            sipCpp->setRgb(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_setRgb, doc_QColor_setRgb);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_getRgbF, "getRgbF(self) -> Tuple[float, float, float, float]");

extern "C" {static PyObject *meth_QColor_getRgbF(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_getRgbF(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
        const  ::QColor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            sipCpp->getRgbF(&a0,&a1,&a2,&a3);

            return sipBuildResult(0,"(dddd)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_getRgbF, doc_QColor_getRgbF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_setRgbF, "setRgbF(self, float, float, float, alpha: float = 1)");

extern "C" {static PyObject *meth_QColor_setRgbF(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_setRgbF(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3 = 1;
         ::QColor *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bddd|d", &sipSelf, sipType_QColor, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setRgbF(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_setRgbF, doc_QColor_setRgbF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_rgba, "rgba(self) -> int");

extern "C" {static PyObject *meth_QColor_rgba(PyObject *, PyObject *);}
static PyObject *meth_QColor_rgba(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::QRgb sipRes;

            sipRes = sipCpp->rgba();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_rgba, doc_QColor_rgba);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_setRgba, "setRgba(self, int)");

extern "C" {static PyObject *meth_QColor_setRgba(PyObject *, PyObject *);}
static PyObject *meth_QColor_setRgba(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRgb a0;
         ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QColor, &sipCpp, &a0))
        {
            sipCpp->setRgba(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_setRgba, doc_QColor_setRgba);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_rgb, "rgb(self) -> int");

extern "C" {static PyObject *meth_QColor_rgb(PyObject *, PyObject *);}
static PyObject *meth_QColor_rgb(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::QRgb sipRes;

            sipRes = sipCpp->rgb();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_rgb, doc_QColor_rgb);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_hue, "hue(self) -> int");

extern "C" {static PyObject *meth_QColor_hue(PyObject *, PyObject *);}
static PyObject *meth_QColor_hue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->hue();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_hue, doc_QColor_hue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_saturation, "saturation(self) -> int");

extern "C" {static PyObject *meth_QColor_saturation(PyObject *, PyObject *);}
static PyObject *meth_QColor_saturation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->saturation();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_saturation, doc_QColor_saturation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_value, "value(self) -> int");

extern "C" {static PyObject *meth_QColor_value(PyObject *, PyObject *);}
static PyObject *meth_QColor_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->value();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_value, doc_QColor_value);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_hueF, "hueF(self) -> float");

extern "C" {static PyObject *meth_QColor_hueF(PyObject *, PyObject *);}
static PyObject *meth_QColor_hueF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->hueF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_hueF, doc_QColor_hueF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_saturationF, "saturationF(self) -> float");

extern "C" {static PyObject *meth_QColor_saturationF(PyObject *, PyObject *);}
static PyObject *meth_QColor_saturationF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->saturationF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_saturationF, doc_QColor_saturationF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_valueF, "valueF(self) -> float");

extern "C" {static PyObject *meth_QColor_valueF(PyObject *, PyObject *);}
static PyObject *meth_QColor_valueF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->valueF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_valueF, doc_QColor_valueF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_getHsv, "getHsv(self) -> Tuple[int, int, int, int]");

extern "C" {static PyObject *meth_QColor_getHsv(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_getHsv(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const  ::QColor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            sipCpp->getHsv(&a0,&a1,&a2,&a3);

            return sipBuildResult(0,"(iiii)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_getHsv, doc_QColor_getHsv);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_setHsv, "setHsv(self, int, int, int, alpha: int = 255)");

extern "C" {static PyObject *meth_QColor_setHsv(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_setHsv(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3 = 255;
         ::QColor *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biii|i", &sipSelf, sipType_QColor, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setHsv(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_setHsv, doc_QColor_setHsv);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_getHsvF, "getHsvF(self) -> Tuple[float, float, float, float]");

extern "C" {static PyObject *meth_QColor_getHsvF(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_getHsvF(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
        const  ::QColor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            sipCpp->getHsvF(&a0,&a1,&a2,&a3);

            return sipBuildResult(0,"(dddd)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_getHsvF, doc_QColor_getHsvF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_setHsvF, "setHsvF(self, float, float, float, alpha: float = 1)");

extern "C" {static PyObject *meth_QColor_setHsvF(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_setHsvF(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3 = 1;
         ::QColor *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bddd|d", &sipSelf, sipType_QColor, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setHsvF(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_setHsvF, doc_QColor_setHsvF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_cyan, "cyan(self) -> int");

extern "C" {static PyObject *meth_QColor_cyan(PyObject *, PyObject *);}
static PyObject *meth_QColor_cyan(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->cyan();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_cyan, doc_QColor_cyan);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_magenta, "magenta(self) -> int");

extern "C" {static PyObject *meth_QColor_magenta(PyObject *, PyObject *);}
static PyObject *meth_QColor_magenta(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->magenta();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_magenta, doc_QColor_magenta);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_yellow, "yellow(self) -> int");

extern "C" {static PyObject *meth_QColor_yellow(PyObject *, PyObject *);}
static PyObject *meth_QColor_yellow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->yellow();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_yellow, doc_QColor_yellow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_black, "black(self) -> int");

extern "C" {static PyObject *meth_QColor_black(PyObject *, PyObject *);}
static PyObject *meth_QColor_black(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->black();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_black, doc_QColor_black);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_cyanF, "cyanF(self) -> float");

extern "C" {static PyObject *meth_QColor_cyanF(PyObject *, PyObject *);}
static PyObject *meth_QColor_cyanF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->cyanF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_cyanF, doc_QColor_cyanF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_magentaF, "magentaF(self) -> float");

extern "C" {static PyObject *meth_QColor_magentaF(PyObject *, PyObject *);}
static PyObject *meth_QColor_magentaF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->magentaF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_magentaF, doc_QColor_magentaF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_yellowF, "yellowF(self) -> float");

extern "C" {static PyObject *meth_QColor_yellowF(PyObject *, PyObject *);}
static PyObject *meth_QColor_yellowF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->yellowF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_yellowF, doc_QColor_yellowF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_blackF, "blackF(self) -> float");

extern "C" {static PyObject *meth_QColor_blackF(PyObject *, PyObject *);}
static PyObject *meth_QColor_blackF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->blackF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_blackF, doc_QColor_blackF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_getCmyk, "getCmyk(self) -> Tuple[int, int, int, int, int]");

extern "C" {static PyObject *meth_QColor_getCmyk(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_getCmyk(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4;
         ::QColor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            sipCpp->getCmyk(&a0,&a1,&a2,&a3,&a4);

            return sipBuildResult(0,"(iiiii)",a0,a1,a2,a3,a4);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_getCmyk, doc_QColor_getCmyk);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_setCmyk, "setCmyk(self, int, int, int, int, alpha: int = 255)");

extern "C" {static PyObject *meth_QColor_setCmyk(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_setCmyk(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4 = 255;
         ::QColor *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiii|i", &sipSelf, sipType_QColor, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->setCmyk(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_setCmyk, doc_QColor_setCmyk);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_getCmykF, "getCmykF(self) -> Tuple[float, float, float, float, float]");

extern "C" {static PyObject *meth_QColor_getCmykF(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_getCmykF(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
         ::qreal a4;
         ::QColor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            sipCpp->getCmykF(&a0,&a1,&a2,&a3,&a4);

            return sipBuildResult(0,"(ddddd)",a0,a1,a2,a3,a4);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_getCmykF, doc_QColor_getCmykF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_setCmykF, "setCmykF(self, float, float, float, float, alpha: float = 1)");

extern "C" {static PyObject *meth_QColor_setCmykF(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_setCmykF(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
         ::qreal a4 = 1;
         ::QColor *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bdddd|d", &sipSelf, sipType_QColor, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->setCmykF(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_setCmykF, doc_QColor_setCmykF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_toRgb, "toRgb(self) -> QColor");

extern "C" {static PyObject *meth_QColor_toRgb(PyObject *, PyObject *);}
static PyObject *meth_QColor_toRgb(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor(sipCpp->toRgb());

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_toRgb, doc_QColor_toRgb);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_toHsv, "toHsv(self) -> QColor");

extern "C" {static PyObject *meth_QColor_toHsv(PyObject *, PyObject *);}
static PyObject *meth_QColor_toHsv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor(sipCpp->toHsv());

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_toHsv, doc_QColor_toHsv);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_toCmyk, "toCmyk(self) -> QColor");

extern "C" {static PyObject *meth_QColor_toCmyk(PyObject *, PyObject *);}
static PyObject *meth_QColor_toCmyk(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor(sipCpp->toCmyk());

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_toCmyk, doc_QColor_toCmyk);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_convertTo, "convertTo(self, QColor.Spec) -> QColor");

extern "C" {static PyObject *meth_QColor_convertTo(PyObject *, PyObject *);}
static PyObject *meth_QColor_convertTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QColor::Spec a0;
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QColor, &sipCpp, sipType_QColor_Spec, &a0))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor(sipCpp->convertTo(a0));

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_convertTo, doc_QColor_convertTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_fromRgb, "fromRgb(int) -> QColor\n"
"fromRgb(int, int, int, alpha: int = 255) -> QColor");

extern "C" {static PyObject *meth_QColor_fromRgb(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_fromRgb(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRgb a0;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "u", &a0))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor( ::QColor::fromRgb(a0));

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3 = 255;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "iii|i", &a0, &a1, &a2, &a3))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor( ::QColor::fromRgb(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_fromRgb, doc_QColor_fromRgb);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_fromRgba, "fromRgba(int) -> QColor");

extern "C" {static PyObject *meth_QColor_fromRgba(PyObject *, PyObject *);}
static PyObject *meth_QColor_fromRgba(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRgb a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "u", &a0))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor( ::QColor::fromRgba(a0));

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_fromRgba, doc_QColor_fromRgba);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_fromRgbF, "fromRgbF(float, float, float, alpha: float = 1) -> QColor");

extern "C" {static PyObject *meth_QColor_fromRgbF(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_fromRgbF(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3 = 1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "ddd|d", &a0, &a1, &a2, &a3))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor( ::QColor::fromRgbF(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_fromRgbF, doc_QColor_fromRgbF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_fromHsv, "fromHsv(int, int, int, alpha: int = 255) -> QColor");

extern "C" {static PyObject *meth_QColor_fromHsv(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_fromHsv(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3 = 255;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "iii|i", &a0, &a1, &a2, &a3))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor( ::QColor::fromHsv(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_fromHsv, doc_QColor_fromHsv);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_fromHsvF, "fromHsvF(float, float, float, alpha: float = 1) -> QColor");

extern "C" {static PyObject *meth_QColor_fromHsvF(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_fromHsvF(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3 = 1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "ddd|d", &a0, &a1, &a2, &a3))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor( ::QColor::fromHsvF(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_fromHsvF, doc_QColor_fromHsvF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_fromCmyk, "fromCmyk(int, int, int, int, alpha: int = 255) -> QColor");

extern "C" {static PyObject *meth_QColor_fromCmyk(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_fromCmyk(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4 = 255;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "iiii|i", &a0, &a1, &a2, &a3, &a4))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor( ::QColor::fromCmyk(a0,a1,a2,a3,a4));

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_fromCmyk, doc_QColor_fromCmyk);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_fromCmykF, "fromCmykF(float, float, float, float, alpha: float = 1) -> QColor");

extern "C" {static PyObject *meth_QColor_fromCmykF(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_fromCmykF(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
         ::qreal a4 = 1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "dddd|d", &a0, &a1, &a2, &a3, &a4))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor( ::QColor::fromCmykF(a0,a1,a2,a3,a4));

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_fromCmykF, doc_QColor_fromCmykF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QColor_isValid(PyObject *, PyObject *);}
static PyObject *meth_QColor_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_isValid, doc_QColor_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_lighter, "lighter(self, factor: int = 150) -> QColor");

extern "C" {static PyObject *meth_QColor_lighter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_lighter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 150;
        const  ::QColor *sipCpp;

        static const char *sipKwdList[] = {
            sipName_factor,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QColor, &sipCpp, &a0))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor(sipCpp->lighter(a0));

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_lighter, doc_QColor_lighter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_darker, "darker(self, factor: int = 200) -> QColor");

extern "C" {static PyObject *meth_QColor_darker(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_darker(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 200;
        const  ::QColor *sipCpp;

        static const char *sipKwdList[] = {
            sipName_factor,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QColor, &sipCpp, &a0))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor(sipCpp->darker(a0));

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_darker, doc_QColor_darker);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_hsvHue, "hsvHue(self) -> int");

extern "C" {static PyObject *meth_QColor_hsvHue(PyObject *, PyObject *);}
static PyObject *meth_QColor_hsvHue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->hsvHue();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_hsvHue, doc_QColor_hsvHue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_hsvSaturation, "hsvSaturation(self) -> int");

extern "C" {static PyObject *meth_QColor_hsvSaturation(PyObject *, PyObject *);}
static PyObject *meth_QColor_hsvSaturation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->hsvSaturation();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_hsvSaturation, doc_QColor_hsvSaturation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_hsvHueF, "hsvHueF(self) -> float");

extern "C" {static PyObject *meth_QColor_hsvHueF(PyObject *, PyObject *);}
static PyObject *meth_QColor_hsvHueF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->hsvHueF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_hsvHueF, doc_QColor_hsvHueF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_hsvSaturationF, "hsvSaturationF(self) -> float");

extern "C" {static PyObject *meth_QColor_hsvSaturationF(PyObject *, PyObject *);}
static PyObject *meth_QColor_hsvSaturationF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->hsvSaturationF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_hsvSaturationF, doc_QColor_hsvSaturationF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_hslHue, "hslHue(self) -> int");

extern "C" {static PyObject *meth_QColor_hslHue(PyObject *, PyObject *);}
static PyObject *meth_QColor_hslHue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->hslHue();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_hslHue, doc_QColor_hslHue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_hslSaturation, "hslSaturation(self) -> int");

extern "C" {static PyObject *meth_QColor_hslSaturation(PyObject *, PyObject *);}
static PyObject *meth_QColor_hslSaturation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->hslSaturation();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_hslSaturation, doc_QColor_hslSaturation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_lightness, "lightness(self) -> int");

extern "C" {static PyObject *meth_QColor_lightness(PyObject *, PyObject *);}
static PyObject *meth_QColor_lightness(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->lightness();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_lightness, doc_QColor_lightness);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_hslHueF, "hslHueF(self) -> float");

extern "C" {static PyObject *meth_QColor_hslHueF(PyObject *, PyObject *);}
static PyObject *meth_QColor_hslHueF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->hslHueF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_hslHueF, doc_QColor_hslHueF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_hslSaturationF, "hslSaturationF(self) -> float");

extern "C" {static PyObject *meth_QColor_hslSaturationF(PyObject *, PyObject *);}
static PyObject *meth_QColor_hslSaturationF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->hslSaturationF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_hslSaturationF, doc_QColor_hslSaturationF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_lightnessF, "lightnessF(self) -> float");

extern "C" {static PyObject *meth_QColor_lightnessF(PyObject *, PyObject *);}
static PyObject *meth_QColor_lightnessF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->lightnessF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_lightnessF, doc_QColor_lightnessF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_getHsl, "getHsl(self) -> Tuple[int, int, int, int]");

extern "C" {static PyObject *meth_QColor_getHsl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_getHsl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const  ::QColor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            sipCpp->getHsl(&a0,&a1,&a2,&a3);

            return sipBuildResult(0,"(iiii)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_getHsl, doc_QColor_getHsl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_setHsl, "setHsl(self, int, int, int, alpha: int = 255)");

extern "C" {static PyObject *meth_QColor_setHsl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_setHsl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3 = 255;
         ::QColor *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biii|i", &sipSelf, sipType_QColor, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setHsl(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_setHsl, doc_QColor_setHsl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_getHslF, "getHslF(self) -> Tuple[float, float, float, float]");

extern "C" {static PyObject *meth_QColor_getHslF(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_getHslF(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
        const  ::QColor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            sipCpp->getHslF(&a0,&a1,&a2,&a3);

            return sipBuildResult(0,"(dddd)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_getHslF, doc_QColor_getHslF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_setHslF, "setHslF(self, float, float, float, alpha: float = 1)");

extern "C" {static PyObject *meth_QColor_setHslF(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_setHslF(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3 = 1;
         ::QColor *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bddd|d", &sipSelf, sipType_QColor, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setHslF(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_setHslF, doc_QColor_setHslF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_toHsl, "toHsl(self) -> QColor");

extern "C" {static PyObject *meth_QColor_toHsl(PyObject *, PyObject *);}
static PyObject *meth_QColor_toHsl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor(sipCpp->toHsl());

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_toHsl, doc_QColor_toHsl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_fromHsl, "fromHsl(int, int, int, alpha: int = 255) -> QColor");

extern "C" {static PyObject *meth_QColor_fromHsl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_fromHsl(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3 = 255;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "iii|i", &a0, &a1, &a2, &a3))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor( ::QColor::fromHsl(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_fromHsl, doc_QColor_fromHsl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_fromHslF, "fromHslF(float, float, float, alpha: float = 1) -> QColor");

extern "C" {static PyObject *meth_QColor_fromHslF(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_fromHslF(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3 = 1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "ddd|d", &a0, &a1, &a2, &a3))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor( ::QColor::fromHslF(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_fromHslF, doc_QColor_fromHslF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_isValidColor, "isValidColor(str) -> bool");

extern "C" {static PyObject *meth_QColor_isValidColor(PyObject *, PyObject *);}
static PyObject *meth_QColor_isValidColor(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes =  ::QColor::isValidColor(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_isValidColor, doc_QColor_isValidColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_rgba64, "rgba64(self) -> QRgba64");

extern "C" {static PyObject *meth_QColor_rgba64(PyObject *, PyObject *);}
static PyObject *meth_QColor_rgba64(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
             ::QRgba64*sipRes;

            sipRes = new  ::QRgba64(sipCpp->rgba64());

            return sipConvertFromNewType(sipRes,sipType_QRgba64,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_rgba64, doc_QColor_rgba64);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_setRgba64, "setRgba64(self, QRgba64)");

extern "C" {static PyObject *meth_QColor_setRgba64(PyObject *, PyObject *);}
static PyObject *meth_QColor_setRgba64(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRgba64* a0;
         ::QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QColor, &sipCpp, sipType_QRgba64, &a0))
        {
            sipCpp->setRgba64(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_setRgba64, doc_QColor_setRgba64);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QColor_fromRgba64, "fromRgba64(int, int, int, alpha: int = 65535) -> QColor\n"
"fromRgba64(QRgba64) -> QColor");

extern "C" {static PyObject *meth_QColor_fromRgba64(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_fromRgba64(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::ushort a0;
         ::ushort a1;
         ::ushort a2;
         ::ushort a3 = 65535;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "ttt|t", &a0, &a1, &a2, &a3))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor( ::QColor::fromRgba64(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    {
         ::QRgba64* a0;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "J9", sipType_QRgba64, &a0))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor( ::QColor::fromRgba64(*a0));

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_fromRgba64, doc_QColor_fromRgba64);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QColor___ne__(PyObject *,PyObject *);}
static PyObject *slot_QColor___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QColor *sipCpp = reinterpret_cast< ::QColor *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QColor));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QColor, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QColor::operator!=(*a0);
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QColor, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QColor___eq__(PyObject *,PyObject *);}
static PyObject *slot_QColor___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QColor *sipCpp = reinterpret_cast< ::QColor *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QColor));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QColor, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QColor::operator==(*a0);
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QColor, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QColor(void *, int);}
static void release_QColor(void *sipCppV, int)
{
    delete reinterpret_cast< ::QColor *>(sipCppV);
}


extern "C" {static PyObject *pickle_QColor(void *);}
static PyObject *pickle_QColor(void *sipCppV)
{
     ::QColor *sipCpp = reinterpret_cast< ::QColor *>(sipCppV);
    PyObject *sipRes;

#line 52 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qcolor.sip"
    sipRes = Py_BuildValue((char *)"iiii", sipCpp->red(), sipCpp->green(), sipCpp->blue(), sipCpp->alpha());
#line 83184 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

    return sipRes;
}


extern "C" {static void assign_QColor(void *, SIP_SSIZE_T, void *);}
static void assign_QColor(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QColor *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QColor *>(sipSrc);
}


extern "C" {static void *array_QColor(SIP_SSIZE_T);}
static void *array_QColor(SIP_SSIZE_T sipNrElem)
{
    return new  ::QColor[sipNrElem];
}


extern "C" {static void *copy_QColor(const void *, SIP_SSIZE_T);}
static void *copy_QColor(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QColor(reinterpret_cast<const  ::QColor *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QColor(sipSimpleWrapper *);}
static void dealloc_QColor(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QColor(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QColor(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QColor(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QColor *sipCpp = SIP_NULLPTR;

    {
         ::Qt::GlobalColor a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "XE", sipType_Qt_GlobalColor, &a0))
        {
            sipCpp = new  ::QColor(a0);

            return sipCpp;
        }
    }

    {
         ::QRgb a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "u", &a0))
        {
            sipCpp = new  ::QColor(a0);

            return sipCpp;
        }
    }

    {
         ::QRgba64* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QRgba64, &a0))
        {
            sipCpp = new  ::QColor(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QVariant* a0;
        PyObject *a0Wrapper;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "@J1", &a0Wrapper, sipType_QVariant, &a0, &a0State))
        {
            sipErrorState sipError = sipErrorNone;

#line 72 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qcolor.sip"
        if (a0->canConvert<QColor>())
            sipCpp = new QColor(a0->value<QColor>());
        else
            sipError = sipBadCallableArg(0, a0Wrapper);
#line 83273 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            if (sipError == sipErrorNone)
                return sipCpp;

            if (sipUnused)
            {
                Py_XDECREF(*sipUnused);
            }

            sipAddException(sipError, sipParseErr);

            if (sipError == sipErrorFail)
                return SIP_NULLPTR;
        }
    }

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QColor();

            return sipCpp;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3 = 255;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_alpha,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "iii|i", &a0, &a1, &a2, &a3))
        {
            sipCpp = new  ::QColor(a0,a1,a2,a3);

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new  ::QColor(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QColor* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QColor, &a0, &a0State))
        {
            sipCpp = new  ::QColor(*a0);
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QColor(PyObject *, void **, int *, PyObject *);}
static int convertTo_QColor(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QColor **sipCppPtr = reinterpret_cast< ::QColor **>(sipCppPtrV);

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qcolor.sip"
// SIP doesn't support automatic type convertors so we explicitly allow a
// Qt::GlobalColor to be used whenever a QColor is expected.  Note that SIP
// must process QColor before QBrush so that the former's QVariant cast
// operator is applied before the latter's.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_GlobalColor)) ||
            sipCanConvertToType(sipPy, sipType_QColor, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_GlobalColor)))
{
    *sipCppPtr = new QColor((Qt::GlobalColor)SIPLong_AsLong(sipPy));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QColor *>(sipConvertToType(sipPy, sipType_QColor, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 83376 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QColor[] = {
    {(void *)slot_QColor___ne__, ne_slot},
    {(void *)slot_QColor___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QColor[] = {
    {SIP_MLNAME_CAST(sipName_alpha), meth_QColor_alpha, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_alpha)},
    {SIP_MLNAME_CAST(sipName_alphaF), meth_QColor_alphaF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_alphaF)},
    {SIP_MLNAME_CAST(sipName_black), meth_QColor_black, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_black)},
    {SIP_MLNAME_CAST(sipName_blackF), meth_QColor_blackF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_blackF)},
    {SIP_MLNAME_CAST(sipName_blue), meth_QColor_blue, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_blue)},
    {SIP_MLNAME_CAST(sipName_blueF), meth_QColor_blueF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_blueF)},
    {SIP_MLNAME_CAST(sipName_colorNames), meth_QColor_colorNames, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_colorNames)},
    {SIP_MLNAME_CAST(sipName_convertTo), meth_QColor_convertTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_convertTo)},
    {SIP_MLNAME_CAST(sipName_cyan), meth_QColor_cyan, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_cyan)},
    {SIP_MLNAME_CAST(sipName_cyanF), meth_QColor_cyanF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_cyanF)},
    {SIP_MLNAME_CAST(sipName_darker), SIP_MLMETH_CAST(meth_QColor_darker), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_darker)},
    {SIP_MLNAME_CAST(sipName_fromCmyk), SIP_MLMETH_CAST(meth_QColor_fromCmyk), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_fromCmyk)},
    {SIP_MLNAME_CAST(sipName_fromCmykF), SIP_MLMETH_CAST(meth_QColor_fromCmykF), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_fromCmykF)},
    {SIP_MLNAME_CAST(sipName_fromHsl), SIP_MLMETH_CAST(meth_QColor_fromHsl), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_fromHsl)},
    {SIP_MLNAME_CAST(sipName_fromHslF), SIP_MLMETH_CAST(meth_QColor_fromHslF), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_fromHslF)},
    {SIP_MLNAME_CAST(sipName_fromHsv), SIP_MLMETH_CAST(meth_QColor_fromHsv), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_fromHsv)},
    {SIP_MLNAME_CAST(sipName_fromHsvF), SIP_MLMETH_CAST(meth_QColor_fromHsvF), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_fromHsvF)},
    {SIP_MLNAME_CAST(sipName_fromRgb), SIP_MLMETH_CAST(meth_QColor_fromRgb), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_fromRgb)},
    {SIP_MLNAME_CAST(sipName_fromRgbF), SIP_MLMETH_CAST(meth_QColor_fromRgbF), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_fromRgbF)},
    {SIP_MLNAME_CAST(sipName_fromRgba), meth_QColor_fromRgba, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_fromRgba)},
    {SIP_MLNAME_CAST(sipName_fromRgba64), SIP_MLMETH_CAST(meth_QColor_fromRgba64), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_fromRgba64)},
    {SIP_MLNAME_CAST(sipName_getCmyk), SIP_MLMETH_CAST(meth_QColor_getCmyk), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_getCmyk)},
    {SIP_MLNAME_CAST(sipName_getCmykF), SIP_MLMETH_CAST(meth_QColor_getCmykF), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_getCmykF)},
    {SIP_MLNAME_CAST(sipName_getHsl), SIP_MLMETH_CAST(meth_QColor_getHsl), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_getHsl)},
    {SIP_MLNAME_CAST(sipName_getHslF), SIP_MLMETH_CAST(meth_QColor_getHslF), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_getHslF)},
    {SIP_MLNAME_CAST(sipName_getHsv), SIP_MLMETH_CAST(meth_QColor_getHsv), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_getHsv)},
    {SIP_MLNAME_CAST(sipName_getHsvF), SIP_MLMETH_CAST(meth_QColor_getHsvF), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_getHsvF)},
    {SIP_MLNAME_CAST(sipName_getRgb), SIP_MLMETH_CAST(meth_QColor_getRgb), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_getRgb)},
    {SIP_MLNAME_CAST(sipName_getRgbF), SIP_MLMETH_CAST(meth_QColor_getRgbF), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_getRgbF)},
    {SIP_MLNAME_CAST(sipName_green), meth_QColor_green, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_green)},
    {SIP_MLNAME_CAST(sipName_greenF), meth_QColor_greenF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_greenF)},
    {SIP_MLNAME_CAST(sipName_hslHue), meth_QColor_hslHue, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_hslHue)},
    {SIP_MLNAME_CAST(sipName_hslHueF), meth_QColor_hslHueF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_hslHueF)},
    {SIP_MLNAME_CAST(sipName_hslSaturation), meth_QColor_hslSaturation, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_hslSaturation)},
    {SIP_MLNAME_CAST(sipName_hslSaturationF), meth_QColor_hslSaturationF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_hslSaturationF)},
    {SIP_MLNAME_CAST(sipName_hsvHue), meth_QColor_hsvHue, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_hsvHue)},
    {SIP_MLNAME_CAST(sipName_hsvHueF), meth_QColor_hsvHueF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_hsvHueF)},
    {SIP_MLNAME_CAST(sipName_hsvSaturation), meth_QColor_hsvSaturation, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_hsvSaturation)},
    {SIP_MLNAME_CAST(sipName_hsvSaturationF), meth_QColor_hsvSaturationF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_hsvSaturationF)},
    {SIP_MLNAME_CAST(sipName_hue), meth_QColor_hue, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_hue)},
    {SIP_MLNAME_CAST(sipName_hueF), meth_QColor_hueF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_hueF)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QColor_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_isValid)},
    {SIP_MLNAME_CAST(sipName_isValidColor), meth_QColor_isValidColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_isValidColor)},
    {SIP_MLNAME_CAST(sipName_lighter), SIP_MLMETH_CAST(meth_QColor_lighter), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_lighter)},
    {SIP_MLNAME_CAST(sipName_lightness), meth_QColor_lightness, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_lightness)},
    {SIP_MLNAME_CAST(sipName_lightnessF), meth_QColor_lightnessF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_lightnessF)},
    {SIP_MLNAME_CAST(sipName_magenta), meth_QColor_magenta, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_magenta)},
    {SIP_MLNAME_CAST(sipName_magentaF), meth_QColor_magentaF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_magentaF)},
    {SIP_MLNAME_CAST(sipName_name), meth_QColor_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_name)},
    {SIP_MLNAME_CAST(sipName_red), meth_QColor_red, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_red)},
    {SIP_MLNAME_CAST(sipName_redF), meth_QColor_redF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_redF)},
    {SIP_MLNAME_CAST(sipName_rgb), meth_QColor_rgb, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_rgb)},
    {SIP_MLNAME_CAST(sipName_rgba), meth_QColor_rgba, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_rgba)},
    {SIP_MLNAME_CAST(sipName_rgba64), meth_QColor_rgba64, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_rgba64)},
    {SIP_MLNAME_CAST(sipName_saturation), meth_QColor_saturation, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_saturation)},
    {SIP_MLNAME_CAST(sipName_saturationF), meth_QColor_saturationF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_saturationF)},
    {SIP_MLNAME_CAST(sipName_setAlpha), meth_QColor_setAlpha, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_setAlpha)},
    {SIP_MLNAME_CAST(sipName_setAlphaF), meth_QColor_setAlphaF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_setAlphaF)},
    {SIP_MLNAME_CAST(sipName_setBlue), meth_QColor_setBlue, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_setBlue)},
    {SIP_MLNAME_CAST(sipName_setBlueF), meth_QColor_setBlueF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_setBlueF)},
    {SIP_MLNAME_CAST(sipName_setCmyk), SIP_MLMETH_CAST(meth_QColor_setCmyk), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_setCmyk)},
    {SIP_MLNAME_CAST(sipName_setCmykF), SIP_MLMETH_CAST(meth_QColor_setCmykF), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_setCmykF)},
    {SIP_MLNAME_CAST(sipName_setGreen), meth_QColor_setGreen, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_setGreen)},
    {SIP_MLNAME_CAST(sipName_setGreenF), meth_QColor_setGreenF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_setGreenF)},
    {SIP_MLNAME_CAST(sipName_setHsl), SIP_MLMETH_CAST(meth_QColor_setHsl), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_setHsl)},
    {SIP_MLNAME_CAST(sipName_setHslF), SIP_MLMETH_CAST(meth_QColor_setHslF), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_setHslF)},
    {SIP_MLNAME_CAST(sipName_setHsv), SIP_MLMETH_CAST(meth_QColor_setHsv), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_setHsv)},
    {SIP_MLNAME_CAST(sipName_setHsvF), SIP_MLMETH_CAST(meth_QColor_setHsvF), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_setHsvF)},
    {SIP_MLNAME_CAST(sipName_setNamedColor), meth_QColor_setNamedColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_setNamedColor)},
    {SIP_MLNAME_CAST(sipName_setRed), meth_QColor_setRed, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_setRed)},
    {SIP_MLNAME_CAST(sipName_setRedF), meth_QColor_setRedF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_setRedF)},
    {SIP_MLNAME_CAST(sipName_setRgb), SIP_MLMETH_CAST(meth_QColor_setRgb), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_setRgb)},
    {SIP_MLNAME_CAST(sipName_setRgbF), SIP_MLMETH_CAST(meth_QColor_setRgbF), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_setRgbF)},
    {SIP_MLNAME_CAST(sipName_setRgba), meth_QColor_setRgba, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_setRgba)},
    {SIP_MLNAME_CAST(sipName_setRgba64), meth_QColor_setRgba64, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_setRgba64)},
    {SIP_MLNAME_CAST(sipName_spec), meth_QColor_spec, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_spec)},
    {SIP_MLNAME_CAST(sipName_toCmyk), meth_QColor_toCmyk, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_toCmyk)},
    {SIP_MLNAME_CAST(sipName_toHsl), meth_QColor_toHsl, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_toHsl)},
    {SIP_MLNAME_CAST(sipName_toHsv), meth_QColor_toHsv, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_toHsv)},
    {SIP_MLNAME_CAST(sipName_toRgb), meth_QColor_toRgb, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_toRgb)},
    {SIP_MLNAME_CAST(sipName_value), meth_QColor_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_value)},
    {SIP_MLNAME_CAST(sipName_valueF), meth_QColor_valueF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_valueF)},
    {SIP_MLNAME_CAST(sipName_yellow), meth_QColor_yellow, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_yellow)},
    {SIP_MLNAME_CAST(sipName_yellowF), meth_QColor_yellowF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_yellowF)}
};

static sipEnumMemberDef enummembers_QColor[] = {
    {sipName_Cmyk, static_cast<int>( ::QColor::Cmyk), 14},
    {sipName_HexArgb, static_cast<int>( ::QColor::HexArgb), 13},
    {sipName_HexRgb, static_cast<int>( ::QColor::HexRgb), 13},
    {sipName_Hsl, static_cast<int>( ::QColor::Hsl), 14},
    {sipName_Hsv, static_cast<int>( ::QColor::Hsv), 14},
    {sipName_Invalid, static_cast<int>( ::QColor::Invalid), 14},
    {sipName_Rgb, static_cast<int>( ::QColor::Rgb), 14},
};

PyDoc_STRVAR(doc_QColor, "\1QColor(Qt.GlobalColor)\n"
"QColor(int)\n"
"QColor(QRgba64)\n"
"QColor(Any)\n"
"QColor()\n"
"QColor(int, int, int, alpha: int = 255)\n"
"QColor(str)\n"
"QColor(Union[QColor, Qt.GlobalColor, QGradient])");


static pyqt5ClassPluginDef plugin_QColor = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QColor = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QColor,
        {SIP_NULLPTR},
        &plugin_QColor
    },
    {
        sipNameNr_QColor,
        {0, 0, 1},
        84, methods_QColor,
        7, enummembers_QColor,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QColor,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QColor,
    init_type_QColor,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QColor,
    assign_QColor,
    array_QColor,
    copy_QColor,
    release_QColor,
    SIP_NULLPTR,
    convertTo_QColor,
    SIP_NULLPTR,
    SIP_NULLPTR,
    pickle_QColor,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 83562 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 83566 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 83569 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 83572 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 83575 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 83578 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qimage.sip"
#include <qimage.h>
#line 83581 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 83584 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 83587 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 83590 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 83593 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 52 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 83596 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 83599 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 83602 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qimagereader.sip"
#include <qimagereader.h>
#line 83605 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 83608 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 83611 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQBitmap : public  ::QBitmap
{
public:
    sipQBitmap();
    sipQBitmap(const  ::QBitmap&);
    sipQBitmap(const  ::QPixmap&);
    sipQBitmap(int,int);
    sipQBitmap(const  ::QSize&);
    sipQBitmap(const  ::QString&,const char*);
    virtual ~sipQBitmap();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    int metric( ::QPaintDevice::PaintDeviceMetric) const SIP_OVERRIDE;
     ::QPaintEngine* paintEngine() const SIP_OVERRIDE;
    int devType() const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQBitmap(const sipQBitmap &);
    sipQBitmap &operator = (const sipQBitmap &);

    char sipPyMethods[3];
};

sipQBitmap::sipQBitmap():  ::QBitmap(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQBitmap::sipQBitmap(const  ::QBitmap& a0):  ::QBitmap(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQBitmap::sipQBitmap(const  ::QPixmap& a0):  ::QBitmap(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQBitmap::sipQBitmap(int a0,int a1):  ::QBitmap(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQBitmap::sipQBitmap(const  ::QSize& a0):  ::QBitmap(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQBitmap::sipQBitmap(const  ::QString& a0,const char*a1):  ::QBitmap(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQBitmap::~sipQBitmap()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

int sipQBitmap::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_metric);

    if (!sipMeth)
        return  ::QBitmap::metric(a0);

    extern int sipVH_QtGui_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_18(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QPaintEngine* sipQBitmap::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_paintEngine);

    if (!sipMeth)
        return  ::QBitmap::paintEngine();

    extern  ::QPaintEngine* sipVH_QtGui_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_17(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQBitmap::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,SIP_NULLPTR,sipName_devType);

    if (!sipMeth)
        return  ::QBitmap::devType();

    extern int sipVH_QtGui_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_8(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QBitmap_clear, "clear(self)");

extern "C" {static PyObject *meth_QBitmap_clear(PyObject *, PyObject *);}
static PyObject *meth_QBitmap_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBitmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBitmap, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBitmap, sipName_clear, doc_QBitmap_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBitmap_fromImage, "fromImage(QImage, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.AutoColor) -> QBitmap");

extern "C" {static PyObject *meth_QBitmap_fromImage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBitmap_fromImage(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage* a0;
         ::Qt::ImageConversionFlags a1def = Qt::AutoColor;
         ::Qt::ImageConversionFlags* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J9|J1", sipType_QImage, &a0, sipType_Qt_ImageConversionFlags, &a1, &a1State))
        {
             ::QBitmap*sipRes;

            sipRes = new  ::QBitmap( ::QBitmap::fromImage(*a0,*a1));
            sipReleaseType(a1,sipType_Qt_ImageConversionFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QBitmap,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBitmap, sipName_fromImage, doc_QBitmap_fromImage);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBitmap_fromData, "fromData(QSize, bytes, format: QImage.Format = QImage.Format_MonoLSB) -> QBitmap");

extern "C" {static PyObject *meth_QBitmap_fromData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBitmap_fromData(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
        const  ::uchar* a1;
         ::QImage::Format a2 = QImage::Format_MonoLSB;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J9s|E", sipType_QSize, &a0, &a1, sipType_QImage_Format, &a2))
        {
             ::QBitmap*sipRes;

            sipRes = new  ::QBitmap( ::QBitmap::fromData(*a0,a1,a2));

            return sipConvertFromNewType(sipRes,sipType_QBitmap,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBitmap, sipName_fromData, doc_QBitmap_fromData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBitmap_transformed, "transformed(self, QTransform) -> QBitmap");

extern "C" {static PyObject *meth_QBitmap_transformed(PyObject *, PyObject *);}
static PyObject *meth_QBitmap_transformed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform* a0;
        const  ::QBitmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QBitmap, &sipCpp, sipType_QTransform, &a0))
        {
             ::QBitmap*sipRes;

            sipRes = new  ::QBitmap(sipCpp->transformed(*a0));

            return sipConvertFromNewType(sipRes,sipType_QBitmap,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBitmap, sipName_transformed, doc_QBitmap_transformed);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBitmap_swap, "swap(self, QBitmap)");

extern "C" {static PyObject *meth_QBitmap_swap(PyObject *, PyObject *);}
static PyObject *meth_QBitmap_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBitmap* a0;
         ::QBitmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QBitmap, &sipCpp, sipType_QBitmap, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBitmap, sipName_swap, doc_QBitmap_swap);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QBitmap(void *, const sipTypeDef *);}
static void *cast_QBitmap(void *sipCppV, const sipTypeDef *targetType)
{
     ::QBitmap *sipCpp = reinterpret_cast< ::QBitmap *>(sipCppV);

    if (targetType == sipType_QPixmap)
        return static_cast< ::QPixmap *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QBitmap(void *, int);}
static void release_QBitmap(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQBitmap *>(sipCppV);
    else
        delete reinterpret_cast< ::QBitmap *>(sipCppV);
}


extern "C" {static void assign_QBitmap(void *, SIP_SSIZE_T, void *);}
static void assign_QBitmap(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QBitmap *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QBitmap *>(sipSrc);
}


extern "C" {static void *array_QBitmap(SIP_SSIZE_T);}
static void *array_QBitmap(SIP_SSIZE_T sipNrElem)
{
    return new  ::QBitmap[sipNrElem];
}


extern "C" {static void *copy_QBitmap(const void *, SIP_SSIZE_T);}
static void *copy_QBitmap(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QBitmap(reinterpret_cast<const  ::QBitmap *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QBitmap(sipSimpleWrapper *);}
static void dealloc_QBitmap(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQBitmap *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QBitmap(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QBitmap(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QBitmap(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQBitmap *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQBitmap();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QBitmap* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QBitmap, &a0))
        {
            sipCpp = new sipQBitmap(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QPixmap* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QPixmap, &a0))
        {
            sipCpp = new sipQBitmap(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        int a0;
        int a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "ii", &a0, &a1))
        {
            sipCpp = new sipQBitmap(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QSize* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QSize, &a0))
        {
            sipCpp = new sipQBitmap(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const char* a1 = 0;
        PyObject *a1Keep = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|AA", sipType_QString,&a0, &a0State, &a1Keep, &a1))
        {
            sipCpp = new sipQBitmap(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            Py_XDECREF(a1Keep);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QVariant* a0;
        PyObject *a0Wrapper;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "@J1", &a0Wrapper, sipType_QVariant, &a0, &a0State))
        {
            sipErrorState sipError = sipErrorNone;

#line 40 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qbitmap.sip"
        if (a0->canConvert<QBitmap>())
            sipCpp = new sipQBitmap(a0->value<QBitmap>());
        else
            sipError = sipBadCallableArg(0, a0Wrapper);
#line 84049 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            if (sipError == sipErrorNone)
            {
                sipCpp->sipPySelf = sipSelf;

                return sipCpp;
            }

            if (sipUnused)
            {
                Py_XDECREF(*sipUnused);
            }

            sipAddException(sipError, sipParseErr);

            if (sipError == sipErrorFail)
                return SIP_NULLPTR;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QBitmap[] = {{231, 255, 1}};


static PyMethodDef methods_QBitmap[] = {
    {SIP_MLNAME_CAST(sipName_clear), meth_QBitmap_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QBitmap_clear)},
    {SIP_MLNAME_CAST(sipName_fromData), SIP_MLMETH_CAST(meth_QBitmap_fromData), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QBitmap_fromData)},
    {SIP_MLNAME_CAST(sipName_fromImage), SIP_MLMETH_CAST(meth_QBitmap_fromImage), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QBitmap_fromImage)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QBitmap_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QBitmap_swap)},
    {SIP_MLNAME_CAST(sipName_transformed), meth_QBitmap_transformed, METH_VARARGS, SIP_MLDOC_CAST(doc_QBitmap_transformed)}
};

PyDoc_STRVAR(doc_QBitmap, "\1QBitmap()\n"
"QBitmap(QBitmap)\n"
"QBitmap(QPixmap)\n"
"QBitmap(int, int)\n"
"QBitmap(QSize)\n"
"QBitmap(str, format: str = None)\n"
"QBitmap(Any)");


static pyqt5ClassPluginDef plugin_QBitmap = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QBitmap = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QBitmap,
        {SIP_NULLPTR},
        &plugin_QBitmap
    },
    {
        sipNameNr_QBitmap,
        {0, 0, 1},
        5, methods_QBitmap,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QBitmap,
    -1,
    -1,
    supers_QBitmap,
    SIP_NULLPTR,
    init_type_QBitmap,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QBitmap,
    assign_QBitmap,
    array_QBitmap,
    copy_QBitmap,
    release_QBitmap,
    cast_QBitmap,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 84162 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 84166 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 84169 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 84172 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 84175 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 84178 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 84181 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 84184 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 84187 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 84190 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 52 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 84193 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 84196 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 84199 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qimage.sip"
#include <qimage.h>
#line 84202 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qimagereader.sip"
#include <qimagereader.h>
#line 84205 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 84208 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 84211 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQPixmap : public  ::QPixmap
{
public:
    sipQPixmap();
    sipQPixmap(int,int);
    sipQPixmap(const  ::QSize&);
    sipQPixmap(const  ::QString&,const char*, ::Qt::ImageConversionFlags);
    sipQPixmap(const char**);
    sipQPixmap(const  ::QPixmap&);
    virtual ~sipQPixmap();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    int devType() const SIP_OVERRIDE;
     ::QPaintEngine* paintEngine() const SIP_OVERRIDE;
    int metric( ::QPaintDevice::PaintDeviceMetric) const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPixmap(const sipQPixmap &);
    sipQPixmap &operator = (const sipQPixmap &);

    char sipPyMethods[3];
};

sipQPixmap::sipQPixmap():  ::QPixmap(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPixmap::sipQPixmap(int a0,int a1):  ::QPixmap(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPixmap::sipQPixmap(const  ::QSize& a0):  ::QPixmap(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPixmap::sipQPixmap(const  ::QString& a0,const char*a1, ::Qt::ImageConversionFlags a2):  ::QPixmap(a0,a1,a2), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPixmap::sipQPixmap(const char**a0):  ::QPixmap(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPixmap::sipQPixmap(const  ::QPixmap& a0):  ::QPixmap(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPixmap::~sipQPixmap()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

int sipQPixmap::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_devType);

    if (!sipMeth)
        return  ::QPixmap::devType();

    extern int sipVH_QtGui_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_8(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QPaintEngine* sipQPixmap::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_paintEngine);

    if (!sipMeth)
        return  ::QPixmap::paintEngine();

    extern  ::QPaintEngine* sipVH_QtGui_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_17(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQPixmap::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,SIP_NULLPTR,sipName_metric);

    if (!sipMeth)
        return  ::QPixmap::metric(a0);

    extern int sipVH_QtGui_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_18(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QPixmap_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QPixmap_isNull(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_isNull, doc_QPixmap_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_devType, "devType(self) -> int");

extern "C" {static PyObject *meth_QPixmap_devType(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_devType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QPixmap::devType() : sipCpp->devType());

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_devType, doc_QPixmap_devType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_width, "width(self) -> int");

extern "C" {static PyObject *meth_QPixmap_width(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->width();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_width, doc_QPixmap_width);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_height, "height(self) -> int");

extern "C" {static PyObject *meth_QPixmap_height(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_height(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->height();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_height, doc_QPixmap_height);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_size, "size(self) -> QSize");

extern "C" {static PyObject *meth_QPixmap_size(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->size());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_size, doc_QPixmap_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_rect, "rect(self) -> QRect");

extern "C" {static PyObject *meth_QPixmap_rect(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_rect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->rect());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_rect, doc_QPixmap_rect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_depth, "depth(self) -> int");

extern "C" {static PyObject *meth_QPixmap_depth(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_depth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->depth();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_depth, doc_QPixmap_depth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_defaultDepth, "defaultDepth() -> int");

extern "C" {static PyObject *meth_QPixmap_defaultDepth(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_defaultDepth(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            sipRes =  ::QPixmap::defaultDepth();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_defaultDepth, doc_QPixmap_defaultDepth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_fill, "fill(self, color: Union[QColor, Qt.GlobalColor, QGradient] = Qt.white)");

extern "C" {static PyObject *meth_QPixmap_fill(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_fill(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor& a0def = Qt::white;
        const  ::QColor* a0 = &a0def;
        int a0State = 0;
         ::QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            sipName_color,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->fill(*a0);
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_fill, doc_QPixmap_fill);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_mask, "mask(self) -> QBitmap");

extern "C" {static PyObject *meth_QPixmap_mask(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_mask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
             ::QBitmap*sipRes;

            sipRes = new  ::QBitmap(sipCpp->mask());

            return sipConvertFromNewType(sipRes,sipType_QBitmap,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_mask, doc_QPixmap_mask);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_setMask, "setMask(self, QBitmap)");

extern "C" {static PyObject *meth_QPixmap_setMask(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_setMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBitmap* a0;
         ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QBitmap, &a0))
        {
            sipCpp->setMask(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_setMask, doc_QPixmap_setMask);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_hasAlpha, "hasAlpha(self) -> bool");

extern "C" {static PyObject *meth_QPixmap_hasAlpha(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_hasAlpha(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasAlpha();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_hasAlpha, doc_QPixmap_hasAlpha);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_hasAlphaChannel, "hasAlphaChannel(self) -> bool");

extern "C" {static PyObject *meth_QPixmap_hasAlphaChannel(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_hasAlphaChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasAlphaChannel();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_hasAlphaChannel, doc_QPixmap_hasAlphaChannel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_createHeuristicMask, "createHeuristicMask(self, clipTight: bool = True) -> QBitmap");

extern "C" {static PyObject *meth_QPixmap_createHeuristicMask(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_createHeuristicMask(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0 = 1;
        const  ::QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            sipName_clipTight,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_QPixmap, &sipCpp, &a0))
        {
             ::QBitmap*sipRes;

            sipRes = new  ::QBitmap(sipCpp->createHeuristicMask(a0));

            return sipConvertFromNewType(sipRes,sipType_QBitmap,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_createHeuristicMask, doc_QPixmap_createHeuristicMask);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_createMaskFromColor, "createMaskFromColor(self, Union[QColor, Qt.GlobalColor, QGradient], mode: Qt.MaskMode = Qt.MaskInColor) -> QBitmap");

extern "C" {static PyObject *meth_QPixmap_createMaskFromColor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_createMaskFromColor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor* a0;
        int a0State = 0;
         ::Qt::MaskMode a1 = Qt::MaskInColor;
        const  ::QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QColor, &a0, &a0State, sipType_Qt_MaskMode, &a1))
        {
             ::QBitmap*sipRes;

            sipRes = new  ::QBitmap(sipCpp->createMaskFromColor(*a0,a1));
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            return sipConvertFromNewType(sipRes,sipType_QBitmap,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_createMaskFromColor, doc_QPixmap_createMaskFromColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_scaled, "scaled(self, int, int, aspectRatioMode: Qt.AspectRatioMode = Qt.IgnoreAspectRatio, transformMode: Qt.TransformationMode = Qt.FastTransformation) -> QPixmap\n"
"scaled(self, QSize, aspectRatioMode: Qt.AspectRatioMode = Qt.IgnoreAspectRatio, transformMode: Qt.TransformationMode = Qt.FastTransformation) -> QPixmap");

extern "C" {static PyObject *meth_QPixmap_scaled(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_scaled(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::Qt::AspectRatioMode a2 = Qt::IgnoreAspectRatio;
         ::Qt::TransformationMode a3 = Qt::FastTransformation;
        const  ::QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_aspectRatioMode,
            sipName_transformMode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|EE", &sipSelf, sipType_QPixmap, &sipCpp, &a0, &a1, sipType_Qt_AspectRatioMode, &a2, sipType_Qt_TransformationMode, &a3))
        {
             ::QPixmap*sipRes;

            sipRes = new  ::QPixmap(sipCpp->scaled(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
        }
    }

    {
        const  ::QSize* a0;
         ::Qt::AspectRatioMode a1 = Qt::IgnoreAspectRatio;
         ::Qt::TransformationMode a2 = Qt::FastTransformation;
        const  ::QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_aspectRatioMode,
            sipName_transformMode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|EE", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QSize, &a0, sipType_Qt_AspectRatioMode, &a1, sipType_Qt_TransformationMode, &a2))
        {
             ::QPixmap*sipRes;

            sipRes = new  ::QPixmap(sipCpp->scaled(*a0,a1,a2));

            return sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_scaled, doc_QPixmap_scaled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_scaledToWidth, "scaledToWidth(self, int, mode: Qt.TransformationMode = Qt.FastTransformation) -> QPixmap");

extern "C" {static PyObject *meth_QPixmap_scaledToWidth(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_scaledToWidth(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::Qt::TransformationMode a1 = Qt::FastTransformation;
        const  ::QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|E", &sipSelf, sipType_QPixmap, &sipCpp, &a0, sipType_Qt_TransformationMode, &a1))
        {
             ::QPixmap*sipRes;

            sipRes = new  ::QPixmap(sipCpp->scaledToWidth(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_scaledToWidth, doc_QPixmap_scaledToWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_scaledToHeight, "scaledToHeight(self, int, mode: Qt.TransformationMode = Qt.FastTransformation) -> QPixmap");

extern "C" {static PyObject *meth_QPixmap_scaledToHeight(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_scaledToHeight(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::Qt::TransformationMode a1 = Qt::FastTransformation;
        const  ::QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|E", &sipSelf, sipType_QPixmap, &sipCpp, &a0, sipType_Qt_TransformationMode, &a1))
        {
             ::QPixmap*sipRes;

            sipRes = new  ::QPixmap(sipCpp->scaledToHeight(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_scaledToHeight, doc_QPixmap_scaledToHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_toImage, "toImage(self) -> QImage");

extern "C" {static PyObject *meth_QPixmap_toImage(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_toImage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
             ::QImage*sipRes;

            sipRes = new  ::QImage(sipCpp->toImage());

            return sipConvertFromNewType(sipRes,sipType_QImage,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_toImage, doc_QPixmap_toImage);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_fromImage, "fromImage(QImage, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.AutoColor) -> QPixmap");

extern "C" {static PyObject *meth_QPixmap_fromImage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_fromImage(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage* a0;
         ::Qt::ImageConversionFlags a1def = Qt::AutoColor;
         ::Qt::ImageConversionFlags* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J9|J1", sipType_QImage, &a0, sipType_Qt_ImageConversionFlags, &a1, &a1State))
        {
             ::QPixmap*sipRes;

            sipRes = new  ::QPixmap( ::QPixmap::fromImage(*a0,*a1));
            sipReleaseType(a1,sipType_Qt_ImageConversionFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_fromImage, doc_QPixmap_fromImage);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_fromImageReader, "fromImageReader(QImageReader, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.AutoColor) -> QPixmap");

extern "C" {static PyObject *meth_QPixmap_fromImageReader(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_fromImageReader(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QImageReader* a0;
         ::Qt::ImageConversionFlags a1def = Qt::AutoColor;
         ::Qt::ImageConversionFlags* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8|J1", sipType_QImageReader, &a0, sipType_Qt_ImageConversionFlags, &a1, &a1State))
        {
             ::QPixmap*sipRes;

            sipRes = new  ::QPixmap( ::QPixmap::fromImageReader(a0,*a1));
            sipReleaseType(a1,sipType_Qt_ImageConversionFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_fromImageReader, doc_QPixmap_fromImageReader);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_convertFromImage, "convertFromImage(self, QImage, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.AutoColor) -> bool");

extern "C" {static PyObject *meth_QPixmap_convertFromImage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_convertFromImage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage* a0;
         ::Qt::ImageConversionFlags a1def = Qt::AutoColor;
         ::Qt::ImageConversionFlags* a1 = &a1def;
        int a1State = 0;
         ::QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|J1", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QImage, &a0, sipType_Qt_ImageConversionFlags, &a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->convertFromImage(*a0,*a1);
            sipReleaseType(a1,sipType_Qt_ImageConversionFlags,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_convertFromImage, doc_QPixmap_convertFromImage);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_load, "load(self, str, format: str = None, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.AutoColor) -> bool");

extern "C" {static PyObject *meth_QPixmap_load(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_load(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const char* a1 = 0;
        PyObject *a1Keep = 0;
         ::Qt::ImageConversionFlags a2def = Qt::AutoColor;
         ::Qt::ImageConversionFlags* a2 = &a2def;
        int a2State = 0;
         ::QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|AAJ1", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QString,&a0, &a0State, &a1Keep, &a1, sipType_Qt_ImageConversionFlags, &a2, &a2State))
        {
            bool sipRes;

            sipRes = sipCpp->load(*a0,a1,*a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            Py_XDECREF(a1Keep);
            sipReleaseType(a2,sipType_Qt_ImageConversionFlags,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_load, doc_QPixmap_load);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_loadFromData, "loadFromData(self, bytes, format: str = None, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.AutoColor) -> bool\n"
"loadFromData(self, Union[QByteArray, bytes, bytearray], format: str = None, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.AutoColor) -> bool");

extern "C" {static PyObject *meth_QPixmap_loadFromData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_loadFromData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::uchar* a0;
        SIP_SSIZE_T a1;
        const char* a2 = 0;
        PyObject *a2Keep = 0;
         ::Qt::ImageConversionFlags a3def = Qt::AutoColor;
         ::Qt::ImageConversionFlags* a3 = &a3def;
        int a3State = 0;
         ::QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_format,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bk|AAJ1", &sipSelf, sipType_QPixmap, &sipCpp, &a0, &a1, &a2Keep, &a2, sipType_Qt_ImageConversionFlags, &a3, &a3State))
        {
            bool sipRes;

            sipRes = sipCpp->loadFromData(a0,(uint)a1,a2,*a3);
            Py_XDECREF(a2Keep);
            sipReleaseType(a3,sipType_Qt_ImageConversionFlags,a3State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const char* a1 = 0;
        PyObject *a1Keep = 0;
         ::Qt::ImageConversionFlags a2def = Qt::AutoColor;
         ::Qt::ImageConversionFlags* a2 = &a2def;
        int a2State = 0;
         ::QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|AAJ1", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1Keep, &a1, sipType_Qt_ImageConversionFlags, &a2, &a2State))
        {
            bool sipRes;

            sipRes = sipCpp->loadFromData(*a0,a1,*a2);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);
            Py_XDECREF(a1Keep);
            sipReleaseType(a2,sipType_Qt_ImageConversionFlags,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_loadFromData, doc_QPixmap_loadFromData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_save, "save(self, str, format: str = None, quality: int = -1) -> bool\n"
"save(self, QIODevice, format: str = None, quality: int = -1) -> bool");

extern "C" {static PyObject *meth_QPixmap_save(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_save(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const char* a1 = 0;
        PyObject *a1Keep = 0;
        int a2 = -1;
        const  ::QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
            sipName_quality,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|AAi", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QString,&a0, &a0State, &a1Keep, &a1, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->save(*a0,a1,a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            Py_XDECREF(a1Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::QIODevice* a0;
        const char* a1 = 0;
        PyObject *a1Keep = 0;
        int a2 = -1;
        const  ::QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
            sipName_quality,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8|AAi", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QIODevice, &a0, &a1Keep, &a1, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->save(a0,a1,a2);
            Py_XDECREF(a1Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_save, doc_QPixmap_save);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_copy, "copy(self, rect: QRect = QRect()) -> QPixmap\n"
"copy(self, int, int, int, int) -> QPixmap");

extern "C" {static PyObject *meth_QPixmap_copy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_copy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect& a0def = QRect();
        const  ::QRect* a0 = &a0def;
        const  ::QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            sipName_rect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J9", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QRect, &a0))
        {
             ::QPixmap*sipRes;

            sipRes = new  ::QPixmap(sipCpp->copy(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const  ::QPixmap *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "Biiii", &sipSelf, sipType_QPixmap, &sipCpp, &a0, &a1, &a2, &a3))
        {
             ::QPixmap*sipRes;

            sipRes = new  ::QPixmap(sipCpp->copy(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_copy, doc_QPixmap_copy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_detach, "detach(self)");

extern "C" {static PyObject *meth_QPixmap_detach(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_detach(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
            sipCpp->detach();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_detach, doc_QPixmap_detach);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_isQBitmap, "isQBitmap(self) -> bool");

extern "C" {static PyObject *meth_QPixmap_isQBitmap(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_isQBitmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isQBitmap();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_isQBitmap, doc_QPixmap_isQBitmap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_paintEngine, "paintEngine(self) -> QPaintEngine");

extern "C" {static PyObject *meth_QPixmap_paintEngine(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_paintEngine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
             ::QPaintEngine*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QPixmap::paintEngine() : sipCpp->paintEngine());

            return sipConvertFromType(sipRes,sipType_QPaintEngine,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_paintEngine, doc_QPixmap_paintEngine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_metric, "metric(self, QPaintDevice.PaintDeviceMetric) -> int");

extern "C" {static PyObject *meth_QPixmap_metric(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_metric(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintDevice::PaintDeviceMetric a0;
        const  ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QPixmap::metric(a0) : sipCpp->metric(a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_metric, doc_QPixmap_metric);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_transformed, "transformed(self, QTransform, mode: Qt.TransformationMode = Qt.FastTransformation) -> QPixmap");

extern "C" {static PyObject *meth_QPixmap_transformed(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_transformed(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform* a0;
         ::Qt::TransformationMode a1 = Qt::FastTransformation;
        const  ::QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|E", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QTransform, &a0, sipType_Qt_TransformationMode, &a1))
        {
             ::QPixmap*sipRes;

            sipRes = new  ::QPixmap(sipCpp->transformed(*a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_transformed, doc_QPixmap_transformed);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_trueMatrix, "trueMatrix(QTransform, int, int) -> QTransform");

extern "C" {static PyObject *meth_QPixmap_trueMatrix(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_trueMatrix(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform* a0;
        int a1;
        int a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9ii", sipType_QTransform, &a0, &a1, &a2))
        {
             ::QTransform*sipRes;

            sipRes = new  ::QTransform( ::QPixmap::trueMatrix(*a0,a1,a2));

            return sipConvertFromNewType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_trueMatrix, doc_QPixmap_trueMatrix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_cacheKey, "cacheKey(self) -> int");

extern "C" {static PyObject *meth_QPixmap_cacheKey(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_cacheKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->cacheKey();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_cacheKey, doc_QPixmap_cacheKey);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_scroll, "scroll(self, int, int, QRect) -> QRegion\n"
"scroll(self, int, int, int, int, int, int) -> QRegion");

extern "C" {static PyObject *meth_QPixmap_scroll(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPixmap_scroll(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        const  ::QRect* a2;
         ::QRegion* a3;
         ::QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiiJ9", &sipSelf, sipType_QPixmap, &sipCpp, &a0, &a1, sipType_QRect, &a2))
        {
            a3 = new  ::QRegion();

            sipCpp->scroll(a0,a1,*a2,a3);

            return sipConvertFromNewType(a3,sipType_QRegion,SIP_NULLPTR);
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4;
        int a5;
         ::QRegion* a6;
         ::QPixmap *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiiiii", &sipSelf, sipType_QPixmap, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            a6 = new  ::QRegion();

            sipCpp->scroll(a0,a1,a2,a3,a4,a5,a6);

            return sipConvertFromNewType(a6,sipType_QRegion,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_scroll, doc_QPixmap_scroll);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_swap, "swap(self, QPixmap)");

extern "C" {static PyObject *meth_QPixmap_swap(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPixmap* a0;
         ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPixmap, &sipCpp, sipType_QPixmap, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_swap, doc_QPixmap_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_devicePixelRatio, "devicePixelRatio(self) -> float");

extern "C" {static PyObject *meth_QPixmap_devicePixelRatio(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_devicePixelRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmap, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->devicePixelRatio();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_devicePixelRatio, doc_QPixmap_devicePixelRatio);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmap_setDevicePixelRatio, "setDevicePixelRatio(self, float)");

extern "C" {static PyObject *meth_QPixmap_setDevicePixelRatio(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_setDevicePixelRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QPixmap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPixmap, &sipCpp, &a0))
        {
            sipCpp->setDevicePixelRatio(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmap, sipName_setDevicePixelRatio, doc_QPixmap_setDevicePixelRatio);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QPixmap(void *, const sipTypeDef *);}
static void *cast_QPixmap(void *sipCppV, const sipTypeDef *targetType)
{
     ::QPixmap *sipCpp = reinterpret_cast< ::QPixmap *>(sipCppV);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPixmap(void *, int);}
static void release_QPixmap(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQPixmap *>(sipCppV);
    else
        delete reinterpret_cast< ::QPixmap *>(sipCppV);
}


extern "C" {static void assign_QPixmap(void *, SIP_SSIZE_T, void *);}
static void assign_QPixmap(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QPixmap *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QPixmap *>(sipSrc);
}


extern "C" {static void *array_QPixmap(SIP_SSIZE_T);}
static void *array_QPixmap(SIP_SSIZE_T sipNrElem)
{
    return new  ::QPixmap[sipNrElem];
}


extern "C" {static void *copy_QPixmap(const void *, SIP_SSIZE_T);}
static void *copy_QPixmap(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QPixmap(reinterpret_cast<const  ::QPixmap *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPixmap(sipSimpleWrapper *);}
static void dealloc_QPixmap(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQPixmap *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPixmap(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QPixmap(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPixmap(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQPixmap *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQPixmap();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        int a0;
        int a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "ii", &a0, &a1))
        {
            sipCpp = new sipQPixmap(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QSize* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QSize, &a0))
        {
            sipCpp = new sipQPixmap(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const char* a1 = 0;
        PyObject *a1Keep = 0;
         ::Qt::ImageConversionFlags a2def = Qt::AutoColor;
         ::Qt::ImageConversionFlags* a2 = &a2def;
        int a2State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|AAJ1", sipType_QString,&a0, &a0State, &a1Keep, &a1, sipType_Qt_ImageConversionFlags, &a2, &a2State))
        {
            sipCpp = new sipQPixmap(*a0,a1,*a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            Py_XDECREF(a1Keep);
            sipReleaseType(a2,sipType_Qt_ImageConversionFlags,a2State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        PyObject * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "T", &PyList_Type, &a0))
        {
            int sipIsErr = 0;

#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpixmap.sip"
        // The Python interface is a list of strings that make up the image.
        
        const char **str = QtGui_ListToArray(a0);
        
        if (str)
        {
            sipCpp = new sipQPixmap(str);
            QtGui_DeleteArray(str);
        }
        else
            sipIsErr = 1;
#line 85785 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

            if (sipIsErr)
            {
                if (sipUnused)
                {
                    Py_XDECREF(*sipUnused);
                }

                sipAddException(sipErrorFail, sipParseErr);
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QPixmap* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QPixmap, &a0))
        {
            sipCpp = new sipQPixmap(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QVariant* a0;
        PyObject *a0Wrapper;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "@J1", &a0Wrapper, sipType_QVariant, &a0, &a0State))
        {
            sipErrorState sipError = sipErrorNone;

#line 52 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpixmap.sip"
        if (a0->canConvert<QPixmap>())
            sipCpp = new sipQPixmap(a0->value<QPixmap>());
        else
            sipError = sipBadCallableArg(0, a0Wrapper);
#line 85831 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            if (sipError == sipErrorNone)
            {
                sipCpp->sipPySelf = sipSelf;

                return sipCpp;
            }

            if (sipUnused)
            {
                Py_XDECREF(*sipUnused);
            }

            sipAddException(sipError, sipParseErr);

            if (sipError == sipErrorFail)
                return SIP_NULLPTR;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QPixmap[] = {{191, 255, 1}};


static PyMethodDef methods_QPixmap[] = {
    {SIP_MLNAME_CAST(sipName_cacheKey), meth_QPixmap_cacheKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_cacheKey)},
    {SIP_MLNAME_CAST(sipName_convertFromImage), SIP_MLMETH_CAST(meth_QPixmap_convertFromImage), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPixmap_convertFromImage)},
    {SIP_MLNAME_CAST(sipName_copy), SIP_MLMETH_CAST(meth_QPixmap_copy), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPixmap_copy)},
    {SIP_MLNAME_CAST(sipName_createHeuristicMask), SIP_MLMETH_CAST(meth_QPixmap_createHeuristicMask), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPixmap_createHeuristicMask)},
    {SIP_MLNAME_CAST(sipName_createMaskFromColor), SIP_MLMETH_CAST(meth_QPixmap_createMaskFromColor), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPixmap_createMaskFromColor)},
    {SIP_MLNAME_CAST(sipName_defaultDepth), meth_QPixmap_defaultDepth, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_defaultDepth)},
    {SIP_MLNAME_CAST(sipName_depth), meth_QPixmap_depth, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_depth)},
    {SIP_MLNAME_CAST(sipName_detach), meth_QPixmap_detach, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_detach)},
    {SIP_MLNAME_CAST(sipName_devType), meth_QPixmap_devType, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_devType)},
    {SIP_MLNAME_CAST(sipName_devicePixelRatio), meth_QPixmap_devicePixelRatio, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_devicePixelRatio)},
    {SIP_MLNAME_CAST(sipName_fill), SIP_MLMETH_CAST(meth_QPixmap_fill), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPixmap_fill)},
    {SIP_MLNAME_CAST(sipName_fromImage), SIP_MLMETH_CAST(meth_QPixmap_fromImage), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPixmap_fromImage)},
    {SIP_MLNAME_CAST(sipName_fromImageReader), SIP_MLMETH_CAST(meth_QPixmap_fromImageReader), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPixmap_fromImageReader)},
    {SIP_MLNAME_CAST(sipName_hasAlpha), meth_QPixmap_hasAlpha, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_hasAlpha)},
    {SIP_MLNAME_CAST(sipName_hasAlphaChannel), meth_QPixmap_hasAlphaChannel, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_hasAlphaChannel)},
    {SIP_MLNAME_CAST(sipName_height), meth_QPixmap_height, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_height)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QPixmap_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_isNull)},
    {SIP_MLNAME_CAST(sipName_isQBitmap), meth_QPixmap_isQBitmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_isQBitmap)},
    {SIP_MLNAME_CAST(sipName_load), SIP_MLMETH_CAST(meth_QPixmap_load), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPixmap_load)},
    {SIP_MLNAME_CAST(sipName_loadFromData), SIP_MLMETH_CAST(meth_QPixmap_loadFromData), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPixmap_loadFromData)},
    {SIP_MLNAME_CAST(sipName_mask), meth_QPixmap_mask, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_mask)},
    {SIP_MLNAME_CAST(sipName_metric), meth_QPixmap_metric, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_metric)},
    {SIP_MLNAME_CAST(sipName_paintEngine), meth_QPixmap_paintEngine, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_paintEngine)},
    {SIP_MLNAME_CAST(sipName_rect), meth_QPixmap_rect, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_rect)},
    {SIP_MLNAME_CAST(sipName_save), SIP_MLMETH_CAST(meth_QPixmap_save), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPixmap_save)},
    {SIP_MLNAME_CAST(sipName_scaled), SIP_MLMETH_CAST(meth_QPixmap_scaled), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPixmap_scaled)},
    {SIP_MLNAME_CAST(sipName_scaledToHeight), SIP_MLMETH_CAST(meth_QPixmap_scaledToHeight), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPixmap_scaledToHeight)},
    {SIP_MLNAME_CAST(sipName_scaledToWidth), SIP_MLMETH_CAST(meth_QPixmap_scaledToWidth), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPixmap_scaledToWidth)},
    {SIP_MLNAME_CAST(sipName_scroll), SIP_MLMETH_CAST(meth_QPixmap_scroll), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPixmap_scroll)},
    {SIP_MLNAME_CAST(sipName_setDevicePixelRatio), meth_QPixmap_setDevicePixelRatio, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_setDevicePixelRatio)},
    {SIP_MLNAME_CAST(sipName_setMask), meth_QPixmap_setMask, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_setMask)},
    {SIP_MLNAME_CAST(sipName_size), meth_QPixmap_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_size)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QPixmap_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_swap)},
    {SIP_MLNAME_CAST(sipName_toImage), meth_QPixmap_toImage, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_toImage)},
    {SIP_MLNAME_CAST(sipName_transformed), SIP_MLMETH_CAST(meth_QPixmap_transformed), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPixmap_transformed)},
    {SIP_MLNAME_CAST(sipName_trueMatrix), meth_QPixmap_trueMatrix, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_trueMatrix)},
    {SIP_MLNAME_CAST(sipName_width), meth_QPixmap_width, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmap_width)}
};

PyDoc_STRVAR(doc_QPixmap, "\1QPixmap()\n"
"QPixmap(int, int)\n"
"QPixmap(QSize)\n"
"QPixmap(str, format: str = None, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.AutoColor)\n"
"QPixmap(List[str])\n"
"QPixmap(QPixmap)\n"
"QPixmap(Any)");


static pyqt5ClassPluginDef plugin_QPixmap = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QPixmap = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPixmap,
        {SIP_NULLPTR},
        &plugin_QPixmap
    },
    {
        sipNameNr_QPixmap,
        {0, 0, 1},
        37, methods_QPixmap,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPixmap,
    -1,
    -1,
    supers_QPixmap,
    SIP_NULLPTR,
    init_type_QPixmap,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QPixmap,
    assign_QPixmap,
    array_QPixmap,
    copy_QPixmap,
    release_QPixmap,
    cast_QPixmap,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qbackingstore.sip"
#include <qbackingstore.h>
#line 85976 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 85980 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 85983 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 85986 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 85989 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 85992 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


PyDoc_STRVAR(doc_QBackingStore_window, "window(self) -> QWindow");

extern "C" {static PyObject *meth_QBackingStore_window(PyObject *, PyObject *);}
static PyObject *meth_QBackingStore_window(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBackingStore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBackingStore, &sipCpp))
        {
             ::QWindow*sipRes;

            sipRes = sipCpp->window();

            return sipConvertFromType(sipRes,sipType_QWindow,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBackingStore, sipName_window, doc_QBackingStore_window);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBackingStore_paintDevice, "paintDevice(self) -> QPaintDevice");

extern "C" {static PyObject *meth_QBackingStore_paintDevice(PyObject *, PyObject *);}
static PyObject *meth_QBackingStore_paintDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBackingStore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBackingStore, &sipCpp))
        {
             ::QPaintDevice*sipRes;

            sipRes = sipCpp->paintDevice();

            return sipConvertFromType(sipRes,sipType_QPaintDevice,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBackingStore, sipName_paintDevice, doc_QBackingStore_paintDevice);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBackingStore_flush, "flush(self, QRegion, window: QWindow = None, offset: QPoint = QPoint())");

extern "C" {static PyObject *meth_QBackingStore_flush(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBackingStore_flush(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegion* a0;
         ::QWindow* a1 = 0;
        const  ::QPoint& a2def = QPoint();
        const  ::QPoint* a2 = &a2def;
         ::QBackingStore *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_window,
            sipName_offset,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|J8J9", &sipSelf, sipType_QBackingStore, &sipCpp, sipType_QRegion, &a0, sipType_QWindow, &a1, sipType_QPoint, &a2))
        {
            sipCpp->flush(*a0,a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBackingStore, sipName_flush, doc_QBackingStore_flush);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBackingStore_resize, "resize(self, QSize)");

extern "C" {static PyObject *meth_QBackingStore_resize(PyObject *, PyObject *);}
static PyObject *meth_QBackingStore_resize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
         ::QBackingStore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QBackingStore, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->resize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBackingStore, sipName_resize, doc_QBackingStore_resize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBackingStore_size, "size(self) -> QSize");

extern "C" {static PyObject *meth_QBackingStore_size(PyObject *, PyObject *);}
static PyObject *meth_QBackingStore_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBackingStore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBackingStore, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->size());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBackingStore, sipName_size, doc_QBackingStore_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBackingStore_scroll, "scroll(self, QRegion, int, int) -> bool");

extern "C" {static PyObject *meth_QBackingStore_scroll(PyObject *, PyObject *);}
static PyObject *meth_QBackingStore_scroll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegion* a0;
        int a1;
        int a2;
         ::QBackingStore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9ii", &sipSelf, sipType_QBackingStore, &sipCpp, sipType_QRegion, &a0, &a1, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->scroll(*a0,a1,a2);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBackingStore, sipName_scroll, doc_QBackingStore_scroll);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBackingStore_beginPaint, "beginPaint(self, QRegion)");

extern "C" {static PyObject *meth_QBackingStore_beginPaint(PyObject *, PyObject *);}
static PyObject *meth_QBackingStore_beginPaint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegion* a0;
         ::QBackingStore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QBackingStore, &sipCpp, sipType_QRegion, &a0))
        {
            sipCpp->beginPaint(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBackingStore, sipName_beginPaint, doc_QBackingStore_beginPaint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBackingStore_endPaint, "endPaint(self)");

extern "C" {static PyObject *meth_QBackingStore_endPaint(PyObject *, PyObject *);}
static PyObject *meth_QBackingStore_endPaint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBackingStore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBackingStore, &sipCpp))
        {
            sipCpp->endPaint();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBackingStore, sipName_endPaint, doc_QBackingStore_endPaint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBackingStore_setStaticContents, "setStaticContents(self, QRegion)");

extern "C" {static PyObject *meth_QBackingStore_setStaticContents(PyObject *, PyObject *);}
static PyObject *meth_QBackingStore_setStaticContents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegion* a0;
         ::QBackingStore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QBackingStore, &sipCpp, sipType_QRegion, &a0))
        {
            sipCpp->setStaticContents(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBackingStore, sipName_setStaticContents, doc_QBackingStore_setStaticContents);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBackingStore_staticContents, "staticContents(self) -> QRegion");

extern "C" {static PyObject *meth_QBackingStore_staticContents(PyObject *, PyObject *);}
static PyObject *meth_QBackingStore_staticContents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBackingStore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBackingStore, &sipCpp))
        {
             ::QRegion*sipRes;

            sipRes = new  ::QRegion(sipCpp->staticContents());

            return sipConvertFromNewType(sipRes,sipType_QRegion,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBackingStore, sipName_staticContents, doc_QBackingStore_staticContents);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBackingStore_hasStaticContents, "hasStaticContents(self) -> bool");

extern "C" {static PyObject *meth_QBackingStore_hasStaticContents(PyObject *, PyObject *);}
static PyObject *meth_QBackingStore_hasStaticContents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBackingStore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBackingStore, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasStaticContents();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBackingStore, sipName_hasStaticContents, doc_QBackingStore_hasStaticContents);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QBackingStore(void *, int);}
static void release_QBackingStore(void *sipCppV, int)
{
    delete reinterpret_cast< ::QBackingStore *>(sipCppV);
}


extern "C" {static void dealloc_QBackingStore(sipSimpleWrapper *);}
static void dealloc_QBackingStore(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QBackingStore(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QBackingStore(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QBackingStore(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QBackingStore *sipCpp = SIP_NULLPTR;

    {
         ::QWindow* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8", sipType_QWindow, &a0))
        {
            sipCpp = new  ::QBackingStore(a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QBackingStore[] = {
    {SIP_MLNAME_CAST(sipName_beginPaint), meth_QBackingStore_beginPaint, METH_VARARGS, SIP_MLDOC_CAST(doc_QBackingStore_beginPaint)},
    {SIP_MLNAME_CAST(sipName_endPaint), meth_QBackingStore_endPaint, METH_VARARGS, SIP_MLDOC_CAST(doc_QBackingStore_endPaint)},
    {SIP_MLNAME_CAST(sipName_flush), SIP_MLMETH_CAST(meth_QBackingStore_flush), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QBackingStore_flush)},
    {SIP_MLNAME_CAST(sipName_hasStaticContents), meth_QBackingStore_hasStaticContents, METH_VARARGS, SIP_MLDOC_CAST(doc_QBackingStore_hasStaticContents)},
    {SIP_MLNAME_CAST(sipName_paintDevice), meth_QBackingStore_paintDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QBackingStore_paintDevice)},
    {SIP_MLNAME_CAST(sipName_resize), meth_QBackingStore_resize, METH_VARARGS, SIP_MLDOC_CAST(doc_QBackingStore_resize)},
    {SIP_MLNAME_CAST(sipName_scroll), meth_QBackingStore_scroll, METH_VARARGS, SIP_MLDOC_CAST(doc_QBackingStore_scroll)},
    {SIP_MLNAME_CAST(sipName_setStaticContents), meth_QBackingStore_setStaticContents, METH_VARARGS, SIP_MLDOC_CAST(doc_QBackingStore_setStaticContents)},
    {SIP_MLNAME_CAST(sipName_size), meth_QBackingStore_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QBackingStore_size)},
    {SIP_MLNAME_CAST(sipName_staticContents), meth_QBackingStore_staticContents, METH_VARARGS, SIP_MLDOC_CAST(doc_QBackingStore_staticContents)},
    {SIP_MLNAME_CAST(sipName_window), meth_QBackingStore_window, METH_VARARGS, SIP_MLDOC_CAST(doc_QBackingStore_window)}
};

PyDoc_STRVAR(doc_QBackingStore, "\1QBackingStore(QWindow)");


static pyqt5ClassPluginDef plugin_QBackingStore = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QBackingStore = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QBackingStore,
        {SIP_NULLPTR},
        &plugin_QBackingStore
    },
    {
        sipNameNr_QBackingStore,
        {0, 0, 1},
        11, methods_QBackingStore,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QBackingStore,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QBackingStore,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QBackingStore,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QBackingStore,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 97 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 86429 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 86433 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 86436 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 86439 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 86442 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 97 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 86445 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQTextObjectInterface : public  ::QTextObjectInterface
{
public:
    sipQTextObjectInterface();
    sipQTextObjectInterface(const  ::QTextObjectInterface&);
    virtual ~sipQTextObjectInterface();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void drawObject( ::QPainter*,const  ::QRectF&, ::QTextDocument*,int,const  ::QTextFormat&) SIP_OVERRIDE;
     ::QSizeF intrinsicSize( ::QTextDocument*,int,const  ::QTextFormat&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTextObjectInterface(const sipQTextObjectInterface &);
    sipQTextObjectInterface &operator = (const sipQTextObjectInterface &);

    char sipPyMethods[2];
};

sipQTextObjectInterface::sipQTextObjectInterface():  ::QTextObjectInterface(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTextObjectInterface::sipQTextObjectInterface(const  ::QTextObjectInterface& a0):  ::QTextObjectInterface(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTextObjectInterface::~sipQTextObjectInterface()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

void sipQTextObjectInterface::drawObject( ::QPainter*a0,const  ::QRectF& a1, ::QTextDocument*a2,int a3,const  ::QTextFormat& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QTextObjectInterface,sipName_drawObject);

    if (!sipMeth)
        return;

    extern void sipVH_QtGui_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*,const  ::QRectF&, ::QTextDocument*,int,const  ::QTextFormat&);

    sipVH_QtGui_16(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

 ::QSizeF sipQTextObjectInterface::intrinsicSize( ::QTextDocument*a0,int a1,const  ::QTextFormat& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,sipName_QTextObjectInterface,sipName_intrinsicSize);

    if (!sipMeth)
        return  ::QSizeF();

    extern  ::QSizeF sipVH_QtGui_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTextDocument*,int,const  ::QTextFormat&);

    return sipVH_QtGui_15(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}


PyDoc_STRVAR(doc_QTextObjectInterface_intrinsicSize, "intrinsicSize(self, QTextDocument, int, QTextFormat) -> QSizeF");

extern "C" {static PyObject *meth_QTextObjectInterface_intrinsicSize(PyObject *, PyObject *);}
static PyObject *meth_QTextObjectInterface_intrinsicSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QTextDocument* a0;
        int a1;
        const  ::QTextFormat* a2;
         ::QTextObjectInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8iJ9", &sipSelf, sipType_QTextObjectInterface, &sipCpp, sipType_QTextDocument, &a0, &a1, sipType_QTextFormat, &a2))
        {
             ::QSizeF*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QTextObjectInterface, sipName_intrinsicSize);
                return SIP_NULLPTR;
            }

            sipRes = new  ::QSizeF(sipCpp->intrinsicSize(a0,a1,*a2));

            return sipConvertFromNewType(sipRes,sipType_QSizeF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextObjectInterface, sipName_intrinsicSize, doc_QTextObjectInterface_intrinsicSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextObjectInterface_drawObject, "drawObject(self, QPainter, QRectF, QTextDocument, int, QTextFormat)");

extern "C" {static PyObject *meth_QTextObjectInterface_drawObject(PyObject *, PyObject *);}
static PyObject *meth_QTextObjectInterface_drawObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QPainter* a0;
        const  ::QRectF* a1;
         ::QTextDocument* a2;
        int a3;
        const  ::QTextFormat* a4;
         ::QTextObjectInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J9J8iJ9", &sipSelf, sipType_QTextObjectInterface, &sipCpp, sipType_QPainter, &a0, sipType_QRectF, &a1, sipType_QTextDocument, &a2, &a3, sipType_QTextFormat, &a4))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QTextObjectInterface, sipName_drawObject);
                return SIP_NULLPTR;
            }

            sipCpp->drawObject(a0,*a1,a2,a3,*a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextObjectInterface, sipName_drawObject, doc_QTextObjectInterface_drawObject);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextObjectInterface(void *, int);}
static void release_QTextObjectInterface(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQTextObjectInterface *>(sipCppV);
    else
        delete reinterpret_cast< ::QTextObjectInterface *>(sipCppV);
}


extern "C" {static int mixin_QTextObjectInterface(PyObject *, PyObject *, PyObject *);}
static int mixin_QTextObjectInterface(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    return sipInitMixin(sipSelf, sipArgs, sipKwds, (sipClassTypeDef *)&sipTypeDef_QtGui_QTextObjectInterface);
}


extern "C" {static void dealloc_QTextObjectInterface(sipSimpleWrapper *);}
static void dealloc_QTextObjectInterface(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQTextObjectInterface *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextObjectInterface(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QTextObjectInterface(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextObjectInterface(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQTextObjectInterface *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQTextObjectInterface();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QTextObjectInterface* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTextObjectInterface, &a0))
        {
            sipCpp = new sipQTextObjectInterface(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QTextObjectInterface[] = {
    {SIP_MLNAME_CAST(sipName_drawObject), meth_QTextObjectInterface_drawObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextObjectInterface_drawObject)},
    {SIP_MLNAME_CAST(sipName_intrinsicSize), meth_QTextObjectInterface_intrinsicSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextObjectInterface_intrinsicSize)}
};

PyDoc_STRVAR(doc_QTextObjectInterface, "\1QTextObjectInterface()\n"
"QTextObjectInterface(QTextObjectInterface)");


static pyqt5ClassPluginDef plugin_QTextObjectInterface = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    "org.qt-project.Qt.QTextObjectInterface"
};


sipClassTypeDef sipTypeDef_QtGui_QTextObjectInterface = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextObjectInterface,
        {SIP_NULLPTR},
        &plugin_QTextObjectInterface
    },
    {
        sipNameNr_QTextObjectInterface,
        {0, 0, 1},
        2, methods_QTextObjectInterface,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextObjectInterface,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QTextObjectInterface,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextObjectInterface,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QTextObjectInterface,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    mixin_QTextObjectInterface
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 46 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 86732 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 86736 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 86739 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 86742 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 86747 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractTextDocumentLayout_PaintContext(void *, int);}
static void release_QAbstractTextDocumentLayout_PaintContext(void *sipCppV, int)
{
    delete reinterpret_cast< ::QAbstractTextDocumentLayout::PaintContext *>(sipCppV);
}


extern "C" {static void assign_QAbstractTextDocumentLayout_PaintContext(void *, SIP_SSIZE_T, void *);}
static void assign_QAbstractTextDocumentLayout_PaintContext(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QAbstractTextDocumentLayout::PaintContext *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QAbstractTextDocumentLayout::PaintContext *>(sipSrc);
}


extern "C" {static void *array_QAbstractTextDocumentLayout_PaintContext(SIP_SSIZE_T);}
static void *array_QAbstractTextDocumentLayout_PaintContext(SIP_SSIZE_T sipNrElem)
{
    return new  ::QAbstractTextDocumentLayout::PaintContext[sipNrElem];
}


extern "C" {static void *copy_QAbstractTextDocumentLayout_PaintContext(const void *, SIP_SSIZE_T);}
static void *copy_QAbstractTextDocumentLayout_PaintContext(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QAbstractTextDocumentLayout::PaintContext(reinterpret_cast<const  ::QAbstractTextDocumentLayout::PaintContext *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QAbstractTextDocumentLayout_PaintContext(sipSimpleWrapper *);}
static void dealloc_QAbstractTextDocumentLayout_PaintContext(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QAbstractTextDocumentLayout_PaintContext(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QAbstractTextDocumentLayout_PaintContext(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractTextDocumentLayout_PaintContext(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QAbstractTextDocumentLayout::PaintContext *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QAbstractTextDocumentLayout::PaintContext();

            return sipCpp;
        }
    }

    {
        const  ::QAbstractTextDocumentLayout::PaintContext* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QAbstractTextDocumentLayout_PaintContext, &a0))
        {
            sipCpp = new  ::QAbstractTextDocumentLayout::PaintContext(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static PyObject *varget_QAbstractTextDocumentLayout_PaintContext_clip(void *, PyObject *, PyObject *);}
static PyObject *varget_QAbstractTextDocumentLayout_PaintContext_clip(void *sipSelf, PyObject *, PyObject *)
{
     ::QRectF*sipVal;
     ::QAbstractTextDocumentLayout::PaintContext *sipCpp = reinterpret_cast< ::QAbstractTextDocumentLayout::PaintContext *>(sipSelf);

    sipVal = &sipCpp->clip;

    return sipConvertFromType(sipVal, sipType_QRectF, SIP_NULLPTR);
}


extern "C" {static int varset_QAbstractTextDocumentLayout_PaintContext_clip(void *, PyObject *, PyObject *);}
static int varset_QAbstractTextDocumentLayout_PaintContext_clip(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::QRectF*sipVal;
     ::QAbstractTextDocumentLayout::PaintContext *sipCpp = reinterpret_cast< ::QAbstractTextDocumentLayout::PaintContext *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::QRectF *>(sipForceConvertToType(sipPy, sipType_QRectF, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->clip = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QAbstractTextDocumentLayout_PaintContext_cursorPosition(void *, PyObject *, PyObject *);}
static PyObject *varget_QAbstractTextDocumentLayout_PaintContext_cursorPosition(void *sipSelf, PyObject *, PyObject *)
{
    int sipVal;
     ::QAbstractTextDocumentLayout::PaintContext *sipCpp = reinterpret_cast< ::QAbstractTextDocumentLayout::PaintContext *>(sipSelf);

    sipVal = sipCpp->cursorPosition;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_QAbstractTextDocumentLayout_PaintContext_cursorPosition(void *, PyObject *, PyObject *);}
static int varset_QAbstractTextDocumentLayout_PaintContext_cursorPosition(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
     ::QAbstractTextDocumentLayout::PaintContext *sipCpp = reinterpret_cast< ::QAbstractTextDocumentLayout::PaintContext *>(sipSelf);

    sipVal = sipLong_AsInt(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->cursorPosition = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QAbstractTextDocumentLayout_PaintContext_palette(void *, PyObject *, PyObject *);}
static PyObject *varget_QAbstractTextDocumentLayout_PaintContext_palette(void *sipSelf, PyObject *, PyObject *)
{
     ::QPalette*sipVal;
     ::QAbstractTextDocumentLayout::PaintContext *sipCpp = reinterpret_cast< ::QAbstractTextDocumentLayout::PaintContext *>(sipSelf);

    sipVal = &sipCpp->palette;

    return sipConvertFromType(sipVal, sipType_QPalette, SIP_NULLPTR);
}


extern "C" {static int varset_QAbstractTextDocumentLayout_PaintContext_palette(void *, PyObject *, PyObject *);}
static int varset_QAbstractTextDocumentLayout_PaintContext_palette(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::QPalette*sipVal;
     ::QAbstractTextDocumentLayout::PaintContext *sipCpp = reinterpret_cast< ::QAbstractTextDocumentLayout::PaintContext *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::QPalette *>(sipForceConvertToType(sipPy, sipType_QPalette, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->palette = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QAbstractTextDocumentLayout_PaintContext_selections(void *, PyObject *, PyObject *);}
static PyObject *varget_QAbstractTextDocumentLayout_PaintContext_selections(void *sipSelf, PyObject *, PyObject *)
{
    QVector< ::QAbstractTextDocumentLayout::Selection>*sipVal;
     ::QAbstractTextDocumentLayout::PaintContext *sipCpp = reinterpret_cast< ::QAbstractTextDocumentLayout::PaintContext *>(sipSelf);

    sipVal = &sipCpp->selections;

    return sipConvertFromType(sipVal, sipType_QVector_0100QAbstractTextDocumentLayout_Selection, SIP_NULLPTR);
}


extern "C" {static int varset_QAbstractTextDocumentLayout_PaintContext_selections(void *, PyObject *, PyObject *);}
static int varset_QAbstractTextDocumentLayout_PaintContext_selections(void *sipSelf, PyObject *sipPy, PyObject *)
{
    QVector< ::QAbstractTextDocumentLayout::Selection>*sipVal;
     ::QAbstractTextDocumentLayout::PaintContext *sipCpp = reinterpret_cast< ::QAbstractTextDocumentLayout::PaintContext *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<QVector< ::QAbstractTextDocumentLayout::Selection> *>(sipForceConvertToType(sipPy, sipType_QVector_0100QAbstractTextDocumentLayout_Selection, SIP_NULLPTR, SIP_NOT_NONE, &sipValState, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->selections = *sipVal;

    sipReleaseType(sipVal, sipType_QVector_0100QAbstractTextDocumentLayout_Selection, sipValState);

    return 0;
}

sipVariableDef variables_QAbstractTextDocumentLayout_PaintContext[] = {
    {InstanceVariable, sipName_clip, (PyMethodDef *)varget_QAbstractTextDocumentLayout_PaintContext_clip, (PyMethodDef *)varset_QAbstractTextDocumentLayout_PaintContext_clip, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_cursorPosition, (PyMethodDef *)varget_QAbstractTextDocumentLayout_PaintContext_cursorPosition, (PyMethodDef *)varset_QAbstractTextDocumentLayout_PaintContext_cursorPosition, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_palette, (PyMethodDef *)varget_QAbstractTextDocumentLayout_PaintContext_palette, (PyMethodDef *)varset_QAbstractTextDocumentLayout_PaintContext_palette, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_selections, (PyMethodDef *)varget_QAbstractTextDocumentLayout_PaintContext_selections, (PyMethodDef *)varset_QAbstractTextDocumentLayout_PaintContext_selections, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_PaintContext, "\1QAbstractTextDocumentLayout.PaintContext()\n"
"QAbstractTextDocumentLayout.PaintContext(QAbstractTextDocumentLayout.PaintContext)");


static pyqt5ClassPluginDef plugin_QAbstractTextDocumentLayout_PaintContext = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QAbstractTextDocumentLayout_PaintContext = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QAbstractTextDocumentLayout__PaintContext,
        {SIP_NULLPTR},
        &plugin_QAbstractTextDocumentLayout_PaintContext
    },
    {
        sipNameNr_PaintContext,
        {1, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        4, variables_QAbstractTextDocumentLayout_PaintContext,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QAbstractTextDocumentLayout_PaintContext,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QAbstractTextDocumentLayout_PaintContext,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QAbstractTextDocumentLayout_PaintContext,
    assign_QAbstractTextDocumentLayout_PaintContext,
    array_QAbstractTextDocumentLayout_PaintContext,
    copy_QAbstractTextDocumentLayout_PaintContext,
    release_QAbstractTextDocumentLayout_PaintContext,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 87016 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextcursor.sip"
#include <qtextcursor.h>
#line 87020 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 255 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 87023 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractTextDocumentLayout_Selection(void *, int);}
static void release_QAbstractTextDocumentLayout_Selection(void *sipCppV, int)
{
    delete reinterpret_cast< ::QAbstractTextDocumentLayout::Selection *>(sipCppV);
}


extern "C" {static void assign_QAbstractTextDocumentLayout_Selection(void *, SIP_SSIZE_T, void *);}
static void assign_QAbstractTextDocumentLayout_Selection(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QAbstractTextDocumentLayout::Selection *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QAbstractTextDocumentLayout::Selection *>(sipSrc);
}


extern "C" {static void *array_QAbstractTextDocumentLayout_Selection(SIP_SSIZE_T);}
static void *array_QAbstractTextDocumentLayout_Selection(SIP_SSIZE_T sipNrElem)
{
    return new  ::QAbstractTextDocumentLayout::Selection[sipNrElem];
}


extern "C" {static void *copy_QAbstractTextDocumentLayout_Selection(const void *, SIP_SSIZE_T);}
static void *copy_QAbstractTextDocumentLayout_Selection(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QAbstractTextDocumentLayout::Selection(reinterpret_cast<const  ::QAbstractTextDocumentLayout::Selection *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QAbstractTextDocumentLayout_Selection(sipSimpleWrapper *);}
static void dealloc_QAbstractTextDocumentLayout_Selection(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QAbstractTextDocumentLayout_Selection(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QAbstractTextDocumentLayout_Selection(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractTextDocumentLayout_Selection(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QAbstractTextDocumentLayout::Selection *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QAbstractTextDocumentLayout::Selection();

            return sipCpp;
        }
    }

    {
        const  ::QAbstractTextDocumentLayout::Selection* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QAbstractTextDocumentLayout_Selection, &a0))
        {
            sipCpp = new  ::QAbstractTextDocumentLayout::Selection(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static PyObject *varget_QAbstractTextDocumentLayout_Selection_cursor(void *, PyObject *, PyObject *);}
static PyObject *varget_QAbstractTextDocumentLayout_Selection_cursor(void *sipSelf, PyObject *, PyObject *)
{
     ::QTextCursor*sipVal;
     ::QAbstractTextDocumentLayout::Selection *sipCpp = reinterpret_cast< ::QAbstractTextDocumentLayout::Selection *>(sipSelf);

    sipVal = &sipCpp->cursor;

    return sipConvertFromType(sipVal, sipType_QTextCursor, SIP_NULLPTR);
}


extern "C" {static int varset_QAbstractTextDocumentLayout_Selection_cursor(void *, PyObject *, PyObject *);}
static int varset_QAbstractTextDocumentLayout_Selection_cursor(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::QTextCursor*sipVal;
     ::QAbstractTextDocumentLayout::Selection *sipCpp = reinterpret_cast< ::QAbstractTextDocumentLayout::Selection *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::QTextCursor *>(sipForceConvertToType(sipPy, sipType_QTextCursor, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->cursor = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QAbstractTextDocumentLayout_Selection_format(void *, PyObject *, PyObject *);}
static PyObject *varget_QAbstractTextDocumentLayout_Selection_format(void *sipSelf, PyObject *, PyObject *)
{
     ::QTextCharFormat*sipVal;
     ::QAbstractTextDocumentLayout::Selection *sipCpp = reinterpret_cast< ::QAbstractTextDocumentLayout::Selection *>(sipSelf);

    sipVal = &sipCpp->format;

    return sipConvertFromType(sipVal, sipType_QTextCharFormat, SIP_NULLPTR);
}


extern "C" {static int varset_QAbstractTextDocumentLayout_Selection_format(void *, PyObject *, PyObject *);}
static int varset_QAbstractTextDocumentLayout_Selection_format(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::QTextCharFormat*sipVal;
     ::QAbstractTextDocumentLayout::Selection *sipCpp = reinterpret_cast< ::QAbstractTextDocumentLayout::Selection *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::QTextCharFormat *>(sipForceConvertToType(sipPy, sipType_QTextCharFormat, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->format = *sipVal;

    return 0;
}

sipVariableDef variables_QAbstractTextDocumentLayout_Selection[] = {
    {InstanceVariable, sipName_cursor, (PyMethodDef *)varget_QAbstractTextDocumentLayout_Selection_cursor, (PyMethodDef *)varset_QAbstractTextDocumentLayout_Selection_cursor, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_format, (PyMethodDef *)varget_QAbstractTextDocumentLayout_Selection_format, (PyMethodDef *)varset_QAbstractTextDocumentLayout_Selection_format, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_Selection, "\1QAbstractTextDocumentLayout.Selection()\n"
"QAbstractTextDocumentLayout.Selection(QAbstractTextDocumentLayout.Selection)");


static pyqt5ClassPluginDef plugin_QAbstractTextDocumentLayout_Selection = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QAbstractTextDocumentLayout_Selection = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QAbstractTextDocumentLayout__Selection,
        {SIP_NULLPTR},
        &plugin_QAbstractTextDocumentLayout_Selection
    },
    {
        sipNameNr_Selection,
        {1, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        2, variables_QAbstractTextDocumentLayout_Selection,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QAbstractTextDocumentLayout_Selection,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QAbstractTextDocumentLayout_Selection,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QAbstractTextDocumentLayout_Selection,
    assign_QAbstractTextDocumentLayout_Selection,
    array_QAbstractTextDocumentLayout_Selection,
    copy_QAbstractTextDocumentLayout_Selection,
    release_QAbstractTextDocumentLayout_Selection,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 87225 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"

#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 87229 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 87232 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 87235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 87238 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 255 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 87241 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 87244 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 87247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextlayout.sip"
#include <qtextlayout.h>
#line 87250 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 118 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 87253 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 97 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 87256 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 97 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 87259 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 87262 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 87265 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 87268 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 87271 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 46 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 87276 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 87279 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 87282 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 87285 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 87288 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 87291 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 87294 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 87297 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 87300 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 87303 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 87306 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 87309 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 87312 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 87315 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart1.cpp"


class sipQAbstractTextDocumentLayout : public  ::QAbstractTextDocumentLayout
{
public:
    sipQAbstractTextDocumentLayout( ::QTextDocument*);
    virtual ~sipQAbstractTextDocumentLayout();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void drawInlineObject( ::QPainter*,const  ::QRectF&, ::QTextInlineObject,int,const  ::QTextFormat&) SIP_OVERRIDE;
    void positionInlineObject( ::QTextInlineObject,int,const  ::QTextFormat&) SIP_OVERRIDE;
    void resizeInlineObject( ::QTextInlineObject,int,const  ::QTextFormat&) SIP_OVERRIDE;
    void documentChanged(int,int,int) SIP_OVERRIDE;
     ::QRectF blockBoundingRect(const  ::QTextBlock&) const SIP_OVERRIDE;
     ::QRectF frameBoundingRect( ::QTextFrame*) const SIP_OVERRIDE;
     ::QSizeF documentSize() const SIP_OVERRIDE;
    int pageCount() const SIP_OVERRIDE;
    int hitTest(const  ::QPointF&, ::Qt::HitTestAccuracy) const SIP_OVERRIDE;
    void draw( ::QPainter*,const  ::QAbstractTextDocumentLayout::PaintContext&) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractTextDocumentLayout(const sipQAbstractTextDocumentLayout &);
    sipQAbstractTextDocumentLayout &operator = (const sipQAbstractTextDocumentLayout &);

    char sipPyMethods[17];
};

sipQAbstractTextDocumentLayout::sipQAbstractTextDocumentLayout( ::QTextDocument*a0):  ::QAbstractTextDocumentLayout(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractTextDocumentLayout::~sipQAbstractTextDocumentLayout()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQAbstractTextDocumentLayout::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QAbstractTextDocumentLayout);

    return  ::QAbstractTextDocumentLayout::metaObject();
}

int sipQAbstractTextDocumentLayout::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QAbstractTextDocumentLayout::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QAbstractTextDocumentLayout,_c,_id,_a);

    return _id;
}

void *sipQAbstractTextDocumentLayout::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QAbstractTextDocumentLayout, _clname, &sipCpp) ? sipCpp :  ::QAbstractTextDocumentLayout::qt_metacast(_clname));
}

void sipQAbstractTextDocumentLayout::drawInlineObject( ::QPainter*a0,const  ::QRectF& a1, ::QTextInlineObject a2,int a3,const  ::QTextFormat& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_drawInlineObject);

    if (!sipMeth)
    {
         ::QAbstractTextDocumentLayout::drawInlineObject(a0,a1,a2,a3,a4);
        return;
    }

    extern void sipVH_QtGui_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*,const  ::QRectF&, ::QTextInlineObject,int,const  ::QTextFormat&);

    sipVH_QtGui_14(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

void sipQAbstractTextDocumentLayout::positionInlineObject( ::QTextInlineObject a0,int a1,const  ::QTextFormat& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_positionInlineObject);

    if (!sipMeth)
    {
         ::QAbstractTextDocumentLayout::positionInlineObject(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTextInlineObject,int,const  ::QTextFormat&);

    sipVH_QtGui_13(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQAbstractTextDocumentLayout::resizeInlineObject( ::QTextInlineObject a0,int a1,const  ::QTextFormat& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_resizeInlineObject);

    if (!sipMeth)
    {
         ::QAbstractTextDocumentLayout::resizeInlineObject(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTextInlineObject,int,const  ::QTextFormat&);

    sipVH_QtGui_13(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQAbstractTextDocumentLayout::documentChanged(int a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,sipName_QAbstractTextDocumentLayout,sipName_documentChanged);

    if (!sipMeth)
        return;

    extern void sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int);

    sipVH_QtGui_12(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QRectF sipQAbstractTextDocumentLayout::blockBoundingRect(const  ::QTextBlock& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,sipName_QAbstractTextDocumentLayout,sipName_blockBoundingRect);

    if (!sipMeth)
        return  ::QRectF();

    extern  ::QRectF sipVH_QtGui_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QTextBlock&);

    return sipVH_QtGui_11(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QRectF sipQAbstractTextDocumentLayout::frameBoundingRect( ::QTextFrame*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,sipName_QAbstractTextDocumentLayout,sipName_frameBoundingRect);

    if (!sipMeth)
        return  ::QRectF();

    extern  ::QRectF sipVH_QtGui_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTextFrame*);

    return sipVH_QtGui_10(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSizeF sipQAbstractTextDocumentLayout::documentSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,sipName_QAbstractTextDocumentLayout,sipName_documentSize);

    if (!sipMeth)
        return  ::QSizeF();

    extern  ::QSizeF sipVH_QtGui_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_9(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQAbstractTextDocumentLayout::pageCount() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,sipName_QAbstractTextDocumentLayout,sipName_pageCount);

    if (!sipMeth)
        return 0;

    extern int sipVH_QtGui_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_8(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQAbstractTextDocumentLayout::hitTest(const  ::QPointF& a0, ::Qt::HitTestAccuracy a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,sipName_QAbstractTextDocumentLayout,sipName_hitTest);

    if (!sipMeth)
        return 0;

    extern int sipVH_QtGui_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QPointF&, ::Qt::HitTestAccuracy);

    return sipVH_QtGui_7(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQAbstractTextDocumentLayout::draw( ::QPainter*a0,const  ::QAbstractTextDocumentLayout::PaintContext& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,sipName_QAbstractTextDocumentLayout,sipName_draw);

    if (!sipMeth)
        return;

    extern void sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*,const  ::QAbstractTextDocumentLayout::PaintContext&);

    sipVH_QtGui_6(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQAbstractTextDocumentLayout::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QAbstractTextDocumentLayout::event(a0);

    extern bool sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_5(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQAbstractTextDocumentLayout::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QAbstractTextDocumentLayout::eventFilter(a0,a1);

    extern bool sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_4(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQAbstractTextDocumentLayout::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QAbstractTextDocumentLayout::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_3(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractTextDocumentLayout::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QAbstractTextDocumentLayout::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_2(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractTextDocumentLayout::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QAbstractTextDocumentLayout::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_1(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractTextDocumentLayout::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QAbstractTextDocumentLayout::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractTextDocumentLayout::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QAbstractTextDocumentLayout::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_draw, "draw(self, QPainter, QAbstractTextDocumentLayout.PaintContext)");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_draw(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_draw(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QPainter* a0;
        const  ::QAbstractTextDocumentLayout::PaintContext* a1;
         ::QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J9", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, sipType_QPainter, &a0, sipType_QAbstractTextDocumentLayout_PaintContext, &a1))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractTextDocumentLayout, sipName_draw);
                return SIP_NULLPTR;
            }

            sipCpp->draw(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_draw, doc_QAbstractTextDocumentLayout_draw);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_hitTest, "hitTest(self, Union[QPointF, QPoint], Qt.HitTestAccuracy) -> int");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_hitTest(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_hitTest(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::Qt::HitTestAccuracy a1;
        const  ::QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1E", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, sipType_QPointF, &a0, &a0State, sipType_Qt_HitTestAccuracy, &a1))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractTextDocumentLayout, sipName_hitTest);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->hitTest(*a0,a1);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_hitTest, doc_QAbstractTextDocumentLayout_hitTest);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_anchorAt, "anchorAt(self, Union[QPointF, QPoint]) -> str");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_anchorAt(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_anchorAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->anchorAt(*a0));
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_anchorAt, doc_QAbstractTextDocumentLayout_anchorAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_pageCount, "pageCount(self) -> int");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_pageCount(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_pageCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractTextDocumentLayout, sipName_pageCount);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->pageCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_pageCount, doc_QAbstractTextDocumentLayout_pageCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_documentSize, "documentSize(self) -> QSizeF");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_documentSize(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_documentSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp))
        {
             ::QSizeF*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractTextDocumentLayout, sipName_documentSize);
                return SIP_NULLPTR;
            }

            sipRes = new  ::QSizeF(sipCpp->documentSize());

            return sipConvertFromNewType(sipRes,sipType_QSizeF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_documentSize, doc_QAbstractTextDocumentLayout_documentSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_frameBoundingRect, "frameBoundingRect(self, QTextFrame) -> QRectF");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_frameBoundingRect(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_frameBoundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QTextFrame* a0;
        const  ::QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, sipType_QTextFrame, &a0))
        {
             ::QRectF*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractTextDocumentLayout, sipName_frameBoundingRect);
                return SIP_NULLPTR;
            }

            sipRes = new  ::QRectF(sipCpp->frameBoundingRect(a0));

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_frameBoundingRect, doc_QAbstractTextDocumentLayout_frameBoundingRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_blockBoundingRect, "blockBoundingRect(self, QTextBlock) -> QRectF");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_blockBoundingRect(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_blockBoundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QTextBlock* a0;
        const  ::QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, sipType_QTextBlock, &a0))
        {
             ::QRectF*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractTextDocumentLayout, sipName_blockBoundingRect);
                return SIP_NULLPTR;
            }

            sipRes = new  ::QRectF(sipCpp->blockBoundingRect(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_blockBoundingRect, doc_QAbstractTextDocumentLayout_blockBoundingRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_setPaintDevice, "setPaintDevice(self, QPaintDevice)");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_setPaintDevice(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_setPaintDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPaintDevice* a0;
         ::QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, sipType_QPaintDevice, &a0))
        {
            sipCpp->setPaintDevice(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_setPaintDevice, doc_QAbstractTextDocumentLayout_setPaintDevice);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_paintDevice, "paintDevice(self) -> QPaintDevice");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_paintDevice(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_paintDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp))
        {
             ::QPaintDevice*sipRes;

            sipRes = sipCpp->paintDevice();

            return sipConvertFromType(sipRes,sipType_QPaintDevice,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_paintDevice, doc_QAbstractTextDocumentLayout_paintDevice);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_document, "document(self) -> QTextDocument");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_document(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_document(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp))
        {
             ::QTextDocument*sipRes;

            sipRes = sipCpp->document();

            return sipConvertFromType(sipRes,sipType_QTextDocument,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_document, doc_QAbstractTextDocumentLayout_document);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_registerHandler, "registerHandler(self, int, QObject)");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_registerHandler(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_registerHandler(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QObject* a1;
         ::QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ8", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, &a0, sipType_QObject, &a1))
        {
            sipCpp->registerHandler(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_registerHandler, doc_QAbstractTextDocumentLayout_registerHandler);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_unregisterHandler, "unregisterHandler(self, int, component: QObject = None)");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_unregisterHandler(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_unregisterHandler(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QObject* a1 = 0;
         ::QAbstractTextDocumentLayout *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_component,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|J8", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, &a0, sipType_QObject, &a1))
        {
            sipCpp->unregisterHandler(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_unregisterHandler, doc_QAbstractTextDocumentLayout_unregisterHandler);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_handlerForObject, "handlerForObject(self, int) -> QTextObjectInterface");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_handlerForObject(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_handlerForObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, &a0))
        {
             ::QTextObjectInterface*sipRes;

            sipRes = sipCpp->handlerForObject(a0);

            return sipConvertFromType(sipRes,sipType_QTextObjectInterface,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_handlerForObject, doc_QAbstractTextDocumentLayout_handlerForObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_documentChanged, "documentChanged(self, int, int, int)");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_documentChanged(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_documentChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        int a1;
        int a2;
         ::QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "piii", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, &a0, &a1, &a2))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractTextDocumentLayout, sipName_documentChanged);
                return SIP_NULLPTR;
            }

            sipCpp->documentChanged(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_documentChanged, doc_QAbstractTextDocumentLayout_documentChanged);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_resizeInlineObject, "resizeInlineObject(self, QTextInlineObject, int, QTextFormat)");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_resizeInlineObject(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_resizeInlineObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTextInlineObject* a0;
        int a1;
        const  ::QTextFormat* a2;
         ::QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9iJ9", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, sipType_QTextInlineObject, &a0, &a1, sipType_QTextFormat, &a2))
        {
            (sipSelfWasArg ? sipCpp-> ::QAbstractTextDocumentLayout::resizeInlineObject(*a0,a1,*a2) : sipCpp->resizeInlineObject(*a0,a1,*a2));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_resizeInlineObject, doc_QAbstractTextDocumentLayout_resizeInlineObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_positionInlineObject, "positionInlineObject(self, QTextInlineObject, int, QTextFormat)");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_positionInlineObject(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_positionInlineObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTextInlineObject* a0;
        int a1;
        const  ::QTextFormat* a2;
         ::QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9iJ9", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, sipType_QTextInlineObject, &a0, &a1, sipType_QTextFormat, &a2))
        {
            (sipSelfWasArg ? sipCpp-> ::QAbstractTextDocumentLayout::positionInlineObject(*a0,a1,*a2) : sipCpp->positionInlineObject(*a0,a1,*a2));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_positionInlineObject, doc_QAbstractTextDocumentLayout_positionInlineObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_drawInlineObject, "drawInlineObject(self, QPainter, QRectF, QTextInlineObject, int, QTextFormat)");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_drawInlineObject(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_drawInlineObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPainter* a0;
        const  ::QRectF* a1;
         ::QTextInlineObject* a2;
        int a3;
        const  ::QTextFormat* a4;
         ::QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J9J9iJ9", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, sipType_QPainter, &a0, sipType_QRectF, &a1, sipType_QTextInlineObject, &a2, &a3, sipType_QTextFormat, &a4))
        {
            (sipSelfWasArg ? sipCpp-> ::QAbstractTextDocumentLayout::drawInlineObject(a0,*a1,*a2,a3,*a4) : sipCpp->drawInlineObject(a0,*a1,*a2,a3,*a4));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_drawInlineObject, doc_QAbstractTextDocumentLayout_drawInlineObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_format, "format(self, int) -> QTextCharFormat");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_format(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, &a0))
        {
             ::QTextCharFormat*sipRes;

            sipRes = new  ::QTextCharFormat(sipCpp->format(a0));

            return sipConvertFromNewType(sipRes,sipType_QTextCharFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_format, doc_QAbstractTextDocumentLayout_format);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_imageAt, "imageAt(self, Union[QPointF, QPoint]) -> str");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_imageAt(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_imageAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->imageAt(*a0));
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_imageAt, doc_QAbstractTextDocumentLayout_imageAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTextDocumentLayout_formatAt, "formatAt(self, Union[QPointF, QPoint]) -> QTextFormat");

extern "C" {static PyObject *meth_QAbstractTextDocumentLayout_formatAt(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTextDocumentLayout_formatAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QAbstractTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractTextDocumentLayout, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
             ::QTextFormat*sipRes;

            sipRes = new  ::QTextFormat(sipCpp->formatAt(*a0));
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTextFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_formatAt, doc_QAbstractTextDocumentLayout_formatAt);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QAbstractTextDocumentLayout(void *, const sipTypeDef *);}
static void *cast_QAbstractTextDocumentLayout(void *sipCppV, const sipTypeDef *targetType)
{
     ::QAbstractTextDocumentLayout *sipCpp = reinterpret_cast< ::QAbstractTextDocumentLayout *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractTextDocumentLayout(void *, int);}
static void release_QAbstractTextDocumentLayout(void *sipCppV, int)
{
     ::QAbstractTextDocumentLayout *sipCpp = reinterpret_cast< ::QAbstractTextDocumentLayout *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QAbstractTextDocumentLayout(sipSimpleWrapper *);}
static void dealloc_QAbstractTextDocumentLayout(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQAbstractTextDocumentLayout *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QAbstractTextDocumentLayout(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QAbstractTextDocumentLayout(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractTextDocumentLayout(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQAbstractTextDocumentLayout *sipCpp = SIP_NULLPTR;

    {
         ::QTextDocument* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8", sipType_QTextDocument, &a0))
        {
            sipCpp = new sipQAbstractTextDocumentLayout(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractTextDocumentLayout[] = {{25, 0, 1}};


static PyMethodDef methods_QAbstractTextDocumentLayout[] = {
    {SIP_MLNAME_CAST(sipName_anchorAt), meth_QAbstractTextDocumentLayout_anchorAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTextDocumentLayout_anchorAt)},
    {SIP_MLNAME_CAST(sipName_blockBoundingRect), meth_QAbstractTextDocumentLayout_blockBoundingRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTextDocumentLayout_blockBoundingRect)},
    {SIP_MLNAME_CAST(sipName_document), meth_QAbstractTextDocumentLayout_document, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTextDocumentLayout_document)},
    {SIP_MLNAME_CAST(sipName_documentChanged), meth_QAbstractTextDocumentLayout_documentChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTextDocumentLayout_documentChanged)},
    {SIP_MLNAME_CAST(sipName_documentSize), meth_QAbstractTextDocumentLayout_documentSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTextDocumentLayout_documentSize)},
    {SIP_MLNAME_CAST(sipName_draw), meth_QAbstractTextDocumentLayout_draw, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTextDocumentLayout_draw)},
    {SIP_MLNAME_CAST(sipName_drawInlineObject), meth_QAbstractTextDocumentLayout_drawInlineObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTextDocumentLayout_drawInlineObject)},
    {SIP_MLNAME_CAST(sipName_format), meth_QAbstractTextDocumentLayout_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTextDocumentLayout_format)},
    {SIP_MLNAME_CAST(sipName_formatAt), meth_QAbstractTextDocumentLayout_formatAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTextDocumentLayout_formatAt)},
    {SIP_MLNAME_CAST(sipName_frameBoundingRect), meth_QAbstractTextDocumentLayout_frameBoundingRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTextDocumentLayout_frameBoundingRect)},
    {SIP_MLNAME_CAST(sipName_handlerForObject), meth_QAbstractTextDocumentLayout_handlerForObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTextDocumentLayout_handlerForObject)},
    {SIP_MLNAME_CAST(sipName_hitTest), meth_QAbstractTextDocumentLayout_hitTest, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTextDocumentLayout_hitTest)},
    {SIP_MLNAME_CAST(sipName_imageAt), meth_QAbstractTextDocumentLayout_imageAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTextDocumentLayout_imageAt)},
    {SIP_MLNAME_CAST(sipName_pageCount), meth_QAbstractTextDocumentLayout_pageCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTextDocumentLayout_pageCount)},
    {SIP_MLNAME_CAST(sipName_paintDevice), meth_QAbstractTextDocumentLayout_paintDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTextDocumentLayout_paintDevice)},
    {SIP_MLNAME_CAST(sipName_positionInlineObject), meth_QAbstractTextDocumentLayout_positionInlineObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTextDocumentLayout_positionInlineObject)},
    {SIP_MLNAME_CAST(sipName_registerHandler), meth_QAbstractTextDocumentLayout_registerHandler, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTextDocumentLayout_registerHandler)},
    {SIP_MLNAME_CAST(sipName_resizeInlineObject), meth_QAbstractTextDocumentLayout_resizeInlineObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTextDocumentLayout_resizeInlineObject)},
    {SIP_MLNAME_CAST(sipName_setPaintDevice), meth_QAbstractTextDocumentLayout_setPaintDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTextDocumentLayout_setPaintDevice)},
    {SIP_MLNAME_CAST(sipName_unregisterHandler), SIP_MLMETH_CAST(meth_QAbstractTextDocumentLayout_unregisterHandler), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractTextDocumentLayout_unregisterHandler)}
};

PyDoc_STRVAR(doc_QAbstractTextDocumentLayout, "\1QAbstractTextDocumentLayout(QTextDocument)");


extern "C" {static int emit_QAbstractTextDocumentLayout_update(void *, PyObject *);}

static int emit_QAbstractTextDocumentLayout_update(void *sipCppV, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    QAbstractTextDocumentLayout *sipCpp = reinterpret_cast<QAbstractTextDocumentLayout *>(sipCppV);

    {
        const  ::QRectF& a0def = QRectF(0,0,1e+09,1e+09);
        const  ::QRectF* a0 = &a0def;

        if (sipParseArgs(&sipParseErr, sipArgs, "|J9", sipType_QRectF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->update(*a0);
            Py_END_ALLOW_THREADS


            return 0;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractTextDocumentLayout, sipName_update, SIP_NULLPTR);

    return -1;
}


/* Define this type's signals. */
static const pyqt5QtSignal signals_QAbstractTextDocumentLayout[] = {
    {"updateBlock(QTextBlock)", "\1updateBlock(self, QTextBlock)", SIP_NULLPTR, SIP_NULLPTR},
    {"pageCountChanged(int)", "\1pageCountChanged(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"documentSizeChanged(QSizeF)", "\1documentSizeChanged(self, QSizeF)", SIP_NULLPTR, SIP_NULLPTR},
    {"update(QRectF)", "\1update(self, rect: QRectF = QRectF(0,0,1e+09,1e+09))", SIP_NULLPTR, emit_QAbstractTextDocumentLayout_update},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QAbstractTextDocumentLayout = {
    & ::QAbstractTextDocumentLayout::staticMetaObject,
    0,
    signals_QAbstractTextDocumentLayout,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QAbstractTextDocumentLayout = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QAbstractTextDocumentLayout,
        {SIP_NULLPTR},
        &plugin_QAbstractTextDocumentLayout
    },
    {
        sipNameNr_QAbstractTextDocumentLayout,
        {0, 0, 1},
        20, methods_QAbstractTextDocumentLayout,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QAbstractTextDocumentLayout,
    -1,
    -1,
    supers_QAbstractTextDocumentLayout,
    SIP_NULLPTR,
    init_type_QAbstractTextDocumentLayout,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QAbstractTextDocumentLayout,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QAbstractTextDocumentLayout,
    cast_QAbstractTextDocumentLayout,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
