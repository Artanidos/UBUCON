/*
 * Module code.
 *
 * Generated by SIP 4.19.15
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 32 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 41 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 37 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 717 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 724 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 42 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglbuffer.sip"
#include <qopenglbuffer.h>
#line 45 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopengldebug.sip"
#include <qopengldebug.h>
#line 48 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglshaderprogram.sip"
#include <qopenglshaderprogram.h>
#line 51 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopengltexture.sip"
#include <qopengltexture.h>
#line 54 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 57 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 60 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 52 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 63 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qrawfont.sip"
#include <qrawfont.h>
#line 66 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qsurfaceformat.sip"
#include <qsurfaceformat.h>
#line 69 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 72 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 75 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 78 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtouchdevice.sip"
#include <qtouchdevice.h>
#line 81 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 84 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 87 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 90 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 93 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 46 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 98 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 104 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 97 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 107 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 110 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 113 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 118 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextlayout.sip"
#include <qtextlayout.h>
#line 119 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 122 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 125 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 128 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 131 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 134 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 137 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qiconengine.sip"
#include <qiconengine.h>
#line 140 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 143 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 146 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qimage.sip"
#include <qimage.h>
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 152 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qimageiohandler.sip"
#include <qimageiohandler.h>
#line 155 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qsurface.sip"
#include <qsurface.h>
#line 158 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 786 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 161 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 416 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 164 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 403 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 167 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 375 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 170 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 451 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 173 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 462 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 176 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 354 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 179 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 205 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 182 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 253 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 185 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 717 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 188 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 296 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 191 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 389 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 194 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpagedpaintdevice.sip"
#include <qpagedpaintdevice.h>
#line 197 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpagedpaintdevice.sip"
#include <qpagedpaintdevice.h>
#line 374 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpagedpaintdevice.sip"
#include <qpagedpaintdevice.h>
#line 202 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 174 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 205 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qline.sip"
#include <qline.h>
#line 208 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 95 "sip/QtCore/qline.sip"
#include <qline.h>
#line 211 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 214 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 217 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 220 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 223 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 226 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 275 "sip/QtCore/qpycore_qhash.sip"
#include <qhash.h>
#line 229 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 232 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 238 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 241 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 244 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 146 "sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 250 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 103 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qstandarditemmodel.sip"
#include <qstandarditemmodel.h>
#line 253 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 256 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 259 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qvalidator.sip"
#include <qvalidator.h>
#line 262 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 265 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 268 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 271 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 274 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qmatrix4x4.sip"
#include <qmatrix4x4.h>
#line 277 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 280 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpen.sip"
#include <qpen.h>
#line 283 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpicture.sip"
#include <qpicture.h>
#line 286 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 34 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpixelformat.sip"
#include <qpixelformat.h>
#line 289 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 315 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 292 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 295 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qquaternion.sip"
#include <qquaternion.h>
#line 298 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 301 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 34 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qrgba64.sip"
#include <qrgba64.h>
#line 304 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 307 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 310 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qvector2d.sip"
#include <qvector2d.h>
#line 313 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qvector3d.sip"
#include <qvector3d.h>
#line 316 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qvector4d.sip"
#include <qvector4d.h>
#line 319 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 324 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 327 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 123 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 330 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 346 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 333 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 364 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 336 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 392 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 339 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qdesktopservices.sip"
#include <qdesktopservices.h>
#line 342 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 429 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 345 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 440 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 348 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 500 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 351 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 610 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 354 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 717 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 724 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 359 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 913 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 362 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qfontdatabase.sip"
#include <qfontdatabase.h>
#line 365 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 368 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 179 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 371 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 331 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 374 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 483 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 377 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 632 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 380 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 781 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 383 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 927 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 386 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 1073 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 389 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qglyphrun.sip"
#include <qglyphrun.h>
#line 392 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qglyphrun.sip"
#include <qglyphrun.h>
#line 395 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qiconengine.sip"
#include <qiconengine.h>
#line 62 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qiconengine.sip"
#include <qiconengine.h>
#line 400 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qiconengine.sip"
#include <qiconengine.h>
#line 83 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qiconengine.sip"
#include <qiconengine.h>
#line 405 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qimageiohandler.sip"
#include <qimageiohandler.h>
#line 408 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglbuffer.sip"
#include <qopenglbuffer.h>
#line 411 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglcontext.sip"
#include <qopenglcontext.h>
#line 414 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopengldebug.sip"
#include <qopengldebug.h>
#line 417 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopengldebug.sip"
#include <qopengldebug.h>
#line 420 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopengldebug.sip"
#include <qopengldebug.h>
#line 423 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 124 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglframebufferobject.sip"
#include <qopenglframebufferobject.h>
#line 426 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglpixeltransferoptions.sip"
#include <qopenglpixeltransferoptions.h>
#line 429 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglshaderprogram.sip"
#include <qopenglshaderprogram.h>
#line 432 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopengltexture.sip"
#include <qopengltexture.h>
#line 435 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpagelayout.sip"
#include <qpagelayout.h>
#line 438 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpagesize.sip"
#include <qpagesize.h>
#line 441 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 444 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 497 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 449 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 452 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 455 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 52 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 458 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 52 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 461 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpixmapcache.sip"
#include <qpixmapcache.h>
#line 464 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpixmapcache.sip"
#include <qpixmapcache.h>
#line 33 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpixmapcache.sip"
#include <qpixmapcache.h>
#line 469 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qrawfont.sip"
#include <qrawfont.h>
#line 472 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qstatictext.sip"
#include <qstatictext.h>
#line 475 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qsurfaceformat.sip"
#include <qsurfaceformat.h>
#line 478 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextcursor.sip"
#include <qtextcursor.h>
#line 481 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 484 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextdocumentfragment.sip"
#include <qtextdocumentfragment.h>
#line 487 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 490 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 255 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 493 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 358 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 496 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 409 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 499 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 441 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 502 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 464 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 505 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 527 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 508 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 553 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 511 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 48 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextlayout.sip"
#include <qtextlayout.h>
#line 70 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextlayout.sip"
#include <qtextlayout.h>
#line 516 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 132 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextlayout.sip"
#include <qtextlayout.h>
#line 519 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 76 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 524 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 118 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 143 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 529 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 224 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 532 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 248 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 535 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 538 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 84 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 543 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtexttable.sip"
#include <qtexttable.h>
#line 546 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtouchdevice.sip"
#include <qtouchdevice.h>
#line 549 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

/* Define the strings used by this module. */
const char sipStrings_QtGui[] = {
    'Q', 'P', 'a', 'i', 'r', '<', 'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'T', 'e', 'x', 't', 'u', 'r', 'e', ':', ':', 'F', 'i', 'l', 't', 'e', 'r', ',', 'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'T', 'e', 'x', 't', 'u', 'r', 'e', ':', ':', 'F', 'i', 'l', 't', 'e', 'r', '>', 0,
    'Q', 'T', 'e', 'x', 't', 'C', 'h', 'a', 'r', 'F', 'o', 'r', 'm', 'a', 't', ':', ':', 'F', 'o', 'n', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'i', 'e', 's', 'I', 'n', 'h', 'e', 'r', 'i', 't', 'a', 'n', 'c', 'e', 'B', 'e', 'h', 'a', 'v', 'i', 'o', 'r', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'F', 'r', 'a', 'm', 'e', 'b', 'u', 'f', 'f', 'e', 'r', 'O', 'b', 'j', 'e', 'c', 't', ':', ':', 'F', 'r', 'a', 'm', 'e', 'b', 'u', 'f', 'f', 'e', 'r', 'R', 'e', 's', 't', 'o', 'r', 'e', 'P', 'o', 'l', 'i', 'c', 'y', 0,
    'Q', 'V', 'e', 'c', 't', 'o', 'r', '<', 'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'T', 'e', 'x', 't', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 'L', 'a', 'y', 'o', 'u', 't', ':', ':', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', '>', 0,
    'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'T', 'e', 'x', 't', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 'L', 'a', 'y', 'o', 'u', 't', ':', ':', 'P', 'a', 'i', 'n', 't', 'C', 'o', 'n', 't', 'e', 'x', 't', 0,
    'Q', 'P', 'l', 'a', 't', 'f', 'o', 'r', 'm', 'S', 'u', 'r', 'f', 'a', 'c', 'e', 'E', 'v', 'e', 'n', 't', ':', ':', 'S', 'u', 'r', 'f', 'a', 'c', 'e', 'E', 'v', 'e', 'n', 't', 'T', 'y', 'p', 'e', 0,
    'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'T', 'e', 'x', 't', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 'L', 'a', 'y', 'o', 'u', 't', ':', ':', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'A', 'd', 'd', 'S', 'p', 'a', 'c', 'e', 'F', 'o', 'r', 'L', 'i', 'n', 'e', 'A', 'n', 'd', 'P', 'a', 'r', 'a', 'g', 'r', 'a', 'p', 'h', 'S', 'e', 'p', 'a', 'r', 'a', 't', 'o', 'r', 's', 0,
    'Q', 'S', 'u', 'r', 'f', 'a', 'c', 'e', 'F', 'o', 'r', 'm', 'a', 't', ':', ':', 'O', 'p', 'e', 'n', 'G', 'L', 'C', 'o', 'n', 't', 'e', 'x', 't', 'P', 'r', 'o', 'f', 'i', 'l', 'e', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'F', 'r', 'a', 'm', 'e', 'b', 'u', 'f', 'f', 'e', 'r', 'O', 'b', 'j', 'e', 'c', 't', ':', ':', 'A', 't', 't', 'a', 'c', 'h', 'm', 'e', 'n', 't', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'I', 'n', 'p', 'u', 't', 'M', 'e', 't', 'h', 'o', 'd', 'E', 'v', 'e', 'n', 't', ':', ':', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', '>', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'F', 'o', 'n', 't', 'D', 'a', 't', 'a', 'b', 'a', 's', 'e', ':', ':', 'W', 'r', 'i', 't', 'i', 'n', 'g', 'S', 'y', 's', 't', 'e', 'm', '>', 0,
    'm', 'o', 'u', 's', 'e', 'Q', 'u', 'i', 'c', 'k', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 'T', 'h', 'r', 'e', 's', 'h', 'o', 'l', 'd', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'R', 'a', 's', 't', 'e', 'r', 'O', 'p', '_', 'N', 'o', 't', 'S', 'o', 'u', 'r', 'c', 'e', 'A', 'n', 'd', 'N', 'o', 't', 'D', 'e', 's', 't', 'i', 'n', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'T', 'e', 'x', 't', 'u', 'r', 'e', ':', ':', 'C', 'o', 'o', 'r', 'd', 'i', 'n', 'a', 't', 'e', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'Q', 'I', 'c', 'o', 'n', 'E', 'n', 'g', 'i', 'n', 'e', ':', ':', 'A', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'S', 'i', 'z', 'e', 's', 'A', 'r', 'g', 'u', 'm', 'e', 'n', 't', 0,
    's', 'e', 't', 'F', 'a', 'l', 'l', 'b', 'a', 'c', 'k', 'S', 'e', 's', 's', 'i', 'o', 'n', 'M', 'a', 'n', 'a', 'g', 'e', 'm', 'e', 'n', 't', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'Q', 'T', 'e', 'x', 't', 'C', 'h', 'a', 'r', 'F', 'o', 'r', 'm', 'a', 't', ':', ':', 'V', 'e', 'r', 't', 'i', 'c', 'a', 'l', 'A', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', 0,
    'R', 'a', 's', 't', 'e', 'r', 'O', 'p', '_', 'N', 'o', 't', 'S', 'o', 'u', 'r', 'c', 'e', 'O', 'r', 'N', 'o', 't', 'D', 'e', 's', 't', 'i', 'n', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'T', 'e', 'x', 't', 'u', 'r', 'e', ':', ':', 'C', 'o', 'm', 'p', 'a', 'r', 'i', 's', 'o', 'n', 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 0,
    'R', 'e', 's', 't', 'o', 'r', 'e', 'F', 'r', 'a', 'm', 'e', 'b', 'u', 'f', 'f', 'e', 'r', 'B', 'i', 'n', 'd', 'i', 'n', 'g', 'T', 'o', 'D', 'e', 'f', 'a', 'u', 'l', 't', 0,
    'i', 's', 'F', 'a', 'l', 'l', 'b', 'a', 'c', 'k', 'S', 'e', 's', 's', 'i', 'o', 'n', 'M', 'a', 'n', 'a', 'g', 'e', 'm', 'e', 'n', 't', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'Q', 'T', 'o', 'u', 'c', 'h', 'E', 'v', 'e', 'n', 't', ':', ':', 'T', 'o', 'u', 'c', 'h', 'P', 'o', 'i', 'n', 't', ':', ':', 'I', 'n', 'f', 'o', 'F', 'l', 'a', 'g', 's', 0,
    'Q', 'V', 'e', 'c', 't', 'o', 'r', '<', 'Q', 'T', 'e', 'x', 't', 'L', 'a', 'y', 'o', 'u', 't', ':', ':', 'F', 'o', 'r', 'm', 'a', 't', 'R', 'a', 'n', 'g', 'e', '>', 0,
    'Q', 'T', 'e', 'x', 't', 'B', 'l', 'o', 'c', 'k', 'F', 'o', 'r', 'm', 'a', 't', ':', ':', 'L', 'i', 'n', 'e', 'H', 'e', 'i', 'g', 'h', 't', 'T', 'y', 'p', 'e', 's', 0,
    'B', 'l', 'o', 'c', 'k', 'T', 'r', 'a', 'i', 'l', 'i', 'n', 'g', 'H', 'o', 'r', 'i', 'z', 'o', 'n', 't', 'a', 'l', 'R', 'u', 'l', 'e', 'r', 'W', 'i', 'd', 't', 'h', 0,
    'Q', 'P', 'a', 'i', 'n', 't', 'E', 'n', 'g', 'i', 'n', 'e', ':', ':', 'P', 'a', 'i', 'n', 't', 'E', 'n', 'g', 'i', 'n', 'e', 'F', 'e', 'a', 't', 'u', 'r', 'e', 's', 0,
    's', 'e', 't', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'I', 'n', 'n', 'e', 'r', 'T', 'e', 's', 's', 'e', 'l', 'l', 'a', 't', 'i', 'o', 'n', 'L', 'e', 'v', 'e', 'l', 's', 0,
    's', 'e', 't', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'O', 'u', 't', 'e', 'r', 'T', 'e', 's', 's', 'e', 'l', 'l', 'a', 't', 'i', 'o', 'n', 'L', 'e', 'v', 'e', 'l', 's', 0,
    'Q', 'I', 'c', 'o', 'n', 'E', 'n', 'g', 'i', 'n', 'e', ':', ':', 'S', 'c', 'a', 'l', 'e', 'd', 'P', 'i', 'x', 'm', 'a', 'p', 'A', 'r', 'g', 'u', 'm', 'e', 'n', 't', 0,
    'Q', 'T', 'o', 'u', 'c', 'h', 'E', 'v', 'e', 'n', 't', ':', ':', 'T', 'o', 'u', 'c', 'h', 'P', 'o', 'i', 'n', 't', ':', ':', 'I', 'n', 'f', 'o', 'F', 'l', 'a', 'g', 0,
    'm', 'o', 'u', 's', 'e', 'P', 'r', 'e', 's', 's', 'A', 'n', 'd', 'H', 'o', 'l', 'd', 'I', 'n', 't', 'e', 'r', 'v', 'a', 'l', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'Q', 'P', 'i', 'x', 'e', 'l', 'F', 'o', 'r', 'm', 'a', 't', ':', ':', 'T', 'y', 'p', 'e', 'I', 'n', 't', 'e', 'r', 'p', 'r', 'e', 't', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'P', 'i', 'x', 'e', 'l', 'F', 'o', 'r', 'm', 'a', 't', ':', ':', 'A', 'l', 'p', 'h', 'a', 'P', 'r', 'e', 'm', 'u', 'l', 't', 'i', 'p', 'l', 'i', 'e', 'd', 0,
    'Q', 'P', 'a', 'i', 'n', 't', 'E', 'n', 'g', 'i', 'n', 'e', ':', ':', 'P', 'a', 'i', 'n', 't', 'E', 'n', 'g', 'i', 'n', 'e', 'F', 'e', 'a', 't', 'u', 'r', 'e', 0,
    'R', 'a', 's', 't', 'e', 'r', 'O', 'p', '_', 'S', 'o', 'u', 'r', 'c', 'e', 'A', 'n', 'd', 'N', 'o', 't', 'D', 'e', 's', 't', 'i', 'n', 'a', 't', 'i', 'o', 'n', 0,
    'R', 'a', 's', 't', 'e', 'r', 'O', 'p', '_', 'N', 'o', 't', 'S', 'o', 'u', 'r', 'c', 'e', 'A', 'n', 'd', 'D', 'e', 's', 't', 'i', 'n', 'a', 't', 'i', 'o', 'n', 0,
    'R', 'a', 's', 't', 'e', 'r', 'O', 'p', '_', 'N', 'o', 't', 'S', 'o', 'u', 'r', 'c', 'e', 'X', 'o', 'r', 'D', 'e', 's', 't', 'i', 'n', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'V', 'e', 'r', 't', 'e', 'x', 'A', 'r', 'r', 'a', 'y', 'O', 'b', 'j', 'e', 'c', 't', ':', ':', 'B', 'i', 'n', 'd', 'e', 'r', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'T', 'e', 'x', 't', 'u', 'r', 'e', ':', ':', 'D', 'e', 'p', 't', 'h', 'S', 't', 'e', 'n', 'c', 'i', 'l', 'M', 'o', 'd', 'e', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'T', 'e', 'x', 't', 'u', 'r', 'e', ':', ':', 'S', 'w', 'i', 'z', 'z', 'l', 'e', 'C', 'o', 'm', 'p', 'o', 'n', 'e', 'n', 't', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'T', 'e', 'x', 't', 'u', 'r', 'e', ':', ':', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'U', 'n', 'i', 't', 'R', 'e', 's', 'e', 't', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'T', 'e', 'x', 't', 'u', 'r', 'e', ':', ':', 'M', 'i', 'p', 'M', 'a', 'p', 'G', 'e', 'n', 'e', 'r', 'a', 't', 'i', 'o', 'n', 0,
    'a', 'd', 'd', 'C', 'a', 'c', 'h', 'e', 'a', 'b', 'l', 'e', 'S', 'h', 'a', 'd', 'e', 'r', 'F', 'r', 'o', 'm', 'S', 'o', 'u', 'r', 'c', 'e', 'F', 'i', 'l', 'e', 0,
    'a', 'd', 'd', 'C', 'a', 'c', 'h', 'e', 'a', 'b', 'l', 'e', 'S', 'h', 'a', 'd', 'e', 'r', 'F', 'r', 'o', 'm', 'S', 'o', 'u', 'r', 'c', 'e', 'C', 'o', 'd', 'e', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'C', 'o', 'n', 't', 'e', 'x', 't', ':', ':', 'O', 'p', 'e', 'n', 'G', 'L', 'M', 'o', 'd', 'u', 'l', 'e', 'T', 'y', 'p', 'e', 0,
    'Q', 'I', 'm', 'a', 'g', 'e', 'I', 'O', 'H', 'a', 'n', 'd', 'l', 'e', 'r', ':', ':', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'a', 't', 'i', 'o', 'n', 's', 0,
    'Q', 'I', 'n', 'p', 'u', 't', 'M', 'e', 't', 'h', 'o', 'd', 'E', 'v', 'e', 'n', 't', ':', ':', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 'T', 'y', 'p', 'e', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'T', 'e', 'x', 't', 'L', 'a', 'y', 'o', 'u', 't', ':', ':', 'F', 'o', 'r', 'm', 'a', 't', 'R', 'a', 'n', 'g', 'e', '>', 0,
    'Q', 'T', 'e', 'x', 't', 'C', 'h', 'a', 'r', 'F', 'o', 'r', 'm', 'a', 't', ':', ':', 'U', 'n', 'd', 'e', 'r', 'l', 'i', 'n', 'e', 'S', 't', 'y', 'l', 'e', 0,
    'm', 'o', 'u', 's', 'e', 'D', 'o', 'u', 'b', 'l', 'e', 'C', 'l', 'i', 'c', 'k', 'I', 'n', 't', 'e', 'r', 'v', 'a', 'l', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'Q', 'P', 'a', 'i', 'n', 't', 'D', 'e', 'v', 'i', 'c', 'e', ':', ':', 'P', 'a', 'i', 'n', 't', 'D', 'e', 'v', 'i', 'c', 'e', 'M', 'e', 't', 'r', 'i', 'c', 0,
    'R', 'a', 's', 't', 'e', 'r', 'O', 'p', '_', 'S', 'o', 'u', 'r', 'c', 'e', 'O', 'r', 'N', 'o', 't', 'D', 'e', 's', 't', 'i', 'n', 'a', 't', 'i', 'o', 'n', 0,
    'R', 'a', 's', 't', 'e', 'r', 'O', 'p', '_', 'N', 'o', 't', 'S', 'o', 'u', 'r', 'c', 'e', 'O', 'r', 'D', 'e', 's', 't', 'i', 'n', 'a', 't', 'i', 'o', 'n', 0,
    'C', 'o', 'm', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', '_', 'D', 'e', 's', 't', 'i', 'n', 'a', 't', 'i', 'o', 'n', 'A', 't', 'o', 'p', 0,
    'C', 'o', 'm', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', '_', 'D', 'e', 's', 't', 'i', 'n', 'a', 't', 'i', 'o', 'n', 'O', 'v', 'e', 'r', 0,
    'B', 'i', 'n', 'd', 'i', 'n', 'g', 'T', 'a', 'r', 'g', 'e', 't', '2', 'D', 'M', 'u', 'l', 't', 'i', 's', 'a', 'm', 'p', 'l', 'e', 'A', 'r', 'r', 'a', 'y', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'D', 'e', 'b', 'u', 'g', 'L', 'o', 'g', 'g', 'e', 'r', ':', ':', 'L', 'o', 'g', 'g', 'i', 'n', 'g', 'M', 'o', 'd', 'e', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'D', 'e', 'b', 'u', 'g', 'M', 'e', 's', 's', 'a', 'g', 'e', ':', ':', 'S', 'e', 'v', 'e', 'r', 'i', 't', 'i', 'e', 's', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'B', 'u', 'f', 'f', 'e', 'r', ':', ':', 'R', 'a', 'n', 'g', 'e', 'A', 'c', 'c', 'e', 's', 's', 'F', 'l', 'a', 'g', 's', 0,
    'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'a', 't', 'i', 'o', 'n', 'M', 'i', 'r', 'r', 'o', 'r', 'A', 'n', 'd', 'R', 'o', 't', 'a', 't', 'e', '9', '0', 0,
    'Q', 'I', 'm', 'a', 'g', 'e', 'I', 'O', 'H', 'a', 'n', 'd', 'l', 'e', 'r', ':', ':', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'T', 'o', 'u', 'c', 'h', 'E', 'v', 'e', 'n', 't', ':', ':', 'T', 'o', 'u', 'c', 'h', 'P', 'o', 'i', 'n', 't', '>', 0,
    'r', 'e', 'p', 'o', 'r', 't', 'C', 'o', 'n', 't', 'e', 'n', 't', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'Q', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', ':', ':', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'a', 't', 'i', 'o', 'n', 'T', 'y', 'p', 'e', 0,
    'S', 'h', 'o', 'w', 'L', 'i', 'n', 'e', 'A', 'n', 'd', 'P', 'a', 'r', 'a', 'g', 'r', 'a', 'p', 'h', 'S', 'e', 'p', 'a', 'r', 'a', 't', 'o', 'r', 's', 0,
    'Q', 'T', 'e', 'x', 't', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', ':', ':', 'M', 'e', 't', 'a', 'I', 'n', 'f', 'o', 'r', 'm', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'S', 'u', 'r', 'f', 'a', 'c', 'e', 'F', 'o', 'r', 'm', 'a', 't', ':', ':', 'R', 'e', 'n', 'd', 'e', 'r', 'a', 'b', 'l', 'e', 'T', 'y', 'p', 'e', 0,
    'C', 'o', 'm', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', '_', 'D', 'e', 's', 't', 'i', 'n', 'a', 't', 'i', 'o', 'n', 'O', 'u', 't', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'T', 'e', 'x', 't', 'u', 'r', 'e', ':', ':', 'C', 'o', 'm', 'p', 'a', 'r', 'i', 's', 'o', 'n', 'M', 'o', 'd', 'e', 0,
    's', 'e', 't', 'A', 'u', 't', 'o', 'M', 'i', 'p', 'M', 'a', 'p', 'G', 'e', 'n', 'e', 'r', 'a', 't', 'i', 'o', 'n', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'S', 'R', 'G', 'B', '8', '_', 'P', 'u', 'n', 'c', 'h', 'T', 'h', 'r', 'o', 'u', 'g', 'h', '_', 'A', 'l', 'p', 'h', 'a', '1', '_', 'E', 'T', 'C', '2', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'I', 'n', 'n', 'e', 'r', 'T', 'e', 's', 's', 'e', 'l', 'l', 'a', 't', 'i', 'o', 'n', 'L', 'e', 'v', 'e', 'l', 's', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'O', 'u', 't', 'e', 'r', 'T', 'e', 's', 's', 'e', 'l', 'l', 'a', 't', 'i', 'o', 'n', 'L', 'e', 'v', 'e', 'l', 's', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'F', 'r', 'a', 'm', 'e', 'b', 'u', 'f', 'f', 'e', 'r', 'O', 'b', 'j', 'e', 'c', 't', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'B', 'u', 'f', 'f', 'e', 'r', ':', ':', 'R', 'a', 'n', 'g', 'e', 'A', 'c', 'c', 'e', 's', 's', 'F', 'l', 'a', 'g', 0,
    'Q', 'I', 'm', 'a', 'g', 'e', 'W', 'r', 'i', 't', 'e', 'r', ':', ':', 'I', 'm', 'a', 'g', 'e', 'W', 'r', 'i', 't', 'e', 'r', 'E', 'r', 'r', 'o', 'r', 0,
    'Q', 'I', 'm', 'a', 'g', 'e', 'R', 'e', 'a', 'd', 'e', 'r', ':', ':', 'I', 'm', 'a', 'g', 'e', 'R', 'e', 'a', 'd', 'e', 'r', 'E', 'r', 'r', 'o', 'r', 0,
    'Q', 'V', 'e', 'c', 't', 'o', 'r', '<', 'Q', 'P', 'a', 'i', 'r', '<', 'q', 'r', 'e', 'a', 'l', ',', 'Q', 'C', 'o', 'l', 'o', 'r', '>', ' ', '>', 0,
    'Q', 'T', 'e', 'x', 't', 'F', 'r', 'a', 'm', 'e', 'F', 'o', 'r', 'm', 'a', 't', ':', ':', 'B', 'o', 'r', 'd', 'e', 'r', 'S', 't', 'y', 'l', 'e', 0,
    'Q', 'S', 'u', 'r', 'f', 'a', 'c', 'e', 'F', 'o', 'r', 'm', 'a', 't', ':', ':', 'F', 'o', 'r', 'm', 'a', 't', 'O', 'p', 't', 'i', 'o', 'n', 's', 0,
    'Q', 'P', 'a', 'i', 'n', 't', 'E', 'n', 'g', 'i', 'n', 'e', ':', ':', 'P', 'o', 'l', 'y', 'g', 'o', 'n', 'D', 'r', 'a', 'w', 'M', 'o', 'd', 'e', 0,
    'Q', 'P', 'a', 'i', 'n', 't', 'e', 'r', ':', ':', 'P', 'i', 'x', 'm', 'a', 'p', 'F', 'r', 'a', 'g', 'm', 'e', 'n', 't', 'H', 'i', 'n', 't', 's', 0,
    'R', 'a', 's', 't', 'e', 'r', 'O', 'p', '_', 'S', 'o', 'u', 'r', 'c', 'e', 'X', 'o', 'r', 'D', 'e', 's', 't', 'i', 'n', 'a', 't', 'i', 'o', 'n', 0,
    'R', 'a', 's', 't', 'e', 'r', 'O', 'p', '_', 'S', 'o', 'u', 'r', 'c', 'e', 'A', 'n', 'd', 'D', 'e', 's', 't', 'i', 'n', 'a', 't', 'i', 'o', 'n', 0,
    'C', 'o', 'm', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', '_', 'D', 'e', 's', 't', 'i', 'n', 'a', 't', 'i', 'o', 'n', 'I', 'n', 0,
    'Q', 'P', 'a', 'g', 'e', 'd', 'P', 'a', 'i', 'n', 't', 'D', 'e', 'v', 'i', 'c', 'e', ':', ':', 'P', 'd', 'f', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'W', 'i', 'n', 'd', 'o', 'w', ':', ':', 'U', 'p', 'd', 'a', 't', 'e', 'B', 'e', 'h', 'a', 'v', 'i', 'o', 'r', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'B', 'l', 'i', 't', 't', 'e', 'r', ':', ':', 'O', 'r', 'i', 'g', 'i', 'n', 0,
    'i', 's', 'A', 'u', 't', 'o', 'M', 'i', 'p', 'M', 'a', 'p', 'G', 'e', 'n', 'e', 'r', 'a', 't', 'i', 'o', 'n', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'T', 'e', 'x', 't', 'u', 'r', 'e', ':', ':', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'T', 'e', 'x', 't', 'u', 'r', 'e', ':', ':', 'B', 'i', 'n', 'd', 'i', 'n', 'g', 'T', 'a', 'r', 'g', 'e', 't', 0,
    'D', 'o', 'n', 't', 'R', 'e', 's', 't', 'o', 'r', 'e', 'F', 'r', 'a', 'm', 'e', 'b', 'u', 'f', 'f', 'e', 'r', 'B', 'i', 'n', 'd', 'i', 'n', 'g', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'D', 'e', 'b', 'u', 'g', 'M', 'e', 's', 's', 'a', 'g', 'e', ':', ':', 'S', 'e', 'v', 'e', 'r', 'i', 't', 'y', 0,
    'q', 't', '_', 's', 'e', 't', '_', 's', 'e', 'q', 'u', 'e', 'n', 'c', 'e', '_', 'a', 'u', 't', 'o', '_', 'm', 'n', 'e', 'm', 'o', 'n', 'i', 'c', 0,
    'i', 'n', 'p', 'u', 't', 'I', 't', 'e', 'm', 'C', 'l', 'i', 'p', 'R', 'e', 'c', 't', 'a', 'n', 'g', 'l', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'a', 't', 'i', 'o', 'n', 'F', 'l', 'i', 'p', 'A', 'n', 'd', 'R', 'o', 't', 'a', 't', 'e', '9', '0', 0,
    'F', 'o', 'r', 'm', 'a', 't', '_', 'R', 'G', 'B', 'A', '8', '8', '8', '8', '_', 'P', 'r', 'e', 'm', 'u', 'l', 't', 'i', 'p', 'l', 'i', 'e', 'd', 0,
    'F', 'o', 'r', 'm', 'a', 't', '_', 'A', 'R', 'G', 'B', '4', '4', '4', '4', '_', 'P', 'r', 'e', 'm', 'u', 'l', 't', 'i', 'p', 'l', 'i', 'e', 'd', 0,
    'F', 'o', 'r', 'm', 'a', 't', '_', 'A', 'R', 'G', 'B', '8', '5', '5', '5', '_', 'P', 'r', 'e', 'm', 'u', 'l', 't', 'i', 'p', 'l', 'i', 'e', 'd', 0,
    'F', 'o', 'r', 'm', 'a', 't', '_', 'A', 'R', 'G', 'B', '6', '6', '6', '6', '_', 'P', 'r', 'e', 'm', 'u', 'l', 't', 'i', 'p', 'l', 'i', 'e', 'd', 0,
    'F', 'o', 'r', 'm', 'a', 't', '_', 'A', 'R', 'G', 'B', '8', '5', '6', '5', '_', 'P', 'r', 'e', 'm', 'u', 'l', 't', 'i', 'p', 'l', 'i', 'e', 'd', 0,
    'a', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'D', 'i', 's', 'p', 'l', 'a', 'y', 'N', 'a', 'm', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    's', 'u', 'p', 'p', 'o', 'r', 't', 's', 'T', 'h', 'r', 'e', 'a', 'd', 'e', 'd', 'F', 'o', 'n', 't', 'R', 'e', 'n', 'd', 'e', 'r', 'i', 'n', 'g', 0,
    'Q', 'T', 'o', 'u', 'c', 'h', 'D', 'e', 'v', 'i', 'c', 'e', ':', ':', 'C', 'a', 'p', 'a', 'b', 'i', 'l', 'i', 't', 'y', 'F', 'l', 'a', 'g', 0,
    'W', 'r', 'a', 'p', 'A', 't', 'W', 'o', 'r', 'd', 'B', 'o', 'u', 'n', 'd', 'a', 'r', 'y', 'O', 'r', 'A', 'n', 'y', 'w', 'h', 'e', 'r', 'e', 0,
    'Q', 'S', 'u', 'r', 'f', 'a', 'c', 'e', 'F', 'o', 'r', 'm', 'a', 't', ':', ':', 'S', 'w', 'a', 'p', 'B', 'e', 'h', 'a', 'v', 'i', 'o', 'r', 0,
    'Q', 'S', 'u', 'r', 'f', 'a', 'c', 'e', 'F', 'o', 'r', 'm', 'a', 't', ':', ':', 'F', 'o', 'r', 'm', 'a', 't', 'O', 'p', 't', 'i', 'o', 'n', 0,
    'm', 'o', 'u', 's', 'e', 'Q', 'u', 'i', 'c', 'k', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 'T', 'h', 'r', 'e', 's', 'h', 'o', 'l', 'd', 0,
    'k', 'e', 'y', 'b', 'o', 'a', 'r', 'd', 'I', 'n', 'p', 'u', 't', 'I', 'n', 't', 'e', 'r', 'v', 'a', 'l', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'Q', 'S', 't', 'a', 't', 'i', 'c', 'T', 'e', 'x', 't', ':', ':', 'P', 'e', 'r', 'f', 'o', 'r', 'm', 'a', 'n', 'c', 'e', 'H', 'i', 'n', 't', 0,
    'Q', 'S', 'e', 's', 's', 'i', 'o', 'n', 'M', 'a', 'n', 'a', 'g', 'e', 'r', ':', ':', 'R', 'e', 's', 't', 'a', 'r', 't', 'H', 'i', 'n', 't', 0,
    'Q', 'P', 'a', 'i', 'n', 't', 'e', 'r', ':', ':', 'P', 'i', 'x', 'm', 'a', 'p', 'F', 'r', 'a', 'g', 'm', 'e', 'n', 't', 'H', 'i', 'n', 't', 0,
    'R', 'a', 's', 't', 'e', 'r', 'O', 'p', '_', 'S', 'o', 'u', 'r', 'c', 'e', 'O', 'r', 'D', 'e', 's', 't', 'i', 'n', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'T', 'e', 'x', 't', 'u', 'r', 'e', ':', ':', 'S', 'w', 'i', 'z', 'z', 'l', 'e', 'V', 'a', 'l', 'u', 'e', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'S', 'h', 'a', 'd', 'e', 'r', ':', ':', 'S', 'h', 'a', 'd', 'e', 'r', 'T', 'y', 'p', 'e', 'B', 'i', 't', 0,
    's', 'e', 't', 'L', 'e', 'a', 's', 't', 'S', 'i', 'g', 'n', 'i', 'f', 'i', 'c', 'a', 'n', 't', 'B', 'y', 't', 'e', 'F', 'i', 'r', 's', 't', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'D', 'e', 'b', 'u', 'g', 'M', 'e', 's', 's', 'a', 'g', 'e', ':', ':', 'S', 'o', 'u', 'r', 'c', 'e', 's', 0,
    'Q', 'K', 'e', 'y', 'S', 'e', 'q', 'u', 'e', 'n', 'c', 'e', ':', ':', 'S', 'e', 'q', 'u', 'e', 'n', 'c', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'Q', 'I', 'm', 'a', 'g', 'e', 'I', 'O', 'H', 'a', 'n', 'd', 'l', 'e', 'r', ':', ':', 'I', 'm', 'a', 'g', 'e', 'O', 'p', 't', 'i', 'o', 'n', 0,
    'F', 'o', 'r', 'm', 'a', 't', '_', 'A', '2', 'R', 'G', 'B', '3', '0', '_', 'P', 'r', 'e', 'm', 'u', 'l', 't', 'i', 'p', 'l', 'i', 'e', 'd', 0,
    'F', 'o', 'r', 'm', 'a', 't', '_', 'A', '2', 'B', 'G', 'R', '3', '0', '_', 'P', 'r', 'e', 'm', 'u', 'l', 't', 'i', 'p', 'l', 'i', 'e', 'd', 0,
    'Q', 'F', 'o', 'n', 't', 'D', 'a', 't', 'a', 'b', 'a', 's', 'e', ':', ':', 'W', 'r', 'i', 't', 'i', 'n', 'g', 'S', 'y', 's', 't', 'e', 'm', 0,
    'Q', 'I', 'n', 'p', 'u', 't', 'M', 'e', 't', 'h', 'o', 'd', 'E', 'v', 'e', 'n', 't', ':', ':', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    'Q', 'R', 'e', 'g', 'u', 'l', 'a', 'r', 'E', 'x', 'p', 'r', 'e', 's', 's', 'i', 'o', 'n', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'o', 'r', 0,
    'c', 'l', 'e', 'a', 'r', 'C', 'o', 'l', 'u', 'm', 'n', 'W', 'i', 'd', 't', 'h', 'C', 'o', 'n', 's', 't', 'r', 'a', 'i', 'n', 't', 's', 0,
    'F', 'o', 'n', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'i', 'e', 's', 'S', 'p', 'e', 'c', 'i', 'f', 'i', 'e', 'd', 'O', 'n', 'l', 'y', 0,
    'T', 'a', 'b', 'l', 'e', 'C', 'o', 'l', 'u', 'm', 'n', 'W', 'i', 'd', 't', 'h', 'C', 'o', 'n', 's', 't', 'r', 'a', 'i', 'n', 't', 's', 0,
    'Q', 'T', 'e', 'x', 't', 'F', 'o', 'r', 'm', 'a', 't', ':', ':', 'P', 'a', 'g', 'e', 'B', 'r', 'e', 'a', 'k', 'F', 'l', 'a', 'g', 's', 0,
    'Q', 'T', 'e', 'x', 't', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', ':', ':', 'R', 'e', 's', 'o', 'u', 'r', 'c', 'e', 'T', 'y', 'p', 'e', 0,
    's', 'h', 'o', 'w', 'S', 'h', 'o', 'r', 't', 'c', 'u', 't', 's', 'I', 'n', 'C', 'o', 'n', 't', 'e', 'x', 't', 'M', 'e', 'n', 'u', 's', 0,
    'Q', 'P', 'i', 'x', 'e', 'l', 'F', 'o', 'r', 'm', 'a', 't', ':', ':', 'A', 'l', 'p', 'h', 'a', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'O', 'b', 'j', 'e', 'c', 't', 'B', 'o', 'u', 'n', 'd', 'i', 'n', 'g', 'M', 'o', 'd', 'e', 'G', 'r', 'a', 'd', 'i', 'e', 'n', 't', 's', 0,
    'C', 'o', 'm', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', '_', 'D', 'e', 's', 't', 'i', 'n', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'P', 'a', 'g', 'e', 'd', 'P', 'a', 'i', 'n', 't', 'D', 'e', 'v', 'i', 'c', 'e', ':', ':', 'P', 'a', 'g', 'e', 'S', 'i', 'z', 'e', 0,
    'I', 'm', 'm', 'u', 't', 'a', 'b', 'l', 'e', 'M', 'u', 'l', 't', 'i', 's', 'a', 'm', 'p', 'l', 'e', 'S', 't', 'o', 'r', 'a', 'g', 'e', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'T', 'e', 'x', 't', 'u', 'r', 'e', ':', ':', 'P', 'i', 'x', 'e', 'l', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'T', 'e', 'x', 't', 'u', 'r', 'e', ':', ':', 'C', 'u', 'b', 'e', 'M', 'a', 'p', 'F', 'a', 'c', 'e', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'P', 'i', 'x', 'e', 'l', 'T', 'r', 'a', 'n', 's', 'f', 'e', 'r', 'O', 'p', 't', 'i', 'o', 'n', 's', 0,
    'h', 'a', 's', 'O', 'p', 'e', 'n', 'G', 'L', 'F', 'r', 'a', 'm', 'e', 'b', 'u', 'f', 'f', 'e', 'r', 'O', 'b', 'j', 'e', 'c', 't', 's', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'D', 'e', 'b', 'u', 'g', 'M', 'e', 's', 's', 'a', 'g', 'e', ':', ':', 'S', 'o', 'u', 'r', 'c', 'e', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'B', 'u', 'f', 'f', 'e', 'r', ':', ':', 'U', 's', 'a', 'g', 'e', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'Q', 'K', 'e', 'y', 'S', 'e', 'q', 'u', 'e', 'n', 'c', 'e', ':', ':', 'S', 'e', 'q', 'u', 'e', 'n', 'c', 'e', 'M', 'a', 't', 'c', 'h', 0,
    'F', 'o', 'r', 'm', 'a', 't', '_', 'R', 'G', 'B', 'A', '6', '4', '_', 'P', 'r', 'e', 'm', 'u', 'l', 't', 'i', 'p', 'l', 'i', 'e', 'd', 0,
    'F', 'o', 'r', 'm', 'a', 't', '_', 'A', 'R', 'G', 'B', '3', '2', '_', 'P', 'r', 'e', 'm', 'u', 'l', 't', 'i', 'p', 'l', 'i', 'e', 'd', 0,
    'Q', 'I', 'c', 'o', 'n', 'E', 'n', 'g', 'i', 'n', 'e', ':', ':', 'I', 'c', 'o', 'n', 'E', 'n', 'g', 'i', 'n', 'e', 'H', 'o', 'o', 'k', 0,
    'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'T', 'e', 'x', 't', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 'L', 'a', 'y', 'o', 'u', 't', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'D', 'e', 'b', 'u', 'g', 'M', 'e', 's', 's', 'a', 'g', 'e', '>', 0,
    'Q', 'D', 'o', 'u', 'b', 'l', 'e', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'o', 'r', ':', ':', 'N', 'o', 't', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'T', 'o', 'u', 'c', 'h', 'D', 'e', 'v', 'i', 'c', 'e', ':', ':', 'C', 'a', 'p', 'a', 'b', 'i', 'l', 'i', 't', 'i', 'e', 's', 0,
    'Q', 'T', 'e', 'x', 't', 'F', 'r', 'a', 'm', 'e', 'F', 'o', 'r', 'm', 'a', 't', ':', ':', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'Q', 'T', 'e', 'x', 't', 'F', 'o', 'r', 'm', 'a', 't', ':', ':', 'P', 'a', 'g', 'e', 'B', 'r', 'e', 'a', 'k', 'F', 'l', 'a', 'g', 0,
    'Q', 'T', 'e', 'x', 't', 'C', 'u', 'r', 's', 'o', 'r', ':', ':', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 'T', 'y', 'p', 'e', 0,
    'Q', 'T', 'e', 'x', 't', 'C', 'u', 'r', 's', 'o', 'r', ':', ':', 'M', 'o', 'v', 'e', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'S', 'u', 'r', 'f', 'a', 'c', 'e', 'F', 'o', 'r', 'm', 'a', 't', ':', ':', 'C', 'o', 'l', 'o', 'r', 'S', 'p', 'a', 'c', 'e', 0,
    'p', 'h', 'y', 's', 'i', 'c', 'a', 'l', 'D', 'o', 't', 's', 'P', 'e', 'r', 'I', 'n', 'c', 'h', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'Q', 'R', 'a', 'w', 'F', 'o', 'n', 't', ':', ':', 'A', 'n', 't', 'i', 'a', 'l', 'i', 'a', 's', 'i', 'n', 'g', 'T', 'y', 'p', 'e', 0,
    'C', 'o', 'm', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', '_', 'D', 'i', 'f', 'f', 'e', 'r', 'e', 'n', 'c', 'e', 0,
    'C', 'o', 'm', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', '_', 'C', 'o', 'l', 'o', 'r', 'D', 'o', 'd', 'g', 'e', 0,
    'C', 'o', 'm', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', '_', 'S', 'o', 'u', 'r', 'c', 'e', 'A', 't', 'o', 'p', 0,
    'C', 'o', 'm', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', '_', 'S', 'o', 'u', 'r', 'c', 'e', 'O', 'v', 'e', 'r', 0,
    'Q', 'P', 'a', 'g', 'e', 'S', 'i', 'z', 'e', ':', ':', 'S', 'i', 'z', 'e', 'M', 'a', 't', 'c', 'h', 'P', 'o', 'l', 'i', 'c', 'y', 0,
    'Q', 'P', 'a', 'g', 'e', 'd', 'P', 'a', 'i', 'n', 't', 'D', 'e', 'v', 'i', 'c', 'e', ':', ':', 'M', 'a', 'r', 'g', 'i', 'n', 's', 0,
    'T', 'e', 'x', 't', 'u', 'r', 'e', 'C', 'o', 'm', 'p', 'a', 'r', 'i', 's', 'o', 'n', 'O', 'p', 'e', 'r', 'a', 't', 'o', 'r', 's', 0,
    'B', 'i', 'n', 'd', 'i', 'n', 'g', 'T', 'a', 'r', 'g', 'e', 't', '2', 'D', 'M', 'u', 'l', 't', 'i', 's', 'a', 'm', 'p', 'l', 'e', 0,
    'i', 's', 'L', 'e', 'a', 's', 't', 'S', 'i', 'g', 'n', 'i', 'f', 'i', 'c', 'a', 'n', 't', 'B', 'i', 't', 'F', 'i', 'r', 's', 't', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'D', 'e', 'b', 'u', 'g', 'M', 'e', 's', 's', 'a', 'g', 'e', ':', ':', 'T', 'y', 'p', 'e', 's', 0,
    's', 'e', 't', 'D', 'e', 'c', 'i', 'd', 'e', 'F', 'o', 'r', 'm', 'a', 't', 'F', 'r', 'o', 'm', 'C', 'o', 'n', 't', 'e', 'n', 't', 0,
    'a', 'd', 'd', 'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'F', 'o', 'n', 't', 'F', 'r', 'o', 'm', 'D', 'a', 't', 'a', 0,
    'Q', 'T', 'a', 'b', 'l', 'e', 't', 'E', 'v', 'e', 'n', 't', ':', ':', 'T', 'a', 'b', 'l', 'e', 't', 'D', 'e', 'v', 'i', 'c', 'e', 0,
    'c', 'o', 'n', 't', 'e', 'n', 't', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'Q', 'T', 'e', 'x', 't', 'L', 'i', 'n', 'e', ':', ':', 'C', 'u', 'r', 's', 'o', 'r', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'C', 'o', 'l', 'u', 'm', 'n', 'W', 'i', 'd', 't', 'h', 'C', 'o', 'n', 's', 't', 'r', 'a', 'i', 'n', 't', 's', 0,
    's', 'e', 't', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'C', 'u', 'r', 's', 'o', 'r', 'M', 'o', 'v', 'e', 'S', 't', 'y', 'l', 'e', 0,
    'm', 'o', 'u', 's', 'e', 'P', 'r', 'e', 's', 's', 'A', 'n', 'd', 'H', 'o', 'l', 'd', 'I', 'n', 't', 'e', 'r', 'v', 'a', 'l', 0,
    's', 'e', 't', 'H', 'o', 'r', 'i', 'z', 'o', 'n', 't', 'a', 'l', 'H', 'e', 'a', 'd', 'e', 'r', 'L', 'a', 'b', 'e', 'l', 's', 0,
    'p', 'r', 'i', 'm', 'a', 'r', 'y', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'l', 'o', 'g', 'i', 'c', 'a', 'l', 'D', 'o', 't', 's', 'P', 'e', 'r', 'I', 'n', 'c', 'h', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'Q', 'P', 'a', 'i', 'n', 't', 'e', 'r', 'P', 'a', 't', 'h', ':', ':', 'E', 'l', 'e', 'm', 'e', 'n', 't', 'T', 'y', 'p', 'e', 0,
    'P', 'd', 'm', 'D', 'e', 'v', 'i', 'c', 'e', 'P', 'i', 'x', 'e', 'l', 'R', 'a', 't', 'i', 'o', 'S', 'c', 'a', 'l', 'e', 'd', 0,
    'R', 'a', 's', 't', 'e', 'r', 'O', 'p', '_', 'C', 'l', 'e', 'a', 'r', 'D', 'e', 's', 't', 'i', 'n', 'a', 't', 'i', 'o', 'n', 0,
    'C', 'o', 'm', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', '_', 'E', 'x', 'c', 'l', 'u', 's', 'i', 'o', 'n', 0,
    'C', 'o', 'm', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', '_', 'S', 'o', 'f', 't', 'L', 'i', 'g', 'h', 't', 0,
    'C', 'o', 'm', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', '_', 'H', 'a', 'r', 'd', 'L', 'i', 'g', 'h', 't', 0,
    'C', 'o', 'm', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', '_', 'C', 'o', 'l', 'o', 'r', 'B', 'u', 'r', 'n', 0,
    'C', 'o', 'm', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', '_', 'S', 'o', 'u', 'r', 'c', 'e', 'O', 'u', 't', 0,
    'Q', 'P', 'a', 'i', 'n', 't', 'e', 'r', ':', ':', 'C', 'o', 'm', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', 0,
    's', 'u', 'p', 'p', 'o', 'r', 't', 's', 'E', 'x', 't', 'e', 'r', 'n', 'a', 'l', 'O', 'E', 'S', 'T', 'a', 'r', 'g', 'e', 't', 0,
    'F', 'l', 'o', 'a', 't', '3', '2', '_', 'D', '3', '2', '_', 'U', 'I', 'n', 't', '3', '2', '_', 'S', '8', '_', 'X', '2', '4', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'T', 'e', 'x', 't', 'u', 'r', 'e', ':', ':', 'P', 'i', 'x', 'e', 'l', 'T', 'y', 'p', 'e', 0,
    'B', 'i', 'n', 'd', 'i', 'n', 'g', 'T', 'a', 'r', 'g', 'e', 't', 'C', 'u', 'b', 'e', 'M', 'a', 'p', 'A', 'r', 'r', 'a', 'y', 0,
    'm', 'a', 'x', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'O', 'u', 't', 'p', 'u', 't', 'V', 'e', 'r', 't', 'i', 'c', 'e', 's', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'S', 'h', 'a', 'd', 'e', 'r', ':', ':', 'S', 'h', 'a', 'd', 'e', 'r', 'T', 'y', 'p', 'e', 0,
    'R', 'e', 's', 't', 'o', 'r', 'e', 'F', 'r', 'a', 'm', 'e', 'B', 'u', 'f', 'f', 'e', 'r', 'B', 'i', 'n', 'd', 'i', 'n', 'g', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'D', 'e', 'b', 'u', 'g', 'M', 'e', 's', 's', 'a', 'g', 'e', ':', ':', 'T', 'y', 'p', 'e', 0,
    'Q', 'K', 'e', 'y', 'S', 'e', 'q', 'u', 'e', 'n', 'c', 'e', ':', ':', 'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'K', 'e', 'y', 0,
    's', 'e', 't', 'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'D', 'i', 's', 'p', 'l', 'a', 'y', 'N', 'a', 'm', 'e', 0,
    's', 'e', 't', 'Q', 'u', 'i', 't', 'O', 'n', 'L', 'a', 's', 't', 'W', 'i', 'n', 'd', 'o', 'w', 'C', 'l', 'o', 's', 'e', 'd', 0,
    'Q', 'F', 'o', 'n', 't', 'D', 'a', 't', 'a', 'b', 'a', 's', 'e', ':', ':', 'S', 'y', 's', 't', 'e', 'm', 'F', 'o', 'n', 't', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'A', 'l', 'l', 'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'F', 'o', 'n', 't', 's', 0,
    'S', 'u', 'r', 'f', 'a', 'c', 'e', 'A', 'b', 'o', 'u', 't', 'T', 'o', 'B', 'e', 'D', 'e', 's', 't', 'r', 'o', 'y', 'e', 'd', 0,
    'Q', 'S', 'c', 'r', 'o', 'l', 'l', 'E', 'v', 'e', 'n', 't', ':', ':', 'S', 'c', 'r', 'o', 'l', 'l', 'S', 't', 'a', 't', 'e', 0,
    'Q', 'C', 'o', 'n', 't', 'e', 'x', 't', 'M', 'e', 'n', 'u', 'E', 'v', 'e', 'n', 't', ':', ':', 'R', 'e', 'a', 's', 'o', 'n', 0,
    'Q', 'T', 'a', 'b', 'l', 'e', 't', 'E', 'v', 'e', 'n', 't', ':', ':', 'P', 'o', 'i', 'n', 't', 'e', 'r', 'T', 'y', 'p', 'e', 0,
    'Q', 'G', 'r', 'a', 'd', 'i', 'e', 'n', 't', ':', ':', 'C', 'o', 'o', 'r', 'd', 'i', 'n', 'a', 't', 'e', 'M', 'o', 'd', 'e', 0,
    'Q', 'T', 'o', 'u', 'c', 'h', 'D', 'e', 'v', 'i', 'c', 'e', ':', ':', 'D', 'e', 'v', 'i', 'c', 'e', 'T', 'y', 'p', 'e', 0,
    'Q', 'T', 'e', 'x', 't', 'L', 'a', 'y', 'o', 'u', 't', ':', ':', 'F', 'o', 'r', 'm', 'a', 't', 'R', 'a', 'n', 'g', 'e', 0,
    's', 'e', 't', 'F', 'o', 'n', 't', 'L', 'e', 't', 't', 'e', 'r', 'S', 'p', 'a', 'c', 'i', 'n', 'g', 'T', 'y', 'p', 'e', 0,
    's', 'e', 't', 'F', 'o', 'n', 't', 'H', 'i', 'n', 't', 'i', 'n', 'g', 'P', 'r', 'e', 'f', 'e', 'r', 'e', 'n', 'c', 'e', 0,
    'Q', 'T', 'e', 'x', 't', 'F', 'o', 'r', 'm', 'a', 't', ':', ':', 'O', 'b', 'j', 'e', 'c', 't', 'T', 'y', 'p', 'e', 's', 0,
    's', 'u', 'p', 'p', 'o', 'r', 't', 'e', 'd', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 'F', 'o', 'r', 'm', 'a', 't', 's', 0,
    'Q', 'T', 'e', 'x', 't', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', ':', ':', 'F', 'i', 'n', 'd', 'F', 'l', 'a', 'g', 's', 0,
    's', 't', 'a', 'r', 't', 'D', 'r', 'a', 'g', 'D', 'i', 's', 't', 'a', 'n', 'c', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'm', 'o', 'u', 's', 'e', 'D', 'o', 'u', 'b', 'l', 'e', 'C', 'l', 'i', 'c', 'k', 'I', 'n', 't', 'e', 'r', 'v', 'a', 'l', 0,
    's', 'e', 't', 'A', 'c', 'c', 'e', 's', 's', 'i', 'b', 'l', 'e', 'D', 'e', 's', 'c', 'r', 'i', 'p', 't', 'i', 'o', 'n', 0,
    't', 'a', 'k', 'e', 'H', 'o', 'r', 'i', 'z', 'o', 'n', 't', 'a', 'l', 'H', 'e', 'a', 'd', 'e', 'r', 'I', 't', 'e', 'm', 0,
    'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    's', 'e', 't', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 'U', 'p', 'd', 'a', 't', 'e', 'M', 'a', 's', 'k', 0,
    'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'V', 'i', 'r', 't', 'u', 'a', 'l', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 0,
    'Q', 'P', 'i', 'x', 'e', 'l', 'F', 'o', 'r', 'm', 'a', 't', ':', ':', 'A', 'l', 'p', 'h', 'a', 'U', 's', 'a', 'g', 'e', 0,
    'Q', 'P', 'i', 'x', 'e', 'l', 'F', 'o', 'r', 'm', 'a', 't', ':', ':', 'C', 'o', 'l', 'o', 'r', 'M', 'o', 'd', 'e', 'l', 0,
    'Q', 'P', 'a', 'i', 'n', 't', 'E', 'n', 'g', 'i', 'n', 'e', ':', ':', 'D', 'i', 'r', 't', 'y', 'F', 'l', 'a', 'g', 's', 0,
    'Q', 'P', 'a', 'i', 'n', 't', 'e', 'r', ':', ':', 'P', 'i', 'x', 'm', 'a', 'p', 'F', 'r', 'a', 'g', 'm', 'e', 'n', 't', 0,
    'C', 'o', 'm', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', '_', 'M', 'u', 'l', 't', 'i', 'p', 'l', 'y', 0,
    'C', 'o', 'm', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', '_', 'S', 'o', 'u', 'r', 'c', 'e', 'I', 'n', 0,
    'Q', 'P', 'a', 'g', 'e', 'L', 'a', 'y', 'o', 'u', 't', ':', ':', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'V', 'e', 'r', 't', 'e', 'x', 'A', 'r', 'r', 'a', 'y', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'O', 'p', 'e', 'n', 'G', 'L', 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 's', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'T', 'e', 'x', 't', 'u', 'r', 'e', ':', ':', 'W', 'r', 'a', 'p', 'M', 'o', 'd', 'e', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'T', 'e', 'x', 't', 'u', 'r', 'e', ':', ':', 'F', 'e', 'a', 't', 'u', 'r', 'e', 's', 0,
    's', 'e', 't', 'I', 'n', 't', 'e', 'r', 'n', 'a', 'l', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'h', 'a', 's', 'O', 'p', 'e', 'n', 'G', 'L', 'F', 'r', 'a', 'm', 'e', 'b', 'u', 'f', 'f', 'e', 'r', 'B', 'l', 'i', 't', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'F', 'r', 'a', 'm', 'e', 'b', 'u', 'f', 'f', 'e', 'r', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'M', 'e', 's', 's', 'a', 'g', 'e', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'F', 'r', 'a', 'm', 'e', 'b', 'u', 'f', 'f', 'e', 'r', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'I', 'n', 's', 'e', 'r', 't', 'P', 'a', 'r', 'a', 'g', 'r', 'a', 'p', 'h', 'S', 'e', 'p', 'a', 'r', 'a', 't', 'o', 'r', 0,
    'k', 'e', 'y', 'b', 'o', 'a', 'r', 'd', 'R', 'e', 'c', 't', 'a', 'n', 'g', 'l', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    's', 'e', 't', 'A', 'u', 't', 'o', 'D', 'e', 't', 'e', 'c', 't', 'I', 'm', 'a', 'g', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'Q', 'G', 'l', 'y', 'p', 'h', 'R', 'u', 'n', ':', ':', 'G', 'l', 'y', 'p', 'h', 'R', 'u', 'n', 'F', 'l', 'a', 'g', 's', 0,
    'Q', 'F', 'o', 'n', 't', ':', ':', 'H', 'i', 'n', 't', 'i', 'n', 'g', 'P', 'r', 'e', 'f', 'e', 'r', 'e', 'n', 'c', 'e', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'T', 'e', 'x', 't', 'O', 'p', 't', 'i', 'o', 'n', ':', ':', 'T', 'a', 'b', '>', 0,
    'C', 'u', 'r', 's', 'o', 'r', 'B', 'e', 't', 'w', 'e', 'e', 'n', 'C', 'h', 'a', 'r', 'a', 'c', 't', 'e', 'r', 's', 0,
    'Q', 'T', 'e', 'x', 't', 'L', 'a', 'y', 'o', 'u', 't', ':', ':', 'C', 'u', 'r', 's', 'o', 'r', 'M', 'o', 'd', 'e', 0,
    'Q', 'T', 'e', 'x', 't', 'F', 'o', 'r', 'm', 'a', 't', ':', ':', 'F', 'o', 'r', 'm', 'a', 't', 'T', 'y', 'p', 'e', 0,
    'Q', 'T', 'e', 'x', 't', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', ':', ':', 'F', 'i', 'n', 'd', 'F', 'l', 'a', 'g', 0,
    's', 'e', 't', 'K', 'e', 'e', 'p', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 'O', 'n', 'I', 'n', 's', 'e', 'r', 't', 0,
    's', 'e', 't', 'C', 'u', 'r', 'r', 'e', 'n', 't', 'B', 'l', 'o', 'c', 'k', 'U', 's', 'e', 'r', 'D', 'a', 't', 'a', 0,
    'w', 'h', 'e', 'e', 'l', 'S', 'c', 'r', 'o', 'l', 'l', 'L', 'i', 'n', 'e', 's', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    't', 'a', 'b', 'F', 'o', 'c', 'u', 's', 'B', 'e', 'h', 'a', 'v', 'i', 'o', 'r', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'Q', 'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'I', 't', 'e', 'm', ':', ':', 'I', 't', 'e', 'm', 'T', 'y', 'p', 'e', 0,
    's', 'e', 't', 'V', 'e', 'r', 't', 'i', 'c', 'a', 'l', 'H', 'e', 'a', 'd', 'e', 'r', 'L', 'a', 'b', 'e', 'l', 's', 0,
    's', 'e', 't', 'H', 'o', 'r', 'i', 'z', 'o', 'n', 't', 'a', 'l', 'H', 'e', 'a', 'd', 'e', 'r', 'I', 't', 'e', 'm', 0,
    's', 'u', 'p', 'p', 'o', 'r', 't', 'e', 'd', 'W', 'r', 'i', 't', 'i', 'n', 'g', 'S', 'y', 's', 't', 'e', 'm', 's', 0,
    'a', 'd', 'v', 'a', 'n', 'c', 'e', 's', 'F', 'o', 'r', 'G', 'l', 'y', 'p', 'h', 'I', 'n', 'd', 'e', 'x', 'e', 's', 0,
    'Q', 'P', 'i', 'x', 'e', 'l', 'F', 'o', 'r', 'm', 'a', 't', ':', ':', 'B', 'y', 't', 'e', 'O', 'r', 'd', 'e', 'r', 0,
    'Q', 'P', 'i', 'x', 'e', 'l', 'F', 'o', 'r', 'm', 'a', 't', ':', ':', 'Y', 'U', 'V', 'L', 'a', 'y', 'o', 'u', 't', 0,
    'Q', 'P', 'a', 'i', 'n', 't', 'E', 'n', 'g', 'i', 'n', 'e', ':', ':', 'D', 'i', 'r', 't', 'y', 'F', 'l', 'a', 'g', 0,
    's', 'e', 't', 'V', 'i', 'e', 'w', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'R', 'a', 's', 't', 'e', 'r', 'O', 'p', '_', 'N', 'o', 't', 'D', 'e', 's', 't', 'i', 'n', 'a', 't', 'i', 'o', 'n', 0,
    'R', 'a', 's', 't', 'e', 'r', 'O', 'p', '_', 'S', 'e', 't', 'D', 'e', 's', 't', 'i', 'n', 'a', 't', 'i', 'o', 'n', 0,
    'C', 'o', 'm', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', '_', 'L', 'i', 'g', 'h', 't', 'e', 'n', 0,
    'C', 'o', 'm', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', '_', 'O', 'v', 'e', 'r', 'l', 'a', 'y', 0,
    'H', 'i', 'g', 'h', 'Q', 'u', 'a', 'l', 'i', 't', 'y', 'A', 'n', 't', 'i', 'a', 'l', 'i', 'a', 's', 'i', 'n', 'g', 0,
    's', 'e', 't', 'F', 'i', 'x', 'e', 'd', 'S', 'a', 'm', 'p', 'l', 'e', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 's', 0,
    's', 'e', 't', 'M', 'a', 'x', 'i', 'm', 'u', 'm', 'L', 'e', 'v', 'e', 'l', 'O', 'f', 'D', 'e', 't', 'a', 'i', 'l', 0,
    's', 'e', 't', 'M', 'i', 'n', 'i', 'm', 'u', 'm', 'L', 'e', 'v', 'e', 'l', 'O', 'f', 'D', 'e', 't', 'a', 'i', 'l', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'T', 'e', 'x', 't', 'u', 'r', 'e', ':', ':', 'F', 'e', 'a', 't', 'u', 'r', 'e', 0,
    'S', 'R', 'G', 'B', '8', '_', 'A', 'l', 'p', 'h', 'a', '8', '_', 'A', 'S', 'T', 'C', '_', '1', '2', 'x', '1', '2', 0,
    'S', 'R', 'G', 'B', '8', '_', 'A', 'l', 'p', 'h', 'a', '8', '_', 'A', 'S', 'T', 'C', '_', '1', '2', 'x', '1', '0', 0,
    'S', 'R', 'G', 'B', '8', '_', 'A', 'l', 'p', 'h', 'a', '8', '_', 'A', 'S', 'T', 'C', '_', '1', '0', 'x', '1', '0', 0,
    'h', 'a', 's', 'O', 'p', 'e', 'n', 'G', 'L', 'S', 'h', 'a', 'd', 'e', 'r', 'P', 'r', 'o', 'g', 'r', 'a', 'm', 's', 0,
    'a', 'd', 'd', 'S', 'h', 'a', 'd', 'e', 'r', 'F', 'r', 'o', 'm', 'S', 'o', 'u', 'r', 'c', 'e', 'F', 'i', 'l', 'e', 0,
    'a', 'd', 'd', 'S', 'h', 'a', 'd', 'e', 'r', 'F', 'r', 'o', 'm', 'S', 'o', 'u', 'r', 'c', 'e', 'C', 'o', 'd', 'e', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'T', 'h', 'i', 'r', 'd', 'P', 'a', 'r', 't', 'y', 'M', 'e', 's', 's', 'a', 'g', 'e', 0,
    's', 'e', 't', 'P', 'r', 'o', 'g', 'r', 'e', 's', 's', 'i', 'v', 'e', 'S', 'c', 'a', 'n', 'W', 'r', 'i', 't', 'e', 0,
    'i', 'm', 'a', 'g', 'e', 'F', 'o', 'r', 'm', 'a', 't', 's', 'F', 'o', 'r', 'M', 'i', 'm', 'e', 'T', 'y', 'p', 'e', 0,
    'd', 'e', 'c', 'i', 'd', 'e', 'F', 'o', 'r', 'm', 'a', 't', 'F', 'r', 'o', 'm', 'C', 'o', 'n', 't', 'e', 'n', 't', 0,
    'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'a', 't', 'i', 'o', 'n', 'R', 'o', 't', 'a', 't', 'e', '2', '7', '0', 0,
    'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'a', 't', 'i', 'o', 'n', 'R', 'o', 't', 'a', 't', 'e', '1', '8', '0', 0,
    'a', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'S', 't', 'a', 't', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    's', 'e', 't', 'D', 'e', 's', 'k', 't', 'o', 'p', 'S', 'e', 't', 't', 'i', 'n', 'g', 's', 'A', 'w', 'a', 'r', 'e', 0,
    'Q', 'G', 'l', 'y', 'p', 'h', 'R', 'u', 'n', ':', ':', 'G', 'l', 'y', 'p', 'h', 'R', 'u', 'n', 'F', 'l', 'a', 'g', 0,
    'a', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'F', 'o', 'n', 't', 'F', 'a', 'm', 'i', 'l', 'i', 'e', 's', 0,
    'Q', 'P', 'o', 'i', 'n', 't', 'i', 'n', 'g', 'D', 'e', 'v', 'i', 'c', 'e', 'U', 'n', 'i', 'q', 'u', 'e', 'I', 'd', 0,
    'Q', 'T', 'o', 'u', 'c', 'h', 'E', 'v', 'e', 'n', 't', ':', ':', 'T', 'o', 'u', 'c', 'h', 'P', 'o', 'i', 'n', 't', 0,
    'Q', 'W', 'i', 'n', 'd', 'o', 'w', 'S', 't', 'a', 't', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'C', 'o', 'n', 't', 'e', 'x', 't', '*', '>', 0,
    's', 'e', 't', 'K', 'e', 'y', 'b', 'o', 'a', 'r', 'd', 'G', 'r', 'a', 'b', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'S', 'h', 'o', 'w', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 'T', 'e', 'r', 'm', 'i', 'n', 'a', 't', 'o', 'r', 0,
    'p', 'r', 'e', 'v', 'i', 'o', 'u', 's', 'C', 'u', 'r', 's', 'o', 'r', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'c', 'l', 'e', 'a', 'r', 'A', 'd', 'd', 'i', 't', 'i', 'o', 'n', 'a', 'l', 'F', 'o', 'r', 'm', 'a', 't', 's', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 'W', 'i', 'd', 't', 'h', 'C', 'o', 'n', 's', 't', 'r', 'a', 'i', 'n', 't', 's', 0,
    'B', 'o', 'r', 'd', 'e', 'r', 'S', 't', 'y', 'l', 'e', '_', 'D', 'o', 't', 'D', 'o', 't', 'D', 'a', 's', 'h', 0,
    'Q', 'T', 'e', 'x', 't', 'L', 'i', 's', 't', 'F', 'o', 'r', 'm', 'a', 't', ':', ':', 'S', 't', 'y', 'l', 'e', 0,
    's', 'e', 't', 'T', 'a', 'b', 'l', 'e', 'C', 'e', 'l', 'l', 'C', 'o', 'l', 'u', 'm', 'n', 'S', 'p', 'a', 'n', 0,
    'T', 'a', 'b', 'l', 'e', 'C', 'e', 'l', 'l', 'B', 'o', 't', 't', 'o', 'm', 'P', 'a', 'd', 'd', 'i', 'n', 'g', 0,
    'B', 'l', 'o', 'c', 'k', 'N', 'o', 'n', 'B', 'r', 'e', 'a', 'k', 'a', 'b', 'l', 'e', 'L', 'i', 'n', 'e', 's', 0,
    'P', 'a', 'g', 'e', 'B', 'r', 'e', 'a', 'k', '_', 'A', 'l', 'w', 'a', 'y', 's', 'B', 'e', 'f', 'o', 'r', 'e', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'C', 'u', 'r', 's', 'o', 'r', 'M', 'o', 'v', 'e', 'S', 't', 'y', 'l', 'e', 0,
    'Q', 'S', 'u', 'r', 'f', 'a', 'c', 'e', ':', ':', 'S', 'u', 'r', 'f', 'a', 'c', 'e', 'C', 'l', 'a', 's', 's', 0,
    'u', 's', 'e', 'H', 'o', 'v', 'e', 'r', 'E', 'f', 'f', 'e', 'c', 't', 's', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'c', 'u', 'r', 's', 'o', 'r', 'F', 'l', 'a', 's', 'h', 'T', 'i', 'm', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    's', 'e', 't', 'F', 'o', 'c', 'u', 's', 'O', 'n', 'T', 'o', 'u', 'c', 'h', 'R', 'e', 'l', 'e', 'a', 's', 'e', 0,
    'k', 'e', 'y', 'b', 'o', 'a', 'r', 'd', 'A', 'u', 't', 'o', 'R', 'e', 'p', 'e', 'a', 't', 'R', 'a', 't', 'e', 0,
    't', 'a', 'k', 'e', 'V', 'e', 'r', 't', 'i', 'c', 'a', 'l', 'H', 'e', 'a', 'd', 'e', 'r', 'I', 't', 'e', 'm', 0,
    'a', 'l', 'l', 'o', 'w', 's', 'E', 'r', 'r', 'o', 'r', 'I', 'n', 't', 'e', 'r', 'a', 'c', 't', 'i', 'o', 'n', 0,
    'v', 'i', 'r', 't', 'u', 'a', 'l', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'P', 'a', 'i', 'n', 't', 'O', 'u', 't', 's', 'i', 'd', 'e', 'P', 'a', 'i', 'n', 't', 'E', 'v', 'e', 'n', 't', 0,
    'Q', 'T', 'e', 'x', 't', 'I', 't', 'e', 'm', ':', ':', 'R', 'e', 'n', 'd', 'e', 'r', 'F', 'l', 'a', 'g', 's', 0,
    'd', 'e', 'v', 'i', 'c', 'e', 'P', 'i', 'x', 'e', 'l', 'R', 'a', 't', 'i', 'o', 'F', 'S', 'c', 'a', 'l', 'e', 0,
    'C', 'o', 'm', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', '_', 'D', 'a', 'r', 'k', 'e', 'n', 0,
    'C', 'o', 'm', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', '_', 'S', 'c', 'r', 'e', 'e', 'n', 0,
    'C', 'o', 'm', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', '_', 'S', 'o', 'u', 'r', 'c', 'e', 0,
    'i', 's', 'F', 'i', 'x', 'e', 'd', 'S', 'a', 'm', 'p', 'l', 'e', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 's', 0,
    's', 'e', 't', 'M', 'a', 'g', 'n', 'i', 'f', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'T', 'e', 'x', 't', 'u', 'r', 'e', ':', ':', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'S', 'R', 'G', 'B', '8', '_', 'A', 'l', 'p', 'h', 'a', '8', '_', 'A', 'S', 'T', 'C', '_', '1', '0', 'x', '8', 0,
    'S', 'R', 'G', 'B', '8', '_', 'A', 'l', 'p', 'h', 'a', '8', '_', 'A', 'S', 'T', 'C', '_', '1', '0', 'x', '6', 0,
    'S', 'R', 'G', 'B', '8', '_', 'A', 'l', 'p', 'h', 'a', '8', '_', 'A', 'S', 'T', 'C', '_', '1', '0', 'x', '5', 0,
    'B', 'i', 'n', 'd', 'i', 'n', 'g', 'T', 'a', 'r', 'g', 'e', 't', 'R', 'e', 'c', 't', 'a', 'n', 'g', 'l', 'e', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'T', 'e', 'x', 't', 'u', 'r', 'e', ':', ':', 'T', 'a', 'r', 'g', 'e', 't', 0,
    'T', 'e', 's', 's', 'e', 'l', 'l', 'a', 't', 'i', 'o', 'n', 'E', 'v', 'a', 'l', 'u', 'a', 't', 'i', 'o', 'n', 0,
    'D', 'e', 'p', 'r', 'e', 'c', 'a', 't', 'e', 'd', 'B', 'e', 'h', 'a', 'v', 'i', 'o', 'r', 'T', 'y', 'p', 'e', 0,
    's', 'u', 'p', 'p', 'o', 'r', 't', 's', 'T', 'h', 'r', 'e', 'a', 'd', 'e', 'd', 'O', 'p', 'e', 'n', 'G', 'L', 0,
    'a', 'n', 'c', 'h', 'o', 'r', 'R', 'e', 'c', 't', 'a', 'n', 'g', 'l', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'i', 'n', 'p', 'u', 't', 'I', 't', 'e', 'm', 'C', 'l', 'i', 'p', 'R', 'e', 'c', 't', 'a', 'n', 'g', 'l', 'e', 0,
    'c', 'u', 'r', 's', 'o', 'r', 'R', 'e', 'c', 't', 'a', 'n', 'g', 'l', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'U', 'n', 's', 'u', 'p', 'p', 'o', 'r', 't', 'e', 'd', 'F', 'o', 'r', 'm', 'a', 't', 'E', 'r', 'r', 'o', 'r', 0,
    'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'a', 't', 'i', 'o', 'n', 'R', 'o', 't', 'a', 't', 'e', '9', '0', 0,
    's', 'e', 't', 'F', 'a', 'l', 'l', 'b', 'a', 'c', 'k', 'S', 'e', 'a', 'r', 'c', 'h', 'P', 'a', 't', 'h', 's', 0,
    'l', 'a', 'y', 'o', 'u', 't', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'a', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'D', 'i', 's', 'p', 'l', 'a', 'y', 'N', 'a', 'm', 'e', 0,
    'q', 'u', 'i', 't', 'O', 'n', 'L', 'a', 's', 't', 'W', 'i', 'n', 'd', 'o', 'w', 'C', 'l', 'o', 's', 'e', 'd', 0,
    'q', 'u', 'e', 'r', 'y', 'K', 'e', 'y', 'b', 'o', 'a', 'r', 'd', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'r', 's', 0,
    'Q', 'W', 'h', 'a', 't', 's', 'T', 'h', 'i', 's', 'C', 'l', 'i', 'c', 'k', 'e', 'd', 'E', 'v', 'e', 'n', 't', 0,
    'Q', 'I', 'n', 'p', 'u', 't', 'M', 'e', 't', 'h', 'o', 'd', 'Q', 'u', 'e', 'r', 'y', 'E', 'v', 'e', 'n', 't', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'I', 't', 'e', 'm', '*', '>', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'S', 'h', 'a', 'd', 'e', 'r', '*', '>', 0,
    'm', 'o', 'u', 's', 'e', 'D', 'o', 'u', 'b', 'l', 'e', 'C', 'l', 'i', 'c', 'k', 'E', 'v', 'e', 'n', 't', 0,
    'Q', 'W', 'i', 'n', 'd', 'o', 'w', ':', ':', 'A', 'n', 'c', 'e', 's', 't', 'o', 'r', 'M', 'o', 'd', 'e', 0,
    's', 'e', 't', 'M', 'a', 'x', 'i', 'm', 'u', 'm', 'T', 'o', 'u', 'c', 'h', 'P', 'o', 'i', 'n', 't', 's', 0,
    'I', 'n', 'c', 'l', 'u', 'd', 'e', 'T', 'r', 'a', 'i', 'l', 'i', 'n', 'g', 'S', 'p', 'a', 'c', 'e', 's', 0,
    'Q', 'T', 'e', 'x', 't', 'O', 'p', 't', 'i', 'o', 'n', ':', ':', 'W', 'r', 'a', 'p', 'M', 'o', 'd', 'e', 0,
    'i', 's', 'V', 'a', 'l', 'i', 'd', 'C', 'u', 'r', 's', 'o', 'r', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'f', 'o', 'n', 't', 'L', 'e', 't', 't', 'e', 'r', 'S', 'p', 'a', 'c', 'i', 'n', 'g', 'T', 'y', 'p', 'e', 0,
    'f', 'o', 'n', 't', 'H', 'i', 'n', 't', 'i', 'n', 'g', 'P', 'r', 'e', 'f', 'e', 'r', 'e', 'n', 'c', 'e', 0,
    's', 'e', 't', 'F', 'o', 'n', 't', 'C', 'a', 'p', 'i', 't', 'a', 'l', 'i', 'z', 'a', 't', 'i', 'o', 'n', 0,
    'T', 'a', 'b', 'l', 'e', 'C', 'e', 'l', 'l', 'R', 'i', 'g', 'h', 't', 'P', 'a', 'd', 'd', 'i', 'n', 'g', 0,
    'T', 'e', 'x', 't', 'V', 'e', 'r', 't', 'i', 'c', 'a', 'l', 'A', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', 0,
    'Q', 'T', 'e', 'x', 't', 'F', 'o', 'r', 'm', 'a', 't', ':', ':', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'P', 'a', 'g', 'e', 'B', 'r', 'e', 'a', 'k', '_', 'A', 'l', 'w', 'a', 'y', 's', 'A', 'f', 't', 'e', 'r', 0,
    'Q', 'T', 'e', 'x', 't', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 'F', 'r', 'a', 'g', 'm', 'e', 'n', 't', 0,
    'Q', 'T', 'e', 'x', 't', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', ':', ':', 'S', 't', 'a', 'c', 'k', 's', 0,
    'd', 'o', 'c', 'u', 'm', 'e', 'n', 't', 'L', 'a', 'y', 'o', 'u', 't', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'f', 'i', 'n', 'd', 'B', 'l', 'o', 'c', 'k', 'B', 'y', 'L', 'i', 'n', 'e', 'N', 'u', 'm', 'b', 'e', 'r', 0,
    'c', 'u', 'r', 's', 'o', 'r', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'j', 'o', 'i', 'n', 'P', 'r', 'e', 'v', 'i', 'o', 'u', 's', 'E', 'd', 'i', 't', 'B', 'l', 'o', 'c', 'k', 0,
    'Q', 'T', 'e', 'x', 't', 'C', 'u', 'r', 's', 'o', 'r', ':', ':', 'M', 'o', 'v', 'e', 'M', 'o', 'd', 'e', 0,
    'D', 'e', 'f', 'a', 'u', 'l', 't', 'R', 'e', 'n', 'd', 'e', 'r', 'a', 'b', 'l', 'e', 'T', 'y', 'p', 'e', 0,
    'Q', 'S', 'u', 'r', 'f', 'a', 'c', 'e', ':', ':', 'S', 'u', 'r', 'f', 'a', 'c', 'e', 'T', 'y', 'p', 'e', 0,
    's', 'i', 'n', 'g', 'l', 'e', 'C', 'l', 'i', 'c', 'k', 'A', 'c', 't', 'i', 'v', 'a', 't', 'i', 'o', 'n', 0,
    'p', 'a', 's', 's', 'w', 'o', 'r', 'd', 'M', 'a', 's', 'k', 'C', 'h', 'a', 'r', 'a', 'c', 't', 'e', 'r', 0,
    'k', 'e', 'y', 'b', 'o', 'a', 'r', 'd', 'I', 'n', 'p', 'u', 't', 'I', 'n', 't', 'e', 'r', 'v', 'a', 'l', 0,
    'a', 'c', 'c', 'e', 's', 's', 'i', 'b', 'l', 'e', 'D', 'e', 's', 'c', 'r', 'i', 'p', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'V', 'e', 'r', 't', 'i', 'c', 'a', 'l', 'H', 'e', 'a', 'd', 'e', 'r', 'I', 't', 'e', 'm', 0,
    'o', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 'U', 'p', 'd', 'a', 't', 'e', 'M', 'a', 's', 'k', 0,
    'Q', 'R', 'a', 'w', 'F', 'o', 'n', 't', ':', ':', 'L', 'a', 'y', 'o', 'u', 't', 'F', 'l', 'a', 'g', 's', 0,
    'g', 'l', 'y', 'p', 'h', 'I', 'n', 'd', 'e', 'x', 'e', 's', 'F', 'o', 'r', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'q', 'P', 'i', 'x', 'e', 'l', 'F', 'o', 'r', 'm', 'a', 't', 'G', 'r', 'a', 'y', 's', 'c', 'a', 'l', 'e', 0,
    'Q', 'P', 'a', 'i', 'n', 't', 'e', 'r', 'P', 'a', 't', 'h', ':', ':', 'E', 'l', 'e', 'm', 'e', 'n', 't', 0,
    'Q', 'T', 'e', 'x', 't', 'I', 't', 'e', 'm', ':', ':', 'R', 'e', 'n', 'd', 'e', 'r', 'F', 'l', 'a', 'g', 0,
    's', 'e', 't', 'W', 'o', 'r', 'l', 'd', 'M', 'a', 't', 'r', 'i', 'x', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'C', 'o', 'm', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', '_', 'C', 'l', 'e', 'a', 'r', 0,
    'Q', 'P', 'a', 'i', 'n', 't', 'e', 'r', ':', ':', 'R', 'e', 'n', 'd', 'e', 'r', 'H', 'i', 'n', 't', 's', 0,
    'Q', 't', '4', 'C', 'o', 'm', 'p', 'a', 't', 'i', 'b', 'l', 'e', 'P', 'a', 'i', 'n', 't', 'i', 'n', 'g', 0,
    'N', 'o', 'n', 'C', 'o', 's', 'm', 'e', 't', 'i', 'c', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'P', 'e', 'n', 0,
    'S', 'm', 'o', 'o', 't', 'h', 'P', 'i', 'x', 'm', 'a', 'p', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 0,
    'F', 'u', 'z', 'z', 'y', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 'M', 'a', 't', 'c', 'h', 0,
    'Q', 'P', 'a', 'g', 'e', 'S', 'i', 'z', 'e', ':', ':', 'P', 'a', 'g', 'e', 'S', 'i', 'z', 'e', 'I', 'd', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'B', 'l', 'i', 't', 't', 'e', 'r', 0,
    's', 'e', 't', 'C', 'o', 'm', 'p', 'a', 'r', 'i', 's', 'o', 'n', 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'L', 'e', 'v', 'e', 'l', 'O', 'f', 'D', 'e', 't', 'a', 'i', 'l', 'R', 'a', 'n', 'g', 'e', 0,
    's', 'e', 't', 'M', 'i', 'n', 'i', 'f', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'S', 'R', 'G', 'B', '8', '_', 'A', 'l', 'p', 'h', 'a', '8', '_', 'A', 'S', 'T', 'C', '_', '8', 'x', '8', 0,
    'S', 'R', 'G', 'B', '8', '_', 'A', 'l', 'p', 'h', 'a', '8', '_', 'A', 'S', 'T', 'C', '_', '8', 'x', '6', 0,
    'S', 'R', 'G', 'B', '8', '_', 'A', 'l', 'p', 'h', 'a', '8', '_', 'A', 'S', 'T', 'C', '_', '8', 'x', '5', 0,
    'S', 'R', 'G', 'B', '8', '_', 'A', 'l', 'p', 'h', 'a', '8', '_', 'A', 'S', 'T', 'C', '_', '6', 'x', '6', 0,
    'S', 'R', 'G', 'B', '8', '_', 'A', 'l', 'p', 'h', 'a', '8', '_', 'A', 'S', 'T', 'C', '_', '6', 'x', '5', 0,
    'S', 'R', 'G', 'B', '8', '_', 'A', 'l', 'p', 'h', 'a', '8', '_', 'A', 'S', 'T', 'C', '_', '5', 'x', '5', 0,
    'S', 'R', 'G', 'B', '8', '_', 'A', 'l', 'p', 'h', 'a', '8', '_', 'A', 'S', 'T', 'C', '_', '5', 'x', '4', 0,
    'S', 'R', 'G', 'B', '8', '_', 'A', 'l', 'p', 'h', 'a', '8', '_', 'A', 'S', 'T', 'C', '_', '4', 'x', '4', 0,
    'S', 'R', 'G', 'B', '8', '_', 'A', 'l', 'p', 'h', 'a', '8', '_', 'E', 'T', 'C', '2', '_', 'E', 'A', 'C', 0,
    'R', 'G', 'B', '_', 'B', 'P', '_', 'U', 'N', 'S', 'I', 'G', 'N', 'E', 'D', '_', 'F', 'L', 'O', 'A', 'T', 0,
    'd', 'i', 's', 'a', 'b', 'l', 'e', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 'A', 'r', 'r', 'a', 'y', 0,
    'b', 'i', 'n', 'd', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 'L', 'o', 'c', 'a', 't', 'i', 'o', 'n', 0,
    'i', 'n', 't', 'e', 'r', 'n', 'a', 'l', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'U', 'n', 'd', 'e', 'f', 'i', 'n', 'e', 'd', 'B', 'e', 'h', 'a', 'v', 'i', 'o', 'r', 'T', 'y', 'p', 'e', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'P', 'r', 'o', 'f', 'i', 'l', 'e', 0,
    'R', 'a', 'n', 'g', 'e', 'I', 'n', 'v', 'a', 'l', 'i', 'd', 'a', 't', 'e', 'B', 'u', 'f', 'f', 'e', 'r', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'B', 'u', 'f', 'f', 'e', 'r', ':', ':', 'A', 'c', 'c', 'e', 's', 's', 0,
    'S', 'e', 'l', 'e', 'c', 't', 'S', 't', 'a', 'r', 't', 'O', 'f', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 0,
    'M', 'o', 'v', 'e', 'T', 'o', 'S', 't', 'a', 'r', 't', 'O', 'f', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 0,
    'i', 'n', 'p', 'u', 't', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    's', 'e', 't', 'I', 'n', 'p', 'u', 't', 'I', 't', 'e', 'm', 'R', 'e', 'c', 't', 'a', 'n', 'g', 'l', 'e', 0,
    's', 'e', 't', 'I', 'n', 'p', 'u', 't', 'I', 't', 'e', 'm', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 0,
    'a', 'u', 't', 'o', 'D', 'e', 't', 'e', 'c', 't', 'I', 'm', 'a', 'g', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    's', 'u', 'p', 'p', 'o', 'r', 't', 'e', 'd', 'I', 'm', 'a', 'g', 'e', 'F', 'o', 'r', 'm', 'a', 't', 's', 0,
    'r', 'e', 's', 't', 'o', 'r', 'e', 'O', 'v', 'e', 'r', 'r', 'i', 'd', 'e', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'F', 'o', 'n', 't', 0,
    'P', 'r', 'e', 'f', 'e', 'r', 'V', 'e', 'r', 't', 'i', 'c', 'a', 'l', 'H', 'i', 'n', 't', 'i', 'n', 'g', 0,
    'Q', 'F', 'o', 'n', 't', ':', ':', 'C', 'a', 'p', 'i', 't', 'a', 'l', 'i', 'z', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'P', 'l', 'a', 't', 'f', 'o', 'r', 'm', 'S', 'u', 'r', 'f', 'a', 'c', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'T', 'o', 'u', 'c', 'h', 'D', 'e', 'v', 'i', 'c', 'e', '*', '>', 0,
    'Q', 'V', 'e', 'c', 't', 'o', 'r', '<', 'Q', 'T', 'e', 'x', 't', 'L', 'e', 'n', 'g', 't', 'h', '>', 0,
    'Q', 'V', 'e', 'c', 't', 'o', 'r', '<', 'Q', 'T', 'e', 'x', 't', 'F', 'o', 'r', 'm', 'a', 't', '>', 0,
    'm', 'a', 'x', 'i', 'm', 'u', 'm', 'H', 'e', 'i', 'g', 'h', 't', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'm', 'i', 'n', 'i', 'm', 'u', 'm', 'H', 'e', 'i', 'g', 'h', 't', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    's', 'e', 't', 'R', 'e', 'g', 'u', 'l', 'a', 'r', 'E', 'x', 'p', 'r', 'e', 's', 's', 'i', 'o', 'n', 0,
    't', 'a', 'b', 'l', 'e', 'C', 'e', 'l', 'l', 'F', 'o', 'r', 'm', 'a', 't', 'I', 'n', 'd', 'e', 'x', 0,
    'Q', 'T', 'e', 'x', 't', 'O', 'p', 't', 'i', 'o', 'n', ':', ':', 'T', 'a', 'b', 'T', 'y', 'p', 'e', 0,
    'Q', 'T', 'e', 'x', 't', 'B', 'l', 'o', 'c', 'k', ':', ':', 'i', 't', 'e', 'r', 'a', 't', 'o', 'r', 0,
    'Q', 'T', 'e', 'x', 't', 'F', 'r', 'a', 'm', 'e', ':', ':', 'i', 't', 'e', 'r', 'a', 't', 'o', 'r', 0,
    's', 'e', 't', 'A', 'd', 'd', 'i', 't', 'i', 'o', 'n', 'a', 'l', 'F', 'o', 'r', 'm', 'a', 't', 's', 0,
    'Q', 'T', 'e', 'x', 't', 'T', 'a', 'b', 'l', 'e', 'C', 'e', 'l', 'l', 'F', 'o', 'r', 'm', 'a', 't', 0,
    's', 'e', 't', 'N', 'o', 'n', 'B', 'r', 'e', 'a', 'k', 'a', 'b', 'l', 'e', 'L', 'i', 'n', 'e', 's', 0,
    's', 'e', 't', 'F', 'o', 'n', 't', 'S', 't', 'y', 'l', 'e', 'S', 't', 'r', 'a', 't', 'e', 'g', 'y', 0,
    's', 'e', 't', 'F', 'o', 'n', 't', 'L', 'e', 't', 't', 'e', 'r', 'S', 'p', 'a', 'c', 'i', 'n', 'g', 0,
    's', 'e', 't', 'V', 'e', 'r', 't', 'i', 'c', 'a', 'l', 'A', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', 0,
    'l', 'e', 'n', 'g', 't', 'h', 'V', 'e', 'c', 't', 'o', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'T', 'a', 'b', 'l', 'e', 'C', 'e', 'l', 'l', 'L', 'e', 'f', 't', 'P', 'a', 'd', 'd', 'i', 'n', 'g', 0,
    's', 'e', 't', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'T', 'e', 'x', 't', 'O', 'p', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'M', 'a', 'x', 'i', 'm', 'u', 'm', 'B', 'l', 'o', 'c', 'k', 'C', 'o', 'u', 'n', 't', 0,
    's', 'e', 't', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'S', 't', 'y', 'l', 'e', 'S', 'h', 'e', 'e', 't', 0,
    'c', 'o', 'n', 'v', 'e', 'r', 't', 'F', 'r', 'o', 'm', 'P', 'l', 'a', 'i', 'n', 'T', 'e', 'x', 't', 0,
    'k', 'e', 'e', 'p', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 'O', 'n', 'I', 'n', 's', 'e', 'r', 't', 0,
    's', 'e', 't', 'V', 'e', 'r', 't', 'i', 'c', 'a', 'l', 'M', 'o', 'v', 'e', 'm', 'e', 'n', 't', 'X', 0,
    'm', 'e', 'r', 'g', 'e', 'B', 'l', 'o', 'c', 'k', 'C', 'h', 'a', 'r', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'B', 'l', 'o', 'c', 'k', 'U', 's', 'e', 'r', 'D', 'a', 't', 'a', 0,
    's', 'e', 't', 'C', 'u', 'r', 'r', 'e', 'n', 't', 'B', 'l', 'o', 'c', 'k', 'S', 't', 'a', 't', 'e', 0,
    's', 'e', 't', 'S', 't', 'e', 'n', 'c', 'i', 'l', 'B', 'u', 'f', 'f', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    'C', 'o', 'm', 'p', 'a', 't', 'i', 'b', 'i', 'l', 'i', 't', 'y', 'P', 'r', 'o', 'f', 'i', 'l', 'e', 0,
    's', 't', 'a', 'r', 't', 'D', 'r', 'a', 'g', 'T', 'i', 'm', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'h', 'o', 'r', 'i', 'z', 'o', 'n', 't', 'a', 'l', 'H', 'e', 'a', 'd', 'e', 'r', 'I', 't', 'e', 'm', 0,
    'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'V', 'i', 'r', 't', 'u', 'a', 'l', 'S', 'i', 'z', 'e', 0,
    'p', 'h', 'y', 's', 'i', 'c', 'a', 'l', 'D', 'o', 't', 's', 'P', 'e', 'r', 'I', 'n', 'c', 'h', 'Y', 0,
    'p', 'h', 'y', 's', 'i', 'c', 'a', 'l', 'D', 'o', 't', 's', 'P', 'e', 'r', 'I', 'n', 'c', 'h', 'X', 0,
    'Q', 'R', 'a', 'w', 'F', 'o', 'n', 't', ':', ':', 'L', 'a', 'y', 'o', 'u', 't', 'F', 'l', 'a', 'g', 0,
    'S', 'u', 'b', 'P', 'i', 'x', 'e', 'l', 'A', 'n', 't', 'i', 'a', 'l', 'i', 'a', 's', 'i', 'n', 'g', 0,
    's', 'e', 't', 'C', 'u', 'r', 'r', 'e', 'n', 't', 'C', 'o', 'l', 'o', 'r', 'G', 'r', 'o', 'u', 'p', 0,
    'Q', 'P', 'a', 'l', 'e', 't', 't', 'e', ':', ':', 'C', 'o', 'l', 'o', 'r', 'G', 'r', 'o', 'u', 'p', 0,
    's', 'e', 't', 'E', 'l', 'e', 'm', 'e', 'n', 't', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 'A', 't', 0,
    'D', 'i', 'r', 't', 'y', 'C', 'o', 'm', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', 0,
    'P', 'e', 'r', 's', 'p', 'e', 'c', 't', 'i', 'v', 'e', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 0,
    'v', 'i', 'e', 'w', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'C', 'o', 'm', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', '_', 'P', 'l', 'u', 's', 0,
    'Q', 'P', 'a', 'i', 'n', 't', 'e', 'r', ':', ':', 'R', 'e', 'n', 'd', 'e', 'r', 'H', 'i', 'n', 't', 0,
    's', 'e', 't', 'L', 'e', 'v', 'e', 'l', 'o', 'f', 'D', 'e', 't', 'a', 'i', 'l', 'B', 'i', 'a', 's', 0,
    'm', 'a', 'x', 'i', 'm', 'u', 'm', 'L', 'e', 'v', 'e', 'l', 'O', 'f', 'D', 'e', 't', 'a', 'i', 'l', 0,
    'm', 'i', 'n', 'i', 'm', 'u', 'm', 'L', 'e', 'v', 'e', 'l', 'O', 'f', 'D', 'e', 't', 'a', 'i', 'l', 0,
    's', 'e', 't', 'M', 'a', 'x', 'i', 'm', 'u', 'm', 'A', 'n', 'i', 's', 'o', 't', 'r', 'o', 'p', 'y', 0,
    'N', 'e', 'a', 'r', 'e', 's', 't', 'M', 'i', 'p', 'M', 'a', 'p', 'N', 'e', 'a', 'r', 'e', 's', 't', 0,
    'A', 'n', 'i', 's', 'o', 't', 'r', 'o', 'p', 'i', 'c', 'F', 'i', 'l', 't', 'e', 'r', 'i', 'n', 'g', 0,
    'T', 'e', 'x', 't', 'u', 'r', 'e', 'C', 'u', 'b', 'e', 'M', 'a', 'p', 'A', 'r', 'r', 'a', 'y', 's', 0,
    'L', 'u', 'm', 'i', 'n', 'a', 'n', 'c', 'e', 'A', 'l', 'p', 'h', 'a', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'D', 'o', 'n', 't', 'R', 'e', 's', 'e', 't', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'U', 'n', 'i', 't', 0,
    'B', 'i', 'n', 'd', 'i', 'n', 'g', 'T', 'a', 'r', 'g', 'e', 't', 'C', 'u', 'b', 'e', 'M', 'a', 'p', 0,
    'B', 'i', 'n', 'd', 'i', 'n', 'g', 'T', 'a', 'r', 'g', 'e', 't', '2', 'D', 'A', 'r', 'r', 'a', 'y', 0,
    'B', 'i', 'n', 'd', 'i', 'n', 'g', 'T', 'a', 'r', 'g', 'e', 't', '1', 'D', 'A', 'r', 'r', 'a', 'y', 0,
    's', 'e', 't', 'U', 'n', 'i', 'f', 'o', 'r', 'm', 'V', 'a', 'l', 'u', 'e', 'A', 'r', 'r', 'a', 'y', 0,
    'e', 'n', 'a', 'b', 'l', 'e', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 'A', 'r', 'r', 'a', 'y', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'S', 'h', 'a', 'd', 'e', 'r', 'P', 'r', 'o', 'g', 'r', 'a', 'm', 0,
    'C', 'o', 'm', 'b', 'i', 'n', 'e', 'd', 'D', 'e', 'p', 't', 'h', 'S', 't', 'e', 'n', 'c', 'i', 'l', 0,
    'm', 'a', 'x', 'i', 'm', 'u', 'm', 'M', 'e', 's', 's', 'a', 'g', 'e', 'L', 'e', 'n', 'g', 't', 'h', 0,
    'N', 'o', 't', 'i', 'f', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'S', 'e', 'v', 'e', 'r', 'i', 't', 'y', 0,
    'S', 'h', 'a', 'd', 'e', 'r', 'C', 'o', 'm', 'p', 'i', 'l', 'e', 'r', 'S', 'o', 'u', 'r', 'c', 'e', 0,
    'Q', 'I', 'n', 'p', 'u', 't', 'M', 'e', 't', 'h', 'o', 'd', ':', ':', 'A', 'c', 't', 'i', 'o', 'n', 0,
    'p', 'r', 'o', 'g', 'r', 'e', 's', 's', 'i', 'v', 'e', 'S', 'c', 'a', 'n', 'W', 'r', 'i', 't', 'e', 0,
    'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'a', 't', 'i', 'o', 'n', 'M', 'i', 'r', 'r', 'o', 'r', 0,
    'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'e', 'd', 'B', 'y', 'D', 'e', 'f', 'a', 'u', 'l', 't', 0,
    's', 'e', 't', 'F', 'a', 'l', 'l', 'b', 'a', 'c', 'k', 'T', 'h', 'e', 'm', 'e', 'N', 'a', 'm', 'e', 0,
    'p', 'r', 'i', 'm', 'a', 'r', 'y', 'S', 'c', 'r', 'e', 'e', 'n', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'd', 'e', 's', 'k', 't', 'o', 'p', 'S', 'e', 't', 't', 'i', 'n', 'g', 's', 'A', 'w', 'a', 'r', 'e', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'O', 'v', 'e', 'r', 'r', 'i', 'd', 'e', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'S', 'm', 'a', 'l', 'l', 'e', 's', 't', 'R', 'e', 'a', 'd', 'a', 'b', 'l', 'e', 'F', 'o', 'n', 't', 0,
    's', 'e', 't', 'H', 'i', 'n', 't', 'i', 'n', 'g', 'P', 'r', 'e', 'f', 'e', 'r', 'e', 'n', 'c', 'e', 0,
    'P', 'r', 'e', 'f', 'e', 'r', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'H', 'i', 'n', 't', 'i', 'n', 'g', 0,
    'Q', 'F', 'o', 'n', 't', ':', ':', 'S', 't', 'y', 'l', 'e', 'S', 't', 'r', 'a', 't', 'e', 'g', 'y', 0,
    'a', 'c', 'c', 'e', 'p', 't', 'P', 'r', 'o', 'p', 'o', 's', 'e', 'd', 'A', 'c', 't', 'i', 'o', 'n', 0,
    'Q', 'T', 'e', 'x', 't', 'O', 'b', 'j', 'e', 'c', 't', 'I', 'n', 't', 'e', 'r', 'f', 'a', 'c', 'e', 0,
    'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 'I', 'n', 'l', 'i', 'n', 'e', 'O', 'b', 'j', 'e', 'c', 't', 0,
    's', 'u', 'p', 'p', 'o', 'r', 't', 'e', 'd', 'D', 'r', 'a', 'g', 'A', 'c', 't', 'i', 'o', 'n', 's', 0,
    's', 'u', 'p', 'p', 'o', 'r', 't', 'e', 'd', 'D', 'r', 'o', 'p', 'A', 'c', 't', 'i', 'o', 'n', 's', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'K', 'e', 'y', 'S', 'e', 'q', 'u', 'e', 'n', 'c', 'e', '>', 0,
    'A', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'V', 'i', 's', 'i', 'b', 'i', 'l', 'i', 't', 'y', 0,
    'Q', 'W', 'i', 'n', 'd', 'o', 'w', ':', ':', 'V', 'i', 's', 'i', 'b', 'i', 'l', 'i', 't', 'y', 0,
    'm', 'a', 'x', 'i', 'm', 'u', 'm', 'W', 'i', 'd', 't', 'h', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'm', 'i', 'n', 'i', 'm', 'u', 'm', 'W', 'i', 'd', 't', 'h', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    's', 'e', 't', 'M', 'o', 'u', 's', 'e', 'G', 'r', 'a', 'b', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'f', 'i', 'r', 's', 't', 'C', 'u', 'r', 's', 'o', 'r', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'r', 'i', 'g', 'h', 't', 'C', 'u', 'r', 's', 'o', 'r', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'l', 'i', 'n', 'e', 'F', 'o', 'r', 'T', 'e', 'x', 't', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'p', 'r', 'e', 'e', 'd', 'i', 't', 'A', 'r', 'e', 'a', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'B', 'o', 'r', 'd', 'e', 'r', 'S', 't', 'y', 'l', 'e', '_', 'D', 'o', 't', 'D', 'a', 's', 'h', 0,
    'S', 'p', 'e', 'l', 'l', 'C', 'h', 'e', 'c', 'k', 'U', 'n', 'd', 'e', 'r', 'l', 'i', 'n', 'e', 0,
    's', 'e', 't', 'T', 'a', 'b', 'l', 'e', 'C', 'e', 'l', 'l', 'R', 'o', 'w', 'S', 'p', 'a', 'n', 0,
    't', 'a', 'b', 'l', 'e', 'C', 'e', 'l', 'l', 'C', 'o', 'l', 'u', 'm', 'n', 'S', 'p', 'a', 'n', 0,
    'T', 'a', 'b', 'l', 'e', 'C', 'e', 'l', 'l', 'T', 'o', 'p', 'P', 'a', 'd', 'd', 'i', 'n', 'g', 0,
    'T', 'a', 'b', 'l', 'e', 'H', 'e', 'a', 'd', 'e', 'r', 'R', 'o', 'w', 'C', 'o', 'u', 'n', 't', 0,
    'Q', 'T', 'e', 'x', 't', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 'W', 'r', 'i', 't', 'e', 'r', 0,
    'c', 'l', 'e', 'a', 'r', 'U', 'n', 'd', 'o', 'R', 'e', 'd', 'o', 'S', 't', 'a', 'c', 'k', 's', 0,
    'm', 'o', 'd', 'i', 'f', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    's', 'e', 't', 'U', 's', 'e', 'D', 'e', 's', 'i', 'g', 'n', 'M', 'e', 't', 'r', 'i', 'c', 's', 0,
    'F', 'i', 'n', 'd', 'C', 'a', 's', 'e', 'S', 'e', 'n', 's', 'i', 't', 'i', 'v', 'e', 'l', 'y', 0,
    's', 'e', 't', 'V', 'i', 's', 'u', 'a', 'l', 'N', 'a', 'v', 'i', 'g', 'a', 't', 'i', 'o', 'n', 0,
    'h', 'a', 's', 'C', 'o', 'm', 'p', 'l', 'e', 'x', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'D', 'e', 'f', 'a', 'u', 'l', 't', 'S', 'w', 'a', 'p', 'B', 'e', 'h', 'a', 'v', 'i', 'o', 'r', 0,
    'D', 'e', 'p', 'r', 'e', 'c', 'a', 't', 'e', 'd', 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 's', 0,
    'p', 'h', 'y', 's', 'i', 'c', 'a', 'l', 'S', 'i', 'z', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'l', 'o', 'g', 'i', 'c', 'a', 'l', 'D', 'o', 't', 's', 'P', 'e', 'r', 'I', 'n', 'c', 'h', 'Y', 0,
    'l', 'o', 'g', 'i', 'c', 'a', 'l', 'D', 'o', 't', 's', 'P', 'e', 'r', 'I', 'n', 'c', 'h', 'X', 0,
    'p', 'h', 'y', 's', 'i', 'c', 'a', 'l', 'D', 'o', 't', 's', 'P', 'e', 'r', 'I', 'n', 'c', 'h', 0,
    'Q', 'R', 'e', 'g', 'i', 'o', 'n', ':', ':', 'R', 'e', 'g', 'i', 'o', 'n', 'T', 'y', 'p', 'e', 0,
    'C', 'u', 'r', 'r', 'e', 'n', 't', 'S', 'y', 's', 't', 'e', 'm', 'E', 'n', 'd', 'i', 'a', 'n', 0,
    'Q', 'P', 'a', 'l', 'e', 't', 't', 'e', ':', ':', 'C', 'o', 'l', 'o', 'r', 'R', 'o', 'l', 'e', 0,
    'Q', 'P', 'a', 'i', 'n', 't', 'e', 'r', 'P', 'a', 't', 'h', 'S', 't', 'r', 'o', 'k', 'e', 'r', 0,
    'b', 'r', 'u', 's', 'h', 'N', 'e', 'e', 'd', 's', 'R', 'e', 's', 'o', 'l', 'v', 'i', 'n', 'g', 0,
    'D', 'i', 'r', 't', 'y', 'B', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 'M', 'o', 'd', 'e', 0,
    'C', 'o', 'n', 'i', 'c', 'a', 'l', 'G', 'r', 'a', 'd', 'i', 'e', 'n', 't', 'F', 'i', 'l', 'l', 0,
    'P', 'd', 'm', 'D', 'e', 'v', 'i', 'c', 'e', 'P', 'i', 'x', 'e', 'l', 'R', 'a', 't', 'i', 'o', 0,
    'd', 'r', 'a', 'w', 'P', 'i', 'x', 'm', 'a', 'p', 'F', 'r', 'a', 'g', 'm', 'e', 'n', 't', 's', 0,
    'b', 'e', 'g', 'i', 'n', 'N', 'a', 't', 'i', 'v', 'e', 'P', 'a', 'i', 'n', 't', 'i', 'n', 'g', 0,
    'C', 'o', 'm', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', '_', 'X', 'o', 'r', 0,
    'C', 'o', 'm', 'p', 'a', 'r', 'e', 'R', 'e', 'f', 'T', 'o', 'T', 'e', 'x', 't', 'u', 'r', 'e', 0,
    'C', 'o', 'm', 'p', 'a', 'r', 'e', 'G', 'r', 'e', 'a', 't', 'e', 'r', 'E', 'q', 'u', 'a', 'l', 0,
    'm', 'a', 'g', 'n', 'i', 'f', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'L', 'i', 'n', 'e', 'a', 'r', 'M', 'i', 'p', 'M', 'a', 'p', 'N', 'e', 'a', 'r', 'e', 's', 't', 0,
    'N', 'e', 'a', 'r', 'e', 's', 't', 'M', 'i', 'p', 'M', 'a', 'p', 'L', 'i', 'n', 'e', 'a', 'r', 0,
    's', 'e', 't', 'D', 'e', 'p', 't', 'h', 'S', 't', 'e', 'n', 'c', 'i', 'l', 'M', 'o', 'd', 'e', 0,
    'R', 'G', 'B', '_', 'B', 'P', '_', 'S', 'I', 'G', 'N', 'E', 'D', '_', 'F', 'L', 'O', 'A', 'T', 0,
    'D', 'o', 'n', 't', 'G', 'e', 'n', 'e', 'r', 'a', 't', 'e', 'M', 'i', 'p', 'M', 'a', 'p', 's', 0,
    'B', 'i', 'n', 'd', 'i', 'n', 'g', 'T', 'a', 'r', 'g', 'e', 't', 'B', 'u', 'f', 'f', 'e', 'r', 0,
    's', 'e', 't', 'P', 'a', 't', 'c', 'h', 'V', 'e', 'r', 't', 'e', 'x', 'C', 'o', 'u', 'n', 't', 0,
    'T', 'e', 's', 's', 'e', 'l', 'l', 'a', 't', 'i', 'o', 'n', 'C', 'o', 'n', 't', 'r', 'o', 'l', 0,
    's', 'e', 't', 'S', 'w', 'a', 'p', 'B', 'y', 't', 'e', 's', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'A', 's', 'y', 'n', 'c', 'h', 'r', 'o', 'n', 'o', 'u', 's', 'L', 'o', 'g', 'g', 'i', 'n', 'g', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'D', 'e', 'b', 'u', 'g', 'M', 'e', 's', 's', 'a', 'g', 'e', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'C', 'o', 'n', 't', 'e', 'x', 't', 'G', 'r', 'o', 'u', 'p', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'C', 'o', 'n', 't', 'e', 'x', 't', 'G', 'r', 'o', 'u', 'p', 0,
    'R', 'a', 'n', 'g', 'e', 'U', 'n', 's', 'y', 'n', 'c', 'h', 'r', 'o', 'n', 'i', 'z', 'e', 'd', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'B', 'u', 'f', 'f', 'e', 'r', ':', ':', 'T', 'y', 'p', 'e', 0,
    'I', 'n', 's', 'e', 'r', 't', 'L', 'i', 'n', 'e', 'S', 'e', 'p', 'a', 'r', 'a', 't', 'o', 'r', 0,
    'S', 'e', 'l', 'e', 'c', 't', 'E', 'n', 'd', 'O', 'f', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 0,
    'M', 'o', 'v', 'e', 'T', 'o', 'E', 'n', 'd', 'O', 'f', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 0,
    'I', 'm', 'a', 'g', 'e', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'a', 't', 'i', 'o', 'n', 0,
    'r', 'e', 'i', 'n', 't', 'e', 'r', 'p', 'r', 'e', 't', 'A', 's', 'F', 'o', 'r', 'm', 'a', 't', 0,
    's', 'e', 't', 'D', 'e', 'v', 'i', 'c', 'e', 'P', 'i', 'x', 'e', 'l', 'R', 'a', 't', 'i', 'o', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'M', 'a', 's', 'k', 'F', 'r', 'o', 'm', 'C', 'o', 'l', 'o', 'r', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'H', 'e', 'u', 'r', 'i', 's', 't', 'i', 'c', 'M', 'a', 's', 'k', 0,
    'f', 'a', 'l', 'l', 'b', 'a', 'c', 'k', 'S', 'e', 'a', 'r', 'c', 'h', 'P', 'a', 't', 'h', 's', 0,
    's', 'e', 't', 'T', 'h', 'e', 'm', 'e', 'S', 'e', 'a', 'r', 'c', 'h', 'P', 'a', 't', 'h', 's', 0,
    'f', 'o', 'n', 't', 'D', 'a', 't', 'a', 'b', 'a', 's', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'w', 'r', 'i', 't', 'i', 'n', 'g', 'S', 'y', 's', 't', 'e', 'm', 'S', 'a', 'm', 'p', 'l', 'e', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'S', 'u', 'b', 's', 't', 'i', 't', 'u', 't', 'i', 'o', 'n', 's', 0,
    'i', 'n', 's', 'e', 'r', 't', 'S', 'u', 'b', 's', 't', 'i', 't', 'u', 't', 'i', 'o', 'n', 's', 0,
    'F', 'o', 'r', 'c', 'e', 'I', 'n', 't', 'e', 'g', 'e', 'r', 'M', 'e', 't', 'r', 'i', 'c', 's', 0,
    'N', 'o', 'S', 'u', 'b', 'p', 'i', 'x', 'e', 'l', 'A', 'n', 't', 'i', 'a', 'l', 'i', 'a', 's', 0,
    'Q', 'N', 'a', 't', 'i', 'v', 'e', 'G', 'e', 's', 't', 'u', 'r', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'Q', 'S', 'c', 'r', 'o', 'l', 'l', 'P', 'r', 'e', 'p', 'a', 'r', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'S', 't', 'r', 'e', 't', 'c', 'h', 'T', 'o', 'D', 'e', 'v', 'i', 'c', 'e', 'M', 'o', 'd', 'e', 0,
    'd', 'o', 'c', 'u', 'm', 'e', 'n', 't', 'S', 'i', 'z', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'T', 'e', 'x', 't', 'F', 'r', 'a', 'm', 'e', '*', '>', 0,
    'Q', 'P', 'a', 'i', 'r', '<', 'f', 'l', 'o', 'a', 't', ',', 'f', 'l', 'o', 'a', 't', '>', 0,
    'w', 'i', 'n', 'd', 'o', 'w', 'T', 'i', 't', 'l', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'w', 'i', 'n', 'd', 'o', 'w', 'S', 't', 'a', 't', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    's', 'e', 't', 'T', 'r', 'a', 'n', 's', 'i', 'e', 'n', 't', 'P', 'a', 'r', 'e', 'n', 't', 0,
    'c', 'o', 'n', 't', 'e', 'n', 't', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 0,
    'm', 'a', 'x', 'i', 'm', 'u', 'm', 'T', 'o', 'u', 'c', 'h', 'P', 'o', 'i', 'n', 't', 's', 0,
    'N', 'o', 'r', 'm', 'a', 'l', 'i', 'z', 'e', 'd', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'T', 'a', 'b', 'S', 't', 'o', 'p', 'D', 'i', 's', 't', 'a', 'n', 'c', 'e', 0,
    'Q', 'T', 'e', 'x', 't', 'O', 'p', 't', 'i', 'o', 'n', ':', ':', 'F', 'l', 'a', 'g', 's', 0,
    'Q', 'T', 'e', 'x', 't', 'B', 'l', 'o', 'c', 'k', 'U', 's', 'e', 'r', 'D', 'a', 't', 'a', 0,
    'l', 'a', 's', 't', 'C', 'u', 'r', 's', 'o', 'r', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'b', 'l', 'o', 'c', 'k', 'F', 'o', 'r', 'm', 'a', 't', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    's', 'e', 't', 'L', 'e', 'a', 'd', 'i', 'n', 'g', 'I', 'n', 'c', 'l', 'u', 'd', 'e', 'd', 0,
    'l', 'e', 'f', 't', 'C', 'u', 'r', 's', 'o', 'r', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'C', 'u', 'r', 's', 'o', 'r', 'M', 'o', 'v', 'e', 'S', 't', 'y', 'l', 'e', 0,
    'n', 'e', 'x', 't', 'C', 'u', 'r', 's', 'o', 'r', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'B', 'o', 'r', 'd', 'e', 'r', 'S', 't', 'y', 'l', 'e', '_', 'O', 'u', 't', 's', 'e', 't', 0,
    'B', 'o', 'r', 'd', 'e', 'r', 'S', 't', 'y', 'l', 'e', '_', 'G', 'r', 'o', 'o', 'v', 'e', 0,
    'B', 'o', 'r', 'd', 'e', 'r', 'S', 't', 'y', 'l', 'e', '_', 'D', 'o', 'u', 'b', 'l', 'e', 0,
    'B', 'o', 'r', 'd', 'e', 'r', 'S', 't', 'y', 'l', 'e', '_', 'D', 'a', 's', 'h', 'e', 'd', 0,
    'B', 'o', 'r', 'd', 'e', 'r', 'S', 't', 'y', 'l', 'e', '_', 'D', 'o', 't', 't', 'e', 'd', 0,
    'L', 'i', 'n', 'e', 'D', 'i', 's', 't', 'a', 'n', 'c', 'e', 'H', 'e', 'i', 'g', 'h', 't', 0,
    'P', 'r', 'o', 'p', 'o', 'r', 't', 'i', 'o', 'n', 'a', 'l', 'H', 'e', 'i', 'g', 'h', 't', 0,
    's', 'e', 't', 'P', 'a', 'g', 'e', 'B', 'r', 'e', 'a', 'k', 'P', 'o', 'l', 'i', 'c', 'y', 0,
    's', 'e', 't', 'F', 'o', 'n', 't', 'W', 'o', 'r', 'd', 'S', 'p', 'a', 'c', 'i', 'n', 'g', 0,
    'f', 'o', 'n', 't', 'C', 'a', 'p', 'i', 't', 'a', 'l', 'i', 'z', 'a', 't', 'i', 'o', 'n', 0,
    'B', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 'I', 'm', 'a', 'g', 'e', 'U', 'r', 'l', 0,
    'F', 'u', 'l', 'l', 'W', 'i', 'd', 't', 'h', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'T', 'e', 'x', 't', 'U', 'n', 'd', 'e', 'r', 'l', 'i', 'n', 'e', 'S', 't', 'y', 'l', 'e', 0,
    'T', 'e', 'x', 't', 'U', 'n', 'd', 'e', 'r', 'l', 'i', 'n', 'e', 'C', 'o', 'l', 'o', 'r', 0,
    'F', 'o', 'n', 't', 'S', 'i', 'z', 'e', 'A', 'd', 'j', 'u', 's', 't', 'm', 'e', 'n', 't', 0,
    'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'R', 'e', 'd', 'o', 'S', 't', 'e', 'p', 's', 0,
    'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'U', 'n', 'd', 'o', 'S', 't', 'e', 'p', 's', 0,
    'S', 't', 'y', 'l', 'e', 'S', 'h', 'e', 'e', 't', 'R', 'e', 's', 'o', 'u', 'r', 'c', 'e', 0,
    's', 'e', 't', 'M', 'e', 't', 'a', 'I', 'n', 'f', 'o', 'r', 'm', 'a', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'U', 'n', 'd', 'o', 'R', 'e', 'd', 'o', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    's', 'e', 't', 'B', 'l', 'o', 'c', 'k', 'C', 'h', 'a', 'r', 'F', 'o', 'r', 'm', 'a', 't', 0,
    's', 'e', 'l', 'e', 'c', 't', 'e', 'd', 'T', 'a', 'b', 'l', 'e', 'C', 'e', 'l', 'l', 's', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'S', 'e', 'l', 'e', 'c', 't', 'e', 'd', 'T', 'e', 'x', 't', 0,
    'd', 'e', 'l', 'e', 't', 'e', 'P', 'r', 'e', 'v', 'i', 'o', 'u', 's', 'C', 'h', 'a', 'r', 0,
    'p', 'r', 'e', 'v', 'i', 'o', 'u', 's', 'B', 'l', 'o', 'c', 'k', 'S', 't', 'a', 't', 'e', 0,
    'Q', 'S', 'y', 'n', 't', 'a', 'x', 'H', 'i', 'g', 'h', 'l', 'i', 'g', 'h', 't', 'e', 'r', 0,
    's', 'e', 't', 'A', 'l', 'p', 'h', 'a', 'B', 'u', 'f', 'f', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    's', 'e', 't', 'G', 'r', 'e', 'e', 'n', 'B', 'u', 'f', 'f', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    's', 'e', 't', 'D', 'e', 'p', 't', 'h', 'B', 'u', 'f', 'f', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    's', 'e', 't', 'U', 's', 'e', 'H', 'o', 'v', 'e', 'r', 'E', 'f', 'f', 'e', 'c', 't', 's', 0,
    'f', 'o', 'n', 't', 'S', 'm', 'o', 'o', 't', 'h', 'i', 'n', 'g', 'G', 'a', 'm', 'm', 'a', 0,
    's', 'e', 't', 'P', 'e', 'r', 'f', 'o', 'r', 'm', 'a', 'n', 'c', 'e', 'H', 'i', 'n', 't', 0,
    'v', 'e', 'r', 't', 'i', 'c', 'a', 'l', 'H', 'e', 'a', 'd', 'e', 'r', 'I', 't', 'e', 'm', 0,
    'Q', 'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'I', 't', 'e', 'm', 'M', 'o', 'd', 'e', 'l', 0,
    's', 'e', 't', 'M', 'a', 'n', 'a', 'g', 'e', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'R', 'e', 's', 't', 'a', 'r', 't', 'I', 'm', 'm', 'e', 'd', 'i', 'a', 't', 'e', 'l', 'y', 0,
    'r', 'e', 'f', 'r', 'e', 's', 'h', 'R', 'a', 't', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'o', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'p', 'r', 'i', 'm', 'a', 'r', 'y', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 0,
    'l', 'o', 'g', 'i', 'c', 'a', 'l', 'D', 'o', 't', 's', 'P', 'e', 'r', 'I', 'n', 'c', 'h', 0,
    'f', 'r', 'o', 'm', 'R', 'o', 't', 'a', 't', 'i', 'o', 'n', 'M', 'a', 't', 'r', 'i', 'x', 0,
    't', 'y', 'p', 'e', 'I', 'n', 't', 'e', 'r', 'p', 'r', 'e', 't', 'a', 't', 'i', 'o', 'n', 0,
    'C', 'u', 'r', 'v', 'e', 'T', 'o', 'D', 'a', 't', 'a', 'E', 'l', 'e', 'm', 'e', 'n', 't', 0,
    'Q', 'P', 'a', 'i', 'n', 't', 'E', 'n', 'g', 'i', 'n', 'e', ':', ':', 'T', 'y', 'p', 'e', 0,
    'R', 'a', 'd', 'i', 'a', 'l', 'G', 'r', 'a', 'd', 'i', 'e', 'n', 't', 'F', 'i', 'l', 'l', 0,
    'L', 'i', 'n', 'e', 'a', 'r', 'G', 'r', 'a', 'd', 'i', 'e', 'n', 't', 'F', 'i', 'l', 'l', 0,
    'P', 'r', 'i', 'm', 'i', 't', 'i', 'v', 'e', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 0,
    'w', 'o', 'r', 'l', 'd', 'M', 'a', 't', 'r', 'i', 'x', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    's', 'e', 't', 'C', 'o', 'm', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', 0,
    'R', 'a', 's', 't', 'e', 'r', 'O', 'p', '_', 'N', 'o', 't', 'S', 'o', 'u', 'r', 'c', 'e', 0,
    's', 'e', 't', 'P', 'a', 'g', 'e', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 0,
    'F', 'a', 'n', 'F', 'o', 'l', 'd', 'G', 'e', 'r', 'm', 'a', 'n', 'L', 'e', 'g', 'a', 'l', 0,
    'P', 'a', 'r', 't', 'i', 'a', 'l', 'U', 'p', 'd', 'a', 't', 'e', 'B', 'l', 'e', 'n', 'd', 0,
    'Q', 'P', 'a', 'i', 'n', 't', 'D', 'e', 'v', 'i', 'c', 'e', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'c', 'o', 'm', 'p', 'a', 'r', 'i', 's', 'o', 'n', 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 0,
    'l', 'e', 'v', 'e', 'l', 'O', 'f', 'D', 'e', 't', 'a', 'i', 'l', 'R', 'a', 'n', 'g', 'e', 0,
    'm', 'i', 'n', 'i', 'f', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'L', 'i', 'n', 'e', 'a', 'r', 'M', 'i', 'p', 'M', 'a', 'p', 'L', 'i', 'n', 'e', 'a', 'r', 0,
    'T', 'e', 'x', 't', 'u', 'r', 'e', 'M', 'i', 'p', 'M', 'a', 'p', 'L', 'e', 'v', 'e', 'l', 0,
    'T', 'e', 'x', 't', 'u', 'r', 'e', 'M', 'u', 'l', 't', 'i', 's', 'a', 'm', 'p', 'l', 'e', 0,
    'U', 'I', 'n', 't', '3', '2', '_', 'R', 'G', 'B', '1', '0', 'A', '2', '_', 'R', 'e', 'v', 0,
    'i', 's', 'S', 't', 'o', 'r', 'a', 'g', 'e', 'A', 'l', 'l', 'o', 'c', 'a', 't', 'e', 'd', 0,
    's', 'e', 't', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 'B', 'u', 'f', 'f', 'e', 'r', 0,
    'i', 's', 'S', 'w', 'a', 'p', 'B', 'y', 't', 'e', 's', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'e', 'n', 's', 'u', 'r', 'e', 'A', 'c', 't', 'i', 'v', 'e', 'T', 'a', 'r', 'g', 'e', 't', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'P', 'a', 'i', 'n', 't', 'D', 'e', 'v', 'i', 'c', 'e', 0,
    'a', 'd', 'd', 'C', 'o', 'l', 'o', 'r', 'A', 't', 't', 'a', 'c', 'h', 'm', 'e', 'n', 't', 0,
    'S', 'y', 'n', 'c', 'h', 'r', 'o', 'n', 'o', 'u', 's', 'L', 'o', 'g', 'g', 'i', 'n', 'g', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'D', 'e', 'b', 'u', 'g', 'L', 'o', 'g', 'g', 'e', 'r', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'S', 'y', 's', 't', 'e', 'm', 'S', 'o', 'u', 'r', 'c', 'e', 0,
    'g', 'l', 'o', 'b', 'a', 'l', 'S', 'h', 'a', 'r', 'e', 'C', 'o', 'n', 't', 'e', 'x', 't', 0,
    'o', 'p', 'e', 'n', 'G', 'L', 'M', 'o', 'd', 'u', 'l', 'e', 'H', 'a', 'n', 'd', 'l', 'e', 0,
    'a', 'b', 'o', 'u', 't', 'T', 'o', 'B', 'e', 'D', 'e', 's', 't', 'r', 'o', 'y', 'e', 'd', 0,
    'R', 'a', 'n', 'g', 'e', 'F', 'l', 'u', 's', 'h', 'E', 'x', 'p', 'l', 'i', 'c', 'i', 't', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'F', 'r', 'a', 'm', 'e', 'N', 'u', 'm', 'b', 'e', 'r', 0,
    'Q', 'M', 'o', 'v', 'i', 'e', ':', ':', 'M', 'o', 'v', 'i', 'e', 'S', 't', 'a', 't', 'e', 0,
    'D', 'e', 'l', 'e', 't', 'e', 'C', 'o', 'm', 'p', 'l', 'e', 't', 'e', 'L', 'i', 'n', 'e', 0,
    'S', 'e', 'l', 'e', 'c', 't', 'S', 't', 'a', 'r', 't', 'O', 'f', 'B', 'l', 'o', 'c', 'k', 0,
    'S', 'e', 'l', 'e', 'c', 't', 'P', 'r', 'e', 'v', 'i', 'o', 'u', 's', 'P', 'a', 'g', 'e', 0,
    'S', 'e', 'l', 'e', 'c', 't', 'P', 'r', 'e', 'v', 'i', 'o', 'u', 's', 'L', 'i', 'n', 'e', 0,
    'S', 'e', 'l', 'e', 'c', 't', 'P', 'r', 'e', 'v', 'i', 'o', 'u', 's', 'W', 'o', 'r', 'd', 0,
    'S', 'e', 'l', 'e', 'c', 't', 'P', 'r', 'e', 'v', 'i', 'o', 'u', 's', 'C', 'h', 'a', 'r', 0,
    'M', 'o', 'v', 'e', 'T', 'o', 'S', 't', 'a', 'r', 't', 'O', 'f', 'B', 'l', 'o', 'c', 'k', 0,
    'M', 'o', 'v', 'e', 'T', 'o', 'P', 'r', 'e', 'v', 'i', 'o', 'u', 's', 'P', 'a', 'g', 'e', 0,
    'M', 'o', 'v', 'e', 'T', 'o', 'P', 'r', 'e', 'v', 'i', 'o', 'u', 's', 'L', 'i', 'n', 'e', 0,
    'M', 'o', 'v', 'e', 'T', 'o', 'P', 'r', 'e', 'v', 'i', 'o', 'u', 's', 'W', 'o', 'r', 'd', 0,
    'M', 'o', 'v', 'e', 'T', 'o', 'P', 'r', 'e', 'v', 'i', 'o', 'u', 's', 'C', 'h', 'a', 'r', 0,
    'i', 'n', 'p', 'u', 't', 'I', 't', 'e', 'm', 'R', 'e', 'c', 't', 'a', 'n', 'g', 'l', 'e', 0,
    'i', 'n', 'p', 'u', 't', 'I', 't', 'e', 'm', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 0,
    's', 'u', 'p', 'p', 'o', 'r', 't', 'e', 'd', 'M', 'i', 'm', 'e', 'T', 'y', 'p', 'e', 's', 0,
    's', 'e', 't', 'B', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 'C', 'o', 'l', 'o', 'r', 0,
    'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'a', 't', 'i', 'o', 'n', 'F', 'l', 'i', 'p', 0,
    'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'a', 't', 'i', 'o', 'n', 'N', 'o', 'n', 'e', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'I', 'm', 'a', 'g', 'e', 'N', 'u', 'm', 'b', 'e', 'r', 0,
    'I', 'n', 'c', 'r', 'e', 'm', 'e', 'n', 't', 'a', 'l', 'R', 'e', 'a', 'd', 'i', 'n', 'g', 0,
    'Q', 'I', 'm', 'a', 'g', 'e', ':', ':', 'I', 'n', 'v', 'e', 'r', 't', 'M', 'o', 'd', 'e', 0,
    'A', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'S', 'i', 'z', 'e', 's', 'H', 'o', 'o', 'k', 0,
    's', 'e', 't', 'D', 'e', 's', 'k', 't', 'o', 'p', 'F', 'i', 'l', 'e', 'N', 'a', 'm', 'e', 0,
    'f', 'o', 'c', 'u', 's', 'W', 'i', 'n', 'd', 'o', 'w', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'f', 'o', 'c', 'u', 's', 'O', 'b', 'j', 'e', 'c', 't', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    's', 'e', 't', 'L', 'a', 'y', 'o', 'u', 't', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'a', 'd', 'd', 'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'F', 'o', 'n', 't', 0,
    'i', 's', 'S', 'm', 'o', 'o', 't', 'h', 'l', 'y', 'S', 'c', 'a', 'l', 'a', 'b', 'l', 'e', 0,
    'T', 'r', 'a', 'd', 'i', 't', 'i', 'o', 'n', 'a', 'l', 'C', 'h', 'i', 'n', 'e', 's', 'e', 0,
    'Q', 'F', 'o', 'n', 't', ':', ':', 'S', 'p', 'a', 'c', 'i', 'n', 'g', 'T', 'y', 'p', 'e', 0,
    'i', 'n', 's', 'e', 'r', 't', 'S', 'u', 'b', 's', 't', 'i', 't', 'u', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'C', 'o', 'n', 't', 'e', 'n', 't', 'P', 'o', 's', 'R', 'a', 'n', 'g', 'e', 0,
    'r', 'a', 'w', 'S', 'c', 'r', 'e', 'e', 'n', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 's', 0,
    's', 't', 'a', 'r', 't', 'N', 'o', 'r', 'm', 'a', 'l', 'i', 'z', 'e', 'd', 'P', 'o', 's', 0,
    't', 'a', 'n', 'g', 'e', 'n', 't', 'i', 'a', 'l', 'P', 'r', 'e', 's', 's', 'u', 'r', 'e', 0,
    's', 'u', 'p', 'p', 'o', 'r', 't', 's', 'F', 'i', 'n', 'd', 'B', 'u', 'f', 'f', 'e', 'r', 0,
    'O', 'b', 'j', 'e', 'c', 't', 'B', 'o', 'u', 'n', 'd', 'i', 'n', 'g', 'M', 'o', 'd', 'e', 0,
    'Q', 'C', 'o', 'l', 'o', 'r', ':', ':', 'N', 'a', 'm', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'r', 'e', 's', 'i', 'z', 'e', 'I', 'n', 'l', 'i', 'n', 'e', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'S', 'c', 'i', 'e', 'n', 't', 'i', 'f', 'i', 'c', 'N', 'o', 't', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'T', 'e', 'x', 't', 'B', 'l', 'o', 'c', 'k', '>', 0,
    'v', 'i', 's', 'i', 'b', 'i', 'l', 'i', 't', 'y', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'm', 'o', 'u', 's', 'e', 'R', 'e', 'l', 'e', 'a', 's', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'I', 'n', 'c', 'l', 'u', 'd', 'e', 'T', 'r', 'a', 'n', 's', 'i', 'e', 'n', 't', 's', 0,
    'E', 'x', 'c', 'l', 'u', 'd', 'e', 'T', 'r', 'a', 'n', 's', 'i', 'e', 'n', 't', 's', 0,
    'Q', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'o', 'r', ':', ':', 'S', 't', 'a', 't', 'e', 0,
    'S', 'h', 'o', 'w', 'T', 'a', 'b', 's', 'A', 'n', 'd', 'S', 'p', 'a', 'c', 'e', 's', 0,
    'Q', 'T', 'e', 'x', 't', 'O', 'p', 't', 'i', 'o', 'n', ':', ':', 'F', 'l', 'a', 'g', 0,
    'C', 'u', 'r', 's', 'o', 'r', 'O', 'n', 'C', 'h', 'a', 'r', 'a', 'c', 't', 'e', 'r', 0,
    'a', 'd', 'd', 'i', 't', 'i', 'o', 'n', 'a', 'l', 'F', 'o', 'r', 'm', 'a', 't', 's', 0,
    'Q', 'T', 'e', 'x', 't', 'I', 'n', 'l', 'i', 'n', 'e', 'O', 'b', 'j', 'e', 'c', 't', 0,
    's', 'e', 't', 'H', 'e', 'a', 'd', 'e', 'r', 'R', 'o', 'w', 'C', 'o', 'u', 'n', 't', 0,
    'B', 'o', 'r', 'd', 'e', 'r', 'S', 't', 'y', 'l', 'e', '_', 'I', 'n', 's', 'e', 't', 0,
    'B', 'o', 'r', 'd', 'e', 'r', 'S', 't', 'y', 'l', 'e', '_', 'R', 'i', 'd', 'g', 'e', 0,
    'B', 'o', 'r', 'd', 'e', 'r', 'S', 't', 'y', 'l', 'e', '_', 'S', 'o', 'l', 'i', 'd', 0,
    'n', 'o', 'n', 'B', 'r', 'e', 'a', 'k', 'a', 'b', 'l', 'e', 'L', 'i', 'n', 'e', 's', 0,
    'F', 'o', 'n', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'i', 'e', 's', 'A', 'l', 'l', 0,
    'f', 'o', 'n', 't', 'S', 't', 'y', 'l', 'e', 'S', 't', 'r', 'a', 't', 'e', 'g', 'y', 0,
    'f', 'o', 'n', 't', 'L', 'e', 't', 't', 'e', 'r', 'S', 'p', 'a', 'c', 'i', 'n', 'g', 0,
    's', 'e', 't', 'U', 'n', 'd', 'e', 'r', 'l', 'i', 'n', 'e', 'S', 't', 'y', 'l', 'e', 0,
    'v', 'e', 'r', 't', 'i', 'c', 'a', 'l', 'A', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', 0,
    's', 'e', 't', 'F', 'o', 'n', 't', 'F', 'i', 'x', 'e', 'd', 'P', 'i', 't', 'c', 'h', 0,
    's', 'e', 't', 'U', 'n', 'd', 'e', 'r', 'l', 'i', 'n', 'e', 'C', 'o', 'l', 'o', 'r', 0,
    't', 'o', 'T', 'a', 'b', 'l', 'e', 'C', 'e', 'l', 'l', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'i', 's', 'T', 'a', 'b', 'l', 'e', 'C', 'e', 'l', 'l', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'F', 'i', 'r', 's', 't', 'F', 'o', 'n', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'F', 'r', 'a', 'm', 'e', 'B', 'o', 't', 't', 'o', 'm', 'M', 'a', 'r', 'g', 'i', 'n', 0,
    'F', 'o', 'n', 't', 'S', 'i', 'z', 'e', 'I', 'n', 'c', 'r', 'e', 'm', 'e', 'n', 't', 0,
    'B', 'l', 'o', 'c', 'k', 'B', 'o', 't', 't', 'o', 'm', 'M', 'a', 'r', 'g', 'i', 'n', 0,
    'Q', 'T', 'e', 'x', 't', 'L', 'e', 'n', 'g', 't', 'h', ':', ':', 'T', 'y', 'p', 'e', 0,
    'U', 'n', 'd', 'o', 'A', 'n', 'd', 'R', 'e', 'd', 'o', 'S', 't', 'a', 'c', 'k', 's', 0,
    's', 'e', 't', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 'M', 'a', 'r', 'g', 'i', 'n', 0,
    'f', 'i', 'n', 'd', 'B', 'l', 'o', 'c', 'k', 'B', 'y', 'N', 'u', 'm', 'b', 'e', 'r', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'T', 'e', 'x', 't', 'O', 'p', 't', 'i', 'o', 'n', 0,
    'm', 'a', 'x', 'i', 'm', 'u', 'm', 'B', 'l', 'o', 'c', 'k', 'C', 'o', 'u', 'n', 't', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'S', 't', 'y', 'l', 'e', 'S', 'h', 'e', 'e', 't', 0,
    'b', 'l', 'o', 'c', 'k', 'C', 'o', 'u', 'n', 't', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'm', 'a', 'r', 'k', 'C', 'o', 'n', 't', 'e', 'n', 't', 's', 'D', 'i', 'r', 't', 'y', 0,
    's', 'e', 't', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 'L', 'a', 'y', 'o', 'u', 't', 0,
    'i', 's', 'U', 'n', 'd', 'o', 'R', 'e', 'd', 'o', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'v', 'e', 'r', 't', 'i', 'c', 'a', 'l', 'M', 'o', 'v', 'e', 'm', 'e', 'n', 't', 'X', 0,
    'P', 'r', 'e', 'v', 'i', 'o', 'u', 's', 'C', 'h', 'a', 'r', 'a', 'c', 't', 'e', 'r', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'B', 'l', 'o', 'c', 'k', 'S', 't', 'a', 't', 'e', 0,
    'D', 'e', 'f', 'a', 'u', 'l', 't', 'C', 'o', 'l', 'o', 'r', 'S', 'p', 'a', 'c', 'e', 0,
    's', 'e', 't', 'R', 'e', 'n', 'd', 'e', 'r', 'a', 'b', 'l', 'e', 'T', 'y', 'p', 'e', 0,
    's', 'e', 't', 'B', 'l', 'u', 'e', 'B', 'u', 'f', 'f', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    's', 't', 'e', 'n', 'c', 'i', 'l', 'B', 'u', 'f', 'f', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    'R', 'e', 's', 'e', 't', 'N', 'o', 't', 'i', 'f', 'i', 'c', 'a', 't', 'i', 'o', 'n', 0,
    'p', 'a', 's', 's', 'w', 'o', 'r', 'd', 'M', 'a', 's', 'k', 'D', 'e', 'l', 'a', 'y', 0,
    's', 't', 'a', 'r', 't', 'D', 'r', 'a', 'g', 'V', 'e', 'l', 'o', 'c', 'i', 't', 'y', 0,
    's', 't', 'a', 'r', 't', 'D', 'r', 'a', 'g', 'D', 'i', 's', 't', 'a', 'n', 'c', 'e', 0,
    'A', 'g', 'g', 'r', 'e', 's', 's', 'i', 'v', 'e', 'C', 'a', 'c', 'h', 'i', 'n', 'g', 0,
    's', 'e', 't', 'A', 'c', 'c', 'e', 's', 's', 'i', 'b', 'l', 'e', 'T', 'e', 'x', 't', 0,
    'i', 'n', 'v', 'i', 's', 'i', 'b', 'l', 'e', 'R', 'o', 'o', 't', 'I', 't', 'e', 'm', 0,
    's', 'e', 't', 'D', 'i', 's', 'c', 'a', 'r', 'd', 'C', 'o', 'm', 'm', 'a', 'n', 'd', 0,
    's', 'e', 't', 'R', 'e', 's', 't', 'a', 'r', 't', 'C', 'o', 'm', 'm', 'a', 'n', 'd', 0,
    'a', 'l', 'l', 'o', 'w', 's', 'I', 'n', 't', 'e', 'r', 'a', 'c', 't', 'i', 'o', 'n', 0,
    'n', 'a', 't', 'i', 'v', 'e', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 0,
    'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 0,
    'u', 'n', 'd', 'e', 'r', 'l', 'i', 'n', 'e', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    's', 'u', 'p', 'p', 'o', 'r', 't', 's', 'C', 'h', 'a', 'r', 'a', 'c', 't', 'e', 'r', 0,
    'Q', 'P', 'i', 'x', 'm', 'a', 'p', 'C', 'a', 'c', 'h', 'e', ':', ':', 'K', 'e', 'y', 0,
    'q', 'P', 'i', 'x', 'e', 'l', 'F', 'o', 'r', 'm', 'a', 't', 'A', 'l', 'p', 'h', 'a', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'C', 'o', 'l', 'o', 'r', 'G', 'r', 'o', 'u', 'p', 0,
    's', 'e', 't', 'C', 'u', 'r', 'v', 'e', 'T', 'h', 'r', 'e', 's', 'h', 'o', 'l', 'd', 0,
    't', 'o', 'S', 'u', 'b', 'p', 'a', 't', 'h', 'P', 'o', 'l', 'y', 'g', 'o', 'n', 's', 0,
    'p', 'e', 'n', 'N', 'e', 'e', 'd', 's', 'R', 'e', 's', 'o', 'l', 'v', 'i', 'n', 'g', 0,
    'Q', 'P', 'a', 'i', 'n', 't', 'E', 'n', 'g', 'i', 'n', 'e', 'S', 't', 'a', 't', 'e', 0,
    'd', 'e', 'v', 'i', 'c', 'e', 'P', 'i', 'x', 'e', 'l', 'R', 'a', 't', 'i', 'o', 'F', 0,
    'e', 'n', 'd', 'N', 'a', 't', 'i', 'v', 'e', 'P', 'a', 'i', 'n', 't', 'i', 'n', 'g', 0,
    'c', 'o', 'm', 'b', 'i', 'n', 'e', 'd', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 0,
    's', 'e', 't', 'W', 'o', 'r', 'l', 'd', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 0,
    'd', 'r', 'a', 'w', 'C', 'o', 'n', 'v', 'e', 'x', 'P', 'o', 'l', 'y', 'g', 'o', 'n', 0,
    's', 'e', 't', 'B', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 'M', 'o', 'd', 'e', 0,
    's', 'e', 't', 'M', 'i', 'n', 'i', 'm', 'u', 'm', 'M', 'a', 'r', 'g', 'i', 'n', 's', 0,
    'Q', 'P', 'a', 'g', 'e', 'L', 'a', 'y', 'o', 'u', 't', ':', ':', 'M', 'o', 'd', 'e', 0,
    'Q', 'P', 'a', 'g', 'e', 'L', 'a', 'y', 'o', 'u', 't', ':', ':', 'U', 'n', 'i', 't', 0,
    'E', 'x', 'e', 'c', 'u', 't', 'i', 'v', 'e', 'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 0,
    'Q', 'P', 'a', 'g', 'e', 'd', 'P', 'a', 'i', 'n', 't', 'D', 'e', 'v', 'i', 'c', 'e', 0,
    'P', 'a', 'r', 't', 'i', 'a', 'l', 'U', 'p', 'd', 'a', 't', 'e', 'B', 'l', 'i', 't', 0,
    's', 'e', 't', 'R', 'e', 'd', 'B', 'l', 'u', 'e', 'S', 'w', 'i', 'z', 'z', 'l', 'e', 0,
    's', 'e', 't', 'C', 'o', 'm', 'p', 'a', 'r', 'i', 's', 'o', 'n', 'M', 'o', 'd', 'e', 0,
    'l', 'e', 'v', 'e', 'l', 'o', 'f', 'D', 'e', 't', 'a', 'i', 'l', 'B', 'i', 'a', 's', 0,
    'm', 'a', 'x', 'i', 'm', 'u', 'm', 'A', 'n', 'i', 's', 'o', 't', 'r', 'o', 'p', 'y', 0,
    'N', 'P', 'O', 'T', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'R', 'e', 'p', 'e', 'a', 't', 0,
    's', 'e', 't', 'C', 'o', 'm', 'p', 'r', 'e', 's', 's', 'e', 'd', 'D', 'a', 't', 'a', 0,
    'U', 'I', 'n', 't', '1', '6', '_', 'R', '5', 'G', '6', 'B', '5', '_', 'R', 'e', 'v', 0,
    'U', 'I', 'n', 't', '1', '6', '_', 'R', 'G', 'B', '5', 'A', '1', '_', 'R', 'e', 'v', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'V', 'i', 'e', 'w', 0,
    's', 'e', 't', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 'A', 'r', 'r', 'a', 'y', 0,
    's', 'e', 't', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 'V', 'a', 'l', 'u', 'e', 0,
    'a', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 'L', 'o', 'c', 'a', 't', 'i', 'o', 'n', 0,
    'c', 'o', 'm', 'p', 'i', 'l', 'e', 'S', 'o', 'u', 'r', 'c', 'e', 'F', 'i', 'l', 'e', 0,
    'c', 'o', 'm', 'p', 'i', 'l', 'e', 'S', 'o', 'u', 'r', 'c', 'e', 'C', 'o', 'd', 'e', 0,
    'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'S', 'o', 'u', 'r', 'c', 'e', 0,
    'P', 'i', 'x', 'e', 'l', 'U', 'n', 'p', 'a', 'c', 'k', 'B', 'u', 'f', 'f', 'e', 'r', 0,
    'Q', 'O', 'f', 'f', 's', 'c', 'r', 'e', 'e', 'n', 'S', 'u', 'r', 'f', 'a', 'c', 'e', 0,
    'Q', 'M', 'o', 'v', 'i', 'e', ':', ':', 'C', 'a', 'c', 'h', 'e', 'M', 'o', 'd', 'e', 0,
    'D', 'e', 'l', 'e', 't', 'e', 'S', 't', 'a', 'r', 't', 'O', 'f', 'W', 'o', 'r', 'd', 0,
    'S', 'e', 'l', 'e', 'c', 't', 'S', 't', 'a', 'r', 't', 'O', 'f', 'L', 'i', 'n', 'e', 0,
    'M', 'o', 'v', 'e', 'T', 'o', 'S', 't', 'a', 'r', 't', 'O', 'f', 'L', 'i', 'n', 'e', 0,
    'k', 'e', 'y', 'b', 'o', 'a', 'r', 'd', 'R', 'e', 'c', 't', 'a', 'n', 'g', 'l', 'e', 0,
    's', 'e', 't', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'a', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'O', 'p', 't', 'i', 'm', 'i', 'z', 'e', 'd', 'W', 'r', 'i', 't', 'e', 0,
    'I', 'n', 'v', 'a', 'l', 'i', 'd', 'I', 'm', 'a', 'g', 'e', 'E', 'r', 'r', 'o', 'r', 0,
    's', 'u', 'p', 'p', 'o', 'r', 't', 'e', 'd', 'S', 'u', 'b', 'T', 'y', 'p', 'e', 's', 0,
    's', 'u', 'p', 'p', 'o', 'r', 't', 's', 'A', 'n', 'i', 'm', 'a', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'S', 'c', 'a', 'l', 'e', 'd', 'C', 'l', 'i', 'p', 'R', 'e', 'c', 't', 0,
    'F', 'i', 'l', 'e', 'N', 'o', 't', 'F', 'o', 'u', 'n', 'd', 'E', 'r', 'r', 'o', 'r', 0,
    'S', 'u', 'p', 'p', 'o', 'r', 't', 'e', 'd', 'S', 'u', 'b', 'T', 'y', 'p', 'e', 's', 0,
    'F', 'o', 'r', 'm', 'a', 't', '_', 'G', 'r', 'a', 'y', 's', 'c', 'a', 'l', 'e', '8', 0,
    'f', 'a', 'l', 'l', 'b', 'a', 'c', 'k', 'T', 'h', 'e', 'm', 'e', 'N', 'a', 'm', 'e', 0,
    'i', 's', 'S', 'e', 's', 's', 'i', 'o', 'n', 'R', 'e', 's', 't', 'o', 'r', 'e', 'd', 0,
    'c', 'o', 'm', 'm', 'i', 't', 'D', 'a', 't', 'a', 'R', 'e', 'q', 'u', 'e', 's', 't', 0,
    's', 'e', 't', 'O', 'v', 'e', 'r', 'r', 'i', 'd', 'e', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'h', 'o', 'r', 'i', 'z', 'o', 'n', 't', 'a', 'l', 'A', 'd', 'v', 'a', 'n', 'c', 'e', 0,
    't', 'i', 'g', 'h', 't', 'B', 'o', 'u', 'n', 'd', 'i', 'n', 'g', 'R', 'e', 'c', 't', 0,
    'w', 'r', 'i', 't', 'i', 'n', 'g', 'S', 'y', 's', 't', 'e', 'm', 'N', 'a', 'm', 'e', 0,
    'S', 'i', 'm', 'p', 'l', 'i', 'f', 'i', 'e', 'd', 'C', 'h', 'i', 'n', 'e', 's', 'e', 0,
    'h', 'i', 'n', 't', 'i', 'n', 'g', 'P', 'r', 'e', 'f', 'e', 'r', 'e', 'n', 'c', 'e', 0,
    'P', 'r', 'e', 'f', 'e', 'r', 'F', 'u', 'l', 'l', 'H', 'i', 'n', 't', 'i', 'n', 'g', 0,
    's', 'e', 't', 'C', 'a', 'p', 'i', 't', 'a', 'l', 'i', 'z', 'a', 't', 'i', 'o', 'n', 0,
    'l', 'e', 't', 't', 'e', 'r', 'S', 'p', 'a', 'c', 'i', 'n', 'g', 'T', 'y', 'p', 'e', 0,
    'P', 'e', 'r', 'c', 'e', 'n', 't', 'a', 'g', 'e', 'S', 'p', 'a', 'c', 'i', 'n', 'g', 0,
    'o', 'v', 'e', 'r', 's', 'h', 'o', 'o', 't', 'D', 'i', 's', 't', 'a', 'n', 'c', 'e', 0,
    'l', 'a', 's', 't', 'N', 'o', 'r', 'm', 'a', 'l', 'i', 'z', 'e', 'd', 'P', 'o', 's', 0,
    'k', 'e', 'y', 'b', 'o', 'a', 'r', 'd', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'r', 's', 0,
    'r', 'e', 'p', 'l', 'a', 'c', 'e', 'm', 'e', 'n', 't', 'L', 'e', 'n', 'g', 't', 'h', 0,
    'Q', 'I', 'n', 'p', 'u', 't', 'M', 'e', 't', 'h', 'o', 'd', 'E', 'v', 'e', 'n', 't', 0,
    'Q', 'C', 'o', 'n', 't', 'e', 'x', 't', 'M', 'e', 'n', 'u', 'E', 'v', 'e', 'n', 't', 0,
    'f', 'i', 'n', 'd', 'B', 'u', 'f', 'f', 'e', 'r', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    's', 'u', 'p', 'p', 'o', 'r', 't', 's', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'C', 'o', 'o', 'r', 'd', 'i', 'n', 'a', 't', 'e', 'M', 'o', 'd', 'e', 0,
    'Q', 'G', 'r', 'a', 'd', 'i', 'e', 'n', 't', ':', ':', 'P', 'r', 'e', 's', 'e', 't', 0,
    'Q', 'G', 'r', 'a', 'd', 'i', 'e', 'n', 't', ':', ':', 'S', 'p', 'r', 'e', 'a', 'd', 0,
    'h', 'a', 's', 'S', 't', 'a', 't', 'i', 'c', 'C', 'o', 'n', 't', 'e', 'n', 't', 's', 0,
    's', 'e', 't', 'S', 't', 'a', 't', 'i', 'c', 'C', 'o', 'n', 't', 'e', 'n', 't', 's', 0,
    'u', 'n', 'r', 'e', 'g', 'i', 's', 't', 'e', 'r', 'H', 'a', 'n', 'd', 'l', 'e', 'r', 0,
    'b', 'l', 'o', 'c', 'k', 'B', 'o', 'u', 'n', 'd', 'i', 'n', 'g', 'R', 'e', 'c', 't', 0,
    'f', 'r', 'a', 'm', 'e', 'B', 'o', 'u', 'n', 'd', 'i', 'n', 'g', 'R', 'e', 'c', 't', 0,
    'r', 'e', 'g', 'u', 'l', 'a', 'r', 'E', 'x', 'p', 'r', 'e', 's', 's', 'i', 'o', 'n', 0,
    's', 'i', 'p', '.', 's', 'i', 'm', 'p', 'l', 'e', 'w', 'r', 'a', 'p', 'p', 'e', 'r', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'G', 'l', 'y', 'p', 'h', 'R', 'u', 'n', '>', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'P', 'o', 'l', 'y', 'g', 'o', 'n', 'F', '>', 0,
    'Q', 'S', 'e', 't', '<', 'Q', 'B', 'y', 't', 'e', 'A', 'r', 'r', 'a', 'y', '>', 0,
    's', 'e', 't', 'M', 'a', 'x', 'i', 'm', 'u', 'm', 'H', 'e', 'i', 'g', 'h', 't', 0,
    's', 'e', 't', 'M', 'i', 'n', 'i', 'm', 'u', 'm', 'H', 'e', 'i', 'g', 'h', 't', 0,
    's', 'e', 't', 'F', 'r', 'a', 'm', 'e', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'S', 'i', 'z', 'e', 'I', 'n', 'c', 'r', 'e', 'm', 'e', 'n', 't', 0,
    't', 'o', 'V', 'e', 'c', 't', 'o', 'r', '3', 'D', 'A', 'f', 'f', 'i', 'n', 'e', 0,
    't', 'o', 'V', 'e', 'c', 't', 'o', 'r', '2', 'D', 'A', 'f', 'f', 'i', 'n', 'e', 0,
    'Q', 'R', 'e', 'g', 'E', 'x', 'p', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'o', 'r', 0,
    'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'N', 'o', 't', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'D', 'o', 'u', 'b', 'l', 'e', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'o', 'r', 0,
    'Q', 'T', 'e', 'x', 't', 'O', 'p', 't', 'i', 'o', 'n', ':', ':', 'T', 'a', 'b', 0,
    's', 'e', 't', 'T', 'e', 'x', 't', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'b', 'l', 'o', 'c', 'k', 'F', 'o', 'r', 'm', 'a', 't', 'I', 'n', 'd', 'e', 'x', 0,
    'n', 'a', 't', 'u', 'r', 'a', 'l', 'T', 'e', 'x', 't', 'W', 'i', 'd', 't', 'h', 0,
    's', 'e', 't', 'B', 'o', 't', 't', 'o', 'm', 'P', 'a', 'd', 'd', 'i', 'n', 'g', 0,
    'Q', 'T', 'e', 'x', 't', 'T', 'a', 'b', 'l', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'B', 'o', 'r', 'd', 'e', 'r', 'S', 't', 'y', 'l', 'e', '_', 'N', 'o', 'n', 'e', 0,
    'Q', 'T', 'e', 'x', 't', 'F', 'r', 'a', 'm', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'Q', 'T', 'e', 'x', 't', 'I', 'm', 'a', 'g', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'Q', 'T', 'e', 'x', 't', 'B', 'l', 'o', 'c', 'k', 'F', 'o', 'r', 'm', 'a', 't', 0,
    's', 'e', 't', 'F', 'o', 'n', 't', 'S', 't', 'y', 'l', 'e', 'H', 'i', 'n', 't', 0,
    't', 'a', 'b', 'l', 'e', 'C', 'e', 'l', 'l', 'R', 'o', 'w', 'S', 'p', 'a', 'n', 0,
    's', 'e', 't', 'F', 'o', 'n', 't', 'S', 't', 'r', 'i', 'k', 'e', 'O', 'u', 't', 0,
    's', 'e', 't', 'F', 'o', 'n', 't', 'U', 'n', 'd', 'e', 'r', 'l', 'i', 'n', 'e', 0,
    's', 'e', 't', 'F', 'o', 'n', 't', 'P', 'o', 'i', 'n', 't', 'S', 'i', 'z', 'e', 0,
    'A', 'l', 'i', 'g', 'n', 'S', 'u', 'p', 'e', 'r', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'L', 'i', 's', 't', 'N', 'u', 'm', 'b', 'e', 'r', 'S', 'u', 'f', 'f', 'i', 'x', 0,
    'L', 'i', 's', 't', 'N', 'u', 'm', 'b', 'e', 'r', 'P', 'r', 'e', 'f', 'i', 'x', 0,
    'L', 'a', 's', 't', 'F', 'o', 'n', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'F', 'r', 'a', 'm', 'e', 'B', 'o', 'r', 'd', 'e', 'r', 'S', 't', 'y', 'l', 'e', 0,
    'F', 'r', 'a', 'm', 'e', 'B', 'o', 'r', 'd', 'e', 'r', 'B', 'r', 'u', 's', 'h', 0,
    'F', 'r', 'a', 'm', 'e', 'R', 'i', 'g', 'h', 't', 'M', 'a', 'r', 'g', 'i', 'n', 0,
    'T', 'a', 'b', 'l', 'e', 'C', 'e', 'l', 'l', 'P', 'a', 'd', 'd', 'i', 'n', 'g', 0,
    'T', 'a', 'b', 'l', 'e', 'C', 'e', 'l', 'l', 'S', 'p', 'a', 'c', 'i', 'n', 'g', 0,
    'B', 'l', 'o', 'c', 'k', 'R', 'i', 'g', 'h', 't', 'M', 'a', 'r', 'g', 'i', 'n', 0,
    'P', 'e', 'r', 'c', 'e', 'n', 't', 'a', 'g', 'e', 'L', 'e', 'n', 'g', 't', 'h', 0,
    'u', 'n', 'd', 'o', 'C', 'o', 'm', 'm', 'a', 'n', 'd', 'A', 'd', 'd', 'e', 'd', 0,
    'u', 's', 'e', 'D', 'e', 's', 'i', 'g', 'n', 'M', 'e', 't', 'r', 'i', 'c', 's', 0,
    'v', 'i', 's', 'u', 'a', 'l', 'N', 'a', 'v', 'i', 'g', 'a', 't', 'i', 'o', 'n', 0,
    'm', 'e', 'r', 'g', 'e', 'B', 'l', 'o', 'c', 'k', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'B', 'l', 'o', 'c', 'k', 'U', 'n', 'd', 'e', 'r', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'r', 'e', 'h', 'i', 'g', 'h', 'l', 'i', 'g', 'h', 't', 'B', 'l', 'o', 'c', 'k', 0,
    's', 'e', 't', 'R', 'e', 'd', 'B', 'u', 'f', 'f', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    'w', 'h', 'e', 'e', 'l', 'S', 'c', 'r', 'o', 'l', 'l', 'L', 'i', 'n', 'e', 's', 0,
    't', 'a', 'b', 'F', 'o', 'c', 'u', 's', 'B', 'e', 'h', 'a', 'v', 'i', 'o', 'r', 0,
    'u', 's', 'e', 'R', 't', 'l', 'E', 'x', 't', 'e', 'n', 's', 'i', 'o', 'n', 's', 0,
    's', 'h', 'o', 'w', 'I', 's', 'F', 'u', 'l', 'l', 'S', 'c', 'r', 'e', 'e', 'n', 0,
    's', 'e', 't', 'T', 'e', 'x', 't', 'A', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', 0,
    's', 'e', 't', 'I', 't', 'e', 'm', 'R', 'o', 'l', 'e', 'N', 'a', 'm', 'e', 's', 0,
    's', 'e', 't', 'I', 't', 'e', 'm', 'P', 'r', 'o', 't', 'o', 't', 'y', 'p', 'e', 0,
    'R', 'e', 's', 't', 'a', 'r', 't', 'I', 'f', 'R', 'u', 'n', 'n', 'i', 'n', 'g', 0,
    't', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'B', 'e', 't', 'w', 'e', 'e', 'n', 0,
    'S', 'e', 'p', 'a', 'r', 'a', 't', 'e', 'A', 'd', 'v', 'a', 'n', 'c', 'e', 's', 0,
    'a', 'l', 'p', 'h', 'a', 'M', 'a', 'p', 'F', 'o', 'r', 'G', 'l', 'y', 'p', 'h', 0,
    'a', 'n', 't', 'i', 'a', 'l', 'i', 'a', 's', 'i', 'n', 'g', 'T', 'y', 'p', 'e', 0,
    't', 'o', 'R', 'o', 't', 'a', 't', 'i', 'o', 'n', 'M', 'a', 't', 'r', 'i', 'x', 0,
    'f', 'r', 'o', 'm', 'A', 'x', 'i', 's', 'A', 'n', 'd', 'A', 'n', 'g', 'l', 'e', 0,
    'c', 'o', 'n', 'v', 'e', 'r', 't', 'F', 'r', 'o', 'm', 'I', 'm', 'a', 'g', 'e', 0,
    'q', 'P', 'i', 'x', 'e', 'l', 'F', 'o', 'r', 'm', 'a', 't', 'C', 'm', 'y', 'k', 0,
    'q', 'P', 'i', 'x', 'e', 'l', 'F', 'o', 'r', 'm', 'a', 't', 'R', 'g', 'b', 'a', 0,
    'N', 'o', 't', 'P', 'r', 'e', 'm', 'u', 'l', 't', 'i', 'p', 'l', 'i', 'e', 'd', 0,
    'c', 'o', 'n', 't', 'r', 'o', 'l', 'P', 'o', 'i', 'n', 't', 'R', 'e', 'c', 't', 0,
    'D', 'i', 'r', 't', 'y', 'C', 'l', 'i', 'p', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'D', 'i', 'r', 't', 'y', 'B', 'r', 'u', 's', 'h', 'O', 'r', 'i', 'g', 'i', 'n', 0,
    'P', 'a', 't', 't', 'e', 'r', 'n', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 0,
    'c', 'l', 'i', 'p', 'B', 'o', 'u', 'n', 'd', 'i', 'n', 'g', 'R', 'e', 'c', 't', 0,
    'T', 'e', 'x', 't', 'A', 'n', 't', 'i', 'a', 'l', 'i', 'a', 's', 'i', 'n', 'g', 0,
    'E', 'n', 'v', 'e', 'l', 'o', 'p', 'e', 'P', 'e', 'r', 's', 'o', 'n', 'a', 'l', 0,
    'O', 'r', 'i', 'g', 'i', 'n', 'B', 'o', 't', 't', 'o', 'm', 'L', 'e', 'f', 't', 0,
    'C', 'o', 'm', 'm', 'p', 'a', 'r', 'e', 'N', 'o', 't', 'E', 'q', 'u', 'a', 'l', 0,
    'C', 'o', 'm', 'p', 'a', 'r', 'e', 'L', 'e', 's', 's', 'E', 'q', 'u', 'a', 'l', 0,
    's', 'e', 't', 'M', 'i', 'n', 'M', 'a', 'g', 'F', 'i', 'l', 't', 'e', 'r', 's', 0,
    'd', 'e', 'p', 't', 'h', 'S', 't', 'e', 'n', 'c', 'i', 'l', 'M', 'o', 'd', 'e', 0,
    's', 'e', 't', 'M', 'i', 'p', 'L', 'e', 'v', 'e', 'l', 'R', 'a', 'n', 'g', 'e', 0,
    'S', 't', 'e', 'n', 'c', 'i', 'l', 'T', 'e', 'x', 't', 'u', 'r', 'i', 'n', 'g', 0,
    'T', 'e', 'x', 't', 'u', 'r', 'e', 'R', 'e', 'c', 't', 'a', 'n', 'g', 'l', 'e', 0,
    'I', 'm', 'm', 'u', 't', 'a', 'b', 'l', 'e', 'S', 't', 'o', 'r', 'a', 'g', 'e', 0,
    'U', 'I', 'n', 't', '3', '2', '_', 'R', 'G', 'B', 'A', '8', '_', 'R', 'e', 'v', 0,
    'U', 'I', 'n', 't', '1', '6', '_', 'R', 'G', 'B', 'A', '4', '_', 'R', 'e', 'v', 0,
    'C', 'u', 'b', 'e', 'M', 'a', 'p', 'N', 'e', 'g', 'a', 't', 'i', 'v', 'e', 'Z', 0,
    'C', 'u', 'b', 'e', 'M', 'a', 'p', 'P', 'o', 's', 'i', 't', 'i', 'v', 'e', 'Z', 0,
    'C', 'u', 'b', 'e', 'M', 'a', 'p', 'N', 'e', 'g', 'a', 't', 'i', 'v', 'e', 'Y', 0,
    'C', 'u', 'b', 'e', 'M', 'a', 'p', 'P', 'o', 's', 'i', 't', 'i', 'v', 'e', 'Y', 0,
    'C', 'u', 'b', 'e', 'M', 'a', 'p', 'N', 'e', 'g', 'a', 't', 'i', 'v', 'e', 'X', 0,
    'C', 'u', 'b', 'e', 'M', 'a', 'p', 'P', 'o', 's', 'i', 't', 'i', 'v', 'e', 'X', 0,
    'm', 'a', 'x', 'i', 'm', 'u', 'm', 'M', 'i', 'p', 'L', 'e', 'v', 'e', 'l', 's', 0,
    'p', 'a', 't', 'c', 'h', 'V', 'e', 'r', 't', 'e', 'x', 'C', 'o', 'u', 'n', 't', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'A', 'l', 'l', 'S', 'h', 'a', 'd', 'e', 'r', 's', 0,
    'h', 'a', 's', 'O', 'p', 'e', 'n', 'G', 'L', 'S', 'h', 'a', 'd', 'e', 'r', 's', 0,
    's', 'e', 't', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'T', 'a', 'r', 'g', 'e', 't', 0,
    'T', 'h', 'i', 'r', 'd', 'P', 'a', 'r', 't', 'y', 'S', 'o', 'u', 'r', 'c', 'e', 0,
    'o', 'p', 'e', 'n', 'G', 'L', 'M', 'o', 'd', 'u', 'l', 'e', 'T', 'y', 'p', 'e', 0,
    'v', 'e', 'r', 's', 'i', 'o', 'n', 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 's', 0,
    's', 'u', 'p', 'p', 'o', 'r', 't', 'e', 'd', 'F', 'o', 'r', 'm', 'a', 't', 's', 0,
    'S', 'e', 'l', 'e', 'c', 't', 'E', 'n', 'd', 'O', 'f', 'B', 'l', 'o', 'c', 'k', 0,
    'M', 'o', 'v', 'e', 'T', 'o', 'E', 'n', 'd', 'O', 'f', 'B', 'l', 'o', 'c', 'k', 0,
    'a', 'n', 'i', 'm', 'a', 't', 'i', 'n', 'g', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'q', 'u', 'e', 'r', 'y', 'F', 'o', 'c', 'u', 's', 'O', 'b', 'j', 'e', 'c', 't', 0,
    's', 'e', 't', 'A', 'u', 't', 'o', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 0,
    'I', 'n', 'v', 'a', 'l', 'i', 'd', 'D', 'a', 't', 'a', 'E', 'r', 'r', 'o', 'r', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'I', 'm', 'a', 'g', 'e', 'R', 'e', 'c', 't', 0,
    'C', 'o', 'm', 'p', 'r', 'e', 's', 's', 'i', 'o', 'n', 'R', 'a', 't', 'i', 'o', 0,
    's', 'e', 't', 'D', 'o', 't', 's', 'P', 'e', 'r', 'M', 'e', 't', 'e', 'r', 'Y', 0,
    's', 'e', 't', 'D', 'o', 't', 's', 'P', 'e', 'r', 'M', 'e', 't', 'e', 'r', 'X', 0,
    'S', 'c', 'a', 'l', 'e', 'd', 'P', 'i', 'x', 'm', 'a', 'p', 'H', 'o', 'o', 'k', 0,
    't', 'h', 'e', 'm', 'e', 'S', 'e', 'a', 'r', 'c', 'h', 'P', 'a', 't', 'h', 's', 0,
    'a', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'S', 't', 'a', 't', 'e', 0,
    'd', 'e', 'v', 'i', 'c', 'e', 'P', 'i', 'x', 'e', 'l', 'R', 'a', 't', 'i', 'o', 0,
    's', 'a', 'v', 'e', 'S', 't', 'a', 't', 'e', 'R', 'e', 'q', 'u', 'e', 's', 't', 0,
    'l', 'a', 's', 't', 'W', 'i', 'n', 'd', 'o', 'w', 'C', 'l', 'o', 's', 'e', 'd', 0,
    'a', 'v', 'e', 'r', 'a', 'g', 'e', 'C', 'h', 'a', 'r', 'W', 'i', 'd', 't', 'h', 0,
    'b', 'o', 'u', 'n', 'd', 'i', 'n', 'g', 'R', 'e', 'c', 't', 'C', 'h', 'a', 'r', 0,
    'i', 's', 'B', 'i', 't', 'm', 'a', 'p', 'S', 'c', 'a', 'l', 'a', 'b', 'l', 'e', 0,
    's', 'e', 't', 'L', 'e', 't', 't', 'e', 'r', 'S', 'p', 'a', 'c', 'i', 'n', 'g', 0,
    'l', 'a', 's', 't', 'R', 'e', 's', 'o', 'r', 't', 'F', 'a', 'm', 'i', 'l', 'y', 0,
    's', 'e', 't', 'S', 't', 'y', 'l', 'e', 'S', 't', 'r', 'a', 't', 'e', 'g', 'y', 0,
    'O', 'p', 'e', 'n', 'G', 'L', 'C', 'o', 'm', 'p', 'a', 't', 'i', 'b', 'l', 'e', 0,
    'Q', 'F', 'o', 'n', 't', ':', ':', 'S', 't', 'y', 'l', 'e', 'H', 'i', 'n', 't', 0,
    's', 'u', 'r', 'f', 'a', 'c', 'e', 'E', 'v', 'e', 'n', 't', 'T', 'y', 'p', 'e', 0,
    't', 'o', 'u', 'c', 'h', 'P', 'o', 'i', 'n', 't', 'S', 't', 'a', 't', 'e', 's', 0,
    'e', 'l', 'l', 'i', 'p', 's', 'e', 'D', 'i', 'a', 'm', 'e', 't', 'e', 'r', 's', 0,
    'r', 'e', 'p', 'l', 'a', 'c', 'e', 'm', 'e', 'n', 't', 'S', 't', 'a', 'r', 't', 0,
    'n', 'a', 't', 'i', 'v', 'e', 'V', 'i', 'r', 't', 'u', 'a', 'l', 'K', 'e', 'y', 0,
    's', 'u', 'p', 'p', 'o', 'r', 't', 'e', 'd', 'A', 'c', 't', 'i', 'o', 'n', 's', 0,
    'Q', 'D', 'e', 's', 'k', 't', 'o', 'p', 'S', 'e', 'r', 'v', 'i', 'c', 'e', 's', 0,
    'Q', 'C', 'l', 'i', 'p', 'b', 'o', 'a', 'r', 'd', ':', ':', 'M', 'o', 'd', 'e', 0,
    'Q', 'C', 'o', 'n', 'i', 'c', 'a', 'l', 'G', 'r', 'a', 'd', 'i', 'e', 'n', 't', 0,
    'E', 't', 'e', 'r', 'n', 'a', 'l', 'C', 'o', 'n', 's', 't', 'a', 'n', 'c', 'e', 0,
    'd', 'r', 'a', 'w', 'I', 'n', 'l', 'i', 'n', 'e', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'p', 'a', 'g', 'e', 'C', 'o', 'u', 'n', 't', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'h', 'a', 'n', 'd', 'l', 'e', 'r', 'F', 'o', 'r', 'O', 'b', 'j', 'e', 'c', 't', 0,
    's', 'e', 't', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'F', 'o', 'r', 'm', 'a', 't', 0,
    's', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'd', 'i', 's', 'c', 'o', 'n', 'n', 'e', 'c', 't', 'N', 'o', 't', 'i', 'f', 'y', 0,
    'Q', 'V', 'e', 'c', 't', 'o', 'r', '<', 'Q', 'R', 'e', 'c', 't', 'F', '>', 0,
    'Q', 'V', 'e', 'c', 't', 'o', 'r', '<', 'Q', 'P', 'o', 'i', 'n', 't', '>', 0,
    'Q', 'V', 'e', 'c', 't', 'o', 'r', '<', 'Q', 'L', 'i', 'n', 'e', 'F', '>', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'S', 'c', 'r', 'e', 'e', 'n', '*', '>', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'W', 'i', 'n', 'd', 'o', 'w', '*', '>', 0,
    's', 'e', 't', 'W', 'i', 'n', 'd', 'o', 'w', 'S', 't', 'a', 't', 'e', 's', 0,
    'm', 'o', 'u', 's', 'e', 'P', 'r', 'e', 's', 's', 'E', 'v', 'e', 'n', 't', 0,
    'k', 'e', 'y', 'R', 'e', 'l', 'e', 'a', 's', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'm', 'o', 'd', 'a', 'l', 'i', 't', 'y', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    's', 'e', 't', 'M', 'a', 'x', 'i', 'm', 'u', 'm', 'W', 'i', 'd', 't', 'h', 0,
    's', 'e', 't', 'M', 'i', 'n', 'i', 'm', 'u', 'm', 'W', 'i', 'd', 't', 'h', 0,
    't', 'r', 'a', 'n', 's', 'i', 'e', 'n', 't', 'P', 'a', 'r', 'e', 'n', 't', 0,
    'r', 'e', 'q', 'u', 'e', 's', 't', 'A', 'c', 't', 'i', 'v', 'a', 't', 'e', 0,
    'd', 'i', 's', 't', 'a', 'n', 'c', 'e', 'T', 'o', 'P', 'o', 'i', 'n', 't', 0,
    's', 'e', 't', 'C', 'a', 'p', 'a', 'b', 'i', 'l', 'i', 't', 'i', 'e', 's', 0,
    't', 'a', 'b', 'S', 't', 'o', 'p', 'D', 'i', 's', 't', 'a', 'n', 'c', 'e', 0,
    'f', 'i', 'r', 's', 't', 'L', 'i', 'n', 'e', 'N', 'u', 'm', 'b', 'e', 'r', 0,
    'c', 'h', 'a', 'r', 'F', 'o', 'r', 'm', 'a', 't', 'I', 'n', 'd', 'e', 'x', 0,
    'Q', 'T', 'e', 'x', 't', 'B', 'l', 'o', 'c', 'k', 'G', 'r', 'o', 'u', 'p', 0,
    'l', 'e', 'a', 'd', 'i', 'n', 'g', 'I', 'n', 'c', 'l', 'u', 'd', 'e', 'd', 0,
    'Q', 'T', 'e', 'x', 't', 'L', 'i', 'n', 'e', ':', ':', 'E', 'd', 'g', 'e', 0,
    'n', 'a', 't', 'u', 'r', 'a', 'l', 'T', 'e', 'x', 't', 'R', 'e', 'c', 't', 0,
    'c', 'u', 'r', 's', 'o', 'r', 'M', 'o', 'v', 'e', 'S', 't', 'y', 'l', 'e', 0,
    's', 'e', 't', 'C', 'a', 'c', 'h', 'e', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'p', 'r', 'e', 'e', 'd', 'i', 't', 'A', 'r', 'e', 'a', 'T', 'e', 'x', 't', 0,
    's', 'e', 't', 'R', 'i', 'g', 'h', 't', 'P', 'a', 'd', 'd', 'i', 'n', 'g', 0,
    's', 'e', 't', 'N', 'u', 'm', 'b', 'e', 'r', 'S', 'u', 'f', 'f', 'i', 'x', 0,
    's', 'e', 't', 'N', 'u', 'm', 'b', 'e', 'r', 'P', 'r', 'e', 'f', 'i', 'x', 0,
    'Q', 'T', 'e', 'x', 't', 'L', 'i', 's', 't', 'F', 'o', 'r', 'm', 'a', 't', 0,
    's', 'e', 't', 'H', 'e', 'a', 'd', 'i', 'n', 'g', 'L', 'e', 'v', 'e', 'l', 0,
    's', 'e', 't', 'T', 'a', 'b', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 's', 0,
    'p', 'a', 'g', 'e', 'B', 'r', 'e', 'a', 'k', 'P', 'o', 'l', 'i', 'c', 'y', 0,
    'f', 'o', 'n', 't', 'W', 'o', 'r', 'd', 'S', 'p', 'a', 'c', 'i', 'n', 'g', 0,
    'S', 'i', 'n', 'g', 'l', 'e', 'U', 'n', 'd', 'e', 'r', 'l', 'i', 'n', 'e', 0,
    's', 'e', 't', 'F', 'o', 'n', 't', 'O', 'v', 'e', 'r', 'l', 'i', 'n', 'e', 0,
    'Q', 'T', 'e', 'x', 't', 'C', 'h', 'a', 'r', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'c', 'l', 'e', 'a', 'r', 'F', 'o', 'r', 'e', 'g', 'r', 'o', 'u', 'n', 'd', 0,
    'c', 'l', 'e', 'a', 'r', 'B', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 0,
    'F', 'r', 'a', 'm', 'e', 'L', 'e', 'f', 't', 'M', 'a', 'r', 'g', 'i', 'n', 0,
    'B', 'l', 'o', 'c', 'k', 'L', 'e', 'f', 't', 'M', 'a', 'r', 'g', 'i', 'n', 0,
    'F', 'o', 'r', 'e', 'g', 'r', 'o', 'u', 'n', 'd', 'B', 'r', 'u', 's', 'h', 0,
    'B', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 'B', 'r', 'u', 's', 'h', 0,
    'T', 'a', 'b', 'l', 'e', 'C', 'e', 'l', 'l', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'c', 'o', 'n', 't', 'e', 'n', 't', 's', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'o', 'b', 'j', 'e', 'c', 't', 'F', 'o', 'r', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'm', 'e', 't', 'a', 'I', 'n', 'f', 'o', 'r', 'm', 'a', 't', 'i', 'o', 'n', 0,
    'i', 's', 'R', 'e', 'd', 'o', 'A', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 0,
    'i', 's', 'U', 'n', 'd', 'o', 'A', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 0,
    'm', 'i', 'g', 'h', 't', 'B', 'e', 'R', 'i', 'c', 'h', 'T', 'e', 'x', 't', 0,
    'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 'I', 'n', 'B', 'l', 'o', 'c', 'k', 0,
    'b', 'l', 'o', 'c', 'k', 'C', 'h', 'a', 'r', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'm', 'e', 'r', 'g', 'e', 'C', 'h', 'a', 'r', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'L', 'i', 'n', 'e', 'U', 'n', 'd', 'e', 'r', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'W', 'o', 'r', 'd', 'U', 'n', 'd', 'e', 'r', 'C', 'u', 'r', 's', 'o', 'r', 0,
    's', 'e', 't', 'S', 'w', 'a', 'p', 'I', 'n', 't', 'e', 'r', 'v', 'a', 'l', 0,
    's', 'e', 't', 'M', 'i', 'n', 'o', 'r', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    's', 'e', 't', 'M', 'a', 'j', 'o', 'r', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    's', 'e', 't', 'S', 'w', 'a', 'p', 'B', 'e', 'h', 'a', 'v', 'i', 'o', 'r', 0,
    'a', 'l', 'p', 'h', 'a', 'B', 'u', 'f', 'f', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    'g', 'r', 'e', 'e', 'n', 'B', 'u', 'f', 'f', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    'd', 'e', 'p', 't', 'h', 'B', 'u', 'f', 'f', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    'R', 'a', 's', 't', 'e', 'r', 'G', 'L', 'S', 'u', 'r', 'f', 'a', 'c', 'e', 0,
    'u', 's', 'e', 'H', 'o', 'v', 'e', 'r', 'E', 'f', 'f', 'e', 'c', 't', 's', 0,
    's', 'h', 'o', 'w', 'I', 's', 'M', 'a', 'x', 'i', 'm', 'i', 'z', 'e', 'd', 0,
    'c', 'u', 'r', 's', 'o', 'r', 'F', 'l', 'a', 's', 'h', 'T', 'i', 'm', 'e', 0,
    'p', 'e', 'r', 'f', 'o', 'r', 'm', 'a', 'n', 'c', 'e', 'H', 'i', 'n', 't', 0,
    'M', 'o', 'd', 'e', 'r', 'a', 't', 'e', 'C', 'a', 'c', 'h', 'i', 'n', 'g', 0,
    's', 'e', 't', 'U', 's', 'e', 'r', 'T', 'r', 'i', 's', 't', 'a', 't', 'e', 0,
    's', 'e', 't', 'A', 'u', 't', 'o', 'T', 'r', 'i', 's', 't', 'a', 't', 'e', 0,
    'e', 'm', 'i', 't', 'D', 'a', 't', 'a', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'Q', 'S', 'e', 's', 's', 'i', 'o', 'n', 'M', 'a', 'n', 'a', 'g', 'e', 'r', 0,
    'g', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'v', 'i', 'r', 't', 'u', 'a', 'l', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 0,
    'v', 'i', 'r', 't', 'u', 'a', 'l', 'S', 'i', 'b', 'l', 'i', 'n', 'g', 's', 0,
    'u', 'n', 'p', 'r', 'e', 'm', 'u', 'l', 't', 'i', 'p', 'l', 'i', 'e', 'd', 0,
    'f', 'r', 'o', 'm', 'E', 'u', 'l', 'e', 'r', 'A', 'n', 'g', 'l', 'e', 's', 0,
    'g', 'e', 't', 'A', 'x', 'i', 's', 'A', 'n', 'd', 'A', 'n', 'g', 'l', 'e', 0,
    'f', 'r', 'o', 'm', 'I', 'm', 'a', 'g', 'e', 'R', 'e', 'a', 'd', 'e', 'r', 0,
    'q', 'P', 'i', 'x', 'e', 'l', 'F', 'o', 'r', 'm', 'a', 't', 'Y', 'u', 'v', 0,
    'q', 'P', 'i', 'x', 'e', 'l', 'F', 'o', 'r', 'm', 'a', 't', 'H', 's', 'v', 0,
    'q', 'P', 'i', 'x', 'e', 'l', 'F', 'o', 'r', 'm', 'a', 't', 'H', 's', 'l', 0,
    'd', 'e', 'f', 'i', 'n', 'e', 'I', 'O', 'H', 'a', 'n', 'd', 'l', 'e', 'r', 0,
    'p', 'l', 'a', 'c', 'e', 'h', 'o', 'l', 'd', 'e', 'r', 'T', 'e', 'x', 't', 0,
    'h', 'i', 'g', 'h', 'l', 'i', 'g', 'h', 't', 'e', 'd', 'T', 'e', 'x', 't', 0,
    'P', 'l', 'a', 'c', 'e', 'h', 'o', 'l', 'd', 'e', 'r', 'T', 'e', 'x', 't', 0,
    'H', 'i', 'g', 'h', 'l', 'i', 'g', 'h', 't', 'e', 'd', 'T', 'e', 'x', 't', 0,
    'p', 'e', 'r', 'c', 'e', 'n', 't', 'A', 't', 'L', 'e', 'n', 'g', 't', 'h', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'b', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 'B', 'r', 'u', 's', 'h', 0,
    'D', 'i', 'r', 't', 'y', 'C', 'l', 'i', 'p', 'R', 'e', 'g', 'i', 'o', 'n', 0,
    'D', 'i', 'r', 't', 'y', 'B', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 0,
    'C', 'o', 'n', 's', 't', 'a', 'n', 't', 'O', 'p', 'a', 'c', 'i', 't', 'y', 0,
    'P', 'd', 'm', 'P', 'h', 'y', 's', 'i', 'c', 'a', 'l', 'D', 'p', 'i', 'Y', 0,
    'P', 'd', 'm', 'P', 'h', 'y', 's', 'i', 'c', 'a', 'l', 'D', 'p', 'i', 'X', 0,
    'd', 'r', 'a', 'w', 'R', 'o', 'u', 'n', 'd', 'e', 'd', 'R', 'e', 'c', 't', 0,
    'd', 'e', 'v', 'i', 'c', 'e', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 0,
    'd', 'r', 'a', 'w', 'T', 'i', 'l', 'e', 'd', 'P', 'i', 'x', 'm', 'a', 'p', 0,
    'c', 'o', 'm', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', 0,
    'd', 'e', 'f', 'i', 'n', 'i', 't', 'i', 'o', 'n', 'U', 'n', 'i', 't', 's', 0,
    'Q', 'P', 'a', 'g', 'e', 'S', 'i', 'z', 'e', ':', ':', 'U', 'n', 'i', 't', 0,
    'p', 'a', 'i', 'n', 't', 'R', 'e', 'c', 't', 'P', 'i', 'x', 'e', 'l', 's', 0,
    'p', 'a', 'i', 'n', 't', 'R', 'e', 'c', 't', 'P', 'o', 'i', 'n', 't', 's', 0,
    's', 'e', 't', 'B', 'o', 't', 't', 'o', 'm', 'M', 'a', 'r', 'g', 'i', 'n', 0,
    'E', 'n', 'v', 'e', 'l', 'o', 'p', 'e', 'I', 't', 'a', 'l', 'i', 'a', 'n', 0,
    'E', 'n', 'v', 'e', 'l', 'o', 'p', 'e', 'M', 'o', 'n', 'a', 'r', 'c', 'h', 0,
    'g', 'r', 'a', 'b', 'F', 'r', 'a', 'm', 'e', 'b', 'u', 'f', 'f', 'e', 'r', 0,
    'N', 'o', 'P', 'a', 'r', 't', 'i', 'a', 'l', 'U', 'p', 'd', 'a', 't', 'e', 0,
    's', 'o', 'u', 'r', 'c', 'e', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 0,
    't', 'a', 'r', 'g', 'e', 't', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 0,
    'g', 'e', 'n', 'e', 'r', 'a', 't', 'e', 'M', 'i', 'p', 'M', 'a', 'p', 's', 0,
    's', 'e', 't', 'M', 'i', 'p', 'B', 'a', 's', 'e', 'L', 'e', 'v', 'e', 'l', 0,
    'U', 'I', 'n', 't', '8', '_', 'R', 'G', '3', 'B', '2', '_', 'R', 'e', 'v', 0,
    'U', 'I', 'n', 't', '3', '2', '_', 'R', 'G', '1', '1', 'B', '1', '0', 'F', 0,
    'a', 'l', 'l', 'o', 'c', 'a', 't', 'e', 'S', 't', 'o', 'r', 'a', 'g', 'e', 0,
    'R', 'G', 'B', 'A', '_', 'A', 'S', 'T', 'C', '_', '1', '2', 'x', '1', '2', 0,
    'R', 'G', 'B', 'A', '_', 'A', 'S', 'T', 'C', '_', '1', '2', 'x', '1', '0', 0,
    'R', 'G', 'B', 'A', '_', 'A', 'S', 'T', 'C', '_', '1', '0', 'x', '1', '0', 0,
    'L', 'u', 'm', 'i', 'n', 'a', 'n', 'c', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'S', 'R', 'G', 'B', '_', 'A', 'l', 'p', 'h', 'a', '_', 'D', 'X', 'T', '5', 0,
    'S', 'R', 'G', 'B', '_', 'A', 'l', 'p', 'h', 'a', '_', 'D', 'X', 'T', '3', 0,
    'S', 'R', 'G', 'B', '_', 'A', 'l', 'p', 'h', 'a', '_', 'D', 'X', 'T', '1', 0,
    'B', 'i', 'n', 'd', 'i', 'n', 'g', 'T', 'a', 'r', 'g', 'e', 't', '3', 'D', 0,
    'B', 'i', 'n', 'd', 'i', 'n', 'g', 'T', 'a', 'r', 'g', 'e', 't', '2', 'D', 0,
    'B', 'i', 'n', 'd', 'i', 'n', 'g', 'T', 'a', 'r', 'g', 'e', 't', '1', 'D', 0,
    's', 'e', 't', 'U', 'n', 'i', 'f', 'o', 'r', 'm', 'V', 'a', 'l', 'u', 'e', 0,
    'u', 'n', 'i', 'f', 'o', 'r', 'm', 'L', 'o', 'c', 'a', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'P', 'a', 'i', 'n', 't', 'F', 'l', 'i', 'p', 'p', 'e', 'd', 0,
    'b', 'l', 'i', 't', 'F', 'r', 'a', 'm', 'e', 'b', 'u', 'f', 'f', 'e', 'r', 0,
    'i', 'n', 't', 'e', 'r', 'n', 'a', 'l', '_', 'f', 'o', 'r', 'm', 'a', 't', 0,
    'd', 'i', 's', 'a', 'b', 'l', 'e', 'M', 'e', 's', 's', 'a', 'g', 'e', 's', 0,
    'I', 'n', 'v', 'a', 'l', 'i', 'd', 'S', 'e', 'v', 'e', 'r', 'i', 't', 'y', 0,
    'P', 'e', 'r', 'f', 'o', 'r', 'm', 'a', 'n', 'c', 'e', 'T', 'y', 'p', 'e', 0,
    'P', 'o', 'r', 't', 'a', 'b', 'i', 'l', 'i', 't', 'y', 'T', 'y', 'p', 'e', 0,
    'i', 's', 'L', 'e', 'g', 'a', 'c', 'y', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    's', 'e', 't', 'S', 'h', 'a', 'r', 'e', 'C', 'o', 'n', 't', 'e', 'x', 't', 0,
    'R', 'a', 'n', 'g', 'e', 'I', 'n', 'v', 'a', 'l', 'i', 'd', 'a', 't', 'e', 0,
    's', 'e', 't', 'U', 's', 'a', 'g', 'e', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'P', 'i', 'x', 'e', 'l', 'P', 'a', 'c', 'k', 'B', 'u', 'f', 'f', 'e', 'r', 0,
    's', 'e', 't', 'N', 'a', 't', 'i', 'v', 'e', 'H', 'a', 'n', 'd', 'l', 'e', 0,
    'r', 'e', 'q', 'u', 'e', 's', 't', 'e', 'd', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'l', 'a', 's', 't', 'E', 'r', 'r', 'o', 'r', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'j', 'u', 'm', 'p', 'T', 'o', 'N', 'e', 'x', 't', 'F', 'r', 'a', 'm', 'e', 0,
    'd', 'i', 's', 't', 'a', 'n', 'c', 'e', 'T', 'o', 'P', 'l', 'a', 'n', 'e', 0,
    'D', 'e', 'l', 'e', 't', 'e', 'E', 'n', 'd', 'O', 'f', 'L', 'i', 'n', 'e', 0,
    'D', 'e', 'l', 'e', 't', 'e', 'E', 'n', 'd', 'O', 'f', 'W', 'o', 'r', 'd', 0,
    'S', 'e', 'l', 'e', 'c', 't', 'E', 'n', 'd', 'O', 'f', 'L', 'i', 'n', 'e', 0,
    'M', 'o', 'v', 'e', 'T', 'o', 'E', 'n', 'd', 'O', 'f', 'L', 'i', 'n', 'e', 0,
    'a', 'n', 'c', 'h', 'o', 'r', 'R', 'e', 'c', 't', 'a', 'n', 'g', 'l', 'e', 0,
    'c', 'u', 'r', 's', 'o', 'r', 'R', 'e', 'c', 't', 'a', 'n', 'g', 'l', 'e', 0,
    'b', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 'C', 'o', 'l', 'o', 'r', 0,
    'j', 'u', 'm', 'p', 'T', 'o', 'N', 'e', 'x', 't', 'I', 'm', 'a', 'g', 'e', 0,
    'Q', 'I', 'm', 'a', 'g', 'e', 'I', 'O', 'H', 'a', 'n', 'd', 'l', 'e', 'r', 0,
    'a', 's', 'p', 'e', 'c', 't', 'R', 'a', 't', 'i', 'o', 'M', 'o', 'd', 'e', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'A', 'l', 'p', 'h', 'a', 'M', 'a', 's', 'k', 0,
    'h', 'a', 's', 'A', 'l', 'p', 'h', 'a', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 0,
    'c', 'o', 'n', 'v', 'e', 'r', 't', 'T', 'o', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'F', 'o', 'r', 'm', 'a', 't', '_', 'R', 'G', 'B', 'A', '8', '8', '8', '8', 0,
    'F', 'o', 'r', 'm', 'a', 't', '_', 'R', 'G', 'B', 'X', '8', '8', '8', '8', 0,
    'F', 'o', 'r', 'm', 'a', 't', '_', 'I', 'n', 'd', 'e', 'x', 'e', 'd', '8', 0,
    'd', 'e', 's', 'k', 't', 'o', 'p', 'F', 'i', 'l', 'e', 'N', 'a', 'm', 'e', 0,
    'i', 's', 'S', 'a', 'v', 'i', 'n', 'g', 'S', 'e', 's', 's', 'i', 'o', 'n', 0,
    'l', 'a', 'y', 'o', 'u', 't', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    't', 'o', 'p', 'L', 'e', 'v', 'e', 'l', 'W', 'i', 'n', 'd', 'o', 'w', 's', 0,
    'Q', 'G', 'u', 'i', 'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'B', 'o', 'u', 'n', 'd', 'i', 'n', 'g', 'R', 'e', 'c', 't', 0,
    's', 'e', 't', 'G', 'l', 'y', 'p', 'h', 'I', 'n', 'd', 'e', 'x', 'e', 's', 0,
    'm', 'i', 'n', 'R', 'i', 'g', 'h', 't', 'B', 'e', 'a', 'r', 'i', 'n', 'g', 0,
    'i', 's', 'P', 'r', 'i', 'v', 'a', 't', 'e', 'F', 'a', 'm', 'i', 'l', 'y', 0,
    'P', 'r', 'e', 'f', 'e', 'r', 'N', 'o', 'H', 'i', 'n', 't', 'i', 'n', 'g', 0,
    'A', 'b', 's', 'o', 'l', 'u', 't', 'e', 'S', 'p', 'a', 'c', 'i', 'n', 'g', 0,
    'c', 'a', 'c', 'h', 'e', 'S', 't', 'a', 't', 'i', 's', 't', 'i', 'c', 's', 0,
    'P', 'r', 'e', 'f', 'e', 'r', 'N', 'o', 'S', 'h', 'a', 'p', 'i', 'n', 'g', 0,
    'P', 'r', 'e', 'f', 'e', 'r', 'A', 'n', 't', 'i', 'a', 'l', 'i', 'a', 's', 0,
    's', 'e', 't', 'V', 'i', 'e', 'w', 'p', 'o', 'r', 't', 'S', 'i', 'z', 'e', 0,
    'c', 'o', 'n', 't', 'e', 'n', 't', 'P', 'o', 's', 'R', 'a', 'n', 'g', 'e', 0,
    'Q', 'S', 't', 'a', 't', 'u', 's', 'T', 'i', 'p', 'E', 'v', 'e', 'n', 't', 0,
    'Q', 'D', 'r', 'a', 'g', 'L', 'e', 'a', 'v', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'Q', 'D', 'r', 'a', 'g', 'E', 'n', 't', 'e', 'r', 'E', 'v', 'e', 'n', 't', 0,
    'p', 'o', 's', 's', 'i', 'b', 'l', 'e', 'A', 'c', 't', 'i', 'o', 'n', 's', 0,
    's', 'e', 't', 'C', 'o', 'm', 'm', 'i', 't', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'n', 'a', 't', 'i', 'v', 'e', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'r', 's', 0,
    'u', 'n', 's', 'e', 't', 'U', 'r', 'l', 'H', 'a', 'n', 'd', 'l', 'e', 'r', 0,
    's', 'e', 't', 'C', 'e', 'n', 't', 'e', 'r', 'R', 'a', 'd', 'i', 'u', 's', 0,
    'Q', 'R', 'a', 'd', 'i', 'a', 'l', 'G', 'r', 'a', 'd', 'i', 'e', 'n', 't', 0,
    'Q', 'L', 'i', 'n', 'e', 'a', 'r', 'G', 'r', 'a', 'd', 'i', 'e', 'n', 't', 0,
    'L', 'a', 'n', 'd', 'i', 'n', 'g', 'A', 'i', 'r', 'c', 'r', 'a', 'f', 't', 0,
    'C', 'h', 'e', 'e', 'r', 'f', 'u', 'l', 'C', 'a', 'r', 'a', 'm', 'e', 'l', 0,
    'S', 'a', 'i', 'n', 't', 'P', 'e', 't', 'e', 'r', 's', 'b', 'u', 'r', 'g', 0,
    'C', 'l', 'o', 'u', 'd', 'y', 'K', 'n', 'o', 'x', 'v', 'i', 'l', 'l', 'e', 0,
    'Q', 'G', 'r', 'a', 'd', 'i', 'e', 'n', 't', ':', ':', 'T', 'y', 'p', 'e', 0,
    's', 'e', 't', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'I', 'm', 'a', 'g', 'e', 0,
    'd', 'o', 'c', 'u', 'm', 'e', 'n', 't', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'U', 'n', 's', 'i', 'g', 'n', 'e', 'd', 'I', 'n', 't', 'e', 'g', 'e', 'r', 0,
    'c', 'a', 'n', 'D', 'r', 'o', 'p', 'M', 'i', 'm', 'e', 'D', 'a', 't', 'a', 0,
    'Q', 'V', 'e', 'c', 't', 'o', 'r', '<', 'Q', 'R', 'e', 'c', 't', '>', 0,
    'Q', 'V', 'e', 'c', 't', 'o', 'r', '<', 'Q', 'L', 'i', 'n', 'e', '>', 0,
    'Q', 'V', 'e', 'c', 't', 'o', 'r', '<', 'Q', 'S', 'i', 'z', 'e', '>', 0,
    'Q', 'V', 'e', 'c', 't', 'o', 'r', '<', 'q', 'r', 'e', 'a', 'l', '>', 0,
    'Q', 'V', 'e', 'c', 't', 'o', 'r', '<', 'f', 'l', 'o', 'a', 't', '>', 0,
    'o', 'p', 'a', 'c', 'i', 't', 'y', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'm', 'o', 'u', 's', 'e', 'M', 'o', 'v', 'e', 'E', 'v', 'e', 'n', 't', 0,
    's', 'h', 'o', 'w', 'F', 'u', 'l', 'l', 'S', 'c', 'r', 'e', 'e', 'n', 0,
    's', 'e', 't', 'M', 'a', 'x', 'i', 'm', 'u', 'm', 'S', 'i', 'z', 'e', 0,
    's', 'e', 't', 'M', 'i', 'n', 'i', 'm', 'u', 'm', 'S', 'i', 'z', 'e', 0,
    's', 'e', 't', 'W', 'i', 'n', 'd', 'o', 'w', 'S', 't', 'a', 't', 'e', 0,
    's', 'e', 't', 'S', 'u', 'r', 'f', 'a', 'c', 'e', 'T', 'y', 'p', 'e', 0,
    'd', 'i', 's', 't', 'a', 'n', 'c', 'e', 'T', 'o', 'L', 'i', 'n', 'e', 0,
    'M', 'o', 'u', 's', 'e', 'E', 'm', 'u', 'l', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'T', 'e', 'x', 't', 'T', 'a', 'b', 'l', 'e', 'C', 'e', 'l', 'l', 0,
    'S', 'u', 'p', 'p', 'r', 'e', 's', 's', 'C', 'o', 'l', 'o', 'r', 's', 0,
    's', 'e', 't', 'F', 'r', 'a', 'm', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'S', 'k', 'i', 'p', 'C', 'h', 'a', 'r', 'a', 'c', 't', 'e', 'r', 's', 0,
    's', 'e', 't', 'P', 'r', 'e', 'e', 'd', 'i', 't', 'A', 'r', 'e', 'a', 0,
    's', 'e', 't', 'L', 'e', 'f', 't', 'P', 'a', 'd', 'd', 'i', 'n', 'g', 0,
    'h', 'e', 'a', 'd', 'e', 'r', 'R', 'o', 'w', 'C', 'o', 'u', 'n', 't', 0,
    's', 'e', 't', 'C', 'e', 'l', 'l', 'P', 'a', 'd', 'd', 'i', 'n', 'g', 0,
    's', 'e', 't', 'C', 'e', 'l', 'l', 'S', 'p', 'a', 'c', 'i', 'n', 'g', 0,
    's', 'e', 't', 'B', 'o', 'r', 'd', 'e', 'r', 'S', 't', 'y', 'l', 'e', 0,
    's', 'e', 't', 'B', 'o', 'r', 'd', 'e', 'r', 'B', 'r', 'u', 's', 'h', 0,
    'L', 'i', 's', 't', 'U', 'p', 'p', 'e', 'r', 'R', 'o', 'm', 'a', 'n', 0,
    'L', 'i', 's', 't', 'L', 'o', 'w', 'e', 'r', 'R', 'o', 'm', 'a', 'n', 0,
    'L', 'i', 's', 't', 'U', 'p', 'p', 'e', 'r', 'A', 'l', 'p', 'h', 'a', 0,
    'L', 'i', 's', 't', 'L', 'o', 'w', 'e', 'r', 'A', 'l', 'p', 'h', 'a', 0,
    'l', 'i', 'n', 'e', 'H', 'e', 'i', 'g', 'h', 't', 'T', 'y', 'p', 'e', 0,
    's', 'e', 't', 'F', 'o', 'n', 't', 'S', 't', 'r', 'e', 't', 'c', 'h', 0,
    's', 'e', 't', 'F', 'o', 'n', 't', 'K', 'e', 'r', 'n', 'i', 'n', 'g', 0,
    's', 'e', 't', 'A', 'n', 'c', 'h', 'o', 'r', 'N', 'a', 'm', 'e', 's', 0,
    'u', 'n', 'd', 'e', 'r', 'l', 'i', 'n', 'e', 'S', 't', 'y', 'l', 'e', 0,
    's', 'e', 't', 'T', 'e', 'x', 't', 'O', 'u', 't', 'l', 'i', 'n', 'e', 0,
    'f', 'o', 'n', 't', 'F', 'i', 'x', 'e', 'd', 'P', 'i', 't', 'c', 'h', 0,
    'u', 'n', 'd', 'e', 'r', 'l', 'i', 'n', 'e', 'C', 'o', 'l', 'o', 'r', 0,
    'A', 'l', 'i', 'g', 'n', 'S', 'u', 'b', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'l', 'e', 'n', 'g', 't', 'h', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    's', 't', 'r', 'i', 'n', 'g', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'd', 'o', 'u', 'b', 'l', 'e', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    's', 'e', 't', 'O', 'b', 'j', 'e', 'c', 't', 'I', 'n', 'd', 'e', 'x', 0,
    'L', 'i', 'n', 'e', 'H', 'e', 'i', 'g', 'h', 't', 'T', 'y', 'p', 'e', 0,
    'F', 'r', 'a', 'm', 'e', 'T', 'o', 'p', 'M', 'a', 'r', 'g', 'i', 'n', 0,
    'B', 'l', 'o', 'c', 'k', 'T', 'o', 'p', 'M', 'a', 'r', 'g', 'i', 'n', 0,
    'B', 'l', 'o', 'c', 'k', 'A', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', 0,
    'P', 'a', 'g', 'e', 'B', 'r', 'e', 'a', 'k', '_', 'A', 'u', 't', 'o', 0,
    'V', 'a', 'r', 'i', 'a', 'b', 'l', 'e', 'L', 'e', 'n', 'g', 't', 'h', 0,
    'b', 'a', 's', 'e', 'U', 'r', 'l', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'c', 'h', 'a', 'r', 'a', 'c', 't', 'e', 'r', 'C', 'o', 'u', 'n', 't', 0,
    'd', 'o', 'c', 'u', 'm', 'e', 'n', 't', 'M', 'a', 'r', 'g', 'i', 'n', 0,
    's', 'e', 't', 'I', 'n', 'd', 'e', 'n', 't', 'W', 'i', 'd', 't', 'h', 0,
    'c', 'o', 'n', 't', 'e', 'n', 't', 's', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    's', 'e', 't', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'F', 'o', 'n', 't', 0,
    'F', 'i', 'n', 'd', 'W', 'h', 'o', 'l', 'e', 'W', 'o', 'r', 'd', 's', 0,
    'd', 'o', 'c', 'u', 'm', 'e', 'n', 't', 'L', 'a', 'y', 'o', 'u', 't', 0,
    'b', 'e', 'g', 'i', 'n', 'E', 'd', 'i', 't', 'B', 'l', 'o', 'c', 'k', 0,
    'i', 'n', 's', 'e', 'r', 't', 'F', 'r', 'a', 'g', 'm', 'e', 'n', 't', 0,
    's', 'e', 't', 'B', 'l', 'o', 'c', 'k', 'F', 'o', 'r', 'm', 'a', 't', 0,
    's', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 'S', 't', 'a', 'r', 't', 0,
    's', 'R', 'G', 'B', 'C', 'o', 'l', 'o', 'r', 'S', 'p', 'a', 'c', 'e', 0,
    'r', 'e', 'n', 'd', 'e', 'r', 'a', 'b', 'l', 'e', 'T', 'y', 'p', 'e', 0,
    'b', 'l', 'u', 'e', 'B', 'u', 'f', 'f', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    'Q', 'S', 'u', 'r', 'f', 'a', 'c', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    's', 'u', 'p', 'p', 'o', 'r', 't', 's', 'O', 'p', 'e', 'n', 'G', 'L', 0,
    'i', 's', 'U', 's', 'e', 'r', 'T', 'r', 'i', 's', 't', 'a', 't', 'e', 0,
    'i', 's', 'A', 'u', 't', 'o', 'T', 'r', 'i', 's', 't', 'a', 't', 'e', 0,
    's', 'e', 't', 'D', 'r', 'o', 'p', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    's', 'e', 't', 'D', 'r', 'a', 'g', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'a', 'c', 'c', 'e', 's', 's', 'i', 'b', 'l', 'e', 'T', 'e', 'x', 't', 0,
    's', 'e', 't', 'C', 'o', 'l', 'u', 'm', 'n', 'C', 'o', 'u', 'n', 't', 0,
    'd', 'i', 's', 'c', 'a', 'r', 'd', 'C', 'o', 'm', 'm', 'a', 'n', 'd', 0,
    'r', 'e', 's', 't', 'a', 'r', 't', 'C', 'o', 'm', 'm', 'a', 'n', 'd', 0,
    's', 'e', 't', 'R', 'e', 's', 't', 'a', 'r', 't', 'H', 'i', 'n', 't', 0,
    'q', 'U', 'n', 'p', 'r', 'e', 'm', 'u', 'l', 't', 'i', 'p', 'l', 'y', 0,
    'K', 'e', 'r', 'n', 'e', 'd', 'A', 'd', 'v', 'a', 'n', 'c', 'e', 's', 0,
    'g', 'e', 't', 'E', 'u', 'l', 'e', 'r', 'A', 'n', 'g', 'l', 'e', 's', 0,
    'b', 'r', 'i', 'g', 'h', 't', 'n', 'e', 's', 's', 'S', 'i', 'z', 'e', 0,
    's', 'a', 't', 'u', 'r', 'a', 't', 'i', 'o', 'n', 'S', 'i', 'z', 'e', 0,
    's', 'e', 't', 'D', 'a', 's', 'h', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'c', 'u', 'r', 'v', 'e', 'T', 'h', 'r', 'e', 's', 'h', 'o', 'l', 'd', 0,
    'a', 'd', 'd', 'R', 'o', 'u', 'n', 'd', 'e', 'd', 'R', 'e', 'c', 't', 0,
    's', 'l', 'o', 'p', 'e', 'A', 't', 'P', 'e', 'r', 'c', 'e', 'n', 't', 0,
    'a', 'n', 'g', 'l', 'e', 'A', 't', 'P', 'e', 'r', 'c', 'e', 'n', 't', 0,
    'p', 'o', 'i', 'n', 't', 'A', 't', 'P', 'e', 'r', 'c', 'e', 'n', 't', 0,
    't', 'o', 'F', 'i', 'l', 'l', 'P', 'o', 'l', 'y', 'g', 'o', 'n', 's', 0,
    'C', 'u', 'r', 'v', 'e', 'T', 'o', 'E', 'l', 'e', 'm', 'e', 'n', 't', 0,
    'D', 'i', 'r', 't', 'y', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 0,
    'p', 'a', 'i', 'n', 't', 'i', 'n', 'g', 'A', 'c', 't', 'i', 'v', 'e', 0,
    'd', 'r', 'a', 'w', 'S', 't', 'a', 't', 'i', 'c', 'T', 'e', 'x', 't', 0,
    't', 'e', 's', 't', 'R', 'e', 'n', 'd', 'e', 'r', 'H', 'i', 'n', 't', 0,
    'w', 'o', 'r', 'l', 'd', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 0,
    'r', 'e', 's', 'e', 't', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 0,
    's', 'e', 't', 'R', 'e', 'n', 'd', 'e', 'r', 'H', 'i', 'n', 't', 's', 0,
    's', 'e', 't', 'B', 'r', 'u', 's', 'h', 'O', 'r', 'i', 'g', 'i', 'n', 0,
    'b', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 'M', 'o', 'd', 'e', 0,
    'd', 'e', 'f', 'i', 'n', 'i', 't', 'i', 'o', 'n', 'S', 'i', 'z', 'e', 0,
    'f', 'u', 'l', 'l', 'R', 'e', 'c', 't', 'P', 'i', 'x', 'e', 'l', 's', 0,
    'f', 'u', 'l', 'l', 'R', 'e', 'c', 't', 'P', 'o', 'i', 'n', 't', 's', 0,
    'm', 'a', 'x', 'i', 'm', 'u', 'm', 'M', 'a', 'r', 'g', 'i', 'n', 's', 0,
    'm', 'i', 'n', 'i', 'm', 'u', 'm', 'M', 'a', 'r', 'g', 'i', 'n', 's', 0,
    's', 'e', 't', 'R', 'i', 'g', 'h', 't', 'M', 'a', 'r', 'g', 'i', 'n', 0,
    's', 'e', 't', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 0,
    'i', 's', 'E', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', 'T', 'o', 0,
    's', 'e', 't', 'P', 'a', 'g', 'e', 'M', 'a', 'r', 'g', 'i', 'n', 's', 0,
    'P', 'd', 'f', 'V', 'e', 'r', 's', 'i', 'o', 'n', '_', '1', '_', '6', 0,
    'P', 'd', 'f', 'V', 'e', 'r', 's', 'i', 'o', 'n', '_', 'A', '1', 'b', 0,
    'P', 'd', 'f', 'V', 'e', 'r', 's', 'i', 'o', 'n', '_', '1', '_', '4', 0,
    'E', 'n', 'v', 'e', 'l', 'o', 'p', 'e', 'I', 'n', 'v', 'i', 't', 'e', 0,
    'D', 'o', 'u', 'b', 'l', 'e', 'P', 'o', 's', 't', 'c', 'a', 'r', 'd', 0,
    'u', 'p', 'd', 'a', 't', 'e', 'B', 'e', 'h', 'a', 'v', 'i', 'o', 'r', 0,
    'c', 'o', 'm', 'p', 'a', 'r', 'i', 's', 'o', 'n', 'M', 'o', 'd', 'e', 0,
    'C', 'o', 'm', 'p', 'a', 'r', 'e', 'G', 'r', 'e', 'a', 't', 'e', 'r', 0,
    's', 'e', 't', 'B', 'o', 'r', 'd', 'e', 'r', 'C', 'o', 'l', 'o', 'r', 0,
    'M', 'i', 'r', 'r', 'o', 'r', 'e', 'd', 'R', 'e', 'p', 'e', 'a', 't', 0,
    's', 'e', 't', 'S', 'w', 'i', 'z', 'z', 'l', 'e', 'M', 'a', 's', 'k', 0,
    'r', 'e', 's', 'e', 't', 'B', 'a', 's', 'e', 'L', 'e', 'v', 'e', 'l', 0,
    's', 'e', 't', 'M', 'i', 'p', 'M', 'a', 'x', 'L', 'e', 'v', 'e', 'l', 0,
    'U', 'I', 'n', 't', '3', '2', '_', 'R', 'G', 'B', '1', '0', 'A', '2', 0,
    'U', 'I', 'n', 't', '3', '2', '_', 'R', 'G', 'B', '9', '_', 'E', '5', 0,
    'L', 'u', 'm', 'i', 'n', 'a', 'n', 'c', 'e', 'A', 'l', 'p', 'h', 'a', 0,
    'N', 'o', 'S', 'o', 'u', 'r', 'c', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'R', 'G', 'B', 'A', '_', 'A', 'S', 'T', 'C', '_', '1', '0', 'x', '8', 0,
    'R', 'G', 'B', 'A', '_', 'A', 'S', 'T', 'C', '_', '1', '0', 'x', '6', 0,
    'R', 'G', 'B', 'A', '_', 'A', 'S', 'T', 'C', '_', '1', '0', 'x', '5', 0,
    'R', 'G', 'B', 'A', '8', '_', 'E', 'T', 'C', '2', '_', 'E', 'A', 'C', 0,
    'R', 'G', '1', '1', '_', 'E', 'A', 'C', '_', 'S', 'N', 'o', 'r', 'm', 0,
    'R', 'G', '1', '1', '_', 'E', 'A', 'C', '_', 'U', 'N', 'o', 'r', 'm', 0,
    'R', 'G', '_', 'A', 'T', 'I', '2', 'N', '_', 'S', 'N', 'o', 'r', 'm', 0,
    'R', 'G', '_', 'A', 'T', 'I', '2', 'N', '_', 'U', 'N', 'o', 'r', 'm', 0,
    'b', 'o', 'u', 'n', 'd', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'I', 'd', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'T', 'e', 'x', 't', 'u', 'r', 'e', 0,
    's', 'e', 't', 'I', 'm', 'a', 'g', 'e', 'H', 'e', 'i', 'g', 'h', 't', 0,
    'l', 'o', 'g', 'g', 'e', 'd', 'M', 'e', 's', 's', 'a', 'g', 'e', 's', 0,
    'e', 'n', 'a', 'b', 'l', 'e', 'M', 'e', 's', 's', 'a', 'g', 'e', 's', 0,
    'M', 'e', 'd', 'i', 'u', 'm', 'S', 'e', 'v', 'e', 'r', 'i', 't', 'y', 0,
    'v', 'e', 'r', 's', 'i', 'o', 'n', 'P', 'r', 'o', 'f', 'i', 'l', 'e', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'C', 'o', 'n', 't', 'e', 'x', 't', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'C', 'o', 'n', 't', 'e', 'x', 't', 0,
    'n', 'e', 'x', 't', 'F', 'r', 'a', 'm', 'e', 'D', 'e', 'l', 'a', 'y', 0,
    'l', 'i', 's', 't', 'F', 'r', 'o', 'm', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'S', 'e', 'l', 'e', 'c', 't', 'N', 'e', 'x', 't', 'P', 'a', 'g', 'e', 0,
    'S', 'e', 'l', 'e', 'c', 't', 'N', 'e', 'x', 't', 'L', 'i', 'n', 'e', 0,
    'S', 'e', 'l', 'e', 'c', 't', 'N', 'e', 'x', 't', 'W', 'o', 'r', 'd', 0,
    'S', 'e', 'l', 'e', 'c', 't', 'N', 'e', 'x', 't', 'C', 'h', 'a', 'r', 0,
    'M', 'o', 'v', 'e', 'T', 'o', 'N', 'e', 'x', 't', 'P', 'a', 'g', 'e', 0,
    'M', 'o', 'v', 'e', 'T', 'o', 'N', 'e', 'x', 't', 'L', 'i', 'n', 'e', 0,
    'M', 'o', 'v', 'e', 'T', 'o', 'N', 'e', 'x', 't', 'W', 'o', 'r', 'd', 0,
    'M', 'o', 'v', 'e', 'T', 'o', 'N', 'e', 'x', 't', 'C', 'h', 'a', 'r', 0,
    'v', 'i', 's', 'i', 'b', 'l', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'i', 'n', 'p', 'u', 't', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'o', 'p', 't', 'i', 'm', 'i', 'z', 'e', 'd', 'W', 'r', 'i', 't', 'e', 0,
    's', 'e', 't', 'C', 'o', 'm', 'p', 'r', 'e', 's', 's', 'i', 'o', 'n', 0,
    't', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'a', 't', 'i', 'o', 'n', 0,
    's', 'c', 'a', 'l', 'e', 'd', 'C', 'l', 'i', 'p', 'R', 'e', 'c', 't', 0,
    'n', 'e', 'x', 't', 'I', 'm', 'a', 'g', 'e', 'D', 'e', 'l', 'a', 'y', 0,
    's', 'u', 'p', 'p', 'o', 'r', 't', 's', 'O', 'p', 't', 'i', 'o', 'n', 0,
    's', 'c', 'a', 'l', 'e', 'd', 'T', 'o', 'H', 'e', 'i', 'g', 'h', 't', 0,
    'F', 'o', 'r', 'm', 'a', 't', '_', 'M', 'o', 'n', 'o', 'L', 'S', 'B', 0,
    'F', 'o', 'r', 'm', 'a', 't', '_', 'I', 'n', 'v', 'a', 'l', 'i', 'd', 0,
    'Q', 'I', 'm', 'a', 'g', 'e', ':', ':', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'S', 'i', 'z', 'e', 's', 0,
    'p', 'a', 'l', 'e', 't', 't', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'o', 'v', 'e', 'r', 'r', 'i', 'd', 'e', 'C', 'u', 'r', 's', 'o', 'r', 0,
    's', 'e', 't', 'R', 'i', 'g', 'h', 't', 'T', 'o', 'L', 'e', 'f', 't', 0,
    'm', 'i', 'n', 'L', 'e', 'f', 't', 'B', 'e', 'a', 'r', 'i', 'n', 'g', 0,
    'w', 'r', 'i', 't', 'i', 'n', 'g', 'S', 'y', 's', 't', 'e', 'm', 's', 0,
    'c', 'a', 'p', 'i', 't', 'a', 'l', 'i', 'z', 'a', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'W', 'o', 'r', 'd', 'S', 'p', 'a', 'c', 'i', 'n', 'g', 0,
    'l', 'a', 's', 't', 'R', 'e', 's', 'o', 'r', 't', 'F', 'o', 'n', 't', 0,
    'E', 'x', 't', 'r', 'a', 'C', 'o', 'n', 'd', 'e', 'n', 's', 'e', 'd', 0,
    'U', 'l', 't', 'r', 'a', 'C', 'o', 'n', 'd', 'e', 'n', 's', 'e', 'd', 0,
    'Q', 'F', 'o', 'n', 't', ':', ':', 'S', 't', 'r', 'e', 't', 'c', 'h', 0,
    'S', 'u', 'r', 'f', 'a', 'c', 'e', 'C', 'r', 'e', 'a', 't', 'e', 'd', 0,
    'S', 'c', 'r', 'o', 'l', 'l', 'F', 'i', 'n', 'i', 's', 'h', 'e', 'd', 0,
    's', 't', 'a', 'r', 't', 'S', 'c', 'r', 'e', 'e', 'n', 'P', 'o', 's', 0,
    'Q', 'S', 'h', 'o', 'r', 't', 'c', 'u', 't', 'E', 'v', 'e', 'n', 't', 0,
    'Q', 'F', 'i', 'l', 'e', 'O', 'p', 'e', 'n', 'E', 'v', 'e', 'n', 't', 0,
    'Q', 'D', 'r', 'a', 'g', 'M', 'o', 'v', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'p', 'r', 'o', 'p', 'o', 's', 'e', 'd', 'A', 'c', 't', 'i', 'o', 'n', 0,
    'Q', 'I', 'c', 'o', 'n', 'D', 'r', 'a', 'g', 'E', 'v', 'e', 'n', 't', 0,
    'n', 'a', 't', 'i', 'v', 'e', 'S', 'c', 'a', 'n', 'C', 'o', 'd', 'e', 0,
    'U', 'n', 'k', 'n', 'o', 'w', 'n', 'P', 'o', 'i', 'n', 't', 'e', 'r', 0,
    'R', 'o', 't', 'a', 't', 'i', 'o', 'n', 'S', 't', 'y', 'l', 'u', 's', 0,
    'o', 'w', 'n', 's', 'F', 'i', 'n', 'd', 'B', 'u', 'f', 'f', 'e', 'r', 0,
    's', 'e', 't', 'F', 'o', 'c', 'a', 'l', 'R', 'a', 'd', 'i', 'u', 's', 0,
    'c', 'o', 'o', 'r', 'd', 'i', 'n', 'a', 't', 'e', 'M', 'o', 'd', 'e', 0,
    'S', 't', 'r', 'i', 'c', 't', 'N', 'o', 'v', 'e', 'm', 'b', 'e', 'r', 0,
    'S', 'l', 'e', 'e', 'p', 'l', 'e', 's', 's', 'N', 'i', 'g', 'h', 't', 0,
    'M', 'i', 'l', 'l', 'e', 'n', 'n', 'i', 'u', 'm', 'P', 'i', 'n', 'e', 0,
    'C', 'o', 'n', 'f', 'i', 'd', 'e', 'n', 't', 'C', 'l', 'o', 'u', 'd', 0,
    'O', 'c', 't', 'o', 'b', 'e', 'r', 'S', 'i', 'l', 'e', 'n', 'c', 'e', 0,
    'P', 'u', 'r', 'p', 'l', 'e', 'D', 'i', 'v', 'i', 's', 'i', 'o', 'n', 0,
    'E', 'v', 'e', 'r', 'l', 'a', 's', 't', 'i', 'n', 'g', 'S', 'k', 'y', 0,
    'h', 's', 'l', 'S', 'a', 't', 'u', 'r', 'a', 't', 'i', 'o', 'n', 'F', 0,
    'h', 's', 'v', 'S', 'a', 't', 'u', 'r', 'a', 't', 'i', 'o', 'n', 'F', 0,
    's', 't', 'a', 't', 'i', 'c', 'C', 'o', 'n', 't', 'e', 'n', 't', 's', 0,
    's', 'e', 't', 'P', 'a', 'i', 'n', 't', 'D', 'e', 'v', 'i', 'c', 'e', 0,
    'c', 'u', 'r', 's', 'o', 'r', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'c', 'l', 'e', 'a', 'r', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'D', 'e', 's', 'c', 'r', 'i', 'p', 't', 'i', 'o', 'n', 0,
    'D', 'a', 's', 'h', 'D', 'o', 't', 'D', 'o', 't', 'L', 'i', 'n', 'e', 0,
    'Q', 'V', 'e', 'c', 't', 'o', 'r', '<', 'u', 'i', 'n', 't', '>', 0,
    's', 'e', 't', 'V', 'i', 's', 'i', 'b', 'i', 'l', 'i', 't', 'y', 0,
    'k', 'e', 'y', 'P', 'r', 'e', 's', 's', 'E', 'v', 'e', 'n', 't', 0,
    'f', 'o', 'c', 'u', 's', 'O', 'u', 't', 'E', 'v', 'e', 'n', 't', 0,
    'h', 'e', 'i', 'g', 'h', 't', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'r', 'e', 'q', 'u', 'e', 's', 't', 'U', 'p', 'd', 'a', 't', 'e', 0,
    's', 'h', 'o', 'w', 'M', 'a', 'x', 'i', 'm', 'i', 'z', 'e', 'd', 0,
    's', 'h', 'o', 'w', 'M', 'i', 'n', 'i', 'm', 'i', 'z', 'e', 'd', 0,
    'm', 'a', 'p', 'F', 'r', 'o', 'm', 'G', 'l', 'o', 'b', 'a', 'l', 0,
    'f', 'r', 'a', 'm', 'e', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'f', 'r', 'a', 'm', 'e', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 0,
    's', 'i', 'z', 'e', 'I', 'n', 'c', 'r', 'e', 'm', 'e', 'n', 't', 0,
    'm', 'a', 'x', 'i', 'm', 'u', 'm', 'H', 'e', 'i', 'g', 'h', 't', 0,
    'm', 'i', 'n', 'i', 'm', 'u', 'm', 'H', 'e', 'i', 'g', 'h', 't', 0,
    'Q', 'I', 'n', 't', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'o', 'r', 0,
    'f', 'r', 'o', 'm', 'T', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', 0,
    'i', 's', 'T', 'r', 'a', 'n', 's', 'l', 'a', 't', 'i', 'n', 'g', 0,
    'r', 'o', 't', 'a', 't', 'e', 'R', 'a', 'd', 'i', 'a', 'n', 's', 0,
    'a', 'p', 'p', 'e', 'n', 'd', 'C', 'o', 'l', 'u', 'm', 'n', 's', 0,
    'Q', 'T', 'e', 'x', 't', 'F', 'r', 'a', 'g', 'm', 'e', 'n', 't', 0,
    'f', 'i', 'r', 's', 't', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'b', 'l', 'o', 'c', 'k', 'I', 'n', 's', 'e', 'r', 't', 'e', 'd', 0,
    's', 'e', 't', 'N', 'u', 'm', 'C', 'o', 'l', 'u', 'm', 'n', 's', 0,
    'b', 'o', 't', 't', 'o', 'm', 'P', 'a', 'd', 'd', 'i', 'n', 'g', 0,
    's', 'e', 't', 'T', 'o', 'p', 'P', 'a', 'd', 'd', 'i', 'n', 'g', 0,
    's', 'e', 't', 'L', 'i', 'n', 'e', 'H', 'e', 'i', 'g', 'h', 't', 0,
    's', 'e', 't', 'T', 'e', 'x', 't', 'I', 'n', 'd', 'e', 'n', 't', 0,
    'f', 'o', 'n', 't', 'S', 't', 'y', 'l', 'e', 'H', 'i', 'n', 't', 0,
    'W', 'a', 'v', 'e', 'U', 'n', 'd', 'e', 'r', 'l', 'i', 'n', 'e', 0,
    'D', 'a', 's', 'h', 'U', 'n', 'd', 'e', 'r', 'l', 'i', 'n', 'e', 0,
    's', 'e', 't', 'A', 'n', 'c', 'h', 'o', 'r', 'H', 'r', 'e', 'f', 0,
    'f', 'o', 'n', 't', 'S', 't', 'r', 'i', 'k', 'e', 'O', 'u', 't', 0,
    'f', 'o', 'n', 't', 'U', 'n', 'd', 'e', 'r', 'l', 'i', 'n', 'e', 0,
    's', 'e', 't', 'F', 'o', 'n', 't', 'I', 't', 'a', 'l', 'i', 'c', 0,
    's', 'e', 't', 'F', 'o', 'n', 't', 'W', 'e', 'i', 'g', 'h', 't', 0,
    'f', 'o', 'n', 't', 'P', 'o', 'i', 'n', 't', 'S', 'i', 'z', 'e', 0,
    's', 'e', 't', 'F', 'o', 'n', 't', 'F', 'a', 'm', 'i', 'l', 'y', 0,
    's', 'e', 't', 'O', 'b', 'j', 'e', 'c', 't', 'T', 'y', 'p', 'e', 0,
    't', 'o', 'F', 'r', 'a', 'm', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    't', 'o', 'T', 'a', 'b', 'l', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    't', 'o', 'B', 'l', 'o', 'c', 'k', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'i', 's', 'T', 'a', 'b', 'l', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'i', 's', 'I', 'm', 'a', 'g', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'i', 's', 'F', 'r', 'a', 'm', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'i', 's', 'B', 'l', 'o', 'c', 'k', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'b', 'r', 'u', 's', 'h', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'c', 'o', 'l', 'o', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'c', 'l', 'e', 'a', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'F', 'o', 'n', 't', 'P', 'i', 'x', 'e', 'l', 'S', 'i', 'z', 'e', 0,
    'f', 'r', 'o', 'm', 'P', 'l', 'a', 'i', 'n', 'T', 'e', 'x', 't', 0,
    'u', 'n', 'd', 'o', 'A', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 0,
    'r', 'e', 'd', 'o', 'A', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 0,
    'I', 'm', 'a', 'g', 'e', 'R', 'e', 's', 'o', 'u', 'r', 'c', 'e', 0,
    'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 'T', 'i', 't', 'l', 'e', 0,
    'Q', 'T', 'e', 'x', 't', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 0,
    's', 'e', 't', 'C', 'h', 'a', 'r', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'N', 'e', 'x', 't', 'C', 'h', 'a', 'r', 'a', 'c', 't', 'e', 'r', 0,
    'P', 'r', 'e', 'v', 'i', 'o', 'u', 's', 'B', 'l', 'o', 'c', 'k', 0,
    's', 'e', 't', 'C', 'o', 'l', 'o', 'r', 'S', 'p', 'a', 'c', 'e', 0,
    'r', 'e', 'd', 'B', 'u', 'f', 'f', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    'S', 't', 'e', 'r', 'e', 'o', 'B', 'u', 'f', 'f', 'e', 'r', 's', 0,
    'V', 'u', 'l', 'k', 'a', 'n', 'S', 'u', 'r', 'f', 'a', 'c', 'e', 0,
    'O', 'p', 'e', 'n', 'V', 'G', 'S', 'u', 'r', 'f', 'a', 'c', 'e', 0,
    'O', 'p', 'e', 'n', 'G', 'L', 'S', 'u', 'r', 'f', 'a', 'c', 'e', 0,
    'R', 'a', 's', 't', 'e', 'r', 'S', 'u', 'r', 'f', 'a', 'c', 'e', 0,
    's', 't', 'a', 'r', 't', 'D', 'r', 'a', 'g', 'T', 'i', 'm', 'e', 0,
    's', 'e', 't', 'T', 'e', 'x', 't', 'O', 'p', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'T', 'e', 'x', 't', 'F', 'o', 'r', 'm', 'a', 't', 0,
    's', 'e', 't', 'C', 'h', 'e', 'c', 'k', 'S', 't', 'a', 't', 'e', 0,
    's', 'e', 't', 'F', 'o', 'r', 'e', 'g', 'r', 'o', 'u', 'n', 'd', 0,
    'i', 's', 'D', 'r', 'o', 'p', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'i', 's', 'D', 'r', 'a', 'g', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    's', 'e', 't', 'S', 'e', 'l', 'e', 'c', 't', 'a', 'b', 'l', 'e', 0,
    't', 'e', 'x', 't', 'A', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', 0,
    'Q', 'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'I', 't', 'e', 'm', 0,
    'c', 'l', 'e', 'a', 'r', 'I', 't', 'e', 'm', 'D', 'a', 't', 'a', 0,
    'i', 't', 'e', 'm', 'P', 'r', 'o', 't', 'o', 't', 'y', 'p', 'e', 0,
    'i', 'n', 'd', 'e', 'x', 'F', 'r', 'o', 'm', 'I', 't', 'e', 'm', 0,
    'i', 't', 'e', 'm', 'F', 'r', 'o', 'm', 'I', 'n', 'd', 'e', 'x', 0,
    'r', 'e', 'q', 'u', 'e', 's', 't', 'P', 'h', 'a', 's', 'e', '2', 0,
    'R', 'e', 's', 't', 'a', 'r', 't', 'A', 'n', 'y', 'w', 'a', 'y', 0,
    'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'S', 'i', 'z', 'e', 0,
    'i', 's', 'T', 'r', 'a', 'n', 's', 'p', 'a', 'r', 'e', 'n', 't', 0,
    'l', 'i', 'n', 'e', 'T', 'h', 'i', 'c', 'k', 'n', 'e', 's', 's', 0,
    'Q', 'R', 'a', 's', 't', 'e', 'r', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    't', 'o', 'E', 'u', 'l', 'e', 'r', 'A', 'n', 'g', 'l', 'e', 's', 0,
    'f', 'r', 'o', 'm', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'r', 'o', 't', 'a', 't', 'e', 'd', 'V', 'e', 'c', 't', 'o', 'r', 0,
    'l', 'e', 'n', 'g', 't', 'h', 'S', 'q', 'u', 'a', 'r', 'e', 'd', 0,
    'c', 'o', 'n', 't', 'a', 'i', 'n', 's', 'P', 'o', 'i', 'n', 't', 0,
    's', 'e', 't', 'C', 'a', 'c', 'h', 'e', 'L', 'i', 'm', 'i', 't', 0,
    'a', 'l', 'p', 'h', 'a', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'l', 'i', 'g', 'h', 't', 'n', 'e', 's', 's', 'S', 'i', 'z', 'e', 0,
    'F', 'l', 'o', 'a', 't', 'i', 'n', 'g', 'P', 'o', 'i', 'n', 't', 0,
    'U', 'n', 's', 'i', 'g', 'n', 'e', 'd', 'S', 'h', 'o', 'r', 't', 0,
    'o', 'u', 't', 'p', 'u', 't', 'F', 'o', 'r', 'm', 'a', 't', 's', 0,
    'p', 'i', 'c', 't', 'u', 'r', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    's', 'e', 't', 'P', 'a', 'r', 'a', 'm', 'e', 't', 'e', 'r', 's', 0,
    'f', 'o', 'r', 'm', 'a', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    's', 'e', 't', 'P', 'd', 'f', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    's', 'e', 't', 'R', 'e', 's', 'o', 'l', 'u', 't', 'i', 'o', 'n', 0,
    'a', 'l', 't', 'e', 'r', 'n', 'a', 't', 'e', 'B', 'a', 's', 'e', 0,
    's', 'e', 't', 'C', 'o', 'l', 'o', 'r', 'G', 'r', 'o', 'u', 'p', 0,
    'A', 'l', 't', 'e', 'r', 'n', 'a', 't', 'e', 'B', 'a', 's', 'e', 0,
    's', 'e', 't', 'D', 'a', 's', 'h', 'O', 'f', 'f', 's', 'e', 't', 0,
    's', 'e', 't', 'M', 'i', 't', 'e', 'r', 'L', 'i', 'm', 'i', 't', 0,
    't', 'o', 'F', 'i', 'l', 'l', 'P', 'o', 'l', 'y', 'g', 'o', 'n', 0,
    'L', 'i', 'n', 'e', 'T', 'o', 'E', 'l', 'e', 'm', 'e', 'n', 't', 0,
    'M', 'o', 'v', 'e', 'T', 'o', 'E', 'l', 'e', 'm', 'e', 'n', 't', 0,
    'i', 's', 'C', 'l', 'i', 'p', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'c', 'l', 'i', 'p', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'W', 'i', 'n', 'd', 'o', 'w', 'S', 'y', 's', 't', 'e', 'm', 0,
    'D', 'i', 'r', 't', 'y', 'C', 'l', 'i', 'p', 'P', 'a', 't', 'h', 0,
    'R', 'a', 's', 't', 'e', 'r', 'O', 'p', 'M', 'o', 'd', 'e', 's', 0,
    's', 'e', 't', 'R', 'e', 'n', 'd', 'e', 'r', 'H', 'i', 'n', 't', 0,
    's', 'e', 't', 'C', 'l', 'i', 'p', 'R', 'e', 'g', 'i', 'o', 'n', 0,
    's', 'e', 't', 'B', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 0,
    'm', 'a', 'r', 'g', 'i', 'n', 's', 'P', 'i', 'x', 'e', 'l', 's', 0,
    'm', 'a', 'r', 'g', 'i', 'n', 's', 'P', 'o', 'i', 'n', 't', 's', 0,
    's', 'e', 't', 'L', 'e', 'f', 't', 'M', 'a', 'r', 'g', 'i', 'n', 0,
    's', 'e', 't', 'P', 'a', 'g', 'e', 'L', 'a', 'y', 'o', 'u', 't', 0,
    's', 'e', 't', 'P', 'a', 'g', 'e', 'S', 'i', 'z', 'e', 'M', 'M', 0,
    'E', 'n', 'v', 'e', 'l', 'o', 'p', 'e', 'P', 'r', 'c', '1', '0', 0,
    'E', 'n', 'v', 'e', 'l', 'o', 'p', 'e', 'K', 'a', 'k', 'u', '3', 0,
    'E', 'n', 'v', 'e', 'l', 'o', 'p', 'e', 'K', 'a', 'k', 'u', '2', 0,
    'E', 'n', 'v', 'e', 'l', 'o', 'p', 'e', 'C', 'h', 'o', 'u', '4', 0,
    'E', 'n', 'v', 'e', 'l', 'o', 'p', 'e', 'C', 'h', 'o', 'u', '3', 0,
    'F', 'a', 'n', 'F', 'o', 'l', 'd', 'G', 'e', 'r', 'm', 'a', 'n', 0,
    'I', 'm', 'p', 'e', 'r', 'i', 'a', 'l', '1', '5', 'x', '1', '1', 0,
    'I', 'm', 'p', 'e', 'r', 'i', 'a', 'l', '1', '2', 'x', '1', '1', 0,
    'I', 'm', 'p', 'e', 'r', 'i', 'a', 'l', '1', '0', 'x', '1', '4', 0,
    'I', 'm', 'p', 'e', 'r', 'i', 'a', 'l', '1', '0', 'x', '1', '3', 0,
    'I', 'm', 'p', 'e', 'r', 'i', 'a', 'l', '1', '0', 'x', '1', '1', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'O', 'r', 'i', 'g', 'i', 'n', 'T', 'o', 'p', 'L', 'e', 'f', 't', 0,
    'C', 'o', 'm', 'p', 'a', 'r', 'e', 'A', 'l', 'w', 'a', 'y', 's', 0,
    'C', 'l', 'a', 'm', 'p', 'T', 'o', 'B', 'o', 'r', 'd', 'e', 'r', 0,
    'm', 'i', 'n', 'M', 'a', 'g', 'F', 'i', 'l', 't', 'e', 'r', 's', 0,
    'm', 'i', 'p', 'L', 'e', 'v', 'e', 'l', 'R', 'a', 'n', 'g', 'e', 0,
    'T', 'e', 'x', 't', 'u', 'r', 'e', 'B', 'u', 'f', 'f', 'e', 'r', 0,
    'T', 'e', 'x', 't', 'u', 'r', 'e', 'A', 'r', 'r', 'a', 'y', 's', 0,
    'U', 'I', 'n', 't', '1', '6', '_', 'R', '5', 'G', '6', 'B', '5', 0,
    'U', 'I', 'n', 't', '1', '6', '_', 'R', 'G', 'B', '5', 'A', '1', 0,
    'i', 's', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'V', 'i', 'e', 'w', 0,
    'R', 'G', 'B', 'A', '_', 'A', 'S', 'T', 'C', '_', '8', 'x', '8', 0,
    'R', 'G', 'B', 'A', '_', 'A', 'S', 'T', 'C', '_', '8', 'x', '6', 0,
    'R', 'G', 'B', 'A', '_', 'A', 'S', 'T', 'C', '_', '8', 'x', '5', 0,
    'R', 'G', 'B', 'A', '_', 'A', 'S', 'T', 'C', '_', '6', 'x', '6', 0,
    'R', 'G', 'B', 'A', '_', 'A', 'S', 'T', 'C', '_', '6', 'x', '5', 0,
    'R', 'G', 'B', 'A', '_', 'A', 'S', 'T', 'C', '_', '5', 'x', '5', 0,
    'R', 'G', 'B', 'A', '_', 'A', 'S', 'T', 'C', '_', '5', 'x', '4', 0,
    'R', 'G', 'B', 'A', '_', 'A', 'S', 'T', 'C', '_', '4', 'x', '4', 0,
    'R', '1', '1', '_', 'E', 'A', 'C', '_', 'S', 'N', 'o', 'r', 'm', 0,
    'R', '1', '1', '_', 'E', 'A', 'C', '_', 'U', 'N', 'o', 'r', 'm', 0,
    'S', 'R', 'G', 'B', '_', 'B', 'P', '_', 'U', 'N', 'o', 'r', 'm', 0,
    'R', '_', 'A', 'T', 'I', '1', 'N', '_', 'S', 'N', 'o', 'r', 'm', 0,
    'R', '_', 'A', 'T', 'I', '1', 'N', '_', 'U', 'N', 'o', 'r', 'm', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'S', 'h', 'a', 'd', 'e', 'r', 0,
    's', 'e', 't', 'S', 'k', 'i', 'p', 'P', 'i', 'x', 'e', 'l', 's', 0,
    's', 'e', 't', 'S', 'k', 'i', 'p', 'I', 'm', 'a', 'g', 'e', 's', 0,
    't', 'e', 'x', 't', 'u', 'r', 'e', 'T', 'a', 'r', 'g', 'e', 't', 0,
    's', 'e', 't', 'A', 't', 't', 'a', 'c', 'h', 'm', 'e', 'n', 't', 0,
    'm', 'e', 's', 's', 'a', 'g', 'e', 'L', 'o', 'g', 'g', 'e', 'd', 0,
    'G', 'r', 'o', 'u', 'p', 'P', 'u', 's', 'h', 'T', 'y', 'p', 'e', 0,
    'I', 'n', 'v', 'a', 'l', 'i', 'd', 'S', 'o', 'u', 'r', 'c', 'e', 0,
    'Q', 'O', 'p', 'e', 'n', 'G', 'L', 'B', 'u', 'f', 'f', 'e', 'r', 0,
    's', 'c', 'r', 'e', 'e', 'n', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'P', 'i', 'x', 'm', 'a', 'p', 0,
    'P', 'r', 'e', 'v', 'i', 'o', 'u', 's', 'C', 'h', 'i', 'l', 'd', 0,
    'l', 'o', 'c', 'a', 'l', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'a', 'u', 't', 'o', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 0,
    's', 'e', 't', 'S', 'c', 'a', 'l', 'e', 'd', 'S', 'i', 'z', 'e', 0,
    's', 'e', 't', 'P', 'i', 'x', 'e', 'l', 'C', 'o', 'l', 'o', 'r', 0,
    't', 'o', 'I', 'm', 'a', 'g', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    't', 'o', 'P', 'i', 'x', 'e', 'l', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'b', 'i', 't', 'P', 'l', 'a', 'n', 'e', 'C', 'o', 'u', 'n', 't', 0,
    's', 'e', 't', 'C', 'o', 'l', 'o', 'r', 'C', 'o', 'u', 'n', 't', 0,
    'd', 'o', 't', 's', 'P', 'e', 'r', 'M', 'e', 't', 'e', 'r', 'Y', 0,
    'd', 'o', 't', 's', 'P', 'e', 'r', 'M', 'e', 't', 'e', 'r', 'X', 0,
    's', 'c', 'a', 'l', 'e', 'd', 'T', 'o', 'W', 'i', 'd', 't', 'h', 0,
    't', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'M', 'o', 'd', 'e', 0,
    's', 'e', 't', 'C', 'o', 'l', 'o', 'r', 'T', 'a', 'b', 'l', 'e', 0,
    'c', 'o', 'n', 's', 't', 'S', 'c', 'a', 'n', 'L', 'i', 'n', 'e', 0,
    'F', 'o', 'r', 'm', 'a', 't', '_', 'R', 'G', 'B', 'A', '6', '4', 0,
    'F', 'o', 'r', 'm', 'a', 't', '_', 'R', 'G', 'B', 'X', '6', '4', 0,
    'F', 'o', 'r', 'm', 'a', 't', '_', 'A', 'l', 'p', 'h', 'a', '8', 0,
    'F', 'o', 'r', 'm', 'a', 't', '_', 'R', 'G', 'B', '4', '4', '4', 0,
    'F', 'o', 'r', 'm', 'a', 't', '_', 'R', 'G', 'B', '8', '8', '8', 0,
    'F', 'o', 'r', 'm', 'a', 't', '_', 'R', 'G', 'B', '5', '5', '5', 0,
    'F', 'o', 'r', 'm', 'a', 't', '_', 'R', 'G', 'B', '6', '6', '6', 0,
    'F', 'o', 'r', 'm', 'a', 't', '_', 'A', 'R', 'G', 'B', '3', '2', 0,
    's', 'c', 'r', 'e', 'e', 'n', 'R', 'e', 'm', 'o', 'v', 'e', 'd', 0,
    's', 'e', 't', 'W', 'i', 'n', 'd', 'o', 'w', 'I', 'c', 'o', 'n', 0,
    'i', 's', 'L', 'e', 'f', 't', 'T', 'o', 'R', 'i', 'g', 'h', 't', 0,
    'p', 'r', 'i', 'm', 'a', 'r', 'y', 'S', 'c', 'r', 'e', 'e', 'n', 0,
    'i', 's', 'R', 'i', 'g', 'h', 't', 'T', 'o', 'L', 'e', 'f', 't', 0,
    'S', 'p', 'l', 'i', 't', 'L', 'i', 'g', 'a', 't', 'u', 'r', 'e', 0,
    's', 'e', 't', 'T', 'o', 'I', 'd', 'e', 'n', 't', 'i', 't', 'y', 0,
    'Q', 'F', 'o', 'n', 't', 'M', 'e', 't', 'r', 'i', 'c', 's', 'F', 0,
    'w', 'r', 'i', 't', 'i', 'n', 'g', 'S', 'y', 's', 't', 'e', 'm', 0,
    's', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'S', 'i', 'z', 'e', 's', 0,
    'Q', 'F', 'o', 'n', 't', 'D', 'a', 't', 'a', 'b', 'a', 's', 'e', 0,
    'l', 'e', 't', 't', 'e', 'r', 'S', 'p', 'a', 'c', 'i', 'n', 'g', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'F', 'a', 'm', 'i', 'l', 'y', 0,
    's', 'u', 'b', 's', 't', 'i', 't', 'u', 't', 'i', 'o', 'n', 's', 0,
    's', 't', 'y', 'l', 'e', 'S', 't', 'r', 'a', 't', 'e', 'g', 'y', 0,
    's', 'e', 't', 'F', 'i', 'x', 'e', 'd', 'P', 'i', 't', 'c', 'h', 0,
    's', 'e', 't', 'P', 'o', 'i', 'n', 't', 'S', 'i', 'z', 'e', 'F', 0,
    'U', 'l', 't', 'r', 'a', 'E', 'x', 'p', 'a', 'n', 'd', 'e', 'd', 0,
    'E', 'x', 't', 'r', 'a', 'E', 'x', 'p', 'a', 'n', 'd', 'e', 'd', 0,
    'S', 'e', 'm', 'i', 'C', 'o', 'n', 'd', 'e', 'n', 's', 'e', 'd', 0,
    'Q', 'F', 'o', 'n', 't', ':', ':', 'W', 'e', 'i', 'g', 'h', 't', 0,
    'N', 'o', 'F', 'o', 'n', 't', 'M', 'e', 'r', 'g', 'i', 'n', 'g', 0,
    'P', 'r', 'e', 'f', 'e', 'r', 'Q', 'u', 'a', 'l', 'i', 't', 'y', 0,
    'P', 'r', 'e', 'f', 'e', 'r', 'O', 'u', 't', 'l', 'i', 'n', 'e', 0,
    'P', 'r', 'e', 'f', 'e', 'r', 'D', 'e', 'f', 'a', 'u', 'l', 't', 0,
    'f', 'r', 'o', 'm', 'N', 'u', 'm', 'e', 'r', 'i', 'c', 'I', 'd', 0,
    'S', 'c', 'r', 'o', 'l', 'l', 'U', 'p', 'd', 'a', 't', 'e', 'd', 0,
    'S', 'c', 'r', 'o', 'l', 'l', 'S', 't', 'a', 'r', 't', 'e', 'd', 0,
    's', 'e', 't', 'C', 'o', 'n', 't', 'e', 'n', 't', 'P', 'o', 's', 0,
    'n', 'o', 'r', 'm', 'a', 'l', 'i', 'z', 'e', 'd', 'P', 'o', 's', 0,
    'l', 'a', 's', 't', 'S', 'c', 'r', 'e', 'e', 'n', 'P', 'o', 's', 0,
    's', 't', 'a', 'r', 't', 'S', 'c', 'e', 'n', 'e', 'P', 'o', 's', 0,
    's', 'e', 't', 'D', 'r', 'o', 'p', 'A', 'c', 't', 'i', 'o', 'n', 0,
    'p', 'r', 'e', 'e', 'd', 'i', 't', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'A', 'c', 't', 'i', 'o', 'n', 0,
    't', 'a', 'r', 'g', 'e', 't', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'a', 'c', 't', 'i', 'o', 'n', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    's', 'e', 't', 'D', 'r', 'a', 'g', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'o', 'w', 'n', 's', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'o', 'w', 'n', 's', 'C', 'l', 'i', 'p', 'b', 'o', 'a', 'r', 'd', 0,
    's', 'e', 't', 'F', 'o', 'c', 'a', 'l', 'P', 'o', 'i', 'n', 't', 0,
    'S', 'u', 'g', 'a', 'r', 'L', 'o', 'l', 'l', 'i', 'p', 'o', 'p', 0,
    'C', 'o', 'l', 'o', 'r', 'f', 'u', 'l', 'P', 'e', 'a', 'c', 'h', 0,
    'M', 'i', 'd', 'n', 'i', 'g', 'h', 't', 'B', 'l', 'o', 'o', 'm', 0,
    'H', 'a', 'p', 'p', 'y', 'M', 'e', 'm', 'o', 'r', 'i', 'e', 's', 0,
    'V', 'i', 'c', 'i', 'o', 'u', 's', 'S', 't', 'a', 'n', 'c', 'e', 0,
    'R', 'i', 's', 'k', 'y', 'C', 'o', 'n', 'c', 'r', 'e', 't', 'e', 0,
    'P', 'a', 's', 's', 'i', 'o', 'n', 'a', 't', 'e', 'B', 'e', 'd', 0,
    'B', 'u', 'r', 'n', 'i', 'n', 'g', 'S', 'p', 'r', 'i', 'n', 'g', 0,
    'I', 't', 'm', 'e', 'o', 'B', 'r', 'a', 'n', 'd', 'i', 'n', 'g', 0,
    'S', 'h', 'a', 'r', 'p', 'e', 'y', 'e', 'E', 'a', 'g', 'l', 'e', 0,
    'T', 'e', 'm', 'p', 't', 'i', 'n', 'g', 'A', 'z', 'u', 'r', 'e', 0,
    'R', 'a', 'i', 'n', 'y', 'A', 's', 'h', 'v', 'i', 'l', 'l', 'e', 0,
    'R', 'e', 'f', 'l', 'e', 'c', 't', 'S', 'p', 'r', 'e', 'a', 'd', 0,
    'h', 's', 'l', 'S', 'a', 't', 'u', 'r', 'a', 't', 'i', 'o', 'n', 0,
    'h', 's', 'v', 'S', 'a', 't', 'u', 'r', 'a', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'N', 'a', 'm', 'e', 'd', 'C', 'o', 'l', 'o', 'r', 0,
    'Q', 'B', 'a', 'c', 'k', 'i', 'n', 'g', 'S', 't', 'o', 'r', 'e', 0,
    'i', 'n', 't', 'r', 'i', 'n', 's', 'i', 'c', 'S', 'i', 'z', 'e', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'I', 'n', 'v', 'a', 'l', 'i', 'd', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'p', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'C', 'o', 'u', 'n', 't', 0,
    't', 'e', 'x', 't', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'a', 'c', 't', 'i', 'v', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'C', 'o', 'l', 'u', 'm', 'n', 's', 0,
    'i', 'n', 's', 'e', 'r', 't', 'C', 'o', 'l', 'u', 'm', 'n', 's', 0,
    's', 'e', 't', 'H', 'e', 'a', 'd', 'e', 'r', 'D', 'a', 't', 'a', 0,
    'A', 'l', 'i', 'g', 'n', 'B', 'a', 's', 'e', 'l', 'i', 'n', 'e', 0,
    'q', 'F', 'u', 'z', 'z', 'y', 'C', 'o', 'm', 'p', 'a', 'r', 'e', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'S', 'i', 'z', 'e', '>', 0,
    'w', 'i', 'n', 'd', 'o', 'w', 'S', 't', 'a', 't', 'e', 's', 0,
    'f', 'o', 'c', 'u', 's', 'I', 'n', 'E', 'v', 'e', 'n', 't', 0,
    'w', 'i', 'd', 't', 'h', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'f', 'r', 'a', 'm', 'e', 'M', 'a', 'r', 'g', 'i', 'n', 's', 0,
    'i', 's', 'A', 'n', 'c', 'e', 's', 't', 'o', 'r', 'O', 'f', 0,
    'c', 'r', 'o', 's', 's', 'P', 'r', 'o', 'd', 'u', 'c', 't', 0,
    'I', 'n', 't', 'e', 'r', 'm', 'e', 'd', 'i', 'a', 't', 'e', 0,
    'i', 's', 'I', 'n', 'v', 'e', 'r', 't', 'i', 'b', 'l', 'e', 0,
    'm', 'a', 'p', 'T', 'o', 'P', 'o', 'l', 'y', 'g', 'o', 'n', 0,
    'q', 'u', 'a', 'd', 'T', 'o', 'S', 'q', 'u', 'a', 'r', 'e', 0,
    's', 'q', 'u', 'a', 'r', 'e', 'T', 'o', 'Q', 'u', 'a', 'd', 0,
    'c', 'a', 'p', 'a', 'b', 'i', 'l', 'i', 't', 'i', 'e', 's', 0,
    'R', 'a', 'w', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 's', 0,
    'Q', 'T', 'o', 'u', 'c', 'h', 'D', 'e', 'v', 'i', 'c', 'e', 0,
    'D', 'e', 'l', 'i', 'm', 'i', 't', 'e', 'r', 'T', 'a', 'b', 0,
    'W', 'r', 'a', 'p', 'A', 'n', 'y', 'w', 'h', 'e', 'r', 'e', 0,
    's', 'e', 't', 'L', 'i', 'n', 'e', 'C', 'o', 'u', 'n', 't', 0,
    's', 'e', 't', 'U', 's', 'e', 'r', 'S', 't', 'a', 't', 'e', 0,
    'l', 'a', 's', 't', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'b', 'l', 'o', 'c', 'k', 'R', 'e', 'm', 'o', 'v', 'e', 'd', 0,
    's', 'e', 't', 'L', 'i', 'n', 'e', 'W', 'i', 'd', 't', 'h', 0,
    'c', 'l', 'e', 'a', 'r', 'F', 'o', 'r', 'm', 'a', 't', 's', 0,
    'm', 'a', 'x', 'i', 'm', 'u', 'm', 'W', 'i', 'd', 't', 'h', 0,
    'm', 'i', 'n', 'i', 'm', 'u', 'm', 'W', 'i', 'd', 't', 'h', 0,
    'c', 'a', 'c', 'h', 'e', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    't', 'e', 'x', 't', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'r', 'i', 'g', 'h', 't', 'P', 'a', 'd', 'd', 'i', 'n', 'g', 0,
    'n', 'u', 'm', 'b', 'e', 'r', 'S', 'u', 'f', 'f', 'i', 'x', 0,
    'n', 'u', 'm', 'b', 'e', 'r', 'P', 'r', 'e', 'f', 'i', 'x', 0,
    'h', 'e', 'a', 'd', 'i', 'n', 'g', 'L', 'e', 'v', 'e', 'l', 0,
    'S', 'i', 'n', 'g', 'l', 'e', 'H', 'e', 'i', 'g', 'h', 't', 0,
    't', 'a', 'b', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 's', 0,
    'f', 'o', 'n', 't', 'O', 'v', 'e', 'r', 'l', 'i', 'n', 'e', 0,
    't', 'o', 'L', 'i', 's', 't', 'F', 'o', 'r', 'm', 'a', 't', 0,
    't', 'o', 'C', 'h', 'a', 'r', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'i', 's', 'L', 'i', 's', 't', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'i', 's', 'C', 'h', 'a', 'r', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'b', 'o', 'o', 'l', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'U', 's', 'e', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'I', 'm', 'a', 'g', 'e', 'Q', 'u', 'a', 'l', 'i', 't', 'y', 0,
    'T', 'a', 'b', 'l', 'e', 'C', 'o', 'l', 'u', 'm', 'n', 's', 0,
    'F', 'r', 'a', 'm', 'e', 'P', 'a', 'd', 'd', 'i', 'n', 'g', 0,
    'd', 'r', 'a', 'w', 'C', 'o', 'n', 't', 'e', 'n', 't', 's', 0,
    'l', 'o', 'a', 'd', 'R', 'e', 's', 'o', 'u', 'r', 'c', 'e', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'U', 's', 'e', 'r', 'R', 'e', 's', 'o', 'u', 'r', 'c', 'e', 0,
    'H', 't', 'm', 'l', 'R', 'e', 's', 'o', 'u', 'r', 'c', 'e', 0,
    'F', 'i', 'n', 'd', 'B', 'a', 'c', 'k', 'w', 'a', 'r', 'd', 0,
    's', 'e', 't', 'P', 'l', 'a', 'i', 'n', 'T', 'e', 'x', 't', 0,
    'e', 'n', 'd', 'E', 'd', 'i', 't', 'B', 'l', 'o', 'c', 'k', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'T', 'a', 'b', 'l', 'e', 0,
    'a', 't', 'B', 'l', 'o', 'c', 'k', 'S', 't', 'a', 'r', 't', 0,
    's', 'e', 'l', 'e', 'c', 't', 'e', 'd', 'T', 'e', 'x', 't', 0,
    's', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 'E', 'n', 'd', 0,
    'm', 'o', 'v', 'e', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'P', 'r', 'e', 'v', 'i', 'o', 'u', 's', 'C', 'e', 'l', 'l', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'B', 'l', 'o', 'c', 'k', 0,
    's', 'w', 'a', 'p', 'I', 'n', 't', 'e', 'r', 'v', 'a', 'l', 0,
    's', 'w', 'a', 'p', 'B', 'e', 'h', 'a', 'v', 'i', 'o', 'r', 0,
    'T', 'r', 'i', 'p', 'l', 'e', 'B', 'u', 'f', 'f', 'e', 'r', 0,
    'D', 'o', 'u', 'b', 'l', 'e', 'B', 'u', 'f', 'f', 'e', 'r', 0,
    'S', 'i', 'n', 'g', 'l', 'e', 'B', 'u', 'f', 'f', 'e', 'r', 0,
    'D', 'e', 'b', 'u', 'g', 'C', 'o', 'n', 't', 'e', 'x', 't', 0,
    's', 'u', 'r', 'f', 'a', 'c', 'e', 'C', 'l', 'a', 's', 's', 0,
    'M', 'e', 't', 'a', 'l', 'S', 'u', 'r', 'f', 'a', 'c', 'e', 0,
    's', 'e', 't', 'T', 'e', 'x', 't', 'W', 'i', 'd', 't', 'h', 0,
    's', 'e', 't', 'W', 'h', 'a', 't', 's', 'T', 'h', 'i', 's', 0,
    's', 'e', 't', 'S', 't', 'a', 't', 'u', 's', 'T', 'i', 'p', 0,
    's', 'o', 'r', 't', 'C', 'h', 'i', 'l', 'd', 'r', 'e', 'n', 0,
    's', 'e', 't', 'C', 'h', 'e', 'c', 'k', 'a', 'b', 'l', 'e', 0,
    'i', 's', 'S', 'e', 'l', 'e', 'c', 't', 'a', 'b', 'l', 'e', 0,
    'a', 'p', 'p', 'e', 'n', 'd', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'R', 'e', 's', 't', 'a', 'r', 't', 'N', 'e', 'v', 'e', 'r', 0,
    's', 'e', 'r', 'i', 'a', 'l', 'N', 'u', 'm', 'b', 'e', 'r', 0,
    'm', 'a', 'n', 'u', 'f', 'a', 'c', 't', 'u', 'r', 'e', 'r', 0,
    'a', 'n', 'g', 'l', 'e', 'B', 'e', 't', 'w', 'e', 'e', 'n', 0,
    'p', 'h', 'y', 's', 'i', 'c', 'a', 'l', 'S', 'i', 'z', 'e', 0,
    'q', 'P', 'r', 'e', 'm', 'u', 'l', 't', 'i', 'p', 'l', 'y', 0,
    'l', 'o', 'a', 'd', 'F', 'r', 'o', 'm', 'F', 'i', 'l', 'e', 0,
    'm', 'a', 'x', 'C', 'h', 'a', 'r', 'W', 'i', 'd', 't', 'h', 0,
    'p', 'a', 't', 'h', 'F', 'o', 'r', 'G', 'l', 'y', 'p', 'h', 0,
    'Q', 'P', 'i', 'x', 'm', 'a', 'p', 'C', 'a', 'c', 'h', 'e', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'D', 'e', 'p', 't', 'h', 0,
    'b', 'i', 't', 's', 'P', 'e', 'r', 'P', 'i', 'x', 'e', 'l', 0,
    'c', 'h', 'a', 'n', 'n', 'e', 'l', 'C', 'o', 'u', 'n', 't', 0,
    'U', 'n', 's', 'i', 'g', 'n', 'e', 'd', 'B', 'y', 't', 'e', 0,
    'I', 'g', 'n', 'o', 'r', 'e', 's', 'A', 'l', 'p', 'h', 'a', 0,
    'Q', 'P', 'i', 'x', 'e', 'l', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'i', 'n', 'p', 'u', 't', 'F', 'o', 'r', 'm', 'a', 't', 's', 0,
    'N', 'C', 'o', 'l', 'o', 'r', 'G', 'r', 'o', 'u', 'p', 's', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'S', 't', 'r', 'o', 'k', 'e', 0,
    's', 'e', 't', 'J', 'o', 'i', 'n', 'S', 't', 'y', 'l', 'e', 0,
    'e', 'l', 'e', 'm', 'e', 'n', 't', 'C', 'o', 'u', 'n', 't', 0,
    'c', 'l', 'o', 's', 'e', 'S', 'u', 'b', 'p', 'a', 't', 'h', 0,
    'Q', 'P', 'a', 'i', 'n', 't', 'e', 'r', 'P', 'a', 't', 'h', 0,
    'C', 'o', 'r', 'e', 'G', 'r', 'a', 'p', 'h', 'i', 'c', 's', 0,
    'd', 'r', 'a', 'w', 'T', 'e', 'x', 't', 'I', 't', 'e', 'm', 0,
    'P', 'o', 'l', 'y', 'l', 'i', 'n', 'e', 'M', 'o', 'd', 'e', 0,
    'D', 'i', 'r', 't', 'y', 'O', 'p', 'a', 'c', 'i', 't', 'y', 0,
    'P', 'a', 'i', 'n', 't', 'e', 'r', 'P', 'a', 't', 'h', 's', 0,
    'P', 'a', 't', 't', 'e', 'r', 'n', 'B', 'r', 'u', 's', 'h', 0,
    'Q', 'P', 'a', 'i', 'n', 't', 'E', 'n', 'g', 'i', 'n', 'e', 0,
    'p', 'h', 'y', 's', 'i', 'c', 'a', 'l', 'D', 'p', 'i', 'Y', 0,
    'p', 'h', 'y', 's', 'i', 'c', 'a', 'l', 'D', 'p', 'i', 'X', 0,
    'P', 'd', 'm', 'N', 'u', 'm', 'C', 'o', 'l', 'o', 'r', 's', 0,
    'd', 'r', 'a', 'w', 'G', 'l', 'y', 'p', 'h', 'R', 'u', 'n', 0,
    'd', 'r', 'a', 'w', 'P', 'o', 'l', 'y', 'l', 'i', 'n', 'e', 0,
    'b', 'o', 't', 't', 'o', 'm', 'M', 'a', 'r', 'g', 'i', 'n', 0,
    's', 'e', 't', 'T', 'o', 'p', 'M', 'a', 'r', 'g', 'i', 'n', 0,
    'F', 'u', 'l', 'l', 'P', 'a', 'g', 'e', 'M', 'o', 'd', 'e', 0,
    'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'M', 'o', 'd', 'e', 0,
    'L', 'a', 's', 't', 'P', 'a', 'g', 'e', 'S', 'i', 'z', 'e', 0,
    'E', 'n', 'v', 'e', 'l', 'o', 'p', 'e', 'Y', 'o', 'u', '4', 0,
    'E', 'n', 'v', 'e', 'l', 'o', 'p', 'e', 'P', 'r', 'c', '9', 0,
    'E', 'n', 'v', 'e', 'l', 'o', 'p', 'e', 'P', 'r', 'c', '8', 0,
    'E', 'n', 'v', 'e', 'l', 'o', 'p', 'e', 'P', 'r', 'c', '7', 0,
    'E', 'n', 'v', 'e', 'l', 'o', 'p', 'e', 'P', 'r', 'c', '6', 0,
    'E', 'n', 'v', 'e', 'l', 'o', 'p', 'e', 'P', 'r', 'c', '5', 0,
    'E', 'n', 'v', 'e', 'l', 'o', 'p', 'e', 'P', 'r', 'c', '4', 0,
    'E', 'n', 'v', 'e', 'l', 'o', 'p', 'e', 'P', 'r', 'c', '3', 0,
    'E', 'n', 'v', 'e', 'l', 'o', 'p', 'e', 'P', 'r', 'c', '2', 0,
    'E', 'n', 'v', 'e', 'l', 'o', 'p', 'e', 'P', 'r', 'c', '1', 0,
    'I', 'm', 'p', 'e', 'r', 'i', 'a', 'l', '9', 'x', '1', '2', 0,
    'I', 'm', 'p', 'e', 'r', 'i', 'a', 'l', '9', 'x', '1', '1', 0,
    'I', 'm', 'p', 'e', 'r', 'i', 'a', 'l', '8', 'x', '1', '0', 0,
    'T', 'a', 'b', 'l', 'o', 'i', 'd', 'E', 'x', 't', 'r', 'a', 0,
    'p', 'a', 'i', 'n', 't', 'U', 'n', 'd', 'e', 'r', 'G', 'L', 0,
    'i', 'n', 'i', 't', 'i', 'a', 'l', 'i', 'z', 'e', 'G', 'L', 0,
    'f', 'r', 'a', 'm', 'e', 'S', 'w', 'a', 'p', 'p', 'e', 'd', 0,
    'C', 'o', 'm', 'p', 'a', 'r', 'e', 'N', 'e', 'v', 'e', 'r', 0,
    'C', 'o', 'm', 'p', 'a', 'r', 'e', 'E', 'q', 'u', 'a', 'l', 0,
    'S', 'w', 'i', 'z', 'z', 'l', 'e', 'A', 'l', 'p', 'h', 'a', 0,
    'S', 'w', 'i', 'z', 'z', 'l', 'e', 'G', 'r', 'e', 'e', 'n', 0,
    'm', 'i', 'p', 'B', 'a', 's', 'e', 'L', 'e', 'v', 'e', 'l', 0,
    'N', 'P', 'O', 'T', 'T', 'e', 'x', 't', 'u', 'r', 'e', 's', 0,
    'U', 'I', 'n', 't', '3', '2', '_', 'D', '2', '4', 'S', '8', 0,
    'U', 'I', 'n', 't', '3', '2', '_', 'R', 'G', 'B', 'A', '8', 0,
    'U', 'I', 'n', 't', '1', '6', '_', 'R', 'G', 'B', 'A', '4', 0,
    'B', 'G', 'R', 'A', '_', 'I', 'n', 't', 'e', 'g', 'e', 'r', 0,
    'R', 'G', 'B', 'A', '_', 'I', 'n', 't', 'e', 'g', 'e', 'r', 0,
    's', 'e', 't', 'M', 'i', 'p', 'L', 'e', 'v', 'e', 'l', 's', 0,
    'S', 'R', 'G', 'B', '8', '_', 'A', 'l', 'p', 'h', 'a', '8', 0,
    'R', 'G', 'B', 'A', '1', '6', '_', 'S', 'N', 'o', 'r', 'm', 0,
    'R', 'G', 'B', 'A', '1', '6', '_', 'U', 'N', 'o', 'r', 'm', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'S', 'h', 'a', 'd', 'e', 'r', 0,
    's', 'e', 't', 'R', 'o', 'w', 'L', 'e', 'n', 'g', 't', 'h', 0,
    's', 'e', 't', 'A', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', 0,
    'p', 'a', 'i', 'n', 't', 'F', 'l', 'i', 'p', 'p', 'e', 'd', 0,
    'N', 'o', 'A', 't', 't', 'a', 'c', 'h', 'm', 'e', 'n', 't', 0,
    's', 't', 'a', 'r', 't', 'L', 'o', 'g', 'g', 'i', 'n', 'g', 0,
    'H', 'i', 'g', 'h', 'S', 'e', 'v', 'e', 'r', 'i', 't', 'y', 0,
    'G', 'r', 'o', 'u', 'p', 'P', 'o', 'p', 'T', 'y', 'p', 'e', 0,
    'h', 'a', 's', 'E', 'x', 't', 'e', 'n', 's', 'i', 'o', 'n', 0,
    's', 'h', 'a', 'r', 'e', 'C', 'o', 'n', 't', 'e', 'x', 't', 0,
    'u', 's', 'a', 'g', 'e', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'V', 'e', 'r', 't', 'e', 'x', 'B', 'u', 'f', 'f', 'e', 'r', 0,
    'n', 'a', 't', 'i', 'v', 'e', 'H', 'a', 'n', 'd', 'l', 'e', 0,
    's', 'e', 't', 'C', 'a', 'c', 'h', 'e', 'M', 'o', 'd', 'e', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'I', 'm', 'a', 'g', 'e', 0,
    'n', 'o', 'r', 'm', 'a', 'l', 'M', 'a', 't', 'r', 'i', 'x', 0,
    'l', 'i', 's', 't', 'T', 'o', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'F', 'i', 'n', 'd', 'P', 'r', 'e', 'v', 'i', 'o', 'u', 's', 0,
    'H', 'e', 'l', 'p', 'C', 'o', 'n', 't', 'e', 'n', 't', 's', 0,
    'P', 'a', 'r', 't', 'i', 'a', 'l', 'M', 'a', 't', 'c', 'h', 0,
    'P', 'o', 'r', 't', 'a', 'b', 'l', 'e', 'T', 'e', 'x', 't', 0,
    'i', 'n', 'v', 'o', 'k', 'e', 'A', 'c', 't', 'i', 'o', 'n', 0,
    'Q', 'I', 'n', 'p', 'u', 't', 'M', 'e', 't', 'h', 'o', 'd', 0,
    'Q', 'I', 'm', 'a', 'g', 'e', 'W', 'r', 'i', 't', 'e', 'r', 0,
    'Q', 'I', 'm', 'a', 'g', 'e', 'R', 'e', 'a', 'd', 'e', 'r', 0,
    's', 'm', 'o', 'o', 't', 'h', 'S', 'c', 'a', 'l', 'e', 'd', 0,
    'i', 'n', 'v', 'e', 'r', 't', 'P', 'i', 'x', 'e', 'l', 's', 0,
    'b', 'y', 't', 'e', 's', 'P', 'e', 'r', 'L', 'i', 'n', 'e', 0,
    'F', 'o', 'r', 'm', 'a', 't', '_', 'R', 'G', 'B', '3', '0', 0,
    'F', 'o', 'r', 'm', 'a', 't', '_', 'B', 'G', 'R', '3', '0', 0,
    'F', 'o', 'r', 'm', 'a', 't', '_', 'R', 'G', 'B', '1', '6', 0,
    'F', 'o', 'r', 'm', 'a', 't', '_', 'R', 'G', 'B', '3', '2', 0,
    'Q', 'P', 'a', 'i', 'n', 't', 'D', 'e', 'v', 'i', 'c', 'e', 0,
    's', 'c', 'a', 'l', 'e', 'd', 'P', 'i', 'x', 'm', 'a', 'p', 0,
    'I', 'c', 'o', 'n', 'N', 'a', 'm', 'e', 'H', 'o', 'o', 'k', 0,
    's', 'e', 't', 'T', 'h', 'e', 'm', 'e', 'N', 'a', 'm', 'e', 0,
    'h', 'a', 's', 'T', 'h', 'e', 'm', 'e', 'I', 'c', 'o', 'n', 0,
    'Q', 'I', 'c', 'o', 'n', ':', ':', 'S', 't', 'a', 't', 'e', 0,
    'p', 'l', 'a', 't', 'f', 'o', 'r', 'm', 'N', 'a', 'm', 'e', 0,
    's', 'e', 't', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 's', 0,
    'g', 'l', 'y', 'p', 'h', 'I', 'n', 'd', 'e', 'x', 'e', 's', 0,
    's', 't', 'r', 'i', 'k', 'e', 'O', 'u', 't', 'P', 'o', 's', 0,
    'u', 'n', 'd', 'e', 'r', 'l', 'i', 'n', 'e', 'P', 'o', 's', 0,
    'b', 'o', 'u', 'n', 'd', 'i', 'n', 'g', 'R', 'e', 'c', 't', 0,
    'r', 'i', 'g', 'h', 't', 'B', 'e', 'a', 'r', 'i', 'n', 'g', 0,
    'Q', 'F', 'o', 'n', 't', 'M', 'e', 't', 'r', 'i', 'c', 's', 0,
    'i', 's', 'F', 'i', 'x', 'e', 'd', 'P', 'i', 't', 'c', 'h', 0,
    's', 'e', 't', 'S', 't', 'y', 'l', 'e', 'N', 'a', 'm', 'e', 0,
    'A', 'l', 'l', 'L', 'o', 'w', 'e', 'r', 'c', 'a', 's', 'e', 0,
    'A', 'l', 'l', 'U', 'p', 'p', 'e', 'r', 'c', 'a', 's', 'e', 0,
    's', 'e', 't', 'S', 't', 'y', 'l', 'e', 'H', 'i', 'n', 't', 0,
    's', 'e', 't', 'S', 't', 'r', 'i', 'k', 'e', 'O', 'u', 't', 0,
    's', 'e', 't', 'U', 'n', 'd', 'e', 'r', 'l', 'i', 'n', 'e', 0,
    's', 'e', 't', 'P', 'i', 'x', 'e', 'l', 'S', 'i', 'z', 'e', 0,
    's', 'e', 't', 'P', 'o', 'i', 'n', 't', 'S', 'i', 'z', 'e', 0,
    'S', 'e', 'm', 'i', 'E', 'x', 'p', 'a', 'n', 'd', 'e', 'd', 0,
    'S', 't', 'y', 'l', 'e', 'O', 'b', 'l', 'i', 'q', 'u', 'e', 0,
    'Q', 'F', 'o', 'n', 't', ':', ':', 'S', 't', 'y', 'l', 'e', 0,
    'F', 'o', 'r', 'c', 'e', 'O', 'u', 't', 'l', 'i', 'n', 'e', 0,
    'P', 'r', 'e', 'f', 'e', 'r', 'D', 'e', 'v', 'i', 'c', 'e', 0,
    'P', 'r', 'e', 'f', 'e', 'r', 'B', 'i', 't', 'm', 'a', 'p', 0,
    'Q', 'S', 'c', 'r', 'o', 'l', 'l', 'E', 'v', 'e', 'n', 't', 0,
    'v', 'i', 'e', 'w', 'p', 'o', 'r', 't', 'S', 'i', 'z', 'e', 0,
    'Q', 'E', 'x', 'p', 'o', 's', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'l', 'a', 's', 't', 'S', 'c', 'e', 'n', 'e', 'P', 'o', 's', 0,
    'Q', 'A', 'c', 't', 'i', 'o', 'n', 'E', 'v', 'e', 'n', 't', 0,
    'm', 'o', 'u', 's', 'e', 'B', 'u', 't', 't', 'o', 'n', 's', 0,
    'c', 'o', 'm', 'm', 'i', 't', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'Q', 'R', 'e', 's', 'i', 'z', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'i', 's', 'A', 'u', 't', 'o', 'R', 'e', 'p', 'e', 'a', 't', 0,
    'h', 'i', 'R', 'e', 's', 'G', 'l', 'o', 'b', 'a', 'l', 'Y', 0,
    'h', 'i', 'R', 'e', 's', 'G', 'l', 'o', 'b', 'a', 'l', 'X', 0,
    'Q', 'T', 'a', 'b', 'l', 'e', 't', 'E', 'v', 'e', 'n', 't', 0,
    's', 'e', 't', 'T', 'i', 'm', 'e', 's', 't', 'a', 'm', 'p', 0,
    'c', 'e', 'n', 't', 'e', 'r', 'R', 'a', 'd', 'i', 'u', 's', 0,
    's', 'e', 't', 'F', 'i', 'n', 'a', 'l', 'S', 't', 'o', 'p', 0,
    'F', 'a', 'b', 'l', 'e', 'd', 'S', 'u', 'n', 's', 'e', 't', 0,
    'S', 'w', 'e', 'e', 't', 'D', 'e', 's', 's', 'e', 'r', 't', 0,
    'M', 'o', 'r', 'n', 'i', 'n', 'g', 'S', 'a', 'l', 'a', 'd', 0,
    'P', 'e', 'r', 'f', 'e', 'c', 't', 'W', 'h', 'i', 't', 'e', 0,
    'S', 'a', 'l', 't', 'M', 'o', 'u', 'n', 't', 'a', 'i', 'n', 0,
    'S', 'o', 'f', 't', 'L', 'i', 'p', 's', 't', 'i', 'c', 'k', 0,
    'C', 'r', 'y', 's', 't', 'a', 'l', 'R', 'i', 'v', 'e', 'r', 0,
    'G', 'r', 'a', 's', 's', 'S', 'h', 'a', 'm', 'p', 'o', 'o', 0,
    'A', 'q', 'u', 'a', 'G', 'u', 'i', 'd', 'a', 'n', 'c', 'e', 0,
    'N', 'o', 'r', 't', 'h', 'M', 'i', 'r', 'a', 'c', 'l', 'e', 0,
    'A', 'f', 'r', 'i', 'c', 'a', 'n', 'F', 'i', 'e', 'l', 'd', 0,
    'H', 'a', 'p', 'p', 'y', 'U', 'n', 'i', 'c', 'o', 'r', 'n', 0,
    'H', 'i', 'd', 'd', 'e', 'n', 'J', 'a', 'g', 'u', 'a', 'r', 0,
    'N', 'e', 'w', 'R', 'e', 't', 'r', 'o', 'w', 'a', 'v', 'e', 0,
    'H', 'e', 'a', 'l', 't', 'h', 'y', 'W', 'a', 't', 'e', 'r', 0,
    'P', 'r', 'e', 'm', 'i', 'u', 'm', 'W', 'h', 'i', 't', 'e', 0,
    'A', 'l', 'c', 'h', 'e', 'm', 'i', 's', 't', 'L', 'a', 'b', 0,
    'F', 'a', 'r', 'a', 'w', 'a', 'y', 'R', 'i', 'v', 'e', 'r', 0,
    'P', 'h', 'o', 'e', 'n', 'i', 'x', 'S', 't', 'a', 'r', 't', 0,
    'M', 'o', 'u', 'n', 't', 'a', 'i', 'n', 'R', 'o', 'c', 'k', 0,
    'R', 'e', 'd', 'S', 'a', 'l', 'v', 'a', 't', 'i', 'o', 'n', 0,
    'P', 'o', 'l', 'i', 't', 'e', 'R', 'u', 'm', 'o', 'r', 's', 0,
    'T', 'e', 'e', 'n', 'N', 'o', 't', 'e', 'b', 'o', 'o', 'k', 0,
    'L', 'a', 'd', 'o', 'g', 'a', 'B', 'o', 't', 't', 'o', 'm', 0,
    'F', 'r', 'o', 'z', 'e', 'n', 'D', 'r', 'e', 'a', 'm', 's', 0,
    'S', 'u', 'n', 'n', 'y', 'M', 'o', 'r', 'n', 'i', 'n', 'g', 0,
    'Y', 'o', 'u', 'n', 'g', 'P', 'a', 's', 's', 'i', 'o', 'n', 0,
    'S', 'p', 'r', 'i', 'n', 'g', 'W', 'a', 'r', 'm', 't', 'h', 0,
    'R', 'e', 'p', 'e', 'a', 't', 'S', 'p', 'r', 'e', 'a', 'd', 0,
    't', 'e', 'x', 't', 'u', 'r', 'e', 'I', 'm', 'a', 'g', 'e', 0,
    'i', 's', 'V', 'a', 'l', 'i', 'd', 'C', 'o', 'l', 'o', 'r', 0,
    'Q', 'C', 'o', 'l', 'o', 'r', ':', ':', 'S', 'p', 'e', 'c', 0,
    'd', 'o', 'c', 'u', 'm', 'e', 'n', 't', 'S', 'i', 'z', 'e', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 'N', 'u', 'm', 'b', 'e', 'r', 0,
    'l', 'o', 'a', 'd', 'F', 'r', 'o', 'm', 'D', 'a', 't', 'a', 0,
    'f', 'r', 'a', 'm', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'F', 'r', 'a', 'm', 'e', 0,
    'm', 'i', 'n', 'o', 'r', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    'm', 'a', 'j', 'o', 'r', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    'Q', 'K', 'e', 'y', 'S', 'e', 'q', 'u', 'e', 'n', 'c', 'e', 0,
    'h', 'a', 's', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'L', 'i', 't', 't', 'l', 'e', 'E', 'n', 'd', 'i', 'a', 'n', 0,
    'U', 'n', 'k', 'n', 'o', 'w', 'n', 'E', 'r', 'r', 'o', 'r', 0,
    '_', '_', 'c', 'o', 'n', 't', 'a', 'i', 'n', 's', '_', '_', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'i', 'n', 's', 'e', 'r', 't', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'c', 'a', 'n', 'F', 'e', 't', 'c', 'h', 'M', 'o', 'r', 'e', 0,
    'd', 'r', 'o', 'p', 'M', 'i', 'm', 'e', 'D', 'a', 't', 'a', 0,
    's', 't', 'a', 't', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    't', 'a', 'b', 'l', 'e', 't', 'E', 'v', 'e', 'n', 't', 0,
    'u', 'n', 's', 'e', 't', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'm', 'a', 'p', 'T', 'o', 'G', 'l', 'o', 'b', 'a', 'l', 0,
    's', 'e', 't', 'F', 'i', 'l', 'e', 'P', 'a', 't', 'h', 0,
    's', 'e', 't', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 0,
    's', 'e', 't', 'B', 'a', 's', 'e', 'S', 'i', 'z', 'e', 0,
    'm', 'a', 'x', 'i', 'm', 'u', 'm', 'S', 'i', 'z', 'e', 0,
    'm', 'i', 'n', 'i', 'm', 'u', 'm', 'S', 'i', 'z', 'e', 0,
    'w', 'i', 'n', 'd', 'o', 'w', 'S', 't', 'a', 't', 'e', 0,
    's', 'e', 't', 'M', 'o', 'd', 'a', 'l', 'i', 't', 'y', 0,
    's', 'e', 't', 'N', 'o', 't', 'a', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'D', 'e', 'c', 'i', 'm', 'a', 'l', 's', 0,
    'T', 'x', 'T', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', 0,
    'T', 'o', 'u', 'c', 'h', 'S', 'c', 'r', 'e', 'e', 'n', 0,
    's', 'e', 't', 'T', 'a', 'b', 'A', 'r', 'r', 'a', 'y', 0,
    'Q', 'T', 'e', 'x', 't', 'O', 'p', 't', 'i', 'o', 'n', 0,
    't', 'e', 'x', 't', 'F', 'o', 'r', 'm', 'a', 't', 's', 0,
    's', 'e', 't', 'R', 'e', 'v', 'i', 's', 'i', 'o', 'n', 0,
    's', 'e', 't', 'U', 's', 'e', 'r', 'D', 'a', 't', 'a', 0,
    'p', 'a', 'r', 'e', 'n', 't', 'F', 'r', 'a', 'm', 'e', 0,
    'c', 'h', 'i', 'l', 'd', 'F', 'r', 'a', 'm', 'e', 's', 0,
    'f', 'r', 'a', 'm', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'Q', 'T', 'e', 'x', 't', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'c', 'l', 'e', 'a', 'r', 'L', 'a', 'y', 'o', 'u', 't', 0,
    'b', 'e', 'g', 'i', 'n', 'L', 'a', 'y', 'o', 'u', 't', 0,
    'Q', 'T', 'e', 'x', 't', 'L', 'a', 'y', 'o', 'u', 't', 0,
    'f', 'o', 'r', 'm', 'a', 't', 'I', 'n', 'd', 'e', 'x', 0,
    'l', 'e', 'f', 't', 'P', 'a', 'd', 'd', 'i', 'n', 'g', 0,
    'c', 'e', 'l', 'l', 'P', 'a', 'd', 'd', 'i', 'n', 'g', 0,
    'c', 'e', 'l', 'l', 'S', 'p', 'a', 'c', 'i', 'n', 'g', 0,
    'b', 'o', 'r', 'd', 'e', 'r', 'S', 't', 'y', 'l', 'e', 0,
    'b', 'o', 'r', 'd', 'e', 'r', 'B', 'r', 'u', 's', 'h', 0,
    'L', 'i', 's', 't', 'D', 'e', 'c', 'i', 'm', 'a', 'l', 0,
    'F', 'i', 'x', 'e', 'd', 'H', 'e', 'i', 'g', 'h', 't', 0,
    'f', 'o', 'n', 't', 'S', 't', 'r', 'e', 't', 'c', 'h', 0,
    'f', 'o', 'n', 't', 'K', 'e', 'r', 'n', 'i', 'n', 'g', 0,
    'a', 'n', 'c', 'h', 'o', 'r', 'N', 'a', 'm', 'e', 's', 0,
    'N', 'o', 'U', 'n', 'd', 'e', 'r', 'l', 'i', 'n', 'e', 0,
    't', 'e', 'x', 't', 'O', 'u', 't', 'l', 'i', 'n', 'e', 0,
    'A', 'l', 'i', 'g', 'n', 'M', 'i', 'd', 'd', 'l', 'e', 0,
    'A', 'l', 'i', 'g', 'n', 'N', 'o', 'r', 'm', 'a', 'l', 0,
    'p', 'e', 'n', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'i', 'n', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'h', 'a', 's', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'T', 'e', 'x', 't', 'T', 'o', 'o', 'l', 'T', 'i', 'p', 0,
    'F', 'r', 'a', 'm', 'e', 'H', 'e', 'i', 'g', 'h', 't', 0,
    'F', 'r', 'a', 'm', 'e', 'M', 'a', 'r', 'g', 'i', 'n', 0,
    'F', 'r', 'a', 'm', 'e', 'B', 'o', 'r', 'd', 'e', 'r', 0,
    'B', 'l', 'o', 'c', 'k', 'I', 'n', 'd', 'e', 'n', 't', 0,
    'T', 'a', 'b', 'l', 'e', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'I', 'm', 'a', 'g', 'e', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'F', 'i', 'x', 'e', 'd', 'L', 'e', 'n', 'g', 't', 'h', 0,
    'c', 'h', 'a', 'r', 'a', 'c', 't', 'e', 'r', 'A', 't', 0,
    'i', 'n', 'd', 'e', 'n', 't', 'W', 'i', 'd', 't', 'h', 0,
    's', 'e', 't', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'd', 0,
    'a', 'd', 'd', 'R', 'e', 's', 'o', 'u', 'r', 'c', 'e', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'F', 'o', 'n', 't', 0,
    'o', 'b', 'j', 'e', 'c', 't', 'I', 'n', 'd', 'e', 'x', 0,
    't', 'o', 'P', 'l', 'a', 'i', 'n', 'T', 'e', 'x', 't', 0,
    'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 'U', 'r', 'l', 0,
    'b', 'l', 'o', 'c', 'k', 'N', 'u', 'm', 'b', 'e', 'r', 0,
    'i', 'n', 's', 'e', 'r', 't', 'I', 'm', 'a', 'g', 'e', 0,
    'i', 'n', 's', 'e', 'r', 't', 'F', 'r', 'a', 'm', 'e', 0,
    'i', 'n', 's', 'e', 'r', 't', 'T', 'a', 'b', 'l', 'e', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'L', 'i', 's', 't', 0,
    'i', 'n', 's', 'e', 'r', 't', 'B', 'l', 'o', 'c', 'k', 0,
    'b', 'l', 'o', 'c', 'k', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'P', 'r', 'e', 'v', 'i', 'o', 'u', 's', 'R', 'o', 'w', 0,
    'Q', 'T', 'e', 'x', 't', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'r', 'e', 'h', 'i', 'g', 'h', 'l', 'i', 'g', 'h', 't', 0,
    's', 'e', 't', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 0,
    'C', 'o', 'r', 'e', 'P', 'r', 'o', 'f', 'i', 'l', 'e', 0,
    'Q', 'S', 't', 'y', 'l', 'e', 'H', 'i', 'n', 't', 's', 0,
    'Q', 'S', 't', 'a', 't', 'i', 'c', 'T', 'e', 'x', 't', 0,
    's', 'e', 't', 'S', 'i', 'z', 'e', 'H', 'i', 'n', 't', 0,
    's', 'e', 't', 'T', 'r', 'i', 's', 't', 'a', 't', 'e', 0,
    'i', 's', 'C', 'h', 'e', 'c', 'k', 'a', 'b', 'l', 'e', 0,
    's', 'e', 't', 'E', 'd', 'i', 't', 'a', 'b', 'l', 'e', 0,
    'i', 't', 'e', 'm', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    's', 'e', 't', 'R', 'o', 'w', 'C', 'o', 'u', 'n', 't', 0,
    'r', 'e', 's', 't', 'a', 'r', 't', 'H', 'i', 'n', 't', 0,
    'r', 'e', 'f', 'r', 'e', 's', 'h', 'R', 'a', 't', 'e', 0,
    'i', 's', 'L', 'a', 'n', 'd', 's', 'c', 'a', 'p', 'e', 0,
    'v', 'i', 'r', 't', 'u', 'a', 'l', 'S', 'i', 'z', 'e', 0,
    'm', 'a', 'g', 'e', 'n', 't', 'a', 'S', 'i', 'z', 'e', 0,
    'A', 't', 'B', 'e', 'g', 'i', 'n', 'n', 'i', 'n', 'g', 0,
    's', 'e', 't', 'I', 'O', 'D', 'e', 'v', 'i', 'c', 'e', 0,
    's', 'e', 't', 'C', 'o', 's', 'm', 'e', 't', 'i', 'c', 0,
    't', 'o', 'o', 'l', 'T', 'i', 'p', 'T', 'e', 'x', 't', 0,
    't', 'o', 'o', 'l', 'T', 'i', 'p', 'B', 'a', 's', 'e', 0,
    'l', 'i', 'n', 'k', 'V', 'i', 's', 'i', 't', 'e', 'd', 0,
    'N', 'C', 'o', 'l', 'o', 'r', 'R', 'o', 'l', 'e', 's', 0,
    'T', 'o', 'o', 'l', 'T', 'i', 'p', 'T', 'e', 'x', 't', 0,
    'T', 'o', 'o', 'l', 'T', 'i', 'p', 'B', 'a', 's', 'e', 0,
    'L', 'i', 'n', 'k', 'V', 'i', 's', 'i', 't', 'e', 'd', 0,
    'd', 'a', 's', 'h', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    's', 'e', 't', 'C', 'a', 'p', 'S', 't', 'y', 'l', 'e', 0,
    's', 'e', 't', 'F', 'i', 'l', 'l', 'R', 'u', 'l', 'e', 0,
    'c', 'o', 'n', 'n', 'e', 'c', 't', 'P', 'a', 't', 'h', 0,
    'P', 'a', 'i', 'n', 't', 'B', 'u', 'f', 'f', 'e', 'r', 0,
    'W', 'i', 'n', 'd', 'i', 'n', 'g', 'M', 'o', 'd', 'e', 0,
    'O', 'd', 'd', 'E', 'v', 'e', 'n', 'M', 'o', 'd', 'e', 0,
    'A', 'l', 'l', 'F', 'e', 'a', 't', 'u', 'r', 'e', 's', 0,
    'M', 'a', 's', 'k', 'e', 'd', 'B', 'r', 'u', 's', 'h', 0,
    'B', 'r', 'u', 's', 'h', 'S', 't', 'r', 'o', 'k', 'e', 0,
    'r', 'e', 'n', 'd', 'e', 'r', 'F', 'l', 'a', 'g', 's', 0,
    'e', 'x', 'p', 'o', 's', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'l', 'o', 'g', 'i', 'c', 'a', 'l', 'D', 'p', 'i', 'Y', 0,
    'l', 'o', 'g', 'i', 'c', 'a', 'l', 'D', 'p', 'i', 'X', 0,
    'P', 'd', 'm', 'H', 'e', 'i', 'g', 'h', 't', 'M', 'M', 0,
    'r', 'e', 'n', 'd', 'e', 'r', 'H', 'i', 'n', 't', 's', 0,
    'd', 'r', 'a', 'w', 'P', 'i', 'c', 't', 'u', 'r', 'e', 0,
    'd', 'r', 'a', 'w', 'P', 'o', 'l', 'y', 'g', 'o', 'n', 0,
    'd', 'r', 'a', 'w', 'E', 'l', 'l', 'i', 'p', 's', 'e', 0,
    's', 'e', 't', 'V', 'i', 'e', 'w', 'p', 'o', 'r', 't', 0,
    'h', 'a', 's', 'C', 'l', 'i', 'p', 'p', 'i', 'n', 'g', 0,
    's', 'e', 't', 'C', 'l', 'i', 'p', 'p', 'i', 'n', 'g', 0,
    's', 'e', 't', 'C', 'l', 'i', 'p', 'P', 'a', 't', 'h', 0,
    'b', 'r', 'u', 's', 'h', 'O', 'r', 'i', 'g', 'i', 'n', 0,
    'f', 'o', 'n', 't', 'M', 'e', 't', 'r', 'i', 'c', 's', 0,
    'm', 'a', 't', 'c', 'h', 'P', 'o', 'l', 'i', 'c', 'y', 0,
    'r', 'i', 'g', 'h', 't', 'M', 'a', 'r', 'g', 'i', 'n', 0,
    'Q', 'P', 'a', 'g', 'e', 'L', 'a', 'y', 'o', 'u', 't', 0,
    's', 'e', 't', 'P', 'a', 'g', 'e', 'S', 'i', 'z', 'e', 0,
    'E', 'n', 'v', 'e', 'l', 'o', 'p', 'e', 'C', '6', '5', 0,
    'I', 'm', 'p', 'e', 'r', 'i', 'a', 'l', '7', 'x', '9', 0,
    'L', 'e', 't', 't', 'e', 'r', 'S', 'm', 'a', 'l', 'l', 0,
    'L', 'e', 't', 't', 'e', 'r', 'E', 'x', 't', 'r', 'a', 0,
    'r', 'e', 's', 'i', 'z', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'p', 'a', 'i', 'n', 't', 'O', 'v', 'e', 'r', 'G', 'L', 0,
    'C', 'o', 'm', 'p', 'a', 'r', 'e', 'N', 'o', 'n', 'e', 0,
    'C', 'o', 'm', 'p', 'a', 'r', 'e', 'L', 'e', 's', 's', 0,
    'b', 'o', 'r', 'd', 'e', 'r', 'C', 'o', 'l', 'o', 'r', 0,
    's', 'e', 't', 'W', 'r', 'a', 'p', 'M', 'o', 'd', 'e', 0,
    'C', 'l', 'a', 'm', 'p', 'T', 'o', 'E', 'd', 'g', 'e', 0,
    's', 'w', 'i', 'z', 'z', 'l', 'e', 'M', 'a', 's', 'k', 0,
    'S', 'w', 'i', 'z', 'z', 'l', 'e', 'B', 'l', 'u', 'e', 0,
    'm', 'i', 'p', 'M', 'a', 'x', 'L', 'e', 'v', 'e', 'l', 0,
    'U', 'I', 'n', 't', '8', '_', 'R', 'G', '3', 'B', '2', 0,
    'N', 'o', 'P', 'i', 'x', 'e', 'l', 'T', 'y', 'p', 'e', 0,
    'B', 'G', 'R', '_', 'I', 'n', 't', 'e', 'g', 'e', 'r', 0,
    'R', 'G', 'B', '_', 'I', 'n', 't', 'e', 'g', 'e', 'r', 0,
    'R', 'e', 'd', '_', 'I', 'n', 't', 'e', 'g', 'e', 'r', 0,
    'D', 'e', 'p', 't', 'h', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'R', 'G', 'B', '1', '6', '_', 'S', 'N', 'o', 'r', 'm', 0,
    'R', 'G', 'B', 'A', '8', '_', 'S', 'N', 'o', 'r', 'm', 0,
    'R', 'G', 'B', '1', '6', '_', 'U', 'N', 'o', 'r', 'm', 0,
    'R', 'G', 'B', 'A', '8', '_', 'U', 'N', 'o', 'r', 'm', 0,
    'i', 'm', 'a', 'g', 'e', 'H', 'e', 'i', 'g', 'h', 't', 0,
    's', 'e', 't', 'S', 'k', 'i', 'p', 'R', 'o', 'w', 's', 0,
    't', 'a', 'k', 'e', 'T', 'e', 'x', 't', 'u', 'r', 'e', 0,
    'b', 'i', 'n', 'd', 'D', 'e', 'f', 'a', 'u', 'l', 't', 0,
    's', 't', 'o', 'p', 'L', 'o', 'g', 'g', 'i', 'n', 'g', 0,
    'l', 'o', 'g', 'g', 'i', 'n', 'g', 'M', 'o', 'd', 'e', 0,
    'A', 'n', 'y', 'S', 'e', 'v', 'e', 'r', 'i', 't', 'y', 0,
    'L', 'o', 'w', 'S', 'e', 'v', 'e', 'r', 'i', 't', 'y', 0,
    'I', 'n', 'v', 'a', 'l', 'i', 'd', 'T', 'y', 'p', 'e', 0,
    'O', 't', 'h', 'e', 'r', 'S', 'o', 'u', 'r', 'c', 'e', 0,
    'h', 'a', 's', 'P', 'r', 'o', 'f', 'i', 'l', 'e', 's', 0,
    's', 'w', 'a', 'p', 'B', 'u', 'f', 'f', 'e', 'r', 's', 0,
    'd', 'o', 'n', 'e', 'C', 'u', 'r', 'r', 'e', 'n', 't', 0,
    'm', 'a', 'k', 'e', 'C', 'u', 'r', 'r', 'e', 'n', 't', 0,
    'D', 'y', 'n', 'a', 'm', 'i', 'c', 'C', 'o', 'p', 'y', 0,
    'D', 'y', 'n', 'a', 'm', 'i', 'c', 'R', 'e', 'a', 'd', 0,
    'D', 'y', 'n', 'a', 'm', 'i', 'c', 'D', 'r', 'a', 'w', 0,
    'I', 'n', 'd', 'e', 'x', 'B', 'u', 'f', 'f', 'e', 'r', 0,
    's', 'u', 'r', 'f', 'a', 'c', 'e', 'T', 'y', 'p', 'e', 0,
    'j', 'u', 'm', 'p', 'T', 'o', 'F', 'r', 'a', 'm', 'e', 0,
    '_', '_', 'i', 'm', 'a', 't', 'm', 'u', 'l', '_', '_', 0,
    'p', 'e', 'r', 's', 'p', 'e', 'c', 't', 'i', 'v', 'e', 0,
    'd', 'e', 't', 'e', 'r', 'm', 'i', 'n', 'a', 'n', 't', 0,
    'k', 'e', 'y', 'B', 'i', 'n', 'd', 'i', 'n', 'g', 's', 0,
    'P', 'r', 'e', 'f', 'e', 'r', 'e', 'n', 'c', 'e', 's', 0,
    'i', 's', 'A', 'n', 'i', 'm', 'a', 't', 'i', 'n', 'g', 0,
    'c', 'o', 'm', 'p', 'r', 'e', 's', 's', 'i', 'o', 'n', 0,
    'i', 'm', 'a', 'g', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    's', 'e', 't', 'C', 'l', 'i', 'p', 'R', 'e', 'c', 't', 0,
    'D', 'e', 'v', 'i', 'c', 'e', 'E', 'r', 'r', 'o', 'r', 0,
    'j', 'u', 'm', 'p', 'T', 'o', 'I', 'm', 'a', 'g', 'e', 0,
    's', 'i', 'z', 'e', 'I', 'n', 'B', 'y', 't', 'e', 's', 0,
    'p', 'i', 'x', 'e', 'l', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'p', 'a', 'i', 'n', 't', 'E', 'n', 'g', 'i', 'n', 'e', 0,
    'i', 's', 'G', 'r', 'a', 'y', 's', 'c', 'a', 'l', 'e', 0,
    'F', 'o', 'r', 'm', 'a', 't', '_', 'M', 'o', 'n', 'o', 0,
    'Q', 'I', 'c', 'o', 'n', 'E', 'n', 'g', 'i', 'n', 'e', 0,
    'Q', 'I', 'c', 'o', 'n', ':', ':', 'M', 'o', 'd', 'e', 0,
    'f', 'o', 'n', 't', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'i', 'n', 'p', 'u', 't', 'M', 'e', 't', 'h', 'o', 'd', 0,
    'm', 'o', 'd', 'a', 'l', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    's', 'c', 'r', 'e', 'e', 'n', 'A', 'd', 'd', 'e', 'd', 0,
    'f', 'o', 'c', 'u', 's', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'f', 'o', 'c', 'u', 's', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'o', 'v', 'e', 'r', 'l', 'i', 'n', 'e', 'P', 'o', 's', 0,
    'l', 'e', 'f', 't', 'B', 'e', 'a', 'r', 'i', 'n', 'g', 0,
    'l', 'i', 'n', 'e', 'S', 'p', 'a', 'c', 'i', 'n', 'g', 0,
    'G', 'e', 'n', 'e', 'r', 'a', 'l', 'F', 'o', 'n', 't', 0,
    's', 't', 'y', 'l', 'e', 'S', 't', 'r', 'i', 'n', 'g', 0,
    's', 'm', 'o', 'o', 't', 'h', 'S', 'i', 'z', 'e', 's', 0,
    'w', 'o', 'r', 'd', 'S', 'p', 'a', 'c', 'i', 'n', 'g', 0,
    's', 'u', 'b', 's', 't', 'i', 't', 'u', 't', 'e', 's', 0,
    's', 'e', 't', 'O', 'v', 'e', 'r', 'l', 'i', 'n', 'e', 0,
    'U', 'n', 's', 't', 'r', 'e', 't', 'c', 'h', 'e', 'd', 0,
    'S', 't', 'y', 'l', 'e', 'I', 't', 'a', 'l', 'i', 'c', 0,
    'S', 't', 'y', 'l', 'e', 'N', 'o', 'r', 'm', 'a', 'l', 0,
    'N', 'o', 'A', 'n', 't', 'i', 'a', 'l', 'i', 'a', 's', 0,
    'P', 'r', 'e', 'f', 'e', 'r', 'M', 'a', 't', 'c', 'h', 0,
    'g', 'e', 's', 't', 'u', 'r', 'e', 'T', 'y', 'p', 'e', 0,
    'Q', 'E', 'n', 't', 'e', 'r', 'E', 'v', 'e', 'n', 't', 0,
    's', 'c', 'r', 'o', 'l', 'l', 'S', 't', 'a', 't', 'e', 0,
    't', 'o', 'u', 'c', 'h', 'P', 'o', 'i', 'n', 't', 's', 0,
    'Q', 'T', 'o', 'u', 'c', 'h', 'E', 'v', 'e', 'n', 't', 0,
    'i', 's', 'A', 'm', 'b', 'i', 'g', 'u', 'o', 'u', 's', 0,
    'Q', 'C', 'l', 'o', 's', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'Q', 'P', 'a', 'i', 'n', 't', 'E', 'v', 'e', 'n', 't', 0,
    'Q', 'F', 'o', 'c', 'u', 's', 'E', 'v', 'e', 'n', 't', 0,
    'p', 'o', 'i', 'n', 't', 'e', 'r', 'T', 'y', 'p', 'e', 0,
    'X', 'F', 'r', 'e', 'e', 'E', 'r', 'a', 's', 'e', 'r', 0,
    'Q', 'W', 'h', 'e', 'e', 'l', 'E', 'v', 'e', 'n', 't', 0,
    'Q', 'H', 'o', 'v', 'e', 'r', 'E', 'v', 'e', 'n', 't', 0,
    'Q', 'M', 'o', 'u', 's', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'Q', 'I', 'n', 'p', 'u', 't', 'E', 'v', 'e', 'n', 't', 0,
    's', 'e', 't', 'M', 'i', 'm', 'e', 'D', 'a', 't', 'a', 0,
    'f', 'o', 'c', 'a', 'l', 'R', 'a', 'd', 'i', 'u', 's', 0,
    'P', 'e', 'r', 'f', 'e', 'c', 't', 'B', 'l', 'u', 'e', 0,
    'G', 'a', 'g', 'a', 'r', 'i', 'n', 'V', 'i', 'e', 'w', 0,
    'N', 'o', 'r', 's', 'e', 'B', 'e', 'a', 'u', 't', 'y', 0,
    'S', 'm', 'a', 'r', 't', 'I', 'n', 'd', 'i', 'g', 'o', 0,
    'R', 'o', 'y', 'a', 'l', 'G', 'a', 'r', 'd', 'e', 'n', 0,
    'O', 'r', 'a', 'n', 'g', 'e', 'J', 'u', 'i', 'c', 'e', 0,
    'A', 'b', 'o', 'v', 'e', 'T', 'h', 'e', 'S', 'k', 'y', 0,
    'F', 'l', 'y', 'i', 'n', 'g', 'L', 'e', 'm', 'o', 'n', 0,
    'F', 'r', 'o', 'z', 'e', 'n', 'B', 'e', 'r', 'r', 'y', 0,
    'C', 'r', 'y', 's', 't', 'a', 'l', 'l', 'i', 'n', 'e', 0,
    'S', 't', 'r', 'o', 'n', 'g', 'S', 't', 'i', 'c', 'k', 0,
    'C', 'l', 'o', 'u', 'd', 'y', 'A', 'p', 'p', 'l', 'e', 0,
    'S', 'm', 'i', 'l', 'i', 'n', 'g', 'R', 'a', 'i', 'n', 0,
    'S', 'u', 'm', 'm', 'e', 'r', 'G', 'a', 'm', 'e', 's', 0,
    'C', 'o', 'c', 'h', 'i', 't', 'i', 'L', 'a', 'k', 'e', 0,
    'C', 'o', 'l', 'd', 'E', 'v', 'e', 'n', 'i', 'n', 'g', 0,
    'P', 'r', 'e', 'm', 'i', 'u', 'm', 'D', 'a', 'r', 'k', 0,
    'C', 'l', 'e', 'a', 'n', 'M', 'i', 'r', 'r', 'o', 'r', 0,
    'H', 'e', 'a', 'v', 'e', 'n', 'P', 'e', 'a', 'c', 'h', 0,
    'S', 'o', 'f', 't', 'C', 'h', 'e', 'r', 'i', 's', 'h', 0,
    'S', 'w', 'e', 'e', 't', 'P', 'e', 'r', 'i', 'o', 'd', 0,
    'D', 'i', 'r', 't', 'y', 'B', 'e', 'a', 'u', 't', 'y', 0,
    'F', 'e', 'b', 'r', 'u', 'a', 'r', 'y', 'I', 'n', 'k', 0,
    'S', 't', 'r', 'o', 'n', 'g', 'B', 'l', 'i', 's', 's', 0,
    'A', 'w', 'e', 's', 'o', 'm', 'e', 'P', 'i', 'n', 'e', 0,
    'Z', 'e', 'u', 's', 'M', 'i', 'r', 'a', 'c', 'l', 'e', 0,
    'H', 'a', 'p', 'p', 'y', 'F', 'i', 's', 'h', 'e', 'r', 0,
    'M', 'o', 'r', 'p', 'h', 'e', 'u', 's', 'D', 'e', 'n', 0,
    'M', 'a', 'l', 'i', 'b', 'u', 'B', 'e', 'a', 'c', 'h', 0,
    'R', 'i', 'p', 'e', 'M', 'a', 'l', 'i', 'n', 'k', 'a', 0,
    'L', 'o', 'g', 'i', 'c', 'a', 'l', 'M', 'o', 'd', 'e', 0,
    's', 'a', 't', 'u', 'r', 'a', 't', 'i', 'o', 'n', 'F', 0,
    't', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'e', 'd', 0,
    'u', 'p', 'd', 'a', 't', 'e', 'B', 'l', 'o', 'c', 'k', 0,
    'p', 'a', 'i', 'n', 't', 'D', 'e', 'v', 'i', 'c', 'e', 0,
    's', 'e', 't', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'S', 'o', 'r', 't', 'R', 'o', 'l', 'e', 0,
    'c', 'u', 's', 't', 'o', 'm', 'E', 'v', 'e', 'n', 't', 0,
    's', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'e', 'v', 'e', 'n', 't', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'Q', 'Q', 'u', 'a', 't', 'e', 'r', 'n', 'i', 'o', 'n', 0,
    'Q', 'T', 'e', 'x', 't', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'Q', 'T', 'e', 'x', 't', 'L', 'e', 'n', 'g', 't', 'h', 0,
    '_', '_', 'd', 'e', 'l', 'i', 't', 'e', 'm', '_', '_', 0,
    '_', '_', 's', 'e', 't', 'i', 't', 'e', 'm', '_', '_', 0,
    'i', 'n', 't', 'e', 'r', 's', 'e', 'c', 't', 'e', 'd', 0,
    'e', 'r', 'r', 'o', 'r', 'S', 't', 'r', 'i', 'n', 'g', 0,
    's', 'e', 't', 'F', 'i', 'l', 'e', 'N', 'a', 'm', 'e', 0,
    'C', 'o', 'n', 't', 'e', 'x', 't', 'M', 'e', 'n', 'u', 0,
    'd', 'e', 's', 'c', 'r', 'i', 'p', 't', 'i', 'o', 'n', 0,
    'l', 'a', 's', 't', 'I', 'n', 'd', 'e', 'x', 'O', 'f', 0,
    '_', '_', 'g', 'e', 't', 'i', 't', 'e', 'm', '_', '_', 0,
    'd', 'a', 't', 'a', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    's', 'e', 't', 'I', 't', 'e', 'm', 'D', 'a', 't', 'a', 0,
    'o', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 0,
    'h', 'a', 's', 'C', 'h', 'i', 'l', 'd', 'r', 'e', 'n', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 'C', 'o', 'u', 'n', 't', 0,
    'u', 'p', 'd', 'a', 't', 'e', 'S', 't', 'a', 't', 'e', 0,
    'D', 'a', 's', 'h', 'D', 'o', 't', 'L', 'i', 'n', 'e', 0,
    'A', 'l', 'i', 'g', 'n', 'B', 'o', 't', 't', 'o', 'm', 0,
    'P', 'y', 'Q', 't', '5', '.', 'Q', 't', 'G', 'u', 'i', 0,
    'v', 'i', 's', 'i', 'b', 'i', 'l', 'i', 't', 'y', 0,
    't', 'o', 'u', 'c', 'h', 'E', 'v', 'e', 'n', 't', 0,
    'w', 'h', 'e', 'e', 'l', 'E', 'v', 'e', 'n', 't', 0,
    's', 'h', 'o', 'w', 'N', 'o', 'r', 'm', 'a', 'l', 0,
    'i', 's', 'T', 'o', 'p', 'L', 'e', 'v', 'e', 'l', 0,
    't', 'o', 'V', 'e', 'c', 't', 'o', 'r', '2', 'D', 0,
    't', 'o', 'V', 'e', 'c', 't', 'o', 'r', '3', 'D', 0,
    'A', 'c', 'c', 'e', 'p', 't', 'a', 'b', 'l', 'e', 0,
    'Q', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'o', 'r', 0,
    'i', 's', 'R', 'o', 't', 'a', 't', 'i', 'n', 'g', 0,
    'q', 'u', 'a', 'd', 'T', 'o', 'Q', 'u', 'a', 'd', 0,
    'm', 'e', 'r', 'g', 'e', 'C', 'e', 'l', 'l', 's', 0,
    'Q', 'T', 'e', 'x', 't', 'T', 'a', 'b', 'l', 'e', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 'S', 'p', 'a', 'n', 0,
    's', 'e', 't', 'T', 'a', 'b', 'S', 't', 'o', 'p', 0,
    'M', 'a', 'n', 'u', 'a', 'l', 'W', 'r', 'a', 'p', 0,
    'Q', 'T', 'e', 'x', 't', 'B', 'l', 'o', 'c', 'k', 0,
    'Q', 'T', 'e', 'x', 't', 'F', 'r', 'a', 'm', 'e', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'I', 't', 'e', 'm', 0,
    'i', 't', 'e', 'm', 'N', 'u', 'm', 'b', 'e', 'r', 0,
    't', 'e', 'x', 't', 'L', 'e', 'n', 'g', 't', 'h', 0,
    's', 'e', 't', 'F', 'o', 'r', 'm', 'a', 't', 's', 0,
    'd', 'r', 'a', 'w', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'L', 'i', 'n', 'e', 0,
    's', 'e', 't', 'D', 'e', 's', 'c', 'e', 'n', 't', 0,
    't', 'o', 'p', 'P', 'a', 'd', 'd', 'i', 'n', 'g', 0,
    's', 'e', 't', 'C', 'o', 'l', 'u', 'm', 'n', 's', 0,
    's', 'e', 't', 'P', 'a', 'd', 'd', 'i', 'n', 'g', 0,
    'F', 'l', 'o', 'a', 't', 'R', 'i', 'g', 'h', 't', 0,
    'L', 'i', 's', 't', 'S', 'q', 'u', 'a', 'r', 'e', 0,
    'L', 'i', 's', 't', 'C', 'i', 'r', 'c', 'l', 'e', 0,
    'l', 'i', 'n', 'e', 'H', 'e', 'i', 'g', 'h', 't', 0,
    't', 'e', 'x', 't', 'I', 'n', 'd', 'e', 'n', 't', 0,
    'a', 'n', 'c', 'h', 'o', 'r', 'H', 'r', 'e', 'f', 0,
    'f', 'o', 'n', 't', 'I', 't', 'a', 'l', 'i', 'c', 0,
    'f', 'o', 'n', 't', 'W', 'e', 'i', 'g', 'h', 't', 0,
    'f', 'o', 'n', 't', 'F', 'a', 'm', 'i', 'l', 'y', 0,
    'p', 'r', 'o', 'p', 'e', 'r', 't', 'i', 'e', 's', 0,
    'I', 'm', 'a', 'g', 'e', 'W', 'i', 'd', 't', 'h', 0,
    'F', 'r', 'a', 'm', 'e', 'W', 'i', 'd', 't', 'h', 0,
    'L', 'i', 's', 't', 'I', 'n', 'd', 'e', 'n', 't', 0,
    'A', 'n', 'c', 'h', 'o', 'r', 'N', 'a', 'm', 'e', 0,
    'O', 'u', 't', 'l', 'i', 'n', 'e', 'P', 'e', 'n', 0,
    'U', 's', 'e', 'r', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'U', 's', 'e', 'r', 'F', 'o', 'r', 'm', 'a', 't', 0,
    's', 'e', 't', 'B', 'a', 's', 'e', 'U', 'r', 'l', 0,
    'f', 'i', 'r', 's', 't', 'B', 'l', 'o', 'c', 'k', 0,
    'b', 'l', 'o', 'c', 'k', 'C', 'o', 'u', 'n', 't', 0,
    'a', 'd', 'j', 'u', 's', 't', 'S', 'i', 'z', 'e', 0,
    'i', 'd', 'e', 'a', 'l', 'W', 'i', 'd', 't', 'h', 0,
    'a', 'l', 'l', 'F', 'o', 'r', 'm', 'a', 't', 's', 0,
    'i', 's', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'd', 0,
    'i', 'n', 's', 'e', 'r', 't', 'H', 't', 'm', 'l', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'L', 'i', 's', 't', 0,
    'i', 'n', 's', 'e', 'r', 't', 'L', 'i', 's', 't', 0,
    'a', 't', 'B', 'l', 'o', 'c', 'k', 'E', 'n', 'd', 0,
    'c', 'h', 'a', 'r', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'd', 'e', 'l', 'e', 't', 'e', 'C', 'h', 'a', 'r', 0,
    'i', 'n', 's', 'e', 'r', 't', 'T', 'e', 'x', 't', 0,
    'K', 'e', 'e', 'p', 'A', 'n', 'c', 'h', 'o', 'r', 0,
    'M', 'o', 'v', 'e', 'A', 'n', 'c', 'h', 'o', 'r', 0,
    'c', 'o', 'l', 'o', 'r', 'S', 'p', 'a', 'c', 'e', 0,
    's', 'e', 't', 'O', 'p', 't', 'i', 'o', 'n', 's', 0,
    't', 'e', 's', 't', 'O', 'p', 't', 'i', 'o', 'n', 0,
    't', 'e', 'x', 't', 'O', 'p', 't', 'i', 'o', 'n', 0,
    't', 'e', 'x', 't', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'a', 'p', 'p', 'e', 'n', 'd', 'R', 'o', 'w', 's', 0,
    's', 'e', 't', 'T', 'o', 'o', 'l', 'T', 'i', 'p', 0,
    'i', 's', 'T', 'r', 'i', 's', 't', 'a', 't', 'e', 0,
    'i', 's', 'E', 'd', 'i', 't', 'a', 'b', 'l', 'e', 0,
    'c', 'h', 'e', 'c', 'k', 'S', 't', 'a', 't', 'e', 0,
    't', 'a', 'k', 'e', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'g', 'r', 'a', 'b', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'i', 's', 'P', 'o', 'r', 't', 'r', 'a', 'i', 't', 0,
    'm', 'a', 'p', 'B', 'e', 't', 'w', 'e', 'e', 'n', 0,
    'f', 'r', 'o', 'm', 'A', 'r', 'g', 'b', '3', '2', 0,
    'u', 'n', 'i', 't', 's', 'P', 'e', 'r', 'E', 'm', 0,
    'f', 'a', 'm', 'i', 'l', 'y', 'N', 'a', 'm', 'e', 0,
    'c', 'o', 'n', 'j', 'u', 'g', 'a', 't', 'e', 'd', 0,
    'r', 'o', 't', 'a', 't', 'i', 'o', 'n', 'T', 'o', 0,
    't', 'o', 'V', 'e', 'c', 't', 'o', 'r', '4', 'D', 0,
    'c', 'a', 'c', 'h', 'e', 'L', 'i', 'm', 'i', 't', 0,
    'a', 'l', 'p', 'h', 'a', 'U', 's', 'a', 'g', 'e', 0,
    'y', 'e', 'l', 'l', 'o', 'w', 'S', 'i', 'z', 'e', 0,
    'c', 'o', 'l', 'o', 'r', 'M', 'o', 'd', 'e', 'l', 0,
    's', 'e', 't', 'P', 'i', 'c', 't', 'u', 'r', 'e', 0,
    'p', 'a', 'r', 'a', 'm', 'e', 't', 'e', 'r', 's', 0,
    'Q', 'P', 'i', 'c', 't', 'u', 'r', 'e', 'I', 'O', 0,
    'i', 's', 'C', 'o', 's', 'm', 'e', 't', 'i', 'c', 0,
    'p', 'd', 'f', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    's', 'e', 't', 'C', 'r', 'e', 'a', 't', 'o', 'r', 0,
    'Q', 'P', 'd', 'f', 'W', 'r', 'i', 't', 'e', 'r', 0,
    'i', 's', 'B', 'r', 'u', 's', 'h', 'S', 'e', 't', 0,
    'b', 'u', 't', 't', 'o', 'n', 'T', 'e', 'x', 't', 0,
    'b', 'r', 'i', 'g', 'h', 't', 'T', 'e', 'x', 't', 0,
    'w', 'i', 'n', 'd', 'o', 'w', 'T', 'e', 'x', 't', 0,
    'B', 'u', 't', 't', 'o', 'n', 'T', 'e', 'x', 't', 0,
    'B', 'r', 'i', 'g', 'h', 't', 'T', 'e', 'x', 't', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'T', 'e', 'x', 't', 0,
    'f', 'o', 'r', 'e', 'g', 'r', 'o', 'u', 'n', 'd', 0,
    'd', 'a', 's', 'h', 'O', 'f', 'f', 's', 'e', 't', 0,
    'm', 'i', 't', 'e', 'r', 'L', 'i', 'm', 'i', 't', 0,
    's', 'u', 'b', 't', 'r', 'a', 'c', 't', 'e', 'd', 0,
    't', 'o', 'R', 'e', 'v', 'e', 'r', 's', 'e', 'd', 0,
    'a', 'd', 'd', 'P', 'o', 'l', 'y', 'g', 'o', 'n', 0,
    'a', 'd', 'd', 'E', 'l', 'l', 'i', 'p', 's', 'e', 0,
    'P', 'o', 's', 't', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'M', 'a', 'c', 'P', 'r', 'i', 'n', 't', 'e', 'r', 0,
    'C', 'o', 'n', 'v', 'e', 'x', 'M', 'o', 'd', 'e', 0,
    'D', 'i', 'r', 't', 'y', 'H', 'i', 'n', 't', 's', 0,
    'D', 'i', 'r', 't', 'y', 'B', 'r', 'u', 's', 'h', 0,
    'B', 'l', 'e', 'n', 'd', 'M', 'o', 'd', 'e', 's', 0,
    'P', 'o', 'r', 't', 'e', 'r', 'D', 'u', 'f', 'f', 0,
    'A', 'l', 'p', 'h', 'a', 'B', 'l', 'e', 'n', 'd', 0,
    'P', 'd', 'm', 'W', 'i', 'd', 't', 'h', 'M', 'M', 0,
    'O', 'p', 'a', 'q', 'u', 'e', 'H', 'i', 'n', 't', 0,
    's', 'o', 'u', 'r', 'c', 'e', 'L', 'e', 'f', 't', 0,
    'd', 'r', 'a', 'w', 'P', 'i', 'x', 'm', 'a', 'p', 0,
    'd', 'r', 'a', 'w', 'P', 'o', 'i', 'n', 't', 's', 0,
    's', 't', 'r', 'o', 'k', 'e', 'P', 'a', 't', 'h', 0,
    'c', 'l', 'i', 'p', 'R', 'e', 'g', 'i', 'o', 'n', 0,
    'b', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 0,
    'r', 'e', 'c', 't', 'P', 'i', 'x', 'e', 'l', 's', 0,
    'r', 'e', 'c', 't', 'P', 'o', 'i', 'n', 't', 's', 0,
    's', 'i', 'z', 'e', 'P', 'i', 'x', 'e', 'l', 's', 0,
    's', 'i', 'z', 'e', 'P', 'o', 'i', 'n', 't', 's', 0,
    'F', 'u', 'z', 'z', 'y', 'M', 'a', 't', 'c', 'h', 0,
    'r', 'e', 's', 'o', 'l', 'u', 't', 'i', 'o', 'n', 0,
    'l', 'e', 'f', 't', 'M', 'a', 'r', 'g', 'i', 'n', 0,
    'm', 'i', 'n', 'M', 'a', 'r', 'g', 'i', 'n', 's', 0,
    'M', 'i', 'l', 'l', 'i', 'm', 'e', 't', 'e', 'r', 0,
    'p', 'a', 'g', 'e', 'L', 'a', 'y', 'o', 'u', 't', 0,
    's', 'e', 't', 'M', 'a', 'r', 'g', 'i', 'n', 's', 0,
    'p', 'a', 'g', 'e', 'S', 'i', 'z', 'e', 'M', 'M', 0,
    'E', 'n', 'v', 'e', 'l', 'o', 'p', 'e', '1', '0', 0,
    'E', 'n', 'v', 'e', 'l', 'o', 'p', 'e', 'D', 'L', 0,
    'E', 'n', 'v', 'e', 'l', 'o', 'p', 'e', 'C', '5', 0,
    'N', 'P', 'a', 'p', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    'E', 'n', 'v', 'e', 'l', 'o', 'p', 'e', '1', '4', 0,
    'E', 'n', 'v', 'e', 'l', 'o', 'p', 'e', '1', '2', 0,
    'E', 'n', 'v', 'e', 'l', 'o', 'p', 'e', '1', '1', 0,
    'E', 'n', 'v', 'e', 'l', 'o', 'p', 'e', 'C', '7', 0,
    'E', 'n', 'v', 'e', 'l', 'o', 'p', 'e', 'C', '6', 0,
    'E', 'n', 'v', 'e', 'l', 'o', 'p', 'e', 'C', '4', 0,
    'E', 'n', 'v', 'e', 'l', 'o', 'p', 'e', 'C', '3', 0,
    'E', 'n', 'v', 'e', 'l', 'o', 'p', 'e', 'C', '2', 0,
    'E', 'n', 'v', 'e', 'l', 'o', 'p', 'e', 'C', '1', 0,
    'E', 'n', 'v', 'e', 'l', 'o', 'p', 'e', 'C', '0', 0,
    'E', 'n', 'v', 'e', 'l', 'o', 'p', 'e', 'B', '6', 0,
    'E', 'n', 'v', 'e', 'l', 'o', 'p', 'e', 'B', '5', 0,
    'E', 'n', 'v', 'e', 'l', 'o', 'p', 'e', 'B', '4', 0,
    'L', 'e', 't', 't', 'e', 'r', 'P', 'l', 'u', 's', 0,
    'L', 'e', 'g', 'a', 'l', 'E', 'x', 't', 'r', 'a', 0,
    'p', 'a', 'i', 'n', 't', 'E', 'v', 'e', 'n', 't', 0,
    's', 'e', 't', 'O', 'p', 'a', 'c', 'i', 't', 'y', 0,
    'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 'R', 0,
    'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 'T', 0,
    'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 'S', 0,
    'A', 'l', 'p', 'h', 'a', 'V', 'a', 'l', 'u', 'e', 0,
    'G', 'r', 'e', 'e', 'n', 'V', 'a', 'l', 'u', 'e', 0,
    'S', 'w', 'i', 'z', 'z', 'l', 'e', 'R', 'e', 'd', 0,
    'h', 'a', 's', 'F', 'e', 'a', 't', 'u', 'r', 'e', 0,
    'F', 'l', 'o', 'a', 't', '1', '6', 'O', 'E', 'S', 0,
    'R', 'G', '_', 'I', 'n', 't', 'e', 'g', 'e', 'r', 0,
    'S', 'R', 'G', 'B', '8', '_', 'E', 'T', 'C', '2', 0,
    'R', 'G', 'B', 'A', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'R', 'G', '1', '6', '_', 'S', 'N', 'o', 'r', 'm', 0,
    'R', 'G', 'B', '8', '_', 'S', 'N', 'o', 'r', 'm', 0,
    'R', 'G', '1', '6', '_', 'U', 'N', 'o', 'r', 'm', 0,
    'R', 'G', 'B', '8', '_', 'U', 'N', 'o', 'r', 'm', 0,
    'g', 'e', 'n', 'M', 'i', 'p', 'M', 'a', 'p', 's', 0,
    'i', 's', 'C', 'o', 'm', 'p', 'i', 'l', 'e', 'd', 0,
    's', 'o', 'u', 'r', 'c', 'e', 'C', 'o', 'd', 'e', 0,
    's', 'h', 'a', 'd', 'e', 'r', 'T', 'y', 'p', 'e', 0,
    's', 'k', 'i', 'p', 'P', 'i', 'x', 'e', 'l', 's', 0,
    's', 'k', 'i', 'p', 'I', 'm', 'a', 'g', 'e', 's', 0,
    's', 'e', 't', 'S', 'a', 'm', 'p', 'l', 'e', 's', 0,
    'a', 't', 't', 'a', 'c', 'h', 'm', 'e', 'n', 't', 0,
    'l', 'o', 'g', 'M', 'e', 's', 's', 'a', 'g', 'e', 0,
    's', 'e', 'v', 'e', 'r', 'i', 't', 'i', 'e', 's', 0,
    'M', 'a', 'r', 'k', 'e', 'r', 'T', 'y', 'p', 'e', 0,
    's', 'e', 't', 'P', 'r', 'o', 'f', 'i', 'l', 'e', 0,
    'i', 's', 'O', 'p', 'e', 'n', 'G', 'L', 'E', 'S', 0,
    'e', 'x', 't', 'e', 'n', 's', 'i', 'o', 'n', 's', 0,
    'a', 'r', 'e', 'S', 'h', 'a', 'r', 'i', 'n', 'g', 0,
    's', 'h', 'a', 'r', 'e', 'G', 'r', 'o', 'u', 'p', 0,
    'R', 'a', 'n', 'g', 'e', 'W', 'r', 'i', 't', 'e', 0,
    'S', 't', 'a', 't', 'i', 'c', 'C', 'o', 'p', 'y', 0,
    'S', 't', 'a', 't', 'i', 'c', 'R', 'e', 'a', 'd', 0,
    'S', 't', 'a', 't', 'i', 'c', 'D', 'r', 'a', 'w', 0,
    'S', 't', 'r', 'e', 'a', 'm', 'C', 'o', 'p', 'y', 0,
    'S', 't', 'r', 'e', 'a', 'm', 'R', 'e', 'a', 'd', 0,
    'S', 't', 'r', 'e', 'a', 'm', 'D', 'r', 'a', 'w', 0,
    'f', 'r', 'a', 'm', 'e', 'C', 'o', 'u', 'n', 't', 0,
    '_', '_', 'm', 'a', 't', 'm', 'u', 'l', '_', '_', 0,
    'i', 'n', 'v', 'e', 'r', 't', 'i', 'b', 'l', 'e', 0,
    'U', 'n', 'k', 'n', 'o', 'w', 'n', 'K', 'e', 'y', 0,
    'E', 'x', 'a', 'c', 't', 'M', 'a', 't', 'c', 'h', 0,
    'N', 'a', 't', 'i', 'v', 'e', 'T', 'e', 'x', 't', 0,
    's', 'e', 't', 'V', 'i', 's', 'i', 'b', 'l', 'e', 0,
    's', 'e', 't', 'S', 'u', 'b', 'T', 'y', 'p', 'e', 0,
    's', 'e', 't', 'Q', 'u', 'a', 'l', 'i', 't', 'y', 0,
    's', 'c', 'a', 'l', 'e', 'd', 'S', 'i', 'z', 'e', 0,
    'i', 'm', 'a', 'g', 'e', 'C', 'o', 'u', 'n', 't', 0,
    'E', 'n', 'd', 'i', 'a', 'n', 'n', 'e', 's', 's', 0,
    'p', 'i', 'x', 'e', 'l', 'C', 'o', 'l', 'o', 'r', 0,
    'c', 'o', 'l', 'o', 'r', 'C', 'o', 'u', 'n', 't', 0,
    't', 'r', 'u', 'e', 'M', 'a', 't', 'r', 'i', 'x', 0,
    'r', 'g', 'b', 'S', 'w', 'a', 'p', 'p', 'e', 'd', 0,
    'h', 'o', 'r', 'i', 'z', 'o', 'n', 't', 'a', 'l', 0,
    'p', 'i', 'x', 'e', 'l', 'I', 'n', 'd', 'e', 'x', 0,
    'c', 'o', 'l', 'o', 'r', 'T', 'a', 'b', 'l', 'e', 0,
    'I', 'n', 'v', 'e', 'r', 't', 'R', 'g', 'b', 'a', 0,
    'I', 's', 'N', 'u', 'l', 'l', 'H', 'o', 'o', 'k', 0,
    'a', 'c', 't', 'u', 'a', 'l', 'S', 'i', 'z', 'e', 0,
    'w', 'i', 'n', 'd', 'o', 'w', 'I', 'c', 'o', 'n', 0,
    's', 'e', 's', 's', 'i', 'o', 'n', 'K', 'e', 'y', 0,
    's', 't', 'y', 'l', 'e', 'H', 'i', 'n', 't', 's', 0,
    's', 'e', 't', 'P', 'a', 'l', 'e', 't', 't', 'e', 0,
    't', 'o', 'p', 'L', 'e', 'v', 'e', 'l', 'A', 't', 0,
    'a', 'l', 'l', 'W', 'i', 'n', 'd', 'o', 'w', 's', 0,
    's', 'e', 't', 'R', 'a', 'w', 'F', 'o', 'n', 't', 0,
    'Q', 'M', 'a', 't', 'r', 'i', 'x', '2', 'x', '2', 0,
    'Q', 'M', 'a', 't', 'r', 'i', 'x', '2', 'x', '3', 0,
    'Q', 'M', 'a', 't', 'r', 'i', 'x', '2', 'x', '4', 0,
    'Q', 'M', 'a', 't', 'r', 'i', 'x', '3', 'x', '2', 0,
    'Q', 'M', 'a', 't', 'r', 'i', 'x', '3', 'x', '3', 0,
    'Q', 'M', 'a', 't', 'r', 'i', 'x', '3', 'x', '4', 0,
    'Q', 'M', 'a', 't', 'r', 'i', 'x', '4', 'x', '2', 0,
    'i', 's', 'I', 'd', 'e', 'n', 't', 'i', 't', 'y', 0,
    'c', 'o', 'p', 'y', 'D', 'a', 't', 'a', 'T', 'o', 0,
    'Q', 'M', 'a', 't', 'r', 'i', 'x', '4', 'x', '3', 0,
    'i', 'n', 'F', 'o', 'n', 't', 'U', 'c', 's', '4', 0,
    'e', 'l', 'i', 'd', 'e', 'd', 'T', 'e', 'x', 't', 0,
    's', 'y', 's', 't', 'e', 'm', 'F', 'o', 'n', 't', 0,
    'i', 's', 'S', 'c', 'a', 'l', 'a', 'b', 'l', 'e', 0,
    'p', 'o', 'i', 'n', 't', 'S', 'i', 'z', 'e', 's', 0,
    'D', 'e', 'v', 'a', 'n', 'a', 'g', 'a', 'r', 'i', 0,
    'C', 'a', 'p', 'i', 't', 'a', 'l', 'i', 'z', 'e', 0,
    'i', 'n', 'i', 't', 'i', 'a', 'l', 'i', 'z', 'e', 0,
    's', 'u', 'b', 's', 't', 'i', 't', 'u', 't', 'e', 0,
    's', 'e', 't', 'R', 'a', 'w', 'N', 'a', 'm', 'e', 0,
    's', 'e', 't', 'R', 'a', 'w', 'M', 'o', 'd', 'e', 0,
    's', 'e', 't', 'S', 't', 'r', 'e', 't', 'c', 'h', 0,
    's', 'e', 't', 'K', 'e', 'r', 'n', 'i', 'n', 'g', 0,
    'f', 'i', 'x', 'e', 'd', 'P', 'i', 't', 'c', 'h', 0,
    'p', 'o', 'i', 'n', 't', 'S', 'i', 'z', 'e', 'F', 0,
    'A', 'n', 'y', 'S', 't', 'r', 'e', 't', 'c', 'h', 0,
    'E', 'x', 't', 'r', 'a', 'L', 'i', 'g', 'h', 't', 0,
    'D', 'e', 'c', 'o', 'r', 'a', 't', 'i', 'v', 'e', 0,
    'O', 'l', 'd', 'E', 'n', 'g', 'l', 'i', 's', 'h', 0,
    'T', 'y', 'p', 'e', 'W', 'r', 'i', 't', 'e', 'r', 0,
    'c', 'o', 'n', 't', 'e', 'n', 't', 'P', 'o', 's', 0,
    's', 'c', 'r', 'e', 'e', 'n', 'R', 'e', 'c', 't', 0,
    's', 'h', 'o', 'r', 't', 'c', 'u', 't', 'I', 'd', 0,
    'Q', 'H', 'e', 'l', 'p', 'E', 'v', 'e', 'n', 't', 0,
    'a', 'n', 's', 'w', 'e', 'r', 'R', 'e', 'c', 't', 0,
    'd', 'r', 'o', 'p', 'A', 'c', 't', 'i', 'o', 'n', 0,
    'Q', 'D', 'r', 'o', 'p', 'E', 'v', 'e', 'n', 't', 0,
    'Q', 'H', 'i', 'd', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'Q', 'S', 'h', 'o', 'w', 'E', 'v', 'e', 'n', 't', 0,
    'Q', 'M', 'o', 'v', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'F', 'o', 'u', 'r', 'D', 'M', 'o', 'u', 's', 'e', 0,
    'g', 'l', 'o', 'b', 'a', 'l', 'P', 'o', 's', 'F', 0,
    'a', 'n', 'g', 'l', 'e', 'D', 'e', 'l', 't', 'a', 0,
    'p', 'i', 'x', 'e', 'l', 'D', 'e', 'l', 't', 'a', 0,
    'd', 'r', 'a', 'g', 'C', 'u', 'r', 's', 'o', 'r', 0,
    's', 'e', 't', 'H', 'o', 't', 'S', 'p', 'o', 't', 0,
    'Q', 'C', 'l', 'i', 'p', 'b', 'o', 'a', 'r', 'd', 0,
    'f', 'o', 'c', 'a', 'l', 'P', 'o', 'i', 'n', 't', 0,
    's', 'e', 't', 'C', 'o', 'l', 'o', 'r', 'A', 't', 0,
    'F', 'r', 'o', 'z', 'e', 'n', 'H', 'e', 'a', 't', 0,
    'L', 'i', 'l', 'y', 'M', 'e', 'a', 'd', 'o', 'w', 0,
    'S', 'u', 'p', 'r', 'e', 'm', 'e', 'S', 'k', 'y', 0,
    'D', 'e', 'e', 'p', 'R', 'e', 'l', 'i', 'e', 'f', 0,
    'F', 'r', 'e', 's', 'h', 'O', 'a', 's', 'i', 's', 0,
    'W', 'i', 't', 'c', 'h', 'D', 'a', 'n', 'c', 'e', 0,
    'S', 'a', 'n', 'd', 'S', 't', 'r', 'i', 'k', 'e', 0,
    'F', 'o', 'r', 'e', 's', 't', 'I', 'n', 'e', 'i', 0,
    'S', 'p', 'a', 'c', 'e', 'S', 'h', 'i', 'f', 't', 0,
    'H', 'i', 'g', 'h', 'F', 'l', 'i', 'g', 'h', 't', 0,
    'F', 'r', 'u', 'i', 't', 'B', 'l', 'e', 'n', 'd', 0,
    'G', 'l', 'a', 's', 's', 'W', 'a', 't', 'e', 'r', 0,
    'S', 'o', 'l', 'i', 'd', 'S', 't', 'o', 'n', 'e', 0,
    'G', 'e', 'n', 't', 'l', 'e', 'C', 'a', 'r', 'e', 0,
    'Y', 'o', 'u', 'n', 'g', 'G', 'r', 'a', 's', 's', 0,
    'M', 'a', 'r', 'b', 'l', 'e', 'W', 'a', 'l', 'l', 0,
    'D', 'e', 'n', 's', 'e', 'W', 'a', 't', 'e', 'r', 0,
    'L', 'e', 'C', 'o', 'c', 'k', 't', 'a', 'i', 'l', 0,
    'P', 'a', 'r', 't', 'y', 'B', 'l', 'i', 's', 's', 0,
    'A', 'm', 'o', 'u', 'r', 'A', 'm', 'o', 'u', 'r', 0,
    'J', 'a', 'p', 'a', 'n', 'B', 'l', 'u', 's', 'h', 0,
    'D', 'e', 's', 'e', 'r', 't', 'H', 'u', 'm', 'p', 0,
    'A', 'q', 'u', 'a', 'S', 'p', 'l', 'a', 's', 'h', 0,
    'N', 'i', 'g', 'h', 't', 'P', 'a', 'r', 't', 'y', 0,
    'W', 'i', 'd', 'e', 'M', 'a', 't', 'r', 'i', 'x', 0,
    'G', 'r', 'e', 'a', 't', 'W', 'h', 'a', 'l', 'e', 0,
    'S', 'h', 'a', 'd', 'y', 'W', 'a', 't', 'e', 'r', 0,
    'S', 'h', 'a', 'r', 'p', 'B', 'l', 'u', 'e', 's', 0,
    'G', 'r', 'o', 'w', 'n', 'E', 'a', 'r', 'l', 'y', 0,
    'M', 'i', 'x', 'e', 'd', 'H', 'o', 'p', 'e', 's', 0,
    'S', 'h', 'y', 'R', 'a', 'i', 'n', 'b', 'o', 'w', 0,
    'T', 'r', 'u', 'e', 'S', 'u', 'n', 's', 'e', 't', 0,
    'D', 'u', 's', 't', 'y', 'G', 'r', 'a', 's', 's', 0,
    'W', 'i', 'n', 't', 'e', 'r', 'N', 'e', 'v', 'a', 0,
    'J', 'u', 'i', 'c', 'y', 'P', 'e', 'a', 'c', 'h', 0,
    'N', 'o', 'G', 'r', 'a', 'd', 'i', 'e', 'n', 't', 0,
    'O', 'b', 'j', 'e', 'c', 't', 'M', 'o', 'd', 'e', 0,
    's', 'e', 't', 'T', 'e', 'x', 't', 'u', 'r', 'e', 0,
    'f', 'r', 'o', 'm', 'R', 'g', 'b', 'a', '6', '4', 0,
    'l', 'i', 'g', 'h', 't', 'n', 'e', 's', 's', 'F', 0,
    's', 'a', 't', 'u', 'r', 'a', 't', 'i', 'o', 'n', 0,
    'c', 'o', 'l', 'o', 'r', 'N', 'a', 'm', 'e', 's', 0,
    'b', 'e', 'g', 'i', 'n', 'P', 'a', 'i', 'n', 't', 0,
    'd', 'r', 'a', 'w', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'o', 'b', 'j', 'e', 'c', 't', 'T', 'y', 'p', 'e', 0,
    's', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', 0,
    'a', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 's', 0,
    'l', 'i', 'n', 'e', 'N', 'u', 'm', 'b', 'e', 'r', 0,
    'e', 'x', 'a', 'c', 't', 'M', 'a', 't', 'c', 'h', 0,
    't', 'r', 'a', 'n', 's', 'p', 'o', 's', 'e', 'd', 0,
    'n', 'o', 'r', 'm', 'a', 'l', 'i', 'z', 'e', 'd', 0,
    'N', 'o', 't', 'R', 'u', 'n', 'n', 'i', 'n', 'g', 0,
    'd', 'o', 't', 'P', 'r', 'o', 'd', 'u', 'c', 't', 0,
    'c', 'h', 'i', 'l', 'd', 'E', 'v', 'e', 'n', 't', 0,
    't', 'i', 'm', 'e', 'r', 'E', 'v', 'e', 'n', 't', 0,
    'Q', 'M', 'a', 't', 'r', 'i', 'x', '4', 'x', '4', 0,
    'Q', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 0,
    's', 'e', 't', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'V', 'i', 'e', 't', 'n', 'a', 'm', 'e', 's', 'e', 0,
    't', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', 'd', 0,
    'i', 'n', 't', 'e', 'r', 's', 'e', 'c', 't', 's', 0,
    'f', 'r', 'o', 'm', 'S', 't', 'r', 'i', 'n', 'g', 0,
    's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    's', 'i', 'm', 'p', 'l', 'i', 'f', 'i', 'e', 'd', 0,
    '_', '_', 'r', 's', 'h', 'i', 'f', 't', '_', '_', 0,
    '_', '_', 'l', 's', 'h', 'i', 'f', 't', '_', '_', 0,
    'i', 's', 'D', 'e', 't', 'a', 'c', 'h', 'e', 'd', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'R', 'o', 'w', 's', 0,
    'i', 'n', 's', 'e', 'r', 't', 'R', 'o', 'w', 's', 0,
    'h', 'e', 'a', 'd', 'e', 'r', 'D', 'a', 't', 'a', 0,
    '_', '_', 'i', 'n', 'v', 'e', 'r', 't', '_', '_', 0,
    'f', 'r', 'o', 'm', 'W', 'i', 'n', 'I', 'd', 0,
    'h', 'i', 'd', 'e', 'E', 'v', 'e', 'n', 't', 0,
    's', 'h', 'o', 'w', 'E', 'v', 'e', 'n', 't', 0,
    'm', 'o', 'v', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'i', 's', 'E', 'x', 'p', 'o', 's', 'e', 'd', 0,
    'u', 'n', 'p', 'r', 'o', 'j', 'e', 'c', 't', 0,
    's', 'e', 't', 'R', 'e', 'g', 'E', 'x', 'p', 0,
    'f', 'r', 'o', 'm', 'S', 'c', 'a', 'l', 'e', 0,
    'i', 's', 'S', 'c', 'a', 'l', 'i', 'n', 'g', 0,
    's', 'e', 't', 'M', 'a', 't', 'r', 'i', 'x', 0,
    'T', 'x', 'P', 'r', 'o', 'j', 'e', 'c', 't', 0,
    's', 'p', 'l', 'i', 't', 'C', 'e', 'l', 'l', 0,
    'd', 'e', 'l', 'i', 'm', 'i', 't', 'e', 'r', 0,
    'C', 'e', 'n', 't', 'e', 'r', 'T', 'a', 'b', 0,
    'u', 's', 'e', 'r', 'S', 't', 'a', 't', 'e', 0,
    'b', 'l', 'o', 'c', 'k', 'L', 'i', 's', 't', 0,
    'Q', 'T', 'e', 'x', 't', 'L', 'i', 's', 't', 0,
    't', 'e', 'x', 't', 'S', 't', 'a', 'r', 't', 0,
    'x', 'T', 'o', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'c', 'u', 'r', 's', 'o', 'r', 'T', 'o', 'X', 0,
    'Q', 'T', 'e', 'x', 't', 'L', 'i', 'n', 'e', 0,
    'g', 'l', 'y', 'p', 'h', 'R', 'u', 'n', 's', 0,
    'S', 'k', 'i', 'p', 'W', 'o', 'r', 'd', 's', 0,
    'e', 'n', 'd', 'L', 'a', 'y', 'o', 'u', 't', 0,
    's', 'e', 't', 'A', 's', 'c', 'e', 'n', 't', 0,
    's', 'e', 't', 'M', 'a', 'r', 'g', 'i', 'n', 0,
    's', 'e', 't', 'B', 'o', 'r', 'd', 'e', 'r', 0,
    'F', 'l', 'o', 'a', 't', 'L', 'e', 'f', 't', 0,
    's', 'e', 't', 'I', 'n', 'd', 'e', 'n', 't', 0,
    's', 'e', 't', 'A', 'n', 'c', 'h', 'o', 'r', 0,
    'I', 'm', 'a', 'g', 'e', 'N', 'a', 'm', 'e', 0,
    'L', 'i', 's', 't', 'S', 't', 'y', 'l', 'e', 0,
    't', 'o', 'R', 'a', 'w', 'T', 'e', 'x', 't', 0,
    'R', 'e', 'd', 'o', 'S', 't', 'a', 'c', 'k', 0,
    'U', 'n', 'd', 'o', 'S', 't', 'a', 'c', 'k', 0,
    'l', 'a', 's', 't', 'B', 'l', 'o', 'c', 'k', 0,
    'f', 'i', 'n', 'd', 'B', 'l', 'o', 'c', 'k', 0,
    'r', 'o', 'o', 't', 'F', 'r', 'a', 'm', 'e', 0,
    'W', 'o', 'r', 'd', 'R', 'i', 'g', 'h', 't', 0,
    'N', 'e', 'x', 't', 'B', 'l', 'o', 'c', 'k', 0,
    's', 'e', 't', 'S', 't', 'e', 'r', 'e', 'o', 0,
    'N', 'o', 'P', 'r', 'o', 'f', 'i', 'l', 'e', 0,
    'O', 'f', 'f', 's', 'c', 'r', 'e', 'e', 'n', 0,
    't', 'e', 'x', 't', 'W', 'i', 'd', 't', 'h', 0,
    'c', 'l', 'e', 'a', 'r', 'D', 'a', 't', 'a', 0,
    't', 'a', 'k', 'e', 'C', 'h', 'i', 'l', 'd', 0,
    'w', 'h', 'a', 't', 's', 'T', 'h', 'i', 's', 0,
    's', 't', 'a', 't', 'u', 's', 'T', 'i', 'p', 0,
    'f', 'i', 'n', 'd', 'I', 't', 'e', 'm', 's', 0,
    'a', 'p', 'p', 'e', 'n', 'd', 'R', 'o', 'w', 0,
    'f', 'o', 'n', 't', 'T', 'a', 'b', 'l', 'e', 0,
    's', 'e', 't', 'V', 'e', 'c', 't', 'o', 'r', 0,
    'c', 'o', 'n', 'j', 'u', 'g', 'a', 't', 'e', 0,
    's', 'e', 't', 'S', 'c', 'a', 'l', 'a', 'r', 0,
    'n', 'o', 'r', 'm', 'a', 'l', 'i', 'z', 'e', 0,
    't', 'o', 'P', 'o', 'l', 'y', 'g', 'o', 'n', 0,
    'p', 'u', 't', 'P', 'o', 'i', 'n', 't', 's', 0,
    'i', 's', 'Q', 'B', 'i', 't', 'm', 'a', 'p', 0,
    'y', 'u', 'v', 'L', 'a', 'y', 'o', 'u', 't', 0,
    'a', 'l', 'p', 'h', 'a', 'S', 'i', 'z', 'e', 0,
    'b', 'l', 'a', 'c', 'k', 'S', 'i', 'z', 'e', 0,
    'g', 'r', 'e', 'e', 'n', 'S', 'i', 'z', 'e', 0,
    'U', 's', 'e', 's', 'A', 'l', 'p', 'h', 'a', 0,
    's', 'e', 't', 'W', 'i', 'd', 't', 'h', 'F', 0,
    'H', 'i', 'g', 'h', 'l', 'i', 'g', 'h', 't', 0,
    'j', 'o', 'i', 'n', 'S', 't', 'y', 'l', 'e', 0,
    'e', 'l', 'e', 'm', 'e', 'n', 't', 'A', 't', 0,
    'a', 'r', 'c', 'M', 'o', 'v', 'e', 'T', 'o', 0,
    'a', 'd', 'd', 'R', 'e', 'g', 'i', 'o', 'n', 0,
    'i', 's', 'C', 'u', 'r', 'v', 'e', 'T', 'o', 0,
    'Q', 'u', 'i', 'c', 'k', 'D', 'r', 'a', 'w', 0,
    'l', 'i', 'n', 'e', 'C', 'o', 'u', 'n', 't', 0,
    'r', 'e', 'c', 't', 'C', 'o', 'u', 'n', 't', 0,
    's', 'e', 't', 'A', 'c', 't', 'i', 'v', 'e', 0,
    'D', 'i', 'r', 't', 'y', 'F', 'o', 'n', 't', 0,
    'Q', 'T', 'e', 'x', 't', 'I', 't', 'e', 'm', 0,
    'P', 'd', 'm', 'H', 'e', 'i', 'g', 'h', 't', 0,
    's', 'o', 'u', 'r', 'c', 'e', 'T', 'o', 'p', 0,
    'd', 'r', 'a', 'w', 'I', 'm', 'a', 'g', 'e', 0,
    'd', 'r', 'a', 'w', 'P', 'o', 'i', 'n', 't', 0,
    'e', 'r', 'a', 's', 'e', 'R', 'e', 'c', 't', 0,
    'd', 'r', 'a', 'w', 'C', 'h', 'o', 'r', 'd', 0,
    'd', 'r', 'a', 'w', 'R', 'e', 'c', 't', 's', 0,
    'd', 'r', 'a', 'w', 'L', 'i', 'n', 'e', 's', 0,
    's', 'e', 't', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'o', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 0,
    'N', 'P', 'a', 'g', 'e', 'S', 'i', 'z', 'e', 0,
    'Q', 'P', 'a', 'g', 'e', 'S', 'i', 'z', 'e', 0,
    't', 'o', 'p', 'M', 'a', 'r', 'g', 'i', 'n', 0,
    'E', 'n', 'v', 'e', 'l', 'o', 'p', 'e', '9', 0,
    'F', 'a', 'n', 'F', 'o', 'l', 'd', 'U', 'S', 0,
    'P', 'r', 'c', '3', '2', 'K', 'B', 'i', 'g', 0,
    'S', 't', 'a', 't', 'e', 'm', 'e', 'n', 't', 0,
    'E', 'x', 'e', 'c', 'u', 't', 'i', 'v', 'e', 0,
    'D', 'e', 'p', 't', 'h', 'M', 'o', 'd', 'e', 0,
    'Z', 'e', 'r', 'o', 'V', 'a', 'l', 'u', 'e', 0,
    'B', 'l', 'u', 'e', 'V', 'a', 'l', 'u', 'e', 0,
    'T', 'e', 'x', 't', 'u', 'r', 'e', '1', 'D', 0,
    'T', 'e', 'x', 't', 'u', 'r', 'e', '3', 'D', 0,
    'L', 'u', 'm', 'i', 'n', 'a', 'n', 'c', 'e', 0,
    's', 'e', 't', 'L', 'a', 'y', 'e', 'r', 's', 0,
    'm', 'i', 'p', 'L', 'e', 'v', 'e', 'l', 's', 0,
    'R', 'G', 'B', '8', '_', 'E', 'T', 'C', '1', 0,
    'R', 'G', 'B', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'S', 'R', 'G', 'B', '_', 'D', 'X', 'T', '1', 0,
    'R', 'G', 'B', 'A', '_', 'D', 'X', 'T', '5', 0,
    'R', 'G', 'B', 'A', '_', 'D', 'X', 'T', '3', 0,
    'R', 'G', 'B', 'A', '_', 'D', 'X', 'T', '1', 0,
    'D', '3', '2', 'F', 'S', '8', 'X', '2', '4', 0,
    'R', '1', '6', '_', 'S', 'N', 'o', 'r', 'm', 0,
    'R', 'G', '8', '_', 'S', 'N', 'o', 'r', 'm', 0,
    'R', '1', '6', '_', 'U', 'N', 'o', 'r', 'm', 0,
    'R', 'G', '8', '_', 'U', 'N', 'o', 'r', 'm', 0,
    't', 'e', 'x', 't', 'u', 'r', 'e', 'I', 'd', 0,
    'p', 'r', 'o', 'g', 'r', 'a', 'm', 'I', 'd', 0,
    'a', 'd', 'd', 'S', 'h', 'a', 'd', 'e', 'r', 0,
    'r', 'o', 'w', 'L', 'e', 'n', 'g', 't', 'h', 0,
    's', 'e', 't', 'M', 'i', 'p', 'm', 'a', 'p', 0,
    'p', 'u', 's', 'h', 'G', 'r', 'o', 'u', 'p', 0,
    'i', 's', 'L', 'o', 'g', 'g', 'i', 'n', 'g', 0,
    'O', 't', 'h', 'e', 'r', 'T', 'y', 'p', 'e', 0,
    'E', 'r', 'r', 'o', 'r', 'T', 'y', 'p', 'e', 0,
    'A', 'n', 'y', 'S', 'o', 'u', 'r', 'c', 'e', 0,
    'A', 'P', 'I', 'S', 'o', 'u', 'r', 'c', 'e', 0,
    'R', 'a', 'n', 'g', 'e', 'R', 'e', 'a', 'd', 0,
    'i', 's', 'C', 'r', 'e', 'a', 't', 'e', 'd', 0,
    's', 'e', 't', 'S', 'c', 'r', 'e', 'e', 'n', 0,
    'c', 'a', 'c', 'h', 'e', 'M', 'o', 'd', 'e', 0,
    'f', 'r', 'a', 'm', 'e', 'R', 'e', 'c', 't', 0,
    'C', 'a', 'c', 'h', 'e', 'N', 'o', 'n', 'e', 0,
    'm', 'a', 'p', 'V', 'e', 'c', 't', 'o', 'r', 0,
    's', 'e', 't', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'n', 'e', 'a', 'r', 'P', 'l', 'a', 'n', 'e', 0,
    'B', 'a', 'c', 'k', 's', 'p', 'a', 'c', 'e', 0,
    'S', 'e', 'l', 'e', 'c', 't', 'A', 'l', 'l', 0,
    'N', 'e', 'x', 't', 'C', 'h', 'i', 'l', 'd', 0,
    'i', 's', 'V', 'i', 's', 'i', 'b', 'l', 'e', 0,
    's', 'e', 't', 'O', 'p', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'b', 'y', 't', 'e', 'C', 'o', 'u', 'n', 't', 0,
    's', 'e', 't', 'O', 'f', 'f', 's', 'e', 't', 0,
    'c', 'l', 'i', 'p', 'T', 'i', 'g', 'h', 't', 0,
    'c', 'o', 'n', 's', 't', 'B', 'i', 't', 's', 0,
    'I', 'n', 'v', 'e', 'r', 't', 'R', 'g', 'b', 0,
    's', 'e', 't', 'I', 's', 'M', 'a', 's', 'k', 0,
    't', 'h', 'e', 'm', 'e', 'N', 'a', 'm', 'e', 0,
    'f', 'r', 'o', 'm', 'T', 'h', 'e', 'm', 'e', 0,
    'a', 'd', 'd', 'P', 'i', 'x', 'm', 'a', 'p', 0,
    's', 'e', 's', 's', 'i', 'o', 'n', 'I', 'd', 0,
    'c', 'l', 'i', 'p', 'b', 'o', 'a', 'r', 'd', 0,
    'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 's', 0,
    'Q', 'G', 'l', 'y', 'p', 'h', 'R', 'u', 'n', 0,
    'c', 'a', 'p', 'H', 'e', 'i', 'g', 'h', 't', 0,
    'l', 'i', 'n', 'e', 'W', 'i', 'd', 't', 'h', 0,
    'w', 'i', 'd', 't', 'h', 'C', 'h', 'a', 'r', 0,
    'Q', 'F', 'o', 'n', 't', 'I', 'n', 'f', 'o', 0,
    'T', 'i', 't', 'l', 'e', 'F', 'o', 'n', 't', 0,
    'F', 'i', 'x', 'e', 'd', 'F', 'o', 'n', 't', 0,
    's', 't', 'y', 'l', 'e', 'N', 'a', 'm', 'e', 0,
    'S', 'm', 'a', 'l', 'l', 'C', 'a', 'p', 's', 0,
    'M', 'i', 'x', 'e', 'd', 'C', 'a', 's', 'e', 0,
    's', 'e', 't', 'I', 't', 'a', 'l', 'i', 'c', 0,
    's', 't', 'y', 'l', 'e', 'H', 'i', 'n', 't', 0,
    's', 't', 'r', 'i', 'k', 'e', 'O', 'u', 't', 0,
    'u', 'n', 'd', 'e', 'r', 'l', 'i', 'n', 'e', 0,
    's', 'e', 't', 'W', 'e', 'i', 'g', 'h', 't', 0,
    'p', 'i', 'x', 'e', 'l', 'S', 'i', 'z', 'e', 0,
    's', 'e', 't', 'F', 'a', 'm', 'i', 'l', 'y', 0,
    'p', 'o', 'i', 'n', 't', 'S', 'i', 'z', 'e', 0,
    'E', 'x', 't', 'r', 'a', 'B', 'o', 'l', 'd', 0,
    'M', 'o', 'n', 'o', 's', 'p', 'a', 'c', 'e', 0,
    'S', 'a', 'n', 's', 'S', 'e', 'r', 'i', 'f', 0,
    'H', 'e', 'l', 'v', 'e', 't', 'i', 'c', 'a', 0,
    'n', 'u', 'm', 'e', 'r', 'i', 'c', 'I', 'd', 0,
    's', 'c', 'e', 'n', 'e', 'R', 'e', 'c', 't', 0,
    'a', 'm', 'b', 'i', 'g', 'u', 'o', 'u', 's', 0,
    'p', 'a', 'i', 'n', 't', 'R', 'e', 'c', 't', 0,
    'l', 'o', 's', 't', 'F', 'o', 'c', 'u', 's', 0,
    'Q', 'K', 'e', 'y', 'E', 'v', 'e', 'n', 't', 0,
    's', 'c', 'r', 'e', 'e', 'n', 'P', 'o', 's', 0,
    'w', 'i', 'n', 'd', 'o', 'w', 'P', 'o', 's', 0,
    'g', 'l', 'o', 'b', 'a', 'l', 'P', 'o', 's', 0,
    't', 'i', 'm', 'e', 's', 't', 'a', 'm', 'p', 0,
    'm', 'o', 'd', 'i', 'f', 'i', 'e', 'r', 's', 0,
    's', 'e', 't', 'P', 'i', 'x', 'm', 'a', 'p', 0,
    's', 'e', 't', 'R', 'a', 'd', 'i', 'u', 's', 0,
    's', 'e', 't', 'C', 'e', 'n', 't', 'e', 'r', 0,
    'f', 'i', 'n', 'a', 'l', 'S', 't', 'o', 'p', 0,
    's', 'e', 't', 'S', 'p', 'r', 'e', 'a', 'd', 0,
    'T', 'e', 'e', 'n', 'P', 'a', 'r', 't', 'y', 0,
    'M', 'i', 'n', 'd', 'C', 'r', 'a', 'w', 'l', 0,
    'L', 'i', 'g', 'h', 't', 'B', 'l', 'u', 'e', 0,
    'N', 'i', 'g', 'h', 't', 'C', 'a', 'l', 'l', 0,
    'S', 'e', 'a', 'S', 't', 'r', 'i', 'k', 'e', 0,
    'A', 'n', 'g', 'e', 'l', 'C', 'a', 'r', 'e', 0,
    'S', 'u', 'n', 'V', 'e', 'g', 'g', 'i', 'e', 0,
    'J', 'u', 'i', 'c', 'y', 'C', 'a', 'k', 'e', 0,
    'R', 'i', 'c', 'h', 'M', 'e', 't', 'a', 'l', 0,
    'M', 'a', 'g', 'i', 'c', 'L', 'a', 'k', 'e', 0,
    'C', 'h', 'i', 'l', 'd', 'C', 'a', 'r', 'e', 0,
    'R', 'i', 'v', 'e', 'r', 'C', 'i', 't', 'y', 0,
    'M', 'a', 'r', 's', 'P', 'a', 'r', 't', 'y', 0,
    'J', 'u', 'n', 'g', 'l', 'e', 'D', 'a', 'y', 0,
    'S', 'p', 'i', 'k', 'y', 'N', 'a', 'g', 'a', 0,
    'S', 'k', 'y', 'G', 'l', 'i', 'd', 'e', 'r', 0,
    'S', 'o', 'f', 't', 'G', 'r', 'a', 's', 's', 0,
    'K', 'i', 'n', 'd', 'S', 't', 'e', 'e', 'l', 0,
    'S', 'n', 'o', 'w', 'A', 'g', 'a', 'i', 'n', 0,
    'F', 'r', 'e', 's', 'h', 'M', 'i', 'l', 'k', 0,
    'H', 'a', 'p', 'p', 'y', 'A', 'c', 'i', 'd', 0,
    'L', 'e', 'm', 'o', 'n', 'G', 'a', 't', 'e', 0,
    'P', 'l', 'u', 'm', 'P', 'l', 'a', 't', 'e', 0,
    'W', 'i', 'l', 'd', 'A', 'p', 'p', 'l', 'e', 0,
    'M', 'e', 'a', 'n', 'F', 'r', 'u', 'i', 't', 0,
    'H', 'e', 'a', 'v', 'y', 'R', 'a', 'i', 'n', 0,
    'N', 'i', 'g', 'h', 't', 'F', 'a', 'd', 'e', 0,
    'W', 'a', 'r', 'm', 'F', 'l', 'a', 'm', 'e', 0,
    'P', 'a', 'd', 'S', 'p', 'r', 'e', 'a', 'd', 0,
    'Q', 'G', 'r', 'a', 'd', 'i', 'e', 'n', 't', 0,
    't', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 0,
    's', 'e', 't', 'R', 'g', 'b', 'a', '6', '4', 0,
    'l', 'i', 'g', 'h', 't', 'n', 'e', 's', 's', 0,
    'f', 'r', 'o', 'm', 'C', 'm', 'y', 'k', 'F', 0,
    'c', 'o', 'n', 'v', 'e', 'r', 't', 'T', 'o', 0,
    's', 'e', 't', 'G', 'r', 'e', 'e', 'n', 'F', 0,
    's', 'e', 't', 'A', 'l', 'p', 'h', 'a', 'F', 0,
    'f', 'r', 'o', 'm', 'I', 'm', 'a', 'g', 'e', 0,
    'c', 'o', 'm', 'p', 'o', 'n', 'e', 'n', 't', 0,
    'p', 'a', 'g', 'e', 'C', 'o', 'u', 'n', 't', 0,
    'w', 'i', 'n', 'd', 'o', 'w', 's', 'I', 'd', 0,
    'a', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', 0,
    's', 'e', 't', 'H', 'e', 'i', 'g', 'h', 't', 0,
    's', 'e', 't', 'P', 'a', 'r', 'e', 'n', 't', 0,
    '_', '_', 'e', 'n', 't', 'e', 'r', '_', '_', 0,
    'Q', 'P', 'o', 'l', 'y', 'g', 'o', 'n', 'F', 0,
    'Q', 'V', 'e', 'c', 't', 'o', 'r', '4', 'D', 0,
    'Q', 'V', 'e', 'c', 't', 'o', 'r', '3', 'D', 0,
    'Q', 'V', 'e', 'c', 't', 'o', 'r', '2', 'D', 0,
    's', 'e', 't', 'B', 'o', 't', 't', 'o', 'm', 0,
    'i', 's', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'M', 'a', 'l', 'a', 'y', 'a', 'l', 'a', 'm', 0,
    's', 'e', 't', 'P', 'o', 'i', 'n', 't', 's', 0,
    'R', 'e', 'a', 'd', 'W', 'r', 'i', 't', 'e', 0,
    'W', 'r', 'i', 't', 'e', 'O', 'n', 'l', 'y', 0,
    'b', 'y', 't', 'e', 'O', 'r', 'd', 'e', 'r', 0,
    's', 'e', 't', 'S', 't', 'a', 't', 'u', 's', 0,
    'B', 'i', 'g', 'E', 'n', 'd', 'i', 'a', 'n', 0,
    't', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', 0,
    's', 'e', 't', 'L', 'o', 'c', 'a', 'l', 'e', 0,
    'l', 'a', 's', 't', 'E', 'r', 'r', 'o', 'r', 0,
    's', 'e', 't', 'D', 'e', 'v', 'i', 'c', 'e', 0,
    's', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'r', 'o', 'l', 'e', 'N', 'a', 'm', 'e', 's', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'R', 'o', 'w', 0,
    'i', 'n', 's', 'e', 'r', 't', 'R', 'o', 'w', 0,
    'f', 'e', 't', 'c', 'h', 'M', 'o', 'r', 'e', 0,
    'm', 'i', 'm', 'e', 'T', 'y', 'p', 'e', 's', 0,
    's', 'e', 't', 'P', 'a', 'u', 's', 'e', 'd', 0,
    'l', 'o', 'o', 'p', 'C', 'o', 'u', 'n', 't', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'e', 'd', 0,
    'x', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'b', 'a', 's', 'e', 'S', 'i', 'z', 'e', 0,
    'm', 'o', 'd', 'a', 'l', 'i', 't', 'y', 0,
    't', 'o', 'P', 'o', 'i', 'n', 't', 'F', 0,
    'd', 'e', 'c', 'i', 'm', 'a', 'l', 's', 0,
    's', 'e', 't', 'R', 'a', 'n', 'g', 'e', 0,
    'T', 'x', 'R', 'o', 't', 'a', 't', 'e', 0,
    'T', 'o', 'u', 'c', 'h', 'P', 'a', 'd', 0,
    'r', 'o', 'w', 'S', 't', 'a', 'r', 't', 0,
    'R', 'i', 'g', 'h', 't', 'T', 'a', 'b', 0,
    'W', 'o', 'r', 'd', 'W', 'r', 'a', 'p', 0,
    'u', 's', 'e', 'r', 'D', 'a', 't', 'a', 0,
    't', 'e', 'x', 't', 'L', 'i', 's', 't', 0,
    'i', 't', 'e', 'm', 'T', 'e', 'x', 't', 0,
    'T', 'r', 'a', 'i', 'l', 'i', 'n', 'g', 0,
    'L', 'i', 's', 't', 'D', 'i', 's', 'c', 0,
    'i', 's', 'A', 'n', 'c', 'h', 'o', 'r', 0,
    'I', 's', 'A', 'n', 'c', 'h', 'o', 'r', 0,
    'C', 's', 's', 'F', 'l', 'o', 'a', 't', 0,
    'N', 'o', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'r', 'a', 'w', 'V', 'a', 'l', 'u', 'e', 0,
    'f', 'r', 'o', 'm', 'H', 't', 'm', 'l', 0,
    'r', 'e', 'v', 'i', 's', 'i', 'o', 'n', 0,
    'r', 'e', 's', 'o', 'u', 'r', 'c', 'e', 0,
    'e', 'n', 'c', 'o', 'd', 'i', 'n', 'g', 0,
    'N', 'e', 'x', 't', 'C', 'e', 'l', 'l', 0,
    'W', 'o', 'r', 'd', 'L', 'e', 'f', 't', 0,
    's', 'e', 't', 'C', 'h', 'i', 'l', 'd', 0,
    's', 'i', 'z', 'e', 'H', 'i', 'n', 't', 0,
    't', 'a', 'k', 'e', 'I', 't', 'e', 'm', 0,
    'i', 's', 'P', 'h', 'a', 's', 'e', '2', 0,
    'g', 'e', 'o', 'm', 'e', 't', 'r', 'y', 0,
    '_', '_', 'l', 'o', 'n', 'g', '_', '_', 0,
    't', 'o', 'A', 'r', 'g', 'b', '3', '2', 0,
    's', 'e', 't', 'R', 'e', 'c', 't', 's', 0,
    'f', 'r', 'o', 'm', 'F', 'o', 'n', 't', 0,
    'Q', 'R', 'a', 'w', 'F', 'o', 'n', 't', 0,
    'f', 'r', 'o', 'm', 'A', 'x', 'e', 's', 0,
    'i', 's', 'C', 'l', 'o', 's', 'e', 'd', 0,
    's', 'e', 't', 'P', 'o', 'i', 'n', 't', 0,
    'h', 'a', 's', 'A', 'l', 'p', 'h', 'a', 0,
    'c', 'y', 'a', 'n', 'S', 'i', 'z', 'e', 0,
    'b', 'l', 'u', 'e', 'S', 'i', 'z', 'e', 0,
    'Y', 'U', 'V', '4', '2', '0', 'S', 'P', 0,
    'i', 'o', 'D', 'e', 'v', 'i', 'c', 'e', 0,
    'Q', 'P', 'i', 'c', 't', 'u', 'r', 'e', 0,
    's', 'e', 't', 'T', 'i', 't', 'l', 'e', 0,
    'm', 'i', 'd', 'l', 'i', 'g', 'h', 't', 0,
    'M', 'i', 'd', 'l', 'i', 'g', 'h', 't', 0,
    'I', 'n', 'a', 'c', 't', 'i', 'v', 'e', 0,
    'c', 'a', 'p', 'S', 't', 'y', 'l', 'e', 0,
    'i', 's', 'L', 'i', 'n', 'e', 'T', 'o', 0,
    'i', 's', 'M', 'o', 'v', 'e', 'T', 'o', 0,
    'D', 'i', 'r', 'e', 'c', 't', '2', 'D', 0,
    'D', 'i', 'r', 'e', 'c', 't', '3', 'D', 0,
    'f', 'e', 'a', 't', 'u', 'r', 'e', 's', 0,
    'A', 'l', 'l', 'D', 'i', 'r', 't', 'y', 0,
    'D', 'i', 'r', 't', 'y', 'P', 'e', 'n', 0,
    'h', 'e', 'i', 'g', 'h', 't', 'M', 'M', 0,
    'P', 'd', 'm', 'D', 'e', 'p', 't', 'h', 0,
    'P', 'd', 'm', 'W', 'i', 'd', 't', 'h', 0,
    'd', 'r', 'a', 'w', 'R', 'e', 'c', 't', 0,
    'd', 'r', 'a', 'w', 'L', 'i', 'n', 'e', 0,
    'f', 'i', 'l', 'l', 'R', 'e', 'c', 't', 0,
    'd', 'r', 'a', 'w', 'T', 'e', 'x', 't', 0,
    'f', 'i', 'l', 'l', 'R', 'u', 'l', 'e', 0,
    'd', 'r', 'a', 'w', 'P', 'a', 't', 'h', 0,
    'f', 'i', 'l', 'l', 'P', 'a', 't', 'h', 0,
    'c', 'l', 'i', 'p', 'P', 'a', 't', 'h', 0,
    's', 'e', 't', 'B', 'r', 'u', 's', 'h', 0,
    'Q', 'P', 'a', 'i', 'n', 't', 'e', 'r', 0,
    'f', 'u', 'l', 'l', 'R', 'e', 'c', 't', 0,
    's', 'e', 't', 'U', 'n', 'i', 't', 's', 0,
    'p', 'a', 'g', 'e', 'S', 'i', 'z', 'e', 0,
    'r', 'e', 's', 'i', 'z', 'e', 'G', 'L', 0,
    'o', 'b', 'j', 'e', 'c', 't', 'I', 'd', 0,
    'w', 'r', 'a', 'p', 'M', 'o', 'd', 'e', 0,
    'O', 'n', 'e', 'V', 'a', 'l', 'u', 'e', 0,
    'R', 'e', 'd', 'V', 'a', 'l', 'u', 'e', 0,
    'R', '8', '_', 'S', 'N', 'o', 'r', 'm', 0,
    'R', '8', '_', 'U', 'N', 'o', 'r', 'm', 0,
    'N', 'o', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'i', 's', 'L', 'i', 'n', 'k', 'e', 'd', 0,
    's', 'h', 'a', 'd', 'e', 'r', 'I', 'd', 0,
    's', 'k', 'i', 'p', 'R', 'o', 'w', 's', 0,
    't', 'e', 'x', 't', 'u', 'r', 'e', 's', 0,
    'p', 'o', 'p', 'G', 'r', 'o', 'u', 'p', 0,
    's', 'e', 'v', 'e', 'r', 'i', 't', 'y', 0,
    'm', 'a', 'p', 'R', 'a', 'n', 'g', 'e', 0,
    'a', 'l', 'l', 'o', 'c', 'a', 't', 'e', 0,
    'b', 'u', 'f', 'f', 'e', 'r', 'I', 'd', 0,
    'Q', 'S', 'u', 'r', 'f', 'a', 'c', 'e', 0,
    's', 'e', 't', 'S', 'p', 'e', 'e', 'd', 0,
    'C', 'a', 'c', 'h', 'e', 'A', 'l', 'l', 0,
    'i', 's', 'A', 'f', 'f', 'i', 'n', 'e', 0,
    'v', 'i', 'e', 'w', 'p', 'o', 'r', 't', 0,
    'f', 'a', 'r', 'P', 'l', 'a', 'n', 'e', 0,
    'F', 'i', 'n', 'd', 'N', 'e', 'x', 't', 0,
    's', 'e', 't', 'G', 'a', 'm', 'm', 'a', 0,
    'c', 'l', 'i', 'p', 'R', 'e', 'c', 't', 0,
    't', 'e', 'x', 't', 'K', 'e', 'y', 's', 0,
    'm', 'i', 'r', 'r', 'o', 'r', 'e', 'd', 0,
    'v', 'e', 'r', 't', 'i', 'c', 'a', 'l', 0,
    's', 'e', 't', 'P', 'i', 'x', 'e', 'l', 0,
    's', 'c', 'a', 'n', 'L', 'i', 'n', 'e', 0,
    'c', 'a', 'c', 'h', 'e', 'K', 'e', 'y', 0,
    'S', 'e', 'l', 'e', 'c', 't', 'e', 'd', 0,
    'D', 'i', 's', 'a', 'b', 'l', 'e', 'd', 0,
    's', 'c', 'r', 'e', 'e', 'n', 'A', 't', 0,
    't', 'a', 'b', 'A', 'r', 'r', 'a', 'y', 0,
    't', 'a', 'b', 'S', 't', 'o', 'p', 's', 0,
    'm', 'a', 'x', 'W', 'i', 'd', 't', 'h', 0,
    'f', 'o', 'n', 't', 'I', 'n', 'f', 'o', 0,
    'f', 'a', 'm', 'i', 'l', 'i', 'e', 's', 0,
    'G', 'u', 'r', 'm', 'u', 'k', 'h', 'i', 0,
    'C', 'y', 'r', 'i', 'l', 'l', 'i', 'c', 0,
    'i', 's', 'C', 'o', 'p', 'y', 'O', 'f', 0,
    's', 't', 'r', 'a', 't', 'e', 'g', 'y', 0,
    'o', 'v', 'e', 'r', 'l', 'i', 'n', 'e', 0,
    'D', 'e', 'm', 'i', 'B', 'o', 'l', 'd', 0,
    'A', 'n', 'y', 'S', 't', 'y', 'l', 'e', 0,
    'v', 'e', 'l', 'o', 'c', 'i', 't', 'y', 0,
    's', 'c', 'e', 'n', 'e', 'P', 'o', 's', 0,
    's', 't', 'a', 'r', 't', 'P', 'o', 's', 0,
    'o', 'p', 'e', 'n', 'F', 'i', 'l', 'e', 0,
    'K', 'e', 'y', 'b', 'o', 'a', 'r', 'd', 0,
    'g', 'o', 't', 'F', 'o', 'c', 'u', 's', 0,
    'u', 'n', 'i', 'q', 'u', 'e', 'I', 'd', 0,
    'r', 'o', 't', 'a', 't', 'i', 'o', 'n', 0,
    'p', 'r', 'e', 's', 's', 'u', 'r', 'e', 0,
    'A', 'i', 'r', 'b', 'r', 'u', 's', 'h', 0,
    'N', 'o', 'D', 'e', 'v', 'i', 'c', 'e', 0,
    'i', 'n', 'v', 'e', 'r', 't', 'e', 'd', 0,
    'l', 'o', 'c', 'a', 'l', 'P', 'o', 's', 0,
    's', 'e', 't', 'S', 'h', 'a', 'p', 'e', 0,
    's', 'e', 't', 'I', 'm', 'a', 'g', 'e', 0,
    's', 'e', 't', 'S', 't', 'a', 'r', 't', 0,
    's', 'e', 't', 'S', 't', 'o', 'p', 's', 0,
    'M', 'a', 'g', 'i', 'c', 'R', 'a', 'y', 0,
    'B', 'l', 'a', 'c', 'k', 'S', 'e', 'a', 0,
    'M', 'o', 'l', 'e', 'H', 'a', 'l', 'l', 0,
    'P', 'l', 'u', 'm', 'B', 'a', 't', 'h', 0,
    'N', 'i', 'g', 'h', 't', 'S', 'k', 'y', 0,
    'S', 'e', 'a', 's', 'h', 'o', 'r', 'e', 0,
    'P', 'a', 'l', 'o', 'A', 'l', 't', 'o', 0,
    'B', 'i', 'g', 'M', 'a', 'n', 'g', 'o', 0,
    'L', 'o', 'v', 'e', 'K', 'i', 's', 's', 0,
    'S', 't', 'a', 'r', 'W', 'i', 'n', 'e', 0,
    'B', 'l', 'e', 's', 's', 'i', 'n', 'g', 0,
    'N', 'e', 'a', 'r', 'M', 'o', 'o', 'n', 0,
    'R', 'a', 'r', 'e', 'W', 'i', 'n', 'd', 0,
    'D', 'e', 'e', 'p', 'B', 'l', 'u', 'e', 0,
    'A', 'm', 'y', 'C', 'r', 'i', 's', 'p', 0,
    'L', 'a', 'd', 'y', 'L', 'i', 'p', 's', 0,
    'i', 's', 'O', 'p', 'a', 'q', 'u', 'e', 0,
    'g', 'r', 'a', 'd', 'i', 'e', 'n', 't', 0,
    's', 'e', 't', 'C', 'o', 'l', 'o', 'r', 0,
    's', 'e', 't', 'S', 't', 'y', 'l', 'e', 0,
    'f', 'r', 'o', 'm', 'H', 's', 'l', 'F', 0,
    'f', 'r', 'o', 'm', 'C', 'm', 'y', 'k', 0,
    'f', 'r', 'o', 'm', 'H', 's', 'v', 'F', 0,
    'f', 'r', 'o', 'm', 'R', 'g', 'b', 'F', 0,
    'f', 'r', 'o', 'm', 'R', 'g', 'b', 'a', 0,
    's', 'e', 't', 'C', 'm', 'y', 'k', 'F', 0,
    'g', 'e', 't', 'C', 'm', 'y', 'k', 'F', 0,
    'm', 'a', 'g', 'e', 'n', 't', 'a', 'F', 0,
    's', 'e', 't', 'B', 'l', 'u', 'e', 'F', 0,
    's', 'e', 't', 'G', 'r', 'e', 'e', 'n', 0,
    's', 'e', 't', 'A', 'l', 'p', 'h', 'a', 0,
    'f', 'r', 'o', 'm', 'D', 'a', 't', 'a', 0,
    'e', 'n', 'd', 'P', 'a', 'i', 'n', 't', 0,
    'f', 'o', 'r', 'm', 'a', 't', 'A', 't', 0,
    'd', 'o', 'c', 'u', 'm', 'e', 'n', 't', 0,
    'a', 'n', 'c', 'h', 'o', 'r', 'A', 't', 0,
    'U', 's', 'e', 'r', 'T', 'y', 'p', 'e', 0,
    'f', 'r', 'a', 'g', 'm', 'e', 'n', 't', 0,
    'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'C', 'o', 'd', 'e', 'c', 0,
    'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    's', 'o', 'r', 't', 'R', 'o', 'l', 'e', 0,
    's', 'e', 't', 'V', 'a', 'l', 'u', 'e', 0,
    'o', 'p', 't', 'i', 'm', 'i', 'z', 'e', 0,
    's', 'e', 't', 'W', 'i', 'd', 't', 'h', 0,
    'p', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    '_', '_', 'e', 'x', 'i', 't', '_', '_', 0,
    'i', 'c', 'o', 'n', 'N', 'a', 'm', 'e', 0,
    'Q', 'P', 'o', 'l', 'y', 'g', 'o', 'n', 0,
    'Q', 'P', 'a', 'l', 'e', 't', 't', 'e', 0,
    '_', '_', 'i', 'd', 'i', 'v', '_', '_', 0,
    'J', 'a', 'p', 'a', 'n', 'e', 's', 'e', 0,
    'G', 'u', 'j', 'a', 'r', 'a', 't', 'i', 0,
    'G', 'e', 'o', 'r', 'g', 'i', 'a', 'n', 0,
    'A', 'r', 'm', 'e', 'n', 'i', 'a', 'n', 0,
    'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 0,
    's', 'e', 't', 'A', 'n', 'g', 'l', 'e', 0,
    'p', 'r', 'e', 'v', 'i', 'o', 'u', 's', 0,
    'D', 'e', 's', 'e', 'l', 'e', 'c', 't', 0,
    'R', 'e', 'a', 'd', 'O', 'n', 'l', 'y', 0,
    'f', 'i', 'l', 'e', 'P', 'a', 't', 'h', 0,
    'f', 'i', 'l', 'e', 'N', 'a', 'm', 'e', 0,
    '_', '_', 'i', 's', 'u', 'b', '_', '_', 0,
    's', 'e', 't', 'F', 'l', 'a', 'g', 's', 0,
    't', 'o', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'c', 'o', 'n', 't', 'a', 'i', 'n', 's', 0,
    '_', '_', 'i', 'm', 'u', 'l', '_', '_', 0,
    '_', '_', 'r', 'e', 'p', 'r', '_', '_', 0,
    '_', '_', 'i', 'a', 'd', 'd', '_', '_', 0,
    'i', 's', 'A', 'c', 't', 'i', 'v', 'e', 0,
    'm', 'i', 'm', 'e', 'D', 'a', 't', 'a', 0,
    'i', 't', 'e', 'm', 'D', 'a', 't', 'a', 0,
    'r', 'o', 'w', 'C', 'o', 'u', 'n', 't', 0,
    'o', 'l', 'd', 'S', 't', 'a', 't', 'e', 0,
    'f', 'i', 'n', 'i', 's', 'h', 'e', 'd', 0,
    'A', 'l', 'i', 'g', 'n', 'T', 'o', 'p', 0,
    '_', '_', 'h', 'a', 's', 'h', '_', '_', 0,
    '_', '_', 'b', 'o', 'o', 'l', '_', '_', 0,
    '_', '_', 'i', 'x', 'o', 'r', '_', '_', 0,
    '_', '_', 'i', 'a', 'n', 'd', '_', '_', 0,
    'i', 's', 'M', 'o', 'd', 'a', 'l', 0,
    'a', 'd', 'j', 'o', 'i', 'n', 't', 0,
    'T', 'x', 'S', 'h', 'e', 'a', 'r', 0,
    'T', 'x', 'S', 'c', 'a', 'l', 'e', 0,
    'd', 'e', 'v', 'i', 'c', 'e', 's', 0,
    'r', 'o', 'w', 'S', 'p', 'a', 'n', 0,
    's', 'e', 't', 'T', 'a', 'b', 's', 0,
    'L', 'e', 'f', 't', 'T', 'a', 'b', 0,
    't', 'a', 'b', 'S', 't', 'o', 'p', 0,
    'L', 'e', 'a', 'd', 'i', 'n', 'g', 0,
    'p', 'a', 'd', 'd', 'i', 'n', 'g', 0,
    's', 'e', 't', 'N', 'a', 'm', 'e', 0,
    's', 'c', 'a', 'l', 'i', 'n', 'g', 0,
    'b', 'a', 's', 'e', 'U', 'r', 'l', 0,
    'a', 't', 'S', 't', 'a', 'r', 't', 0,
    'N', 'e', 'x', 't', 'R', 'o', 'w', 0,
    'p', 'r', 'e', 'p', 'a', 'r', 'e', 0,
    's', 'e', 't', 'I', 'c', 'o', 'n', 0,
    't', 'o', 'o', 'l', 'T', 'i', 'p', 0,
    't', 'a', 'k', 'e', 'R', 'o', 'w', 0,
    's', 'e', 't', 'I', 't', 'e', 'm', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 's', 0,
    'Q', 'S', 'c', 'r', 'e', 'e', 'n', 0,
    'q', 'I', 's', 'G', 'r', 'a', 'y', 0,
    'q', 'R', 'g', 'b', 'a', '6', '4', 0,
    't', 'o', 'R', 'g', 'b', '1', '6', 0,
    'Q', 'R', 'g', 'b', 'a', '6', '4', 0,
    'g', 'e', 't', 'A', 'x', 'e', 's', 0,
    'e', 'x', 'p', 'o', 's', 'e', 'd', 0,
    's', 'e', 't', 'M', 'a', 's', 'k', 0,
    'h', 'u', 'e', 'S', 'i', 'z', 'e', 0,
    'r', 'e', 'd', 'S', 'i', 'z', 'e', 0,
    's', 'u', 'b', 'E', 'n', 'u', 'm', 0,
    'Y', 'U', 'V', '4', '2', '0', 'P', 0,
    'I', 'n', 'd', 'e', 'x', 'e', 'd', 0,
    'i', 's', 'S', 'o', 'l', 'i', 'd', 0,
    'c', 'r', 'e', 'a', 't', 'o', 'r', 0,
    'i', 's', 'E', 'q', 'u', 'a', 'l', 0,
    'a', 'd', 'd', 'T', 'e', 'x', 't', 0,
    'a', 'd', 'd', 'R', 'e', 'c', 't', 0,
    'c', 'u', 'b', 'i', 'c', 'T', 'o', 0,
    'O', 'p', 'e', 'n', 'G', 'L', '2', 0,
    'Q', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'w', 'i', 'd', 't', 'h', 'M', 'M', 0,
    'P', 'd', 'm', 'D', 'p', 'i', 'Y', 0,
    'P', 'd', 'm', 'D', 'p', 'i', 'X', 0,
    'c', 'o', 'm', 'b', 'i', 'n', 'e', 0,
    'p', 'i', 'c', 't', 'u', 'r', 'e', 0,
    'd', 'r', 'a', 'w', 'P', 'i', 'e', 0,
    'd', 'r', 'a', 'w', 'A', 'r', 'c', 0,
    'r', 'e', 's', 't', 'o', 'r', 'e', 0,
    's', 'e', 't', 'M', 'o', 'd', 'e', 0,
    'B', '5', 'E', 'x', 't', 'r', 'a', 0,
    'A', '5', 'E', 'x', 't', 'r', 'a', 0,
    'A', '4', 'S', 'm', 'a', 'l', 'l', 0,
    'A', '4', 'E', 'x', 't', 'r', 'a', 0,
    'A', '3', 'E', 'x', 't', 'r', 'a', 0,
    'T', 'a', 'b', 'l', 'o', 'i', 'd', 0,
    'C', 'o', 'm', 'm', '1', '0', 'E', 0,
    'n', 'e', 'w', 'P', 'a', 'g', 'e', 0,
    'p', 'a', 'i', 'n', 't', 'G', 'L', 0,
    'o', 'p', 'a', 'c', 'i', 't', 'y', 0,
    'F', 'l', 'o', 'a', 't', '3', '2', 0,
    'R', 'G', 'B', 'A', '3', '2', 'F', 0,
    'R', 'G', 'B', 'A', '1', '6', 'F', 0,
    'R', 'G', 'B', 'A', '3', '2', 'I', 0,
    'R', 'G', 'B', 'A', '1', '6', 'I', 0,
    'R', 'G', 'B', 'A', '3', '2', 'U', 0,
    'R', 'G', 'B', 'A', '1', '6', 'U', 0,
    's', 'h', 'a', 'd', 'e', 'r', 's', 0,
    'C', 'o', 'm', 'p', 'u', 't', 'e', 0,
    's', 'a', 'm', 'p', 'l', 'e', 's', 0,
    'b', 'u', 'f', 'f', 'e', 'r', 's', 0,
    't', 'o', 'I', 'm', 'a', 'g', 'e', 0,
    'i', 's', 'B', 'o', 'u', 'n', 'd', 0,
    's', 'o', 'u', 'r', 'c', 'e', 's', 0,
    'A', 'n', 'y', 'T', 'y', 'p', 'e', 0,
    'p', 'r', 'o', 'f', 'i', 'l', 'e', 0,
    'L', 'i', 'b', 'G', 'L', 'E', 'S', 0,
    's', 'u', 'r', 'f', 'a', 'c', 'e', 0,
    'd', 'e', 's', 't', 'r', 'o', 'y', 0,
    'u', 'p', 'd', 'a', 't', 'e', 'd', 0,
    'r', 'e', 's', 'i', 'z', 'e', 'd', 0,
    'm', 'a', 'p', 'R', 'e', 'c', 't', 0,
    'f', 'r', 'u', 's', 't', 'u', 'm', 0,
    'R', 'e', 'p', 'l', 'a', 'c', 'e', 0,
    'Z', 'o', 'o', 'm', 'O', 'u', 't', 0,
    'R', 'e', 'f', 'r', 'e', 's', 'h', 0,
    's', 'u', 'b', 'T', 'y', 'p', 'e', 0,
    'c', 'a', 'n', 'R', 'e', 'a', 'd', 0,
    'q', 'u', 'a', 'l', 'i', 't', 'y', 0,
    'a', 'l', 'l', 'G', 'r', 'a', 'y', 0,
    'd', 'e', 'v', 'T', 'y', 'p', 'e', 0,
    'a', 'd', 'd', 'F', 'i', 'l', 'e', 0,
    's', 'e', 't', 'F', 'o', 'n', 't', 0,
    's', 'c', 'r', 'e', 'e', 'n', 's', 0,
    's', 'e', 't', 'F', 'l', 'a', 'g', 0,
    'r', 'a', 'w', 'F', 'o', 'n', 't', 0,
    'x', 'H', 'e', 'i', 'g', 'h', 't', 0,
    'l', 'e', 'a', 'd', 'i', 'n', 'g', 0,
    'd', 'e', 's', 'c', 'e', 'n', 't', 0,
    's', 'e', 't', 'B', 'o', 'l', 'd', 0,
    'c', 'l', 'e', 'a', 'n', 'u', 'p', 0,
    'r', 'a', 'w', 'N', 'a', 'm', 'e', 0,
    's', 't', 'r', 'e', 't', 'c', 'h', 0,
    'k', 'e', 'r', 'n', 'i', 'n', 'g', 0,
    'F', 'a', 'n', 't', 'a', 's', 'y', 0,
    'C', 'u', 'r', 's', 'i', 'v', 'e', 0,
    'C', 'o', 'u', 'r', 'i', 'e', 'r', 0,
    'Q', 'A', 'c', 't', 'i', 'o', 'n', 0,
    'l', 'a', 's', 't', 'P', 'o', 's', 0,
    'q', 'u', 'e', 'r', 'i', 'e', 's', 0,
    'o', 'l', 'd', 'S', 'i', 'z', 'e', 0,
    'a', 'u', 't', 'o', 'r', 'e', 'p', 0,
    'o', 'l', 'd', 'P', 'o', 's', 'F', 0,
    'g', 'l', 'o', 'b', 'a', 'l', 'Y', 0,
    'g', 'l', 'o', 'b', 'a', 'l', 'X', 0,
    'b', 'u', 't', 't', 'o', 'n', 's', 0,
    'o', 'p', 'e', 'n', 'U', 'r', 'l', 0,
    'h', 'o', 't', 'S', 'p', 'o', 't', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'S', 'e', 'a', 'L', 'o', 'r', 'd', 0,
    'O', 'v', 'e', 'r', 'S', 'u', 'n', 0,
    'F', 'l', 'y', 'H', 'i', 'g', 'h', 0,
    'N', 'e', 'w', 'Y', 'o', 'r', 'k', 0,
    'N', 'e', 'w', 'L', 'i', 'f', 'e', 0,
    't', 'e', 'x', 't', 'u', 'r', 'e', 0,
    'H', 'e', 'x', 'A', 'r', 'g', 'b', 0,
    'f', 'r', 'o', 'm', 'H', 's', 'l', 0,
    's', 'e', 't', 'H', 's', 'l', 'F', 0,
    'g', 'e', 't', 'H', 's', 'l', 'F', 0,
    'h', 's', 'l', 'H', 'u', 'e', 'F', 0,
    'h', 's', 'v', 'H', 'u', 'e', 'F', 0,
    'f', 'r', 'o', 'm', 'H', 's', 'v', 0,
    'f', 'r', 'o', 'm', 'R', 'g', 'b', 0,
    's', 'e', 't', 'C', 'm', 'y', 'k', 0,
    'g', 'e', 't', 'C', 'm', 'y', 'k', 0,
    'y', 'e', 'l', 'l', 'o', 'w', 'F', 0,
    's', 'e', 't', 'H', 's', 'v', 'F', 0,
    'g', 'e', 't', 'H', 's', 'v', 'F', 0,
    's', 'e', 't', 'R', 'g', 'b', 'a', 0,
    's', 'e', 't', 'R', 'g', 'b', 'F', 0,
    'g', 'e', 't', 'R', 'g', 'b', 'F', 0,
    's', 'e', 't', 'R', 'e', 'd', 'F', 0,
    's', 'e', 't', 'B', 'l', 'u', 'e', 0,
    'i', 'm', 'a', 'g', 'e', 'A', 't', 0,
    'h', 'i', 't', 'T', 'e', 's', 't', 0,
    'p', 'a', 'i', 'n', 't', 'e', 'r', 0,
    'p', 'a', 'l', 'e', 't', 't', 'e', 0,
    'm', 'a', 't', 'c', 'h', 'e', 's', 0,
    'r', 'e', 'l', 'e', 'a', 's', 'e', 0,
    'N', 'o', 'M', 'a', 't', 'c', 'h', 0,
    's', 'e', 't', 'S', 'i', 'z', 'e', 0,
    's', 't', 'a', 'r', 't', 'e', 'd', 0,
    't', 'o', 'P', 'o', 'i', 'n', 't', 0,
    'f', 'o', 'r', 'm', 'a', 't', 's', 0,
    's', 'e', 't', 'H', 't', 'm', 'l', 0,
    's', 'e', 't', 'T', 'e', 'x', 't', 0,
    'Q', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'Q', 'R', 'e', 'g', 'i', 'o', 'n', 0,
    'Q', 'P', 'i', 'x', 'm', 'a', 'p', 0,
    '_', '_', 'n', 'e', 'g', '_', '_', 0,
    '_', '_', 'd', 'i', 'v', '_', '_', 0,
    'm', 'a', 'r', 'g', 'i', 'n', 's', 0,
    'M', 'y', 'a', 'n', 'm', 'a', 'r', 0,
    'S', 'i', 'n', 'h', 'a', 'l', 'a', 0,
    'T', 'i', 'b', 'e', 't', 'a', 'n', 0,
    'K', 'a', 'n', 'n', 'a', 'd', 'a', 0,
    'B', 'e', 'n', 'g', 'a', 'l', 'i', 0,
    'r', 'e', 's', 'o', 'l', 'v', 'e', 0,
    'a', 'd', 'd', 'P', 'a', 't', 'h', 0,
    's', 'e', 't', 'T', 'y', 'p', 'e', 0,
    '_', '_', 's', 'u', 'b', '_', '_', 0,
    'M', 'a', 'x', 'U', 's', 'e', 'r', 0,
    'e', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'v', 'e', 'r', 's', 'i', 'o', 'n', 0,
    'c', 'o', 'n', 't', 'e', 'x', 't', 0,
    'F', 'l', 'o', 'a', 't', '1', '6', 0,
    '_', '_', 'a', 'd', 'd', '_', '_', 0,
    '_', '_', 'm', 'u', 'l', '_', '_', 0,
    'r', 'e', 'p', 'l', 'a', 'c', 'e', 0,
    'p', 'r', 'e', 'p', 'e', 'n', 'd', 0,
    'i', 'n', 'd', 'e', 'x', 'O', 'f', 0,
    'i', 's', 'E', 'm', 'p', 't', 'y', 0,
    '_', '_', 'l', 'e', 'n', '_', '_', 0,
    'o', 'p', 't', 'i', 'o', 'n', 's', 0,
    's', 'e', 't', 'D', 'a', 't', 'a', 0,
    's', 'i', 'b', 'l', 'i', 'n', 'g', 0,
    'i', 's', 'V', 'a', 'l', 'i', 'd', 0,
    'm', 'e', 's', 's', 'a', 'g', 'e', 0,
    'F', 'o', 'r', 'w', 'a', 'r', 'd', 0,
    'm', 'a', 'g', 'e', 'n', 't', 'a', 0,
    '_', '_', 'x', 'o', 'r', '_', '_', 0,
    '_', '_', 'i', 'o', 'r', '_', '_', 0,
    '_', '_', 'a', 'n', 'd', '_', '_', 0,
    '_', '_', 'i', 'n', 't', '_', '_', 0,
    'r', 'a', 'i', 's', 'e', '_', 0,
    'n', 'o', 'r', 'm', 'a', 'l', 0,
    'T', 'x', 'N', 'o', 'n', 'e', 0,
    'r', 'o', 'w', 'E', 'n', 'd', 0,
    'c', 'e', 'l', 'l', 'A', 't', 0,
    'N', 'o', 'W', 'r', 'a', 'p', 0,
    'l', 'i', 'n', 'e', 'A', 't', 0,
    'b', 'o', 'r', 'd', 'e', 'r', 0,
    'I', 'n', 'F', 'l', 'o', 'w', 0,
    'i', 'n', 'd', 'e', 'n', 't', 0,
    's', 't', 'a', 'c', 'k', 's', 0,
    't', 'o', 'H', 't', 'm', 'l', 0,
    'N', 'o', 'M', 'o', 'v', 'e', 0,
    'a', 'n', 'c', 'h', 'o', 'r', 0,
    's', 't', 'e', 'r', 'e', 'o', 0,
    'q', 'A', 'l', 'p', 'h', 'a', 0,
    'q', 'G', 'r', 'e', 'e', 'n', 0,
    'a', 'l', 'p', 'h', 'a', '8', 0,
    'g', 'r', 'e', 'e', 'n', '8', 0,
    's', 'c', 'a', 'l', 'a', 'r', 0,
    'c', 'l', 'o', 's', 'e', 'd', 0,
    'l', 'a', 'y', 'o', 'u', 't', 0,
    'Y', 'U', 'V', '4', '1', '1', 0,
    'Y', 'U', 'V', '4', '2', '2', 0,
    'Y', 'U', 'V', '4', '4', '4', 0,
    'w', 'i', 'd', 't', 'h', 'F', 0,
    's', 'h', 'a', 'd', 'o', 'w', 0,
    'N', 'o', 'R', 'o', 'l', 'e', 0,
    'S', 'h', 'a', 'd', 'o', 'w', 0,
    'B', 'u', 't', 't', 'o', 'n', 0,
    'q', 'u', 'a', 'd', 'T', 'o', 0,
    'l', 'i', 'n', 'e', 'T', 'o', 0,
    'O', 'p', 'e', 'n', 'V', 'G', 0,
    'R', 'a', 's', 't', 'e', 'r', 0,
    's', 'c', 'a', 'l', 'e', 'Y', 0,
    's', 'c', 'a', 'l', 'e', 'X', 0,
    's', 'e', 't', 'P', 'e', 'n', 0,
    'C', 'i', 'c', 'e', 'r', 'o', 0,
    'P', 'r', 'c', '3', '2', 'K', 0,
    'P', 'r', 'c', '1', '6', 'K', 0,
    'S', 'u', 'p', 'e', 'r', 'B', 0,
    'S', 'u', 'p', 'e', 'r', 'A', 0,
    'Q', 'u', 'a', 'r', 't', 'o', 0,
    'J', 'i', 's', 'B', '1', '0', 0,
    'A', '4', 'P', 'l', 'u', 's', 0,
    'L', 'e', 'd', 'g', 'e', 'r', 0,
    'L', 'e', 't', 't', 'e', 'r', 0,
    'r', 'e', 'b', 'i', 'n', 'd', 0,
    'U', 'I', 'n', 't', '3', '2', 0,
    'U', 'I', 'n', 't', '1', '6', 0,
    'l', 'a', 'y', 'e', 'r', 's', 0,
    'R', 'G', 'B', '9', 'E', '5', 0,
    'R', 'G', 'B', '3', '2', 'F', 0,
    'R', 'G', 'B', '1', '6', 'F', 0,
    'R', 'G', 'B', '3', '2', 'I', 0,
    'R', 'G', 'B', '1', '6', 'I', 0,
    'R', 'G', 'B', 'A', '8', 'I', 0,
    'R', 'G', 'B', '3', '2', 'U', 0,
    'R', 'G', 'B', '1', '6', 'U', 0,
    'R', 'G', 'B', 'A', '8', 'U', 0,
    's', 't', 'r', 'i', 'd', 'e', 0,
    'V', 'e', 'r', 't', 'e', 'x', 0,
    'm', 'i', 'p', 'm', 'a', 'p', 0,
    's', 'h', 'a', 'r', 'e', 's', 0,
    'Q', 'M', 'o', 'v', 'i', 'e', 0,
    's', 'e', 't', 'R', 'o', 'w', 0,
    'l', 'o', 'o', 'k', 'A', 't', 0,
    'r', 'o', 't', 'a', 't', 'e', 0,
    'v', 'e', 'c', 't', 'o', 'r', 0,
    'C', 'a', 'n', 'c', 'e', 'l', 0,
    'S', 'a', 'v', 'e', 'A', 's', 0,
    'A', 'd', 'd', 'T', 'a', 'b', 0,
    'Z', 'o', 'o', 'm', 'I', 'n', 0,
    'D', 'e', 'l', 'e', 't', 'e', 0,
    'm', 'e', 't', 'r', 'i', 'c', 0,
    'i', 's', 'M', 'a', 's', 'k', 0,
    'i', 'n', 'F', 'o', 'n', 't', 0,
    'a', 's', 'c', 'e', 'n', 't', 0,
    's', 't', 'y', 'l', 'e', 's', 0,
    'S', 'y', 'm', 'b', 'o', 'l', 0,
    'T', 'h', 'a', 'a', 'n', 'a', 0,
    'i', 't', 'a', 'l', 'i', 'c', 0,
    'w', 'e', 'i', 'g', 'h', 't', 0,
    'f', 'a', 'm', 'i', 'l', 'y', 0,
    'M', 'e', 'd', 'i', 'u', 'm', 0,
    'r', 'e', 'a', 's', 'o', 'n', 0,
    'o', 'l', 'd', 'P', 'o', 's', 0,
    'b', 'u', 't', 't', 'o', 'n', 0,
    's', 'e', 't', 'P', 'o', 's', 0,
    'b', 'i', 't', 'm', 'a', 'p', 0,
    'r', 'a', 'd', 'i', 'u', 's', 0,
    's', 'p', 'r', 'e', 'a', 'd', 0,
    'O', 'l', 'd', 'H', 'a', 't', 0,
    'p', 'i', 'x', 'm', 'a', 'p', 0,
    'H', 'e', 'x', 'R', 'g', 'b', 0,
    's', 'e', 't', 'H', 's', 'l', 0,
    'g', 'e', 't', 'H', 's', 'l', 0,
    'h', 's', 'l', 'H', 'u', 'e', 0,
    'h', 's', 'v', 'H', 'u', 'e', 0,
    'd', 'a', 'r', 'k', 'e', 'r', 0,
    't', 'o', 'C', 'm', 'y', 'k', 0,
    'b', 'l', 'a', 'c', 'k', 'F', 0,
    's', 'e', 't', 'H', 's', 'v', 0,
    'g', 'e', 't', 'H', 's', 'v', 0,
    'v', 'a', 'l', 'u', 'e', 'F', 0,
    's', 'e', 't', 'R', 'g', 'b', 0,
    'g', 'e', 't', 'R', 'g', 'b', 0,
    'g', 'r', 'e', 'e', 'n', 'F', 0,
    's', 'e', 't', 'R', 'e', 'd', 0,
    'a', 'l', 'p', 'h', 'a', 'F', 0,
    'r', 'g', 'b', 'a', '6', '4', 0,
    'm', 'a', 't', 'r', 'i', 'x', 0,
    's', 'c', 'r', 'o', 'l', 'l', 0,
    'r', 'e', 'g', 'i', 'o', 'n', 0,
    'w', 'i', 'n', 'd', 'o', 'w', 0,
    'u', 'p', 'd', 'a', 't', 'e', 0,
    'c', 'u', 'r', 's', 'o', 'r', 0,
    's', 'c', 'a', 'l', 'e', 'd', 0,
    'c', 'r', 'e', 'a', 't', 'e', 0,
    'c', 'a', 'n', 'c', 'e', 'l', 0,
    'c', 'o', 'm', 'm', 'i', 't', 0,
    'u', 'n', 'i', 't', 'e', 'd', 0,
    'm', 'o', 'v', 'e', 'T', 'o', 0,
    'r', 'e', 'g', 'E', 'x', 'p', 0,
    'Q', 'I', 'm', 'a', 'g', 'e', 0,
    'Q', 'C', 'o', 'l', 'o', 'r', 0,
    'Q', 'B', 'r', 'u', 's', 'h', 0,
    'm', 'a', 'r', 'g', 'i', 'n', 0,
    'f', 'a', 'c', 't', 'o', 'r', 0,
    's', 'e', 't', 'T', 'o', 'p', 0,
    'S', 'y', 'r', 'i', 'a', 'c', 0,
    'T', 'e', 'l', 'u', 'g', 'u', 0,
    'K', 'o', 'r', 'e', 'a', 'n', 0,
    'H', 'e', 'b', 'r', 'e', 'w', 0,
    'A', 'r', 'a', 'b', 'i', 'c', 0,
    'c', 'e', 'n', 't', 'e', 'r', 0,
    'h', 'e', 'i', 'g', 'h', 't', 0,
    'b', 'o', 't', 't', 'o', 'm', 0,
    'o', 'f', 'f', 's', 'e', 't', 0,
    'h', 'a', 'n', 'd', 'l', 'e', 0,
    'C', 'u', 's', 't', 'o', 'm', 0,
    'f', 'i', 'l', 't', 'e', 'r', 0,
    'H', 'i', 'd', 'd', 'e', 'n', 0,
    's', 't', 'a', 't', 'u', 's', 0,
    'i', 'g', 'n', 'o', 'r', 'e', 0,
    'a', 'c', 'c', 'e', 'p', 't', 0,
    'n', 'o', 't', 'i', 'f', 'y', 0,
    'o', 'p', 't', 'i', 'o', 'n', 0,
    'l', 'o', 'c', 'a', 'l', 'e', 0,
    'd', 'e', 'v', 'i', 'c', 'e', 0,
    '_', '_', 'g', 'e', '_', '_', 0,
    '_', '_', 'l', 'e', '_', '_', 0,
    '_', '_', 'g', 't', '_', '_', 0,
    'b', 'e', 'f', 'o', 'r', 'e', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 0,
    'i', 'n', 's', 'e', 'r', 't', 0,
    'a', 'p', 'p', 'e', 'n', 'd', 0,
    'l', 'e', 'n', 'g', 't', 'h', 0,
    'd', 'e', 't', 'a', 'c', 'h', 0,
    'r', 'e', 's', 'i', 'z', 'e', 0,
    'i', 's', 'N', 'u', 'l', 'l', 0,
    't', 'a', 'r', 'g', 'e', 't', 0,
    'r', 'e', 'v', 'e', 'r', 't', 0,
    's', 'u', 'b', 'm', 'i', 't', 0,
    '_', '_', 'l', 't', '_', '_', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 0,
    'o', 'b', 'j', 'e', 'c', 't', 0,
    'y', 'e', 'l', 'l', 'o', 'w', 0,
    '_', '_', 'n', 'e', '_', '_', 0,
    '_', '_', 'e', 'q', '_', '_', 0,
    '_', '_', 'o', 'r', '_', '_', 0,
    'a', 'l', 'e', 'r', 't', 0,
    'l', 'o', 'w', 'e', 'r', 0,
    'w', 'i', 'n', 'I', 'd', 0,
    'f', 'i', 'x', 'u', 'p', 0,
    'd', 'e', 'l', 'i', 'm', 0,
    'q', 'G', 'r', 'a', 'y', 0,
    'q', 'R', 'g', 'b', 'a', 0,
    'q', 'B', 'l', 'u', 'e', 0,
    'b', 'l', 'u', 'e', '8', 0,
    'x', 'o', 'r', 'e', 'd', 0,
    'n', 'l', 'e', 'r', 'p', 0,
    's', 'l', 'e', 'r', 'p', 0,
    'A', 't', 'E', 'n', 'd', 0,
    't', 'i', 't', 'l', 'e', 0,
    'a', 'r', 'c', 'T', 'o', 0,
    'r', 'e', 'c', 't', 's', 0,
    's', 'h', 'e', 'a', 'r', 0,
    'b', 'e', 'g', 'i', 'n', 0,
    'D', 'i', 'd', 'o', 't', 0,
    'u', 'n', 'i', 't', 's', 0,
    'A', 'n', 's', 'i', 'B', 0,
    'A', 'n', 's', 'i', 'A', 0,
    'A', 'r', 'c', 'h', 'E', 0,
    'A', 'r', 'c', 'h', 'D', 0,
    'A', 'r', 'c', 'h', 'C', 0,
    'A', 'r', 'c', 'h', 'B', 0,
    'A', 'r', 'c', 'h', 'A', 0,
    'A', 'n', 's', 'i', 'E', 0,
    'A', 'n', 's', 'i', 'D', 0,
    'A', 'n', 's', 'i', 'C', 0,
    'J', 'i', 's', 'B', '9', 0,
    'J', 'i', 's', 'B', '8', 0,
    'J', 'i', 's', 'B', '7', 0,
    'J', 'i', 's', 'B', '6', 0,
    'J', 'i', 's', 'B', '5', 0,
    'J', 'i', 's', 'B', '4', 0,
    'J', 'i', 's', 'B', '3', 0,
    'J', 'i', 's', 'B', '2', 0,
    'J', 'i', 's', 'B', '1', 0,
    'J', 'i', 's', 'B', '0', 0,
    'F', 'o', 'l', 'i', 'o', 0,
    'U', 'I', 'n', 't', '8', 0,
    'f', 'a', 'c', 'e', 's', 0,
    'S', 'R', 'G', 'B', '8', 0,
    'R', 'G', '3', '2', 'F', 0,
    'R', 'G', '1', '6', 'F', 0,
    'R', 'G', '3', '2', 'I', 0,
    'R', 'G', '1', '6', 'I', 0,
    'R', 'G', 'B', '8', 'I', 0,
    'R', 'G', '3', '2', 'U', 0,
    'R', 'G', '1', '6', 'U', 0,
    'R', 'G', 'B', '8', 'U', 0,
    'L', 'i', 'b', 'G', 'L', 0,
    's', 'p', 'e', 'e', 'd', 0,
    'o', 'r', 't', 'h', 'o', 0,
    'P', 'r', 'i', 'n', 't', 0,
    'P', 'a', 's', 't', 'e', 0,
    'C', 'l', 'i', 'c', 'k', 0,
    'g', 'a', 'm', 'm', 'a', 0,
    'p', 'i', 'x', 'e', 'l', 0,
    'd', 'e', 'p', 't', 'h', 0,
    's', 'i', 'z', 'e', 's', 0,
    'c', 'l', 'o', 'n', 'e', 0,
    'p', 'a', 'i', 'n', 't', 0,
    'R', 'u', 'n', 'i', 'c', 0,
    'O', 'g', 'h', 'a', 'm', 0,
    'B', 'l', 'a', 'c', 'k', 0,
    'T', 'i', 'm', 'e', 's', 0,
    'T', 'o', 'k', 'e', 'n', 0,
    'O', 't', 'h', 'e', 'r', 0,
    'y', 'T', 'i', 'l', 't', 0,
    'x', 'T', 'i', 'l', 't', 0,
    'p', 'h', 'a', 's', 'e', 0,
    'Q', 'D', 'r', 'a', 'g', 0,
    's', 't', 'o', 'p', 's', 0,
    't', 'o', 'H', 's', 'l', 0,
    't', 'o', 'H', 's', 'v', 0,
    't', 'o', 'R', 'g', 'b', 0,
    'c', 'y', 'a', 'n', 'F', 0,
    'b', 'l', 'u', 'e', 'F', 0,
    'a', 'l', 'p', 'h', 'a', 0,
    'b', 'l', 'o', 'c', 'k', 0,
    's', 'h', 'a', 'p', 'e', 0,
    'c', 'o', 'd', 'e', 'c', 0,
    't', 'y', 'p', 'e', 's', 0,
    'c', 'o', 'l', 'o', 'r', 0,
    'i', 'm', 'a', 'g', 'e', 0,
    'Q', 'I', 'c', 'o', 'n', 0,
    'Q', 'F', 'o', 'n', 't', 0,
    's', 't', 'y', 'l', 'e', 0,
    'K', 'h', 'm', 'e', 'r', 0,
    'T', 'a', 'm', 'i', 'l', 0,
    'O', 'r', 'i', 'y', 'a', 0,
    'L', 'a', 't', 'i', 'n', 0,
    'G', 'r', 'e', 'e', 'k', 0,
    'p', 'o', 'i', 'n', 't', 0,
    'h', 'i', 'n', 't', 's', 0,
    'm', 'e', 'r', 'g', 'e', 0,
    'w', 'r', 'i', 't', 'e', 0,
    'u', 'n', 'm', 'a', 'p', 0,
    'e', 'r', 'r', 'o', 'r', 0,
    'C', 'l', 'o', 's', 'e', 0,
    'e', 'x', 'e', 'c', '_', 0,
    'w', 'i', 'd', 't', 'h', 0,
    'r', 'i', 'g', 'h', 't', 0,
    'a', 't', 'E', 'n', 'd', 0,
    'c', 'l', 'o', 's', 'e', 0,
    'c', 'l', 'e', 'a', 'r', 0,
    'f', 'i', 'r', 's', 't', 0,
    'm', 'a', 't', 'c', 'h', 0,
    'b', 'u', 'd', 'd', 'y', 0,
    'c', 'o', 'u', 'n', 't', 0,
    'v', 'a', 'l', 'u', 'e', 0,
    'i', 'n', 'd', 'e', 'x', 0,
    'm', 'o', 'd', 'e', 'l', 0,
    'c', 'h', 'i', 'l', 'd', 0,
    'f', 'l', 'u', 's', 'h', 0,
    'f', 'l', 'a', 'g', 's', 0,
    'e', 'v', 'e', 'n', 't', 0,
    's', 't', 'a', 'r', 't', 0,
    'g', 'r', 'e', 'e', 'n', 0,
    'b', 'l', 'a', 'c', 'k', 0,
    's', 'e', 't', 'W', 0,
    'e', 'd', 'g', 'e', 0,
    't', 'a', 'b', 's', 0,
    'r', 'e', 'd', 'o', 0,
    'u', 'n', 'd', 'o', 0,
    'D', 'o', 'w', 'n', 0,
    'r', 'o', 'w', 's', 0,
    'q', 'R', 'g', 'b', 0,
    'q', 'R', 'e', 'd', 0,
    'r', 'e', 'd', '8', 0,
    's', 'e', 't', 'Z', 0,
    'a', 'x', 'i', 's', 0,
    'f', 'i', 'n', 'd', 0,
    'I', 'M', 'C', '4', 0,
    'I', 'M', 'C', '3', 0,
    'I', 'M', 'C', '2', 0,
    'I', 'M', 'C', '1', 0,
    'N', 'V', '2', '1', 0,
    'N', 'V', '1', '2', 0,
    'Y', 'U', 'Y', 'V', 0,
    'U', 'Y', 'V', 'Y', 0,
    'Y', 'V', '1', '2', 0,
    'C', 'M', 'Y', 'K', 0,
    'p', 'l', 'a', 'y', 0,
    'j', 'o', 'i', 'n', 0,
    'L', 'i', 'n', 'k', 0,
    'd', 'a', 'r', 'k', 0,
    'P', 'i', 'c', 'a', 0,
    'N', 'o', 't', 'e', 0,
    'b', 'l', 'i', 't', 0,
    'B', 'G', 'R', 'A', 0,
    'R', 'G', 'B', 'A', 0,
    'D', '3', '2', 'F', 0,
    'R', '3', '2', 'F', 0,
    'R', '1', '6', 'F', 0,
    'R', '3', '2', 'I', 0,
    'R', '1', '6', 'I', 0,
    'R', 'G', '8', 'I', 0,
    'R', '3', '2', 'U', 0,
    'R', '1', '6', 'U', 0,
    'R', 'G', '8', 'U', 0,
    'k', 'e', 'y', '4', 0,
    'k', 'e', 'y', '3', 0,
    'k', 'e', 'y', '2', 0,
    'Q', 'u', 'i', 't', 0,
    'F', 'i', 'n', 'd', 0,
    'B', 'a', 'c', 'k', 0,
    'R', 'e', 'd', 'o', 0,
    'U', 'n', 'd', 'o', 0,
    'S', 'a', 'v', 'e', 0,
    'h', 'i', 'd', 'e', 0,
    's', 'h', 'o', 'w', 0,
    'i', 'c', 'o', 'n', 0,
    'f', 'o', 'n', 't', 0,
    'b', 'o', 'l', 'd', 0,
    'T', 'h', 'i', 'n', 0,
    'h', 'r', 'e', 'f', 0,
    'R', 'u', 'b', 'y', 0,
    'P', 'u', 'c', 'k', 0,
    'p', 'o', 's', 'F', 0,
    'h', 'o', 't', 'Y', 0,
    'h', 'o', 't', 'X', 0,
    'N', 'e', 'g', 'a', 0,
    'h', 'u', 'e', 'F', 0,
    'r', 'g', 'b', 'a', 0,
    'r', 'e', 'd', 'F', 0,
    'i', 't', 'e', 'm', 0,
    'r', 'e', 'c', 't', 0,
    'd', 'r', 'a', 'w', 0,
    'c', 'l', 'i', 'p', 0,
    's', 'a', 'v', 'e', 0,
    'm', 'a', 's', 'k', 0,
    'O', 'p', 'e', 'n', 0,
    's', 'y', 'n', 'c', 0,
    's', 'e', 't', 'Y', 0,
    's', 'e', 't', 'X', 0,
    'Q', 'P', 'e', 'n', 0,
    'T', 'h', 'a', 'i', 0,
    'l', 'o', 'a', 'd', 0,
    'c', 'o', 'p', 'y', 0,
    'l', 'i', 'n', 'k', 0,
    's', 'p', 'e', 'c', 0,
    'e', 'x', 'e', 'c', 0,
    'm', 'o', 'd', 'e', 0,
    'n', 'a', 'm', 'e', 0,
    'n', 'e', 'x', 't', 0,
    'l', 'e', 'f', 't', 0,
    'b', 'i', 't', 's', 0,
    'f', 'i', 'l', 'l', 0,
    'f', 'r', 'o', 'm', 0,
    'l', 'a', 's', 't', 0,
    's', 'p', 'a', 'n', 0,
    's', 'o', 'r', 't', 0,
    's', 'w', 'a', 'p', 0,
    'd', 'a', 't', 'a', 0,
    'r', 'o', 'l', 'e', 0,
    's', 't', 'o', 'p', 0,
    'c', 'y', 'a', 'n', 0,
    'b', 'l', 'u', 'e', 0,
    'Y', '1', '6', 0,
    'Y', 'U', 'V', 0,
    'H', 'S', 'V', 0,
    'H', 'S', 'L', 0,
    'M', 'i', 'd', 0,
    'P', 'd', 'f', 0,
    'S', 'V', 'G', 0,
    'X', '1', '1', 0,
    'A', '1', '0', 0,
    'D', 'L', 'E', 0,
    'C', '5', 'E', 0,
    'B', 'G', 'R', 0,
    'R', 'G', 'B', 0,
    'D', '3', '2', 0,
    'D', '2', '4', 0,
    'D', '1', '6', 0,
    'R', '8', 'I', 0,
    'R', '8', 'U', 0,
    'l', 'o', 'g', 0,
    'm', '3', '3', 0,
    'm', '3', '2', 0,
    'm', '3', '1', 0,
    'm', '2', '3', 0,
    'm', '2', '2', 0,
    'm', '2', '1', 0,
    'm', '1', '3', 0,
    'm', '1', '2', 0,
    'm', '1', '1', 0,
    'C', 'u', 't', 0,
    'N', 'e', 'w', 0,
    'O', 'f', 'f', 0,
    'A', 'n', 'y', 0,
    't', 'i', 'p', 0,
    'h', 'u', 'e', 0,
    'c', 'a', 'p', 0,
    'a', 'd', 'd', 0,
    'u', 'r', 'l', 0,
    'N', 'k', 'o', 0,
    'L', 'a', 'o', 0,
    'k', 'e', 'y', 0,
    'm', 'i', 'd', 0,
    'p', 'o', 's', 0,
    'r', 'o', 'w', 0,
    'U', 'p', 0,
    'Y', '8', 0,
    's', 'w', 0,
    's', 'x', 0,
    'A', '9', 0,
    'A', '7', 0,
    'A', '6', 0,
    'A', '5', 0,
    'A', '3', 0,
    'A', '0', 0,
    'R', 'G', 0,
    'O', 'n', 0,
    'd', 'x', 0,
    'Q', 't', 0,
    'z', 0,
};
#line 172 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qfontmetrics.sip"
// Convert an optional Python list to a 0 terminated array of integers on the
// heap.
int *qtgui_tabarray(PyObject *l)
{
    if (!l || l == Py_None)
        return 0;

    int *arr = new int[PyList_Size(l) + 1];
    Py_ssize_t i;

    for (i = 0; i < PyList_Size(l); ++i)
        arr[i] = SIPLong_AsLong(PyList_GetItem(l, i));

    arr[i] = 0;

    return arr;
}
#line 318 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qguiapplication.sip"
// Imports from QtCore.
pyqt5_qtgui_from_argv_list_t pyqt5_qtgui_from_argv_list;
pyqt5_qtgui_update_argv_list_t pyqt5_qtgui_update_argv_list;

// Forward declarations not in any header files but are part of the API.
void qt_set_sequence_auto_mnemonic(bool enable);
#line 248 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qimage.sip"
// Convert a list of strings to an array of ASCII strings on the heap.  Used by
// QImage and QPixmap.
const char **QtGui_ListToArray(PyObject *lst)
{
    Py_ssize_t nstr = PyList_Size(lst);
    const char **arr = new const char *[nstr + 1];

    for (Py_ssize_t i = 0; i < nstr; ++i)
    {
        PyObject *ascii_obj = PyList_GetItem(lst, i);
        const char *ascii = sipString_AsASCIIString(&ascii_obj);

        if (!ascii)
        {
            while (i-- > 0)
                delete[] arr[i];

            delete[] arr;

            return 0;
        }

        // Copy the string.
        arr[i] = qstrdup(ascii);

        Py_DECREF(ascii_obj);
    }

    // The sentinal.
    arr[nstr] = 0;

    return arr;
}


// Return a string array created by QtGui_ListToArray() to the heap.
void QtGui_DeleteArray(const char **arr)
{
    for (Py_ssize_t i = 0; arr[i]; ++i)
        delete[] arr[i];

    delete[] arr;
}
#line 24 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qmatrix4x4.sip"
#include <qmatrix4x4.h>
#line 228 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qmatrix4x4.sip"
// Convert a Python object to a row and column.
sipErrorState qtgui_matrixParseIndex(PyObject *tup, int nr_rows,
        int nr_columns, int *row, int *column)
{
    sipErrorState es = sipErrorContinue;

    if (PyTuple_Check(tup) && PyArg_ParseTuple(tup, "ii", row, column))
        if (*row >= 0 && *row < nr_rows && *column >= 0 && *column < nr_columns)
            es = sipErrorNone;

    if (es == sipErrorContinue)
        PyErr_Format(PyExc_IndexError, "an index must be a row in the range 0 to %d and a column in the range 0 to %d", nr_rows - 1, nr_columns - 1);

    return es;
}


// Convert a Python object to an array of qreals.
sipErrorState qtgui_matrixDataFromSequence(PyObject *seq, int nr_values,
        PYQT_FLOAT *values)
{
    sipErrorState es;

    if (PySequence_Size(seq) == nr_values)
    {
        es = sipErrorNone;

        for (int i = 0; i < nr_values; ++i)
        {
            PyObject *value = PySequence_GetItem(seq, i);

            if (!value)
            {
                es = sipErrorFail;
                break;
            }

            PyErr_Clear();

            double d = PyFloat_AsDouble(value);

            if (PyErr_Occurred())
            {
                Py_DECREF(value);
                es = sipErrorContinue;
                break;
            }

            Py_DECREF(value);

            *values++ = d;
        }
    }
    else
    {
        es = sipErrorContinue;
    }

    if (es == sipErrorContinue)
        PyErr_Format(PyExc_TypeError, "a sequence of %d floats is expected",
                nr_values);

    return es;
}


// Convert an array of qreals to a Python list.
sipErrorState qtgui_matrixDataAsList(int nr_values, const PYQT_FLOAT *values,
        PyObject **list)
{
    PyObject *l = PyList_New(nr_values);

    if (!l)
        return sipErrorFail;

    for (int i = 0; i < nr_values; ++i)
    {
        PyObject *value = PyFloat_FromDouble(*values++);

        if (!value)
        {
            Py_DECREF(l);
            return sipErrorFail;
        }

        PyList_SetItem(l, i, value);
    }

    *list = l;

    return sipErrorNone;
}
#line 25 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpixelformat.sip"
#include <qpixelformat.h>
#line 24 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qquaternion.sip"
#include <qquaternion.h>
#line 25 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qrgba64.sip"
#include <qrgba64.h>
#line 24 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qrgb.sip"
#include <qrgb.h>
#line 260 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
// Wrap a QObject and ensure that it's ancestors are all wrapped with the
// correct ownerships.
static PyObject *qtgui_wrap_ancestors_worker(QObject *obj)
{
    if (!obj)
    {
        Py_INCREF(Py_None);
        return Py_None;
    }

    PyObject *py_parent = qtgui_wrap_ancestors_worker(obj->parent());

    if (!py_parent)
        return 0;

    PyObject *py_obj = sipConvertFromType(obj, sipType_QObject,
            (py_parent != Py_None ? py_parent : 0));

    Py_DECREF(py_parent);
    return py_obj;
}

PyObject *qtgui_wrap_ancestors(QObject *obj, const sipTypeDef *td)
{
    PyObject *py_parent = qtgui_wrap_ancestors_worker(obj->parent());

    if (!py_parent)
        return 0;

    PyObject *py_obj = sipConvertFromType(obj, td,
            (py_parent != Py_None ? py_parent : 0));

    Py_DECREF(py_parent);

    return py_obj;
}
#line 24 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 24 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qvector2d.sip"
#include <qvector2d.h>
#line 24 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qvector3d.sip"
#include <qvector3d.h>
#line 24 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qvector4d.sip"
#include <qvector4d.h>
#line 4427 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

void sipVH_QtGui_109(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, double a0,double a1,int a2)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "ddi", a0, a1, a2);
}

void sipVH_QtGui_108(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QString& a0)
{
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "D", &a0, sipType_QString, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QString, &a0);
}

 ::QValidator::State sipVH_QtGui_107(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QString& a0,int& a1)
{
     ::QValidator::State sipRes =  ::QValidator::Invalid;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "Di", &a0, sipType_QString, SIP_NULLPTR, a1);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "(FH5i)", sipType_QValidator_State, &sipRes, sipType_QString, &a0, &a1);

    return sipRes;
}

void sipVH_QtGui_106(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QTextBlock& a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "N", new  ::QTextBlock(a0), sipType_QTextBlock, SIP_NULLPTR);
}

 ::QVariant sipVH_QtGui_105(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int a0,const  ::QUrl& a1)
{
     ::QVariant sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "iN", a0, new  ::QUrl(a1), sipType_QUrl, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QVariant, &sipRes);

    return sipRes;
}

 ::QTextObject* sipVH_QtGui_104(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QTextFormat& a0)
{
     ::QTextObject* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "N", new  ::QTextFormat(a0), sipType_QTextFormat, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H2", sipType_QTextObject, &sipRes);

    return sipRes;
}

void sipVH_QtGui_103(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QString& a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "N", new  ::QString(a0), sipType_QString, SIP_NULLPTR);
}

bool sipVH_QtGui_102(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QStandardItem& a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "D", const_cast< ::QStandardItem *>(&a0), sipType_QStandardItem, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

void sipVH_QtGui_101(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QDataStream& a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", &a0, sipType_QDataStream, SIP_NULLPTR);
}

 ::QStandardItem* sipVH_QtGui_100(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QStandardItem* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H2", sipType_QStandardItem, &sipRes);

    return sipRes;
}

void sipVH_QtGui_99(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QVariant& a0,int a1)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "Ni", new  ::QVariant(a0), sipType_QVariant, SIP_NULLPTR, a1);
}

 ::QVariant sipVH_QtGui_98(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int a0)
{
     ::QVariant sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "i", a0);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QVariant, &sipRes);

    return sipRes;
}

 ::QModelIndex sipVH_QtGui_97(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int a0,int a1,const  ::QModelIndex& a2)
{
     ::QModelIndex sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "iiN", a0, a1, new  ::QModelIndex(a2), sipType_QModelIndex, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QModelIndex, &sipRes);

    return sipRes;
}

int sipVH_QtGui_96(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QModelIndex& a0)
{
    int sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "N", new  ::QModelIndex(a0), sipType_QModelIndex, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "i", &sipRes);

    return sipRes;
}

 ::QVariant sipVH_QtGui_95(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QModelIndex& a0,int a1)
{
     ::QVariant sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "Ni", new  ::QModelIndex(a0), sipType_QModelIndex, SIP_NULLPTR, a1);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QVariant, &sipRes);

    return sipRes;
}

bool sipVH_QtGui_94(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QModelIndex& a0,const  ::QVariant& a1,int a2)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "NNi", new  ::QModelIndex(a0), sipType_QModelIndex, SIP_NULLPTR, new  ::QVariant(a1), sipType_QVariant, SIP_NULLPTR, a2);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

 ::QVariant sipVH_QtGui_93(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int a0, ::Qt::Orientation a1,int a2)
{
     ::QVariant sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "iFi", a0, a1, sipType_Qt_Orientation, a2);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QVariant, &sipRes);

    return sipRes;
}

bool sipVH_QtGui_92(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int a0, ::Qt::Orientation a1,const  ::QVariant& a2,int a3)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "iFNi", a0, a1, sipType_Qt_Orientation, new  ::QVariant(a2), sipType_QVariant, SIP_NULLPTR, a3);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

QMap<int, ::QVariant> sipVH_QtGui_91(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QModelIndex& a0)
{
    QMap<int, ::QVariant> sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "N", new  ::QModelIndex(a0), sipType_QModelIndex, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QMap_1800_0100QVariant, &sipRes);

    return sipRes;
}

bool sipVH_QtGui_90(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QModelIndex& a0,const QMap<int, ::QVariant>& a1)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "NN", new  ::QModelIndex(a0), sipType_QModelIndex, SIP_NULLPTR, new QMap<int, ::QVariant>(a1), sipType_QMap_1800_0100QVariant, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

 ::QStringList sipVH_QtGui_89(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QStringList sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QStringList, &sipRes);

    return sipRes;
}

 ::QMimeData* sipVH_QtGui_88(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QModelIndexList& a0)
{
     ::QMimeData* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "N", new  ::QModelIndexList(a0), sipType_QList_0100QModelIndex, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H2", sipType_QMimeData, &sipRes);

    return sipRes;
}

bool sipVH_QtGui_87(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int a0,int a1,const  ::QModelIndex& a2)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "iiN", a0, a1, new  ::QModelIndex(a2), sipType_QModelIndex, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

void sipVH_QtGui_86(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QModelIndex& a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "N", new  ::QModelIndex(a0), sipType_QModelIndex, SIP_NULLPTR);
}

bool sipVH_QtGui_85(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QModelIndex& a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "N", new  ::QModelIndex(a0), sipType_QModelIndex, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

 ::Qt::ItemFlags sipVH_QtGui_84(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QModelIndex& a0)
{
     ::Qt::ItemFlags sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "N", new  ::QModelIndex(a0), sipType_QModelIndex, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_Qt_ItemFlags, &sipRes);

    return sipRes;
}

void sipVH_QtGui_83(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int a0, ::Qt::SortOrder a1)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "iF", a0, a1, sipType_Qt_SortOrder);
}

 ::QModelIndex sipVH_QtGui_82(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QModelIndex& a0)
{
     ::QModelIndex sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "N", new  ::QModelIndex(a0), sipType_QModelIndex, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QModelIndex, &sipRes);

    return sipRes;
}

 ::QModelIndexList sipVH_QtGui_81(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QModelIndex& a0,int a1,const  ::QVariant& a2,int a3, ::Qt::MatchFlags a4)
{
     ::QModelIndexList sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "NiNiN", new  ::QModelIndex(a0), sipType_QModelIndex, SIP_NULLPTR, a1, new  ::QVariant(a2), sipType_QVariant, SIP_NULLPTR, a3, new  ::Qt::MatchFlags(a4), sipType_Qt_MatchFlags, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QList_0100QModelIndex, &sipRes);

    return sipRes;
}

 ::QSize sipVH_QtGui_80(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QModelIndex& a0)
{
     ::QSize sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "N", new  ::QModelIndex(a0), sipType_QModelIndex, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QSize, &sipRes);

    return sipRes;
}

 ::Qt::DropActions sipVH_QtGui_79(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::Qt::DropActions sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_Qt_DropActions, &sipRes);

    return sipRes;
}

QHash<int, ::QByteArray> sipVH_QtGui_78(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    QHash<int, ::QByteArray> sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QHash_1800_0100QByteArray, &sipRes);

    return sipRes;
}

bool sipVH_QtGui_77(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QMimeData*a0, ::Qt::DropAction a1,int a2,int a3,const  ::QModelIndex& a4)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "DFiiN", const_cast< ::QMimeData *>(a0), sipType_QMimeData, SIP_NULLPTR, a1, sipType_Qt_DropAction, a2, a3, new  ::QModelIndex(a4), sipType_QModelIndex, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH_QtGui_76(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QModelIndex& a0,int a1,int a2,const  ::QModelIndex& a3,int a4)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "NiiNi", new  ::QModelIndex(a0), sipType_QModelIndex, SIP_NULLPTR, a1, a2, new  ::QModelIndex(a3), sipType_QModelIndex, SIP_NULLPTR, a4);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

void sipVH_QtGui_75(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const char*a0,uint a1)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "g", a0, (SIP_SSIZE_T)a1);
}

 ::QPaintEngine::Type sipVH_QtGui_74(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QPaintEngine::Type sipRes =  ::QPaintEngine::X11;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "F", sipType_QPaintEngine_Type, &sipRes);

    return sipRes;
}

void sipVH_QtGui_73(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QRectF& a0,const  ::QImage& a1,const  ::QRectF& a2, ::Qt::ImageConversionFlags a3)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "NNNN", new  ::QRectF(a0), sipType_QRectF, SIP_NULLPTR, new  ::QImage(a1), sipType_QImage, SIP_NULLPTR, new  ::QRectF(a2), sipType_QRectF, SIP_NULLPTR, new  ::Qt::ImageConversionFlags(a3), sipType_Qt_ImageConversionFlags, SIP_NULLPTR);
}

void sipVH_QtGui_72(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QRectF& a0,const  ::QPixmap& a1,const  ::QPointF& a2)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "NNN", new  ::QRectF(a0), sipType_QRectF, SIP_NULLPTR, new  ::QPixmap(a1), sipType_QPixmap, SIP_NULLPTR, new  ::QPointF(a2), sipType_QPointF, SIP_NULLPTR);
}

void sipVH_QtGui_71(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QPointF& a0,const  ::QTextItem& a1)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "ND", new  ::QPointF(a0), sipType_QPointF, SIP_NULLPTR, const_cast< ::QTextItem *>(&a1), sipType_QTextItem, SIP_NULLPTR);
}

void sipVH_QtGui_70(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QRectF& a0,const  ::QPixmap& a1,const  ::QRectF& a2)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "NNN", new  ::QRectF(a0), sipType_QRectF, SIP_NULLPTR, new  ::QPixmap(a1), sipType_QPixmap, SIP_NULLPTR, new  ::QRectF(a2), sipType_QRectF, SIP_NULLPTR);
}

void sipVH_QtGui_69(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QPoint*a0,int a1, ::QPaintEngine::PolygonDrawMode a2)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "rF", const_cast< ::QPoint *>(a0), (SIP_SSIZE_T)a1, sipType_QPoint, a2, sipType_QPaintEngine_PolygonDrawMode);
}

void sipVH_QtGui_68(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QPointF*a0,int a1, ::QPaintEngine::PolygonDrawMode a2)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "rF", const_cast< ::QPointF *>(a0), (SIP_SSIZE_T)a1, sipType_QPointF, a2, sipType_QPaintEngine_PolygonDrawMode);
}

void sipVH_QtGui_67(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QPoint*a0,int a1)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "r", const_cast< ::QPoint *>(a0), (SIP_SSIZE_T)a1, sipType_QPoint);
}

void sipVH_QtGui_66(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QPointF*a0,int a1)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "r", const_cast< ::QPointF *>(a0), (SIP_SSIZE_T)a1, sipType_QPointF);
}

void sipVH_QtGui_65(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QPainterPath& a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "N", new  ::QPainterPath(a0), sipType_QPainterPath, SIP_NULLPTR);
}

void sipVH_QtGui_64(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QRect& a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "N", new  ::QRect(a0), sipType_QRect, SIP_NULLPTR);
}

void sipVH_QtGui_63(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QRectF& a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "N", new  ::QRectF(a0), sipType_QRectF, SIP_NULLPTR);
}

void sipVH_QtGui_62(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QLineF*a0,int a1)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "r", const_cast< ::QLineF *>(a0), (SIP_SSIZE_T)a1, sipType_QLineF);
}

void sipVH_QtGui_61(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QLine*a0,int a1)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "r", const_cast< ::QLine *>(a0), (SIP_SSIZE_T)a1, sipType_QLine);
}

void sipVH_QtGui_60(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QRectF*a0,int a1)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "r", const_cast< ::QRectF *>(a0), (SIP_SSIZE_T)a1, sipType_QRectF);
}

void sipVH_QtGui_59(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QRect*a0,int a1)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "r", const_cast< ::QRect *>(a0), (SIP_SSIZE_T)a1, sipType_QRect);
}

void sipVH_QtGui_58(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QPaintEngineState& a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", const_cast< ::QPaintEngineState *>(&a0), sipType_QPaintEngineState, SIP_NULLPTR);
}

bool sipVH_QtGui_57(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QPaintDevice*a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "D", a0, sipType_QPaintDevice, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

void sipVH_QtGui_56(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QPagedPaintDevice::Margins& a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "N", new  ::QPagedPaintDevice::Margins(a0), sipType_QPagedPaintDevice_Margins, SIP_NULLPTR);
}

void sipVH_QtGui_55(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QSizeF& a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "N", new  ::QSizeF(a0), sipType_QSizeF, SIP_NULLPTR);
}

void sipVH_QtGui_54(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QPagedPaintDevice::PageSize a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "F", a0, sipType_QPagedPaintDevice_PageSize);
}

void sipVH_QtGui_53(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int a0,int a1)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "ii", a0, a1);
}

void sipVH_QtGui_52(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QPaintEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QPaintEvent, SIP_NULLPTR);
}

void sipVH_QtGui_51(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QTabletEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QTabletEvent, SIP_NULLPTR);
}

void sipVH_QtGui_50(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QTouchEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QTouchEvent, SIP_NULLPTR);
}

void sipVH_QtGui_49(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QWheelEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QWheelEvent, SIP_NULLPTR);
}

void sipVH_QtGui_48(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QMouseEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QMouseEvent, SIP_NULLPTR);
}

void sipVH_QtGui_47(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QKeyEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QKeyEvent, SIP_NULLPTR);
}

void sipVH_QtGui_46(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QHideEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QHideEvent, SIP_NULLPTR);
}

void sipVH_QtGui_45(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QShowEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QShowEvent, SIP_NULLPTR);
}

void sipVH_QtGui_44(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QFocusEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QFocusEvent, SIP_NULLPTR);
}

void sipVH_QtGui_43(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QMoveEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QMoveEvent, SIP_NULLPTR);
}

void sipVH_QtGui_42(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QResizeEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QResizeEvent, SIP_NULLPTR);
}

void sipVH_QtGui_41(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QExposeEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QExposeEvent, SIP_NULLPTR);
}

 ::QObject* sipVH_QtGui_40(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QObject* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H0", sipType_QObject, &sipRes);

    return sipRes;
}

void sipVH_QtGui_39(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "");
}

 ::QSize sipVH_QtGui_38(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QSize sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QSize, &sipRes);

    return sipRes;
}

 ::QSurface::SurfaceType sipVH_QtGui_37(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QSurface::SurfaceType sipRes =  ::QSurface::RasterSurface;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "F", sipType_QSurface_SurfaceType, &sipRes);

    return sipRes;
}

 ::QSurfaceFormat sipVH_QtGui_36(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QSurfaceFormat sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QSurfaceFormat, &sipRes);

    return sipRes;
}

 ::QRect sipVH_QtGui_35(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QRect sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QRect, &sipRes);

    return sipRes;
}

bool sipVH_QtGui_34(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "i", a0);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH_QtGui_33(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QImageIOHandler::ImageOption a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "F", a0, sipType_QImageIOHandler_ImageOption);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

void sipVH_QtGui_32(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QImageIOHandler::ImageOption a0,const  ::QVariant& a1)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "FN", a0, sipType_QImageIOHandler_ImageOption, new  ::QVariant(a1), sipType_QVariant, SIP_NULLPTR);
}

 ::QVariant sipVH_QtGui_31(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QImageIOHandler::ImageOption a0)
{
     ::QVariant sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "F", a0, sipType_QImageIOHandler_ImageOption);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QVariant, &sipRes);

    return sipRes;
}

bool sipVH_QtGui_30(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QImage& a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "N", new  ::QImage(a0), sipType_QImage, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH_QtGui_29(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QImage*a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "D", a0, sipType_QImage, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH_QtGui_28(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

QList< ::QSize> sipVH_QtGui_27(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QIcon::Mode a0, ::QIcon::State a1)
{
    QList< ::QSize> sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "FF", a0, sipType_QIcon_Mode, a1, sipType_QIcon_State);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QList_0100QSize, &sipRes);

    return sipRes;
}

bool sipVH_QtGui_26(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QDataStream& a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "D", &a0, sipType_QDataStream, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

 ::QIconEngine* sipVH_QtGui_25(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QIconEngine* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H2", sipType_QIconEngine, &sipRes);

    return sipRes;
}

 ::QString sipVH_QtGui_24(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QString sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QString, &sipRes);

    return sipRes;
}

void sipVH_QtGui_23(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QString& a0,const  ::QSize& a1, ::QIcon::Mode a2, ::QIcon::State a3)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "NNFF", new  ::QString(a0), sipType_QString, SIP_NULLPTR, new  ::QSize(a1), sipType_QSize, SIP_NULLPTR, a2, sipType_QIcon_Mode, a3, sipType_QIcon_State);
}

void sipVH_QtGui_22(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QPixmap& a0, ::QIcon::Mode a1, ::QIcon::State a2)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "NFF", new  ::QPixmap(a0), sipType_QPixmap, SIP_NULLPTR, a1, sipType_QIcon_Mode, a2, sipType_QIcon_State);
}

 ::QPixmap sipVH_QtGui_21(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QSize& a0, ::QIcon::Mode a1, ::QIcon::State a2)
{
     ::QPixmap sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "NFF", new  ::QSize(a0), sipType_QSize, SIP_NULLPTR, a1, sipType_QIcon_Mode, a2, sipType_QIcon_State);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QPixmap, &sipRes);

    return sipRes;
}

 ::QSize sipVH_QtGui_20(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QSize& a0, ::QIcon::Mode a1, ::QIcon::State a2)
{
     ::QSize sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "NFF", new  ::QSize(a0), sipType_QSize, SIP_NULLPTR, a1, sipType_QIcon_Mode, a2, sipType_QIcon_State);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QSize, &sipRes);

    return sipRes;
}

void sipVH_QtGui_19(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QPainter*a0,const  ::QRect& a1, ::QIcon::Mode a2, ::QIcon::State a3)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "DNFF", a0, sipType_QPainter, SIP_NULLPTR, new  ::QRect(a1), sipType_QRect, SIP_NULLPTR, a2, sipType_QIcon_Mode, a3, sipType_QIcon_State);
}

int sipVH_QtGui_18(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QPaintDevice::PaintDeviceMetric a0)
{
    int sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "F", a0, sipType_QPaintDevice_PaintDeviceMetric);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "i", &sipRes);

    return sipRes;
}

 ::QPaintEngine* sipVH_QtGui_17(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QPaintEngine* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H0", sipType_QPaintEngine, &sipRes);

    return sipRes;
}

void sipVH_QtGui_16(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QPainter*a0,const  ::QRectF& a1, ::QTextDocument*a2,int a3,const  ::QTextFormat& a4)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "DNDiN", a0, sipType_QPainter, SIP_NULLPTR, new  ::QRectF(a1), sipType_QRectF, SIP_NULLPTR, a2, sipType_QTextDocument, SIP_NULLPTR, a3, new  ::QTextFormat(a4), sipType_QTextFormat, SIP_NULLPTR);
}

 ::QSizeF sipVH_QtGui_15(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QTextDocument*a0,int a1,const  ::QTextFormat& a2)
{
     ::QSizeF sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "DiN", a0, sipType_QTextDocument, SIP_NULLPTR, a1, new  ::QTextFormat(a2), sipType_QTextFormat, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QSizeF, &sipRes);

    return sipRes;
}

void sipVH_QtGui_14(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QPainter*a0,const  ::QRectF& a1, ::QTextInlineObject a2,int a3,const  ::QTextFormat& a4)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "DNNiN", a0, sipType_QPainter, SIP_NULLPTR, new  ::QRectF(a1), sipType_QRectF, SIP_NULLPTR, new  ::QTextInlineObject(a2), sipType_QTextInlineObject, SIP_NULLPTR, a3, new  ::QTextFormat(a4), sipType_QTextFormat, SIP_NULLPTR);
}

void sipVH_QtGui_13(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QTextInlineObject a0,int a1,const  ::QTextFormat& a2)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "NiN", new  ::QTextInlineObject(a0), sipType_QTextInlineObject, SIP_NULLPTR, a1, new  ::QTextFormat(a2), sipType_QTextFormat, SIP_NULLPTR);
}

void sipVH_QtGui_12(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int a0,int a1,int a2)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "iii", a0, a1, a2);
}

 ::QRectF sipVH_QtGui_11(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QTextBlock& a0)
{
     ::QRectF sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "N", new  ::QTextBlock(a0), sipType_QTextBlock, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QRectF, &sipRes);

    return sipRes;
}

 ::QRectF sipVH_QtGui_10(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QTextFrame*a0)
{
     ::QRectF sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "D", a0, sipType_QTextFrame, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QRectF, &sipRes);

    return sipRes;
}

 ::QSizeF sipVH_QtGui_9(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QSizeF sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QSizeF, &sipRes);

    return sipRes;
}

int sipVH_QtGui_8(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    int sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "i", &sipRes);

    return sipRes;
}

int sipVH_QtGui_7(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QPointF& a0, ::Qt::HitTestAccuracy a1)
{
    int sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "NF", new  ::QPointF(a0), sipType_QPointF, SIP_NULLPTR, a1, sipType_Qt_HitTestAccuracy);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "i", &sipRes);

    return sipRes;
}

void sipVH_QtGui_6(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QPainter*a0,const  ::QAbstractTextDocumentLayout::PaintContext& a1)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "DN", a0, sipType_QPainter, SIP_NULLPTR, new  ::QAbstractTextDocumentLayout::PaintContext(a1), sipType_QAbstractTextDocumentLayout_PaintContext, SIP_NULLPTR);
}

bool sipVH_QtGui_5(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QEvent*a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "D", a0, sipType_QEvent, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH_QtGui_4(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QObject*a0, ::QEvent*a1)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "DD", a0, sipType_QObject, SIP_NULLPTR, a1, sipType_QEvent, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

void sipVH_QtGui_3(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QTimerEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QTimerEvent, SIP_NULLPTR);
}

void sipVH_QtGui_2(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QChildEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QChildEvent, SIP_NULLPTR);
}

void sipVH_QtGui_1(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QEvent, SIP_NULLPTR);
}

void sipVH_QtGui_0(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QMetaMethod& a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "N", new  ::QMetaMethod(a0), sipType_QMetaMethod, SIP_NULLPTR);
}


PyDoc_STRVAR(doc_qIsGray, "qIsGray(int) -> bool");

extern "C" {static PyObject *func_qIsGray(PyObject *,PyObject *);}
static PyObject *func_qIsGray(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRgb a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "u", &a0))
        {
            bool sipRes;

            sipRes = qIsGray(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qIsGray, doc_qIsGray);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qGray, "qGray(int, int, int) -> int\n"
"qGray(int) -> int");

extern "C" {static PyObject *func_qGray(PyObject *,PyObject *);}
static PyObject *func_qGray(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "iii", &a0, &a1, &a2))
        {
            int sipRes;

            sipRes = qGray(a0,a1,a2);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
         ::QRgb a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "u", &a0))
        {
            int sipRes;

            sipRes = qGray(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qGray, doc_qGray);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qRgba, "qRgba(int, int, int, int) -> int");

extern "C" {static PyObject *func_qRgba(PyObject *,PyObject *);}
static PyObject *func_qRgba(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3;

        if (sipParseArgs(&sipParseErr, sipArgs, "iiii", &a0, &a1, &a2, &a3))
        {
             ::QRgb sipRes;

            sipRes = qRgba(a0,a1,a2,a3);

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qRgba, doc_qRgba);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qRgb, "qRgb(int, int, int) -> int");

extern "C" {static PyObject *func_qRgb(PyObject *,PyObject *);}
static PyObject *func_qRgb(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "iii", &a0, &a1, &a2))
        {
             ::QRgb sipRes;

            sipRes = qRgb(a0,a1,a2);

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qRgb, doc_qRgb);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qAlpha, "qAlpha(QRgba64) -> int\n"
"qAlpha(int) -> int");

extern "C" {static PyObject *func_qAlpha(PyObject *,PyObject *);}
static PyObject *func_qAlpha(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRgba64* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QRgba64, &a0))
        {
             ::uint sipRes;

            sipRes = qAlpha(*a0);

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    {
         ::QRgb a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "u", &a0))
        {
            int sipRes;

            sipRes = qAlpha(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qAlpha, doc_qAlpha);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qBlue, "qBlue(QRgba64) -> int\n"
"qBlue(int) -> int");

extern "C" {static PyObject *func_qBlue(PyObject *,PyObject *);}
static PyObject *func_qBlue(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRgba64* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QRgba64, &a0))
        {
             ::uint sipRes;

            sipRes = qBlue(*a0);

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    {
         ::QRgb a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "u", &a0))
        {
            int sipRes;

            sipRes = qBlue(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qBlue, doc_qBlue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qGreen, "qGreen(QRgba64) -> int\n"
"qGreen(int) -> int");

extern "C" {static PyObject *func_qGreen(PyObject *,PyObject *);}
static PyObject *func_qGreen(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRgba64* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QRgba64, &a0))
        {
             ::uint sipRes;

            sipRes = qGreen(*a0);

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    {
         ::QRgb a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "u", &a0))
        {
            int sipRes;

            sipRes = qGreen(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qGreen, doc_qGreen);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qRed, "qRed(QRgba64) -> int\n"
"qRed(int) -> int");

extern "C" {static PyObject *func_qRed(PyObject *,PyObject *);}
static PyObject *func_qRed(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRgba64* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QRgba64, &a0))
        {
             ::uint sipRes;

            sipRes = qRed(*a0);

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    {
         ::QRgb a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "u", &a0))
        {
            int sipRes;

            sipRes = qRed(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qRed, doc_qRed);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qUnpremultiply, "qUnpremultiply(QRgba64) -> QRgba64\n"
"qUnpremultiply(int) -> int");

extern "C" {static PyObject *func_qUnpremultiply(PyObject *,PyObject *);}
static PyObject *func_qUnpremultiply(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRgba64* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QRgba64, &a0))
        {
             ::QRgba64*sipRes;

            sipRes = new  ::QRgba64(qUnpremultiply(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRgba64,SIP_NULLPTR);
        }
    }

    {
         ::QRgb a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "u", &a0))
        {
             ::QRgb sipRes;

            sipRes = qUnpremultiply(a0);

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qUnpremultiply, doc_qUnpremultiply);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qPremultiply, "qPremultiply(QRgba64) -> QRgba64\n"
"qPremultiply(int) -> int");

extern "C" {static PyObject *func_qPremultiply(PyObject *,PyObject *);}
static PyObject *func_qPremultiply(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRgba64* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QRgba64, &a0))
        {
             ::QRgba64*sipRes;

            sipRes = new  ::QRgba64(qPremultiply(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRgba64,SIP_NULLPTR);
        }
    }

    {
         ::QRgb a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "u", &a0))
        {
             ::QRgb sipRes;

            sipRes = qPremultiply(a0);

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qPremultiply, doc_qPremultiply);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qRgba64, "qRgba64(int, int, int, int) -> QRgba64\n"
"qRgba64(int) -> QRgba64");

extern "C" {static PyObject *func_qRgba64(PyObject *,PyObject *);}
static PyObject *func_qRgba64(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::quint16 a0;
         ::quint16 a1;
         ::quint16 a2;
         ::quint16 a3;

        if (sipParseArgs(&sipParseErr, sipArgs, "tttt", &a0, &a1, &a2, &a3))
        {
             ::QRgba64*sipRes;

            sipRes = new  ::QRgba64(qRgba64(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QRgba64,SIP_NULLPTR);
        }
    }

    {
         ::quint64 a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "o", &a0))
        {
             ::QRgba64*sipRes;

            sipRes = new  ::QRgba64(qRgba64(a0));

            return sipConvertFromNewType(sipRes,sipType_QRgba64,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qRgba64, doc_qRgba64);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qPixelFormatAlpha, "qPixelFormatAlpha(int, typeInterpretation: QPixelFormat.TypeInterpretation = QPixelFormat.UnsignedInteger) -> QPixelFormat");

extern "C" {static PyObject *func_qPixelFormatAlpha(PyObject *,PyObject *, PyObject *);}
static PyObject *func_qPixelFormatAlpha(PyObject *,PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::uchar a0;
         ::QPixelFormat::TypeInterpretation a1 = QPixelFormat::UnsignedInteger;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_typeInterpretation,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "M|E", &a0, sipType_QPixelFormat_TypeInterpretation, &a1))
        {
             ::QPixelFormat*sipRes;

            sipRes = new  ::QPixelFormat(qPixelFormatAlpha(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QPixelFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qPixelFormatAlpha, doc_qPixelFormatAlpha);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qPixelFormatYuv, "qPixelFormatYuv(QPixelFormat.YUVLayout, alphaSize: int = 0, alphaUsage: QPixelFormat.AlphaUsage = QPixelFormat.IgnoresAlpha, alphaPosition: QPixelFormat.AlphaPosition = QPixelFormat.AtBeginning, premultiplied: QPixelFormat.AlphaPremultiplied = QPixelFormat.NotPremultiplied, typeInterpretation: QPixelFormat.TypeInterpretation = QPixelFormat.UnsignedByte, byteOrder: QPixelFormat.ByteOrder = QPixelFormat.LittleEndian) -> QPixelFormat");

extern "C" {static PyObject *func_qPixelFormatYuv(PyObject *,PyObject *, PyObject *);}
static PyObject *func_qPixelFormatYuv(PyObject *,PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPixelFormat::YUVLayout a0;
         ::uchar a1 = 0;
         ::QPixelFormat::AlphaUsage a2 = QPixelFormat::IgnoresAlpha;
         ::QPixelFormat::AlphaPosition a3 = QPixelFormat::AtBeginning;
         ::QPixelFormat::AlphaPremultiplied a4 = QPixelFormat::NotPremultiplied;
         ::QPixelFormat::TypeInterpretation a5 = QPixelFormat::UnsignedByte;
         ::QPixelFormat::ByteOrder a6 = QPixelFormat::LittleEndian;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_alphaSize,
            sipName_alphaUsage,
            sipName_alphaPosition,
            sipName_premultiplied,
            sipName_typeInterpretation,
            sipName_byteOrder,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "E|MEEEEE", sipType_QPixelFormat_YUVLayout, &a0, &a1, sipType_QPixelFormat_AlphaUsage, &a2, sipType_QPixelFormat_AlphaPosition, &a3, sipType_QPixelFormat_AlphaPremultiplied, &a4, sipType_QPixelFormat_TypeInterpretation, &a5, sipType_QPixelFormat_ByteOrder, &a6))
        {
             ::QPixelFormat*sipRes;

            sipRes = new  ::QPixelFormat(qPixelFormatYuv(a0,a1,a2,a3,a4,a5,a6));

            return sipConvertFromNewType(sipRes,sipType_QPixelFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qPixelFormatYuv, doc_qPixelFormatYuv);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qPixelFormatHsv, "qPixelFormatHsv(int, alphaSize: int = 0, alphaUsage: QPixelFormat.AlphaUsage = QPixelFormat.IgnoresAlpha, alphaPosition: QPixelFormat.AlphaPosition = QPixelFormat.AtBeginning, typeInterpretation: QPixelFormat.TypeInterpretation = QPixelFormat.FloatingPoint) -> QPixelFormat");

extern "C" {static PyObject *func_qPixelFormatHsv(PyObject *,PyObject *, PyObject *);}
static PyObject *func_qPixelFormatHsv(PyObject *,PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::uchar a0;
         ::uchar a1 = 0;
         ::QPixelFormat::AlphaUsage a2 = QPixelFormat::IgnoresAlpha;
         ::QPixelFormat::AlphaPosition a3 = QPixelFormat::AtBeginning;
         ::QPixelFormat::TypeInterpretation a4 = QPixelFormat::FloatingPoint;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_alphaSize,
            sipName_alphaUsage,
            sipName_alphaPosition,
            sipName_typeInterpretation,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "M|MEEE", &a0, &a1, sipType_QPixelFormat_AlphaUsage, &a2, sipType_QPixelFormat_AlphaPosition, &a3, sipType_QPixelFormat_TypeInterpretation, &a4))
        {
             ::QPixelFormat*sipRes;

            sipRes = new  ::QPixelFormat(qPixelFormatHsv(a0,a1,a2,a3,a4));

            return sipConvertFromNewType(sipRes,sipType_QPixelFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qPixelFormatHsv, doc_qPixelFormatHsv);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qPixelFormatHsl, "qPixelFormatHsl(int, alphaSize: int = 0, alphaUsage: QPixelFormat.AlphaUsage = QPixelFormat.IgnoresAlpha, alphaPosition: QPixelFormat.AlphaPosition = QPixelFormat.AtBeginning, typeInterpretation: QPixelFormat.TypeInterpretation = QPixelFormat.FloatingPoint) -> QPixelFormat");

extern "C" {static PyObject *func_qPixelFormatHsl(PyObject *,PyObject *, PyObject *);}
static PyObject *func_qPixelFormatHsl(PyObject *,PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::uchar a0;
         ::uchar a1 = 0;
         ::QPixelFormat::AlphaUsage a2 = QPixelFormat::IgnoresAlpha;
         ::QPixelFormat::AlphaPosition a3 = QPixelFormat::AtBeginning;
         ::QPixelFormat::TypeInterpretation a4 = QPixelFormat::FloatingPoint;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_alphaSize,
            sipName_alphaUsage,
            sipName_alphaPosition,
            sipName_typeInterpretation,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "M|MEEE", &a0, &a1, sipType_QPixelFormat_AlphaUsage, &a2, sipType_QPixelFormat_AlphaPosition, &a3, sipType_QPixelFormat_TypeInterpretation, &a4))
        {
             ::QPixelFormat*sipRes;

            sipRes = new  ::QPixelFormat(qPixelFormatHsl(a0,a1,a2,a3,a4));

            return sipConvertFromNewType(sipRes,sipType_QPixelFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qPixelFormatHsl, doc_qPixelFormatHsl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qPixelFormatCmyk, "qPixelFormatCmyk(int, alphaSize: int = 0, alphaUsage: QPixelFormat.AlphaUsage = QPixelFormat.IgnoresAlpha, alphaPosition: QPixelFormat.AlphaPosition = QPixelFormat.AtBeginning, typeInterpretation: QPixelFormat.TypeInterpretation = QPixelFormat.UnsignedInteger) -> QPixelFormat");

extern "C" {static PyObject *func_qPixelFormatCmyk(PyObject *,PyObject *, PyObject *);}
static PyObject *func_qPixelFormatCmyk(PyObject *,PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::uchar a0;
         ::uchar a1 = 0;
         ::QPixelFormat::AlphaUsage a2 = QPixelFormat::IgnoresAlpha;
         ::QPixelFormat::AlphaPosition a3 = QPixelFormat::AtBeginning;
         ::QPixelFormat::TypeInterpretation a4 = QPixelFormat::UnsignedInteger;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_alphaSize,
            sipName_alphaUsage,
            sipName_alphaPosition,
            sipName_typeInterpretation,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "M|MEEE", &a0, &a1, sipType_QPixelFormat_AlphaUsage, &a2, sipType_QPixelFormat_AlphaPosition, &a3, sipType_QPixelFormat_TypeInterpretation, &a4))
        {
             ::QPixelFormat*sipRes;

            sipRes = new  ::QPixelFormat(qPixelFormatCmyk(a0,a1,a2,a3,a4));

            return sipConvertFromNewType(sipRes,sipType_QPixelFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qPixelFormatCmyk, doc_qPixelFormatCmyk);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qPixelFormatGrayscale, "qPixelFormatGrayscale(int, typeInterpretation: QPixelFormat.TypeInterpretation = QPixelFormat.UnsignedInteger) -> QPixelFormat");

extern "C" {static PyObject *func_qPixelFormatGrayscale(PyObject *,PyObject *, PyObject *);}
static PyObject *func_qPixelFormatGrayscale(PyObject *,PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::uchar a0;
         ::QPixelFormat::TypeInterpretation a1 = QPixelFormat::UnsignedInteger;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_typeInterpretation,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "M|E", &a0, sipType_QPixelFormat_TypeInterpretation, &a1))
        {
             ::QPixelFormat*sipRes;

            sipRes = new  ::QPixelFormat(qPixelFormatGrayscale(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QPixelFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qPixelFormatGrayscale, doc_qPixelFormatGrayscale);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qPixelFormatRgba, "qPixelFormatRgba(int, int, int, int, QPixelFormat.AlphaUsage, QPixelFormat.AlphaPosition, premultiplied: QPixelFormat.AlphaPremultiplied = QPixelFormat.NotPremultiplied, typeInterpretation: QPixelFormat.TypeInterpretation = QPixelFormat.UnsignedInteger) -> QPixelFormat");

extern "C" {static PyObject *func_qPixelFormatRgba(PyObject *,PyObject *, PyObject *);}
static PyObject *func_qPixelFormatRgba(PyObject *,PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::uchar a0;
         ::uchar a1;
         ::uchar a2;
         ::uchar a3;
         ::QPixelFormat::AlphaUsage a4;
         ::QPixelFormat::AlphaPosition a5;
         ::QPixelFormat::AlphaPremultiplied a6 = QPixelFormat::NotPremultiplied;
         ::QPixelFormat::TypeInterpretation a7 = QPixelFormat::UnsignedInteger;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_premultiplied,
            sipName_typeInterpretation,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "MMMMEE|EE", &a0, &a1, &a2, &a3, sipType_QPixelFormat_AlphaUsage, &a4, sipType_QPixelFormat_AlphaPosition, &a5, sipType_QPixelFormat_AlphaPremultiplied, &a6, sipType_QPixelFormat_TypeInterpretation, &a7))
        {
             ::QPixelFormat*sipRes;

            sipRes = new  ::QPixelFormat(qPixelFormatRgba(a0,a1,a2,a3,a4,a5,a6,a7));

            return sipConvertFromNewType(sipRes,sipType_QPixelFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qPixelFormatRgba, doc_qPixelFormatRgba);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qFuzzyCompare, "qFuzzyCompare(QMatrix4x4, QMatrix4x4) -> bool\n"
"qFuzzyCompare(QQuaternion, QQuaternion) -> bool\n"
"qFuzzyCompare(QTransform, QTransform) -> bool\n"
"qFuzzyCompare(QVector2D, QVector2D) -> bool\n"
"qFuzzyCompare(QVector3D, QVector3D) -> bool\n"
"qFuzzyCompare(QVector4D, QVector4D) -> bool");

extern "C" {static PyObject *func_qFuzzyCompare(PyObject *,PyObject *);}
static PyObject *func_qFuzzyCompare(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix4x4* a0;
        const  ::QMatrix4x4* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9", sipType_QMatrix4x4, &a0, sipType_QMatrix4x4, &a1))
        {
            bool sipRes;

            sipRes = qFuzzyCompare(*a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QQuaternion* a0;
        const  ::QQuaternion* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9", sipType_QQuaternion, &a0, sipType_QQuaternion, &a1))
        {
            bool sipRes;

            sipRes = qFuzzyCompare(*a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QTransform* a0;
        const  ::QTransform* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9", sipType_QTransform, &a0, sipType_QTransform, &a1))
        {
            bool sipRes;

            sipRes = qFuzzyCompare(*a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QVector2D* a0;
        const  ::QVector2D* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9", sipType_QVector2D, &a0, sipType_QVector2D, &a1))
        {
            bool sipRes;

            sipRes = qFuzzyCompare(*a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QVector3D* a0;
        const  ::QVector3D* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9", sipType_QVector3D, &a0, sipType_QVector3D, &a1))
        {
            bool sipRes;

            sipRes = qFuzzyCompare(*a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QVector4D* a0;
        const  ::QVector4D* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9", sipType_QVector4D, &a0, sipType_QVector4D, &a1))
        {
            bool sipRes;

            sipRes = qFuzzyCompare(*a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qFuzzyCompare, doc_qFuzzyCompare);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot___mul__(PyObject *,PyObject *);}
static PyObject *slot___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
        const  ::QMatrix4x4* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QPoint, &a0, sipType_QMatrix4x4, &a1))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QMatrix4x4* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1J9", sipType_QPointF, &a0, &a0State, sipType_QMatrix4x4, &a1))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF((*a0 * *a1));
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    {
        const  ::QPoint* a0;
        const  ::QTransform* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QPoint, &a0, sipType_QTransform, &a1))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QTransform* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1J9", sipType_QPointF, &a0, &a0State, sipType_QTransform, &a1))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF((*a0 * *a1));
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    {
        const  ::QLineF* a0;
        const  ::QTransform* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QLineF, &a0, sipType_QTransform, &a1))
        {
             ::QLineF*sipRes;

            sipRes = new  ::QLineF((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QLineF,SIP_NULLPTR);
        }
    }

    {
        const  ::QLine* a0;
        const  ::QTransform* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QLine, &a0, sipType_QTransform, &a1))
        {
             ::QLine*sipRes;

            sipRes = new  ::QLine((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QLine,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


PyDoc_STRVAR(doc_qt_set_sequence_auto_mnemonic, "qt_set_sequence_auto_mnemonic(bool)");

extern "C" {static PyObject *func_qt_set_sequence_auto_mnemonic(PyObject *,PyObject *);}
static PyObject *func_qt_set_sequence_auto_mnemonic(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "b", &a0))
        {
            qt_set_sequence_auto_mnemonic(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qt_set_sequence_auto_mnemonic, doc_qt_set_sequence_auto_mnemonic);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot___rshift__(PyObject *,PyObject *);}
static PyObject *slot___rshift__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataStream* a0;
         ::QColor* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QColor, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QBrush* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QBrush, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QCursor* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QCursor, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QFont* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QFont, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QIcon* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QIcon, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QImage* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QImage, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QKeySequence* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QKeySequence, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QMatrix4x4* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QMatrix4x4, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QPainterPath* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QPainterPath, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QPalette* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QPalette, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QPen* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QPen, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QPicture* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QPicture, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QPixmap* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QPixmap, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QPolygonF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QPolygonF, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QPolygon* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QPolygon, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QQuaternion* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QQuaternion, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QRegion* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QRegion, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QStandardItem* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QStandardItem, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QTextLength* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QTextLength, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QTextFormat* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QTextFormat, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QTransform* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QTransform, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QVector2D* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QVector2D, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QVector3D* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QVector3D, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QVector4D* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QVector4D, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot___lshift__(PyObject *,PyObject *);}
static PyObject *slot___lshift__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataStream* a0;
        const  ::QColor* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QColor, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QBrush* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QBrush, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QCursor* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QCursor, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QFont* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QFont, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QIcon* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QIcon, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QImage* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QImage, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QKeySequence* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QKeySequence, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QMatrix4x4* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QMatrix4x4, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QPainterPath* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QPainterPath, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QPalette* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QPalette, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QPen* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QPen, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QPicture* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QPicture, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QPixmap* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QPixmap, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QPolygonF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QPolygonF, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QPolygon* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QPolygon, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QQuaternion* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QQuaternion, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QRegion* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QRegion, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QStandardItem* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QStandardItem, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QTextLength* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QTextLength, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QTextFormat* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QTextFormat, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QTransform* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QTransform, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QVector2D* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QVector2D, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QVector3D* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QVector3D, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QVector4D* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QVector4D, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static void *init_type_QPointF(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPointF(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QPointF *sipCpp = SIP_NULLPTR;

    {
         ::QPainterPath::Element* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QPainterPath_Element, &a0))
        {
            sipCpp = new  ::QPointF(a0->operator  ::QPointF());

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}

static sipInitExtenderDef initExtenders[] = {
    {-1, init_type_QPointF, {28, 0, 0}, SIP_NULLPTR},
    {-1, SIP_NULLPTR, {0, 0, 0}, SIP_NULLPTR}
};

static sipPySlotExtenderDef slotExtenders[] = {
    {(void *)slot___mul__, mul_slot, {0, 0, 0}},
    {(void *)slot___rshift__, rshift_slot, {0, 0, 0}},
    {(void *)slot___lshift__, lshift_slot, {0, 0, 0}},
    {SIP_NULLPTR, (sipPySlotType)0, {0, 0, 0}}
};


/* Convert to a sub-class if possible. */
extern "C" {static const sipTypeDef *sipSubClass_QInputEvent(void **);}
static const sipTypeDef *sipSubClass_QInputEvent(void **sipCppRet)
{
     ::QEvent *sipCpp = reinterpret_cast< ::QEvent *>(*sipCppRet);
    const sipTypeDef *sipType;

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
    switch (sipCpp->type())
    {
    case QEvent::ActionAdded:
    case QEvent::ActionChanged:
    case QEvent::ActionRemoved:
        sipType = sipType_QActionEvent;
        break;
    
    case QEvent::Close:
        sipType = sipType_QCloseEvent;
        break;
    
    case QEvent::ContextMenu:
        sipType = sipType_QContextMenuEvent;
        break;
    
    case QEvent::DragEnter:
        sipType = sipType_QDragEnterEvent;
        break;
    
    case QEvent::DragLeave:
        sipType = sipType_QDragLeaveEvent;
        break;
    
    case QEvent::DragMove:
        sipType = sipType_QDragMoveEvent;
        break;
    
    case QEvent::Drop:
        sipType = sipType_QDropEvent;
        break;
    
    case QEvent::Enter:
        sipType = sipType_QEnterEvent;
        break;
    
    case QEvent::FileOpen:
        sipType = sipType_QFileOpenEvent;
        break;
    
    case QEvent::FocusIn:
    case QEvent::FocusOut:
        sipType = sipType_QFocusEvent;
        break;
    
    case QEvent::Hide:
        sipType = sipType_QHideEvent;
        break;
    
    case QEvent::HoverEnter:
    case QEvent::HoverLeave:
    case QEvent::HoverMove:
        sipType = sipType_QHoverEvent;
        break;
    
    case QEvent::IconDrag:
        sipType = sipType_QIconDragEvent;
        break;
    
    case QEvent::InputMethod:
        sipType = sipType_QInputMethodEvent;
        break;
    
    case QEvent::KeyPress:
    case QEvent::KeyRelease:
    case QEvent::ShortcutOverride:
        sipType = sipType_QKeyEvent;
        break;
    
    case QEvent::MouseButtonDblClick:
    case QEvent::MouseButtonPress:
    case QEvent::MouseButtonRelease:
    case QEvent::MouseMove:
        sipType = sipType_QMouseEvent;
        break;
    
    case QEvent::Move:
        sipType = sipType_QMoveEvent;
        break;
    
    case QEvent::Paint:
        sipType = sipType_QPaintEvent;
        break;
    
    case QEvent::Resize:
        sipType = sipType_QResizeEvent;
        break;
    
    case QEvent::Shortcut:
        sipType = sipType_QShortcutEvent;
        break;
    
    case QEvent::Show:
        sipType = sipType_QShowEvent;
        break;
    
    case QEvent::StatusTip:
        sipType = sipType_QStatusTipEvent;
        break;
    
    case QEvent::TabletMove:
    case QEvent::TabletPress:
    case QEvent::TabletRelease:
    case QEvent::TabletEnterProximity:
    case QEvent::TabletLeaveProximity:
        sipType = sipType_QTabletEvent;
        break;
    
    case QEvent::ToolTip:
    case QEvent::WhatsThis:
        sipType = sipType_QHelpEvent;
        break;
    
    case QEvent::WhatsThisClicked:
        sipType = sipType_QWhatsThisClickedEvent;
        break;
    
    case QEvent::Wheel:
        sipType = sipType_QWheelEvent;
        break;
    
    case QEvent::WindowStateChange:
        sipType = sipType_QWindowStateChangeEvent;
        break;
    
    case QEvent::TouchBegin:
    case QEvent::TouchUpdate:
    case QEvent::TouchEnd:
    case QEvent::TouchCancel:
        sipType = sipType_QTouchEvent;
        break;
    
    case QEvent::InputMethodQuery:
        sipType = sipType_QInputMethodQueryEvent;
        break;
    
    case QEvent::Expose:
        sipType = sipType_QExposeEvent;
        break;
    
    case QEvent::ScrollPrepare:
        sipType = sipType_QScrollPrepareEvent;
        break;
    
    case QEvent::Scroll:
        sipType = sipType_QScrollEvent;
        break;
    
    #if QT_VERSION >= 0x050200
    case QEvent::NativeGesture:
        sipType = sipType_QNativeGestureEvent;
        break;
    #endif
    
    #if QT_VERSION >= 0x050500
    case QEvent::PlatformSurface:
        sipType = sipType_QPlatformSurfaceEvent;
        break;
    #endif
    
    default:
        sipType = 0;
    }
#line 7213 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

    return sipType;
}


/* Convert to a sub-class if possible. */
extern "C" {static const sipTypeDef *sipSubClass_QGuiApplication(void **);}
static const sipTypeDef *sipSubClass_QGuiApplication(void **sipCppRet)
{
     ::QObject *sipCpp = reinterpret_cast< ::QObject *>(*sipCppRet);
    const sipTypeDef *sipType;

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qguiapplication.sip"
    static struct class_graph {
        const char *name;
        sipTypeDef **type;
        int yes, no;
    } graph[] = {
    #if QT_VERSION >= 0x050100 && defined(SIP_FEATURE_PyQt_Desktop_OpenGL)
        {sipName_QOpenGLTimeMonitor, &sipType_QOpenGLTimeMonitor, -1, 1},
    #else
        {0, 0, -1, 1},
    #endif
        {sipName_QSyntaxHighlighter, &sipType_QSyntaxHighlighter, -1, 2},
        {sipName_QWindow, &sipType_QWindow, 25, 3},
        {sipName_QPdfWriter, &sipType_QPdfWriter, -1, 4},
        {sipName_QMovie, &sipType_QMovie, -1, 5},
    #if defined(SIP_FEATURE_PyQt_SessionManager)
        {sipName_QSessionManager, &sipType_QSessionManager, -1, 6},
    #else
        {0, 0, -1, 6},
    #endif
        {sipName_QAbstractTextDocumentLayout, &sipType_QAbstractTextDocumentLayout, -1, 7},
        {sipName_QScreen, &sipType_QScreen, -1, 8},
        {sipName_QTextObject, &sipType_QTextObject, 28, 9},
        {sipName_QStandardItemModel, &sipType_QStandardItemModel, -1, 10},
        {sipName_QDrag, &sipType_QDrag, -1, 11},
    #if defined(SIP_FEATURE_PyQt_OpenGL)
        {sipName_QOpenGLContextGroup, &sipType_QOpenGLContextGroup, -1, 12},
    #else
        {0, 0, -1, 12},
    #endif
        {sipName_QValidator, &sipType_QValidator, 32, 13},
        {sipName_QTextDocument, &sipType_QTextDocument, -1, 14},
    #if QT_VERSION >= 0x050100 && defined(SIP_FEATURE_PyQt_OpenGL)
        {sipName_QOpenGLVertexArrayObject, &sipType_QOpenGLVertexArrayObject, -1, 15},
    #else
        {0, 0, -1, 15},
    #endif
    #if QT_VERSION >= 0x050100 && defined(SIP_FEATURE_PyQt_OpenGL)
        {sipName_QOpenGLDebugLogger, &sipType_QOpenGLDebugLogger, -1, 16},
    #else
        {0, 0, -1, 16},
    #endif
        {sipName_QGuiApplication, &sipType_QGuiApplication, -1, 17},
    #if QT_VERSION >= 0x050100 && defined(SIP_FEATURE_PyQt_Desktop_OpenGL)
        {sipName_QOpenGLTimerQuery, &sipType_QOpenGLTimerQuery, -1, 18},
    #else
        {0, 0, -1, 18},
    #endif
    #if QT_VERSION >= 0x050100
        {sipName_QOffscreenSurface, &sipType_QOffscreenSurface, -1, 19},
    #else
        {0, 0, -1, 19},
    #endif
    #if defined(SIP_FEATURE_PyQt_OpenGL)
        {sipName_QOpenGLShaderProgram, &sipType_QOpenGLShaderProgram, -1, 20},
    #else
        {0, 0, -1, 20},
    #endif
        {sipName_QStyleHints, &sipType_QStyleHints, -1, 21},
        {sipName_QClipboard, &sipType_QClipboard, -1, 22},
    #if defined(SIP_FEATURE_PyQt_OpenGL)
        {sipName_QOpenGLShader, &sipType_QOpenGLShader, -1, 23},
    #else
        {0, 0, -1, 23},
    #endif
    #if defined(SIP_FEATURE_PyQt_OpenGL)
        {sipName_QOpenGLContext, &sipType_QOpenGLContext, -1, 24},
    #else
        {0, 0, -1, 24},
    #endif
        {sipName_QInputMethod, &sipType_QInputMethod, -1, -1},
    #if QT_VERSION >= 0x050400
        {sipName_QPaintDeviceWindow, &sipType_QPaintDeviceWindow, 26, -1},
    #else
        {0, 0, 26, -1},
    #endif
    #if QT_VERSION >= 0x050400 && defined(SIP_FEATURE_PyQt_OpenGL)
        {sipName_QOpenGLWindow, &sipType_QOpenGLWindow, -1, 27},
    #else
        {0, 0, -1, 27},
    #endif
    #if QT_VERSION >= 0x050400
        {sipName_QRasterWindow, &sipType_QRasterWindow, -1, -1},
    #else
        {0, 0, -1, -1},
    #endif
        {sipName_QTextBlockGroup, &sipType_QTextBlockGroup, 30, 29},
        {sipName_QTextFrame, &sipType_QTextFrame, 31, -1},
        {sipName_QTextList, &sipType_QTextList, -1, -1},
        {sipName_QTextTable, &sipType_QTextTable, -1, -1},
    #if QT_VERSION >= 0x050100
        {sipName_QRegularExpressionValidator, &sipType_QRegularExpressionValidator, -1, 33},
    #else
        {0, 0, -1, 33},
    #endif
        {sipName_QIntValidator, &sipType_QIntValidator, -1, 34},
        {sipName_QDoubleValidator, &sipType_QDoubleValidator, -1, 35},
        {sipName_QRegExpValidator, &sipType_QRegExpValidator, -1, -1},
    };
    
    int i = 0;
    
    sipType = NULL;
    
    do
    {
        struct class_graph *cg = &graph[i];
    
        if (cg->name != NULL && sipCpp->inherits(cg->name))
        {
            sipType = *cg->type;
            i = cg->yes;
        }
        else
            i = cg->no;
    }
    while (i >= 0);
#line 7343 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

    return sipType;
}


/* This defines each external type declared in this module, */
static sipExternalTypeDef externalTypesTable[] = {
    {4, "QAction"},
    {-1, SIP_NULLPTR}
};


extern "C" {static PyObject *slot_QTouchDevice_CapabilityFlag___or__(PyObject *,PyObject *);}
static PyObject *slot_QTouchDevice_CapabilityFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTouchDevice::CapabilityFlag a0;
         ::QTouchDevice::Capabilities* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QTouchDevice_CapabilityFlag, &a0, sipType_QTouchDevice_Capabilities, &a1, &a1State))
        {
             ::QTouchDevice::Capabilities*sipRes;

            sipRes = new  ::QTouchDevice::Capabilities((a0 | *a1));
            sipReleaseType(a1,sipType_QTouchDevice_Capabilities,a1State);

            return sipConvertFromNewType(sipRes,sipType_QTouchDevice_Capabilities,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QTouchDevice_CapabilityFlag[] = {
    {(void *)slot_QTouchDevice_CapabilityFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QTextOption_Flag___or__(PyObject *,PyObject *);}
static PyObject *slot_QTextOption_Flag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextOption::Flag a0;
         ::QTextOption::Flags* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QTextOption_Flag, &a0, sipType_QTextOption_Flags, &a1, &a1State))
        {
             ::QTextOption::Flags*sipRes;

            sipRes = new  ::QTextOption::Flags((a0 | *a1));
            sipReleaseType(a1,sipType_QTextOption_Flags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QTextOption_Flags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QTextOption_Flag[] = {
    {(void *)slot_QTextOption_Flag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QTextFormat_PageBreakFlag___or__(PyObject *,PyObject *);}
static PyObject *slot_QTextFormat_PageBreakFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextFormat::PageBreakFlag a0;
         ::QTextFormat::PageBreakFlags* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QTextFormat_PageBreakFlag, &a0, sipType_QTextFormat_PageBreakFlags, &a1, &a1State))
        {
             ::QTextFormat::PageBreakFlags*sipRes;

            sipRes = new  ::QTextFormat::PageBreakFlags((a0 | *a1));
            sipReleaseType(a1,sipType_QTextFormat_PageBreakFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QTextFormat_PageBreakFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QTextFormat_PageBreakFlag[] = {
    {(void *)slot_QTextFormat_PageBreakFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QTextDocument_FindFlag___or__(PyObject *,PyObject *);}
static PyObject *slot_QTextDocument_FindFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextDocument::FindFlag a0;
         ::QTextDocument::FindFlags* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QTextDocument_FindFlag, &a0, sipType_QTextDocument_FindFlags, &a1, &a1State))
        {
             ::QTextDocument::FindFlags*sipRes;

            sipRes = new  ::QTextDocument::FindFlags((a0 | *a1));
            sipReleaseType(a1,sipType_QTextDocument_FindFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QTextDocument_FindFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QTextDocument_FindFlag[] = {
    {(void *)slot_QTextDocument_FindFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QSurfaceFormat_FormatOption___or__(PyObject *,PyObject *);}
static PyObject *slot_QSurfaceFormat_FormatOption___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSurfaceFormat::FormatOption a0;
         ::QSurfaceFormat::FormatOptions* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QSurfaceFormat_FormatOption, &a0, sipType_QSurfaceFormat_FormatOptions, &a1, &a1State))
        {
             ::QSurfaceFormat::FormatOptions*sipRes;

            sipRes = new  ::QSurfaceFormat::FormatOptions((a0 | *a1));
            sipReleaseType(a1,sipType_QSurfaceFormat_FormatOptions,a1State);

            return sipConvertFromNewType(sipRes,sipType_QSurfaceFormat_FormatOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QSurfaceFormat_FormatOption[] = {
    {(void *)slot_QSurfaceFormat_FormatOption___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QRawFont_LayoutFlag___or__(PyObject *,PyObject *);}
static PyObject *slot_QRawFont_LayoutFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRawFont::LayoutFlag a0;
         ::QRawFont::LayoutFlags* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QRawFont_LayoutFlag, &a0, sipType_QRawFont_LayoutFlags, &a1, &a1State))
        {
             ::QRawFont::LayoutFlags*sipRes;

            sipRes = new  ::QRawFont::LayoutFlags((a0 | *a1));
            sipReleaseType(a1,sipType_QRawFont_LayoutFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QRawFont_LayoutFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QRawFont_LayoutFlag[] = {
    {(void *)slot_QRawFont_LayoutFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QPaintEngine_PaintEngineFeature___or__(PyObject *,PyObject *);}
static PyObject *slot_QPaintEngine_PaintEngineFeature___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPaintEngine::PaintEngineFeature a0;
         ::QPaintEngine::PaintEngineFeatures* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QPaintEngine_PaintEngineFeature, &a0, sipType_QPaintEngine_PaintEngineFeatures, &a1, &a1State))
        {
             ::QPaintEngine::PaintEngineFeatures*sipRes;

            sipRes = new  ::QPaintEngine::PaintEngineFeatures((a0 | *a1));
            sipReleaseType(a1,sipType_QPaintEngine_PaintEngineFeatures,a1State);

            return sipConvertFromNewType(sipRes,sipType_QPaintEngine_PaintEngineFeatures,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QPaintEngine_PaintEngineFeature[] = {
    {(void *)slot_QPaintEngine_PaintEngineFeature___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QTextItem_RenderFlag___or__(PyObject *,PyObject *);}
static PyObject *slot_QTextItem_RenderFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextItem::RenderFlag a0;
         ::QTextItem::RenderFlags* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QTextItem_RenderFlag, &a0, sipType_QTextItem_RenderFlags, &a1, &a1State))
        {
             ::QTextItem::RenderFlags*sipRes;

            sipRes = new  ::QTextItem::RenderFlags((a0 | *a1));
            sipReleaseType(a1,sipType_QTextItem_RenderFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QTextItem_RenderFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QTextItem_RenderFlag[] = {
    {(void *)slot_QTextItem_RenderFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QPainter_RenderHint___or__(PyObject *,PyObject *);}
static PyObject *slot_QPainter_RenderHint___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPainter::RenderHint a0;
         ::QPainter::RenderHints* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QPainter_RenderHint, &a0, sipType_QPainter_RenderHints, &a1, &a1State))
        {
             ::QPainter::RenderHints*sipRes;

            sipRes = new  ::QPainter::RenderHints((a0 | *a1));
            sipReleaseType(a1,sipType_QPainter_RenderHints,a1State);

            return sipConvertFromNewType(sipRes,sipType_QPainter_RenderHints,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QPainter_RenderHint[] = {
    {(void *)slot_QPainter_RenderHint___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QOpenGLTexture_Feature___or__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLTexture_Feature___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLTexture::Feature a0;
         ::QOpenGLTexture::Features* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QOpenGLTexture_Feature, &a0, sipType_QOpenGLTexture_Features, &a1, &a1State))
        {
             ::QOpenGLTexture::Features*sipRes;

            sipRes = new  ::QOpenGLTexture::Features((a0 | *a1));
            sipReleaseType(a1,sipType_QOpenGLTexture_Features,a1State);

            return sipConvertFromNewType(sipRes,sipType_QOpenGLTexture_Features,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QOpenGLTexture_Feature[] = {
    {(void *)slot_QOpenGLTexture_Feature___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QOpenGLShader_ShaderTypeBit___or__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLShader_ShaderTypeBit___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLShader::ShaderTypeBit a0;
         ::QOpenGLShader::ShaderType* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QOpenGLShader_ShaderTypeBit, &a0, sipType_QOpenGLShader_ShaderType, &a1, &a1State))
        {
             ::QOpenGLShader::ShaderType*sipRes;

            sipRes = new  ::QOpenGLShader::ShaderType((a0 | *a1));
            sipReleaseType(a1,sipType_QOpenGLShader_ShaderType,a1State);

            return sipConvertFromNewType(sipRes,sipType_QOpenGLShader_ShaderType,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QOpenGLShader_ShaderTypeBit[] = {
    {(void *)slot_QOpenGLShader_ShaderTypeBit___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QOpenGLDebugMessage_Severity___or__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLDebugMessage_Severity___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLDebugMessage::Severity a0;
         ::QOpenGLDebugMessage::Severities* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QOpenGLDebugMessage_Severity, &a0, sipType_QOpenGLDebugMessage_Severities, &a1, &a1State))
        {
             ::QOpenGLDebugMessage::Severities*sipRes;

            sipRes = new  ::QOpenGLDebugMessage::Severities((a0 | *a1));
            sipReleaseType(a1,sipType_QOpenGLDebugMessage_Severities,a1State);

            return sipConvertFromNewType(sipRes,sipType_QOpenGLDebugMessage_Severities,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QOpenGLDebugMessage_Severity[] = {
    {(void *)slot_QOpenGLDebugMessage_Severity___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QOpenGLDebugMessage_Type___or__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLDebugMessage_Type___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLDebugMessage::Type a0;
         ::QOpenGLDebugMessage::Types* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QOpenGLDebugMessage_Type, &a0, sipType_QOpenGLDebugMessage_Types, &a1, &a1State))
        {
             ::QOpenGLDebugMessage::Types*sipRes;

            sipRes = new  ::QOpenGLDebugMessage::Types((a0 | *a1));
            sipReleaseType(a1,sipType_QOpenGLDebugMessage_Types,a1State);

            return sipConvertFromNewType(sipRes,sipType_QOpenGLDebugMessage_Types,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QOpenGLDebugMessage_Type[] = {
    {(void *)slot_QOpenGLDebugMessage_Type___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QOpenGLDebugMessage_Source___or__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLDebugMessage_Source___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLDebugMessage::Source a0;
         ::QOpenGLDebugMessage::Sources* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QOpenGLDebugMessage_Source, &a0, sipType_QOpenGLDebugMessage_Sources, &a1, &a1State))
        {
             ::QOpenGLDebugMessage::Sources*sipRes;

            sipRes = new  ::QOpenGLDebugMessage::Sources((a0 | *a1));
            sipReleaseType(a1,sipType_QOpenGLDebugMessage_Sources,a1State);

            return sipConvertFromNewType(sipRes,sipType_QOpenGLDebugMessage_Sources,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QOpenGLDebugMessage_Source[] = {
    {(void *)slot_QOpenGLDebugMessage_Source___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QOpenGLBuffer_RangeAccessFlag___or__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLBuffer_RangeAccessFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLBuffer::RangeAccessFlag a0;
         ::QOpenGLBuffer::RangeAccessFlags* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QOpenGLBuffer_RangeAccessFlag, &a0, sipType_QOpenGLBuffer_RangeAccessFlags, &a1, &a1State))
        {
             ::QOpenGLBuffer::RangeAccessFlags*sipRes;

            sipRes = new  ::QOpenGLBuffer::RangeAccessFlags((a0 | *a1));
            sipReleaseType(a1,sipType_QOpenGLBuffer_RangeAccessFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QOpenGLBuffer_RangeAccessFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QOpenGLBuffer_RangeAccessFlag[] = {
    {(void *)slot_QOpenGLBuffer_RangeAccessFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QKeySequence_StandardKey___eq__(PyObject *,PyObject *);}
static PyObject *slot_QKeySequence_StandardKey___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QKeySequence::StandardKey sipCpp = static_cast< ::QKeySequence::StandardKey>(sipConvertToEnum(sipSelf, sipType_QKeySequence_StandardKey));

    if (PyErr_Occurred())
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QKeyEvent* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J8", sipType_QKeyEvent, &a0))
        {
            bool sipRes;

            sipRes = operator==(sipCpp, a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QKeySequence_StandardKey[] = {
    {(void *)slot_QKeySequence_StandardKey___eq__, eq_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QTouchEvent_TouchPoint_InfoFlag___or__(PyObject *,PyObject *);}
static PyObject *slot_QTouchEvent_TouchPoint_InfoFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTouchEvent::TouchPoint::InfoFlag a0;
         ::QTouchEvent::TouchPoint::InfoFlags* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QTouchEvent_TouchPoint_InfoFlag, &a0, sipType_QTouchEvent_TouchPoint_InfoFlags, &a1, &a1State))
        {
             ::QTouchEvent::TouchPoint::InfoFlags*sipRes;

            sipRes = new  ::QTouchEvent::TouchPoint::InfoFlags((a0 | *a1));
            sipReleaseType(a1,sipType_QTouchEvent_TouchPoint_InfoFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QTouchEvent_TouchPoint_InfoFlags,SIP_NULLPTR);
        }
    }

    {
         ::QTouchEvent::TouchPoint::InfoFlag a0;
         ::QTouchEvent::TouchPoint::InfoFlag a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EE", sipType_QTouchEvent_TouchPoint_InfoFlag, &a0, sipType_QTouchEvent_TouchPoint_InfoFlag, &a1))
        {
             ::QTouchEvent::TouchPoint::InfoFlags*sipRes;

            sipRes = new  ::QTouchEvent::TouchPoint::InfoFlags((a0 | a1));

            return sipConvertFromNewType(sipRes,sipType_QTouchEvent_TouchPoint_InfoFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QTouchEvent_TouchPoint_InfoFlag[] = {
    {(void *)slot_QTouchEvent_TouchPoint_InfoFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};

static sipEnumTypeDef enumTypes[] = {
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QWindow__Visibility, {0}, 0}, sipNameNr_Visibility, 375, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QWindow__AncestorMode, {0}, 0}, sipNameNr_AncestorMode, 375, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QDoubleValidator__Notation, {0}, 0}, sipNameNr_Notation, 20, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QValidator__State, {0}, 0}, sipNameNr_State, 354, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTransform__TransformationType, {0}, 0}, sipNameNr_TransformationType, 352, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTouchDevice__CapabilityFlag, {0}, 0}, sipNameNr_CapabilityFlag, 344, slots_QTouchDevice_CapabilityFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTouchDevice__DeviceType, {0}, 0}, sipNameNr_DeviceType, 344, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextOption__TabType, {0}, 0}, sipNameNr_TabType, 334, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextOption__Flag, {0}, 0}, sipNameNr_Flag, 334, slots_QTextOption_Flag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextOption__WrapMode, {0}, 0}, sipNameNr_WrapMode, 334, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextLine__CursorPosition, {0}, 0}, sipNameNr_CursorPosition, 326, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextLine__Edge, {0}, 0}, sipNameNr_Edge, 326, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextLayout__CursorMode, {0}, 0}, sipNameNr_CursorMode, 321, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextFrameFormat__BorderStyle, {0}, 0}, sipNameNr_BorderStyle, 313, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextFrameFormat__Position, {0}, 0}, sipNameNr_Position, 313, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextListFormat__Style, {0}, 0}, sipNameNr_Style, 330, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextBlockFormat__LineHeightTypes, {0}, 0}, sipNameNr_LineHeightTypes, 284, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextCharFormat__FontPropertiesInheritanceBehavior, {0}, 0}, sipNameNr_FontPropertiesInheritanceBehavior, 288, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextCharFormat__UnderlineStyle, {0}, 0}, sipNameNr_UnderlineStyle, 288, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextCharFormat__VerticalAlignment, {0}, 0}, sipNameNr_VerticalAlignment, 288, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextFormat__Property, {0}, 0}, sipNameNr_Property, 304, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextFormat__PageBreakFlag, {0}, 0}, sipNameNr_PageBreakFlag, 304, slots_QTextFormat_PageBreakFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextFormat__ObjectTypes, {0}, 0}, sipNameNr_ObjectTypes, 304, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextFormat__FormatType, {0}, 0}, sipNameNr_FormatType, 304, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextLength__Type, {0}, 0}, sipNameNr_Type, 324, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextDocument__Stacks, {0}, 0}, sipNameNr_Stacks, 296, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextDocument__ResourceType, {0}, 0}, sipNameNr_ResourceType, 296, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextDocument__FindFlag, {0}, 0}, sipNameNr_FindFlag, 296, slots_QTextDocument_FindFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextDocument__MetaInformation, {0}, 0}, sipNameNr_MetaInformation, 296, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextCursor__SelectionType, {0}, 0}, sipNameNr_SelectionType, 292, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextCursor__MoveOperation, {0}, 0}, sipNameNr_MoveOperation, 292, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextCursor__MoveMode, {0}, 0}, sipNameNr_MoveMode, 292, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSurfaceFormat__ColorSpace, {0}, 0}, sipNameNr_ColorSpace, 271, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSurfaceFormat__OpenGLContextProfile, {0}, 0}, sipNameNr_OpenGLContextProfile, 271, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSurfaceFormat__RenderableType, {0}, 0}, sipNameNr_RenderableType, 271, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSurfaceFormat__SwapBehavior, {0}, 0}, sipNameNr_SwapBehavior, 271, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSurfaceFormat__FormatOption, {0}, 0}, sipNameNr_FormatOption, 271, slots_QSurfaceFormat_FormatOption},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSurface__SurfaceType, {0}, 0}, sipNameNr_SurfaceType, 268, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSurface__SurfaceClass, {0}, 0}, sipNameNr_SurfaceClass, 268, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QStaticText__PerformanceHint, {0}, 0}, sipNameNr_PerformanceHint, 264, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QStandardItem__ItemType, {0}, 0}, sipNameNr_ItemType, 261, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSessionManager__RestartHint, {0}, 0}, sipNameNr_RestartHint, 256, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QRegion__RegionType, {0}, 0}, sipNameNr_RegionType, 247, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QRawFont__LayoutFlag, {0}, 0}, sipNameNr_LayoutFlag, 242, slots_QRawFont_LayoutFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QRawFont__AntialiasingType, {0}, 0}, sipNameNr_AntialiasingType, 242, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QPixelFormat__ByteOrder, {0}, 0}, sipNameNr_ByteOrder, 223, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QPixelFormat__YUVLayout, {0}, 0}, sipNameNr_YUVLayout, 223, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QPixelFormat__TypeInterpretation, {0}, 0}, sipNameNr_TypeInterpretation, 223, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QPixelFormat__AlphaPremultiplied, {0}, 0}, sipNameNr_AlphaPremultiplied, 223, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QPixelFormat__AlphaPosition, {0}, 0}, sipNameNr_AlphaPosition, 223, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QPixelFormat__AlphaUsage, {0}, 0}, sipNameNr_AlphaUsage, 223, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QPixelFormat__ColorModel, {0}, 0}, sipNameNr_ColorModel, 223, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QPalette__ColorRole, {0}, 0}, sipNameNr_ColorRole, 216, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QPalette__ColorGroup, {0}, 0}, sipNameNr_ColorGroup, 216, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QPainterPath__ElementType, {0}, 0}, sipNameNr_ElementType, 210, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QPaintEngine__Type, {0}, 0}, sipNameNr_Type, 194, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QPaintEngine__PolygonDrawMode, {0}, 0}, sipNameNr_PolygonDrawMode, 194, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QPaintEngine__DirtyFlag, {0}, 0}, sipNameNr_DirtyFlag, 194, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QPaintEngine__PaintEngineFeature, {0}, 0}, sipNameNr_PaintEngineFeature, 194, slots_QPaintEngine_PaintEngineFeature},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextItem__RenderFlag, {0}, 0}, sipNameNr_RenderFlag, 318, slots_QTextItem_RenderFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QPaintDevice__PaintDeviceMetric, {0}, 0}, sipNameNr_PaintDeviceMetric, 191, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QPainter__PixmapFragmentHint, {0}, 0}, sipNameNr_PixmapFragmentHint, 203, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QPainter__CompositionMode, {0}, 0}, sipNameNr_CompositionMode, 203, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QPainter__RenderHint, {0}, 0}, sipNameNr_RenderHint, 203, slots_QPainter_RenderHint},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QPageSize__SizeMatchPolicy, {0}, 0}, sipNameNr_SizeMatchPolicy, 183, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QPageSize__Unit, {0}, 0}, sipNameNr_Unit, 183, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QPageSize__PageSizeId, {0}, 0}, sipNameNr_PageSizeId, 183, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QPageLayout__Mode, {0}, 0}, sipNameNr_Mode, 179, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QPageLayout__Orientation, {0}, 0}, sipNameNr_Orientation, 179, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QPageLayout__Unit, {0}, 0}, sipNameNr_Unit, 179, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QPagedPaintDevice__PdfVersion, {0}, 0}, sipNameNr_PdfVersion, 187, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QPagedPaintDevice__PageSize, {0}, 0}, sipNameNr_PageSize, 187, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QOpenGLWindow__UpdateBehavior, {0}, 0}, sipNameNr_UpdateBehavior, 177, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QOpenGLTextureBlitter__Origin, {0}, 0}, sipNameNr_Origin, 172, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QOpenGLTexture__ComparisonMode, {0}, 0}, sipNameNr_ComparisonMode, 153, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QOpenGLTexture__ComparisonFunction, {0}, 0}, sipNameNr_ComparisonFunction, 153, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QOpenGLTexture__CoordinateDirection, {0}, 0}, sipNameNr_CoordinateDirection, 153, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QOpenGLTexture__WrapMode, {0}, 0}, sipNameNr_WrapMode, 153, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QOpenGLTexture__Filter, {0}, 0}, sipNameNr_Filter, 153, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QOpenGLTexture__DepthStencilMode, {0}, 0}, sipNameNr_DepthStencilMode, 153, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QOpenGLTexture__SwizzleValue, {0}, 0}, sipNameNr_SwizzleValue, 153, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QOpenGLTexture__SwizzleComponent, {0}, 0}, sipNameNr_SwizzleComponent, 153, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QOpenGLTexture__Feature, {0}, 0}, sipNameNr_Feature, 153, slots_QOpenGLTexture_Feature},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QOpenGLTexture__PixelType, {0}, 0}, sipNameNr_PixelType, 153, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QOpenGLTexture__PixelFormat, {0}, 0}, sipNameNr_PixelFormat, 153, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QOpenGLTexture__CubeMapFace, {0}, 0}, sipNameNr_CubeMapFace, 153, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QOpenGLTexture__TextureFormat, {0}, 0}, sipNameNr_TextureFormat, 153, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QOpenGLTexture__TextureUnitReset, {0}, 0}, sipNameNr_TextureUnitReset, 153, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QOpenGLTexture__MipMapGeneration, {0}, 0}, sipNameNr_MipMapGeneration, 153, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QOpenGLTexture__BindingTarget, {0}, 0}, sipNameNr_BindingTarget, 153, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QOpenGLTexture__Target, {0}, 0}, sipNameNr_Target, 153, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QOpenGLShader__ShaderTypeBit, {0}, 0}, sipNameNr_ShaderTypeBit, 149, slots_QOpenGLShader_ShaderTypeBit},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QOpenGLFramebufferObject__FramebufferRestorePolicy, {0}, 0}, sipNameNr_FramebufferRestorePolicy, 143, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QOpenGLFramebufferObject__Attachment, {0}, 0}, sipNameNr_Attachment, 143, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QOpenGLDebugLogger__LoggingMode, {0}, 0}, sipNameNr_LoggingMode, 134, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QOpenGLDebugMessage__Severity, {0}, 0}, sipNameNr_Severity, 136, slots_QOpenGLDebugMessage_Severity},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QOpenGLDebugMessage__Type, {0}, 0}, sipNameNr_Type, 136, slots_QOpenGLDebugMessage_Type},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QOpenGLDebugMessage__Source, {0}, 0}, sipNameNr_Source, 136, slots_QOpenGLDebugMessage_Source},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QOpenGLContext__OpenGLModuleType, {0}, 0}, sipNameNr_OpenGLModuleType, 131, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QOpenGLBuffer__RangeAccessFlag, {0}, 0}, sipNameNr_RangeAccessFlag, 125, slots_QOpenGLBuffer_RangeAccessFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QOpenGLBuffer__Access, {0}, 0}, sipNameNr_Access, 125, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QOpenGLBuffer__UsagePattern, {0}, 0}, sipNameNr_UsagePattern, 125, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QOpenGLBuffer__Type, {0}, 0}, sipNameNr_Type, 125, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QMovie__CacheMode, {0}, 0}, sipNameNr_CacheMode, 120, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QMovie__MovieState, {0}, 0}, sipNameNr_MovieState, 120, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QKeySequence__StandardKey, {0}, 0}, sipNameNr_StandardKey, 86, slots_QKeySequence_StandardKey},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QKeySequence__SequenceMatch, {0}, 0}, sipNameNr_SequenceMatch, 86, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QKeySequence__SequenceFormat, {0}, 0}, sipNameNr_SequenceFormat, 86, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QInputMethod__Action, {0}, 0}, sipNameNr_Action, 78, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QImageWriter__ImageWriterError, {0}, 0}, sipNameNr_ImageWriterError, 75, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QImageReader__ImageReaderError, {0}, 0}, sipNameNr_ImageReaderError, 73, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QImageIOHandler__Transformation, {0}, 0}, sipNameNr_Transformation, 69, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QImageIOHandler__ImageOption, {0}, 0}, sipNameNr_ImageOption, 69, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QImage__Format, {0}, 0}, sipNameNr_Format, 66, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QImage__InvertMode, {0}, 0}, sipNameNr_InvertMode, 66, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QIconEngine__IconEngineHook, {0}, 0}, sipNameNr_IconEngineHook, 62, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QIcon__State, {0}, 0}, sipNameNr_State, 58, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QIcon__Mode, {0}, 0}, sipNameNr_Mode, 58, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QGlyphRun__GlyphRunFlag, {0}, 0}, sipNameNr_GlyphRunFlag, 46, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QFontDatabase__SystemFont, {0}, 0}, sipNameNr_SystemFont, 40, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QFontDatabase__WritingSystem, {0}, 0}, sipNameNr_WritingSystem, 40, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QFont__HintingPreference, {0}, 0}, sipNameNr_HintingPreference, 31, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QFont__SpacingType, {0}, 0}, sipNameNr_SpacingType, 31, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QFont__Capitalization, {0}, 0}, sipNameNr_Capitalization, 31, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QFont__Stretch, {0}, 0}, sipNameNr_Stretch, 31, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QFont__Style, {0}, 0}, sipNameNr_Style, 31, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QFont__Weight, {0}, 0}, sipNameNr_Weight, 31, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QFont__StyleStrategy, {0}, 0}, sipNameNr_StyleStrategy, 31, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QFont__StyleHint, {0}, 0}, sipNameNr_StyleHint, 31, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QPlatformSurfaceEvent__SurfaceEventType, {0}, 0}, sipNameNr_SurfaceEventType, 234, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QScrollEvent__ScrollState, {0}, 0}, sipNameNr_ScrollState, 253, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTouchEvent__TouchPoint__InfoFlag, {0}, 0}, sipNameNr_InfoFlag, 349, slots_QTouchEvent_TouchPoint_InfoFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QInputMethodEvent__AttributeType, {0}, 0}, sipNameNr_AttributeType, 80, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QContextMenuEvent__Reason, {0}, 0}, sipNameNr_Reason, 16, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTabletEvent__PointerType, {0}, 0}, sipNameNr_PointerType, 279, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTabletEvent__TabletDevice, {0}, 0}, sipNameNr_TabletDevice, 279, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QClipboard__Mode, {0}, 0}, sipNameNr_Mode, 9, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QGradient__Preset, {0}, 0}, sipNameNr_Preset, 49, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QGradient__Spread, {0}, 0}, sipNameNr_Spread, 49, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QGradient__Type, {0}, 0}, sipNameNr_Type, 49, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QGradient__CoordinateMode, {0}, 0}, sipNameNr_CoordinateMode, 49, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QColor__NameFormat, {0}, 0}, sipNameNr_NameFormat, 12, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QColor__Spec, {0}, 0}, sipNameNr_Spec, 12, SIP_NULLPTR},
};


/*
 * This defines each type in this module.
 */
sipTypeDef *sipExportedTypes_QtGui[] = {
    &sipTypeDef_QtGui_QAbstractOpenGLFunctions.ctd_base,
    &sipTypeDef_QtGui_QAbstractTextDocumentLayout.ctd_base,
    &sipTypeDef_QtGui_QAbstractTextDocumentLayout_PaintContext.ctd_base,
    &sipTypeDef_QtGui_QAbstractTextDocumentLayout_Selection.ctd_base,
    0,
    &sipTypeDef_QtGui_QActionEvent.ctd_base,
    &sipTypeDef_QtGui_QBackingStore.ctd_base,
    &sipTypeDef_QtGui_QBitmap.ctd_base,
    &sipTypeDef_QtGui_QBrush.ctd_base,
    &sipTypeDef_QtGui_QClipboard.ctd_base,
    &enumTypes[136].etd_base,
    &sipTypeDef_QtGui_QCloseEvent.ctd_base,
    &sipTypeDef_QtGui_QColor.ctd_base,
    &enumTypes[141].etd_base,
    &enumTypes[142].etd_base,
    &sipTypeDef_QtGui_QConicalGradient.ctd_base,
    &sipTypeDef_QtGui_QContextMenuEvent.ctd_base,
    &enumTypes[133].etd_base,
    &sipTypeDef_QtGui_QCursor.ctd_base,
    &sipTypeDef_QtGui_QDesktopServices.ctd_base,
    &sipTypeDef_QtGui_QDoubleValidator.ctd_base,
    &enumTypes[2].etd_base,
    &sipTypeDef_QtGui_QDrag.ctd_base,
    &sipTypeDef_QtGui_QDragEnterEvent.ctd_base,
    &sipTypeDef_QtGui_QDragLeaveEvent.ctd_base,
    &sipTypeDef_QtGui_QDragMoveEvent.ctd_base,
    &sipTypeDef_QtGui_QDropEvent.ctd_base,
    &sipTypeDef_QtGui_QEnterEvent.ctd_base,
    &sipTypeDef_QtGui_QExposeEvent.ctd_base,
    &sipTypeDef_QtGui_QFileOpenEvent.ctd_base,
    &sipTypeDef_QtGui_QFocusEvent.ctd_base,
    &sipTypeDef_QtGui_QFont.ctd_base,
    &enumTypes[123].etd_base,
    &enumTypes[121].etd_base,
    &enumTypes[122].etd_base,
    &enumTypes[124].etd_base,
    &enumTypes[125].etd_base,
    &enumTypes[128].etd_base,
    &enumTypes[127].etd_base,
    &enumTypes[126].etd_base,
    &sipTypeDef_QtGui_QFontDatabase.ctd_base,
    &enumTypes[119].etd_base,
    &enumTypes[120].etd_base,
    &sipTypeDef_QtGui_QFontInfo.ctd_base,
    &sipTypeDef_QtGui_QFontMetrics.ctd_base,
    &sipTypeDef_QtGui_QFontMetricsF.ctd_base,
    &sipTypeDef_QtGui_QGlyphRun.ctd_base,
    &enumTypes[118].etd_base,
    &sipTypeDef_QtGui_QGlyphRun_GlyphRunFlags.ctd_base,
    &sipTypeDef_QtGui_QGradient.ctd_base,
    &enumTypes[140].etd_base,
    &enumTypes[137].etd_base,
    &enumTypes[138].etd_base,
    &enumTypes[139].etd_base,
    &sipTypeDef_QtGui_QGuiApplication.ctd_base,
    &sipTypeDef_QtGui_QHelpEvent.ctd_base,
    &sipTypeDef_QtGui_QHideEvent.ctd_base,
    &sipTypeDef_QtGui_QHoverEvent.ctd_base,
    &sipTypeDef_QtGui_QIcon.ctd_base,
    &enumTypes[117].etd_base,
    &enumTypes[116].etd_base,
    &sipTypeDef_QtGui_QIconDragEvent.ctd_base,
    &sipTypeDef_QtGui_QIconEngine.ctd_base,
    &sipTypeDef_QtGui_QIconEngine_AvailableSizesArgument.ctd_base,
    &enumTypes[115].etd_base,
    &sipTypeDef_QtGui_QIconEngine_ScaledPixmapArgument.ctd_base,
    &sipTypeDef_QtGui_QImage.ctd_base,
    &enumTypes[113].etd_base,
    &enumTypes[114].etd_base,
    &sipTypeDef_QtGui_QImageIOHandler.ctd_base,
    &enumTypes[112].etd_base,
    &enumTypes[111].etd_base,
    &sipTypeDef_QtGui_QImageIOHandler_Transformations.ctd_base,
    &sipTypeDef_QtGui_QImageReader.ctd_base,
    &enumTypes[110].etd_base,
    &sipTypeDef_QtGui_QImageWriter.ctd_base,
    &enumTypes[109].etd_base,
    &sipTypeDef_QtGui_QInputEvent.ctd_base,
    &sipTypeDef_QtGui_QInputMethod.ctd_base,
    &enumTypes[108].etd_base,
    &sipTypeDef_QtGui_QInputMethodEvent.ctd_base,
    &sipTypeDef_QtGui_QInputMethodEvent_Attribute.ctd_base,
    &enumTypes[132].etd_base,
    &sipTypeDef_QtGui_QInputMethodQueryEvent.ctd_base,
    &sipTypeDef_QtGui_QIntValidator.ctd_base,
    &sipTypeDef_QtGui_QKeyEvent.ctd_base,
    &sipTypeDef_QtGui_QKeySequence.ctd_base,
    &enumTypes[107].etd_base,
    &enumTypes[106].etd_base,
    &enumTypes[105].etd_base,
    &sipTypeDef_QtGui_QLinearGradient.ctd_base,
    &sipTypeDef_QtGui_QList_0100QFontDatabase_WritingSystem.mtd_base,
    &sipTypeDef_QtGui_QList_0100QGlyphRun.mtd_base,
    &sipTypeDef_QtGui_QList_0100QInputMethodEvent_Attribute.mtd_base,
    &sipTypeDef_QtGui_QList_0100QKeySequence.mtd_base,
    &sipTypeDef_QtGui_QList_0101QOpenGLContext.mtd_base,
    &sipTypeDef_QtGui_QList_0100QOpenGLDebugMessage.mtd_base,
    &sipTypeDef_QtGui_QList_0101QOpenGLShader.mtd_base,
    &sipTypeDef_QtGui_QList_0100QPolygonF.mtd_base,
    &sipTypeDef_QtGui_QList_0101QScreen.mtd_base,
    &sipTypeDef_QtGui_QList_0100QSize.mtd_base,
    &sipTypeDef_QtGui_QList_0101QStandardItem.mtd_base,
    &sipTypeDef_QtGui_QList_0100QTextBlock.mtd_base,
    &sipTypeDef_QtGui_QList_0101QTextFrame.mtd_base,
    &sipTypeDef_QtGui_QList_0100QTextLayout_FormatRange.mtd_base,
    &sipTypeDef_QtGui_QList_0100QTextOption_Tab.mtd_base,
    &sipTypeDef_QtGui_QList_0111QTouchDevice.mtd_base,
    &sipTypeDef_QtGui_QList_0100QTouchEvent_TouchPoint.mtd_base,
    &sipTypeDef_QtGui_QList_0101QWindow.mtd_base,
    &sipTypeDef_QtGui_QMatrix2x2.ctd_base,
    &sipTypeDef_QtGui_QMatrix2x3.ctd_base,
    &sipTypeDef_QtGui_QMatrix2x4.ctd_base,
    &sipTypeDef_QtGui_QMatrix3x2.ctd_base,
    &sipTypeDef_QtGui_QMatrix3x3.ctd_base,
    &sipTypeDef_QtGui_QMatrix3x4.ctd_base,
    &sipTypeDef_QtGui_QMatrix4x2.ctd_base,
    &sipTypeDef_QtGui_QMatrix4x3.ctd_base,
    &sipTypeDef_QtGui_QMatrix4x4.ctd_base,
    &sipTypeDef_QtGui_QMouseEvent.ctd_base,
    &sipTypeDef_QtGui_QMoveEvent.ctd_base,
    &sipTypeDef_QtGui_QMovie.ctd_base,
    &enumTypes[103].etd_base,
    &enumTypes[104].etd_base,
    &sipTypeDef_QtGui_QNativeGestureEvent.ctd_base,
    &sipTypeDef_QtGui_QOffscreenSurface.ctd_base,
    &sipTypeDef_QtGui_QOpenGLBuffer.ctd_base,
    &enumTypes[100].etd_base,
    &enumTypes[99].etd_base,
    &sipTypeDef_QtGui_QOpenGLBuffer_RangeAccessFlags.ctd_base,
    &enumTypes[102].etd_base,
    &enumTypes[101].etd_base,
    &sipTypeDef_QtGui_QOpenGLContext.ctd_base,
    &enumTypes[98].etd_base,
    &sipTypeDef_QtGui_QOpenGLContextGroup.ctd_base,
    &sipTypeDef_QtGui_QOpenGLDebugLogger.ctd_base,
    &enumTypes[94].etd_base,
    &sipTypeDef_QtGui_QOpenGLDebugMessage.ctd_base,
    &sipTypeDef_QtGui_QOpenGLDebugMessage_Severities.ctd_base,
    &enumTypes[95].etd_base,
    &enumTypes[97].etd_base,
    &sipTypeDef_QtGui_QOpenGLDebugMessage_Sources.ctd_base,
    &enumTypes[96].etd_base,
    &sipTypeDef_QtGui_QOpenGLDebugMessage_Types.ctd_base,
    &sipTypeDef_QtGui_QOpenGLFramebufferObject.ctd_base,
    &enumTypes[93].etd_base,
    &enumTypes[92].etd_base,
    &sipTypeDef_QtGui_QOpenGLFramebufferObjectFormat.ctd_base,
    &sipTypeDef_QtGui_QOpenGLPaintDevice.ctd_base,
    &sipTypeDef_QtGui_QOpenGLPixelTransferOptions.ctd_base,
    &sipTypeDef_QtGui_QOpenGLShader.ctd_base,
    &sipTypeDef_QtGui_QOpenGLShader_ShaderType.ctd_base,
    &enumTypes[91].etd_base,
    &sipTypeDef_QtGui_QOpenGLShaderProgram.ctd_base,
    &sipTypeDef_QtGui_QOpenGLTexture.ctd_base,
    &enumTypes[89].etd_base,
    &enumTypes[75].etd_base,
    &enumTypes[74].etd_base,
    &enumTypes[76].etd_base,
    &enumTypes[85].etd_base,
    &enumTypes[79].etd_base,
    &enumTypes[82].etd_base,
    &sipTypeDef_QtGui_QOpenGLTexture_Features.ctd_base,
    &enumTypes[78].etd_base,
    &enumTypes[88].etd_base,
    &enumTypes[84].etd_base,
    &enumTypes[83].etd_base,
    &enumTypes[81].etd_base,
    &enumTypes[80].etd_base,
    &enumTypes[90].etd_base,
    &enumTypes[86].etd_base,
    &enumTypes[87].etd_base,
    &enumTypes[77].etd_base,
    &sipTypeDef_QtGui_QOpenGLTextureBlitter.ctd_base,
    &enumTypes[73].etd_base,
    &sipTypeDef_QtGui_QOpenGLVersionProfile.ctd_base,
    &sipTypeDef_QtGui_QOpenGLVertexArrayObject.ctd_base,
    &sipTypeDef_QtGui_QOpenGLVertexArrayObject_Binder.ctd_base,
    &sipTypeDef_QtGui_QOpenGLWindow.ctd_base,
    &enumTypes[72].etd_base,
    &sipTypeDef_QtGui_QPageLayout.ctd_base,
    &enumTypes[67].etd_base,
    &enumTypes[68].etd_base,
    &enumTypes[69].etd_base,
    &sipTypeDef_QtGui_QPageSize.ctd_base,
    &enumTypes[66].etd_base,
    &enumTypes[64].etd_base,
    &enumTypes[65].etd_base,
    &sipTypeDef_QtGui_QPagedPaintDevice.ctd_base,
    &sipTypeDef_QtGui_QPagedPaintDevice_Margins.ctd_base,
    &enumTypes[71].etd_base,
    &enumTypes[70].etd_base,
    &sipTypeDef_QtGui_QPaintDevice.ctd_base,
    &enumTypes[60].etd_base,
    &sipTypeDef_QtGui_QPaintDeviceWindow.ctd_base,
    &sipTypeDef_QtGui_QPaintEngine.ctd_base,
    &enumTypes[57].etd_base,
    &sipTypeDef_QtGui_QPaintEngine_DirtyFlags.ctd_base,
    &enumTypes[58].etd_base,
    &sipTypeDef_QtGui_QPaintEngine_PaintEngineFeatures.ctd_base,
    &enumTypes[56].etd_base,
    &enumTypes[55].etd_base,
    &sipTypeDef_QtGui_QPaintEngineState.ctd_base,
    &sipTypeDef_QtGui_QPaintEvent.ctd_base,
    &sipTypeDef_QtGui_QPainter.ctd_base,
    &enumTypes[62].etd_base,
    &sipTypeDef_QtGui_QPainter_PixmapFragment.ctd_base,
    &enumTypes[61].etd_base,
    &sipTypeDef_QtGui_QPainter_PixmapFragmentHints.ctd_base,
    &enumTypes[63].etd_base,
    &sipTypeDef_QtGui_QPainter_RenderHints.ctd_base,
    &sipTypeDef_QtGui_QPainterPath.ctd_base,
    &sipTypeDef_QtGui_QPainterPath_Element.ctd_base,
    &enumTypes[54].etd_base,
    &sipTypeDef_QtGui_QPainterPathStroker.ctd_base,
    &sipTypeDef_QtGui_QPair_0100QOpenGLTexture_Filter_0100QOpenGLTexture_Filter.mtd_base,
    &sipTypeDef_QtGui_QPair_2200_2200.mtd_base,
    &sipTypeDef_QtGui_QPalette.ctd_base,
    &enumTypes[53].etd_base,
    &enumTypes[52].etd_base,
    &sipTypeDef_QtGui_QPdfWriter.ctd_base,
    &sipTypeDef_QtGui_QPen.ctd_base,
    &sipTypeDef_QtGui_QPicture.ctd_base,
    &sipTypeDef_QtGui_QPictureIO.ctd_base,
    &sipTypeDef_QtGui_QPixelFormat.ctd_base,
    &enumTypes[49].etd_base,
    &enumTypes[48].etd_base,
    &enumTypes[50].etd_base,
    &enumTypes[45].etd_base,
    &enumTypes[51].etd_base,
    &enumTypes[47].etd_base,
    &enumTypes[46].etd_base,
    &sipTypeDef_QtGui_QPixmap.ctd_base,
    &sipTypeDef_QtGui_QPixmapCache.ctd_base,
    &sipTypeDef_QtGui_QPixmapCache_Key.ctd_base,
    &sipTypeDef_QtGui_QPlatformSurfaceEvent.ctd_base,
    &enumTypes[129].etd_base,
    &sipTypeDef_QtGui_QPointingDeviceUniqueId.ctd_base,
    &sipTypeDef_QtGui_QPolygon.ctd_base,
    &sipTypeDef_QtGui_QPolygonF.ctd_base,
    &sipTypeDef_QtGui_QQuaternion.ctd_base,
    &sipTypeDef_QtGui_QRadialGradient.ctd_base,
    &sipTypeDef_QtGui_QRasterWindow.ctd_base,
    &sipTypeDef_QtGui_QRawFont.ctd_base,
    &enumTypes[44].etd_base,
    &enumTypes[43].etd_base,
    &sipTypeDef_QtGui_QRawFont_LayoutFlags.ctd_base,
    &sipTypeDef_QtGui_QRegExpValidator.ctd_base,
    &sipTypeDef_QtGui_QRegion.ctd_base,
    &enumTypes[42].etd_base,
    &sipTypeDef_QtGui_QRegularExpressionValidator.ctd_base,
    &sipTypeDef_QtGui_QResizeEvent.ctd_base,
    &sipTypeDef_QtGui_QRgba64.ctd_base,
    &sipTypeDef_QtGui_QScreen.ctd_base,
    &sipTypeDef_QtGui_QScrollEvent.ctd_base,
    &enumTypes[130].etd_base,
    &sipTypeDef_QtGui_QScrollPrepareEvent.ctd_base,
    &sipTypeDef_QtGui_QSessionManager.ctd_base,
    &enumTypes[41].etd_base,
    &sipTypeDef_QtGui_QSet_0100QByteArray.mtd_base,
    &sipTypeDef_QtGui_QShortcutEvent.ctd_base,
    &sipTypeDef_QtGui_QShowEvent.ctd_base,
    &sipTypeDef_QtGui_QStandardItem.ctd_base,
    &enumTypes[40].etd_base,
    &sipTypeDef_QtGui_QStandardItemModel.ctd_base,
    &sipTypeDef_QtGui_QStaticText.ctd_base,
    &enumTypes[39].etd_base,
    &sipTypeDef_QtGui_QStatusTipEvent.ctd_base,
    &sipTypeDef_QtGui_QStyleHints.ctd_base,
    &sipTypeDef_QtGui_QSurface.ctd_base,
    &enumTypes[38].etd_base,
    &enumTypes[37].etd_base,
    &sipTypeDef_QtGui_QSurfaceFormat.ctd_base,
    &enumTypes[32].etd_base,
    &enumTypes[36].etd_base,
    &sipTypeDef_QtGui_QSurfaceFormat_FormatOptions.ctd_base,
    &enumTypes[33].etd_base,
    &enumTypes[34].etd_base,
    &enumTypes[35].etd_base,
    &sipTypeDef_QtGui_QSyntaxHighlighter.ctd_base,
    &sipTypeDef_QtGui_QTabletEvent.ctd_base,
    &enumTypes[134].etd_base,
    &enumTypes[135].etd_base,
    &sipTypeDef_QtGui_QTextBlock.ctd_base,
    &sipTypeDef_QtGui_QTextBlock_iterator.ctd_base,
    &sipTypeDef_QtGui_QTextBlockFormat.ctd_base,
    &enumTypes[16].etd_base,
    &sipTypeDef_QtGui_QTextBlockGroup.ctd_base,
    &sipTypeDef_QtGui_QTextBlockUserData.ctd_base,
    &sipTypeDef_QtGui_QTextCharFormat.ctd_base,
    &enumTypes[17].etd_base,
    &enumTypes[18].etd_base,
    &enumTypes[19].etd_base,
    &sipTypeDef_QtGui_QTextCursor.ctd_base,
    &enumTypes[31].etd_base,
    &enumTypes[30].etd_base,
    &enumTypes[29].etd_base,
    &sipTypeDef_QtGui_QTextDocument.ctd_base,
    &enumTypes[27].etd_base,
    &sipTypeDef_QtGui_QTextDocument_FindFlags.ctd_base,
    &enumTypes[28].etd_base,
    &enumTypes[26].etd_base,
    &enumTypes[25].etd_base,
    &sipTypeDef_QtGui_QTextDocumentFragment.ctd_base,
    &sipTypeDef_QtGui_QTextDocumentWriter.ctd_base,
    &sipTypeDef_QtGui_QTextFormat.ctd_base,
    &enumTypes[23].etd_base,
    &enumTypes[22].etd_base,
    &enumTypes[21].etd_base,
    &sipTypeDef_QtGui_QTextFormat_PageBreakFlags.ctd_base,
    &enumTypes[20].etd_base,
    &sipTypeDef_QtGui_QTextFragment.ctd_base,
    &sipTypeDef_QtGui_QTextFrame.ctd_base,
    &sipTypeDef_QtGui_QTextFrame_iterator.ctd_base,
    &sipTypeDef_QtGui_QTextFrameFormat.ctd_base,
    &enumTypes[13].etd_base,
    &enumTypes[14].etd_base,
    &sipTypeDef_QtGui_QTextImageFormat.ctd_base,
    &sipTypeDef_QtGui_QTextInlineObject.ctd_base,
    &sipTypeDef_QtGui_QTextItem.ctd_base,
    &enumTypes[59].etd_base,
    &sipTypeDef_QtGui_QTextItem_RenderFlags.ctd_base,
    &sipTypeDef_QtGui_QTextLayout.ctd_base,
    &enumTypes[12].etd_base,
    &sipTypeDef_QtGui_QTextLayout_FormatRange.ctd_base,
    &sipTypeDef_QtGui_QTextLength.ctd_base,
    &enumTypes[24].etd_base,
    &sipTypeDef_QtGui_QTextLine.ctd_base,
    &enumTypes[10].etd_base,
    &enumTypes[11].etd_base,
    &sipTypeDef_QtGui_QTextList.ctd_base,
    &sipTypeDef_QtGui_QTextListFormat.ctd_base,
    &enumTypes[15].etd_base,
    &sipTypeDef_QtGui_QTextObject.ctd_base,
    &sipTypeDef_QtGui_QTextObjectInterface.ctd_base,
    &sipTypeDef_QtGui_QTextOption.ctd_base,
    &enumTypes[8].etd_base,
    &sipTypeDef_QtGui_QTextOption_Flags.ctd_base,
    &sipTypeDef_QtGui_QTextOption_Tab.ctd_base,
    &enumTypes[7].etd_base,
    &enumTypes[9].etd_base,
    &sipTypeDef_QtGui_QTextTable.ctd_base,
    &sipTypeDef_QtGui_QTextTableCell.ctd_base,
    &sipTypeDef_QtGui_QTextTableCellFormat.ctd_base,
    &sipTypeDef_QtGui_QTextTableFormat.ctd_base,
    &sipTypeDef_QtGui_QTouchDevice.ctd_base,
    &sipTypeDef_QtGui_QTouchDevice_Capabilities.ctd_base,
    &enumTypes[5].etd_base,
    &enumTypes[6].etd_base,
    &sipTypeDef_QtGui_QTouchEvent.ctd_base,
    &sipTypeDef_QtGui_QTouchEvent_TouchPoint.ctd_base,
    &enumTypes[131].etd_base,
    &sipTypeDef_QtGui_QTouchEvent_TouchPoint_InfoFlags.ctd_base,
    &sipTypeDef_QtGui_QTransform.ctd_base,
    &enumTypes[4].etd_base,
    &sipTypeDef_QtGui_QValidator.ctd_base,
    &enumTypes[3].etd_base,
    &sipTypeDef_QtGui_QVector2D.ctd_base,
    &sipTypeDef_QtGui_QVector3D.ctd_base,
    &sipTypeDef_QtGui_QVector4D.ctd_base,
    &sipTypeDef_QtGui_QVector_0100QAbstractTextDocumentLayout_Selection.mtd_base,
    &sipTypeDef_QtGui_QVector_0100QLine.mtd_base,
    &sipTypeDef_QtGui_QVector_0100QLineF.mtd_base,
    &sipTypeDef_QtGui_QVector_0600QPair_2400_0100QColor.mtd_base,
    &sipTypeDef_QtGui_QVector_0100QPoint.mtd_base,
    &sipTypeDef_QtGui_QVector_0100QRect.mtd_base,
    &sipTypeDef_QtGui_QVector_0100QRectF.mtd_base,
    &sipTypeDef_QtGui_QVector_0100QSize.mtd_base,
    &sipTypeDef_QtGui_QVector_0100QTextFormat.mtd_base,
    &sipTypeDef_QtGui_QVector_0100QTextLayout_FormatRange.mtd_base,
    &sipTypeDef_QtGui_QVector_0100QTextLength.mtd_base,
    &sipTypeDef_QtGui_QVector_2200.mtd_base,
    &sipTypeDef_QtGui_QVector_2400.mtd_base,
    &sipTypeDef_QtGui_QVector_1900.mtd_base,
    &sipTypeDef_QtGui_QWhatsThisClickedEvent.ctd_base,
    &sipTypeDef_QtGui_QWheelEvent.ctd_base,
    &sipTypeDef_QtGui_QWindow.ctd_base,
    &enumTypes[1].etd_base,
    &enumTypes[0].etd_base,
    &sipTypeDef_QtGui_QWindowStateChangeEvent.ctd_base,
    &sipTypeDef_QtGui_Qt.ctd_base,
};


/*
 * These define each typedef in this module.
 */
static sipTypedefDef typedefsTable[] = {
    {"GLbitfield", "uint"},
    {"GLboolean", "unsigned char"},
    {"GLbyte", "signed char"},
    {"GLchar", "char"},
    {"GLclampf", "float"},
    {"GLenum", "uint"},
    {"GLfloat", "float"},
    {"GLint", "int"},
    {"GLintptr", "long"},
    {"GLshort", "short"},
    {"GLsizei", "int"},
    {"GLsizeiptr", "long"},
    {"GLubyte", "unsigned char"},
    {"GLuint", "uint"},
    {"GLushort", "unsigned short"},
    {"QGradientStops", "QVector<QPair<qreal,QColor> >"},
    {"QRgb", "uint"},
    {"QTextBlock::Iterator", "QTextBlock::iterator"},
    {"QTextFrame::Iterator", "QTextFrame::iterator"},
    {"QWindowList", "QList<QWindow*>"},
    {"WId", "quintptr"},
};


/* This defines the types that this module needs to import from QtCore. */
sipImportedTypeDef sipImportedTypes_QtGui_QtCore[] = {
    {"QAbstractItemModel"},
    {"QByteArray"},
    {"QChar"},
    {"QChildEvent"},
    {"QCoreApplication"},
    {"QDataStream"},
    {"QEvent"},
    {"QEvent::Type"},
    {"QFile"},
    {"QHash<int,QByteArray>"},
    {"QIODevice"},
    {"QIODevice::OpenMode"},
    {"QLine"},
    {"QLineF"},
    {"QList<QByteArray>"},
    {"QList<QModelIndex>"},
    {"QList<int>"},
    {"QList<qreal>"},
    {"QLocale"},
    {"QMap<int,QVariant>"},
    {"QMargins"},
    {"QMarginsF"},
    {"QMetaMethod"},
    {"QMimeData"},
    {"QModelIndex"},
    {"QObject"},
    {"QPair<int,int>"},
    {"QPoint"},
    {"QPointF"},
    {"QRect"},
    {"QRectF"},
    {"QRegExp"},
    {"QRegularExpression"},
    {"QSize"},
    {"QSizeF"},
    {"QString"},
    {"QStringList"},
    {"QTextCodec"},
    {"QTimerEvent"},
    {"QUrl"},
    {"QVariant"},
    {"QVector<QPointF>"},
    {"Qt"},
    {"Qt::Alignment"},
    {"Qt::ApplicationState"},
    {"Qt::AspectRatioMode"},
    {"Qt::Axis"},
    {"Qt::BGMode"},
    {"Qt::BrushStyle"},
    {"Qt::CheckState"},
    {"Qt::ClipOperation"},
    {"Qt::CursorMoveStyle"},
    {"Qt::CursorShape"},
    {"Qt::DropAction"},
    {"Qt::DropActions"},
    {"Qt::FillRule"},
    {"Qt::FocusReason"},
    {"Qt::GlobalColor"},
    {"Qt::HitTestAccuracy"},
    {"Qt::ImageConversionFlags"},
    {"Qt::InputMethodQueries"},
    {"Qt::InputMethodQuery"},
    {"Qt::ItemFlags"},
    {"Qt::KeyboardModifiers"},
    {"Qt::LayoutDirection"},
    {"Qt::MaskMode"},
    {"Qt::MatchFlags"},
    {"Qt::MouseButton"},
    {"Qt::MouseButtons"},
    {"Qt::MouseEventFlags"},
    {"Qt::MouseEventSource"},
    {"Qt::NativeGestureType"},
    {"Qt::Orientation"},
    {"Qt::PenCapStyle"},
    {"Qt::PenJoinStyle"},
    {"Qt::PenStyle"},
    {"Qt::ScreenOrientation"},
    {"Qt::ScreenOrientations"},
    {"Qt::ScrollPhase"},
    {"Qt::SizeMode"},
    {"Qt::SortOrder"},
    {"Qt::TabFocusBehavior"},
    {"Qt::TextElideMode"},
    {"Qt::TextFormat"},
    {"Qt::TouchPointState"},
    {"Qt::TouchPointStates"},
    {"Qt::TransformationMode"},
    {"Qt::WhiteSpaceMode"},
    {"Qt::WindowFlags"},
    {"Qt::WindowModality"},
    {"Qt::WindowState"},
    {"Qt::WindowStates"},
    {"Qt::WindowType"},
    {"quintptr"},
    {SIP_NULLPTR}
};


/*
 * This defines the virtual error handlers that this module needs to import
 * from QtCore.
 */
sipImportedVirtErrorHandlerDef sipImportedVirtErrorHandlers_QtGui_QtCore[] = {
    {"PyQt5"},
    {SIP_NULLPTR}
};


/* This defines the modules that this module needs to import. */
static sipImportedModuleDef importsTable[] = {
    {"PyQt5.QtCore", sipImportedTypes_QtGui_QtCore, sipImportedVirtErrorHandlers_QtGui_QtCore, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


/* This defines the class sub-convertors that this module defines. */
static sipSubClassConvertorDef convertorsTable[] = {
    {sipSubClass_QInputEvent, {6, 0, 0}, SIP_NULLPTR},
    {sipSubClass_QGuiApplication, {25, 0, 0}, SIP_NULLPTR},
    {SIP_NULLPTR, {0, 0, 0}, SIP_NULLPTR}
};


/* This defines this module. */
sipExportedModuleDef sipModuleAPI_QtGui = {
    0,
    SIP_API_MINOR_NR,
    sipNameNr_PyQt5_QtGui,
    0,
    sipStrings_QtGui,
    importsTable,
    SIP_NULLPTR,
    380,
    sipExportedTypes_QtGui,
    externalTypesTable,
    0,
    SIP_NULLPTR,
    21,
    typedefsTable,
    SIP_NULLPTR,
    convertorsTable,
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    SIP_NULLPTR,
    SIP_NULLPTR,
    slotExtenders,
    initExtenders,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};


/* The SIP API and the APIs of any imported modules. */
const sipAPIDef *sipAPI_QtGui;

sip_qt_metaobject_func sip_QtGui_qt_metaobject;
sip_qt_metacall_func sip_QtGui_qt_metacall;
sip_qt_metacast_func sip_QtGui_qt_metacast;


/* The Python module initialisation function. */
#if PY_MAJOR_VERSION >= 3
#define SIP_MODULE_ENTRY        PyInit_QtGui
#define SIP_MODULE_TYPE         PyObject *
#define SIP_MODULE_DISCARD(r)   Py_DECREF(r)
#define SIP_MODULE_RETURN(r)    return (r)
#else
#define SIP_MODULE_ENTRY        initQtGui
#define SIP_MODULE_TYPE         void
#define SIP_MODULE_DISCARD(r)
#define SIP_MODULE_RETURN(r)    return
#endif

#if defined(SIP_STATIC_MODULE)
extern "C" SIP_MODULE_TYPE SIP_MODULE_ENTRY()
#else
PyMODINIT_FUNC SIP_MODULE_ENTRY()
#endif
{
    static PyMethodDef sip_methods[] = {
        {SIP_MLNAME_CAST(sipName_qIsGray), func_qIsGray, METH_VARARGS, SIP_MLDOC_CAST(doc_qIsGray)},
        {SIP_MLNAME_CAST(sipName_qGray), func_qGray, METH_VARARGS, SIP_MLDOC_CAST(doc_qGray)},
        {SIP_MLNAME_CAST(sipName_qRgba), func_qRgba, METH_VARARGS, SIP_MLDOC_CAST(doc_qRgba)},
        {SIP_MLNAME_CAST(sipName_qRgb), func_qRgb, METH_VARARGS, SIP_MLDOC_CAST(doc_qRgb)},
        {SIP_MLNAME_CAST(sipName_qAlpha), func_qAlpha, METH_VARARGS, SIP_MLDOC_CAST(doc_qAlpha)},
        {SIP_MLNAME_CAST(sipName_qBlue), func_qBlue, METH_VARARGS, SIP_MLDOC_CAST(doc_qBlue)},
        {SIP_MLNAME_CAST(sipName_qGreen), func_qGreen, METH_VARARGS, SIP_MLDOC_CAST(doc_qGreen)},
        {SIP_MLNAME_CAST(sipName_qRed), func_qRed, METH_VARARGS, SIP_MLDOC_CAST(doc_qRed)},
        {SIP_MLNAME_CAST(sipName_qUnpremultiply), func_qUnpremultiply, METH_VARARGS, SIP_MLDOC_CAST(doc_qUnpremultiply)},
        {SIP_MLNAME_CAST(sipName_qPremultiply), func_qPremultiply, METH_VARARGS, SIP_MLDOC_CAST(doc_qPremultiply)},
        {SIP_MLNAME_CAST(sipName_qRgba64), func_qRgba64, METH_VARARGS, SIP_MLDOC_CAST(doc_qRgba64)},
        {SIP_MLNAME_CAST(sipName_qPixelFormatAlpha), SIP_MLMETH_CAST(func_qPixelFormatAlpha), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_qPixelFormatAlpha)},
        {SIP_MLNAME_CAST(sipName_qPixelFormatYuv), SIP_MLMETH_CAST(func_qPixelFormatYuv), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_qPixelFormatYuv)},
        {SIP_MLNAME_CAST(sipName_qPixelFormatHsv), SIP_MLMETH_CAST(func_qPixelFormatHsv), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_qPixelFormatHsv)},
        {SIP_MLNAME_CAST(sipName_qPixelFormatHsl), SIP_MLMETH_CAST(func_qPixelFormatHsl), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_qPixelFormatHsl)},
        {SIP_MLNAME_CAST(sipName_qPixelFormatCmyk), SIP_MLMETH_CAST(func_qPixelFormatCmyk), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_qPixelFormatCmyk)},
        {SIP_MLNAME_CAST(sipName_qPixelFormatGrayscale), SIP_MLMETH_CAST(func_qPixelFormatGrayscale), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_qPixelFormatGrayscale)},
        {SIP_MLNAME_CAST(sipName_qPixelFormatRgba), SIP_MLMETH_CAST(func_qPixelFormatRgba), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_qPixelFormatRgba)},
        {SIP_MLNAME_CAST(sipName_qFuzzyCompare), func_qFuzzyCompare, METH_VARARGS, SIP_MLDOC_CAST(doc_qFuzzyCompare)},
        {SIP_MLNAME_CAST(sipName_qt_set_sequence_auto_mnemonic), func_qt_set_sequence_auto_mnemonic, METH_VARARGS, SIP_MLDOC_CAST(doc_qt_set_sequence_auto_mnemonic)},
        {SIP_NULLPTR, SIP_NULLPTR, 0, SIP_NULLPTR}
    };

#if PY_MAJOR_VERSION >= 3
    static PyModuleDef sip_module_def = {
        PyModuleDef_HEAD_INIT,
        "PyQt5.QtGui",
        SIP_NULLPTR,
        -1,
        sip_methods,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_NULLPTR
    };
#endif

    PyObject *sipModule, *sipModuleDict;
    PyObject *sip_sipmod, *sip_capiobj;

    /* Initialise the module and get it's dictionary. */
#if PY_MAJOR_VERSION >= 3
    sipModule = PyModule_Create(&sip_module_def);
#elif PY_VERSION_HEX >= 0x02050000
    sipModule = Py_InitModule(sipName_PyQt5_QtGui, sip_methods);
#else
    sipModule = Py_InitModule(const_cast<char *>(sipName_PyQt5_QtGui), sip_methods);
#endif

    if (sipModule == SIP_NULLPTR)
        SIP_MODULE_RETURN(SIP_NULLPTR);

    sipModuleDict = PyModule_GetDict(sipModule);

    /* Get the SIP module's API. */
#if PY_VERSION_HEX >= 0x02050000
    sip_sipmod = PyImport_ImportModule("PyQt5.sip");
#else
    sip_sipmod = PyImport_ImportModule(const_cast<char *>("PyQt5.sip"));
#endif

    if (sip_sipmod == SIP_NULLPTR)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }

    sip_capiobj = PyDict_GetItemString(PyModule_GetDict(sip_sipmod), "_C_API");
    Py_DECREF(sip_sipmod);

#if defined(SIP_USE_PYCAPSULE)
    if (sip_capiobj == SIP_NULLPTR || !PyCapsule_CheckExact(sip_capiobj))
#else
    if (sip_capiobj == SIP_NULLPTR || !PyCObject_Check(sip_capiobj))
#endif
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }

#if defined(SIP_USE_PYCAPSULE)
    sipAPI_QtGui = reinterpret_cast<const sipAPIDef *>(PyCapsule_GetPointer(sip_capiobj, "PyQt5.sip._C_API"));
#else
    sipAPI_QtGui = reinterpret_cast<const sipAPIDef *>(PyCObject_AsVoidPtr(sip_capiobj));
#endif

#if defined(SIP_USE_PYCAPSULE)
    if (sipAPI_QtGui == SIP_NULLPTR)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }
#endif

#line 327 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qguiapplication.sip"
// Export our own helpers.
sipExportSymbol("qtgui_wrap_ancestors", (void *)qtgui_wrap_ancestors);
#line 339 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglshaderprogram.sip"
#if defined(SIP_FEATURE_PyQt_OpenGL)
qpyopengl_init();
#endif
#line 8845 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
    /* Export the module and publish it's API. */
    if (sipExportModule(&sipModuleAPI_QtGui,SIP_API_MAJOR_NR,SIP_API_MINOR_NR,0) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }

    sip_QtGui_qt_metaobject = (sip_qt_metaobject_func)sipImportSymbol("qtcore_qt_metaobject");
    sip_QtGui_qt_metacall = (sip_qt_metacall_func)sipImportSymbol("qtcore_qt_metacall");
    sip_QtGui_qt_metacast = (sip_qt_metacast_func)sipImportSymbol("qtcore_qt_metacast");

    if (!sip_QtGui_qt_metacast)
        Py_FatalError("Unable to import qtcore_qt_metacast");

    /* Initialise the module now all its dependencies have been set up. */
    if (sipInitModule(&sipModuleAPI_QtGui,sipModuleDict) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }
#line 332 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qguiapplication.sip"
// Imports from QtCore.
pyqt5_qtgui_from_argv_list = (pyqt5_qtgui_from_argv_list_t)sipImportSymbol("pyqt5_from_argv_list");
Q_ASSERT(pyqt5_qtgui_from_argv_list);

pyqt5_qtgui_update_argv_list = (pyqt5_qtgui_update_argv_list_t)sipImportSymbol("pyqt5_update_argv_list");
Q_ASSERT(pyqt5_qtgui_update_argv_list);
#line 8873 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

    SIP_MODULE_RETURN(sipModule);
}

#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 8880 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtouchdevice.sip"
#include <qtouchdevice.h>
#line 8884 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static void assign_QList_0111QTouchDevice(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0111QTouchDevice(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList<const  ::QTouchDevice*> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList<const  ::QTouchDevice*> *>(sipSrc);
}


extern "C" {static void *array_QList_0111QTouchDevice(SIP_SSIZE_T);}
static void *array_QList_0111QTouchDevice(SIP_SSIZE_T sipNrElem)
{
    return new QList<const  ::QTouchDevice*>[sipNrElem];
}


extern "C" {static void *copy_QList_0111QTouchDevice(const void *, SIP_SSIZE_T);}
static void *copy_QList_0111QTouchDevice(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList<const  ::QTouchDevice*>(reinterpret_cast<const QList<const  ::QTouchDevice*> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0111QTouchDevice(void *, int);}
static void release_QList_0111QTouchDevice(void *ptr, int)
{
    delete reinterpret_cast<QList<const  ::QTouchDevice*> *>(ptr);
}



extern "C" {static int convertTo_QList_0111QTouchDevice(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0111QTouchDevice(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList<const  ::QTouchDevice*> **sipCppPtr = reinterpret_cast<QList<const  ::QTouchDevice*> **>(sipCppPtrV);

#line 184 "sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<const QTouchDevice *> *ql = new QList<const QTouchDevice *>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        const QTouchDevice *t = reinterpret_cast<const QTouchDevice *>(
                sipForceConvertToType(itm, sipType_QTouchDevice, sipTransferObj, 0,
                        0, sipIsErr));
 
        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'const QTouchDevice' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(t);

        Py_DECREF(itm);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 8992 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0111QTouchDevice(void *, PyObject *);}
static PyObject *convertFrom_QList_0111QTouchDevice(void *sipCppV, PyObject *sipTransferObj)
{
   QList<const  ::QTouchDevice*> *sipCpp = reinterpret_cast<QList<const  ::QTouchDevice*> *>(sipCppV);

#line 153 "sip/QtCore/qpycore_qlist.sip"
    int gc_enabled = sipEnableGC(0);
    PyObject *l = PyList_New(sipCpp->size());

    if (l)
    {
        for (int i = 0; i < sipCpp->size(); ++i)
        {
            const QTouchDevice *t = sipCpp->at(i);

            // The explicit (void *) cast allows const QTouchDevice to be const.
            PyObject *tobj = sipConvertFromType((void *)t, sipType_QTouchDevice,
                    sipTransferObj);

            if (!tobj)
            {
                Py_DECREF(l);
                l = 0;

                break;
            }

            PyList_SetItem(l, i, tobj);
        }
    }

    sipEnableGC(gc_enabled);

    return l;
#line 9030 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtGui_QList_0111QTouchDevice = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_11011,     /* QList<QTouchDevice*> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0111QTouchDevice,
    array_QList_0111QTouchDevice,
    copy_QList_0111QTouchDevice,
    release_QList_0111QTouchDevice,
    convertTo_QList_0111QTouchDevice,
    convertFrom_QList_0111QTouchDevice
};

#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 9062 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 9066 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static void assign_QList_0101QTextFrame(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0101QTextFrame(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QTextFrame*> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QTextFrame*> *>(sipSrc);
}


extern "C" {static void *array_QList_0101QTextFrame(SIP_SSIZE_T);}
static void *array_QList_0101QTextFrame(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QTextFrame*>[sipNrElem];
}


extern "C" {static void *copy_QList_0101QTextFrame(const void *, SIP_SSIZE_T);}
static void *copy_QList_0101QTextFrame(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QTextFrame*>(reinterpret_cast<const QList< ::QTextFrame*> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0101QTextFrame(void *, int);}
static void release_QList_0101QTextFrame(void *ptr, int)
{
    delete reinterpret_cast<QList< ::QTextFrame*> *>(ptr);
}



extern "C" {static int convertTo_QList_0101QTextFrame(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0101QTextFrame(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QTextFrame*> **sipCppPtr = reinterpret_cast<QList< ::QTextFrame*> **>(sipCppPtrV);

#line 184 "sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QTextFrame *> *ql = new QList<QTextFrame *>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        QTextFrame *t = reinterpret_cast<QTextFrame *>(
                sipForceConvertToType(itm, sipType_QTextFrame, sipTransferObj, 0,
                        0, sipIsErr));
 
        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QTextFrame' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(t);

        Py_DECREF(itm);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 9174 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0101QTextFrame(void *, PyObject *);}
static PyObject *convertFrom_QList_0101QTextFrame(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QTextFrame*> *sipCpp = reinterpret_cast<QList< ::QTextFrame*> *>(sipCppV);

#line 153 "sip/QtCore/qpycore_qlist.sip"
    int gc_enabled = sipEnableGC(0);
    PyObject *l = PyList_New(sipCpp->size());

    if (l)
    {
        for (int i = 0; i < sipCpp->size(); ++i)
        {
            QTextFrame *t = sipCpp->at(i);

            // The explicit (void *) cast allows QTextFrame to be const.
            PyObject *tobj = sipConvertFromType((void *)t, sipType_QTextFrame,
                    sipTransferObj);

            if (!tobj)
            {
                Py_DECREF(l);
                l = 0;

                break;
            }

            PyList_SetItem(l, i, tobj);
        }
    }

    sipEnableGC(gc_enabled);

    return l;
#line 9212 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtGui_QList_0101QTextFrame = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_14251,     /* QList<QTextFrame*> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0101QTextFrame,
    array_QList_0101QTextFrame,
    copy_QList_0101QTextFrame,
    release_QList_0101QTextFrame,
    convertTo_QList_0101QTextFrame,
    convertFrom_QList_0101QTextFrame
};

#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 9244 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 118 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 9248 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static void assign_QList_0100QTextBlock(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0100QTextBlock(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QTextBlock> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QTextBlock> *>(sipSrc);
}


extern "C" {static void *array_QList_0100QTextBlock(SIP_SSIZE_T);}
static void *array_QList_0100QTextBlock(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QTextBlock>[sipNrElem];
}


extern "C" {static void *copy_QList_0100QTextBlock(const void *, SIP_SSIZE_T);}
static void *copy_QList_0100QTextBlock(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QTextBlock>(reinterpret_cast<const QList< ::QTextBlock> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0100QTextBlock(void *, int);}
static void release_QList_0100QTextBlock(void *ptr, int)
{
    delete reinterpret_cast<QList< ::QTextBlock> *>(ptr);
}



extern "C" {static int convertTo_QList_0100QTextBlock(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0100QTextBlock(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QTextBlock> **sipCppPtr = reinterpret_cast<QList< ::QTextBlock> **>(sipCppPtrV);

#line 68 "sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QTextBlock> *ql = new QList<QTextBlock>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QTextBlock *t = reinterpret_cast<QTextBlock *>(
                sipForceConvertToType(itm, sipType_QTextBlock, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QTextBlock' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(*t);

        sipReleaseType(t, sipType_QTextBlock, state);
        Py_DECREF(itm);
    }
 
    Py_DECREF(iter);

    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 9358 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0100QTextBlock(void *, PyObject *);}
static PyObject *convertFrom_QList_0100QTextBlock(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QTextBlock> *sipCpp = reinterpret_cast<QList< ::QTextBlock> *>(sipCppV);

#line 42 "sip/QtCore/qpycore_qlist.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QTextBlock *t = new QTextBlock(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QTextBlock,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 9391 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtGui_QList_0100QTextBlock = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_16759,     /* QList<QTextBlock> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0100QTextBlock,
    array_QList_0100QTextBlock,
    copy_QList_0100QTextBlock,
    release_QList_0100QTextBlock,
    convertTo_QList_0100QTextBlock,
    convertFrom_QList_0100QTextBlock
};

#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 9423 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qglyphrun.sip"
#include <qglyphrun.h>
#line 9427 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static void assign_QList_0100QGlyphRun(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0100QGlyphRun(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QGlyphRun> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QGlyphRun> *>(sipSrc);
}


extern "C" {static void *array_QList_0100QGlyphRun(SIP_SSIZE_T);}
static void *array_QList_0100QGlyphRun(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QGlyphRun>[sipNrElem];
}


extern "C" {static void *copy_QList_0100QGlyphRun(const void *, SIP_SSIZE_T);}
static void *copy_QList_0100QGlyphRun(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QGlyphRun>(reinterpret_cast<const QList< ::QGlyphRun> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0100QGlyphRun(void *, int);}
static void release_QList_0100QGlyphRun(void *ptr, int)
{
    delete reinterpret_cast<QList< ::QGlyphRun> *>(ptr);
}



extern "C" {static int convertTo_QList_0100QGlyphRun(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0100QGlyphRun(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QGlyphRun> **sipCppPtr = reinterpret_cast<QList< ::QGlyphRun> **>(sipCppPtrV);

#line 68 "sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QGlyphRun> *ql = new QList<QGlyphRun>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QGlyphRun *t = reinterpret_cast<QGlyphRun *>(
                sipForceConvertToType(itm, sipType_QGlyphRun, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QGlyphRun' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(*t);

        sipReleaseType(t, sipType_QGlyphRun, state);
        Py_DECREF(itm);
    }
 
    Py_DECREF(iter);

    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 9537 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0100QGlyphRun(void *, PyObject *);}
static PyObject *convertFrom_QList_0100QGlyphRun(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QGlyphRun> *sipCpp = reinterpret_cast<QList< ::QGlyphRun> *>(sipCppV);

#line 42 "sip/QtCore/qpycore_qlist.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QGlyphRun *t = new QGlyphRun(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QGlyphRun,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 9570 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtGui_QList_0100QGlyphRun = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_19315,     /* QList<QGlyphRun> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0100QGlyphRun,
    array_QList_0100QGlyphRun,
    copy_QList_0100QGlyphRun,
    release_QList_0100QGlyphRun,
    convertTo_QList_0100QGlyphRun,
    convertFrom_QList_0100QGlyphRun
};

#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 9602 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 48 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextlayout.sip"
#include <qtextlayout.h>
#line 70 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextlayout.sip"
#include <qtextlayout.h>
#line 9608 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static void assign_QVector_0100QTextLayout_FormatRange(void *, SIP_SSIZE_T, void *);}
static void assign_QVector_0100QTextLayout_FormatRange(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QVector< ::QTextLayout::FormatRange> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QVector< ::QTextLayout::FormatRange> *>(sipSrc);
}


extern "C" {static void *array_QVector_0100QTextLayout_FormatRange(SIP_SSIZE_T);}
static void *array_QVector_0100QTextLayout_FormatRange(SIP_SSIZE_T sipNrElem)
{
    return new QVector< ::QTextLayout::FormatRange>[sipNrElem];
}


extern "C" {static void *copy_QVector_0100QTextLayout_FormatRange(const void *, SIP_SSIZE_T);}
static void *copy_QVector_0100QTextLayout_FormatRange(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QVector< ::QTextLayout::FormatRange>(reinterpret_cast<const QVector< ::QTextLayout::FormatRange> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QVector_0100QTextLayout_FormatRange(void *, int);}
static void release_QVector_0100QTextLayout_FormatRange(void *ptr, int)
{
    delete reinterpret_cast<QVector< ::QTextLayout::FormatRange> *>(ptr);
}



extern "C" {static int convertTo_QVector_0100QTextLayout_FormatRange(PyObject *, void **, int *, PyObject *);}
static int convertTo_QVector_0100QTextLayout_FormatRange(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QVector< ::QTextLayout::FormatRange> **sipCppPtr = reinterpret_cast<QVector< ::QTextLayout::FormatRange> **>(sipCppPtrV);

#line 58 "sip/QtCore/qpycore_qvector.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QVector<QTextLayout::FormatRange> *qv = new QVector<QTextLayout::FormatRange>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete qv;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QTextLayout::FormatRange *t = reinterpret_cast<QTextLayout::FormatRange *>(
                sipForceConvertToType(itm, sipType_QTextLayout_FormatRange, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QTextLayout::FormatRange' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete qv;
            Py_DECREF(iter);

            return 0;
        }

        qv->append(*t);

        sipReleaseType(t, sipType_QTextLayout_FormatRange, state);
        Py_DECREF(itm);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = qv;
 
    return sipGetState(sipTransferObj);
#line 9718 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


extern "C" {static PyObject *convertFrom_QVector_0100QTextLayout_FormatRange(void *, PyObject *);}
static PyObject *convertFrom_QVector_0100QTextLayout_FormatRange(void *sipCppV, PyObject *sipTransferObj)
{
   QVector< ::QTextLayout::FormatRange> *sipCpp = reinterpret_cast<QVector< ::QTextLayout::FormatRange> *>(sipCppV);

#line 32 "sip/QtCore/qpycore_qvector.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QTextLayout::FormatRange *t = new QTextLayout::FormatRange(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QTextLayout_FormatRange,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 9751 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtGui_QVector_0100QTextLayout_FormatRange = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_898,     /* QVector<QTextLayout::FormatRange> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QVector_0100QTextLayout_FormatRange,
    array_QVector_0100QTextLayout_FormatRange,
    copy_QVector_0100QTextLayout_FormatRange,
    release_QVector_0100QTextLayout_FormatRange,
    convertTo_QVector_0100QTextLayout_FormatRange,
    convertFrom_QVector_0100QTextLayout_FormatRange
};

#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 9783 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 48 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextlayout.sip"
#include <qtextlayout.h>
#line 70 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextlayout.sip"
#include <qtextlayout.h>
#line 9789 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static void assign_QList_0100QTextLayout_FormatRange(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0100QTextLayout_FormatRange(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QTextLayout::FormatRange> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QTextLayout::FormatRange> *>(sipSrc);
}


extern "C" {static void *array_QList_0100QTextLayout_FormatRange(SIP_SSIZE_T);}
static void *array_QList_0100QTextLayout_FormatRange(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QTextLayout::FormatRange>[sipNrElem];
}


extern "C" {static void *copy_QList_0100QTextLayout_FormatRange(const void *, SIP_SSIZE_T);}
static void *copy_QList_0100QTextLayout_FormatRange(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QTextLayout::FormatRange>(reinterpret_cast<const QList< ::QTextLayout::FormatRange> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0100QTextLayout_FormatRange(void *, int);}
static void release_QList_0100QTextLayout_FormatRange(void *ptr, int)
{
    delete reinterpret_cast<QList< ::QTextLayout::FormatRange> *>(ptr);
}



extern "C" {static int convertTo_QList_0100QTextLayout_FormatRange(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0100QTextLayout_FormatRange(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QTextLayout::FormatRange> **sipCppPtr = reinterpret_cast<QList< ::QTextLayout::FormatRange> **>(sipCppPtrV);

#line 68 "sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QTextLayout::FormatRange> *ql = new QList<QTextLayout::FormatRange>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QTextLayout::FormatRange *t = reinterpret_cast<QTextLayout::FormatRange *>(
                sipForceConvertToType(itm, sipType_QTextLayout_FormatRange, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QTextLayout::FormatRange' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(*t);

        sipReleaseType(t, sipType_QTextLayout_FormatRange, state);
        Py_DECREF(itm);
    }
 
    Py_DECREF(iter);

    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 9899 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0100QTextLayout_FormatRange(void *, PyObject *);}
static PyObject *convertFrom_QList_0100QTextLayout_FormatRange(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QTextLayout::FormatRange> *sipCpp = reinterpret_cast<QList< ::QTextLayout::FormatRange> *>(sipCppV);

#line 42 "sip/QtCore/qpycore_qlist.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QTextLayout::FormatRange *t = new QTextLayout::FormatRange(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QTextLayout_FormatRange,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 9932 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtGui_QList_0100QTextLayout_FormatRange = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_1731,     /* QList<QTextLayout::FormatRange> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0100QTextLayout_FormatRange,
    array_QList_0100QTextLayout_FormatRange,
    copy_QList_0100QTextLayout_FormatRange,
    release_QList_0100QTextLayout_FormatRange,
    convertTo_QList_0100QTextLayout_FormatRange,
    convertFrom_QList_0100QTextLayout_FormatRange
};

#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 9964 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 84 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 9970 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static void assign_QList_0100QTextOption_Tab(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0100QTextOption_Tab(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QTextOption::Tab> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QTextOption::Tab> *>(sipSrc);
}


extern "C" {static void *array_QList_0100QTextOption_Tab(SIP_SSIZE_T);}
static void *array_QList_0100QTextOption_Tab(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QTextOption::Tab>[sipNrElem];
}


extern "C" {static void *copy_QList_0100QTextOption_Tab(const void *, SIP_SSIZE_T);}
static void *copy_QList_0100QTextOption_Tab(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QTextOption::Tab>(reinterpret_cast<const QList< ::QTextOption::Tab> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0100QTextOption_Tab(void *, int);}
static void release_QList_0100QTextOption_Tab(void *ptr, int)
{
    delete reinterpret_cast<QList< ::QTextOption::Tab> *>(ptr);
}



extern "C" {static int convertTo_QList_0100QTextOption_Tab(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0100QTextOption_Tab(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QTextOption::Tab> **sipCppPtr = reinterpret_cast<QList< ::QTextOption::Tab> **>(sipCppPtrV);

#line 68 "sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QTextOption::Tab> *ql = new QList<QTextOption::Tab>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QTextOption::Tab *t = reinterpret_cast<QTextOption::Tab *>(
                sipForceConvertToType(itm, sipType_QTextOption_Tab, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QTextOption::Tab' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(*t);

        sipReleaseType(t, sipType_QTextOption_Tab, state);
        Py_DECREF(itm);
    }
 
    Py_DECREF(iter);

    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 10080 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0100QTextOption_Tab(void *, PyObject *);}
static PyObject *convertFrom_QList_0100QTextOption_Tab(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QTextOption::Tab> *sipCpp = reinterpret_cast<QList< ::QTextOption::Tab> *>(sipCppV);

#line 42 "sip/QtCore/qpycore_qlist.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QTextOption::Tab *t = new QTextOption::Tab(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QTextOption_Tab,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 10113 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtGui_QList_0100QTextOption_Tab = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_7085,     /* QList<QTextOption::Tab> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0100QTextOption_Tab,
    array_QList_0100QTextOption_Tab,
    copy_QList_0100QTextOption_Tab,
    release_QList_0100QTextOption_Tab,
    convertTo_QList_0100QTextOption_Tab,
    convertFrom_QList_0100QTextOption_Tab
};

#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 10145 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 10149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static void assign_QVector_0100QTextLength(void *, SIP_SSIZE_T, void *);}
static void assign_QVector_0100QTextLength(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QVector< ::QTextLength> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QVector< ::QTextLength> *>(sipSrc);
}


extern "C" {static void *array_QVector_0100QTextLength(SIP_SSIZE_T);}
static void *array_QVector_0100QTextLength(SIP_SSIZE_T sipNrElem)
{
    return new QVector< ::QTextLength>[sipNrElem];
}


extern "C" {static void *copy_QVector_0100QTextLength(const void *, SIP_SSIZE_T);}
static void *copy_QVector_0100QTextLength(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QVector< ::QTextLength>(reinterpret_cast<const QVector< ::QTextLength> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QVector_0100QTextLength(void *, int);}
static void release_QVector_0100QTextLength(void *ptr, int)
{
    delete reinterpret_cast<QVector< ::QTextLength> *>(ptr);
}



extern "C" {static int convertTo_QVector_0100QTextLength(PyObject *, void **, int *, PyObject *);}
static int convertTo_QVector_0100QTextLength(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QVector< ::QTextLength> **sipCppPtr = reinterpret_cast<QVector< ::QTextLength> **>(sipCppPtrV);

#line 58 "sip/QtCore/qpycore_qvector.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QVector<QTextLength> *qv = new QVector<QTextLength>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete qv;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QTextLength *t = reinterpret_cast<QTextLength *>(
                sipForceConvertToType(itm, sipType_QTextLength, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QTextLength' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete qv;
            Py_DECREF(iter);

            return 0;
        }

        qv->append(*t);

        sipReleaseType(t, sipType_QTextLength, state);
        Py_DECREF(itm);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = qv;
 
    return sipGetState(sipTransferObj);
#line 10259 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


extern "C" {static PyObject *convertFrom_QVector_0100QTextLength(void *, PyObject *);}
static PyObject *convertFrom_QVector_0100QTextLength(void *sipCppV, PyObject *sipTransferObj)
{
   QVector< ::QTextLength> *sipCpp = reinterpret_cast<QVector< ::QTextLength> *>(sipCppV);

#line 32 "sip/QtCore/qpycore_qvector.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QTextLength *t = new QTextLength(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QTextLength,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 10292 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtGui_QVector_0100QTextLength = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_11032,     /* QVector<QTextLength> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QVector_0100QTextLength,
    array_QVector_0100QTextLength,
    copy_QVector_0100QTextLength,
    release_QVector_0100QTextLength,
    convertTo_QVector_0100QTextLength,
    convertFrom_QVector_0100QTextLength
};

#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 10324 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 10328 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static void assign_QVector_0100QTextFormat(void *, SIP_SSIZE_T, void *);}
static void assign_QVector_0100QTextFormat(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QVector< ::QTextFormat> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QVector< ::QTextFormat> *>(sipSrc);
}


extern "C" {static void *array_QVector_0100QTextFormat(SIP_SSIZE_T);}
static void *array_QVector_0100QTextFormat(SIP_SSIZE_T sipNrElem)
{
    return new QVector< ::QTextFormat>[sipNrElem];
}


extern "C" {static void *copy_QVector_0100QTextFormat(const void *, SIP_SSIZE_T);}
static void *copy_QVector_0100QTextFormat(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QVector< ::QTextFormat>(reinterpret_cast<const QVector< ::QTextFormat> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QVector_0100QTextFormat(void *, int);}
static void release_QVector_0100QTextFormat(void *ptr, int)
{
    delete reinterpret_cast<QVector< ::QTextFormat> *>(ptr);
}



extern "C" {static int convertTo_QVector_0100QTextFormat(PyObject *, void **, int *, PyObject *);}
static int convertTo_QVector_0100QTextFormat(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QVector< ::QTextFormat> **sipCppPtr = reinterpret_cast<QVector< ::QTextFormat> **>(sipCppPtrV);

#line 58 "sip/QtCore/qpycore_qvector.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QVector<QTextFormat> *qv = new QVector<QTextFormat>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete qv;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QTextFormat *t = reinterpret_cast<QTextFormat *>(
                sipForceConvertToType(itm, sipType_QTextFormat, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QTextFormat' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete qv;
            Py_DECREF(iter);

            return 0;
        }

        qv->append(*t);

        sipReleaseType(t, sipType_QTextFormat, state);
        Py_DECREF(itm);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = qv;
 
    return sipGetState(sipTransferObj);
#line 10438 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


extern "C" {static PyObject *convertFrom_QVector_0100QTextFormat(void *, PyObject *);}
static PyObject *convertFrom_QVector_0100QTextFormat(void *sipCppV, PyObject *sipTransferObj)
{
   QVector< ::QTextFormat> *sipCpp = reinterpret_cast<QVector< ::QTextFormat> *>(sipCppV);

#line 32 "sip/QtCore/qpycore_qvector.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QTextFormat *t = new QTextFormat(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QTextFormat,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 10471 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtGui_QVector_0100QTextFormat = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_11053,     /* QVector<QTextFormat> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QVector_0100QTextFormat,
    array_QVector_0100QTextFormat,
    copy_QVector_0100QTextFormat,
    release_QVector_0100QTextFormat,
    convertTo_QVector_0100QTextFormat,
    convertFrom_QVector_0100QTextFormat
};

#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 10503 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 103 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qstandarditemmodel.sip"
#include <qstandarditemmodel.h>
#line 10507 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static void assign_QList_0101QStandardItem(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0101QStandardItem(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QStandardItem*> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QStandardItem*> *>(sipSrc);
}


extern "C" {static void *array_QList_0101QStandardItem(SIP_SSIZE_T);}
static void *array_QList_0101QStandardItem(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QStandardItem*>[sipNrElem];
}


extern "C" {static void *copy_QList_0101QStandardItem(const void *, SIP_SSIZE_T);}
static void *copy_QList_0101QStandardItem(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QStandardItem*>(reinterpret_cast<const QList< ::QStandardItem*> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0101QStandardItem(void *, int);}
static void release_QList_0101QStandardItem(void *ptr, int)
{
    delete reinterpret_cast<QList< ::QStandardItem*> *>(ptr);
}



extern "C" {static int convertTo_QList_0101QStandardItem(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0101QStandardItem(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QStandardItem*> **sipCppPtr = reinterpret_cast<QList< ::QStandardItem*> **>(sipCppPtrV);

#line 184 "sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QStandardItem *> *ql = new QList<QStandardItem *>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        QStandardItem *t = reinterpret_cast<QStandardItem *>(
                sipForceConvertToType(itm, sipType_QStandardItem, sipTransferObj, 0,
                        0, sipIsErr));
 
        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QStandardItem' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(t);

        Py_DECREF(itm);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 10615 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0101QStandardItem(void *, PyObject *);}
static PyObject *convertFrom_QList_0101QStandardItem(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QStandardItem*> *sipCpp = reinterpret_cast<QList< ::QStandardItem*> *>(sipCppV);

#line 153 "sip/QtCore/qpycore_qlist.sip"
    int gc_enabled = sipEnableGC(0);
    PyObject *l = PyList_New(sipCpp->size());

    if (l)
    {
        for (int i = 0; i < sipCpp->size(); ++i)
        {
            QStandardItem *t = sipCpp->at(i);

            // The explicit (void *) cast allows QStandardItem to be const.
            PyObject *tobj = sipConvertFromType((void *)t, sipType_QStandardItem,
                    sipTransferObj);

            if (!tobj)
            {
                Py_DECREF(l);
                l = 0;

                break;
            }

            PyList_SetItem(l, i, tobj);
        }
    }

    sipEnableGC(gc_enabled);

    return l;
#line 10653 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtGui_QList_0101QStandardItem = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_9339,     /* QList<QStandardItem*> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0101QStandardItem,
    array_QList_0101QStandardItem,
    copy_QList_0101QStandardItem,
    release_QList_0101QStandardItem,
    convertTo_QList_0101QStandardItem,
    convertFrom_QList_0101QStandardItem
};

#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 10685 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 315 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 10689 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static void assign_QList_0100QPolygonF(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0100QPolygonF(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QPolygonF> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QPolygonF> *>(sipSrc);
}


extern "C" {static void *array_QList_0100QPolygonF(SIP_SSIZE_T);}
static void *array_QList_0100QPolygonF(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QPolygonF>[sipNrElem];
}


extern "C" {static void *copy_QList_0100QPolygonF(const void *, SIP_SSIZE_T);}
static void *copy_QList_0100QPolygonF(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QPolygonF>(reinterpret_cast<const QList< ::QPolygonF> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0100QPolygonF(void *, int);}
static void release_QList_0100QPolygonF(void *ptr, int)
{
    delete reinterpret_cast<QList< ::QPolygonF> *>(ptr);
}



extern "C" {static int convertTo_QList_0100QPolygonF(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0100QPolygonF(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QPolygonF> **sipCppPtr = reinterpret_cast<QList< ::QPolygonF> **>(sipCppPtrV);

#line 68 "sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QPolygonF> *ql = new QList<QPolygonF>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QPolygonF *t = reinterpret_cast<QPolygonF *>(
                sipForceConvertToType(itm, sipType_QPolygonF, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QPolygonF' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(*t);

        sipReleaseType(t, sipType_QPolygonF, state);
        Py_DECREF(itm);
    }
 
    Py_DECREF(iter);

    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 10799 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0100QPolygonF(void *, PyObject *);}
static PyObject *convertFrom_QList_0100QPolygonF(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QPolygonF> *sipCpp = reinterpret_cast<QList< ::QPolygonF> *>(sipCppV);

#line 42 "sip/QtCore/qpycore_qlist.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QPolygonF *t = new QPolygonF(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QPolygonF,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 10832 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtGui_QList_0100QPolygonF = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_19332,     /* QList<QPolygonF> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0100QPolygonF,
    array_QList_0100QPolygonF,
    copy_QList_0100QPolygonF,
    release_QList_0100QPolygonF,
    convertTo_QList_0100QPolygonF,
    convertFrom_QList_0100QPolygonF
};

#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 10864 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 10868 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static void assign_QVector_0100QRect(void *, SIP_SSIZE_T, void *);}
static void assign_QVector_0100QRect(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QVector< ::QRect> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QVector< ::QRect> *>(sipSrc);
}


extern "C" {static void *array_QVector_0100QRect(SIP_SSIZE_T);}
static void *array_QVector_0100QRect(SIP_SSIZE_T sipNrElem)
{
    return new QVector< ::QRect>[sipNrElem];
}


extern "C" {static void *copy_QVector_0100QRect(const void *, SIP_SSIZE_T);}
static void *copy_QVector_0100QRect(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QVector< ::QRect>(reinterpret_cast<const QVector< ::QRect> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QVector_0100QRect(void *, int);}
static void release_QVector_0100QRect(void *ptr, int)
{
    delete reinterpret_cast<QVector< ::QRect> *>(ptr);
}



extern "C" {static int convertTo_QVector_0100QRect(PyObject *, void **, int *, PyObject *);}
static int convertTo_QVector_0100QRect(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QVector< ::QRect> **sipCppPtr = reinterpret_cast<QVector< ::QRect> **>(sipCppPtrV);

#line 58 "sip/QtCore/qpycore_qvector.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QVector<QRect> *qv = new QVector<QRect>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete qv;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QRect *t = reinterpret_cast<QRect *>(
                sipForceConvertToType(itm, sipType_QRect, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QRect' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete qv;
            Py_DECREF(iter);

            return 0;
        }

        qv->append(*t);

        sipReleaseType(t, sipType_QRect, state);
        Py_DECREF(itm);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = qv;
 
    return sipGetState(sipTransferObj);
#line 10978 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


extern "C" {static PyObject *convertFrom_QVector_0100QRect(void *, PyObject *);}
static PyObject *convertFrom_QVector_0100QRect(void *sipCppV, PyObject *sipTransferObj)
{
   QVector< ::QRect> *sipCpp = reinterpret_cast<QVector< ::QRect> *>(sipCppV);

#line 32 "sip/QtCore/qpycore_qvector.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QRect *t = new QRect(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QRect,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 11011 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtGui_QVector_0100QRect = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_24731,     /* QVector<QRect> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QVector_0100QRect,
    array_QVector_0100QRect,
    copy_QVector_0100QRect,
    release_QVector_0100QRect,
    convertTo_QVector_0100QRect,
    convertFrom_QVector_0100QRect
};

#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 11043 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 11047 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static void assign_QVector_0100QRectF(void *, SIP_SSIZE_T, void *);}
static void assign_QVector_0100QRectF(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QVector< ::QRectF> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QVector< ::QRectF> *>(sipSrc);
}


extern "C" {static void *array_QVector_0100QRectF(SIP_SSIZE_T);}
static void *array_QVector_0100QRectF(SIP_SSIZE_T sipNrElem)
{
    return new QVector< ::QRectF>[sipNrElem];
}


extern "C" {static void *copy_QVector_0100QRectF(const void *, SIP_SSIZE_T);}
static void *copy_QVector_0100QRectF(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QVector< ::QRectF>(reinterpret_cast<const QVector< ::QRectF> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QVector_0100QRectF(void *, int);}
static void release_QVector_0100QRectF(void *ptr, int)
{
    delete reinterpret_cast<QVector< ::QRectF> *>(ptr);
}



extern "C" {static int convertTo_QVector_0100QRectF(PyObject *, void **, int *, PyObject *);}
static int convertTo_QVector_0100QRectF(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QVector< ::QRectF> **sipCppPtr = reinterpret_cast<QVector< ::QRectF> **>(sipCppPtrV);

#line 58 "sip/QtCore/qpycore_qvector.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QVector<QRectF> *qv = new QVector<QRectF>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete qv;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QRectF *t = reinterpret_cast<QRectF *>(
                sipForceConvertToType(itm, sipType_QRectF, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QRectF' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete qv;
            Py_DECREF(iter);

            return 0;
        }

        qv->append(*t);

        sipReleaseType(t, sipType_QRectF, state);
        Py_DECREF(itm);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = qv;
 
    return sipGetState(sipTransferObj);
#line 11157 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


extern "C" {static PyObject *convertFrom_QVector_0100QRectF(void *, PyObject *);}
static PyObject *convertFrom_QVector_0100QRectF(void *sipCppV, PyObject *sipTransferObj)
{
   QVector< ::QRectF> *sipCpp = reinterpret_cast<QVector< ::QRectF> *>(sipCppV);

#line 32 "sip/QtCore/qpycore_qvector.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QRectF *t = new QRectF(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QRectF,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 11190 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtGui_QVector_0100QRectF = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_21627,     /* QVector<QRectF> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QVector_0100QRectF,
    array_QVector_0100QRectF,
    copy_QVector_0100QRectF,
    release_QVector_0100QRectF,
    convertTo_QVector_0100QRectF,
    convertFrom_QVector_0100QRectF
};

#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 11222 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 11226 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static void assign_QVector_0100QPoint(void *, SIP_SSIZE_T, void *);}
static void assign_QVector_0100QPoint(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QVector< ::QPoint> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QVector< ::QPoint> *>(sipSrc);
}


extern "C" {static void *array_QVector_0100QPoint(SIP_SSIZE_T);}
static void *array_QVector_0100QPoint(SIP_SSIZE_T sipNrElem)
{
    return new QVector< ::QPoint>[sipNrElem];
}


extern "C" {static void *copy_QVector_0100QPoint(const void *, SIP_SSIZE_T);}
static void *copy_QVector_0100QPoint(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QVector< ::QPoint>(reinterpret_cast<const QVector< ::QPoint> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QVector_0100QPoint(void *, int);}
static void release_QVector_0100QPoint(void *ptr, int)
{
    delete reinterpret_cast<QVector< ::QPoint> *>(ptr);
}



extern "C" {static int convertTo_QVector_0100QPoint(PyObject *, void **, int *, PyObject *);}
static int convertTo_QVector_0100QPoint(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QVector< ::QPoint> **sipCppPtr = reinterpret_cast<QVector< ::QPoint> **>(sipCppPtrV);

#line 58 "sip/QtCore/qpycore_qvector.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QVector<QPoint> *qv = new QVector<QPoint>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete qv;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QPoint *t = reinterpret_cast<QPoint *>(
                sipForceConvertToType(itm, sipType_QPoint, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QPoint' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete qv;
            Py_DECREF(iter);

            return 0;
        }

        qv->append(*t);

        sipReleaseType(t, sipType_QPoint, state);
        Py_DECREF(itm);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = qv;
 
    return sipGetState(sipTransferObj);
#line 11336 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


extern "C" {static PyObject *convertFrom_QVector_0100QPoint(void *, PyObject *);}
static PyObject *convertFrom_QVector_0100QPoint(void *sipCppV, PyObject *sipTransferObj)
{
   QVector< ::QPoint> *sipCpp = reinterpret_cast<QVector< ::QPoint> *>(sipCppV);

#line 32 "sip/QtCore/qpycore_qvector.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QPoint *t = new QPoint(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QPoint,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 11369 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtGui_QVector_0100QPoint = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_21643,     /* QVector<QPoint> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QVector_0100QPoint,
    array_QVector_0100QPoint,
    copy_QVector_0100QPoint,
    release_QVector_0100QPoint,
    convertTo_QVector_0100QPoint,
    convertFrom_QVector_0100QPoint
};

#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 11401 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "sip/QtCore/qline.sip"
#include <qline.h>
#line 11405 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static void assign_QVector_0100QLine(void *, SIP_SSIZE_T, void *);}
static void assign_QVector_0100QLine(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QVector< ::QLine> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QVector< ::QLine> *>(sipSrc);
}


extern "C" {static void *array_QVector_0100QLine(SIP_SSIZE_T);}
static void *array_QVector_0100QLine(SIP_SSIZE_T sipNrElem)
{
    return new QVector< ::QLine>[sipNrElem];
}


extern "C" {static void *copy_QVector_0100QLine(const void *, SIP_SSIZE_T);}
static void *copy_QVector_0100QLine(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QVector< ::QLine>(reinterpret_cast<const QVector< ::QLine> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QVector_0100QLine(void *, int);}
static void release_QVector_0100QLine(void *ptr, int)
{
    delete reinterpret_cast<QVector< ::QLine> *>(ptr);
}



extern "C" {static int convertTo_QVector_0100QLine(PyObject *, void **, int *, PyObject *);}
static int convertTo_QVector_0100QLine(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QVector< ::QLine> **sipCppPtr = reinterpret_cast<QVector< ::QLine> **>(sipCppPtrV);

#line 58 "sip/QtCore/qpycore_qvector.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QVector<QLine> *qv = new QVector<QLine>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete qv;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QLine *t = reinterpret_cast<QLine *>(
                sipForceConvertToType(itm, sipType_QLine, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QLine' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete qv;
            Py_DECREF(iter);

            return 0;
        }

        qv->append(*t);

        sipReleaseType(t, sipType_QLine, state);
        Py_DECREF(itm);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = qv;
 
    return sipGetState(sipTransferObj);
#line 11515 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


extern "C" {static PyObject *convertFrom_QVector_0100QLine(void *, PyObject *);}
static PyObject *convertFrom_QVector_0100QLine(void *sipCppV, PyObject *sipTransferObj)
{
   QVector< ::QLine> *sipCpp = reinterpret_cast<QVector< ::QLine> *>(sipCppV);

#line 32 "sip/QtCore/qpycore_qvector.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QLine *t = new QLine(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QLine,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 11548 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtGui_QVector_0100QLine = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_24746,     /* QVector<QLine> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QVector_0100QLine,
    array_QVector_0100QLine,
    copy_QVector_0100QLine,
    release_QVector_0100QLine,
    convertTo_QVector_0100QLine,
    convertFrom_QVector_0100QLine
};

#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 11580 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 95 "sip/QtCore/qline.sip"
#include <qline.h>
#line 11584 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static void assign_QVector_0100QLineF(void *, SIP_SSIZE_T, void *);}
static void assign_QVector_0100QLineF(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QVector< ::QLineF> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QVector< ::QLineF> *>(sipSrc);
}


extern "C" {static void *array_QVector_0100QLineF(SIP_SSIZE_T);}
static void *array_QVector_0100QLineF(SIP_SSIZE_T sipNrElem)
{
    return new QVector< ::QLineF>[sipNrElem];
}


extern "C" {static void *copy_QVector_0100QLineF(const void *, SIP_SSIZE_T);}
static void *copy_QVector_0100QLineF(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QVector< ::QLineF>(reinterpret_cast<const QVector< ::QLineF> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QVector_0100QLineF(void *, int);}
static void release_QVector_0100QLineF(void *ptr, int)
{
    delete reinterpret_cast<QVector< ::QLineF> *>(ptr);
}



extern "C" {static int convertTo_QVector_0100QLineF(PyObject *, void **, int *, PyObject *);}
static int convertTo_QVector_0100QLineF(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QVector< ::QLineF> **sipCppPtr = reinterpret_cast<QVector< ::QLineF> **>(sipCppPtrV);

#line 58 "sip/QtCore/qpycore_qvector.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QVector<QLineF> *qv = new QVector<QLineF>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete qv;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QLineF *t = reinterpret_cast<QLineF *>(
                sipForceConvertToType(itm, sipType_QLineF, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QLineF' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete qv;
            Py_DECREF(iter);

            return 0;
        }

        qv->append(*t);

        sipReleaseType(t, sipType_QLineF, state);
        Py_DECREF(itm);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = qv;
 
    return sipGetState(sipTransferObj);
#line 11694 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


extern "C" {static PyObject *convertFrom_QVector_0100QLineF(void *, PyObject *);}
static PyObject *convertFrom_QVector_0100QLineF(void *sipCppV, PyObject *sipTransferObj)
{
   QVector< ::QLineF> *sipCpp = reinterpret_cast<QVector< ::QLineF> *>(sipCppV);

#line 32 "sip/QtCore/qpycore_qvector.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QLineF *t = new QLineF(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QLineF,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 11727 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtGui_QVector_0100QLineF = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_21659,     /* QVector<QLineF> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QVector_0100QLineF,
    array_QVector_0100QLineF,
    copy_QVector_0100QLineF,
    release_QVector_0100QLineF,
    convertTo_QVector_0100QLineF,
    convertFrom_QVector_0100QLineF
};

#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 11759 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglshaderprogram.sip"
#include <qopenglshaderprogram.h>
#line 11763 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static void assign_QList_0101QOpenGLShader(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0101QOpenGLShader(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QOpenGLShader*> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QOpenGLShader*> *>(sipSrc);
}


extern "C" {static void *array_QList_0101QOpenGLShader(SIP_SSIZE_T);}
static void *array_QList_0101QOpenGLShader(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QOpenGLShader*>[sipNrElem];
}


extern "C" {static void *copy_QList_0101QOpenGLShader(const void *, SIP_SSIZE_T);}
static void *copy_QList_0101QOpenGLShader(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QOpenGLShader*>(reinterpret_cast<const QList< ::QOpenGLShader*> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0101QOpenGLShader(void *, int);}
static void release_QList_0101QOpenGLShader(void *ptr, int)
{
    delete reinterpret_cast<QList< ::QOpenGLShader*> *>(ptr);
}



extern "C" {static int convertTo_QList_0101QOpenGLShader(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0101QOpenGLShader(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QOpenGLShader*> **sipCppPtr = reinterpret_cast<QList< ::QOpenGLShader*> **>(sipCppPtrV);

#line 184 "sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QOpenGLShader *> *ql = new QList<QOpenGLShader *>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        QOpenGLShader *t = reinterpret_cast<QOpenGLShader *>(
                sipForceConvertToType(itm, sipType_QOpenGLShader, sipTransferObj, 0,
                        0, sipIsErr));
 
        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QOpenGLShader' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(t);

        Py_DECREF(itm);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 11871 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0101QOpenGLShader(void *, PyObject *);}
static PyObject *convertFrom_QList_0101QOpenGLShader(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QOpenGLShader*> *sipCpp = reinterpret_cast<QList< ::QOpenGLShader*> *>(sipCppV);

#line 153 "sip/QtCore/qpycore_qlist.sip"
    int gc_enabled = sipEnableGC(0);
    PyObject *l = PyList_New(sipCpp->size());

    if (l)
    {
        for (int i = 0; i < sipCpp->size(); ++i)
        {
            QOpenGLShader *t = sipCpp->at(i);

            // The explicit (void *) cast allows QOpenGLShader to be const.
            PyObject *tobj = sipConvertFromType((void *)t, sipType_QOpenGLShader,
                    sipTransferObj);

            if (!tobj)
            {
                Py_DECREF(l);
                l = 0;

                break;
            }

            PyList_SetItem(l, i, tobj);
        }
    }

    sipEnableGC(gc_enabled);

    return l;
#line 11909 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtGui_QList_0101QOpenGLShader = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_9361,     /* QList<QOpenGLShader*> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0101QOpenGLShader,
    array_QList_0101QOpenGLShader,
    copy_QList_0101QOpenGLShader,
    release_QList_0101QOpenGLShader,
    convertTo_QList_0101QOpenGLShader,
    convertFrom_QList_0101QOpenGLShader
};

#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 11941 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 11945 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static void assign_QVector_0100QSize(void *, SIP_SSIZE_T, void *);}
static void assign_QVector_0100QSize(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QVector< ::QSize> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QVector< ::QSize> *>(sipSrc);
}


extern "C" {static void *array_QVector_0100QSize(SIP_SSIZE_T);}
static void *array_QVector_0100QSize(SIP_SSIZE_T sipNrElem)
{
    return new QVector< ::QSize>[sipNrElem];
}


extern "C" {static void *copy_QVector_0100QSize(const void *, SIP_SSIZE_T);}
static void *copy_QVector_0100QSize(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QVector< ::QSize>(reinterpret_cast<const QVector< ::QSize> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QVector_0100QSize(void *, int);}
static void release_QVector_0100QSize(void *ptr, int)
{
    delete reinterpret_cast<QVector< ::QSize> *>(ptr);
}



extern "C" {static int convertTo_QVector_0100QSize(PyObject *, void **, int *, PyObject *);}
static int convertTo_QVector_0100QSize(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QVector< ::QSize> **sipCppPtr = reinterpret_cast<QVector< ::QSize> **>(sipCppPtrV);

#line 58 "sip/QtCore/qpycore_qvector.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QVector<QSize> *qv = new QVector<QSize>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete qv;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QSize *t = reinterpret_cast<QSize *>(
                sipForceConvertToType(itm, sipType_QSize, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QSize' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete qv;
            Py_DECREF(iter);

            return 0;
        }

        qv->append(*t);

        sipReleaseType(t, sipType_QSize, state);
        Py_DECREF(itm);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = qv;
 
    return sipGetState(sipTransferObj);
#line 12055 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


extern "C" {static PyObject *convertFrom_QVector_0100QSize(void *, PyObject *);}
static PyObject *convertFrom_QVector_0100QSize(void *sipCppV, PyObject *sipTransferObj)
{
   QVector< ::QSize> *sipCpp = reinterpret_cast<QVector< ::QSize> *>(sipCppV);

#line 32 "sip/QtCore/qpycore_qvector.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QSize *t = new QSize(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QSize,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 12088 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtGui_QVector_0100QSize = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_24761,     /* QVector<QSize> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QVector_0100QSize,
    array_QVector_0100QSize,
    copy_QVector_0100QSize,
    release_QVector_0100QSize,
    convertTo_QVector_0100QSize,
    convertFrom_QVector_0100QSize
};

#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 12120 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopengldebug.sip"
#include <qopengldebug.h>
#line 12124 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static void assign_QList_0100QOpenGLDebugMessage(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0100QOpenGLDebugMessage(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QOpenGLDebugMessage> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QOpenGLDebugMessage> *>(sipSrc);
}


extern "C" {static void *array_QList_0100QOpenGLDebugMessage(SIP_SSIZE_T);}
static void *array_QList_0100QOpenGLDebugMessage(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QOpenGLDebugMessage>[sipNrElem];
}


extern "C" {static void *copy_QList_0100QOpenGLDebugMessage(const void *, SIP_SSIZE_T);}
static void *copy_QList_0100QOpenGLDebugMessage(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QOpenGLDebugMessage>(reinterpret_cast<const QList< ::QOpenGLDebugMessage> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0100QOpenGLDebugMessage(void *, int);}
static void release_QList_0100QOpenGLDebugMessage(void *ptr, int)
{
    delete reinterpret_cast<QList< ::QOpenGLDebugMessage> *>(ptr);
}



extern "C" {static int convertTo_QList_0100QOpenGLDebugMessage(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0100QOpenGLDebugMessage(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QOpenGLDebugMessage> **sipCppPtr = reinterpret_cast<QList< ::QOpenGLDebugMessage> **>(sipCppPtrV);

#line 68 "sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QOpenGLDebugMessage> *ql = new QList<QOpenGLDebugMessage>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QOpenGLDebugMessage *t = reinterpret_cast<QOpenGLDebugMessage *>(
                sipForceConvertToType(itm, sipType_QOpenGLDebugMessage, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QOpenGLDebugMessage' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(*t);

        sipReleaseType(t, sipType_QOpenGLDebugMessage, state);
        Py_DECREF(itm);
    }
 
    Py_DECREF(iter);

    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 12234 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0100QOpenGLDebugMessage(void *, PyObject *);}
static PyObject *convertFrom_QList_0100QOpenGLDebugMessage(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QOpenGLDebugMessage> *sipCpp = reinterpret_cast<QList< ::QOpenGLDebugMessage> *>(sipCppV);

#line 42 "sip/QtCore/qpycore_qlist.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QOpenGLDebugMessage *t = new QOpenGLDebugMessage(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QOpenGLDebugMessage,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 12267 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtGui_QList_0100QOpenGLDebugMessage = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_4679,     /* QList<QOpenGLDebugMessage> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0100QOpenGLDebugMessage,
    array_QList_0100QOpenGLDebugMessage,
    copy_QList_0100QOpenGLDebugMessage,
    release_QList_0100QOpenGLDebugMessage,
    convertTo_QList_0100QOpenGLDebugMessage,
    convertFrom_QList_0100QOpenGLDebugMessage
};

#line 28 "sip/QtCore/qpycore_qset.sip"
#include <qset.h>
#line 12299 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 12303 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static void assign_QSet_0100QByteArray(void *, SIP_SSIZE_T, void *);}
static void assign_QSet_0100QByteArray(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QSet< ::QByteArray> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QSet< ::QByteArray> *>(sipSrc);
}


extern "C" {static void *array_QSet_0100QByteArray(SIP_SSIZE_T);}
static void *array_QSet_0100QByteArray(SIP_SSIZE_T sipNrElem)
{
    return new QSet< ::QByteArray>[sipNrElem];
}


extern "C" {static void *copy_QSet_0100QByteArray(const void *, SIP_SSIZE_T);}
static void *copy_QSet_0100QByteArray(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QSet< ::QByteArray>(reinterpret_cast<const QSet< ::QByteArray> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QSet_0100QByteArray(void *, int);}
static void release_QSet_0100QByteArray(void *ptr, int)
{
    delete reinterpret_cast<QSet< ::QByteArray> *>(ptr);
}



extern "C" {static int convertTo_QSet_0100QByteArray(PyObject *, void **, int *, PyObject *);}
static int convertTo_QSet_0100QByteArray(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QSet< ::QByteArray> **sipCppPtr = reinterpret_cast<QSet< ::QByteArray> **>(sipCppPtrV);

#line 63 "sip/QtCore/qpycore_qset.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QSet<QByteArray> *qs = new QSet<QByteArray>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete qs;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QByteArray *t = reinterpret_cast<QByteArray *>(
                sipForceConvertToType(itm, sipType_QByteArray, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QByteArray' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete qs;
            Py_DECREF(iter);

            return 0;
        }

        qs->insert(*t);

        sipReleaseType(t, sipType_QByteArray, state);
        Py_DECREF(itm);
    }
 
    Py_DECREF(iter);

    *sipCppPtr = qs;
 
    return sipGetState(sipTransferObj);
#line 12413 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


extern "C" {static PyObject *convertFrom_QSet_0100QByteArray(void *, PyObject *);}
static PyObject *convertFrom_QSet_0100QByteArray(void *sipCppV, PyObject *sipTransferObj)
{
   QSet< ::QByteArray> *sipCpp = reinterpret_cast<QSet< ::QByteArray> *>(sipCppV);

#line 32 "sip/QtCore/qpycore_qset.sip"
    PyObject *s = PySet_New(0);

    if (!s)
        return 0;

    QSet<QByteArray>::const_iterator it = sipCpp->constBegin();
    QSet<QByteArray>::const_iterator end = sipCpp->constEnd();

    while (it != end)
    {
        QByteArray *t = new QByteArray(*it);
        PyObject *tobj = sipConvertFromNewType(t, sipType_QByteArray,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(s);

            return 0;
        }

        PySet_Add(s, tobj);

        ++it;
    }

    return s;
#line 12451 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtGui_QSet_0100QByteArray = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_19349,     /* QSet<QByteArray> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QSet_0100QByteArray,
    array_QSet_0100QByteArray,
    copy_QSet_0100QByteArray,
    release_QSet_0100QByteArray,
    convertTo_QSet_0100QByteArray,
    convertFrom_QSet_0100QByteArray
};

#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 12483 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 46 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopenglcontext.sip"
#include <qopenglcontext.h>
#line 12487 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static void assign_QList_0101QOpenGLContext(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0101QOpenGLContext(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QOpenGLContext*> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QOpenGLContext*> *>(sipSrc);
}


extern "C" {static void *array_QList_0101QOpenGLContext(SIP_SSIZE_T);}
static void *array_QList_0101QOpenGLContext(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QOpenGLContext*>[sipNrElem];
}


extern "C" {static void *copy_QList_0101QOpenGLContext(const void *, SIP_SSIZE_T);}
static void *copy_QList_0101QOpenGLContext(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QOpenGLContext*>(reinterpret_cast<const QList< ::QOpenGLContext*> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0101QOpenGLContext(void *, int);}
static void release_QList_0101QOpenGLContext(void *ptr, int)
{
    delete reinterpret_cast<QList< ::QOpenGLContext*> *>(ptr);
}



extern "C" {static int convertTo_QList_0101QOpenGLContext(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0101QOpenGLContext(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QOpenGLContext*> **sipCppPtr = reinterpret_cast<QList< ::QOpenGLContext*> **>(sipCppPtrV);

#line 184 "sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QOpenGLContext *> *ql = new QList<QOpenGLContext *>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        QOpenGLContext *t = reinterpret_cast<QOpenGLContext *>(
                sipForceConvertToType(itm, sipType_QOpenGLContext, sipTransferObj, 0,
                        0, sipIsErr));
 
        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QOpenGLContext' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(t);

        Py_DECREF(itm);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 12595 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0101QOpenGLContext(void *, PyObject *);}
static PyObject *convertFrom_QList_0101QOpenGLContext(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QOpenGLContext*> *sipCpp = reinterpret_cast<QList< ::QOpenGLContext*> *>(sipCppV);

#line 153 "sip/QtCore/qpycore_qlist.sip"
    int gc_enabled = sipEnableGC(0);
    PyObject *l = PyList_New(sipCpp->size());

    if (l)
    {
        for (int i = 0; i < sipCpp->size(); ++i)
        {
            QOpenGLContext *t = sipCpp->at(i);

            // The explicit (void *) cast allows QOpenGLContext to be const.
            PyObject *tobj = sipConvertFromType((void *)t, sipType_QOpenGLContext,
                    sipTransferObj);

            if (!tobj)
            {
                Py_DECREF(l);
                l = 0;

                break;
            }

            PyList_SetItem(l, i, tobj);
        }
    }

    sipEnableGC(gc_enabled);

    return l;
#line 12633 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtGui_QList_0101QOpenGLContext = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_8189,     /* QList<QOpenGLContext*> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0101QOpenGLContext,
    array_QList_0101QOpenGLContext,
    copy_QList_0101QOpenGLContext,
    release_QList_0101QOpenGLContext,
    convertTo_QList_0101QOpenGLContext,
    convertFrom_QList_0101QOpenGLContext
};

#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 12665 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 12669 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static void assign_QList_0100QKeySequence(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0100QKeySequence(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QKeySequence> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QKeySequence> *>(sipSrc);
}


extern "C" {static void *array_QList_0100QKeySequence(SIP_SSIZE_T);}
static void *array_QList_0100QKeySequence(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QKeySequence>[sipNrElem];
}


extern "C" {static void *copy_QList_0100QKeySequence(const void *, SIP_SSIZE_T);}
static void *copy_QList_0100QKeySequence(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QKeySequence>(reinterpret_cast<const QList< ::QKeySequence> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0100QKeySequence(void *, int);}
static void release_QList_0100QKeySequence(void *ptr, int)
{
    delete reinterpret_cast<QList< ::QKeySequence> *>(ptr);
}



extern "C" {static int convertTo_QList_0100QKeySequence(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0100QKeySequence(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QKeySequence> **sipCppPtr = reinterpret_cast<QList< ::QKeySequence> **>(sipCppPtrV);

#line 68 "sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QKeySequence> *ql = new QList<QKeySequence>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QKeySequence *t = reinterpret_cast<QKeySequence *>(
                sipForceConvertToType(itm, sipType_QKeySequence, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QKeySequence' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(*t);

        sipReleaseType(t, sipType_QKeySequence, state);
        Py_DECREF(itm);
    }
 
    Py_DECREF(iter);

    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 12779 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0100QKeySequence(void *, PyObject *);}
static PyObject *convertFrom_QList_0100QKeySequence(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QKeySequence> *sipCpp = reinterpret_cast<QList< ::QKeySequence> *>(sipCppV);

#line 42 "sip/QtCore/qpycore_qlist.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QKeySequence *t = new QKeySequence(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QKeySequence,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 12812 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtGui_QList_0100QKeySequence = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_12691,     /* QList<QKeySequence> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0100QKeySequence,
    array_QList_0100QKeySequence,
    copy_QList_0100QKeySequence,
    release_QList_0100QKeySequence,
    convertTo_QList_0100QKeySequence,
    convertFrom_QList_0100QKeySequence
};

#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 12844 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qscreen.sip"
#include <qscreen.h>
#line 12848 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static void assign_QList_0101QScreen(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0101QScreen(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QScreen*> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QScreen*> *>(sipSrc);
}


extern "C" {static void *array_QList_0101QScreen(SIP_SSIZE_T);}
static void *array_QList_0101QScreen(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QScreen*>[sipNrElem];
}


extern "C" {static void *copy_QList_0101QScreen(const void *, SIP_SSIZE_T);}
static void *copy_QList_0101QScreen(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QScreen*>(reinterpret_cast<const QList< ::QScreen*> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0101QScreen(void *, int);}
static void release_QList_0101QScreen(void *ptr, int)
{
    delete reinterpret_cast<QList< ::QScreen*> *>(ptr);
}



extern "C" {static int convertTo_QList_0101QScreen(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0101QScreen(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QScreen*> **sipCppPtr = reinterpret_cast<QList< ::QScreen*> **>(sipCppPtrV);

#line 184 "sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QScreen *> *ql = new QList<QScreen *>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        QScreen *t = reinterpret_cast<QScreen *>(
                sipForceConvertToType(itm, sipType_QScreen, sipTransferObj, 0,
                        0, sipIsErr));
 
        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QScreen' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(t);

        Py_DECREF(itm);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 12956 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0101QScreen(void *, PyObject *);}
static PyObject *convertFrom_QList_0101QScreen(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QScreen*> *sipCpp = reinterpret_cast<QList< ::QScreen*> *>(sipCppV);

#line 153 "sip/QtCore/qpycore_qlist.sip"
    int gc_enabled = sipEnableGC(0);
    PyObject *l = PyList_New(sipCpp->size());

    if (l)
    {
        for (int i = 0; i < sipCpp->size(); ++i)
        {
            QScreen *t = sipCpp->at(i);

            // The explicit (void *) cast allows QScreen to be const.
            PyObject *tobj = sipConvertFromType((void *)t, sipType_QScreen,
                    sipTransferObj);

            if (!tobj)
            {
                Py_DECREF(l);
                l = 0;

                break;
            }

            PyList_SetItem(l, i, tobj);
        }
    }

    sipEnableGC(gc_enabled);

    return l;
#line 12994 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtGui_QList_0101QScreen = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_21675,     /* QList<QScreen*> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0101QScreen,
    array_QList_0101QScreen,
    copy_QList_0101QScreen,
    release_QList_0101QScreen,
    convertTo_QList_0101QScreen,
    convertFrom_QList_0101QScreen
};

#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 13026 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 717 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 724 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 13032 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static void assign_QList_0100QTouchEvent_TouchPoint(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0100QTouchEvent_TouchPoint(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QTouchEvent::TouchPoint> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QTouchEvent::TouchPoint> *>(sipSrc);
}


extern "C" {static void *array_QList_0100QTouchEvent_TouchPoint(SIP_SSIZE_T);}
static void *array_QList_0100QTouchEvent_TouchPoint(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QTouchEvent::TouchPoint>[sipNrElem];
}


extern "C" {static void *copy_QList_0100QTouchEvent_TouchPoint(const void *, SIP_SSIZE_T);}
static void *copy_QList_0100QTouchEvent_TouchPoint(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QTouchEvent::TouchPoint>(reinterpret_cast<const QList< ::QTouchEvent::TouchPoint> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0100QTouchEvent_TouchPoint(void *, int);}
static void release_QList_0100QTouchEvent_TouchPoint(void *ptr, int)
{
    delete reinterpret_cast<QList< ::QTouchEvent::TouchPoint> *>(ptr);
}



extern "C" {static int convertTo_QList_0100QTouchEvent_TouchPoint(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0100QTouchEvent_TouchPoint(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QTouchEvent::TouchPoint> **sipCppPtr = reinterpret_cast<QList< ::QTouchEvent::TouchPoint> **>(sipCppPtrV);

#line 68 "sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QTouchEvent::TouchPoint> *ql = new QList<QTouchEvent::TouchPoint>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QTouchEvent::TouchPoint *t = reinterpret_cast<QTouchEvent::TouchPoint *>(
                sipForceConvertToType(itm, sipType_QTouchEvent_TouchPoint, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QTouchEvent::TouchPoint' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(*t);

        sipReleaseType(t, sipType_QTouchEvent_TouchPoint, state);
        Py_DECREF(itm);
    }
 
    Py_DECREF(iter);

    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 13142 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0100QTouchEvent_TouchPoint(void *, PyObject *);}
static PyObject *convertFrom_QList_0100QTouchEvent_TouchPoint(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QTouchEvent::TouchPoint> *sipCpp = reinterpret_cast<QList< ::QTouchEvent::TouchPoint> *>(sipCppV);

#line 42 "sip/QtCore/qpycore_qlist.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QTouchEvent::TouchPoint *t = new QTouchEvent::TouchPoint(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QTouchEvent_TouchPoint,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 13175 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtGui_QList_0100QTouchEvent_TouchPoint = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_2179,     /* QList<QTouchEvent::TouchPoint> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0100QTouchEvent_TouchPoint,
    array_QList_0100QTouchEvent_TouchPoint,
    copy_QList_0100QTouchEvent_TouchPoint,
    release_QList_0100QTouchEvent_TouchPoint,
    convertTo_QList_0100QTouchEvent_TouchPoint,
    convertFrom_QList_0100QTouchEvent_TouchPoint
};

#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 13207 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 500 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 516 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 13213 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static void assign_QList_0100QInputMethodEvent_Attribute(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0100QInputMethodEvent_Attribute(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QInputMethodEvent::Attribute> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QInputMethodEvent::Attribute> *>(sipSrc);
}


extern "C" {static void *array_QList_0100QInputMethodEvent_Attribute(SIP_SSIZE_T);}
static void *array_QList_0100QInputMethodEvent_Attribute(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QInputMethodEvent::Attribute>[sipNrElem];
}


extern "C" {static void *copy_QList_0100QInputMethodEvent_Attribute(const void *, SIP_SSIZE_T);}
static void *copy_QList_0100QInputMethodEvent_Attribute(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QInputMethodEvent::Attribute>(reinterpret_cast<const QList< ::QInputMethodEvent::Attribute> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0100QInputMethodEvent_Attribute(void *, int);}
static void release_QList_0100QInputMethodEvent_Attribute(void *ptr, int)
{
    delete reinterpret_cast<QList< ::QInputMethodEvent::Attribute> *>(ptr);
}



extern "C" {static int convertTo_QList_0100QInputMethodEvent_Attribute(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0100QInputMethodEvent_Attribute(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QInputMethodEvent::Attribute> **sipCppPtr = reinterpret_cast<QList< ::QInputMethodEvent::Attribute> **>(sipCppPtrV);

#line 68 "sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QInputMethodEvent::Attribute> *ql = new QList<QInputMethodEvent::Attribute>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QInputMethodEvent::Attribute *t = reinterpret_cast<QInputMethodEvent::Attribute *>(
                sipForceConvertToType(itm, sipType_QInputMethodEvent_Attribute, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QInputMethodEvent::Attribute' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(*t);

        sipReleaseType(t, sipType_QInputMethodEvent_Attribute, state);
        Py_DECREF(itm);
    }
 
    Py_DECREF(iter);

    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 13323 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0100QInputMethodEvent_Attribute(void *, PyObject *);}
static PyObject *convertFrom_QList_0100QInputMethodEvent_Attribute(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QInputMethodEvent::Attribute> *sipCpp = reinterpret_cast<QList< ::QInputMethodEvent::Attribute> *>(sipCppV);

#line 42 "sip/QtCore/qpycore_qlist.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QInputMethodEvent::Attribute *t = new QInputMethodEvent::Attribute(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QInputMethodEvent_Attribute,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 13356 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtGui_QList_0100QInputMethodEvent_Attribute = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_436,     /* QList<QInputMethodEvent::Attribute> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0100QInputMethodEvent_Attribute,
    array_QList_0100QInputMethodEvent_Attribute,
    copy_QList_0100QInputMethodEvent_Attribute,
    release_QList_0100QInputMethodEvent_Attribute,
    convertTo_QList_0100QInputMethodEvent_Attribute,
    convertFrom_QList_0100QInputMethodEvent_Attribute
};

#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 13388 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 13392 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static void assign_QList_0100QSize(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0100QSize(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QSize> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QSize> *>(sipSrc);
}


extern "C" {static void *array_QList_0100QSize(SIP_SSIZE_T);}
static void *array_QList_0100QSize(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QSize>[sipNrElem];
}


extern "C" {static void *copy_QList_0100QSize(const void *, SIP_SSIZE_T);}
static void *copy_QList_0100QSize(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QSize>(reinterpret_cast<const QList< ::QSize> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0100QSize(void *, int);}
static void release_QList_0100QSize(void *ptr, int)
{
    delete reinterpret_cast<QList< ::QSize> *>(ptr);
}



extern "C" {static int convertTo_QList_0100QSize(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0100QSize(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QSize> **sipCppPtr = reinterpret_cast<QList< ::QSize> **>(sipCppPtrV);

#line 68 "sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QSize> *ql = new QList<QSize>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QSize *t = reinterpret_cast<QSize *>(
                sipForceConvertToType(itm, sipType_QSize, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QSize' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(*t);

        sipReleaseType(t, sipType_QSize, state);
        Py_DECREF(itm);
    }
 
    Py_DECREF(iter);

    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 13502 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0100QSize(void *, PyObject *);}
static PyObject *convertFrom_QList_0100QSize(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QSize> *sipCpp = reinterpret_cast<QList< ::QSize> *>(sipCppV);

#line 42 "sip/QtCore/qpycore_qlist.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QSize *t = new QSize(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QSize,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 13535 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtGui_QList_0100QSize = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_31401,     /* QList<QSize> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0100QSize,
    array_QList_0100QSize,
    copy_QList_0100QSize,
    release_QList_0100QSize,
    convertTo_QList_0100QSize,
    convertFrom_QList_0100QSize
};

#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 13567 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 13573 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static void assign_QVector_0100QAbstractTextDocumentLayout_Selection(void *, SIP_SSIZE_T, void *);}
static void assign_QVector_0100QAbstractTextDocumentLayout_Selection(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QVector< ::QAbstractTextDocumentLayout::Selection> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QVector< ::QAbstractTextDocumentLayout::Selection> *>(sipSrc);
}


extern "C" {static void *array_QVector_0100QAbstractTextDocumentLayout_Selection(SIP_SSIZE_T);}
static void *array_QVector_0100QAbstractTextDocumentLayout_Selection(SIP_SSIZE_T sipNrElem)
{
    return new QVector< ::QAbstractTextDocumentLayout::Selection>[sipNrElem];
}


extern "C" {static void *copy_QVector_0100QAbstractTextDocumentLayout_Selection(const void *, SIP_SSIZE_T);}
static void *copy_QVector_0100QAbstractTextDocumentLayout_Selection(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QVector< ::QAbstractTextDocumentLayout::Selection>(reinterpret_cast<const QVector< ::QAbstractTextDocumentLayout::Selection> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QVector_0100QAbstractTextDocumentLayout_Selection(void *, int);}
static void release_QVector_0100QAbstractTextDocumentLayout_Selection(void *ptr, int)
{
    delete reinterpret_cast<QVector< ::QAbstractTextDocumentLayout::Selection> *>(ptr);
}



extern "C" {static int convertTo_QVector_0100QAbstractTextDocumentLayout_Selection(PyObject *, void **, int *, PyObject *);}
static int convertTo_QVector_0100QAbstractTextDocumentLayout_Selection(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QVector< ::QAbstractTextDocumentLayout::Selection> **sipCppPtr = reinterpret_cast<QVector< ::QAbstractTextDocumentLayout::Selection> **>(sipCppPtrV);

#line 58 "sip/QtCore/qpycore_qvector.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QVector<QAbstractTextDocumentLayout::Selection> *qv = new QVector<QAbstractTextDocumentLayout::Selection>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete qv;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QAbstractTextDocumentLayout::Selection *t = reinterpret_cast<QAbstractTextDocumentLayout::Selection *>(
                sipForceConvertToType(itm, sipType_QAbstractTextDocumentLayout_Selection, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QAbstractTextDocumentLayout::Selection' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete qv;
            Py_DECREF(iter);

            return 0;
        }

        qv->append(*t);

        sipReleaseType(t, sipType_QAbstractTextDocumentLayout_Selection, state);
        Py_DECREF(itm);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = qv;
 
    return sipGetState(sipTransferObj);
#line 13683 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


extern "C" {static PyObject *convertFrom_QVector_0100QAbstractTextDocumentLayout_Selection(void *, PyObject *);}
static PyObject *convertFrom_QVector_0100QAbstractTextDocumentLayout_Selection(void *sipCppV, PyObject *sipTransferObj)
{
   QVector< ::QAbstractTextDocumentLayout::Selection> *sipCpp = reinterpret_cast<QVector< ::QAbstractTextDocumentLayout::Selection> *>(sipCppV);

#line 32 "sip/QtCore/qpycore_qvector.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QAbstractTextDocumentLayout::Selection *t = new QAbstractTextDocumentLayout::Selection(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QAbstractTextDocumentLayout_Selection,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 13716 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtGui_QVector_0100QAbstractTextDocumentLayout_Selection = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_155,     /* QVector<QAbstractTextDocumentLayout::Selection> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QVector_0100QAbstractTextDocumentLayout_Selection,
    array_QVector_0100QAbstractTextDocumentLayout_Selection,
    copy_QVector_0100QAbstractTextDocumentLayout_Selection,
    release_QVector_0100QAbstractTextDocumentLayout_Selection,
    convertTo_QVector_0100QAbstractTextDocumentLayout_Selection,
    convertFrom_QVector_0100QAbstractTextDocumentLayout_Selection
};

#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 13748 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 13752 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static void assign_QList_0101QWindow(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0101QWindow(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QWindow*> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QWindow*> *>(sipSrc);
}


extern "C" {static void *array_QList_0101QWindow(SIP_SSIZE_T);}
static void *array_QList_0101QWindow(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QWindow*>[sipNrElem];
}


extern "C" {static void *copy_QList_0101QWindow(const void *, SIP_SSIZE_T);}
static void *copy_QList_0101QWindow(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QWindow*>(reinterpret_cast<const QList< ::QWindow*> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0101QWindow(void *, int);}
static void release_QList_0101QWindow(void *ptr, int)
{
    delete reinterpret_cast<QList< ::QWindow*> *>(ptr);
}



extern "C" {static int convertTo_QList_0101QWindow(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0101QWindow(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QWindow*> **sipCppPtr = reinterpret_cast<QList< ::QWindow*> **>(sipCppPtrV);

#line 184 "sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QWindow *> *ql = new QList<QWindow *>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        QWindow *t = reinterpret_cast<QWindow *>(
                sipForceConvertToType(itm, sipType_QWindow, sipTransferObj, 0,
                        0, sipIsErr));
 
        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QWindow' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(t);

        Py_DECREF(itm);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 13860 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0101QWindow(void *, PyObject *);}
static PyObject *convertFrom_QList_0101QWindow(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QWindow*> *sipCpp = reinterpret_cast<QList< ::QWindow*> *>(sipCppV);

#line 153 "sip/QtCore/qpycore_qlist.sip"
    int gc_enabled = sipEnableGC(0);
    PyObject *l = PyList_New(sipCpp->size());

    if (l)
    {
        for (int i = 0; i < sipCpp->size(); ++i)
        {
            QWindow *t = sipCpp->at(i);

            // The explicit (void *) cast allows QWindow to be const.
            PyObject *tobj = sipConvertFromType((void *)t, sipType_QWindow,
                    sipTransferObj);

            if (!tobj)
            {
                Py_DECREF(l);
                l = 0;

                break;
            }

            PyList_SetItem(l, i, tobj);
        }
    }

    sipEnableGC(gc_enabled);

    return l;
#line 13898 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtGui_QList_0101QWindow = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_21691,     /* QList<QWindow*> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0101QWindow,
    array_QList_0101QWindow,
    copy_QList_0101QWindow,
    release_QList_0101QWindow,
    convertTo_QList_0101QWindow,
    convertFrom_QList_0101QWindow
};

#line 139 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#include <qpair.h>
#line 13931 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 13935 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static void assign_QVector_0600QPair_2400_0100QColor(void *, SIP_SSIZE_T, void *);}
static void assign_QVector_0600QPair_2400_0100QColor(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QVector<QPair< ::qreal,QColor> > *>(sipDst)[sipDstIdx] = *reinterpret_cast<QVector<QPair< ::qreal,QColor> > *>(sipSrc);
}


extern "C" {static void *array_QVector_0600QPair_2400_0100QColor(SIP_SSIZE_T);}
static void *array_QVector_0600QPair_2400_0100QColor(SIP_SSIZE_T sipNrElem)
{
    return new QVector<QPair< ::qreal,QColor> >[sipNrElem];
}


extern "C" {static void *copy_QVector_0600QPair_2400_0100QColor(const void *, SIP_SSIZE_T);}
static void *copy_QVector_0600QPair_2400_0100QColor(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QVector<QPair< ::qreal,QColor> >(reinterpret_cast<const QVector<QPair< ::qreal,QColor> > *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QVector_0600QPair_2400_0100QColor(void *, int);}
static void release_QVector_0600QPair_2400_0100QColor(void *ptr, int)
{
    delete reinterpret_cast<QVector<QPair< ::qreal,QColor> > *>(ptr);
}



extern "C" {static int convertTo_QVector_0600QPair_2400_0100QColor(PyObject *, void **, int *, PyObject *);}
static int convertTo_QVector_0600QPair_2400_0100QColor(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QVector<QPair< ::qreal,QColor> > **sipCppPtr = reinterpret_cast<QVector<QPair< ::qreal,QColor> > **>(sipCppPtrV);

#line 171 "sip/QtCore/qpycore_qvector.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QVector<QPair<qreal, QColor> > *qv = new QVector<QPair<qreal, QColor> >;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *seq = PyIter_Next(iter);

        if (!seq)
        {
            if (PyErr_Occurred())
            {
                delete qv;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        Py_ssize_t sub_len;

        if (PySequence_Check(seq)
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(seq)
#endif
                && !PyUnicode_Check(seq))
            sub_len = PySequence_Size(seq);
        else
            sub_len = -1;

        if (sub_len != 2)
        {
            if (sub_len < 0)
                PyErr_Format(PyExc_TypeError,
                        "index %zd has type '%s' but a 2 element non-string sequence is expected",
                        i, sipPyTypeName(Py_TYPE(seq)));
            else
                PyErr_Format(PyExc_TypeError,
                        "index %zd is a sequence of %zd sub-elements but 2 sub-elements are expected",
                        i, sub_len);

            Py_DECREF(seq);
            delete qv;
            Py_DECREF(iter);
            *sipIsErr = 1;

            return 0;
        }

        PyObject *itm1 = PySequence_GetItem(seq, 0);

        if (!itm1)
        {
            Py_DECREF(seq);
            delete qv;
            Py_DECREF(iter);
            *sipIsErr = 1;

            return 0;
        }

        PyErr_Clear();
        qreal s1 = PyFloat_AsDouble(itm1);

        if (PyErr_Occurred())
        {
            PyErr_Format(PyExc_TypeError,
                    "the first sub-element of index %zd has type '%s' but 'float' is expected",
                    i, sipPyTypeName(Py_TYPE(itm1)));

            Py_DECREF(itm1);
            Py_DECREF(seq);
            delete qv;
            Py_DECREF(iter);
            *sipIsErr = 1;

            return 0;
        }

        PyObject *itm2 = PySequence_GetItem(seq, 1);

        if (!itm2)
        {
            Py_DECREF(itm1);
            Py_DECREF(seq);
            delete qv;
            Py_DECREF(iter);
            *sipIsErr = 1;

            return 0;
        }

        int state2;
        QColor *s2 = reinterpret_cast<QColor *>(
                sipForceConvertToType(itm2, sipType_QColor, sipTransferObj,
                        SIP_NOT_NONE, &state2, sipIsErr));
 
        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "the second sub-element of index %zd has type '%s' but 'QColor' is expected",
                    i, sipPyTypeName(Py_TYPE(itm2)));

            Py_DECREF(itm2);
            Py_DECREF(itm1);
            Py_DECREF(seq);
            delete qv;
            Py_DECREF(iter);

            return 0;
        }

        qv->append(QPair<qreal, QColor>(s1, *s2));

        sipReleaseType(s2, sipType_QColor, state2);
        Py_DECREF(itm2);
        Py_DECREF(itm1);
        Py_DECREF(seq);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = qv;
 
    return sipGetState(sipTransferObj);
#line 14122 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


extern "C" {static PyObject *convertFrom_QVector_0600QPair_2400_0100QColor(void *, PyObject *);}
static PyObject *convertFrom_QVector_0600QPair_2400_0100QColor(void *sipCppV, PyObject *sipTransferObj)
{
   QVector<QPair< ::qreal,QColor> > *sipCpp = reinterpret_cast<QVector<QPair< ::qreal,QColor> > *>(sipCppV);

#line 144 "sip/QtCore/qpycore_qvector.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        const QPair<qreal, QColor> &p = sipCpp->at(i);
        QColor *s2 = new QColor(p.second);
        PyObject *pobj = sipBuildResult(NULL, "(dN)", (double)p.first, s2,
                sipType_QColor, sipTransferObj);

        if (!pobj)
        {
            delete s2;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, pobj);
    }

    return l;
#line 14156 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtGui_QVector_0600QPair_2400_0100QColor = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_2675,     /* QVector<QPair<qreal,QColor> > */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QVector_0600QPair_2400_0100QColor,
    array_QVector_0600QPair_2400_0100QColor,
    copy_QVector_0600QPair_2400_0100QColor,
    release_QVector_0600QPair_2400_0100QColor,
    convertTo_QVector_0600QPair_2400_0100QColor,
    convertFrom_QVector_0600QPair_2400_0100QColor
};

#line 241 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpygui_qvector.sip"
#include <qvector.h>
#line 14188 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"



extern "C" {static void assign_QVector_2400(void *, SIP_SSIZE_T, void *);}
static void assign_QVector_2400(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QVector< ::qreal> *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QVector< ::qreal> *>(sipSrc);
}


extern "C" {static void *array_QVector_2400(SIP_SSIZE_T);}
static void *array_QVector_2400(SIP_SSIZE_T sipNrElem)
{
    return new  ::QVector< ::qreal>[sipNrElem];
}


extern "C" {static void *copy_QVector_2400(const void *, SIP_SSIZE_T);}
static void *copy_QVector_2400(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QVector< ::qreal>(reinterpret_cast<const  ::QVector< ::qreal> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QVector_2400(void *, int);}
static void release_QVector_2400(void *ptr, int)
{
    delete reinterpret_cast< ::QVector< ::qreal> *>(ptr);
}



extern "C" {static int convertTo_QVector_2400(PyObject *, void **, int *, PyObject *);}
static int convertTo_QVector_2400(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QVector< ::qreal> **sipCppPtr = reinterpret_cast< ::QVector< ::qreal> **>(sipCppPtrV);

#line 268 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpygui_qvector.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QVector<qreal> *qv = new QVector<qreal>;

    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete qv;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        PyErr_Clear();
        double val = PyFloat_AsDouble(itm);

        if (PyErr_Occurred())
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'int' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete qv;
            Py_DECREF(iter);
            *sipIsErr = 1;

            return 0;
        }

        qv->append(val);

        Py_DECREF(itm);
    }

    Py_DECREF(iter);

    *sipCppPtr = qv;

    return sipGetState(sipTransferObj);
#line 14297 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


extern "C" {static PyObject *convertFrom_QVector_2400(void *, PyObject *);}
static PyObject *convertFrom_QVector_2400(void *sipCppV, PyObject *)
{
    ::QVector< ::qreal> *sipCpp = reinterpret_cast< ::QVector< ::qreal> *>(sipCppV);

#line 245 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpygui_qvector.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        PyObject *pobj = PyFloat_FromDouble(sipCpp->value(i));

        if (!pobj)
        {
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, pobj);
    }

    return l;
#line 14327 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtGui_QVector_2400 = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_24776,     /* QVector<qreal> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QVector_2400,
    array_QVector_2400,
    copy_QVector_2400,
    release_QVector_2400,
    convertTo_QVector_2400,
    convertFrom_QVector_2400
};

#line 134 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpygui_qvector.sip"
#include <qvector.h>
#line 14359 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"



extern "C" {static void assign_QVector_2200(void *, SIP_SSIZE_T, void *);}
static void assign_QVector_2200(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QVector<float> *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QVector<float> *>(sipSrc);
}


extern "C" {static void *array_QVector_2200(SIP_SSIZE_T);}
static void *array_QVector_2200(SIP_SSIZE_T sipNrElem)
{
    return new  ::QVector<float>[sipNrElem];
}


extern "C" {static void *copy_QVector_2200(const void *, SIP_SSIZE_T);}
static void *copy_QVector_2200(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QVector<float>(reinterpret_cast<const  ::QVector<float> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QVector_2200(void *, int);}
static void release_QVector_2200(void *ptr, int)
{
    delete reinterpret_cast< ::QVector<float> *>(ptr);
}



extern "C" {static int convertTo_QVector_2200(PyObject *, void **, int *, PyObject *);}
static int convertTo_QVector_2200(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QVector<float> **sipCppPtr = reinterpret_cast< ::QVector<float> **>(sipCppPtrV);

#line 161 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpygui_qvector.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QVector<float> *qv = new QVector<float>;

    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete qv;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        PyErr_Clear();
        double val = PyFloat_AsDouble(itm);

        if (PyErr_Occurred())
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'int' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete qv;
            Py_DECREF(iter);
            *sipIsErr = 1;

            return 0;
        }

        qv->append(val);

        Py_DECREF(itm);
    }

    Py_DECREF(iter);

    *sipCppPtr = qv;

    return sipGetState(sipTransferObj);
#line 14468 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


extern "C" {static PyObject *convertFrom_QVector_2200(void *, PyObject *);}
static PyObject *convertFrom_QVector_2200(void *sipCppV, PyObject *)
{
    ::QVector<float> *sipCpp = reinterpret_cast< ::QVector<float> *>(sipCppV);

#line 138 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpygui_qvector.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        PyObject *pobj = PyFloat_FromDouble(sipCpp->value(i));

        if (!pobj)
        {
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, pobj);
    }

    return l;
#line 14498 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtGui_QVector_2200 = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_24791,     /* QVector<float> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QVector_2200,
    array_QVector_2200,
    copy_QVector_2200,
    release_QVector_2200,
    convertTo_QVector_2200,
    convertFrom_QVector_2200
};

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpygui_qvector.sip"
#include <qvector.h>
#line 14530 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"



extern "C" {static void assign_QVector_1900(void *, SIP_SSIZE_T, void *);}
static void assign_QVector_1900(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QVector<uint> *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QVector<uint> *>(sipSrc);
}


extern "C" {static void *array_QVector_1900(SIP_SSIZE_T);}
static void *array_QVector_1900(SIP_SSIZE_T sipNrElem)
{
    return new  ::QVector<uint>[sipNrElem];
}


extern "C" {static void *copy_QVector_1900(const void *, SIP_SSIZE_T);}
static void *copy_QVector_1900(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QVector<uint>(reinterpret_cast<const  ::QVector<uint> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QVector_1900(void *, int);}
static void release_QVector_1900(void *ptr, int)
{
    delete reinterpret_cast< ::QVector<uint> *>(ptr);
}



extern "C" {static int convertTo_QVector_1900(PyObject *, void **, int *, PyObject *);}
static int convertTo_QVector_1900(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QVector<uint> **sipCppPtr = reinterpret_cast< ::QVector<uint> **>(sipCppPtrV);

#line 56 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpygui_qvector.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QVector<unsigned> *qv = new QVector<unsigned>;

    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete qv;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        PyErr_Clear();
        unsigned long val = PyLong_AsUnsignedLongMask(itm);

        if (PyErr_Occurred())
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'int' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete qv;
            Py_DECREF(iter);
            *sipIsErr = 1;

            return 0;
        }

        qv->append(val);

        Py_DECREF(itm);
    }

    Py_DECREF(iter);

    *sipCppPtr = qv;

    return sipGetState(sipTransferObj);
#line 14639 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


extern "C" {static PyObject *convertFrom_QVector_1900(void *, PyObject *);}
static PyObject *convertFrom_QVector_1900(void *sipCppV, PyObject *)
{
    ::QVector<uint> *sipCpp = reinterpret_cast< ::QVector<uint> *>(sipCppV);

#line 31 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpygui_qvector.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        // Convert to a Python long to make sure it doesn't get interpreted as
        // a signed value.
        PyObject *pobj = PyLong_FromUnsignedLong(sipCpp->value(i));

        if (!pobj)
        {
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, pobj);
    }

    return l;
#line 14671 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtGui_QVector_1900 = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_27761,     /* QVector<uint> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QVector_1900,
    array_QVector_1900,
    copy_QVector_1900,
    release_QVector_1900,
    convertTo_QVector_1900,
    convertFrom_QVector_1900
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpygui_qlist.sip"
#include <qfontdatabase.h>
#line 14703 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qfontdatabase.sip"
#include <qfontdatabase.h>
#line 14707 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static void assign_QList_0100QFontDatabase_WritingSystem(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0100QFontDatabase_WritingSystem(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QList< ::QFontDatabase::WritingSystem> *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QList< ::QFontDatabase::WritingSystem> *>(sipSrc);
}


extern "C" {static void *array_QList_0100QFontDatabase_WritingSystem(SIP_SSIZE_T);}
static void *array_QList_0100QFontDatabase_WritingSystem(SIP_SSIZE_T sipNrElem)
{
    return new  ::QList< ::QFontDatabase::WritingSystem>[sipNrElem];
}


extern "C" {static void *copy_QList_0100QFontDatabase_WritingSystem(const void *, SIP_SSIZE_T);}
static void *copy_QList_0100QFontDatabase_WritingSystem(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QList< ::QFontDatabase::WritingSystem>(reinterpret_cast<const  ::QList< ::QFontDatabase::WritingSystem> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0100QFontDatabase_WritingSystem(void *, int);}
static void release_QList_0100QFontDatabase_WritingSystem(void *ptr, int)
{
    delete reinterpret_cast< ::QList< ::QFontDatabase::WritingSystem> *>(ptr);
}



extern "C" {static int convertTo_QList_0100QFontDatabase_WritingSystem(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0100QFontDatabase_WritingSystem(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QList< ::QFontDatabase::WritingSystem> **sipCppPtr = reinterpret_cast< ::QList< ::QFontDatabase::WritingSystem> **>(sipCppPtrV);

#line 56 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpygui_qlist.sip"
    if (!sipIsErr)
        return (PySequence_Check(sipPy)
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));

    Py_ssize_t len = PySequence_Size(sipPy);

    if (len < 0)
        return 0;

    QList<QFontDatabase::WritingSystem> *ql = new QList<QFontDatabase::WritingSystem>;

    for (Py_ssize_t i = 0; i < len; ++i)
    {
        PyObject *itm = PySequence_GetItem(sipPy, i);

        if (!itm)
        {
            delete ql;
            *sipIsErr = 1;

            return 0;
        }

        int v = sipConvertToEnum(itm, sipType_QFontDatabase_WritingSystem);

        if (PyErr_Occurred())
        {
            PyErr_Format(PyExc_TypeError,
                    "element %zd has type '%s' but 'QFontDatabase.WritingSystem' is expected",
                    i, sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            *sipIsErr = 1;

            return 0;
        }

        ql->append(static_cast<QFontDatabase::WritingSystem>(v));

        Py_DECREF(itm);
    }

    *sipCppPtr = ql;

    return sipGetState(sipTransferObj);
#line 14795 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0100QFontDatabase_WritingSystem(void *, PyObject *);}
static PyObject *convertFrom_QList_0100QFontDatabase_WritingSystem(void *sipCppV, PyObject *)
{
    ::QList< ::QFontDatabase::WritingSystem> *sipCpp = reinterpret_cast< ::QList< ::QFontDatabase::WritingSystem> *>(sipCppV);

#line 32 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpygui_qlist.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        PyObject *eobj = sipConvertFromEnum(sipCpp->at(i),
                sipType_QFontDatabase_WritingSystem);

        if (!eobj)
        {
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, eobj);
    }

    return l;
#line 14826 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtGui_QList_0100QFontDatabase_WritingSystem = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_472,     /* QList<QFontDatabase::WritingSystem> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0100QFontDatabase_WritingSystem,
    array_QList_0100QFontDatabase_WritingSystem,
    copy_QList_0100QFontDatabase_WritingSystem,
    release_QList_0100QFontDatabase_WritingSystem,
    convertTo_QList_0100QFontDatabase_WritingSystem,
    convertFrom_QList_0100QFontDatabase_WritingSystem
};

#line 131 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpygui_qpair.sip"
#include <qpair.h>
#line 14858 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"



extern "C" {static void assign_QPair_2200_2200(void *, SIP_SSIZE_T, void *);}
static void assign_QPair_2200_2200(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QPair<float,float> *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QPair<float,float> *>(sipSrc);
}


extern "C" {static void *array_QPair_2200_2200(SIP_SSIZE_T);}
static void *array_QPair_2200_2200(SIP_SSIZE_T sipNrElem)
{
    return new  ::QPair<float,float>[sipNrElem];
}


extern "C" {static void *copy_QPair_2200_2200(const void *, SIP_SSIZE_T);}
static void *copy_QPair_2200_2200(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QPair<float,float>(reinterpret_cast<const  ::QPair<float,float> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QPair_2200_2200(void *, int);}
static void release_QPair_2200_2200(void *ptr, int)
{
    delete reinterpret_cast< ::QPair<float,float> *>(ptr);
}



extern "C" {static int convertTo_QPair_2200_2200(PyObject *, void **, int *, PyObject *);}
static int convertTo_QPair_2200_2200(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QPair<float,float> **sipCppPtr = reinterpret_cast< ::QPair<float,float> **>(sipCppPtrV);

#line 139 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpygui_qpair.sip"
    if (!sipIsErr)
        return (PySequence_Check(sipPy)
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));

    Py_ssize_t len = PySequence_Size(sipPy);

    if (len != 2)
    {
        // A negative length should only be an internal error so let the
        // original exception stand.
        if (len >= 0)
            PyErr_Format(PyExc_TypeError,
                    "sequence has %zd elements but 2 elements are expected",
                    len);

        *sipIsErr = 1;

        return 0;
    }

    PyObject *firstobj = PySequence_GetItem(sipPy, 0);

    if (!firstobj)
    {
        *sipIsErr = 1;

        return 0;
    }

    PyErr_Clear();
    double first = PyFloat_AsDouble(firstobj);

    if (PyErr_Occurred())
    {
        PyErr_Format(PyExc_TypeError,
                "the first element has type '%s' but 'float' is expected",
                sipPyTypeName(Py_TYPE(firstobj)));

        *sipIsErr = 1;

        return 0;
    }

    PyObject *secondobj = PySequence_GetItem(sipPy, 1);

    if (!secondobj)
    {
        Py_DECREF(firstobj);
        *sipIsErr = 1;

        return 0;
    }

    PyErr_Clear();
    double second = PyFloat_AsDouble(secondobj);

    if (PyErr_Occurred())
    {
        PyErr_Format(PyExc_TypeError,
                "the second element has type '%s' but 'float' is expected",
                sipPyTypeName(Py_TYPE(secondobj)));

        Py_DECREF(secondobj);
        Py_DECREF(firstobj);
        *sipIsErr = 1;

        return 0;
    }

    *sipCppPtr = new QPair<float, float>(first, second);;

    Py_DECREF(secondobj);
    Py_DECREF(firstobj);
 
    return sipGetState(sipTransferObj);
#line 14976 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


extern "C" {static PyObject *convertFrom_QPair_2200_2200(void *, PyObject *);}
static PyObject *convertFrom_QPair_2200_2200(void *sipCppV, PyObject *)
{
    ::QPair<float,float> *sipCpp = reinterpret_cast< ::QPair<float,float> *>(sipCppV);

#line 135 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpygui_qpair.sip"
    return Py_BuildValue("(ff)", sipCpp->first, sipCpp->second);
#line 14987 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtGui_QPair_2200_2200 = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_14270,     /* QPair<float,float> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QPair_2200_2200,
    array_QPair_2200_2200,
    copy_QPair_2200_2200,
    release_QPair_2200_2200,
    convertTo_QPair_2200_2200,
    convertFrom_QPair_2200_2200
};

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpygui_qpair.sip"
#include <QOpenGLTexture>
#line 15019 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qopengltexture.sip"
#include <qopengltexture.h>
#line 15023 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static void assign_QPair_0100QOpenGLTexture_Filter_0100QOpenGLTexture_Filter(void *, SIP_SSIZE_T, void *);}
static void assign_QPair_0100QOpenGLTexture_Filter_0100QOpenGLTexture_Filter(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QPair< ::QOpenGLTexture::Filter, ::QOpenGLTexture::Filter> *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QPair< ::QOpenGLTexture::Filter, ::QOpenGLTexture::Filter> *>(sipSrc);
}


extern "C" {static void *array_QPair_0100QOpenGLTexture_Filter_0100QOpenGLTexture_Filter(SIP_SSIZE_T);}
static void *array_QPair_0100QOpenGLTexture_Filter_0100QOpenGLTexture_Filter(SIP_SSIZE_T sipNrElem)
{
    return new  ::QPair< ::QOpenGLTexture::Filter, ::QOpenGLTexture::Filter>[sipNrElem];
}


extern "C" {static void *copy_QPair_0100QOpenGLTexture_Filter_0100QOpenGLTexture_Filter(const void *, SIP_SSIZE_T);}
static void *copy_QPair_0100QOpenGLTexture_Filter_0100QOpenGLTexture_Filter(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QPair< ::QOpenGLTexture::Filter, ::QOpenGLTexture::Filter>(reinterpret_cast<const  ::QPair< ::QOpenGLTexture::Filter, ::QOpenGLTexture::Filter> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QPair_0100QOpenGLTexture_Filter_0100QOpenGLTexture_Filter(void *, int);}
static void release_QPair_0100QOpenGLTexture_Filter_0100QOpenGLTexture_Filter(void *ptr, int)
{
    delete reinterpret_cast< ::QPair< ::QOpenGLTexture::Filter, ::QOpenGLTexture::Filter> *>(ptr);
}



extern "C" {static int convertTo_QPair_0100QOpenGLTexture_Filter_0100QOpenGLTexture_Filter(PyObject *, void **, int *, PyObject *);}
static int convertTo_QPair_0100QOpenGLTexture_Filter_0100QOpenGLTexture_Filter(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QPair< ::QOpenGLTexture::Filter, ::QOpenGLTexture::Filter> **sipCppPtr = reinterpret_cast< ::QPair< ::QOpenGLTexture::Filter, ::QOpenGLTexture::Filter> **>(sipCppPtrV);

#line 40 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpygui_qpair.sip"
    if (!sipIsErr)
        return (PySequence_Check(sipPy)
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));

    Py_ssize_t len = PySequence_Size(sipPy);

    if (len != 2)
    {
        // A negative length should only be an internal error so let the
        // original exception stand.
        if (len >= 0)
            PyErr_Format(PyExc_TypeError,
                    "sequence has %zd elements but 2 elements are expected",
                    len);

        *sipIsErr = 1;

        return 0;
    }

    PyObject *firstobj = PySequence_GetItem(sipPy, 0);

    if (!firstobj)
    {
        *sipIsErr = 1;

        return 0;
    }

    int firstv = sipConvertToEnum(firstobj, sipType_QOpenGLTexture_Filter);

    if (PyErr_Occurred())
    {
        PyErr_Format(PyExc_TypeError,
                "the first element has type '%s' but 'QOpenGLTexture.Filter' is expected",
                sipPyTypeName(Py_TYPE(firstobj)));

        *sipIsErr = 1;

        return 0;
    }

    PyObject *secondobj = PySequence_GetItem(sipPy, 1);

    if (!secondobj)
    {
        Py_DECREF(firstobj);
        *sipIsErr = 1;

        return 0;
    }

    int secondv = sipConvertToEnum(secondobj, sipType_QOpenGLTexture_Filter);

    if (PyErr_Occurred())
    {
        PyErr_Format(PyExc_TypeError,
                "the second element has type '%s' but 'QOpenGLTexture.Filter' is expected",
                sipPyTypeName(Py_TYPE(secondobj)));

        Py_DECREF(secondobj);
        Py_DECREF(firstobj);
        *sipIsErr = 1;

        return 0;
    }

    *sipCppPtr = new QPair<QOpenGLTexture::Filter, QOpenGLTexture::Filter>(
            static_cast<QOpenGLTexture::Filter>(firstv),
            static_cast<QOpenGLTexture::Filter>(secondv));

    Py_DECREF(secondobj);
    Py_DECREF(firstobj);
 
    return sipGetState(sipTransferObj);
#line 15140 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


extern "C" {static PyObject *convertFrom_QPair_0100QOpenGLTexture_Filter_0100QOpenGLTexture_Filter(void *, PyObject *);}
static PyObject *convertFrom_QPair_0100QOpenGLTexture_Filter_0100QOpenGLTexture_Filter(void *sipCppV, PyObject *)
{
    ::QPair< ::QOpenGLTexture::Filter, ::QOpenGLTexture::Filter> *sipCpp = reinterpret_cast< ::QPair< ::QOpenGLTexture::Filter, ::QOpenGLTexture::Filter> *>(sipCppV);

#line 34 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpygui_qpair.sip"
    return sipBuildResult(NULL, "(FF)", sipCpp->first,
            sipType_QOpenGLTexture_Filter, sipCpp->second,
            sipType_QOpenGLTexture_Filter);
#line 15153 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtGui_QPair_0100QOpenGLTexture_Filter_0100QOpenGLTexture_Filter = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_0,     /* QPair<QOpenGLTexture::Filter,QOpenGLTexture::Filter> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QPair_0100QOpenGLTexture_Filter_0100QOpenGLTexture_Filter,
    array_QPair_0100QOpenGLTexture_Filter_0100QOpenGLTexture_Filter,
    copy_QPair_0100QOpenGLTexture_Filter_0100QOpenGLTexture_Filter,
    release_QPair_0100QOpenGLTexture_Filter_0100QOpenGLTexture_Filter,
    convertTo_QPair_0100QOpenGLTexture_Filter_0100QOpenGLTexture_Filter,
    convertFrom_QPair_0100QOpenGLTexture_Filter_0100QOpenGLTexture_Filter
};

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qvector4d.sip"
#include <qvector4d.h>
#line 15185 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 15189 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 15192 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qvector2d.sip"
#include <qvector2d.h>
#line 15195 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qvector3d.sip"
#include <qvector3d.h>
#line 15198 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qmatrix4x4.sip"
#include <qmatrix4x4.h>
#line 15201 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QVector4D_length, "length(self) -> float");

extern "C" {static PyObject *meth_QVector4D_length(PyObject *, PyObject *);}
static PyObject *meth_QVector4D_length(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector4D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector4D, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->length();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector4D, sipName_length, doc_QVector4D_length);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector4D_lengthSquared, "lengthSquared(self) -> float");

extern "C" {static PyObject *meth_QVector4D_lengthSquared(PyObject *, PyObject *);}
static PyObject *meth_QVector4D_lengthSquared(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector4D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector4D, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->lengthSquared();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector4D, sipName_lengthSquared, doc_QVector4D_lengthSquared);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector4D_normalized, "normalized(self) -> QVector4D");

extern "C" {static PyObject *meth_QVector4D_normalized(PyObject *, PyObject *);}
static PyObject *meth_QVector4D_normalized(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector4D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector4D, &sipCpp))
        {
             ::QVector4D*sipRes;

            sipRes = new  ::QVector4D(sipCpp->normalized());

            return sipConvertFromNewType(sipRes,sipType_QVector4D,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector4D, sipName_normalized, doc_QVector4D_normalized);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector4D_normalize, "normalize(self)");

extern "C" {static PyObject *meth_QVector4D_normalize(PyObject *, PyObject *);}
static PyObject *meth_QVector4D_normalize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QVector4D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector4D, &sipCpp))
        {
            sipCpp->normalize();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector4D, sipName_normalize, doc_QVector4D_normalize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector4D_dotProduct, "dotProduct(QVector4D, QVector4D) -> float");

extern "C" {static PyObject *meth_QVector4D_dotProduct(PyObject *, PyObject *);}
static PyObject *meth_QVector4D_dotProduct(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector4D* a0;
        const  ::QVector4D* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9", sipType_QVector4D, &a0, sipType_QVector4D, &a1))
        {
            float sipRes;

            sipRes =  ::QVector4D::dotProduct(*a0,*a1);

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector4D, sipName_dotProduct, doc_QVector4D_dotProduct);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector4D_toVector2D, "toVector2D(self) -> QVector2D");

extern "C" {static PyObject *meth_QVector4D_toVector2D(PyObject *, PyObject *);}
static PyObject *meth_QVector4D_toVector2D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector4D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector4D, &sipCpp))
        {
             ::QVector2D*sipRes;

            sipRes = new  ::QVector2D(sipCpp->toVector2D());

            return sipConvertFromNewType(sipRes,sipType_QVector2D,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector4D, sipName_toVector2D, doc_QVector4D_toVector2D);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector4D_toVector2DAffine, "toVector2DAffine(self) -> QVector2D");

extern "C" {static PyObject *meth_QVector4D_toVector2DAffine(PyObject *, PyObject *);}
static PyObject *meth_QVector4D_toVector2DAffine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector4D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector4D, &sipCpp))
        {
             ::QVector2D*sipRes;

            sipRes = new  ::QVector2D(sipCpp->toVector2DAffine());

            return sipConvertFromNewType(sipRes,sipType_QVector2D,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector4D, sipName_toVector2DAffine, doc_QVector4D_toVector2DAffine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector4D_toVector3D, "toVector3D(self) -> QVector3D");

extern "C" {static PyObject *meth_QVector4D_toVector3D(PyObject *, PyObject *);}
static PyObject *meth_QVector4D_toVector3D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector4D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector4D, &sipCpp))
        {
             ::QVector3D*sipRes;

            sipRes = new  ::QVector3D(sipCpp->toVector3D());

            return sipConvertFromNewType(sipRes,sipType_QVector3D,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector4D, sipName_toVector3D, doc_QVector4D_toVector3D);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector4D_toVector3DAffine, "toVector3DAffine(self) -> QVector3D");

extern "C" {static PyObject *meth_QVector4D_toVector3DAffine(PyObject *, PyObject *);}
static PyObject *meth_QVector4D_toVector3DAffine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector4D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector4D, &sipCpp))
        {
             ::QVector3D*sipRes;

            sipRes = new  ::QVector3D(sipCpp->toVector3DAffine());

            return sipConvertFromNewType(sipRes,sipType_QVector3D,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector4D, sipName_toVector3DAffine, doc_QVector4D_toVector3DAffine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector4D_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QVector4D_isNull(PyObject *, PyObject *);}
static PyObject *meth_QVector4D_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector4D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector4D, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector4D, sipName_isNull, doc_QVector4D_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector4D_x, "x(self) -> float");

extern "C" {static PyObject *meth_QVector4D_x(PyObject *, PyObject *);}
static PyObject *meth_QVector4D_x(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector4D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector4D, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->x();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector4D, sipName_x, doc_QVector4D_x);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector4D_y, "y(self) -> float");

extern "C" {static PyObject *meth_QVector4D_y(PyObject *, PyObject *);}
static PyObject *meth_QVector4D_y(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector4D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector4D, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->y();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector4D, sipName_y, doc_QVector4D_y);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector4D_z, "z(self) -> float");

extern "C" {static PyObject *meth_QVector4D_z(PyObject *, PyObject *);}
static PyObject *meth_QVector4D_z(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector4D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector4D, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->z();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector4D, sipName_z, doc_QVector4D_z);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector4D_w, "w(self) -> float");

extern "C" {static PyObject *meth_QVector4D_w(PyObject *, PyObject *);}
static PyObject *meth_QVector4D_w(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector4D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector4D, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->w();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector4D, sipName_w, doc_QVector4D_w);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector4D_setX, "setX(self, float)");

extern "C" {static PyObject *meth_QVector4D_setX(PyObject *, PyObject *);}
static PyObject *meth_QVector4D_setX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
         ::QVector4D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QVector4D, &sipCpp, &a0))
        {
            sipCpp->setX(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector4D, sipName_setX, doc_QVector4D_setX);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector4D_setY, "setY(self, float)");

extern "C" {static PyObject *meth_QVector4D_setY(PyObject *, PyObject *);}
static PyObject *meth_QVector4D_setY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
         ::QVector4D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QVector4D, &sipCpp, &a0))
        {
            sipCpp->setY(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector4D, sipName_setY, doc_QVector4D_setY);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector4D_setZ, "setZ(self, float)");

extern "C" {static PyObject *meth_QVector4D_setZ(PyObject *, PyObject *);}
static PyObject *meth_QVector4D_setZ(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
         ::QVector4D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QVector4D, &sipCpp, &a0))
        {
            sipCpp->setZ(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector4D, sipName_setZ, doc_QVector4D_setZ);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector4D_setW, "setW(self, float)");

extern "C" {static PyObject *meth_QVector4D_setW(PyObject *, PyObject *);}
static PyObject *meth_QVector4D_setW(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
         ::QVector4D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QVector4D, &sipCpp, &a0))
        {
            sipCpp->setW(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector4D, sipName_setW, doc_QVector4D_setW);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector4D_toPoint, "toPoint(self) -> QPoint");

extern "C" {static PyObject *meth_QVector4D_toPoint(PyObject *, PyObject *);}
static PyObject *meth_QVector4D_toPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector4D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector4D, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->toPoint());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector4D, sipName_toPoint, doc_QVector4D_toPoint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector4D_toPointF, "toPointF(self) -> QPointF");

extern "C" {static PyObject *meth_QVector4D_toPointF(PyObject *, PyObject *);}
static PyObject *meth_QVector4D_toPointF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector4D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector4D, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->toPointF());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector4D, sipName_toPointF, doc_QVector4D_toPointF);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QVector4D___eq__(PyObject *,PyObject *);}
static PyObject *slot_QVector4D___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QVector4D *sipCpp = reinterpret_cast< ::QVector4D *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVector4D));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector4D* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QVector4D, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QVector4D, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QVector4D___ne__(PyObject *,PyObject *);}
static PyObject *slot_QVector4D___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QVector4D *sipCpp = reinterpret_cast< ::QVector4D *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVector4D));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector4D* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QVector4D, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QVector4D, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QVector4D___div__(PyObject *,PyObject *);}
static PyObject *slot_QVector4D___div__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector4D* a0;
        float a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9f", sipType_QVector4D, &a0, &a1))
        {
             ::QVector4D*sipRes;

            sipRes = new  ::QVector4D((*a0 / a1));

            return sipConvertFromNewType(sipRes,sipType_QVector4D,SIP_NULLPTR);
        }
    }

    {
        const  ::QVector4D* a0;
        const  ::QVector4D* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QVector4D, &a0, sipType_QVector4D, &a1))
        {
             ::QVector4D*sipRes;

            sipRes = new  ::QVector4D((*a0 / *a1));

            return sipConvertFromNewType(sipRes,sipType_QVector4D,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, div_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QVector4D___add__(PyObject *,PyObject *);}
static PyObject *slot_QVector4D___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector4D* a0;
        const  ::QVector4D* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QVector4D, &a0, sipType_QVector4D, &a1))
        {
             ::QVector4D*sipRes;

            sipRes = new  ::QVector4D((*a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_QVector4D,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, add_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QVector4D___sub__(PyObject *,PyObject *);}
static PyObject *slot_QVector4D___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector4D* a0;
        const  ::QVector4D* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QVector4D, &a0, sipType_QVector4D, &a1))
        {
             ::QVector4D*sipRes;

            sipRes = new  ::QVector4D((*a0 - *a1));

            return sipConvertFromNewType(sipRes,sipType_QVector4D,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, sub_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QVector4D___mul__(PyObject *,PyObject *);}
static PyObject *slot_QVector4D___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector4D* a0;
        const  ::QMatrix4x4* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QVector4D, &a0, sipType_QMatrix4x4, &a1))
        {
             ::QVector4D*sipRes;

            sipRes = new  ::QVector4D((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QVector4D,SIP_NULLPTR);
        }
    }

    {
        float a0;
        const  ::QVector4D* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "fJ9", &a0, sipType_QVector4D, &a1))
        {
             ::QVector4D*sipRes;

            sipRes = new  ::QVector4D((a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QVector4D,SIP_NULLPTR);
        }
    }

    {
        const  ::QVector4D* a0;
        float a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9f", sipType_QVector4D, &a0, &a1))
        {
             ::QVector4D*sipRes;

            sipRes = new  ::QVector4D((*a0 * a1));

            return sipConvertFromNewType(sipRes,sipType_QVector4D,SIP_NULLPTR);
        }
    }

    {
        const  ::QVector4D* a0;
        const  ::QVector4D* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QVector4D, &a0, sipType_QVector4D, &a1))
        {
             ::QVector4D*sipRes;

            sipRes = new  ::QVector4D((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QVector4D,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, mul_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QVector4D___neg__(PyObject *);}
static PyObject *slot_QVector4D___neg__(PyObject *sipSelf)
{
     ::QVector4D *sipCpp = reinterpret_cast< ::QVector4D *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVector4D));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QVector4D*sipRes;

            sipRes = new  ::QVector4D(-(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QVector4D,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QVector4D___getitem__(PyObject *,PyObject *);}
static PyObject *slot_QVector4D___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QVector4D *sipCpp = reinterpret_cast< ::QVector4D *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVector4D));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            float sipRes;

            sipRes = (*sipCpp)[a0];

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector4D, sipName___getitem__, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QVector4D___idiv__(PyObject *,PyObject *);}
static PyObject *slot_QVector4D___idiv__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QVector4D)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QVector4D *sipCpp = reinterpret_cast< ::QVector4D *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVector4D));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1f", &a0))
        {
            sipCpp-> ::QVector4D::operator/=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        const  ::QVector4D* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QVector4D, &a0))
        {
            sipCpp-> ::QVector4D::operator/=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QVector4D___imul__(PyObject *,PyObject *);}
static PyObject *slot_QVector4D___imul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QVector4D)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QVector4D *sipCpp = reinterpret_cast< ::QVector4D *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVector4D));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1f", &a0))
        {
            sipCpp-> ::QVector4D::operator*=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        const  ::QVector4D* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QVector4D, &a0))
        {
            sipCpp-> ::QVector4D::operator*=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QVector4D___isub__(PyObject *,PyObject *);}
static PyObject *slot_QVector4D___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QVector4D)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QVector4D *sipCpp = reinterpret_cast< ::QVector4D *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVector4D));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector4D* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QVector4D, &a0))
        {
            sipCpp-> ::QVector4D::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QVector4D___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QVector4D___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QVector4D)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QVector4D *sipCpp = reinterpret_cast< ::QVector4D *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVector4D));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector4D* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QVector4D, &a0))
        {
            sipCpp-> ::QVector4D::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QVector4D___repr__(PyObject *);}
static PyObject *slot_QVector4D___repr__(PyObject *sipSelf)
{
     ::QVector4D *sipCpp = reinterpret_cast< ::QVector4D *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVector4D));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 49 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qvector4d.sip"
        PyObject *x = PyFloat_FromDouble(sipCpp->x());
        PyObject *y = PyFloat_FromDouble(sipCpp->y());
        PyObject *z = PyFloat_FromDouble(sipCpp->z());
        PyObject *w = PyFloat_FromDouble(sipCpp->w());
        
        if (x && y && z && w)
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromFormat("PyQt5.QtGui.QVector4D(%R, %R, %R, %R)", x,
                    y, z, w);
        #else
            sipRes = PyString_FromString("PyQt5.QtGui.QVector4D(");
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(x));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(y));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(z));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(w));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
        #endif
        }
        
        Py_XDECREF(x);
        Py_XDECREF(y);
        Py_XDECREF(z);
        Py_XDECREF(w);
#line 16274 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QVector4D(void *, int);}
static void release_QVector4D(void *sipCppV, int)
{
    delete reinterpret_cast< ::QVector4D *>(sipCppV);
}


extern "C" {static PyObject *pickle_QVector4D(void *);}
static PyObject *pickle_QVector4D(void *sipCppV)
{
     ::QVector4D *sipCpp = reinterpret_cast< ::QVector4D *>(sipCppV);
    PyObject *sipRes;

#line 34 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qvector4d.sip"
    sipRes = Py_BuildValue((char *)"dddd", (double)sipCpp->x(),
            (double)sipCpp->y(), (double)sipCpp->z(), (double)sipCpp->w());
#line 16301 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

    return sipRes;
}


extern "C" {static void assign_QVector4D(void *, SIP_SSIZE_T, void *);}
static void assign_QVector4D(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QVector4D *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QVector4D *>(sipSrc);
}


extern "C" {static void *array_QVector4D(SIP_SSIZE_T);}
static void *array_QVector4D(SIP_SSIZE_T sipNrElem)
{
    return new  ::QVector4D[sipNrElem];
}


extern "C" {static void *copy_QVector4D(const void *, SIP_SSIZE_T);}
static void *copy_QVector4D(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QVector4D(reinterpret_cast<const  ::QVector4D *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QVector4D(sipSimpleWrapper *);}
static void dealloc_QVector4D(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QVector4D(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QVector4D(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QVector4D(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QVector4D *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QVector4D();

            return sipCpp;
        }
    }

    {
        float a0;
        float a1;
        float a2;
        float a3;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "ffff", &a0, &a1, &a2, &a3))
        {
            sipCpp = new  ::QVector4D(a0,a1,a2,a3);

            return sipCpp;
        }
    }

    {
        const  ::QPoint* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QPoint, &a0))
        {
            sipCpp = new  ::QVector4D(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QPointF, &a0, &a0State))
        {
            sipCpp = new  ::QVector4D(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QVector2D* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QVector2D, &a0))
        {
            sipCpp = new  ::QVector4D(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QVector2D* a0;
        float a1;
        float a2;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9ff", sipType_QVector2D, &a0, &a1, &a2))
        {
            sipCpp = new  ::QVector4D(*a0,a1,a2);

            return sipCpp;
        }
    }

    {
        const  ::QVector3D* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QVector3D, &a0))
        {
            sipCpp = new  ::QVector4D(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QVector3D* a0;
        float a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9f", sipType_QVector3D, &a0, &a1))
        {
            sipCpp = new  ::QVector4D(*a0,a1);

            return sipCpp;
        }
    }

    {
        const  ::QVector4D* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QVector4D, &a0))
        {
            sipCpp = new  ::QVector4D(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QVector4D[] = {
    {(void *)slot_QVector4D___eq__, eq_slot},
    {(void *)slot_QVector4D___ne__, ne_slot},
    {(void *)slot_QVector4D___div__, div_slot},
    {(void *)slot_QVector4D___add__, add_slot},
    {(void *)slot_QVector4D___sub__, sub_slot},
    {(void *)slot_QVector4D___mul__, mul_slot},
    {(void *)slot_QVector4D___neg__, neg_slot},
    {(void *)slot_QVector4D___getitem__, getitem_slot},
    {(void *)slot_QVector4D___idiv__, idiv_slot},
    {(void *)slot_QVector4D___imul__, imul_slot},
    {(void *)slot_QVector4D___isub__, isub_slot},
    {(void *)slot_QVector4D___iadd__, iadd_slot},
    {(void *)slot_QVector4D___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QVector4D[] = {
    {SIP_MLNAME_CAST(sipName_dotProduct), meth_QVector4D_dotProduct, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector4D_dotProduct)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QVector4D_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector4D_isNull)},
    {SIP_MLNAME_CAST(sipName_length), meth_QVector4D_length, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector4D_length)},
    {SIP_MLNAME_CAST(sipName_lengthSquared), meth_QVector4D_lengthSquared, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector4D_lengthSquared)},
    {SIP_MLNAME_CAST(sipName_normalize), meth_QVector4D_normalize, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector4D_normalize)},
    {SIP_MLNAME_CAST(sipName_normalized), meth_QVector4D_normalized, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector4D_normalized)},
    {SIP_MLNAME_CAST(sipName_setW), meth_QVector4D_setW, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector4D_setW)},
    {SIP_MLNAME_CAST(sipName_setX), meth_QVector4D_setX, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector4D_setX)},
    {SIP_MLNAME_CAST(sipName_setY), meth_QVector4D_setY, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector4D_setY)},
    {SIP_MLNAME_CAST(sipName_setZ), meth_QVector4D_setZ, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector4D_setZ)},
    {SIP_MLNAME_CAST(sipName_toPoint), meth_QVector4D_toPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector4D_toPoint)},
    {SIP_MLNAME_CAST(sipName_toPointF), meth_QVector4D_toPointF, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector4D_toPointF)},
    {SIP_MLNAME_CAST(sipName_toVector2D), meth_QVector4D_toVector2D, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector4D_toVector2D)},
    {SIP_MLNAME_CAST(sipName_toVector2DAffine), meth_QVector4D_toVector2DAffine, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector4D_toVector2DAffine)},
    {SIP_MLNAME_CAST(sipName_toVector3D), meth_QVector4D_toVector3D, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector4D_toVector3D)},
    {SIP_MLNAME_CAST(sipName_toVector3DAffine), meth_QVector4D_toVector3DAffine, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector4D_toVector3DAffine)},
    {SIP_MLNAME_CAST(sipName_w), meth_QVector4D_w, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector4D_w)},
    {SIP_MLNAME_CAST(sipName_x), meth_QVector4D_x, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector4D_x)},
    {SIP_MLNAME_CAST(sipName_y), meth_QVector4D_y, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector4D_y)},
    {SIP_MLNAME_CAST(sipName_z), meth_QVector4D_z, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector4D_z)}
};

PyDoc_STRVAR(doc_QVector4D, "\1QVector4D()\n"
"QVector4D(float, float, float, float)\n"
"QVector4D(QPoint)\n"
"QVector4D(Union[QPointF, QPoint])\n"
"QVector4D(QVector2D)\n"
"QVector4D(QVector2D, float, float)\n"
"QVector4D(QVector3D)\n"
"QVector4D(QVector3D, float)\n"
"QVector4D(QVector4D)");


static pyqt5ClassPluginDef plugin_QVector4D = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QVector4D = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QVector4D,
        {SIP_NULLPTR},
        &plugin_QVector4D
    },
    {
        sipNameNr_QVector4D,
        {0, 0, 1},
        20, methods_QVector4D,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QVector4D,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QVector4D,
    init_type_QVector4D,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QVector4D,
    assign_QVector4D,
    array_QVector4D,
    copy_QVector4D,
    release_QVector4D,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    pickle_QVector4D,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qvector3d.sip"
#include <qvector3d.h>
#line 16573 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 16577 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 16580 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qvector2d.sip"
#include <qvector2d.h>
#line 16583 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qvector4d.sip"
#include <qvector4d.h>
#line 16586 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qmatrix4x4.sip"
#include <qmatrix4x4.h>
#line 16589 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 16592 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QVector3D_length, "length(self) -> float");

extern "C" {static PyObject *meth_QVector3D_length(PyObject *, PyObject *);}
static PyObject *meth_QVector3D_length(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector3D, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->length();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector3D, sipName_length, doc_QVector3D_length);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector3D_lengthSquared, "lengthSquared(self) -> float");

extern "C" {static PyObject *meth_QVector3D_lengthSquared(PyObject *, PyObject *);}
static PyObject *meth_QVector3D_lengthSquared(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector3D, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->lengthSquared();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector3D, sipName_lengthSquared, doc_QVector3D_lengthSquared);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector3D_normalized, "normalized(self) -> QVector3D");

extern "C" {static PyObject *meth_QVector3D_normalized(PyObject *, PyObject *);}
static PyObject *meth_QVector3D_normalized(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector3D, &sipCpp))
        {
             ::QVector3D*sipRes;

            sipRes = new  ::QVector3D(sipCpp->normalized());

            return sipConvertFromNewType(sipRes,sipType_QVector3D,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector3D, sipName_normalized, doc_QVector3D_normalized);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector3D_normalize, "normalize(self)");

extern "C" {static PyObject *meth_QVector3D_normalize(PyObject *, PyObject *);}
static PyObject *meth_QVector3D_normalize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QVector3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector3D, &sipCpp))
        {
            sipCpp->normalize();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector3D, sipName_normalize, doc_QVector3D_normalize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector3D_dotProduct, "dotProduct(QVector3D, QVector3D) -> float");

extern "C" {static PyObject *meth_QVector3D_dotProduct(PyObject *, PyObject *);}
static PyObject *meth_QVector3D_dotProduct(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector3D* a0;
        const  ::QVector3D* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9", sipType_QVector3D, &a0, sipType_QVector3D, &a1))
        {
            float sipRes;

            sipRes =  ::QVector3D::dotProduct(*a0,*a1);

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector3D, sipName_dotProduct, doc_QVector3D_dotProduct);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector3D_crossProduct, "crossProduct(QVector3D, QVector3D) -> QVector3D");

extern "C" {static PyObject *meth_QVector3D_crossProduct(PyObject *, PyObject *);}
static PyObject *meth_QVector3D_crossProduct(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector3D* a0;
        const  ::QVector3D* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9", sipType_QVector3D, &a0, sipType_QVector3D, &a1))
        {
             ::QVector3D*sipRes;

            sipRes = new  ::QVector3D( ::QVector3D::crossProduct(*a0,*a1));

            return sipConvertFromNewType(sipRes,sipType_QVector3D,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector3D, sipName_crossProduct, doc_QVector3D_crossProduct);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector3D_normal, "normal(QVector3D, QVector3D) -> QVector3D\n"
"normal(QVector3D, QVector3D, QVector3D) -> QVector3D");

extern "C" {static PyObject *meth_QVector3D_normal(PyObject *, PyObject *);}
static PyObject *meth_QVector3D_normal(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector3D* a0;
        const  ::QVector3D* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9", sipType_QVector3D, &a0, sipType_QVector3D, &a1))
        {
             ::QVector3D*sipRes;

            sipRes = new  ::QVector3D( ::QVector3D::normal(*a0,*a1));

            return sipConvertFromNewType(sipRes,sipType_QVector3D,SIP_NULLPTR);
        }
    }

    {
        const  ::QVector3D* a0;
        const  ::QVector3D* a1;
        const  ::QVector3D* a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9J9", sipType_QVector3D, &a0, sipType_QVector3D, &a1, sipType_QVector3D, &a2))
        {
             ::QVector3D*sipRes;

            sipRes = new  ::QVector3D( ::QVector3D::normal(*a0,*a1,*a2));

            return sipConvertFromNewType(sipRes,sipType_QVector3D,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector3D, sipName_normal, doc_QVector3D_normal);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector3D_distanceToPlane, "distanceToPlane(self, QVector3D, QVector3D) -> float\n"
"distanceToPlane(self, QVector3D, QVector3D, QVector3D) -> float");

extern "C" {static PyObject *meth_QVector3D_distanceToPlane(PyObject *, PyObject *);}
static PyObject *meth_QVector3D_distanceToPlane(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector3D* a0;
        const  ::QVector3D* a1;
        const  ::QVector3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QVector3D, &sipCpp, sipType_QVector3D, &a0, sipType_QVector3D, &a1))
        {
            float sipRes;

            sipRes = sipCpp->distanceToPlane(*a0,*a1);

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    {
        const  ::QVector3D* a0;
        const  ::QVector3D* a1;
        const  ::QVector3D* a2;
        const  ::QVector3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J9", &sipSelf, sipType_QVector3D, &sipCpp, sipType_QVector3D, &a0, sipType_QVector3D, &a1, sipType_QVector3D, &a2))
        {
            float sipRes;

            sipRes = sipCpp->distanceToPlane(*a0,*a1,*a2);

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector3D, sipName_distanceToPlane, doc_QVector3D_distanceToPlane);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector3D_distanceToLine, "distanceToLine(self, QVector3D, QVector3D) -> float");

extern "C" {static PyObject *meth_QVector3D_distanceToLine(PyObject *, PyObject *);}
static PyObject *meth_QVector3D_distanceToLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector3D* a0;
        const  ::QVector3D* a1;
        const  ::QVector3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QVector3D, &sipCpp, sipType_QVector3D, &a0, sipType_QVector3D, &a1))
        {
            float sipRes;

            sipRes = sipCpp->distanceToLine(*a0,*a1);

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector3D, sipName_distanceToLine, doc_QVector3D_distanceToLine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector3D_toVector2D, "toVector2D(self) -> QVector2D");

extern "C" {static PyObject *meth_QVector3D_toVector2D(PyObject *, PyObject *);}
static PyObject *meth_QVector3D_toVector2D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector3D, &sipCpp))
        {
             ::QVector2D*sipRes;

            sipRes = new  ::QVector2D(sipCpp->toVector2D());

            return sipConvertFromNewType(sipRes,sipType_QVector2D,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector3D, sipName_toVector2D, doc_QVector3D_toVector2D);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector3D_toVector4D, "toVector4D(self) -> QVector4D");

extern "C" {static PyObject *meth_QVector3D_toVector4D(PyObject *, PyObject *);}
static PyObject *meth_QVector3D_toVector4D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector3D, &sipCpp))
        {
             ::QVector4D*sipRes;

            sipRes = new  ::QVector4D(sipCpp->toVector4D());

            return sipConvertFromNewType(sipRes,sipType_QVector4D,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector3D, sipName_toVector4D, doc_QVector3D_toVector4D);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector3D_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QVector3D_isNull(PyObject *, PyObject *);}
static PyObject *meth_QVector3D_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector3D, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector3D, sipName_isNull, doc_QVector3D_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector3D_x, "x(self) -> float");

extern "C" {static PyObject *meth_QVector3D_x(PyObject *, PyObject *);}
static PyObject *meth_QVector3D_x(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector3D, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->x();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector3D, sipName_x, doc_QVector3D_x);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector3D_y, "y(self) -> float");

extern "C" {static PyObject *meth_QVector3D_y(PyObject *, PyObject *);}
static PyObject *meth_QVector3D_y(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector3D, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->y();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector3D, sipName_y, doc_QVector3D_y);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector3D_z, "z(self) -> float");

extern "C" {static PyObject *meth_QVector3D_z(PyObject *, PyObject *);}
static PyObject *meth_QVector3D_z(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector3D, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->z();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector3D, sipName_z, doc_QVector3D_z);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector3D_setX, "setX(self, float)");

extern "C" {static PyObject *meth_QVector3D_setX(PyObject *, PyObject *);}
static PyObject *meth_QVector3D_setX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
         ::QVector3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QVector3D, &sipCpp, &a0))
        {
            sipCpp->setX(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector3D, sipName_setX, doc_QVector3D_setX);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector3D_setY, "setY(self, float)");

extern "C" {static PyObject *meth_QVector3D_setY(PyObject *, PyObject *);}
static PyObject *meth_QVector3D_setY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
         ::QVector3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QVector3D, &sipCpp, &a0))
        {
            sipCpp->setY(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector3D, sipName_setY, doc_QVector3D_setY);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector3D_setZ, "setZ(self, float)");

extern "C" {static PyObject *meth_QVector3D_setZ(PyObject *, PyObject *);}
static PyObject *meth_QVector3D_setZ(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
         ::QVector3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QVector3D, &sipCpp, &a0))
        {
            sipCpp->setZ(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector3D, sipName_setZ, doc_QVector3D_setZ);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector3D_toPoint, "toPoint(self) -> QPoint");

extern "C" {static PyObject *meth_QVector3D_toPoint(PyObject *, PyObject *);}
static PyObject *meth_QVector3D_toPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector3D, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->toPoint());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector3D, sipName_toPoint, doc_QVector3D_toPoint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector3D_toPointF, "toPointF(self) -> QPointF");

extern "C" {static PyObject *meth_QVector3D_toPointF(PyObject *, PyObject *);}
static PyObject *meth_QVector3D_toPointF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector3D, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->toPointF());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector3D, sipName_toPointF, doc_QVector3D_toPointF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector3D_distanceToPoint, "distanceToPoint(self, QVector3D) -> float");

extern "C" {static PyObject *meth_QVector3D_distanceToPoint(PyObject *, PyObject *);}
static PyObject *meth_QVector3D_distanceToPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector3D* a0;
        const  ::QVector3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QVector3D, &sipCpp, sipType_QVector3D, &a0))
        {
            float sipRes;

            sipRes = sipCpp->distanceToPoint(*a0);

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector3D, sipName_distanceToPoint, doc_QVector3D_distanceToPoint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector3D_project, "project(self, QMatrix4x4, QMatrix4x4, QRect) -> QVector3D");

extern "C" {static PyObject *meth_QVector3D_project(PyObject *, PyObject *);}
static PyObject *meth_QVector3D_project(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix4x4* a0;
        const  ::QMatrix4x4* a1;
        const  ::QRect* a2;
        const  ::QVector3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J9", &sipSelf, sipType_QVector3D, &sipCpp, sipType_QMatrix4x4, &a0, sipType_QMatrix4x4, &a1, sipType_QRect, &a2))
        {
             ::QVector3D*sipRes;

            sipRes = new  ::QVector3D(sipCpp->project(*a0,*a1,*a2));

            return sipConvertFromNewType(sipRes,sipType_QVector3D,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector3D, sipName_project, doc_QVector3D_project);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector3D_unproject, "unproject(self, QMatrix4x4, QMatrix4x4, QRect) -> QVector3D");

extern "C" {static PyObject *meth_QVector3D_unproject(PyObject *, PyObject *);}
static PyObject *meth_QVector3D_unproject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix4x4* a0;
        const  ::QMatrix4x4* a1;
        const  ::QRect* a2;
        const  ::QVector3D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J9", &sipSelf, sipType_QVector3D, &sipCpp, sipType_QMatrix4x4, &a0, sipType_QMatrix4x4, &a1, sipType_QRect, &a2))
        {
             ::QVector3D*sipRes;

            sipRes = new  ::QVector3D(sipCpp->unproject(*a0,*a1,*a2));

            return sipConvertFromNewType(sipRes,sipType_QVector3D,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector3D, sipName_unproject, doc_QVector3D_unproject);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QVector3D___eq__(PyObject *,PyObject *);}
static PyObject *slot_QVector3D___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QVector3D *sipCpp = reinterpret_cast< ::QVector3D *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVector3D));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector3D* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QVector3D, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QVector3D, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QVector3D___ne__(PyObject *,PyObject *);}
static PyObject *slot_QVector3D___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QVector3D *sipCpp = reinterpret_cast< ::QVector3D *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVector3D));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector3D* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QVector3D, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QVector3D, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QVector3D___div__(PyObject *,PyObject *);}
static PyObject *slot_QVector3D___div__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector3D* a0;
        float a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9f", sipType_QVector3D, &a0, &a1))
        {
             ::QVector3D*sipRes;

            sipRes = new  ::QVector3D((*a0 / a1));

            return sipConvertFromNewType(sipRes,sipType_QVector3D,SIP_NULLPTR);
        }
    }

    {
        const  ::QVector3D* a0;
        const  ::QVector3D* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QVector3D, &a0, sipType_QVector3D, &a1))
        {
             ::QVector3D*sipRes;

            sipRes = new  ::QVector3D((*a0 / *a1));

            return sipConvertFromNewType(sipRes,sipType_QVector3D,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, div_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QVector3D___add__(PyObject *,PyObject *);}
static PyObject *slot_QVector3D___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector3D* a0;
        const  ::QVector3D* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QVector3D, &a0, sipType_QVector3D, &a1))
        {
             ::QVector3D*sipRes;

            sipRes = new  ::QVector3D((*a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_QVector3D,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, add_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QVector3D___sub__(PyObject *,PyObject *);}
static PyObject *slot_QVector3D___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector3D* a0;
        const  ::QVector3D* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QVector3D, &a0, sipType_QVector3D, &a1))
        {
             ::QVector3D*sipRes;

            sipRes = new  ::QVector3D((*a0 - *a1));

            return sipConvertFromNewType(sipRes,sipType_QVector3D,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, sub_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QVector3D___mul__(PyObject *,PyObject *);}
static PyObject *slot_QVector3D___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector3D* a0;
        const  ::QMatrix4x4* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QVector3D, &a0, sipType_QMatrix4x4, &a1))
        {
             ::QVector3D*sipRes;

            sipRes = new  ::QVector3D((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QVector3D,SIP_NULLPTR);
        }
    }

    {
        float a0;
        const  ::QVector3D* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "fJ9", &a0, sipType_QVector3D, &a1))
        {
             ::QVector3D*sipRes;

            sipRes = new  ::QVector3D((a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QVector3D,SIP_NULLPTR);
        }
    }

    {
        const  ::QVector3D* a0;
        float a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9f", sipType_QVector3D, &a0, &a1))
        {
             ::QVector3D*sipRes;

            sipRes = new  ::QVector3D((*a0 * a1));

            return sipConvertFromNewType(sipRes,sipType_QVector3D,SIP_NULLPTR);
        }
    }

    {
        const  ::QVector3D* a0;
        const  ::QVector3D* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QVector3D, &a0, sipType_QVector3D, &a1))
        {
             ::QVector3D*sipRes;

            sipRes = new  ::QVector3D((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QVector3D,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, mul_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QVector3D___neg__(PyObject *);}
static PyObject *slot_QVector3D___neg__(PyObject *sipSelf)
{
     ::QVector3D *sipCpp = reinterpret_cast< ::QVector3D *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVector3D));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QVector3D*sipRes;

            sipRes = new  ::QVector3D(-(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QVector3D,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QVector3D___getitem__(PyObject *,PyObject *);}
static PyObject *slot_QVector3D___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QVector3D *sipCpp = reinterpret_cast< ::QVector3D *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVector3D));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            float sipRes;

            sipRes = (*sipCpp)[a0];

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector3D, sipName___getitem__, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QVector3D___idiv__(PyObject *,PyObject *);}
static PyObject *slot_QVector3D___idiv__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QVector3D)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QVector3D *sipCpp = reinterpret_cast< ::QVector3D *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVector3D));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1f", &a0))
        {
            sipCpp-> ::QVector3D::operator/=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        const  ::QVector3D* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QVector3D, &a0))
        {
            sipCpp-> ::QVector3D::operator/=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QVector3D___imul__(PyObject *,PyObject *);}
static PyObject *slot_QVector3D___imul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QVector3D)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QVector3D *sipCpp = reinterpret_cast< ::QVector3D *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVector3D));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1f", &a0))
        {
            sipCpp-> ::QVector3D::operator*=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        const  ::QVector3D* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QVector3D, &a0))
        {
            sipCpp-> ::QVector3D::operator*=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QVector3D___isub__(PyObject *,PyObject *);}
static PyObject *slot_QVector3D___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QVector3D)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QVector3D *sipCpp = reinterpret_cast< ::QVector3D *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVector3D));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector3D* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QVector3D, &a0))
        {
            sipCpp-> ::QVector3D::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QVector3D___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QVector3D___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QVector3D)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QVector3D *sipCpp = reinterpret_cast< ::QVector3D *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVector3D));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector3D* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QVector3D, &a0))
        {
            sipCpp-> ::QVector3D::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QVector3D___repr__(PyObject *);}
static PyObject *slot_QVector3D___repr__(PyObject *sipSelf)
{
     ::QVector3D *sipCpp = reinterpret_cast< ::QVector3D *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVector3D));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 48 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qvector3d.sip"
        PyObject *x = PyFloat_FromDouble(sipCpp->x());
        PyObject *y = PyFloat_FromDouble(sipCpp->y());
        PyObject *z = PyFloat_FromDouble(sipCpp->z());
        
        if (x && y && z)
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromFormat("PyQt5.QtGui.QVector3D(%R, %R, %R)", x, y,
                    z);
        #else
            sipRes = PyString_FromString("PyQt5.QtGui.QVector3D(");
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(x));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(y));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(z));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
        #endif
        }
        
        Py_XDECREF(x);
        Py_XDECREF(y);
        Py_XDECREF(z);
#line 17793 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QVector3D(void *, int);}
static void release_QVector3D(void *sipCppV, int)
{
    delete reinterpret_cast< ::QVector3D *>(sipCppV);
}


extern "C" {static PyObject *pickle_QVector3D(void *);}
static PyObject *pickle_QVector3D(void *sipCppV)
{
     ::QVector3D *sipCpp = reinterpret_cast< ::QVector3D *>(sipCppV);
    PyObject *sipRes;

#line 34 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qvector3d.sip"
    sipRes = Py_BuildValue((char *)"ddd", (double)sipCpp->x(), (double)sipCpp->y(),
            (double)sipCpp->z());
#line 17820 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

    return sipRes;
}


extern "C" {static void assign_QVector3D(void *, SIP_SSIZE_T, void *);}
static void assign_QVector3D(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QVector3D *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QVector3D *>(sipSrc);
}


extern "C" {static void *array_QVector3D(SIP_SSIZE_T);}
static void *array_QVector3D(SIP_SSIZE_T sipNrElem)
{
    return new  ::QVector3D[sipNrElem];
}


extern "C" {static void *copy_QVector3D(const void *, SIP_SSIZE_T);}
static void *copy_QVector3D(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QVector3D(reinterpret_cast<const  ::QVector3D *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QVector3D(sipSimpleWrapper *);}
static void dealloc_QVector3D(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QVector3D(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QVector3D(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QVector3D(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QVector3D *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QVector3D();

            return sipCpp;
        }
    }

    {
        float a0;
        float a1;
        float a2;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "fff", &a0, &a1, &a2))
        {
            sipCpp = new  ::QVector3D(a0,a1,a2);

            return sipCpp;
        }
    }

    {
        const  ::QPoint* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QPoint, &a0))
        {
            sipCpp = new  ::QVector3D(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QPointF, &a0, &a0State))
        {
            sipCpp = new  ::QVector3D(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QVector2D* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QVector2D, &a0))
        {
            sipCpp = new  ::QVector3D(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QVector2D* a0;
        float a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9f", sipType_QVector2D, &a0, &a1))
        {
            sipCpp = new  ::QVector3D(*a0,a1);

            return sipCpp;
        }
    }

    {
        const  ::QVector4D* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QVector4D, &a0))
        {
            sipCpp = new  ::QVector3D(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QVector3D* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QVector3D, &a0))
        {
            sipCpp = new  ::QVector3D(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QVector3D[] = {
    {(void *)slot_QVector3D___eq__, eq_slot},
    {(void *)slot_QVector3D___ne__, ne_slot},
    {(void *)slot_QVector3D___div__, div_slot},
    {(void *)slot_QVector3D___add__, add_slot},
    {(void *)slot_QVector3D___sub__, sub_slot},
    {(void *)slot_QVector3D___mul__, mul_slot},
    {(void *)slot_QVector3D___neg__, neg_slot},
    {(void *)slot_QVector3D___getitem__, getitem_slot},
    {(void *)slot_QVector3D___idiv__, idiv_slot},
    {(void *)slot_QVector3D___imul__, imul_slot},
    {(void *)slot_QVector3D___isub__, isub_slot},
    {(void *)slot_QVector3D___iadd__, iadd_slot},
    {(void *)slot_QVector3D___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QVector3D[] = {
    {SIP_MLNAME_CAST(sipName_crossProduct), meth_QVector3D_crossProduct, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector3D_crossProduct)},
    {SIP_MLNAME_CAST(sipName_distanceToLine), meth_QVector3D_distanceToLine, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector3D_distanceToLine)},
    {SIP_MLNAME_CAST(sipName_distanceToPlane), meth_QVector3D_distanceToPlane, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector3D_distanceToPlane)},
    {SIP_MLNAME_CAST(sipName_distanceToPoint), meth_QVector3D_distanceToPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector3D_distanceToPoint)},
    {SIP_MLNAME_CAST(sipName_dotProduct), meth_QVector3D_dotProduct, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector3D_dotProduct)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QVector3D_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector3D_isNull)},
    {SIP_MLNAME_CAST(sipName_length), meth_QVector3D_length, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector3D_length)},
    {SIP_MLNAME_CAST(sipName_lengthSquared), meth_QVector3D_lengthSquared, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector3D_lengthSquared)},
    {SIP_MLNAME_CAST(sipName_normal), meth_QVector3D_normal, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector3D_normal)},
    {SIP_MLNAME_CAST(sipName_normalize), meth_QVector3D_normalize, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector3D_normalize)},
    {SIP_MLNAME_CAST(sipName_normalized), meth_QVector3D_normalized, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector3D_normalized)},
    {SIP_MLNAME_CAST(sipName_project), meth_QVector3D_project, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector3D_project)},
    {SIP_MLNAME_CAST(sipName_setX), meth_QVector3D_setX, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector3D_setX)},
    {SIP_MLNAME_CAST(sipName_setY), meth_QVector3D_setY, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector3D_setY)},
    {SIP_MLNAME_CAST(sipName_setZ), meth_QVector3D_setZ, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector3D_setZ)},
    {SIP_MLNAME_CAST(sipName_toPoint), meth_QVector3D_toPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector3D_toPoint)},
    {SIP_MLNAME_CAST(sipName_toPointF), meth_QVector3D_toPointF, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector3D_toPointF)},
    {SIP_MLNAME_CAST(sipName_toVector2D), meth_QVector3D_toVector2D, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector3D_toVector2D)},
    {SIP_MLNAME_CAST(sipName_toVector4D), meth_QVector3D_toVector4D, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector3D_toVector4D)},
    {SIP_MLNAME_CAST(sipName_unproject), meth_QVector3D_unproject, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector3D_unproject)},
    {SIP_MLNAME_CAST(sipName_x), meth_QVector3D_x, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector3D_x)},
    {SIP_MLNAME_CAST(sipName_y), meth_QVector3D_y, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector3D_y)},
    {SIP_MLNAME_CAST(sipName_z), meth_QVector3D_z, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector3D_z)}
};

PyDoc_STRVAR(doc_QVector3D, "\1QVector3D()\n"
"QVector3D(float, float, float)\n"
"QVector3D(QPoint)\n"
"QVector3D(Union[QPointF, QPoint])\n"
"QVector3D(QVector2D)\n"
"QVector3D(QVector2D, float)\n"
"QVector3D(QVector4D)\n"
"QVector3D(QVector3D)");


static pyqt5ClassPluginDef plugin_QVector3D = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QVector3D = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QVector3D,
        {SIP_NULLPTR},
        &plugin_QVector3D
    },
    {
        sipNameNr_QVector3D,
        {0, 0, 1},
        23, methods_QVector3D,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QVector3D,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QVector3D,
    init_type_QVector3D,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QVector3D,
    assign_QVector3D,
    array_QVector3D,
    copy_QVector3D,
    release_QVector3D,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    pickle_QVector3D,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qvector2d.sip"
#include <qvector2d.h>
#line 18079 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 18083 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 18086 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qvector3d.sip"
#include <qvector3d.h>
#line 18089 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qvector4d.sip"
#include <qvector4d.h>
#line 18092 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QVector2D_length, "length(self) -> float");

extern "C" {static PyObject *meth_QVector2D_length(PyObject *, PyObject *);}
static PyObject *meth_QVector2D_length(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector2D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector2D, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->length();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector2D, sipName_length, doc_QVector2D_length);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector2D_lengthSquared, "lengthSquared(self) -> float");

extern "C" {static PyObject *meth_QVector2D_lengthSquared(PyObject *, PyObject *);}
static PyObject *meth_QVector2D_lengthSquared(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector2D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector2D, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->lengthSquared();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector2D, sipName_lengthSquared, doc_QVector2D_lengthSquared);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector2D_normalized, "normalized(self) -> QVector2D");

extern "C" {static PyObject *meth_QVector2D_normalized(PyObject *, PyObject *);}
static PyObject *meth_QVector2D_normalized(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector2D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector2D, &sipCpp))
        {
             ::QVector2D*sipRes;

            sipRes = new  ::QVector2D(sipCpp->normalized());

            return sipConvertFromNewType(sipRes,sipType_QVector2D,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector2D, sipName_normalized, doc_QVector2D_normalized);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector2D_normalize, "normalize(self)");

extern "C" {static PyObject *meth_QVector2D_normalize(PyObject *, PyObject *);}
static PyObject *meth_QVector2D_normalize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QVector2D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector2D, &sipCpp))
        {
            sipCpp->normalize();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector2D, sipName_normalize, doc_QVector2D_normalize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector2D_dotProduct, "dotProduct(QVector2D, QVector2D) -> float");

extern "C" {static PyObject *meth_QVector2D_dotProduct(PyObject *, PyObject *);}
static PyObject *meth_QVector2D_dotProduct(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector2D* a0;
        const  ::QVector2D* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9", sipType_QVector2D, &a0, sipType_QVector2D, &a1))
        {
            float sipRes;

            sipRes =  ::QVector2D::dotProduct(*a0,*a1);

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector2D, sipName_dotProduct, doc_QVector2D_dotProduct);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector2D_toVector3D, "toVector3D(self) -> QVector3D");

extern "C" {static PyObject *meth_QVector2D_toVector3D(PyObject *, PyObject *);}
static PyObject *meth_QVector2D_toVector3D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector2D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector2D, &sipCpp))
        {
             ::QVector3D*sipRes;

            sipRes = new  ::QVector3D(sipCpp->toVector3D());

            return sipConvertFromNewType(sipRes,sipType_QVector3D,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector2D, sipName_toVector3D, doc_QVector2D_toVector3D);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector2D_toVector4D, "toVector4D(self) -> QVector4D");

extern "C" {static PyObject *meth_QVector2D_toVector4D(PyObject *, PyObject *);}
static PyObject *meth_QVector2D_toVector4D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector2D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector2D, &sipCpp))
        {
             ::QVector4D*sipRes;

            sipRes = new  ::QVector4D(sipCpp->toVector4D());

            return sipConvertFromNewType(sipRes,sipType_QVector4D,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector2D, sipName_toVector4D, doc_QVector2D_toVector4D);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector2D_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QVector2D_isNull(PyObject *, PyObject *);}
static PyObject *meth_QVector2D_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector2D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector2D, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector2D, sipName_isNull, doc_QVector2D_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector2D_x, "x(self) -> float");

extern "C" {static PyObject *meth_QVector2D_x(PyObject *, PyObject *);}
static PyObject *meth_QVector2D_x(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector2D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector2D, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->x();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector2D, sipName_x, doc_QVector2D_x);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector2D_y, "y(self) -> float");

extern "C" {static PyObject *meth_QVector2D_y(PyObject *, PyObject *);}
static PyObject *meth_QVector2D_y(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector2D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector2D, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->y();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector2D, sipName_y, doc_QVector2D_y);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector2D_setX, "setX(self, float)");

extern "C" {static PyObject *meth_QVector2D_setX(PyObject *, PyObject *);}
static PyObject *meth_QVector2D_setX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
         ::QVector2D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QVector2D, &sipCpp, &a0))
        {
            sipCpp->setX(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector2D, sipName_setX, doc_QVector2D_setX);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector2D_setY, "setY(self, float)");

extern "C" {static PyObject *meth_QVector2D_setY(PyObject *, PyObject *);}
static PyObject *meth_QVector2D_setY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
         ::QVector2D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QVector2D, &sipCpp, &a0))
        {
            sipCpp->setY(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector2D, sipName_setY, doc_QVector2D_setY);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector2D_toPoint, "toPoint(self) -> QPoint");

extern "C" {static PyObject *meth_QVector2D_toPoint(PyObject *, PyObject *);}
static PyObject *meth_QVector2D_toPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector2D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector2D, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->toPoint());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector2D, sipName_toPoint, doc_QVector2D_toPoint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector2D_toPointF, "toPointF(self) -> QPointF");

extern "C" {static PyObject *meth_QVector2D_toPointF(PyObject *, PyObject *);}
static PyObject *meth_QVector2D_toPointF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector2D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector2D, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->toPointF());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector2D, sipName_toPointF, doc_QVector2D_toPointF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector2D_distanceToPoint, "distanceToPoint(self, QVector2D) -> float");

extern "C" {static PyObject *meth_QVector2D_distanceToPoint(PyObject *, PyObject *);}
static PyObject *meth_QVector2D_distanceToPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector2D* a0;
        const  ::QVector2D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QVector2D, &sipCpp, sipType_QVector2D, &a0))
        {
            float sipRes;

            sipRes = sipCpp->distanceToPoint(*a0);

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector2D, sipName_distanceToPoint, doc_QVector2D_distanceToPoint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVector2D_distanceToLine, "distanceToLine(self, QVector2D, QVector2D) -> float");

extern "C" {static PyObject *meth_QVector2D_distanceToLine(PyObject *, PyObject *);}
static PyObject *meth_QVector2D_distanceToLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector2D* a0;
        const  ::QVector2D* a1;
        const  ::QVector2D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QVector2D, &sipCpp, sipType_QVector2D, &a0, sipType_QVector2D, &a1))
        {
            float sipRes;

            sipRes = sipCpp->distanceToLine(*a0,*a1);

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector2D, sipName_distanceToLine, doc_QVector2D_distanceToLine);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QVector2D___eq__(PyObject *,PyObject *);}
static PyObject *slot_QVector2D___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QVector2D *sipCpp = reinterpret_cast< ::QVector2D *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVector2D));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector2D* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QVector2D, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QVector2D, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QVector2D___ne__(PyObject *,PyObject *);}
static PyObject *slot_QVector2D___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QVector2D *sipCpp = reinterpret_cast< ::QVector2D *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVector2D));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector2D* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QVector2D, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QVector2D, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QVector2D___div__(PyObject *,PyObject *);}
static PyObject *slot_QVector2D___div__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector2D* a0;
        float a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9f", sipType_QVector2D, &a0, &a1))
        {
             ::QVector2D*sipRes;

            sipRes = new  ::QVector2D((*a0 / a1));

            return sipConvertFromNewType(sipRes,sipType_QVector2D,SIP_NULLPTR);
        }
    }

    {
        const  ::QVector2D* a0;
        const  ::QVector2D* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QVector2D, &a0, sipType_QVector2D, &a1))
        {
             ::QVector2D*sipRes;

            sipRes = new  ::QVector2D((*a0 / *a1));

            return sipConvertFromNewType(sipRes,sipType_QVector2D,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, div_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QVector2D___add__(PyObject *,PyObject *);}
static PyObject *slot_QVector2D___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector2D* a0;
        const  ::QVector2D* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QVector2D, &a0, sipType_QVector2D, &a1))
        {
             ::QVector2D*sipRes;

            sipRes = new  ::QVector2D((*a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_QVector2D,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, add_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QVector2D___sub__(PyObject *,PyObject *);}
static PyObject *slot_QVector2D___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector2D* a0;
        const  ::QVector2D* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QVector2D, &a0, sipType_QVector2D, &a1))
        {
             ::QVector2D*sipRes;

            sipRes = new  ::QVector2D((*a0 - *a1));

            return sipConvertFromNewType(sipRes,sipType_QVector2D,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, sub_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QVector2D___mul__(PyObject *,PyObject *);}
static PyObject *slot_QVector2D___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
        const  ::QVector2D* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "fJ9", &a0, sipType_QVector2D, &a1))
        {
             ::QVector2D*sipRes;

            sipRes = new  ::QVector2D((a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QVector2D,SIP_NULLPTR);
        }
    }

    {
        const  ::QVector2D* a0;
        float a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9f", sipType_QVector2D, &a0, &a1))
        {
             ::QVector2D*sipRes;

            sipRes = new  ::QVector2D((*a0 * a1));

            return sipConvertFromNewType(sipRes,sipType_QVector2D,SIP_NULLPTR);
        }
    }

    {
        const  ::QVector2D* a0;
        const  ::QVector2D* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QVector2D, &a0, sipType_QVector2D, &a1))
        {
             ::QVector2D*sipRes;

            sipRes = new  ::QVector2D((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QVector2D,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, mul_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QVector2D___neg__(PyObject *);}
static PyObject *slot_QVector2D___neg__(PyObject *sipSelf)
{
     ::QVector2D *sipCpp = reinterpret_cast< ::QVector2D *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVector2D));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QVector2D*sipRes;

            sipRes = new  ::QVector2D(-(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QVector2D,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QVector2D___getitem__(PyObject *,PyObject *);}
static PyObject *slot_QVector2D___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QVector2D *sipCpp = reinterpret_cast< ::QVector2D *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVector2D));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            float sipRes;

            sipRes = (*sipCpp)[a0];

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector2D, sipName___getitem__, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QVector2D___idiv__(PyObject *,PyObject *);}
static PyObject *slot_QVector2D___idiv__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QVector2D)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QVector2D *sipCpp = reinterpret_cast< ::QVector2D *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVector2D));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1f", &a0))
        {
            sipCpp-> ::QVector2D::operator/=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        const  ::QVector2D* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QVector2D, &a0))
        {
            sipCpp-> ::QVector2D::operator/=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QVector2D___imul__(PyObject *,PyObject *);}
static PyObject *slot_QVector2D___imul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QVector2D)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QVector2D *sipCpp = reinterpret_cast< ::QVector2D *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVector2D));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1f", &a0))
        {
            sipCpp-> ::QVector2D::operator*=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        const  ::QVector2D* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QVector2D, &a0))
        {
            sipCpp-> ::QVector2D::operator*=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QVector2D___isub__(PyObject *,PyObject *);}
static PyObject *slot_QVector2D___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QVector2D)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QVector2D *sipCpp = reinterpret_cast< ::QVector2D *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVector2D));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector2D* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QVector2D, &a0))
        {
            sipCpp-> ::QVector2D::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QVector2D___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QVector2D___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QVector2D)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QVector2D *sipCpp = reinterpret_cast< ::QVector2D *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVector2D));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector2D* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QVector2D, &a0))
        {
            sipCpp-> ::QVector2D::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QVector2D___repr__(PyObject *);}
static PyObject *slot_QVector2D___repr__(PyObject *sipSelf)
{
     ::QVector2D *sipCpp = reinterpret_cast< ::QVector2D *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVector2D));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 46 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qvector2d.sip"
        PyObject *x = PyFloat_FromDouble(sipCpp->x());
        PyObject *y = PyFloat_FromDouble(sipCpp->y());
        
        if (x && y)
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromFormat("PyQt5.QtGui.QVector2D(%R, %R)", x, y);
        #else
            sipRes = PyString_FromString("PyQt5.QtGui.QVector2D(");
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(x));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(y));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
        #endif
        }
        
        Py_XDECREF(x);
        Py_XDECREF(y);
#line 19033 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QVector2D(void *, int);}
static void release_QVector2D(void *sipCppV, int)
{
    delete reinterpret_cast< ::QVector2D *>(sipCppV);
}


extern "C" {static PyObject *pickle_QVector2D(void *);}
static PyObject *pickle_QVector2D(void *sipCppV)
{
     ::QVector2D *sipCpp = reinterpret_cast< ::QVector2D *>(sipCppV);
    PyObject *sipRes;

#line 34 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qvector2d.sip"
    sipRes = Py_BuildValue((char *)"dd", (double)sipCpp->x(), (double)sipCpp->y());
#line 19059 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

    return sipRes;
}


extern "C" {static void assign_QVector2D(void *, SIP_SSIZE_T, void *);}
static void assign_QVector2D(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QVector2D *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QVector2D *>(sipSrc);
}


extern "C" {static void *array_QVector2D(SIP_SSIZE_T);}
static void *array_QVector2D(SIP_SSIZE_T sipNrElem)
{
    return new  ::QVector2D[sipNrElem];
}


extern "C" {static void *copy_QVector2D(const void *, SIP_SSIZE_T);}
static void *copy_QVector2D(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QVector2D(reinterpret_cast<const  ::QVector2D *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QVector2D(sipSimpleWrapper *);}
static void dealloc_QVector2D(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QVector2D(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QVector2D(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QVector2D(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QVector2D *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QVector2D();

            return sipCpp;
        }
    }

    {
        float a0;
        float a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "ff", &a0, &a1))
        {
            sipCpp = new  ::QVector2D(a0,a1);

            return sipCpp;
        }
    }

    {
        const  ::QPoint* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QPoint, &a0))
        {
            sipCpp = new  ::QVector2D(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QPointF, &a0, &a0State))
        {
            sipCpp = new  ::QVector2D(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QVector3D* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QVector3D, &a0))
        {
            sipCpp = new  ::QVector2D(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QVector4D* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QVector4D, &a0))
        {
            sipCpp = new  ::QVector2D(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QVector2D* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QVector2D, &a0))
        {
            sipCpp = new  ::QVector2D(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QVector2D[] = {
    {(void *)slot_QVector2D___eq__, eq_slot},
    {(void *)slot_QVector2D___ne__, ne_slot},
    {(void *)slot_QVector2D___div__, div_slot},
    {(void *)slot_QVector2D___add__, add_slot},
    {(void *)slot_QVector2D___sub__, sub_slot},
    {(void *)slot_QVector2D___mul__, mul_slot},
    {(void *)slot_QVector2D___neg__, neg_slot},
    {(void *)slot_QVector2D___getitem__, getitem_slot},
    {(void *)slot_QVector2D___idiv__, idiv_slot},
    {(void *)slot_QVector2D___imul__, imul_slot},
    {(void *)slot_QVector2D___isub__, isub_slot},
    {(void *)slot_QVector2D___iadd__, iadd_slot},
    {(void *)slot_QVector2D___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QVector2D[] = {
    {SIP_MLNAME_CAST(sipName_distanceToLine), meth_QVector2D_distanceToLine, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector2D_distanceToLine)},
    {SIP_MLNAME_CAST(sipName_distanceToPoint), meth_QVector2D_distanceToPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector2D_distanceToPoint)},
    {SIP_MLNAME_CAST(sipName_dotProduct), meth_QVector2D_dotProduct, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector2D_dotProduct)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QVector2D_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector2D_isNull)},
    {SIP_MLNAME_CAST(sipName_length), meth_QVector2D_length, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector2D_length)},
    {SIP_MLNAME_CAST(sipName_lengthSquared), meth_QVector2D_lengthSquared, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector2D_lengthSquared)},
    {SIP_MLNAME_CAST(sipName_normalize), meth_QVector2D_normalize, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector2D_normalize)},
    {SIP_MLNAME_CAST(sipName_normalized), meth_QVector2D_normalized, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector2D_normalized)},
    {SIP_MLNAME_CAST(sipName_setX), meth_QVector2D_setX, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector2D_setX)},
    {SIP_MLNAME_CAST(sipName_setY), meth_QVector2D_setY, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector2D_setY)},
    {SIP_MLNAME_CAST(sipName_toPoint), meth_QVector2D_toPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector2D_toPoint)},
    {SIP_MLNAME_CAST(sipName_toPointF), meth_QVector2D_toPointF, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector2D_toPointF)},
    {SIP_MLNAME_CAST(sipName_toVector3D), meth_QVector2D_toVector3D, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector2D_toVector3D)},
    {SIP_MLNAME_CAST(sipName_toVector4D), meth_QVector2D_toVector4D, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector2D_toVector4D)},
    {SIP_MLNAME_CAST(sipName_x), meth_QVector2D_x, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector2D_x)},
    {SIP_MLNAME_CAST(sipName_y), meth_QVector2D_y, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector2D_y)}
};

PyDoc_STRVAR(doc_QVector2D, "\1QVector2D()\n"
"QVector2D(float, float)\n"
"QVector2D(QPoint)\n"
"QVector2D(Union[QPointF, QPoint])\n"
"QVector2D(QVector3D)\n"
"QVector2D(QVector4D)\n"
"QVector2D(QVector2D)");


static pyqt5ClassPluginDef plugin_QVector2D = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QVector2D = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QVector2D,
        {SIP_NULLPTR},
        &plugin_QVector2D
    },
    {
        sipNameNr_QVector2D,
        {0, 0, 1},
        16, methods_QVector2D,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QVector2D,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QVector2D,
    init_type_QVector2D,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QVector2D,
    assign_QVector2D,
    array_QVector2D,
    copy_QVector2D,
    release_QVector2D,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    pickle_QVector2D,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 117 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qvalidator.sip"
#include <qvalidator.h>
#line 19296 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 19300 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 19303 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qvalidator.sip"
#include <qvalidator.h>
#line 19306 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 19309 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 19312 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 19315 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 19318 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 19321 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 19324 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 19327 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 19330 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 19333 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 19336 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 19339 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 19342 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 19345 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 19348 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 19351 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


class sipQRegularExpressionValidator : public  ::QRegularExpressionValidator
{
public:
    sipQRegularExpressionValidator( ::QObject*);
    sipQRegularExpressionValidator(const  ::QRegularExpression&, ::QObject*);
    virtual ~sipQRegularExpressionValidator();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
     ::QValidator::State validate( ::QString&,int&) const SIP_OVERRIDE;
    void fixup( ::QString&) const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQRegularExpressionValidator(const sipQRegularExpressionValidator &);
    sipQRegularExpressionValidator &operator = (const sipQRegularExpressionValidator &);

    char sipPyMethods[9];
};

sipQRegularExpressionValidator::sipQRegularExpressionValidator( ::QObject*a0):  ::QRegularExpressionValidator(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQRegularExpressionValidator::sipQRegularExpressionValidator(const  ::QRegularExpression& a0, ::QObject*a1):  ::QRegularExpressionValidator(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQRegularExpressionValidator::~sipQRegularExpressionValidator()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQRegularExpressionValidator::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QRegularExpressionValidator);

    return  ::QRegularExpressionValidator::metaObject();
}

int sipQRegularExpressionValidator::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QRegularExpressionValidator::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QRegularExpressionValidator,_c,_id,_a);

    return _id;
}

void *sipQRegularExpressionValidator::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QRegularExpressionValidator, _clname, &sipCpp) ? sipCpp :  ::QRegularExpressionValidator::qt_metacast(_clname));
}

void sipQRegularExpressionValidator::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QRegularExpressionValidator::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRegularExpressionValidator::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QRegularExpressionValidator::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRegularExpressionValidator::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QRegularExpressionValidator::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_1(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRegularExpressionValidator::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QRegularExpressionValidator::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_2(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRegularExpressionValidator::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QRegularExpressionValidator::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_3(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQRegularExpressionValidator::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QRegularExpressionValidator::eventFilter(a0,a1);

    extern bool sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_4(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQRegularExpressionValidator::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QRegularExpressionValidator::event(a0);

    extern bool sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_5(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QValidator::State sipQRegularExpressionValidator::validate( ::QString& a0,int& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,SIP_NULLPTR,sipName_validate);

    if (!sipMeth)
        return  ::QRegularExpressionValidator::validate(a0,a1);

    extern  ::QValidator::State sipVH_QtGui_107(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QString&,int&);

    return sipVH_QtGui_107(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQRegularExpressionValidator::fixup( ::QString& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,SIP_NULLPTR,sipName_fixup);

    if (!sipMeth)
    {
         ::QRegularExpressionValidator::fixup(a0);
        return;
    }

    extern void sipVH_QtGui_108(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QString&);

    sipVH_QtGui_108(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QRegularExpressionValidator_validate, "validate(self, str, int) -> Tuple[QValidator.State, str, int]");

extern "C" {static PyObject *meth_QRegularExpressionValidator_validate(PyObject *, PyObject *);}
static PyObject *meth_QRegularExpressionValidator_validate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QString* a0;
        int a0State = 0;
        int a1;
        const  ::QRegularExpressionValidator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1i", &sipSelf, sipType_QRegularExpressionValidator, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
             ::QValidator::State sipRes;
            PyObject *sipResObj;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QRegularExpressionValidator::validate(*a0,a1) : sipCpp->validate(*a0,a1));

            sipResObj = sipBuildResult(0,"(FDi)",sipRes,sipType_QValidator_State,a0,sipType_QString,SIP_NULLPTR,a1);
            sipReleaseType(a0,sipType_QString,a0State);

            return sipResObj;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpressionValidator, sipName_validate, doc_QRegularExpressionValidator_validate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegularExpressionValidator_regularExpression, "regularExpression(self) -> QRegularExpression");

extern "C" {static PyObject *meth_QRegularExpressionValidator_regularExpression(PyObject *, PyObject *);}
static PyObject *meth_QRegularExpressionValidator_regularExpression(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegularExpressionValidator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegularExpressionValidator, &sipCpp))
        {
             ::QRegularExpression*sipRes;

            sipRes = new  ::QRegularExpression(sipCpp->regularExpression());

            return sipConvertFromNewType(sipRes,sipType_QRegularExpression,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpressionValidator, sipName_regularExpression, doc_QRegularExpressionValidator_regularExpression);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegularExpressionValidator_setRegularExpression, "setRegularExpression(self, QRegularExpression)");

extern "C" {static PyObject *meth_QRegularExpressionValidator_setRegularExpression(PyObject *, PyObject *);}
static PyObject *meth_QRegularExpressionValidator_setRegularExpression(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegularExpression* a0;
         ::QRegularExpressionValidator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRegularExpressionValidator, &sipCpp, sipType_QRegularExpression, &a0))
        {
            sipCpp->setRegularExpression(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpressionValidator, sipName_setRegularExpression, doc_QRegularExpressionValidator_setRegularExpression);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QRegularExpressionValidator(void *, const sipTypeDef *);}
static void *cast_QRegularExpressionValidator(void *sipCppV, const sipTypeDef *targetType)
{
     ::QRegularExpressionValidator *sipCpp = reinterpret_cast< ::QRegularExpressionValidator *>(sipCppV);

    if (targetType == sipType_QValidator)
        return static_cast< ::QValidator *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QRegularExpressionValidator(void *, int);}
static void release_QRegularExpressionValidator(void *sipCppV, int)
{
     ::QRegularExpressionValidator *sipCpp = reinterpret_cast< ::QRegularExpressionValidator *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QRegularExpressionValidator(sipSimpleWrapper *);}
static void dealloc_QRegularExpressionValidator(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQRegularExpressionValidator *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QRegularExpressionValidator(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QRegularExpressionValidator(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QRegularExpressionValidator(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQRegularExpressionValidator *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQRegularExpressionValidator(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QRegularExpression* a0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|JH", sipType_QRegularExpression, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQRegularExpressionValidator(*a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QRegularExpressionValidator[] = {{354, 255, 1}};


static PyMethodDef methods_QRegularExpressionValidator[] = {
    {SIP_MLNAME_CAST(sipName_regularExpression), meth_QRegularExpressionValidator_regularExpression, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegularExpressionValidator_regularExpression)},
    {SIP_MLNAME_CAST(sipName_setRegularExpression), meth_QRegularExpressionValidator_setRegularExpression, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegularExpressionValidator_setRegularExpression)},
    {SIP_MLNAME_CAST(sipName_validate), meth_QRegularExpressionValidator_validate, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegularExpressionValidator_validate)}
};

PyDoc_STRVAR(doc_QRegularExpressionValidator, "\1QRegularExpressionValidator(parent: QObject = None)\n"
"QRegularExpressionValidator(QRegularExpression, parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QRegularExpressionValidator = {
    & ::QRegularExpressionValidator::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QRegularExpressionValidator = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QRegularExpressionValidator,
        {SIP_NULLPTR},
        &plugin_QRegularExpressionValidator
    },
    {
        sipNameNr_QRegularExpressionValidator,
        {0, 0, 1},
        3, methods_QRegularExpressionValidator,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QRegularExpressionValidator,
    -1,
    -1,
    supers_QRegularExpressionValidator,
    SIP_NULLPTR,
    init_type_QRegularExpressionValidator,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QRegularExpressionValidator,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QRegularExpressionValidator,
    cast_QRegularExpressionValidator,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 100 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qvalidator.sip"
#include <qvalidator.h>
#line 19838 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 19842 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 19845 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qvalidator.sip"
#include <qvalidator.h>
#line 19848 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 19851 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 19854 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 19857 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 19860 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 19863 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 19866 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 19869 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 19872 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 19875 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 19878 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 19881 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 19884 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 19887 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 19890 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 19893 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


class sipQRegExpValidator : public  ::QRegExpValidator
{
public:
    sipQRegExpValidator( ::QObject*);
    sipQRegExpValidator(const  ::QRegExp&, ::QObject*);
    virtual ~sipQRegExpValidator();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
     ::QValidator::State validate( ::QString&,int&) const SIP_OVERRIDE;
    void fixup( ::QString&) const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQRegExpValidator(const sipQRegExpValidator &);
    sipQRegExpValidator &operator = (const sipQRegExpValidator &);

    char sipPyMethods[9];
};

sipQRegExpValidator::sipQRegExpValidator( ::QObject*a0):  ::QRegExpValidator(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQRegExpValidator::sipQRegExpValidator(const  ::QRegExp& a0, ::QObject*a1):  ::QRegExpValidator(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQRegExpValidator::~sipQRegExpValidator()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQRegExpValidator::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QRegExpValidator);

    return  ::QRegExpValidator::metaObject();
}

int sipQRegExpValidator::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QRegExpValidator::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QRegExpValidator,_c,_id,_a);

    return _id;
}

void *sipQRegExpValidator::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QRegExpValidator, _clname, &sipCpp) ? sipCpp :  ::QRegExpValidator::qt_metacast(_clname));
}

void sipQRegExpValidator::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QRegExpValidator::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRegExpValidator::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QRegExpValidator::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRegExpValidator::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QRegExpValidator::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_1(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRegExpValidator::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QRegExpValidator::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_2(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRegExpValidator::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QRegExpValidator::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_3(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQRegExpValidator::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QRegExpValidator::eventFilter(a0,a1);

    extern bool sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_4(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQRegExpValidator::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QRegExpValidator::event(a0);

    extern bool sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_5(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QValidator::State sipQRegExpValidator::validate( ::QString& a0,int& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,SIP_NULLPTR,sipName_validate);

    if (!sipMeth)
        return  ::QRegExpValidator::validate(a0,a1);

    extern  ::QValidator::State sipVH_QtGui_107(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QString&,int&);

    return sipVH_QtGui_107(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQRegExpValidator::fixup( ::QString& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,SIP_NULLPTR,sipName_fixup);

    if (!sipMeth)
    {
         ::QRegExpValidator::fixup(a0);
        return;
    }

    extern void sipVH_QtGui_108(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QString&);

    sipVH_QtGui_108(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QRegExpValidator_validate, "validate(self, str, int) -> Tuple[QValidator.State, str, int]");

extern "C" {static PyObject *meth_QRegExpValidator_validate(PyObject *, PyObject *);}
static PyObject *meth_QRegExpValidator_validate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QString* a0;
        int a0State = 0;
        int a1;
        const  ::QRegExpValidator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1i", &sipSelf, sipType_QRegExpValidator, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
             ::QValidator::State sipRes;
            PyObject *sipResObj;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QRegExpValidator::validate(*a0,a1) : sipCpp->validate(*a0,a1));

            sipResObj = sipBuildResult(0,"(FDi)",sipRes,sipType_QValidator_State,a0,sipType_QString,SIP_NULLPTR,a1);
            sipReleaseType(a0,sipType_QString,a0State);

            return sipResObj;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegExpValidator, sipName_validate, doc_QRegExpValidator_validate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExpValidator_setRegExp, "setRegExp(self, QRegExp)");

extern "C" {static PyObject *meth_QRegExpValidator_setRegExp(PyObject *, PyObject *);}
static PyObject *meth_QRegExpValidator_setRegExp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegExp* a0;
         ::QRegExpValidator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRegExpValidator, &sipCpp, sipType_QRegExp, &a0))
        {
            sipCpp->setRegExp(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegExpValidator, sipName_setRegExp, doc_QRegExpValidator_setRegExp);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExpValidator_regExp, "regExp(self) -> QRegExp");

extern "C" {static PyObject *meth_QRegExpValidator_regExp(PyObject *, PyObject *);}
static PyObject *meth_QRegExpValidator_regExp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegExpValidator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegExpValidator, &sipCpp))
        {
             ::QRegExp*sipRes;

            sipRes = new  ::QRegExp(sipCpp->regExp());

            return sipConvertFromNewType(sipRes,sipType_QRegExp,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegExpValidator, sipName_regExp, doc_QRegExpValidator_regExp);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QRegExpValidator(void *, const sipTypeDef *);}
static void *cast_QRegExpValidator(void *sipCppV, const sipTypeDef *targetType)
{
     ::QRegExpValidator *sipCpp = reinterpret_cast< ::QRegExpValidator *>(sipCppV);

    if (targetType == sipType_QValidator)
        return static_cast< ::QValidator *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QRegExpValidator(void *, int);}
static void release_QRegExpValidator(void *sipCppV, int)
{
     ::QRegExpValidator *sipCpp = reinterpret_cast< ::QRegExpValidator *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QRegExpValidator(sipSimpleWrapper *);}
static void dealloc_QRegExpValidator(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQRegExpValidator *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QRegExpValidator(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QRegExpValidator(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QRegExpValidator(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQRegExpValidator *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQRegExpValidator(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QRegExp* a0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|JH", sipType_QRegExp, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQRegExpValidator(*a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QRegExpValidator[] = {{354, 255, 1}};


static PyMethodDef methods_QRegExpValidator[] = {
    {SIP_MLNAME_CAST(sipName_regExp), meth_QRegExpValidator_regExp, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegExpValidator_regExp)},
    {SIP_MLNAME_CAST(sipName_setRegExp), meth_QRegExpValidator_setRegExp, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegExpValidator_setRegExp)},
    {SIP_MLNAME_CAST(sipName_validate), meth_QRegExpValidator_validate, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegExpValidator_validate)}
};

PyDoc_STRVAR(doc_QRegExpValidator, "\1QRegExpValidator(parent: QObject = None)\n"
"QRegExpValidator(QRegExp, parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QRegExpValidator = {
    & ::QRegExpValidator::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QRegExpValidator = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QRegExpValidator,
        {SIP_NULLPTR},
        &plugin_QRegExpValidator
    },
    {
        sipNameNr_QRegExpValidator,
        {0, 0, 1},
        3, methods_QRegExpValidator,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QRegExpValidator,
    -1,
    -1,
    supers_QRegExpValidator,
    SIP_NULLPTR,
    init_type_QRegExpValidator,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QRegExpValidator,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QRegExpValidator,
    cast_QRegExpValidator,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 71 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qvalidator.sip"
#include <qvalidator.h>
#line 20380 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 20384 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qvalidator.sip"
#include <qvalidator.h>
#line 20387 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 20390 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 20393 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 20396 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 20399 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 20402 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 20405 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 20408 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 20411 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 20414 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 20417 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 20420 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 20423 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 20426 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 20429 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 20432 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 20435 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


class sipQDoubleValidator : public  ::QDoubleValidator
{
public:
    sipQDoubleValidator( ::QObject*);
    sipQDoubleValidator(double,double,int, ::QObject*);
    virtual ~sipQDoubleValidator();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void setRange(double,double,int) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
     ::QValidator::State validate( ::QString&,int&) const SIP_OVERRIDE;
    void fixup( ::QString&) const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQDoubleValidator(const sipQDoubleValidator &);
    sipQDoubleValidator &operator = (const sipQDoubleValidator &);

    char sipPyMethods[10];
};

sipQDoubleValidator::sipQDoubleValidator( ::QObject*a0):  ::QDoubleValidator(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDoubleValidator::sipQDoubleValidator(double a0,double a1,int a2, ::QObject*a3):  ::QDoubleValidator(a0,a1,a2,a3), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDoubleValidator::~sipQDoubleValidator()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQDoubleValidator::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QDoubleValidator);

    return  ::QDoubleValidator::metaObject();
}

int sipQDoubleValidator::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QDoubleValidator::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QDoubleValidator,_c,_id,_a);

    return _id;
}

void *sipQDoubleValidator::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QDoubleValidator, _clname, &sipCpp) ? sipCpp :  ::QDoubleValidator::qt_metacast(_clname));
}

void sipQDoubleValidator::setRange(double a0,double a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_setRange);

    if (!sipMeth)
    {
         ::QDoubleValidator::setRange(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_109(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, double,double,int);

    sipVH_QtGui_109(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQDoubleValidator::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QDoubleValidator::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDoubleValidator::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QDoubleValidator::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDoubleValidator::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QDoubleValidator::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_1(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDoubleValidator::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QDoubleValidator::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_2(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDoubleValidator::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QDoubleValidator::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_3(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQDoubleValidator::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QDoubleValidator::eventFilter(a0,a1);

    extern bool sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_4(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQDoubleValidator::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QDoubleValidator::event(a0);

    extern bool sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_5(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QValidator::State sipQDoubleValidator::validate( ::QString& a0,int& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,SIP_NULLPTR,sipName_validate);

    if (!sipMeth)
        return  ::QDoubleValidator::validate(a0,a1);

    extern  ::QValidator::State sipVH_QtGui_107(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QString&,int&);

    return sipVH_QtGui_107(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQDoubleValidator::fixup( ::QString& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,SIP_NULLPTR,sipName_fixup);

    if (!sipMeth)
    {
         ::QDoubleValidator::fixup(a0);
        return;
    }

    extern void sipVH_QtGui_108(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QString&);

    sipVH_QtGui_108(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QDoubleValidator_validate, "validate(self, str, int) -> Tuple[QValidator.State, str, int]");

extern "C" {static PyObject *meth_QDoubleValidator_validate(PyObject *, PyObject *);}
static PyObject *meth_QDoubleValidator_validate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QString* a0;
        int a0State = 0;
        int a1;
        const  ::QDoubleValidator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1i", &sipSelf, sipType_QDoubleValidator, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
             ::QValidator::State sipRes;
            PyObject *sipResObj;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QDoubleValidator::validate(*a0,a1) : sipCpp->validate(*a0,a1));

            sipResObj = sipBuildResult(0,"(FDi)",sipRes,sipType_QValidator_State,a0,sipType_QString,SIP_NULLPTR,a1);
            sipReleaseType(a0,sipType_QString,a0State);

            return sipResObj;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDoubleValidator, sipName_validate, doc_QDoubleValidator_validate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDoubleValidator_setRange, "setRange(self, float, float, decimals: int = 0)");

extern "C" {static PyObject *meth_QDoubleValidator_setRange(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDoubleValidator_setRange(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        double a0;
        double a1;
        int a2 = 0;
         ::QDoubleValidator *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_decimals,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bdd|i", &sipSelf, sipType_QDoubleValidator, &sipCpp, &a0, &a1, &a2))
        {
            (sipSelfWasArg ? sipCpp-> ::QDoubleValidator::setRange(a0,a1,a2) : sipCpp->setRange(a0,a1,a2));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDoubleValidator, sipName_setRange, doc_QDoubleValidator_setRange);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDoubleValidator_setBottom, "setBottom(self, float)");

extern "C" {static PyObject *meth_QDoubleValidator_setBottom(PyObject *, PyObject *);}
static PyObject *meth_QDoubleValidator_setBottom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
         ::QDoubleValidator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QDoubleValidator, &sipCpp, &a0))
        {
            sipCpp->setBottom(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDoubleValidator, sipName_setBottom, doc_QDoubleValidator_setBottom);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDoubleValidator_setTop, "setTop(self, float)");

extern "C" {static PyObject *meth_QDoubleValidator_setTop(PyObject *, PyObject *);}
static PyObject *meth_QDoubleValidator_setTop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
         ::QDoubleValidator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QDoubleValidator, &sipCpp, &a0))
        {
            sipCpp->setTop(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDoubleValidator, sipName_setTop, doc_QDoubleValidator_setTop);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDoubleValidator_setDecimals, "setDecimals(self, int)");

extern "C" {static PyObject *meth_QDoubleValidator_setDecimals(PyObject *, PyObject *);}
static PyObject *meth_QDoubleValidator_setDecimals(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QDoubleValidator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDoubleValidator, &sipCpp, &a0))
        {
            sipCpp->setDecimals(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDoubleValidator, sipName_setDecimals, doc_QDoubleValidator_setDecimals);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDoubleValidator_bottom, "bottom(self) -> float");

extern "C" {static PyObject *meth_QDoubleValidator_bottom(PyObject *, PyObject *);}
static PyObject *meth_QDoubleValidator_bottom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDoubleValidator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDoubleValidator, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->bottom();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDoubleValidator, sipName_bottom, doc_QDoubleValidator_bottom);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDoubleValidator_top, "top(self) -> float");

extern "C" {static PyObject *meth_QDoubleValidator_top(PyObject *, PyObject *);}
static PyObject *meth_QDoubleValidator_top(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDoubleValidator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDoubleValidator, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->top();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDoubleValidator, sipName_top, doc_QDoubleValidator_top);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDoubleValidator_decimals, "decimals(self) -> int");

extern "C" {static PyObject *meth_QDoubleValidator_decimals(PyObject *, PyObject *);}
static PyObject *meth_QDoubleValidator_decimals(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDoubleValidator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDoubleValidator, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->decimals();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDoubleValidator, sipName_decimals, doc_QDoubleValidator_decimals);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDoubleValidator_setNotation, "setNotation(self, QDoubleValidator.Notation)");

extern "C" {static PyObject *meth_QDoubleValidator_setNotation(PyObject *, PyObject *);}
static PyObject *meth_QDoubleValidator_setNotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDoubleValidator::Notation a0;
         ::QDoubleValidator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QDoubleValidator, &sipCpp, sipType_QDoubleValidator_Notation, &a0))
        {
            sipCpp->setNotation(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDoubleValidator, sipName_setNotation, doc_QDoubleValidator_setNotation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDoubleValidator_notation, "notation(self) -> QDoubleValidator.Notation");

extern "C" {static PyObject *meth_QDoubleValidator_notation(PyObject *, PyObject *);}
static PyObject *meth_QDoubleValidator_notation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDoubleValidator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDoubleValidator, &sipCpp))
        {
             ::QDoubleValidator::Notation sipRes;

            sipRes = sipCpp->notation();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QDoubleValidator_Notation);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDoubleValidator, sipName_notation, doc_QDoubleValidator_notation);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QDoubleValidator(void *, const sipTypeDef *);}
static void *cast_QDoubleValidator(void *sipCppV, const sipTypeDef *targetType)
{
     ::QDoubleValidator *sipCpp = reinterpret_cast< ::QDoubleValidator *>(sipCppV);

    if (targetType == sipType_QValidator)
        return static_cast< ::QValidator *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDoubleValidator(void *, int);}
static void release_QDoubleValidator(void *sipCppV, int)
{
     ::QDoubleValidator *sipCpp = reinterpret_cast< ::QDoubleValidator *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QDoubleValidator(sipSimpleWrapper *);}
static void dealloc_QDoubleValidator(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQDoubleValidator *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDoubleValidator(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QDoubleValidator(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDoubleValidator(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQDoubleValidator *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQDoubleValidator(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        double a0;
        double a1;
        int a2;
         ::QObject* a3 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "ddi|JH", &a0, &a1, &a2, sipType_QObject, &a3, sipOwner))
        {
            sipCpp = new sipQDoubleValidator(a0,a1,a2,a3);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDoubleValidator[] = {{354, 255, 1}};


static PyMethodDef methods_QDoubleValidator[] = {
    {SIP_MLNAME_CAST(sipName_bottom), meth_QDoubleValidator_bottom, METH_VARARGS, SIP_MLDOC_CAST(doc_QDoubleValidator_bottom)},
    {SIP_MLNAME_CAST(sipName_decimals), meth_QDoubleValidator_decimals, METH_VARARGS, SIP_MLDOC_CAST(doc_QDoubleValidator_decimals)},
    {SIP_MLNAME_CAST(sipName_notation), meth_QDoubleValidator_notation, METH_VARARGS, SIP_MLDOC_CAST(doc_QDoubleValidator_notation)},
    {SIP_MLNAME_CAST(sipName_setBottom), meth_QDoubleValidator_setBottom, METH_VARARGS, SIP_MLDOC_CAST(doc_QDoubleValidator_setBottom)},
    {SIP_MLNAME_CAST(sipName_setDecimals), meth_QDoubleValidator_setDecimals, METH_VARARGS, SIP_MLDOC_CAST(doc_QDoubleValidator_setDecimals)},
    {SIP_MLNAME_CAST(sipName_setNotation), meth_QDoubleValidator_setNotation, METH_VARARGS, SIP_MLDOC_CAST(doc_QDoubleValidator_setNotation)},
    {SIP_MLNAME_CAST(sipName_setRange), SIP_MLMETH_CAST(meth_QDoubleValidator_setRange), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDoubleValidator_setRange)},
    {SIP_MLNAME_CAST(sipName_setTop), meth_QDoubleValidator_setTop, METH_VARARGS, SIP_MLDOC_CAST(doc_QDoubleValidator_setTop)},
    {SIP_MLNAME_CAST(sipName_top), meth_QDoubleValidator_top, METH_VARARGS, SIP_MLDOC_CAST(doc_QDoubleValidator_top)},
    {SIP_MLNAME_CAST(sipName_validate), meth_QDoubleValidator_validate, METH_VARARGS, SIP_MLDOC_CAST(doc_QDoubleValidator_validate)}
};

static sipEnumMemberDef enummembers_QDoubleValidator[] = {
    {sipName_ScientificNotation, static_cast<int>( ::QDoubleValidator::ScientificNotation), 21},
    {sipName_StandardNotation, static_cast<int>( ::QDoubleValidator::StandardNotation), 21},
};

PyDoc_STRVAR(doc_QDoubleValidator, "\1QDoubleValidator(parent: QObject = None)\n"
"QDoubleValidator(float, float, int, parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QDoubleValidator = {
    & ::QDoubleValidator::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QDoubleValidator = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QDoubleValidator,
        {SIP_NULLPTR},
        &plugin_QDoubleValidator
    },
    {
        sipNameNr_QDoubleValidator,
        {0, 0, 1},
        10, methods_QDoubleValidator,
        2, enummembers_QDoubleValidator,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QDoubleValidator,
    -1,
    -1,
    supers_QDoubleValidator,
    SIP_NULLPTR,
    init_type_QDoubleValidator,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QDoubleValidator,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QDoubleValidator,
    cast_QDoubleValidator,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 52 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qvalidator.sip"
#include <qvalidator.h>
#line 21162 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 21166 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 21169 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qvalidator.sip"
#include <qvalidator.h>
#line 21172 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 21175 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 21178 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 21181 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 21184 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 21187 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 21190 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 21193 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 21196 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 21199 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 21202 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 21205 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 21208 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 21211 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 21214 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 21217 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


class sipQIntValidator : public  ::QIntValidator
{
public:
    sipQIntValidator( ::QObject*);
    sipQIntValidator(int,int, ::QObject*);
    virtual ~sipQIntValidator();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void setRange(int,int) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
     ::QValidator::State validate( ::QString&,int&) const SIP_OVERRIDE;
    void fixup( ::QString&) const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQIntValidator(const sipQIntValidator &);
    sipQIntValidator &operator = (const sipQIntValidator &);

    char sipPyMethods[10];
};

sipQIntValidator::sipQIntValidator( ::QObject*a0):  ::QIntValidator(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQIntValidator::sipQIntValidator(int a0,int a1, ::QObject*a2):  ::QIntValidator(a0,a1,a2), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQIntValidator::~sipQIntValidator()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQIntValidator::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QIntValidator);

    return  ::QIntValidator::metaObject();
}

int sipQIntValidator::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QIntValidator::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QIntValidator,_c,_id,_a);

    return _id;
}

void *sipQIntValidator::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QIntValidator, _clname, &sipCpp) ? sipCpp :  ::QIntValidator::qt_metacast(_clname));
}

void sipQIntValidator::setRange(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_setRange);

    if (!sipMeth)
    {
         ::QIntValidator::setRange(a0,a1);
        return;
    }

    extern void sipVH_QtGui_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH_QtGui_53(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQIntValidator::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QIntValidator::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQIntValidator::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QIntValidator::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQIntValidator::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QIntValidator::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_1(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQIntValidator::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QIntValidator::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_2(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQIntValidator::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QIntValidator::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_3(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQIntValidator::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QIntValidator::eventFilter(a0,a1);

    extern bool sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_4(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQIntValidator::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QIntValidator::event(a0);

    extern bool sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_5(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QValidator::State sipQIntValidator::validate( ::QString& a0,int& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,SIP_NULLPTR,sipName_validate);

    if (!sipMeth)
        return  ::QIntValidator::validate(a0,a1);

    extern  ::QValidator::State sipVH_QtGui_107(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QString&,int&);

    return sipVH_QtGui_107(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQIntValidator::fixup( ::QString& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,SIP_NULLPTR,sipName_fixup);

    if (!sipMeth)
    {
         ::QIntValidator::fixup(a0);
        return;
    }

    extern void sipVH_QtGui_108(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QString&);

    sipVH_QtGui_108(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QIntValidator_validate, "validate(self, str, int) -> Tuple[QValidator.State, str, int]");

extern "C" {static PyObject *meth_QIntValidator_validate(PyObject *, PyObject *);}
static PyObject *meth_QIntValidator_validate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QString* a0;
        int a0State = 0;
        int a1;
        const  ::QIntValidator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1i", &sipSelf, sipType_QIntValidator, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
             ::QValidator::State sipRes;
            PyObject *sipResObj;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QIntValidator::validate(*a0,a1) : sipCpp->validate(*a0,a1));

            sipResObj = sipBuildResult(0,"(FDi)",sipRes,sipType_QValidator_State,a0,sipType_QString,SIP_NULLPTR,a1);
            sipReleaseType(a0,sipType_QString,a0State);

            return sipResObj;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIntValidator, sipName_validate, doc_QIntValidator_validate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIntValidator_fixup, "fixup(self, str) -> str");

extern "C" {static PyObject *meth_QIntValidator_fixup(PyObject *, PyObject *);}
static PyObject *meth_QIntValidator_fixup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QString* a0;
        int a0State = 0;
        const  ::QIntValidator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QIntValidator, &sipCpp, sipType_QString,&a0, &a0State))
        {
            PyObject *sipResObj;

            (sipSelfWasArg ? sipCpp-> ::QIntValidator::fixup(*a0) : sipCpp->fixup(*a0));

            sipResObj = sipConvertFromType(a0,sipType_QString,SIP_NULLPTR);
            sipReleaseType(a0,sipType_QString,a0State);

            return sipResObj;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIntValidator, sipName_fixup, doc_QIntValidator_fixup);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIntValidator_setBottom, "setBottom(self, int)");

extern "C" {static PyObject *meth_QIntValidator_setBottom(PyObject *, PyObject *);}
static PyObject *meth_QIntValidator_setBottom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QIntValidator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QIntValidator, &sipCpp, &a0))
        {
            sipCpp->setBottom(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIntValidator, sipName_setBottom, doc_QIntValidator_setBottom);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIntValidator_setTop, "setTop(self, int)");

extern "C" {static PyObject *meth_QIntValidator_setTop(PyObject *, PyObject *);}
static PyObject *meth_QIntValidator_setTop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QIntValidator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QIntValidator, &sipCpp, &a0))
        {
            sipCpp->setTop(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIntValidator, sipName_setTop, doc_QIntValidator_setTop);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIntValidator_setRange, "setRange(self, int, int)");

extern "C" {static PyObject *meth_QIntValidator_setRange(PyObject *, PyObject *);}
static PyObject *meth_QIntValidator_setRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
         ::QIntValidator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QIntValidator, &sipCpp, &a0, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QIntValidator::setRange(a0,a1) : sipCpp->setRange(a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIntValidator, sipName_setRange, doc_QIntValidator_setRange);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIntValidator_bottom, "bottom(self) -> int");

extern "C" {static PyObject *meth_QIntValidator_bottom(PyObject *, PyObject *);}
static PyObject *meth_QIntValidator_bottom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QIntValidator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIntValidator, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->bottom();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIntValidator, sipName_bottom, doc_QIntValidator_bottom);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIntValidator_top, "top(self) -> int");

extern "C" {static PyObject *meth_QIntValidator_top(PyObject *, PyObject *);}
static PyObject *meth_QIntValidator_top(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QIntValidator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIntValidator, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->top();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIntValidator, sipName_top, doc_QIntValidator_top);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QIntValidator(void *, const sipTypeDef *);}
static void *cast_QIntValidator(void *sipCppV, const sipTypeDef *targetType)
{
     ::QIntValidator *sipCpp = reinterpret_cast< ::QIntValidator *>(sipCppV);

    if (targetType == sipType_QValidator)
        return static_cast< ::QValidator *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QIntValidator(void *, int);}
static void release_QIntValidator(void *sipCppV, int)
{
     ::QIntValidator *sipCpp = reinterpret_cast< ::QIntValidator *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QIntValidator(sipSimpleWrapper *);}
static void dealloc_QIntValidator(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQIntValidator *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QIntValidator(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QIntValidator(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QIntValidator(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQIntValidator *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQIntValidator(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        int a0;
        int a1;
         ::QObject* a2 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "ii|JH", &a0, &a1, sipType_QObject, &a2, sipOwner))
        {
            sipCpp = new sipQIntValidator(a0,a1,a2);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QIntValidator[] = {{354, 255, 1}};


static PyMethodDef methods_QIntValidator[] = {
    {SIP_MLNAME_CAST(sipName_bottom), meth_QIntValidator_bottom, METH_VARARGS, SIP_MLDOC_CAST(doc_QIntValidator_bottom)},
    {SIP_MLNAME_CAST(sipName_fixup), meth_QIntValidator_fixup, METH_VARARGS, SIP_MLDOC_CAST(doc_QIntValidator_fixup)},
    {SIP_MLNAME_CAST(sipName_setBottom), meth_QIntValidator_setBottom, METH_VARARGS, SIP_MLDOC_CAST(doc_QIntValidator_setBottom)},
    {SIP_MLNAME_CAST(sipName_setRange), meth_QIntValidator_setRange, METH_VARARGS, SIP_MLDOC_CAST(doc_QIntValidator_setRange)},
    {SIP_MLNAME_CAST(sipName_setTop), meth_QIntValidator_setTop, METH_VARARGS, SIP_MLDOC_CAST(doc_QIntValidator_setTop)},
    {SIP_MLNAME_CAST(sipName_top), meth_QIntValidator_top, METH_VARARGS, SIP_MLDOC_CAST(doc_QIntValidator_top)},
    {SIP_MLNAME_CAST(sipName_validate), meth_QIntValidator_validate, METH_VARARGS, SIP_MLDOC_CAST(doc_QIntValidator_validate)}
};

PyDoc_STRVAR(doc_QIntValidator, "\1QIntValidator(parent: QObject = None)\n"
"QIntValidator(int, int, parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QIntValidator = {
    & ::QIntValidator::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QIntValidator = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QIntValidator,
        {SIP_NULLPTR},
        &plugin_QIntValidator
    },
    {
        sipNameNr_QIntValidator,
        {0, 0, 1},
        7, methods_QIntValidator,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QIntValidator,
    -1,
    -1,
    supers_QIntValidator,
    SIP_NULLPTR,
    init_type_QIntValidator,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QIntValidator,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QIntValidator,
    cast_QIntValidator,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qvalidator.sip"
#include <qvalidator.h>
#line 21849 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 21853 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 21856 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 21859 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 21862 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 21865 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 21868 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 21871 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 21874 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 21877 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 21880 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 21883 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 21886 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 21889 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 21892 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 21895 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 21898 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 21901 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


class sipQValidator : public  ::QValidator
{
public:
    sipQValidator( ::QObject*);
    virtual ~sipQValidator();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void fixup( ::QString&) const SIP_OVERRIDE;
     ::QValidator::State validate( ::QString&,int&) const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQValidator(const sipQValidator &);
    sipQValidator &operator = (const sipQValidator &);

    char sipPyMethods[9];
};

sipQValidator::sipQValidator( ::QObject*a0):  ::QValidator(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQValidator::~sipQValidator()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQValidator::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QValidator);

    return  ::QValidator::metaObject();
}

int sipQValidator::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QValidator::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QValidator,_c,_id,_a);

    return _id;
}

void *sipQValidator::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QValidator, _clname, &sipCpp) ? sipCpp :  ::QValidator::qt_metacast(_clname));
}

void sipQValidator::fixup( ::QString& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_fixup);

    if (!sipMeth)
    {
         ::QValidator::fixup(a0);
        return;
    }

    extern void sipVH_QtGui_108(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QString&);

    sipVH_QtGui_108(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QValidator::State sipQValidator::validate( ::QString& a0,int& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,sipName_QValidator,sipName_validate);

    if (!sipMeth)
        return  ::QValidator::Invalid;

    extern  ::QValidator::State sipVH_QtGui_107(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QString&,int&);

    return sipVH_QtGui_107(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQValidator::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QValidator::event(a0);

    extern bool sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_5(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQValidator::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QValidator::eventFilter(a0,a1);

    extern bool sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_4(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQValidator::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QValidator::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_3(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQValidator::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QValidator::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_2(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQValidator::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QValidator::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_1(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQValidator::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QValidator::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQValidator::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QValidator::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QValidator_validate, "validate(self, str, int) -> Tuple[QValidator.State, str, int]");

extern "C" {static PyObject *meth_QValidator_validate(PyObject *, PyObject *);}
static PyObject *meth_QValidator_validate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QString* a0;
        int a0State = 0;
        int a1;
        const  ::QValidator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1i", &sipSelf, sipType_QValidator, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
             ::QValidator::State sipRes;
            PyObject *sipResObj;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QValidator, sipName_validate);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->validate(*a0,a1);

            sipResObj = sipBuildResult(0,"(FDi)",sipRes,sipType_QValidator_State,a0,sipType_QString,SIP_NULLPTR,a1);
            sipReleaseType(a0,sipType_QString,a0State);

            return sipResObj;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QValidator, sipName_validate, doc_QValidator_validate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QValidator_fixup, "fixup(self, str) -> str");

extern "C" {static PyObject *meth_QValidator_fixup(PyObject *, PyObject *);}
static PyObject *meth_QValidator_fixup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QString* a0;
        int a0State = 0;
        const  ::QValidator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QValidator, &sipCpp, sipType_QString,&a0, &a0State))
        {
            PyObject *sipResObj;

            (sipSelfWasArg ? sipCpp-> ::QValidator::fixup(*a0) : sipCpp->fixup(*a0));

            sipResObj = sipConvertFromType(a0,sipType_QString,SIP_NULLPTR);
            sipReleaseType(a0,sipType_QString,a0State);

            return sipResObj;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QValidator, sipName_fixup, doc_QValidator_fixup);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QValidator_setLocale, "setLocale(self, QLocale)");

extern "C" {static PyObject *meth_QValidator_setLocale(PyObject *, PyObject *);}
static PyObject *meth_QValidator_setLocale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocale* a0;
         ::QValidator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QValidator, &sipCpp, sipType_QLocale, &a0))
        {
            sipCpp->setLocale(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QValidator, sipName_setLocale, doc_QValidator_setLocale);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QValidator_locale, "locale(self) -> QLocale");

extern "C" {static PyObject *meth_QValidator_locale(PyObject *, PyObject *);}
static PyObject *meth_QValidator_locale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QValidator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QValidator, &sipCpp))
        {
             ::QLocale*sipRes;

            sipRes = new  ::QLocale(sipCpp->locale());

            return sipConvertFromNewType(sipRes,sipType_QLocale,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QValidator, sipName_locale, doc_QValidator_locale);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QValidator(void *, const sipTypeDef *);}
static void *cast_QValidator(void *sipCppV, const sipTypeDef *targetType)
{
     ::QValidator *sipCpp = reinterpret_cast< ::QValidator *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QValidator(void *, int);}
static void release_QValidator(void *sipCppV, int)
{
     ::QValidator *sipCpp = reinterpret_cast< ::QValidator *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QValidator(sipSimpleWrapper *);}
static void dealloc_QValidator(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQValidator *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QValidator(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QValidator(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QValidator(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQValidator *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQValidator(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QValidator[] = {{25, 0, 1}};


static PyMethodDef methods_QValidator[] = {
    {SIP_MLNAME_CAST(sipName_fixup), meth_QValidator_fixup, METH_VARARGS, SIP_MLDOC_CAST(doc_QValidator_fixup)},
    {SIP_MLNAME_CAST(sipName_locale), meth_QValidator_locale, METH_VARARGS, SIP_MLDOC_CAST(doc_QValidator_locale)},
    {SIP_MLNAME_CAST(sipName_setLocale), meth_QValidator_setLocale, METH_VARARGS, SIP_MLDOC_CAST(doc_QValidator_setLocale)},
    {SIP_MLNAME_CAST(sipName_validate), meth_QValidator_validate, METH_VARARGS, SIP_MLDOC_CAST(doc_QValidator_validate)}
};

static sipEnumMemberDef enummembers_QValidator[] = {
    {sipName_Acceptable, static_cast<int>( ::QValidator::Acceptable), 355},
    {sipName_Intermediate, static_cast<int>( ::QValidator::Intermediate), 355},
    {sipName_Invalid, static_cast<int>( ::QValidator::Invalid), 355},
};

PyDoc_STRVAR(doc_QValidator, "\1QValidator(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QValidator[] = {
    {"changed()", "\1changed(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QValidator = {
    & ::QValidator::staticMetaObject,
    0,
    signals_QValidator,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QValidator = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QValidator,
        {SIP_NULLPTR},
        &plugin_QValidator
    },
    {
        sipNameNr_QValidator,
        {0, 0, 1},
        4, methods_QValidator,
        3, enummembers_QValidator,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QValidator,
    -1,
    -1,
    supers_QValidator,
    SIP_NULLPTR,
    init_type_QValidator,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QValidator,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QValidator,
    cast_QValidator,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 22412 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 22416 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 22419 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 22422 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 22425 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 22428 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qline.sip"
#include <qline.h>
#line 22431 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 95 "sip/QtCore/qline.sip"
#include <qline.h>
#line 22434 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 315 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 22437 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 22440 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 22443 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 22446 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QTransform_type, "type(self) -> QTransform.TransformationType");

extern "C" {static PyObject *meth_QTransform_type(PyObject *, PyObject *);}
static PyObject *meth_QTransform_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
             ::QTransform::TransformationType sipRes;

            sipRes = sipCpp->type();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QTransform_TransformationType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_type, doc_QTransform_type);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_setMatrix, "setMatrix(self, float, float, float, float, float, float, float, float, float)");

extern "C" {static PyObject *meth_QTransform_setMatrix(PyObject *, PyObject *);}
static PyObject *meth_QTransform_setMatrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
         ::qreal a4;
         ::qreal a5;
         ::qreal a6;
         ::qreal a7;
         ::qreal a8;
         ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bddddddddd", &sipSelf, sipType_QTransform, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8))
        {
            sipCpp->setMatrix(a0,a1,a2,a3,a4,a5,a6,a7,a8);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_setMatrix, doc_QTransform_setMatrix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_inverted, "inverted(self) -> Tuple[QTransform, bool]");

extern "C" {static PyObject *meth_QTransform_inverted(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTransform_inverted(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
        const  ::QTransform *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
             ::QTransform*sipRes;

            sipRes = new  ::QTransform(sipCpp->inverted(&a0));

            PyObject *sipResObj = sipConvertFromNewType(sipRes,sipType_QTransform,SIP_NULLPTR);
            return sipBuildResult(0,"(Rb)",sipResObj,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_inverted, doc_QTransform_inverted);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_adjoint, "adjoint(self) -> QTransform");

extern "C" {static PyObject *meth_QTransform_adjoint(PyObject *, PyObject *);}
static PyObject *meth_QTransform_adjoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
             ::QTransform*sipRes;

            sipRes = new  ::QTransform(sipCpp->adjoint());

            return sipConvertFromNewType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_adjoint, doc_QTransform_adjoint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_transposed, "transposed(self) -> QTransform");

extern "C" {static PyObject *meth_QTransform_transposed(PyObject *, PyObject *);}
static PyObject *meth_QTransform_transposed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
             ::QTransform*sipRes;

            sipRes = new  ::QTransform(sipCpp->transposed());

            return sipConvertFromNewType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_transposed, doc_QTransform_transposed);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_translate, "translate(self, float, float) -> QTransform");

extern "C" {static PyObject *meth_QTransform_translate(PyObject *, PyObject *);}
static PyObject *meth_QTransform_translate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QTransform, &sipCpp, &a0, &a1))
        {
             ::QTransform*sipRes;

            sipRes = &sipCpp->translate(a0,a1);

            return sipConvertFromType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_translate, doc_QTransform_translate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_scale, "scale(self, float, float) -> QTransform");

extern "C" {static PyObject *meth_QTransform_scale(PyObject *, PyObject *);}
static PyObject *meth_QTransform_scale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QTransform, &sipCpp, &a0, &a1))
        {
             ::QTransform*sipRes;

            sipRes = &sipCpp->scale(a0,a1);

            return sipConvertFromType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_scale, doc_QTransform_scale);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_shear, "shear(self, float, float) -> QTransform");

extern "C" {static PyObject *meth_QTransform_shear(PyObject *, PyObject *);}
static PyObject *meth_QTransform_shear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QTransform, &sipCpp, &a0, &a1))
        {
             ::QTransform*sipRes;

            sipRes = &sipCpp->shear(a0,a1);

            return sipConvertFromType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_shear, doc_QTransform_shear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_rotate, "rotate(self, float, axis: Qt.Axis = Qt.ZAxis) -> QTransform");

extern "C" {static PyObject *meth_QTransform_rotate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTransform_rotate(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::Qt::Axis a1 = Qt::ZAxis;
         ::QTransform *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_axis,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bd|E", &sipSelf, sipType_QTransform, &sipCpp, &a0, sipType_Qt_Axis, &a1))
        {
             ::QTransform*sipRes;

            sipRes = &sipCpp->rotate(a0,a1);

            return sipConvertFromType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_rotate, doc_QTransform_rotate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_rotateRadians, "rotateRadians(self, float, axis: Qt.Axis = Qt.ZAxis) -> QTransform");

extern "C" {static PyObject *meth_QTransform_rotateRadians(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTransform_rotateRadians(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::Qt::Axis a1 = Qt::ZAxis;
         ::QTransform *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_axis,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bd|E", &sipSelf, sipType_QTransform, &sipCpp, &a0, sipType_Qt_Axis, &a1))
        {
             ::QTransform*sipRes;

            sipRes = &sipCpp->rotateRadians(a0,a1);

            return sipConvertFromType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_rotateRadians, doc_QTransform_rotateRadians);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_squareToQuad, "squareToQuad(QPolygonF, QTransform) -> bool");

extern "C" {static PyObject *meth_QTransform_squareToQuad(PyObject *, PyObject *);}
static PyObject *meth_QTransform_squareToQuad(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPolygonF* a0;
         ::QTransform* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9", sipType_QPolygonF, &a0, sipType_QTransform, &a1))
        {
            bool sipRes;

            sipRes =  ::QTransform::squareToQuad(*a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_squareToQuad, doc_QTransform_squareToQuad);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_quadToSquare, "quadToSquare(QPolygonF, QTransform) -> bool");

extern "C" {static PyObject *meth_QTransform_quadToSquare(PyObject *, PyObject *);}
static PyObject *meth_QTransform_quadToSquare(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPolygonF* a0;
         ::QTransform* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9", sipType_QPolygonF, &a0, sipType_QTransform, &a1))
        {
            bool sipRes;

            sipRes =  ::QTransform::quadToSquare(*a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_quadToSquare, doc_QTransform_quadToSquare);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_quadToQuad, "quadToQuad(QPolygonF, QPolygonF, QTransform) -> bool");

extern "C" {static PyObject *meth_QTransform_quadToQuad(PyObject *, PyObject *);}
static PyObject *meth_QTransform_quadToQuad(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPolygonF* a0;
        const  ::QPolygonF* a1;
         ::QTransform* a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9J9", sipType_QPolygonF, &a0, sipType_QPolygonF, &a1, sipType_QTransform, &a2))
        {
            bool sipRes;

            sipRes =  ::QTransform::quadToQuad(*a0,*a1,*a2);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_quadToQuad, doc_QTransform_quadToQuad);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_reset, "reset(self)");

extern "C" {static PyObject *meth_QTransform_reset(PyObject *, PyObject *);}
static PyObject *meth_QTransform_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            sipCpp->reset();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_reset, doc_QTransform_reset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_map, "map(self, int, int) -> Tuple[int, int]\n"
"map(self, float, float) -> Tuple[float, float]\n"
"map(self, QPoint) -> QPoint\n"
"map(self, Union[QPointF, QPoint]) -> QPointF\n"
"map(self, QLine) -> QLine\n"
"map(self, QLineF) -> QLineF\n"
"map(self, QPolygonF) -> QPolygonF\n"
"map(self, QPolygon) -> QPolygon\n"
"map(self, QRegion) -> QRegion\n"
"map(self, QPainterPath) -> QPainterPath");

extern "C" {static PyObject *meth_QTransform_map(PyObject *, PyObject *);}
static PyObject *meth_QTransform_map(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BXiXi", &sipSelf, sipType_QTransform, &sipCpp, &a0, &a1))
        {
            sipCpp->map(a0,a1,&a2,&a3);

            return sipBuildResult(0,"(ii)",a2,a3);
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QTransform, &sipCpp, &a0, &a1))
        {
            sipCpp->map(a0,a1,&a2,&a3);

            return sipBuildResult(0,"(dd)",a2,a3);
        }
    }

    {
        const  ::QPoint* a0;
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QPoint, &a0))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->map(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTransform, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->map(*a0));
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    {
        const  ::QLine* a0;
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QLine, &a0))
        {
             ::QLine*sipRes;

            sipRes = new  ::QLine(sipCpp->map(*a0));

            return sipConvertFromNewType(sipRes,sipType_QLine,SIP_NULLPTR);
        }
    }

    {
        const  ::QLineF* a0;
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QLineF, &a0))
        {
             ::QLineF*sipRes;

            sipRes = new  ::QLineF(sipCpp->map(*a0));

            return sipConvertFromNewType(sipRes,sipType_QLineF,SIP_NULLPTR);
        }
    }

    {
        const  ::QPolygonF* a0;
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QPolygonF, &a0))
        {
             ::QPolygonF*sipRes;

            sipRes = new  ::QPolygonF(sipCpp->map(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPolygonF,SIP_NULLPTR);
        }
    }

    {
        const  ::QPolygon* a0;
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QPolygon, &a0))
        {
             ::QPolygon*sipRes;

            sipRes = new  ::QPolygon(sipCpp->map(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPolygon,SIP_NULLPTR);
        }
    }

    {
        const  ::QRegion* a0;
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QRegion, &a0))
        {
             ::QRegion*sipRes;

            sipRes = new  ::QRegion(sipCpp->map(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRegion,SIP_NULLPTR);
        }
    }

    {
        const  ::QPainterPath* a0;
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QPainterPath, &a0))
        {
             ::QPainterPath*sipRes;

            sipRes = new  ::QPainterPath(sipCpp->map(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_map, doc_QTransform_map);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_mapToPolygon, "mapToPolygon(self, QRect) -> QPolygon");

extern "C" {static PyObject *meth_QTransform_mapToPolygon(PyObject *, PyObject *);}
static PyObject *meth_QTransform_mapToPolygon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect* a0;
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QRect, &a0))
        {
             ::QPolygon*sipRes;

            sipRes = new  ::QPolygon(sipCpp->mapToPolygon(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPolygon,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_mapToPolygon, doc_QTransform_mapToPolygon);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_mapRect, "mapRect(self, QRect) -> QRect\n"
"mapRect(self, QRectF) -> QRectF");

extern "C" {static PyObject *meth_QTransform_mapRect(PyObject *, PyObject *);}
static PyObject *meth_QTransform_mapRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect* a0;
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QRect, &a0))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->mapRect(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    {
        const  ::QRectF* a0;
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QRectF, &a0))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->mapRect(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_mapRect, doc_QTransform_mapRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_isAffine, "isAffine(self) -> bool");

extern "C" {static PyObject *meth_QTransform_isAffine(PyObject *, PyObject *);}
static PyObject *meth_QTransform_isAffine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAffine();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_isAffine, doc_QTransform_isAffine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_isIdentity, "isIdentity(self) -> bool");

extern "C" {static PyObject *meth_QTransform_isIdentity(PyObject *, PyObject *);}
static PyObject *meth_QTransform_isIdentity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isIdentity();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_isIdentity, doc_QTransform_isIdentity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_isInvertible, "isInvertible(self) -> bool");

extern "C" {static PyObject *meth_QTransform_isInvertible(PyObject *, PyObject *);}
static PyObject *meth_QTransform_isInvertible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isInvertible();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_isInvertible, doc_QTransform_isInvertible);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_isScaling, "isScaling(self) -> bool");

extern "C" {static PyObject *meth_QTransform_isScaling(PyObject *, PyObject *);}
static PyObject *meth_QTransform_isScaling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isScaling();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_isScaling, doc_QTransform_isScaling);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_isRotating, "isRotating(self) -> bool");

extern "C" {static PyObject *meth_QTransform_isRotating(PyObject *, PyObject *);}
static PyObject *meth_QTransform_isRotating(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRotating();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_isRotating, doc_QTransform_isRotating);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_isTranslating, "isTranslating(self) -> bool");

extern "C" {static PyObject *meth_QTransform_isTranslating(PyObject *, PyObject *);}
static PyObject *meth_QTransform_isTranslating(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isTranslating();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_isTranslating, doc_QTransform_isTranslating);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_determinant, "determinant(self) -> float");

extern "C" {static PyObject *meth_QTransform_determinant(PyObject *, PyObject *);}
static PyObject *meth_QTransform_determinant(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->determinant();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_determinant, doc_QTransform_determinant);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_m11, "m11(self) -> float");

extern "C" {static PyObject *meth_QTransform_m11(PyObject *, PyObject *);}
static PyObject *meth_QTransform_m11(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->m11();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_m11, doc_QTransform_m11);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_m12, "m12(self) -> float");

extern "C" {static PyObject *meth_QTransform_m12(PyObject *, PyObject *);}
static PyObject *meth_QTransform_m12(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->m12();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_m12, doc_QTransform_m12);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_m13, "m13(self) -> float");

extern "C" {static PyObject *meth_QTransform_m13(PyObject *, PyObject *);}
static PyObject *meth_QTransform_m13(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->m13();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_m13, doc_QTransform_m13);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_m21, "m21(self) -> float");

extern "C" {static PyObject *meth_QTransform_m21(PyObject *, PyObject *);}
static PyObject *meth_QTransform_m21(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->m21();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_m21, doc_QTransform_m21);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_m22, "m22(self) -> float");

extern "C" {static PyObject *meth_QTransform_m22(PyObject *, PyObject *);}
static PyObject *meth_QTransform_m22(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->m22();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_m22, doc_QTransform_m22);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_m23, "m23(self) -> float");

extern "C" {static PyObject *meth_QTransform_m23(PyObject *, PyObject *);}
static PyObject *meth_QTransform_m23(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->m23();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_m23, doc_QTransform_m23);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_m31, "m31(self) -> float");

extern "C" {static PyObject *meth_QTransform_m31(PyObject *, PyObject *);}
static PyObject *meth_QTransform_m31(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->m31();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_m31, doc_QTransform_m31);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_m32, "m32(self) -> float");

extern "C" {static PyObject *meth_QTransform_m32(PyObject *, PyObject *);}
static PyObject *meth_QTransform_m32(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->m32();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_m32, doc_QTransform_m32);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_m33, "m33(self) -> float");

extern "C" {static PyObject *meth_QTransform_m33(PyObject *, PyObject *);}
static PyObject *meth_QTransform_m33(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->m33();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_m33, doc_QTransform_m33);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_dx, "dx(self) -> float");

extern "C" {static PyObject *meth_QTransform_dx(PyObject *, PyObject *);}
static PyObject *meth_QTransform_dx(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->dx();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_dx, doc_QTransform_dx);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_dy, "dy(self) -> float");

extern "C" {static PyObject *meth_QTransform_dy(PyObject *, PyObject *);}
static PyObject *meth_QTransform_dy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->dy();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_dy, doc_QTransform_dy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_fromTranslate, "fromTranslate(float, float) -> QTransform");

extern "C" {static PyObject *meth_QTransform_fromTranslate(PyObject *, PyObject *);}
static PyObject *meth_QTransform_fromTranslate(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "dd", &a0, &a1))
        {
             ::QTransform*sipRes;

            sipRes = new  ::QTransform( ::QTransform::fromTranslate(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_fromTranslate, doc_QTransform_fromTranslate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTransform_fromScale, "fromScale(float, float) -> QTransform");

extern "C" {static PyObject *meth_QTransform_fromScale(PyObject *, PyObject *);}
static PyObject *meth_QTransform_fromScale(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "dd", &a0, &a1))
        {
             ::QTransform*sipRes;

            sipRes = new  ::QTransform( ::QTransform::fromScale(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_fromScale, doc_QTransform_fromScale);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QTransform___div__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___div__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform* a0;
         ::qreal a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_QTransform, &a0, &a1))
        {
             ::QTransform*sipRes;

            sipRes = new  ::QTransform((*a0 / a1));

            return sipConvertFromNewType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, div_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QTransform___add__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform* a0;
         ::qreal a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_QTransform, &a0, &a1))
        {
             ::QTransform*sipRes;

            sipRes = new  ::QTransform((*a0 + a1));

            return sipConvertFromNewType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, add_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QTransform___sub__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform* a0;
         ::qreal a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_QTransform, &a0, &a1))
        {
             ::QTransform*sipRes;

            sipRes = new  ::QTransform((*a0 - a1));

            return sipConvertFromNewType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, sub_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static long slot_QTransform___hash__(PyObject *);}
static long slot_QTransform___hash__(PyObject *sipSelf)
{
     ::QTransform *sipCpp = reinterpret_cast< ::QTransform *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTransform));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 112 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtransform.sip"
        sipRes = qHash(*sipCpp);
#line 23786 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QTransform___isub__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTransform)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTransform *sipCpp = reinterpret_cast< ::QTransform *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTransform));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            sipCpp-> ::QTransform::operator-=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTransform___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTransform)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTransform *sipCpp = reinterpret_cast< ::QTransform *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTransform));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            sipCpp-> ::QTransform::operator+=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTransform___idiv__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___idiv__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTransform)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTransform *sipCpp = reinterpret_cast< ::QTransform *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTransform));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            sipCpp-> ::QTransform::operator/=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTransform___matmul__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___matmul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTransform* a0;
        const  ::QTransform* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QTransform, &a0, sipType_QTransform, &a1))
        {
             ::QTransform*sipRes;

            sipRes = new  ::QTransform((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, matmul_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QTransform___mul__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTransform* a0;
        const  ::QTransform* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QTransform, &a0, sipType_QTransform, &a1))
        {
             ::QTransform*sipRes;

            sipRes = new  ::QTransform((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    {
        const  ::QTransform* a0;
         ::qreal a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_QTransform, &a0, &a1))
        {
             ::QTransform*sipRes;

            sipRes = new  ::QTransform((*a0 * a1));

            return sipConvertFromNewType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, mul_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QTransform___imatmul__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___imatmul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTransform)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTransform *sipCpp = reinterpret_cast< ::QTransform *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTransform));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTransform, &a0))
        {
            sipCpp-> ::QTransform::operator*=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTransform___imul__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___imul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTransform)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTransform *sipCpp = reinterpret_cast< ::QTransform *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTransform));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTransform, &a0))
        {
            sipCpp-> ::QTransform::operator*=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
         ::qreal a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            sipCpp-> ::QTransform::operator*=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTransform___ne__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTransform *sipCpp = reinterpret_cast< ::QTransform *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTransform));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTransform, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QTransform::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QTransform, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTransform___eq__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTransform *sipCpp = reinterpret_cast< ::QTransform *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTransform));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTransform, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QTransform::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QTransform, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QTransform(void *, int);}
static void release_QTransform(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTransform *>(sipCppV);
}


extern "C" {static PyObject *pickle_QTransform(void *);}
static PyObject *pickle_QTransform(void *sipCppV)
{
     ::QTransform *sipCpp = reinterpret_cast< ::QTransform *>(sipCppV);
    PyObject *sipRes;

#line 34 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtransform.sip"
    sipRes = Py_BuildValue((char *)"ddddddddd", sipCpp->m11(), sipCpp->m12(), sipCpp->m13(), sipCpp->m21(), sipCpp->m22(), sipCpp->m23(), sipCpp->m31(), sipCpp->m32(), sipCpp->m33());
#line 24158 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

    return sipRes;
}


extern "C" {static void assign_QTransform(void *, SIP_SSIZE_T, void *);}
static void assign_QTransform(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTransform *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTransform *>(sipSrc);
}


extern "C" {static void *array_QTransform(SIP_SSIZE_T);}
static void *array_QTransform(SIP_SSIZE_T sipNrElem)
{
    return new  ::QTransform[sipNrElem];
}


extern "C" {static void *copy_QTransform(const void *, SIP_SSIZE_T);}
static void *copy_QTransform(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QTransform(reinterpret_cast<const  ::QTransform *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTransform(sipSimpleWrapper *);}
static void dealloc_QTransform(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTransform(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTransform(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTransform(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTransform *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTransform();

            return sipCpp;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
         ::qreal a4;
         ::qreal a5;
         ::qreal a6;
         ::qreal a7;
         ::qreal a8 = 1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_m33,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "dddddddd|d", &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8))
        {
            sipCpp = new  ::QTransform(a0,a1,a2,a3,a4,a5,a6,a7,a8);

            return sipCpp;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
         ::qreal a4;
         ::qreal a5;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "dddddd", &a0, &a1, &a2, &a3, &a4, &a5))
        {
            sipCpp = new  ::QTransform(a0,a1,a2,a3,a4,a5);

            return sipCpp;
        }
    }

    {
        const  ::QTransform* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTransform, &a0))
        {
            sipCpp = new  ::QTransform(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QTransform[] = {
    {(void *)slot_QTransform___div__, div_slot},
    {(void *)slot_QTransform___add__, add_slot},
    {(void *)slot_QTransform___sub__, sub_slot},
    {(void *)slot_QTransform___hash__, hash_slot},
    {(void *)slot_QTransform___isub__, isub_slot},
    {(void *)slot_QTransform___iadd__, iadd_slot},
    {(void *)slot_QTransform___idiv__, idiv_slot},
    {(void *)slot_QTransform___matmul__, matmul_slot},
    {(void *)slot_QTransform___mul__, mul_slot},
    {(void *)slot_QTransform___imatmul__, imatmul_slot},
    {(void *)slot_QTransform___imul__, imul_slot},
    {(void *)slot_QTransform___ne__, ne_slot},
    {(void *)slot_QTransform___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QTransform[] = {
    {SIP_MLNAME_CAST(sipName_adjoint), meth_QTransform_adjoint, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_adjoint)},
    {SIP_MLNAME_CAST(sipName_determinant), meth_QTransform_determinant, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_determinant)},
    {SIP_MLNAME_CAST(sipName_dx), meth_QTransform_dx, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_dx)},
    {SIP_MLNAME_CAST(sipName_dy), meth_QTransform_dy, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_dy)},
    {SIP_MLNAME_CAST(sipName_fromScale), meth_QTransform_fromScale, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_fromScale)},
    {SIP_MLNAME_CAST(sipName_fromTranslate), meth_QTransform_fromTranslate, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_fromTranslate)},
    {SIP_MLNAME_CAST(sipName_inverted), SIP_MLMETH_CAST(meth_QTransform_inverted), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTransform_inverted)},
    {SIP_MLNAME_CAST(sipName_isAffine), meth_QTransform_isAffine, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_isAffine)},
    {SIP_MLNAME_CAST(sipName_isIdentity), meth_QTransform_isIdentity, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_isIdentity)},
    {SIP_MLNAME_CAST(sipName_isInvertible), meth_QTransform_isInvertible, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_isInvertible)},
    {SIP_MLNAME_CAST(sipName_isRotating), meth_QTransform_isRotating, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_isRotating)},
    {SIP_MLNAME_CAST(sipName_isScaling), meth_QTransform_isScaling, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_isScaling)},
    {SIP_MLNAME_CAST(sipName_isTranslating), meth_QTransform_isTranslating, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_isTranslating)},
    {SIP_MLNAME_CAST(sipName_m11), meth_QTransform_m11, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_m11)},
    {SIP_MLNAME_CAST(sipName_m12), meth_QTransform_m12, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_m12)},
    {SIP_MLNAME_CAST(sipName_m13), meth_QTransform_m13, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_m13)},
    {SIP_MLNAME_CAST(sipName_m21), meth_QTransform_m21, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_m21)},
    {SIP_MLNAME_CAST(sipName_m22), meth_QTransform_m22, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_m22)},
    {SIP_MLNAME_CAST(sipName_m23), meth_QTransform_m23, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_m23)},
    {SIP_MLNAME_CAST(sipName_m31), meth_QTransform_m31, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_m31)},
    {SIP_MLNAME_CAST(sipName_m32), meth_QTransform_m32, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_m32)},
    {SIP_MLNAME_CAST(sipName_m33), meth_QTransform_m33, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_m33)},
    {SIP_MLNAME_CAST(sipName_map), meth_QTransform_map, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_map)},
    {SIP_MLNAME_CAST(sipName_mapRect), meth_QTransform_mapRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_mapRect)},
    {SIP_MLNAME_CAST(sipName_mapToPolygon), meth_QTransform_mapToPolygon, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_mapToPolygon)},
    {SIP_MLNAME_CAST(sipName_quadToQuad), meth_QTransform_quadToQuad, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_quadToQuad)},
    {SIP_MLNAME_CAST(sipName_quadToSquare), meth_QTransform_quadToSquare, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_quadToSquare)},
    {SIP_MLNAME_CAST(sipName_reset), meth_QTransform_reset, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_reset)},
    {SIP_MLNAME_CAST(sipName_rotate), SIP_MLMETH_CAST(meth_QTransform_rotate), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTransform_rotate)},
    {SIP_MLNAME_CAST(sipName_rotateRadians), SIP_MLMETH_CAST(meth_QTransform_rotateRadians), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTransform_rotateRadians)},
    {SIP_MLNAME_CAST(sipName_scale), meth_QTransform_scale, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_scale)},
    {SIP_MLNAME_CAST(sipName_setMatrix), meth_QTransform_setMatrix, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_setMatrix)},
    {SIP_MLNAME_CAST(sipName_shear), meth_QTransform_shear, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_shear)},
    {SIP_MLNAME_CAST(sipName_squareToQuad), meth_QTransform_squareToQuad, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_squareToQuad)},
    {SIP_MLNAME_CAST(sipName_translate), meth_QTransform_translate, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_translate)},
    {SIP_MLNAME_CAST(sipName_transposed), meth_QTransform_transposed, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_transposed)},
    {SIP_MLNAME_CAST(sipName_type), meth_QTransform_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_type)}
};

static sipEnumMemberDef enummembers_QTransform[] = {
    {sipName_TxNone, static_cast<int>( ::QTransform::TxNone), 353},
    {sipName_TxProject, static_cast<int>( ::QTransform::TxProject), 353},
    {sipName_TxRotate, static_cast<int>( ::QTransform::TxRotate), 353},
    {sipName_TxScale, static_cast<int>( ::QTransform::TxScale), 353},
    {sipName_TxShear, static_cast<int>( ::QTransform::TxShear), 353},
    {sipName_TxTranslate, static_cast<int>( ::QTransform::TxTranslate), 353},
};

PyDoc_STRVAR(doc_QTransform, "\1QTransform()\n"
"QTransform(float, float, float, float, float, float, float, float, m33: float = 1)\n"
"QTransform(float, float, float, float, float, float)\n"
"QTransform(QTransform)");


static pyqt5ClassPluginDef plugin_QTransform = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTransform = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTransform,
        {SIP_NULLPTR},
        &plugin_QTransform
    },
    {
        sipNameNr_QTransform,
        {0, 0, 1},
        37, methods_QTransform,
        6, enummembers_QTransform,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTransform,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QTransform,
    init_type_QTransform,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTransform,
    assign_QTransform,
    array_QTransform,
    copy_QTransform,
    release_QTransform,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    pickle_QTransform,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtouchdevice.sip"
#include <qtouchdevice.h>
#line 24408 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtouchdevice.sip"
#include <qtouchdevice.h>
#line 24412 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static long slot_QTouchDevice_Capabilities___hash__(PyObject *);}
static long slot_QTouchDevice_Capabilities___hash__(PyObject *sipSelf)
{
     ::QTouchDevice::Capabilities *sipCpp = reinterpret_cast< ::QTouchDevice::Capabilities *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTouchDevice_Capabilities));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QTouchDevice::Capabilities::Int();
#line 24430 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QTouchDevice_Capabilities___bool__(PyObject *);}
static int slot_QTouchDevice_Capabilities___bool__(PyObject *sipSelf)
{
     ::QTouchDevice::Capabilities *sipCpp = reinterpret_cast< ::QTouchDevice::Capabilities *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTouchDevice_Capabilities));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QTouchDevice::Capabilities::Int() != 0);
#line 24455 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QTouchDevice_Capabilities___ne__(PyObject *,PyObject *);}
static PyObject *slot_QTouchDevice_Capabilities___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTouchDevice::Capabilities *sipCpp = reinterpret_cast< ::QTouchDevice::Capabilities *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTouchDevice_Capabilities));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTouchDevice::Capabilities* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QTouchDevice_Capabilities, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QTouchDevice::Capabilities::Int() != a0->operator QTouchDevice::Capabilities::Int());
#line 24485 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
            sipReleaseType(const_cast< ::QTouchDevice::Capabilities *>(a0),sipType_QTouchDevice_Capabilities,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QTouchDevice_Capabilities, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTouchDevice_Capabilities___eq__(PyObject *,PyObject *);}
static PyObject *slot_QTouchDevice_Capabilities___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTouchDevice::Capabilities *sipCpp = reinterpret_cast< ::QTouchDevice::Capabilities *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTouchDevice_Capabilities));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTouchDevice::Capabilities* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QTouchDevice_Capabilities, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QTouchDevice::Capabilities::Int() == a0->operator QTouchDevice::Capabilities::Int());
#line 24521 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
            sipReleaseType(const_cast< ::QTouchDevice::Capabilities *>(a0),sipType_QTouchDevice_Capabilities,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QTouchDevice_Capabilities, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTouchDevice_Capabilities___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QTouchDevice_Capabilities___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTouchDevice_Capabilities)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTouchDevice::Capabilities *sipCpp = reinterpret_cast< ::QTouchDevice::Capabilities *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTouchDevice_Capabilities));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QTouchDevice::Capabilities(*sipCpp ^ a0);
#line 24560 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTouchDevice_Capabilities___xor__(PyObject *,PyObject *);}
static PyObject *slot_QTouchDevice_Capabilities___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTouchDevice::Capabilities* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QTouchDevice_Capabilities, &a0, &a0State, &a1))
        {
             ::QTouchDevice::Capabilities*sipRes;

            sipRes = new  ::QTouchDevice::Capabilities((*a0 ^ a1));
            sipReleaseType(a0,sipType_QTouchDevice_Capabilities,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTouchDevice_Capabilities,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QTouchDevice_Capabilities___ior__(PyObject *,PyObject *);}
static PyObject *slot_QTouchDevice_Capabilities___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTouchDevice_Capabilities)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTouchDevice::Capabilities *sipCpp = reinterpret_cast< ::QTouchDevice::Capabilities *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTouchDevice_Capabilities));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QTouchDevice::Capabilities(*sipCpp | a0);
#line 24632 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTouchDevice_Capabilities___or__(PyObject *,PyObject *);}
static PyObject *slot_QTouchDevice_Capabilities___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTouchDevice::Capabilities* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QTouchDevice_Capabilities, &a0, &a0State, &a1))
        {
             ::QTouchDevice::Capabilities*sipRes;

            sipRes = new  ::QTouchDevice::Capabilities((*a0 | a1));
            sipReleaseType(a0,sipType_QTouchDevice_Capabilities,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTouchDevice_Capabilities,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QTouchDevice_Capabilities___iand__(PyObject *,PyObject *);}
static PyObject *slot_QTouchDevice_Capabilities___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTouchDevice_Capabilities)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTouchDevice::Capabilities *sipCpp = reinterpret_cast< ::QTouchDevice::Capabilities *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTouchDevice_Capabilities));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QTouchDevice::Capabilities::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTouchDevice_Capabilities___and__(PyObject *,PyObject *);}
static PyObject *slot_QTouchDevice_Capabilities___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTouchDevice::Capabilities* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QTouchDevice_Capabilities, &a0, &a0State, &a1))
        {
             ::QTouchDevice::Capabilities*sipRes;

            sipRes = new  ::QTouchDevice::Capabilities((*a0 & a1));
            sipReleaseType(a0,sipType_QTouchDevice_Capabilities,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTouchDevice_Capabilities,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QTouchDevice_Capabilities___invert__(PyObject *);}
static PyObject *slot_QTouchDevice_Capabilities___invert__(PyObject *sipSelf)
{
     ::QTouchDevice::Capabilities *sipCpp = reinterpret_cast< ::QTouchDevice::Capabilities *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTouchDevice_Capabilities));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QTouchDevice::Capabilities*sipRes;

            sipRes = new  ::QTouchDevice::Capabilities(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QTouchDevice_Capabilities,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QTouchDevice_Capabilities___int__(PyObject *);}
static PyObject *slot_QTouchDevice_Capabilities___int__(PyObject *sipSelf)
{
     ::QTouchDevice::Capabilities *sipCpp = reinterpret_cast< ::QTouchDevice::Capabilities *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTouchDevice_Capabilities));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTouchDevice_Capabilities(void *, int);}
static void release_QTouchDevice_Capabilities(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTouchDevice::Capabilities *>(sipCppV);
}


extern "C" {static void assign_QTouchDevice_Capabilities(void *, SIP_SSIZE_T, void *);}
static void assign_QTouchDevice_Capabilities(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTouchDevice::Capabilities *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTouchDevice::Capabilities *>(sipSrc);
}


extern "C" {static void *array_QTouchDevice_Capabilities(SIP_SSIZE_T);}
static void *array_QTouchDevice_Capabilities(SIP_SSIZE_T sipNrElem)
{
    return new  ::QTouchDevice::Capabilities[sipNrElem];
}


extern "C" {static void *copy_QTouchDevice_Capabilities(const void *, SIP_SSIZE_T);}
static void *copy_QTouchDevice_Capabilities(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QTouchDevice::Capabilities(reinterpret_cast<const  ::QTouchDevice::Capabilities *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTouchDevice_Capabilities(sipSimpleWrapper *);}
static void dealloc_QTouchDevice_Capabilities(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTouchDevice_Capabilities(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTouchDevice_Capabilities(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTouchDevice_Capabilities(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTouchDevice::Capabilities *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTouchDevice::Capabilities();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QTouchDevice::Capabilities(a0);

            return sipCpp;
        }
    }

    {
        const  ::QTouchDevice::Capabilities* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QTouchDevice_Capabilities, &a0, &a0State))
        {
            sipCpp = new  ::QTouchDevice::Capabilities(*a0);
            sipReleaseType(const_cast< ::QTouchDevice::Capabilities *>(a0),sipType_QTouchDevice_Capabilities,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QTouchDevice_Capabilities(PyObject *, void **, int *, PyObject *);}
static int convertTo_QTouchDevice_Capabilities(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QTouchDevice::Capabilities **sipCppPtr = reinterpret_cast< ::QTouchDevice::Capabilities **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QTouchDevice::Capabilities is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QTouchDevice_CapabilityFlag)) ||
            sipCanConvertToType(sipPy, sipType_QTouchDevice_Capabilities, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QTouchDevice_CapabilityFlag)))
{
    *sipCppPtr = new QTouchDevice::Capabilities(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QTouchDevice::Capabilities *>(sipConvertToType(sipPy, sipType_QTouchDevice_Capabilities, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 24900 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QTouchDevice_Capabilities[] = {
    {(void *)slot_QTouchDevice_Capabilities___hash__, hash_slot},
    {(void *)slot_QTouchDevice_Capabilities___bool__, bool_slot},
    {(void *)slot_QTouchDevice_Capabilities___ne__, ne_slot},
    {(void *)slot_QTouchDevice_Capabilities___eq__, eq_slot},
    {(void *)slot_QTouchDevice_Capabilities___ixor__, ixor_slot},
    {(void *)slot_QTouchDevice_Capabilities___xor__, xor_slot},
    {(void *)slot_QTouchDevice_Capabilities___ior__, ior_slot},
    {(void *)slot_QTouchDevice_Capabilities___or__, or_slot},
    {(void *)slot_QTouchDevice_Capabilities___iand__, iand_slot},
    {(void *)slot_QTouchDevice_Capabilities___and__, and_slot},
    {(void *)slot_QTouchDevice_Capabilities___invert__, invert_slot},
    {(void *)slot_QTouchDevice_Capabilities___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QTouchDevice_Capabilities, "\1QTouchDevice.Capabilities()\n"
"QTouchDevice.Capabilities(Union[QTouchDevice.Capabilities, QTouchDevice.CapabilityFlag])\n"
"QTouchDevice.Capabilities(QTouchDevice.Capabilities)");


static pyqt5ClassPluginDef plugin_QTouchDevice_Capabilities = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTouchDevice_Capabilities = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTouchDevice__Capabilities,
        {SIP_NULLPTR},
        &plugin_QTouchDevice_Capabilities
    },
    {
        sipNameNr_Capabilities,
        {344, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTouchDevice_Capabilities,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QTouchDevice_Capabilities,
    init_type_QTouchDevice_Capabilities,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTouchDevice_Capabilities,
    assign_QTouchDevice_Capabilities,
    array_QTouchDevice_Capabilities,
    copy_QTouchDevice_Capabilities,
    release_QTouchDevice_Capabilities,
    SIP_NULLPTR,
    convertTo_QTouchDevice_Capabilities,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtouchdevice.sip"
#include <qtouchdevice.h>
#line 24988 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtouchdevice.sip"
#include <qtouchdevice.h>
#line 24992 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 24995 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 24998 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QTouchDevice_devices, "devices() -> List[QTouchDevice]");

extern "C" {static PyObject *meth_QTouchDevice_devices(PyObject *, PyObject *);}
static PyObject *meth_QTouchDevice_devices(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList<const  ::QTouchDevice*>*sipRes;

            sipRes = new QList<const  ::QTouchDevice*>( ::QTouchDevice::devices());

            return sipConvertFromNewType(sipRes,sipType_QList_0111QTouchDevice,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTouchDevice, sipName_devices, doc_QTouchDevice_devices);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTouchDevice_name, "name(self) -> str");

extern "C" {static PyObject *meth_QTouchDevice_name(PyObject *, PyObject *);}
static PyObject *meth_QTouchDevice_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTouchDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTouchDevice, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTouchDevice, sipName_name, doc_QTouchDevice_name);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTouchDevice_type, "type(self) -> QTouchDevice.DeviceType");

extern "C" {static PyObject *meth_QTouchDevice_type(PyObject *, PyObject *);}
static PyObject *meth_QTouchDevice_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTouchDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTouchDevice, &sipCpp))
        {
             ::QTouchDevice::DeviceType sipRes;

            sipRes = sipCpp->type();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QTouchDevice_DeviceType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTouchDevice, sipName_type, doc_QTouchDevice_type);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTouchDevice_capabilities, "capabilities(self) -> QTouchDevice.Capabilities");

extern "C" {static PyObject *meth_QTouchDevice_capabilities(PyObject *, PyObject *);}
static PyObject *meth_QTouchDevice_capabilities(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTouchDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTouchDevice, &sipCpp))
        {
             ::QTouchDevice::Capabilities*sipRes;

            sipRes = new  ::QTouchDevice::Capabilities(sipCpp->capabilities());

            return sipConvertFromNewType(sipRes,sipType_QTouchDevice_Capabilities,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTouchDevice, sipName_capabilities, doc_QTouchDevice_capabilities);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTouchDevice_setName, "setName(self, str)");

extern "C" {static PyObject *meth_QTouchDevice_setName(PyObject *, PyObject *);}
static PyObject *meth_QTouchDevice_setName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTouchDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTouchDevice, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTouchDevice, sipName_setName, doc_QTouchDevice_setName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTouchDevice_setType, "setType(self, QTouchDevice.DeviceType)");

extern "C" {static PyObject *meth_QTouchDevice_setType(PyObject *, PyObject *);}
static PyObject *meth_QTouchDevice_setType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTouchDevice::DeviceType a0;
         ::QTouchDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTouchDevice, &sipCpp, sipType_QTouchDevice_DeviceType, &a0))
        {
            sipCpp->setType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTouchDevice, sipName_setType, doc_QTouchDevice_setType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTouchDevice_setCapabilities, "setCapabilities(self, Union[QTouchDevice.Capabilities, QTouchDevice.CapabilityFlag])");

extern "C" {static PyObject *meth_QTouchDevice_setCapabilities(PyObject *, PyObject *);}
static PyObject *meth_QTouchDevice_setCapabilities(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTouchDevice::Capabilities* a0;
        int a0State = 0;
         ::QTouchDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTouchDevice, &sipCpp, sipType_QTouchDevice_Capabilities, &a0, &a0State))
        {
            sipCpp->setCapabilities(*a0);
            sipReleaseType(a0,sipType_QTouchDevice_Capabilities,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTouchDevice, sipName_setCapabilities, doc_QTouchDevice_setCapabilities);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTouchDevice_maximumTouchPoints, "maximumTouchPoints(self) -> int");

extern "C" {static PyObject *meth_QTouchDevice_maximumTouchPoints(PyObject *, PyObject *);}
static PyObject *meth_QTouchDevice_maximumTouchPoints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTouchDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTouchDevice, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maximumTouchPoints();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTouchDevice, sipName_maximumTouchPoints, doc_QTouchDevice_maximumTouchPoints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTouchDevice_setMaximumTouchPoints, "setMaximumTouchPoints(self, int)");

extern "C" {static PyObject *meth_QTouchDevice_setMaximumTouchPoints(PyObject *, PyObject *);}
static PyObject *meth_QTouchDevice_setMaximumTouchPoints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTouchDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTouchDevice, &sipCpp, &a0))
        {
            sipCpp->setMaximumTouchPoints(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTouchDevice, sipName_setMaximumTouchPoints, doc_QTouchDevice_setMaximumTouchPoints);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTouchDevice(void *, int);}
static void release_QTouchDevice(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTouchDevice *>(sipCppV);
}


extern "C" {static void assign_QTouchDevice(void *, SIP_SSIZE_T, void *);}
static void assign_QTouchDevice(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTouchDevice *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTouchDevice *>(sipSrc);
}


extern "C" {static void *array_QTouchDevice(SIP_SSIZE_T);}
static void *array_QTouchDevice(SIP_SSIZE_T sipNrElem)
{
    return new  ::QTouchDevice[sipNrElem];
}


extern "C" {static void *copy_QTouchDevice(const void *, SIP_SSIZE_T);}
static void *copy_QTouchDevice(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QTouchDevice(reinterpret_cast<const  ::QTouchDevice *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTouchDevice(sipSimpleWrapper *);}
static void dealloc_QTouchDevice(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTouchDevice(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTouchDevice(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTouchDevice(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTouchDevice *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTouchDevice();

            return sipCpp;
        }
    }

    {
        const  ::QTouchDevice* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTouchDevice, &a0))
        {
            sipCpp = new  ::QTouchDevice(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QTouchDevice[] = {
    {SIP_MLNAME_CAST(sipName_capabilities), meth_QTouchDevice_capabilities, METH_VARARGS, SIP_MLDOC_CAST(doc_QTouchDevice_capabilities)},
    {SIP_MLNAME_CAST(sipName_devices), meth_QTouchDevice_devices, METH_VARARGS, SIP_MLDOC_CAST(doc_QTouchDevice_devices)},
    {SIP_MLNAME_CAST(sipName_maximumTouchPoints), meth_QTouchDevice_maximumTouchPoints, METH_VARARGS, SIP_MLDOC_CAST(doc_QTouchDevice_maximumTouchPoints)},
    {SIP_MLNAME_CAST(sipName_name), meth_QTouchDevice_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QTouchDevice_name)},
    {SIP_MLNAME_CAST(sipName_setCapabilities), meth_QTouchDevice_setCapabilities, METH_VARARGS, SIP_MLDOC_CAST(doc_QTouchDevice_setCapabilities)},
    {SIP_MLNAME_CAST(sipName_setMaximumTouchPoints), meth_QTouchDevice_setMaximumTouchPoints, METH_VARARGS, SIP_MLDOC_CAST(doc_QTouchDevice_setMaximumTouchPoints)},
    {SIP_MLNAME_CAST(sipName_setName), meth_QTouchDevice_setName, METH_VARARGS, SIP_MLDOC_CAST(doc_QTouchDevice_setName)},
    {SIP_MLNAME_CAST(sipName_setType), meth_QTouchDevice_setType, METH_VARARGS, SIP_MLDOC_CAST(doc_QTouchDevice_setType)},
    {SIP_MLNAME_CAST(sipName_type), meth_QTouchDevice_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QTouchDevice_type)}
};

static sipEnumMemberDef enummembers_QTouchDevice[] = {
    {sipName_Area, static_cast<int>( ::QTouchDevice::Area), 346},
    {sipName_MouseEmulation, static_cast<int>( ::QTouchDevice::MouseEmulation), 346},
    {sipName_NormalizedPosition, static_cast<int>( ::QTouchDevice::NormalizedPosition), 346},
    {sipName_Position, static_cast<int>( ::QTouchDevice::Position), 346},
    {sipName_Pressure, static_cast<int>( ::QTouchDevice::Pressure), 346},
    {sipName_RawPositions, static_cast<int>( ::QTouchDevice::RawPositions), 346},
    {sipName_TouchPad, static_cast<int>( ::QTouchDevice::TouchPad), 347},
    {sipName_TouchScreen, static_cast<int>( ::QTouchDevice::TouchScreen), 347},
    {sipName_Velocity, static_cast<int>( ::QTouchDevice::Velocity), 346},
};

PyDoc_STRVAR(doc_QTouchDevice, "\1QTouchDevice()\n"
"QTouchDevice(QTouchDevice)");


static pyqt5ClassPluginDef plugin_QTouchDevice = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTouchDevice = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTouchDevice,
        {SIP_NULLPTR},
        &plugin_QTouchDevice
    },
    {
        sipNameNr_QTouchDevice,
        {0, 0, 1},
        9, methods_QTouchDevice,
        9, enummembers_QTouchDevice,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTouchDevice,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QTouchDevice,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTouchDevice,
    assign_QTouchDevice,
    array_QTouchDevice,
    copy_QTouchDevice,
    release_QTouchDevice,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 50 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtexttable.sip"
#include <qtexttable.h>
#line 25412 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 25416 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 527 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 25419 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextcursor.sip"
#include <qtextcursor.h>
#line 25422 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtexttable.sip"
#include <qtexttable.h>
#line 25425 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 464 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 25428 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 76 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 25433 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 25436 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 25439 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 25442 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 25445 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 25448 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 25451 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 25454 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 25457 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 25460 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 25463 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 25466 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 25469 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 25472 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 25475 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 25478 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 25481 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 25484 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 25487 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


class sipQTextTable : public  ::QTextTable
{
public:
    sipQTextTable( ::QTextDocument*);
    virtual ~sipQTextTable();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTextTable(const sipQTextTable &);
    sipQTextTable &operator = (const sipQTextTable &);

    char sipPyMethods[7];
};

sipQTextTable::sipQTextTable( ::QTextDocument*a0):  ::QTextTable(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTextTable::~sipQTextTable()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQTextTable::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QTextTable);

    return  ::QTextTable::metaObject();
}

int sipQTextTable::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QTextTable::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QTextTable,_c,_id,_a);

    return _id;
}

void *sipQTextTable::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QTextTable, _clname, &sipCpp) ? sipCpp :  ::QTextTable::qt_metacast(_clname));
}

bool sipQTextTable::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QTextTable::event(a0);

    extern bool sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_5(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQTextTable::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QTextTable::eventFilter(a0,a1);

    extern bool sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_4(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQTextTable::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QTextTable::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_3(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextTable::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QTextTable::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_2(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextTable::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QTextTable::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_1(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextTable::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QTextTable::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextTable::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QTextTable::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QTextTable_resize, "resize(self, int, int)");

extern "C" {static PyObject *meth_QTextTable_resize(PyObject *, PyObject *);}
static PyObject *meth_QTextTable_resize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTextTable, &sipCpp, &a0, &a1))
        {
            sipCpp->resize(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTable, sipName_resize, doc_QTextTable_resize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTable_insertRows, "insertRows(self, int, int)");

extern "C" {static PyObject *meth_QTextTable_insertRows(PyObject *, PyObject *);}
static PyObject *meth_QTextTable_insertRows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTextTable, &sipCpp, &a0, &a1))
        {
            sipCpp->insertRows(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTable, sipName_insertRows, doc_QTextTable_insertRows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTable_insertColumns, "insertColumns(self, int, int)");

extern "C" {static PyObject *meth_QTextTable_insertColumns(PyObject *, PyObject *);}
static PyObject *meth_QTextTable_insertColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTextTable, &sipCpp, &a0, &a1))
        {
            sipCpp->insertColumns(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTable, sipName_insertColumns, doc_QTextTable_insertColumns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTable_removeRows, "removeRows(self, int, int)");

extern "C" {static PyObject *meth_QTextTable_removeRows(PyObject *, PyObject *);}
static PyObject *meth_QTextTable_removeRows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTextTable, &sipCpp, &a0, &a1))
        {
            sipCpp->removeRows(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTable, sipName_removeRows, doc_QTextTable_removeRows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTable_removeColumns, "removeColumns(self, int, int)");

extern "C" {static PyObject *meth_QTextTable_removeColumns(PyObject *, PyObject *);}
static PyObject *meth_QTextTable_removeColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTextTable, &sipCpp, &a0, &a1))
        {
            sipCpp->removeColumns(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTable, sipName_removeColumns, doc_QTextTable_removeColumns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTable_mergeCells, "mergeCells(self, int, int, int, int)\n"
"mergeCells(self, QTextCursor)");

extern "C" {static PyObject *meth_QTextTable_mergeCells(PyObject *, PyObject *);}
static PyObject *meth_QTextTable_mergeCells(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3;
         ::QTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QTextTable, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->mergeCells(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QTextCursor* a0;
         ::QTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextTable, &sipCpp, sipType_QTextCursor, &a0))
        {
            sipCpp->mergeCells(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTable, sipName_mergeCells, doc_QTextTable_mergeCells);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTable_splitCell, "splitCell(self, int, int, int, int)");

extern "C" {static PyObject *meth_QTextTable_splitCell(PyObject *, PyObject *);}
static PyObject *meth_QTextTable_splitCell(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3;
         ::QTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QTextTable, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->splitCell(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTable, sipName_splitCell, doc_QTextTable_splitCell);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTable_rows, "rows(self) -> int");

extern "C" {static PyObject *meth_QTextTable_rows(PyObject *, PyObject *);}
static PyObject *meth_QTextTable_rows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTable, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->rows();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTable, sipName_rows, doc_QTextTable_rows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTable_columns, "columns(self) -> int");

extern "C" {static PyObject *meth_QTextTable_columns(PyObject *, PyObject *);}
static PyObject *meth_QTextTable_columns(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTable, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->columns();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTable, sipName_columns, doc_QTextTable_columns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTable_cellAt, "cellAt(self, int, int) -> QTextTableCell\n"
"cellAt(self, int) -> QTextTableCell\n"
"cellAt(self, QTextCursor) -> QTextTableCell");

extern "C" {static PyObject *meth_QTextTable_cellAt(PyObject *, PyObject *);}
static PyObject *meth_QTextTable_cellAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        const  ::QTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTextTable, &sipCpp, &a0, &a1))
        {
             ::QTextTableCell*sipRes;

            sipRes = new  ::QTextTableCell(sipCpp->cellAt(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QTextTableCell,SIP_NULLPTR);
        }
    }

    {
        int a0;
        const  ::QTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextTable, &sipCpp, &a0))
        {
             ::QTextTableCell*sipRes;

            sipRes = new  ::QTextTableCell(sipCpp->cellAt(a0));

            return sipConvertFromNewType(sipRes,sipType_QTextTableCell,SIP_NULLPTR);
        }
    }

    {
        const  ::QTextCursor* a0;
        const  ::QTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextTable, &sipCpp, sipType_QTextCursor, &a0))
        {
             ::QTextTableCell*sipRes;

            sipRes = new  ::QTextTableCell(sipCpp->cellAt(*a0));

            return sipConvertFromNewType(sipRes,sipType_QTextTableCell,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTable, sipName_cellAt, doc_QTextTable_cellAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTable_rowStart, "rowStart(self, QTextCursor) -> QTextCursor");

extern "C" {static PyObject *meth_QTextTable_rowStart(PyObject *, PyObject *);}
static PyObject *meth_QTextTable_rowStart(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor* a0;
        const  ::QTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextTable, &sipCpp, sipType_QTextCursor, &a0))
        {
             ::QTextCursor*sipRes;

            sipRes = new  ::QTextCursor(sipCpp->rowStart(*a0));

            return sipConvertFromNewType(sipRes,sipType_QTextCursor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTable, sipName_rowStart, doc_QTextTable_rowStart);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTable_rowEnd, "rowEnd(self, QTextCursor) -> QTextCursor");

extern "C" {static PyObject *meth_QTextTable_rowEnd(PyObject *, PyObject *);}
static PyObject *meth_QTextTable_rowEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor* a0;
        const  ::QTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextTable, &sipCpp, sipType_QTextCursor, &a0))
        {
             ::QTextCursor*sipRes;

            sipRes = new  ::QTextCursor(sipCpp->rowEnd(*a0));

            return sipConvertFromNewType(sipRes,sipType_QTextCursor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTable, sipName_rowEnd, doc_QTextTable_rowEnd);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTable_format, "format(self) -> QTextTableFormat");

extern "C" {static PyObject *meth_QTextTable_format(PyObject *, PyObject *);}
static PyObject *meth_QTextTable_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTable, &sipCpp))
        {
             ::QTextTableFormat*sipRes;

            sipRes = new  ::QTextTableFormat(sipCpp->format());

            return sipConvertFromNewType(sipRes,sipType_QTextTableFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTable, sipName_format, doc_QTextTable_format);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTable_setFormat, "setFormat(self, QTextTableFormat)");

extern "C" {static PyObject *meth_QTextTable_setFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextTable_setFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextTableFormat* a0;
         ::QTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextTable, &sipCpp, sipType_QTextTableFormat, &a0))
        {
            sipCpp->setFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTable, sipName_setFormat, doc_QTextTable_setFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTable_appendRows, "appendRows(self, int)");

extern "C" {static PyObject *meth_QTextTable_appendRows(PyObject *, PyObject *);}
static PyObject *meth_QTextTable_appendRows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextTable, &sipCpp, &a0))
        {
            sipCpp->appendRows(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTable, sipName_appendRows, doc_QTextTable_appendRows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTable_appendColumns, "appendColumns(self, int)");

extern "C" {static PyObject *meth_QTextTable_appendColumns(PyObject *, PyObject *);}
static PyObject *meth_QTextTable_appendColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextTable, &sipCpp, &a0))
        {
            sipCpp->appendColumns(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTable, sipName_appendColumns, doc_QTextTable_appendColumns);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QTextTable(void *, const sipTypeDef *);}
static void *cast_QTextTable(void *sipCppV, const sipTypeDef *targetType)
{
     ::QTextTable *sipCpp = reinterpret_cast< ::QTextTable *>(sipCppV);

    if (targetType == sipType_QTextFrame)
        return static_cast< ::QTextFrame *>(sipCpp);

    if (targetType == sipType_QTextObject)
        return static_cast< ::QTextObject *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextTable(void *, int);}
static void release_QTextTable(void *sipCppV, int)
{
     ::QTextTable *sipCpp = reinterpret_cast< ::QTextTable *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QTextTable(sipSimpleWrapper *);}
static void dealloc_QTextTable(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQTextTable *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextTable(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QTextTable(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextTable(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQTextTable *sipCpp = SIP_NULLPTR;

    {
         ::QTextDocument* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8", sipType_QTextDocument, &a0))
        {
            sipCpp = new sipQTextTable(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTextTable[] = {{311, 255, 1}};


static PyMethodDef methods_QTextTable[] = {
    {SIP_MLNAME_CAST(sipName_appendColumns), meth_QTextTable_appendColumns, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTable_appendColumns)},
    {SIP_MLNAME_CAST(sipName_appendRows), meth_QTextTable_appendRows, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTable_appendRows)},
    {SIP_MLNAME_CAST(sipName_cellAt), meth_QTextTable_cellAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTable_cellAt)},
    {SIP_MLNAME_CAST(sipName_columns), meth_QTextTable_columns, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTable_columns)},
    {SIP_MLNAME_CAST(sipName_format), meth_QTextTable_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTable_format)},
    {SIP_MLNAME_CAST(sipName_insertColumns), meth_QTextTable_insertColumns, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTable_insertColumns)},
    {SIP_MLNAME_CAST(sipName_insertRows), meth_QTextTable_insertRows, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTable_insertRows)},
    {SIP_MLNAME_CAST(sipName_mergeCells), meth_QTextTable_mergeCells, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTable_mergeCells)},
    {SIP_MLNAME_CAST(sipName_removeColumns), meth_QTextTable_removeColumns, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTable_removeColumns)},
    {SIP_MLNAME_CAST(sipName_removeRows), meth_QTextTable_removeRows, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTable_removeRows)},
    {SIP_MLNAME_CAST(sipName_resize), meth_QTextTable_resize, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTable_resize)},
    {SIP_MLNAME_CAST(sipName_rowEnd), meth_QTextTable_rowEnd, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTable_rowEnd)},
    {SIP_MLNAME_CAST(sipName_rowStart), meth_QTextTable_rowStart, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTable_rowStart)},
    {SIP_MLNAME_CAST(sipName_rows), meth_QTextTable_rows, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTable_rows)},
    {SIP_MLNAME_CAST(sipName_setFormat), meth_QTextTable_setFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTable_setFormat)},
    {SIP_MLNAME_CAST(sipName_splitCell), meth_QTextTable_splitCell, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTable_splitCell)}
};

PyDoc_STRVAR(doc_QTextTable, "\1QTextTable(QTextDocument)");


static pyqt5ClassPluginDef plugin_QTextTable = {
    & ::QTextTable::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextTable = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextTable,
        {SIP_NULLPTR},
        &plugin_QTextTable
    },
    {
        sipNameNr_QTextTable,
        {0, 0, 1},
        16, methods_QTextTable,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextTable,
    -1,
    -1,
    supers_QTextTable,
    SIP_NULLPTR,
    init_type_QTextTable,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextTable,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QTextTable,
    cast_QTextTable,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtexttable.sip"
#include <qtexttable.h>
#line 26342 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextcursor.sip"
#include <qtextcursor.h>
#line 26346 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 255 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 26349 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QTextTableCell_format, "format(self) -> QTextCharFormat");

extern "C" {static PyObject *meth_QTextTableCell_format(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCell_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextTableCell *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTableCell, &sipCpp))
        {
             ::QTextCharFormat*sipRes;

            sipRes = new  ::QTextCharFormat(sipCpp->format());

            return sipConvertFromNewType(sipRes,sipType_QTextCharFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableCell, sipName_format, doc_QTextTableCell_format);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableCell_setFormat, "setFormat(self, QTextCharFormat)");

extern "C" {static PyObject *meth_QTextTableCell_setFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCell_setFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat* a0;
         ::QTextTableCell *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextTableCell, &sipCpp, sipType_QTextCharFormat, &a0))
        {
            sipCpp->setFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableCell, sipName_setFormat, doc_QTextTableCell_setFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableCell_row, "row(self) -> int");

extern "C" {static PyObject *meth_QTextTableCell_row(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCell_row(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextTableCell *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTableCell, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->row();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableCell, sipName_row, doc_QTextTableCell_row);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableCell_column, "column(self) -> int");

extern "C" {static PyObject *meth_QTextTableCell_column(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCell_column(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextTableCell *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTableCell, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->column();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableCell, sipName_column, doc_QTextTableCell_column);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableCell_rowSpan, "rowSpan(self) -> int");

extern "C" {static PyObject *meth_QTextTableCell_rowSpan(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCell_rowSpan(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextTableCell *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTableCell, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->rowSpan();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableCell, sipName_rowSpan, doc_QTextTableCell_rowSpan);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableCell_columnSpan, "columnSpan(self) -> int");

extern "C" {static PyObject *meth_QTextTableCell_columnSpan(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCell_columnSpan(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextTableCell *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTableCell, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->columnSpan();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableCell, sipName_columnSpan, doc_QTextTableCell_columnSpan);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableCell_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QTextTableCell_isValid(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCell_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextTableCell *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTableCell, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableCell, sipName_isValid, doc_QTextTableCell_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableCell_firstCursorPosition, "firstCursorPosition(self) -> QTextCursor");

extern "C" {static PyObject *meth_QTextTableCell_firstCursorPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCell_firstCursorPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextTableCell *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTableCell, &sipCpp))
        {
             ::QTextCursor*sipRes;

            sipRes = new  ::QTextCursor(sipCpp->firstCursorPosition());

            return sipConvertFromNewType(sipRes,sipType_QTextCursor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableCell, sipName_firstCursorPosition, doc_QTextTableCell_firstCursorPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableCell_lastCursorPosition, "lastCursorPosition(self) -> QTextCursor");

extern "C" {static PyObject *meth_QTextTableCell_lastCursorPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCell_lastCursorPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextTableCell *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTableCell, &sipCpp))
        {
             ::QTextCursor*sipRes;

            sipRes = new  ::QTextCursor(sipCpp->lastCursorPosition());

            return sipConvertFromNewType(sipRes,sipType_QTextCursor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableCell, sipName_lastCursorPosition, doc_QTextTableCell_lastCursorPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableCell_tableCellFormatIndex, "tableCellFormatIndex(self) -> int");

extern "C" {static PyObject *meth_QTextTableCell_tableCellFormatIndex(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCell_tableCellFormatIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextTableCell *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTableCell, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->tableCellFormatIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableCell, sipName_tableCellFormatIndex, doc_QTextTableCell_tableCellFormatIndex);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QTextTableCell___ne__(PyObject *,PyObject *);}
static PyObject *slot_QTextTableCell___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextTableCell *sipCpp = reinterpret_cast< ::QTextTableCell *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextTableCell));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextTableCell* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextTableCell, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QTextTableCell::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QTextTableCell, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTextTableCell___eq__(PyObject *,PyObject *);}
static PyObject *slot_QTextTableCell___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextTableCell *sipCpp = reinterpret_cast< ::QTextTableCell *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextTableCell));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextTableCell* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextTableCell, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QTextTableCell::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QTextTableCell, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextTableCell(void *, int);}
static void release_QTextTableCell(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextTableCell *>(sipCppV);
}


extern "C" {static void assign_QTextTableCell(void *, SIP_SSIZE_T, void *);}
static void assign_QTextTableCell(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTextTableCell *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTextTableCell *>(sipSrc);
}


extern "C" {static void *array_QTextTableCell(SIP_SSIZE_T);}
static void *array_QTextTableCell(SIP_SSIZE_T sipNrElem)
{
    return new  ::QTextTableCell[sipNrElem];
}


extern "C" {static void *copy_QTextTableCell(const void *, SIP_SSIZE_T);}
static void *copy_QTextTableCell(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QTextTableCell(reinterpret_cast<const  ::QTextTableCell *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextTableCell(sipSimpleWrapper *);}
static void dealloc_QTextTableCell(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextTableCell(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextTableCell(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextTableCell(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextTableCell *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTextTableCell();

            return sipCpp;
        }
    }

    {
        const  ::QTextTableCell* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTextTableCell, &a0))
        {
            sipCpp = new  ::QTextTableCell(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QTextTableCell[] = {
    {(void *)slot_QTextTableCell___ne__, ne_slot},
    {(void *)slot_QTextTableCell___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QTextTableCell[] = {
    {SIP_MLNAME_CAST(sipName_column), meth_QTextTableCell_column, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableCell_column)},
    {SIP_MLNAME_CAST(sipName_columnSpan), meth_QTextTableCell_columnSpan, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableCell_columnSpan)},
    {SIP_MLNAME_CAST(sipName_firstCursorPosition), meth_QTextTableCell_firstCursorPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableCell_firstCursorPosition)},
    {SIP_MLNAME_CAST(sipName_format), meth_QTextTableCell_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableCell_format)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QTextTableCell_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableCell_isValid)},
    {SIP_MLNAME_CAST(sipName_lastCursorPosition), meth_QTextTableCell_lastCursorPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableCell_lastCursorPosition)},
    {SIP_MLNAME_CAST(sipName_row), meth_QTextTableCell_row, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableCell_row)},
    {SIP_MLNAME_CAST(sipName_rowSpan), meth_QTextTableCell_rowSpan, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableCell_rowSpan)},
    {SIP_MLNAME_CAST(sipName_setFormat), meth_QTextTableCell_setFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableCell_setFormat)},
    {SIP_MLNAME_CAST(sipName_tableCellFormatIndex), meth_QTextTableCell_tableCellFormatIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableCell_tableCellFormatIndex)}
};

PyDoc_STRVAR(doc_QTextTableCell, "\1QTextTableCell()\n"
"QTextTableCell(QTextTableCell)");


static pyqt5ClassPluginDef plugin_QTextTableCell = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextTableCell = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextTableCell,
        {SIP_NULLPTR},
        &plugin_QTextTableCell
    },
    {
        sipNameNr_QTextTableCell,
        {0, 0, 1},
        10, methods_QTextTableCell,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextTableCell,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QTextTableCell,
    init_type_QTextTableCell,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextTableCell,
    assign_QTextTableCell,
    array_QTextTableCell,
    copy_QTextTableCell,
    release_QTextTableCell,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 84 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 26852 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 27 "sip/QtCore/qchar.sip"
#include <qchar.h>
#line 26856 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 26859 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static PyObject *slot_QTextOption_Tab___ne__(PyObject *,PyObject *);}
static PyObject *slot_QTextOption_Tab___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextOption::Tab *sipCpp = reinterpret_cast< ::QTextOption::Tab *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextOption_Tab));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextOption::Tab* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextOption_Tab, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QTextOption::Tab::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QTextOption_Tab, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTextOption_Tab___eq__(PyObject *,PyObject *);}
static PyObject *slot_QTextOption_Tab___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextOption::Tab *sipCpp = reinterpret_cast< ::QTextOption::Tab *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextOption_Tab));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextOption::Tab* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextOption_Tab, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QTextOption::Tab::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QTextOption_Tab, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextOption_Tab(void *, int);}
static void release_QTextOption_Tab(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextOption::Tab *>(sipCppV);
}


extern "C" {static void assign_QTextOption_Tab(void *, SIP_SSIZE_T, void *);}
static void assign_QTextOption_Tab(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTextOption::Tab *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTextOption::Tab *>(sipSrc);
}


extern "C" {static void *array_QTextOption_Tab(SIP_SSIZE_T);}
static void *array_QTextOption_Tab(SIP_SSIZE_T sipNrElem)
{
    return new  ::QTextOption::Tab[sipNrElem];
}


extern "C" {static void *copy_QTextOption_Tab(const void *, SIP_SSIZE_T);}
static void *copy_QTextOption_Tab(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QTextOption::Tab(reinterpret_cast<const  ::QTextOption::Tab *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextOption_Tab(sipSimpleWrapper *);}
static void dealloc_QTextOption_Tab(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextOption_Tab(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextOption_Tab(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextOption_Tab(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextOption::Tab *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTextOption::Tab();

            return sipCpp;
        }
    }

    {
         ::qreal a0;
         ::QTextOption::TabType a1;
         ::QChar a2def = QChar();
         ::QChar* a2 = &a2def;
        int a2State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_delim,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "dE|J1", &a0, sipType_QTextOption_TabType, &a1, sipType_QChar,&a2, &a2State))
        {
            sipCpp = new  ::QTextOption::Tab(a0,a1,*a2);
            sipReleaseType(a2,sipType_QChar,a2State);

            return sipCpp;
        }
    }

    {
        const  ::QTextOption::Tab* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTextOption_Tab, &a0))
        {
            sipCpp = new  ::QTextOption::Tab(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QTextOption_Tab[] = {
    {(void *)slot_QTextOption_Tab___ne__, ne_slot},
    {(void *)slot_QTextOption_Tab___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


extern "C" {static PyObject *varget_QTextOption_Tab_delimiter(void *, PyObject *, PyObject *);}
static PyObject *varget_QTextOption_Tab_delimiter(void *sipSelf, PyObject *, PyObject *)
{
     ::QChar*sipVal;
     ::QTextOption::Tab *sipCpp = reinterpret_cast< ::QTextOption::Tab *>(sipSelf);

    sipVal = &sipCpp->delimiter;

    return sipConvertFromType(sipVal, sipType_QChar, SIP_NULLPTR);
}


extern "C" {static int varset_QTextOption_Tab_delimiter(void *, PyObject *, PyObject *);}
static int varset_QTextOption_Tab_delimiter(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::QChar*sipVal;
     ::QTextOption::Tab *sipCpp = reinterpret_cast< ::QTextOption::Tab *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::QChar *>(sipForceConvertToType(sipPy, sipType_QChar, SIP_NULLPTR, SIP_NOT_NONE, &sipValState, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->delimiter = *sipVal;

    sipReleaseType(sipVal, sipType_QChar, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_QTextOption_Tab_position(void *, PyObject *, PyObject *);}
static PyObject *varget_QTextOption_Tab_position(void *sipSelf, PyObject *, PyObject *)
{
     ::qreal sipVal;
     ::QTextOption::Tab *sipCpp = reinterpret_cast< ::QTextOption::Tab *>(sipSelf);

    sipVal = sipCpp->position;

    return PyFloat_FromDouble(sipVal);
}


extern "C" {static int varset_QTextOption_Tab_position(void *, PyObject *, PyObject *);}
static int varset_QTextOption_Tab_position(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::qreal sipVal;
     ::QTextOption::Tab *sipCpp = reinterpret_cast< ::QTextOption::Tab *>(sipSelf);

    sipVal = PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->position = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QTextOption_Tab_type(void *, PyObject *, PyObject *);}
static PyObject *varget_QTextOption_Tab_type(void *sipSelf, PyObject *, PyObject *)
{
     ::QTextOption::TabType sipVal;
     ::QTextOption::Tab *sipCpp = reinterpret_cast< ::QTextOption::Tab *>(sipSelf);

    sipVal = sipCpp->type;

    return sipConvertFromEnum(static_cast<int>(sipVal), sipType_QTextOption_TabType);
}


extern "C" {static int varset_QTextOption_Tab_type(void *, PyObject *, PyObject *);}
static int varset_QTextOption_Tab_type(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::QTextOption::TabType sipVal;
     ::QTextOption::Tab *sipCpp = reinterpret_cast< ::QTextOption::Tab *>(sipSelf);

    sipVal = ( ::QTextOption::TabType)sipConvertToEnum(sipPy, sipType_QTextOption_TabType);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->type = sipVal;

    return 0;
}

sipVariableDef variables_QTextOption_Tab[] = {
    {InstanceVariable, sipName_delimiter, (PyMethodDef *)varget_QTextOption_Tab_delimiter, (PyMethodDef *)varset_QTextOption_Tab_delimiter, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_position, (PyMethodDef *)varget_QTextOption_Tab_position, (PyMethodDef *)varset_QTextOption_Tab_position, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_type, (PyMethodDef *)varget_QTextOption_Tab_type, (PyMethodDef *)varset_QTextOption_Tab_type, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_QTextOption_Tab, "\1QTextOption.Tab()\n"
"QTextOption.Tab(float, QTextOption.TabType, delim: str = '')\n"
"QTextOption.Tab(QTextOption.Tab)");


static pyqt5ClassPluginDef plugin_QTextOption_Tab = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextOption_Tab = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextOption__Tab,
        {SIP_NULLPTR},
        &plugin_QTextOption_Tab
    },
    {
        sipNameNr_Tab,
        {334, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        3, variables_QTextOption_Tab,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextOption_Tab,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QTextOption_Tab,
    init_type_QTextOption_Tab,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextOption_Tab,
    assign_QTextOption_Tab,
    array_QTextOption_Tab,
    copy_QTextOption_Tab,
    release_QTextOption_Tab,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 27188 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 27192 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static long slot_QTextOption_Flags___hash__(PyObject *);}
static long slot_QTextOption_Flags___hash__(PyObject *sipSelf)
{
     ::QTextOption::Flags *sipCpp = reinterpret_cast< ::QTextOption::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextOption_Flags));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QTextOption::Flags::Int();
#line 27210 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QTextOption_Flags___bool__(PyObject *);}
static int slot_QTextOption_Flags___bool__(PyObject *sipSelf)
{
     ::QTextOption::Flags *sipCpp = reinterpret_cast< ::QTextOption::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextOption_Flags));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QTextOption::Flags::Int() != 0);
#line 27235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QTextOption_Flags___ne__(PyObject *,PyObject *);}
static PyObject *slot_QTextOption_Flags___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextOption::Flags *sipCpp = reinterpret_cast< ::QTextOption::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextOption_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextOption::Flags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QTextOption_Flags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QTextOption::Flags::Int() != a0->operator QTextOption::Flags::Int());
#line 27265 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
            sipReleaseType(const_cast< ::QTextOption::Flags *>(a0),sipType_QTextOption_Flags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QTextOption_Flags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTextOption_Flags___eq__(PyObject *,PyObject *);}
static PyObject *slot_QTextOption_Flags___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextOption::Flags *sipCpp = reinterpret_cast< ::QTextOption::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextOption_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextOption::Flags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QTextOption_Flags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QTextOption::Flags::Int() == a0->operator QTextOption::Flags::Int());
#line 27301 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
            sipReleaseType(const_cast< ::QTextOption::Flags *>(a0),sipType_QTextOption_Flags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QTextOption_Flags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTextOption_Flags___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QTextOption_Flags___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTextOption_Flags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTextOption::Flags *sipCpp = reinterpret_cast< ::QTextOption::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextOption_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QTextOption::Flags(*sipCpp ^ a0);
#line 27340 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTextOption_Flags___xor__(PyObject *,PyObject *);}
static PyObject *slot_QTextOption_Flags___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextOption::Flags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QTextOption_Flags, &a0, &a0State, &a1))
        {
             ::QTextOption::Flags*sipRes;

            sipRes = new  ::QTextOption::Flags((*a0 ^ a1));
            sipReleaseType(a0,sipType_QTextOption_Flags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTextOption_Flags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QTextOption_Flags___ior__(PyObject *,PyObject *);}
static PyObject *slot_QTextOption_Flags___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTextOption_Flags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTextOption::Flags *sipCpp = reinterpret_cast< ::QTextOption::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextOption_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QTextOption::Flags(*sipCpp | a0);
#line 27412 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTextOption_Flags___or__(PyObject *,PyObject *);}
static PyObject *slot_QTextOption_Flags___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextOption::Flags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QTextOption_Flags, &a0, &a0State, &a1))
        {
             ::QTextOption::Flags*sipRes;

            sipRes = new  ::QTextOption::Flags((*a0 | a1));
            sipReleaseType(a0,sipType_QTextOption_Flags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTextOption_Flags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QTextOption_Flags___iand__(PyObject *,PyObject *);}
static PyObject *slot_QTextOption_Flags___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTextOption_Flags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTextOption::Flags *sipCpp = reinterpret_cast< ::QTextOption::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextOption_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QTextOption::Flags::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTextOption_Flags___and__(PyObject *,PyObject *);}
static PyObject *slot_QTextOption_Flags___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextOption::Flags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QTextOption_Flags, &a0, &a0State, &a1))
        {
             ::QTextOption::Flags*sipRes;

            sipRes = new  ::QTextOption::Flags((*a0 & a1));
            sipReleaseType(a0,sipType_QTextOption_Flags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTextOption_Flags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QTextOption_Flags___invert__(PyObject *);}
static PyObject *slot_QTextOption_Flags___invert__(PyObject *sipSelf)
{
     ::QTextOption::Flags *sipCpp = reinterpret_cast< ::QTextOption::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextOption_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QTextOption::Flags*sipRes;

            sipRes = new  ::QTextOption::Flags(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QTextOption_Flags,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QTextOption_Flags___int__(PyObject *);}
static PyObject *slot_QTextOption_Flags___int__(PyObject *sipSelf)
{
     ::QTextOption::Flags *sipCpp = reinterpret_cast< ::QTextOption::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextOption_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextOption_Flags(void *, int);}
static void release_QTextOption_Flags(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextOption::Flags *>(sipCppV);
}


extern "C" {static void assign_QTextOption_Flags(void *, SIP_SSIZE_T, void *);}
static void assign_QTextOption_Flags(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTextOption::Flags *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTextOption::Flags *>(sipSrc);
}


extern "C" {static void *array_QTextOption_Flags(SIP_SSIZE_T);}
static void *array_QTextOption_Flags(SIP_SSIZE_T sipNrElem)
{
    return new  ::QTextOption::Flags[sipNrElem];
}


extern "C" {static void *copy_QTextOption_Flags(const void *, SIP_SSIZE_T);}
static void *copy_QTextOption_Flags(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QTextOption::Flags(reinterpret_cast<const  ::QTextOption::Flags *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextOption_Flags(sipSimpleWrapper *);}
static void dealloc_QTextOption_Flags(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextOption_Flags(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextOption_Flags(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextOption_Flags(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextOption::Flags *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTextOption::Flags();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QTextOption::Flags(a0);

            return sipCpp;
        }
    }

    {
        const  ::QTextOption::Flags* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QTextOption_Flags, &a0, &a0State))
        {
            sipCpp = new  ::QTextOption::Flags(*a0);
            sipReleaseType(const_cast< ::QTextOption::Flags *>(a0),sipType_QTextOption_Flags,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QTextOption_Flags(PyObject *, void **, int *, PyObject *);}
static int convertTo_QTextOption_Flags(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QTextOption::Flags **sipCppPtr = reinterpret_cast< ::QTextOption::Flags **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QTextOption::Flags is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QTextOption_Flag)) ||
            sipCanConvertToType(sipPy, sipType_QTextOption_Flags, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QTextOption_Flag)))
{
    *sipCppPtr = new QTextOption::Flags(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QTextOption::Flags *>(sipConvertToType(sipPy, sipType_QTextOption_Flags, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 27680 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QTextOption_Flags[] = {
    {(void *)slot_QTextOption_Flags___hash__, hash_slot},
    {(void *)slot_QTextOption_Flags___bool__, bool_slot},
    {(void *)slot_QTextOption_Flags___ne__, ne_slot},
    {(void *)slot_QTextOption_Flags___eq__, eq_slot},
    {(void *)slot_QTextOption_Flags___ixor__, ixor_slot},
    {(void *)slot_QTextOption_Flags___xor__, xor_slot},
    {(void *)slot_QTextOption_Flags___ior__, ior_slot},
    {(void *)slot_QTextOption_Flags___or__, or_slot},
    {(void *)slot_QTextOption_Flags___iand__, iand_slot},
    {(void *)slot_QTextOption_Flags___and__, and_slot},
    {(void *)slot_QTextOption_Flags___invert__, invert_slot},
    {(void *)slot_QTextOption_Flags___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QTextOption_Flags, "\1QTextOption.Flags()\n"
"QTextOption.Flags(Union[QTextOption.Flags, QTextOption.Flag])\n"
"QTextOption.Flags(QTextOption.Flags)");


static pyqt5ClassPluginDef plugin_QTextOption_Flags = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextOption_Flags = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextOption__Flags,
        {SIP_NULLPTR},
        &plugin_QTextOption_Flags
    },
    {
        sipNameNr_Flags,
        {334, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextOption_Flags,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QTextOption_Flags,
    init_type_QTextOption_Flags,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextOption_Flags,
    assign_QTextOption_Flags,
    array_QTextOption_Flags,
    copy_QTextOption_Flags,
    release_QTextOption_Flags,
    SIP_NULLPTR,
    convertTo_QTextOption_Flags,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 27768 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 27772 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 27775 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 84 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 27780 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 27783 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 751 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 27786 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 27789 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QTextOption_alignment, "alignment(self) -> Qt.Alignment");

extern "C" {static PyObject *meth_QTextOption_alignment(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_alignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextOption, &sipCpp))
        {
             ::Qt::Alignment*sipRes;

            sipRes = new  ::Qt::Alignment(sipCpp->alignment());

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_alignment, doc_QTextOption_alignment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextOption_setTextDirection, "setTextDirection(self, Qt.LayoutDirection)");

extern "C" {static PyObject *meth_QTextOption_setTextDirection(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_setTextDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::LayoutDirection a0;
         ::QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextOption, &sipCpp, sipType_Qt_LayoutDirection, &a0))
        {
            sipCpp->setTextDirection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_setTextDirection, doc_QTextOption_setTextDirection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextOption_textDirection, "textDirection(self) -> Qt.LayoutDirection");

extern "C" {static PyObject *meth_QTextOption_textDirection(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_textDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextOption, &sipCpp))
        {
             ::Qt::LayoutDirection sipRes;

            sipRes = sipCpp->textDirection();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_LayoutDirection);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_textDirection, doc_QTextOption_textDirection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextOption_setWrapMode, "setWrapMode(self, QTextOption.WrapMode)");

extern "C" {static PyObject *meth_QTextOption_setWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_setWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextOption::WrapMode a0;
         ::QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextOption, &sipCpp, sipType_QTextOption_WrapMode, &a0))
        {
            sipCpp->setWrapMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_setWrapMode, doc_QTextOption_setWrapMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextOption_wrapMode, "wrapMode(self) -> QTextOption.WrapMode");

extern "C" {static PyObject *meth_QTextOption_wrapMode(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_wrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextOption, &sipCpp))
        {
             ::QTextOption::WrapMode sipRes;

            sipRes = sipCpp->wrapMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QTextOption_WrapMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_wrapMode, doc_QTextOption_wrapMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextOption_flags, "flags(self) -> QTextOption.Flags");

extern "C" {static PyObject *meth_QTextOption_flags(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextOption, &sipCpp))
        {
             ::QTextOption::Flags*sipRes;

            sipRes = new  ::QTextOption::Flags(sipCpp->flags());

            return sipConvertFromNewType(sipRes,sipType_QTextOption_Flags,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_flags, doc_QTextOption_flags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextOption_tabStop, "tabStop(self) -> float");

extern "C" {static PyObject *meth_QTextOption_tabStop(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_tabStop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextOption, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->tabStop();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_tabStop, doc_QTextOption_tabStop);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextOption_setTabArray, "setTabArray(self, Iterable[float])");

extern "C" {static PyObject *meth_QTextOption_setTabArray(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_setTabArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QList< ::qreal>* a0;
        int a0State = 0;
         ::QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextOption, &sipCpp, sipType_QList_2400,&a0, &a0State))
        {
            sipCpp->setTabArray(*a0);
            sipReleaseType(const_cast< ::QList< ::qreal> *>(a0),sipType_QList_2400,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_setTabArray, doc_QTextOption_setTabArray);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextOption_tabArray, "tabArray(self) -> List[float]");

extern "C" {static PyObject *meth_QTextOption_tabArray(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_tabArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextOption, &sipCpp))
        {
             ::QList< ::qreal>*sipRes;

            sipRes = new  ::QList< ::qreal>(sipCpp->tabArray());

            return sipConvertFromNewType(sipRes,sipType_QList_2400,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_tabArray, doc_QTextOption_tabArray);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextOption_setUseDesignMetrics, "setUseDesignMetrics(self, bool)");

extern "C" {static PyObject *meth_QTextOption_setUseDesignMetrics(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_setUseDesignMetrics(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextOption, &sipCpp, &a0))
        {
            sipCpp->setUseDesignMetrics(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_setUseDesignMetrics, doc_QTextOption_setUseDesignMetrics);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextOption_useDesignMetrics, "useDesignMetrics(self) -> bool");

extern "C" {static PyObject *meth_QTextOption_useDesignMetrics(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_useDesignMetrics(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextOption, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->useDesignMetrics();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_useDesignMetrics, doc_QTextOption_useDesignMetrics);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextOption_setAlignment, "setAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag])");

extern "C" {static PyObject *meth_QTextOption_setAlignment(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_setAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::Alignment* a0;
        int a0State = 0;
         ::QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextOption, &sipCpp, sipType_Qt_Alignment, &a0, &a0State))
        {
            sipCpp->setAlignment(*a0);
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_setAlignment, doc_QTextOption_setAlignment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextOption_setFlags, "setFlags(self, Union[QTextOption.Flags, QTextOption.Flag])");

extern "C" {static PyObject *meth_QTextOption_setFlags(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_setFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextOption::Flags* a0;
        int a0State = 0;
         ::QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextOption, &sipCpp, sipType_QTextOption_Flags, &a0, &a0State))
        {
            sipCpp->setFlags(*a0);
            sipReleaseType(a0,sipType_QTextOption_Flags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_setFlags, doc_QTextOption_setFlags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextOption_setTabStop, "setTabStop(self, float)");

extern "C" {static PyObject *meth_QTextOption_setTabStop(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_setTabStop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextOption, &sipCpp, &a0))
        {
            sipCpp->setTabStop(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_setTabStop, doc_QTextOption_setTabStop);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextOption_setTabs, "setTabs(self, Iterable[QTextOption.Tab])");

extern "C" {static PyObject *meth_QTextOption_setTabs(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_setTabs(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QList< ::QTextOption::Tab>* a0;
        int a0State = 0;
         ::QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextOption, &sipCpp, sipType_QList_0100QTextOption_Tab,&a0, &a0State))
        {
            sipCpp->setTabs(*a0);
            sipReleaseType(const_cast<QList< ::QTextOption::Tab> *>(a0),sipType_QList_0100QTextOption_Tab,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_setTabs, doc_QTextOption_setTabs);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextOption_tabs, "tabs(self) -> List[QTextOption.Tab]");

extern "C" {static PyObject *meth_QTextOption_tabs(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_tabs(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextOption, &sipCpp))
        {
            QList< ::QTextOption::Tab>*sipRes;

            sipRes = new QList< ::QTextOption::Tab>(sipCpp->tabs());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QTextOption_Tab,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_tabs, doc_QTextOption_tabs);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextOption_setTabStopDistance, "setTabStopDistance(self, float)");

extern "C" {static PyObject *meth_QTextOption_setTabStopDistance(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_setTabStopDistance(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextOption, &sipCpp, &a0))
        {
            sipCpp->setTabStopDistance(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_setTabStopDistance, doc_QTextOption_setTabStopDistance);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextOption_tabStopDistance, "tabStopDistance(self) -> float");

extern "C" {static PyObject *meth_QTextOption_tabStopDistance(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_tabStopDistance(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextOption, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->tabStopDistance();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_tabStopDistance, doc_QTextOption_tabStopDistance);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextOption(void *, int);}
static void release_QTextOption(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextOption *>(sipCppV);
}


extern "C" {static void assign_QTextOption(void *, SIP_SSIZE_T, void *);}
static void assign_QTextOption(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTextOption *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTextOption *>(sipSrc);
}


extern "C" {static void *array_QTextOption(SIP_SSIZE_T);}
static void *array_QTextOption(SIP_SSIZE_T sipNrElem)
{
    return new  ::QTextOption[sipNrElem];
}


extern "C" {static void *copy_QTextOption(const void *, SIP_SSIZE_T);}
static void *copy_QTextOption(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QTextOption(reinterpret_cast<const  ::QTextOption *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextOption(sipSimpleWrapper *);}
static void dealloc_QTextOption(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextOption(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextOption(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextOption(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextOption *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTextOption();

            return sipCpp;
        }
    }

    {
         ::Qt::Alignment* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_Qt_Alignment, &a0, &a0State))
        {
            sipCpp = new  ::QTextOption(*a0);
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QTextOption* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTextOption, &a0))
        {
            sipCpp = new  ::QTextOption(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QTextOption[] = {
    {SIP_MLNAME_CAST(sipName_alignment), meth_QTextOption_alignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextOption_alignment)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QTextOption_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextOption_flags)},
    {SIP_MLNAME_CAST(sipName_setAlignment), meth_QTextOption_setAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextOption_setAlignment)},
    {SIP_MLNAME_CAST(sipName_setFlags), meth_QTextOption_setFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextOption_setFlags)},
    {SIP_MLNAME_CAST(sipName_setTabArray), meth_QTextOption_setTabArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextOption_setTabArray)},
    {SIP_MLNAME_CAST(sipName_setTabStop), meth_QTextOption_setTabStop, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextOption_setTabStop)},
    {SIP_MLNAME_CAST(sipName_setTabStopDistance), meth_QTextOption_setTabStopDistance, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextOption_setTabStopDistance)},
    {SIP_MLNAME_CAST(sipName_setTabs), meth_QTextOption_setTabs, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextOption_setTabs)},
    {SIP_MLNAME_CAST(sipName_setTextDirection), meth_QTextOption_setTextDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextOption_setTextDirection)},
    {SIP_MLNAME_CAST(sipName_setUseDesignMetrics), meth_QTextOption_setUseDesignMetrics, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextOption_setUseDesignMetrics)},
    {SIP_MLNAME_CAST(sipName_setWrapMode), meth_QTextOption_setWrapMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextOption_setWrapMode)},
    {SIP_MLNAME_CAST(sipName_tabArray), meth_QTextOption_tabArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextOption_tabArray)},
    {SIP_MLNAME_CAST(sipName_tabStop), meth_QTextOption_tabStop, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextOption_tabStop)},
    {SIP_MLNAME_CAST(sipName_tabStopDistance), meth_QTextOption_tabStopDistance, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextOption_tabStopDistance)},
    {SIP_MLNAME_CAST(sipName_tabs), meth_QTextOption_tabs, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextOption_tabs)},
    {SIP_MLNAME_CAST(sipName_textDirection), meth_QTextOption_textDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextOption_textDirection)},
    {SIP_MLNAME_CAST(sipName_useDesignMetrics), meth_QTextOption_useDesignMetrics, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextOption_useDesignMetrics)},
    {SIP_MLNAME_CAST(sipName_wrapMode), meth_QTextOption_wrapMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextOption_wrapMode)}
};

static sipEnumMemberDef enummembers_QTextOption[] = {
    {sipName_AddSpaceForLineAndParagraphSeparators, static_cast<int>( ::QTextOption::AddSpaceForLineAndParagraphSeparators), 335},
    {sipName_CenterTab, static_cast<int>( ::QTextOption::CenterTab), 338},
    {sipName_DelimiterTab, static_cast<int>( ::QTextOption::DelimiterTab), 338},
    {sipName_IncludeTrailingSpaces, static_cast<int>( ::QTextOption::IncludeTrailingSpaces), 335},
    {sipName_LeftTab, static_cast<int>( ::QTextOption::LeftTab), 338},
    {sipName_ManualWrap, static_cast<int>( ::QTextOption::ManualWrap), 339},
    {sipName_NoWrap, static_cast<int>( ::QTextOption::NoWrap), 339},
    {sipName_RightTab, static_cast<int>( ::QTextOption::RightTab), 338},
    {sipName_ShowDocumentTerminator, static_cast<int>( ::QTextOption::ShowDocumentTerminator), 335},
    {sipName_ShowLineAndParagraphSeparators, static_cast<int>( ::QTextOption::ShowLineAndParagraphSeparators), 335},
    {sipName_ShowTabsAndSpaces, static_cast<int>( ::QTextOption::ShowTabsAndSpaces), 335},
    {sipName_SuppressColors, static_cast<int>( ::QTextOption::SuppressColors), 335},
    {sipName_WordWrap, static_cast<int>( ::QTextOption::WordWrap), 339},
    {sipName_WrapAnywhere, static_cast<int>( ::QTextOption::WrapAnywhere), 339},
    {sipName_WrapAtWordBoundaryOrAnywhere, static_cast<int>( ::QTextOption::WrapAtWordBoundaryOrAnywhere), 339},
};

PyDoc_STRVAR(doc_QTextOption, "\1QTextOption()\n"
"QTextOption(Union[Qt.Alignment, Qt.AlignmentFlag])\n"
"QTextOption(QTextOption)");


static pyqt5ClassPluginDef plugin_QTextOption = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextOption = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextOption,
        {SIP_NULLPTR},
        &plugin_QTextOption
    },
    {
        sipNameNr_QTextOption,
        {0, 0, 1},
        18, methods_QTextOption,
        15, enummembers_QTextOption,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextOption,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QTextOption,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextOption,
    assign_QTextOption,
    array_QTextOption,
    copy_QTextOption,
    release_QTextOption,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 248 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 28491 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"



class sipQTextBlockUserData : public  ::QTextBlockUserData
{
public:
    sipQTextBlockUserData();
    sipQTextBlockUserData(const  ::QTextBlockUserData&);
    ~sipQTextBlockUserData();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTextBlockUserData(const sipQTextBlockUserData &);
    sipQTextBlockUserData &operator = (const sipQTextBlockUserData &);
};

sipQTextBlockUserData::sipQTextBlockUserData():  ::QTextBlockUserData(), sipPySelf(SIP_NULLPTR)
{
}

sipQTextBlockUserData::sipQTextBlockUserData(const  ::QTextBlockUserData& a0):  ::QTextBlockUserData(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQTextBlockUserData::~sipQTextBlockUserData()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextBlockUserData(void *, int);}
static void release_QTextBlockUserData(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQTextBlockUserData *>(sipCppV);
    else
        delete reinterpret_cast< ::QTextBlockUserData *>(sipCppV);
}


extern "C" {static void assign_QTextBlockUserData(void *, SIP_SSIZE_T, void *);}
static void assign_QTextBlockUserData(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTextBlockUserData *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTextBlockUserData *>(sipSrc);
}


extern "C" {static void *array_QTextBlockUserData(SIP_SSIZE_T);}
static void *array_QTextBlockUserData(SIP_SSIZE_T sipNrElem)
{
    return new  ::QTextBlockUserData[sipNrElem];
}


extern "C" {static void *copy_QTextBlockUserData(const void *, SIP_SSIZE_T);}
static void *copy_QTextBlockUserData(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QTextBlockUserData(reinterpret_cast<const  ::QTextBlockUserData *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextBlockUserData(sipSimpleWrapper *);}
static void dealloc_QTextBlockUserData(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQTextBlockUserData *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextBlockUserData(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QTextBlockUserData(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextBlockUserData(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQTextBlockUserData *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQTextBlockUserData();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QTextBlockUserData* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTextBlockUserData, &a0))
        {
            sipCpp = new sipQTextBlockUserData(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}

PyDoc_STRVAR(doc_QTextBlockUserData, "\1QTextBlockUserData()\n"
"QTextBlockUserData(QTextBlockUserData)");


static pyqt5ClassPluginDef plugin_QTextBlockUserData = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextBlockUserData = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextBlockUserData,
        {SIP_NULLPTR},
        &plugin_QTextBlockUserData
    },
    {
        sipNameNr_QTextBlockUserData,
        {0, 0, 1},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextBlockUserData,
    -1,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QTextBlockUserData,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextBlockUserData,
    assign_QTextBlockUserData,
    array_QTextBlockUserData,
    copy_QTextBlockUserData,
    release_QTextBlockUserData,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 224 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 28666 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 28670 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qglyphrun.sip"
#include <qglyphrun.h>
#line 28673 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 28676 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 255 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 28679 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QTextFragment_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QTextFragment_isValid(PyObject *, PyObject *);}
static PyObject *meth_QTextFragment_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFragment *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFragment, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFragment, sipName_isValid, doc_QTextFragment_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFragment_position, "position(self) -> int");

extern "C" {static PyObject *meth_QTextFragment_position(PyObject *, PyObject *);}
static PyObject *meth_QTextFragment_position(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFragment *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFragment, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->position();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFragment, sipName_position, doc_QTextFragment_position);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFragment_length, "length(self) -> int");

extern "C" {static PyObject *meth_QTextFragment_length(PyObject *, PyObject *);}
static PyObject *meth_QTextFragment_length(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFragment *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFragment, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->length();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFragment, sipName_length, doc_QTextFragment_length);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFragment_contains, "contains(self, int) -> bool");

extern "C" {static PyObject *meth_QTextFragment_contains(PyObject *, PyObject *);}
static PyObject *meth_QTextFragment_contains(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTextFragment *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFragment, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->contains(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFragment, sipName_contains, doc_QTextFragment_contains);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFragment_charFormat, "charFormat(self) -> QTextCharFormat");

extern "C" {static PyObject *meth_QTextFragment_charFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFragment_charFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFragment *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFragment, &sipCpp))
        {
             ::QTextCharFormat*sipRes;

            sipRes = new  ::QTextCharFormat(sipCpp->charFormat());

            return sipConvertFromNewType(sipRes,sipType_QTextCharFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFragment, sipName_charFormat, doc_QTextFragment_charFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFragment_charFormatIndex, "charFormatIndex(self) -> int");

extern "C" {static PyObject *meth_QTextFragment_charFormatIndex(PyObject *, PyObject *);}
static PyObject *meth_QTextFragment_charFormatIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFragment *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFragment, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->charFormatIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFragment, sipName_charFormatIndex, doc_QTextFragment_charFormatIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFragment_text, "text(self) -> str");

extern "C" {static PyObject *meth_QTextFragment_text(PyObject *, PyObject *);}
static PyObject *meth_QTextFragment_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFragment *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFragment, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->text());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFragment, sipName_text, doc_QTextFragment_text);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFragment_glyphRuns, "glyphRuns(self, from_: int = -1, length: int = -1) -> List[QGlyphRun]");

extern "C" {static PyObject *meth_QTextFragment_glyphRuns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextFragment_glyphRuns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = -1;
        int a1 = -1;
        const  ::QTextFragment *sipCpp;

        static const char *sipKwdList[] = {
            sipName_from,
            sipName_length,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|ii", &sipSelf, sipType_QTextFragment, &sipCpp, &a0, &a1))
        {
            QList< ::QGlyphRun>*sipRes;

            sipRes = new QList< ::QGlyphRun>(sipCpp->glyphRuns(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QGlyphRun,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFragment, sipName_glyphRuns, doc_QTextFragment_glyphRuns);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QTextFragment___ge__(PyObject *,PyObject *);}
static PyObject *slot_QTextFragment___ge__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextFragment *sipCpp = reinterpret_cast< ::QTextFragment *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextFragment));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFragment* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextFragment, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::QTextFragment::operator<(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ge_slot, sipType_QTextFragment, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTextFragment___lt__(PyObject *,PyObject *);}
static PyObject *slot_QTextFragment___lt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextFragment *sipCpp = reinterpret_cast< ::QTextFragment *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextFragment));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFragment* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextFragment, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QTextFragment::operator<(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, lt_slot, sipType_QTextFragment, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTextFragment___ne__(PyObject *,PyObject *);}
static PyObject *slot_QTextFragment___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextFragment *sipCpp = reinterpret_cast< ::QTextFragment *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextFragment));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFragment* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextFragment, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QTextFragment::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QTextFragment, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTextFragment___eq__(PyObject *,PyObject *);}
static PyObject *slot_QTextFragment___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextFragment *sipCpp = reinterpret_cast< ::QTextFragment *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextFragment));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFragment* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextFragment, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QTextFragment::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QTextFragment, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextFragment(void *, int);}
static void release_QTextFragment(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextFragment *>(sipCppV);
}


extern "C" {static void assign_QTextFragment(void *, SIP_SSIZE_T, void *);}
static void assign_QTextFragment(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTextFragment *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTextFragment *>(sipSrc);
}


extern "C" {static void *array_QTextFragment(SIP_SSIZE_T);}
static void *array_QTextFragment(SIP_SSIZE_T sipNrElem)
{
    return new  ::QTextFragment[sipNrElem];
}


extern "C" {static void *copy_QTextFragment(const void *, SIP_SSIZE_T);}
static void *copy_QTextFragment(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QTextFragment(reinterpret_cast<const  ::QTextFragment *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextFragment(sipSimpleWrapper *);}
static void dealloc_QTextFragment(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextFragment(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextFragment(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextFragment(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextFragment *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTextFragment();

            return sipCpp;
        }
    }

    {
        const  ::QTextFragment* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTextFragment, &a0))
        {
            sipCpp = new  ::QTextFragment(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QTextFragment[] = {
    {(void *)slot_QTextFragment___ge__, ge_slot},
    {(void *)slot_QTextFragment___lt__, lt_slot},
    {(void *)slot_QTextFragment___ne__, ne_slot},
    {(void *)slot_QTextFragment___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QTextFragment[] = {
    {SIP_MLNAME_CAST(sipName_charFormat), meth_QTextFragment_charFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFragment_charFormat)},
    {SIP_MLNAME_CAST(sipName_charFormatIndex), meth_QTextFragment_charFormatIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFragment_charFormatIndex)},
    {SIP_MLNAME_CAST(sipName_contains), meth_QTextFragment_contains, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFragment_contains)},
    {SIP_MLNAME_CAST(sipName_glyphRuns), SIP_MLMETH_CAST(meth_QTextFragment_glyphRuns), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextFragment_glyphRuns)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QTextFragment_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFragment_isValid)},
    {SIP_MLNAME_CAST(sipName_length), meth_QTextFragment_length, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFragment_length)},
    {SIP_MLNAME_CAST(sipName_position), meth_QTextFragment_position, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFragment_position)},
    {SIP_MLNAME_CAST(sipName_text), meth_QTextFragment_text, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFragment_text)}
};

PyDoc_STRVAR(doc_QTextFragment, "\1QTextFragment()\n"
"QTextFragment(QTextFragment)");


static pyqt5ClassPluginDef plugin_QTextFragment = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextFragment = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextFragment,
        {SIP_NULLPTR},
        &plugin_QTextFragment
    },
    {
        sipNameNr_QTextFragment,
        {0, 0, 1},
        8, methods_QTextFragment,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextFragment,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QTextFragment,
    init_type_QTextFragment,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextFragment,
    assign_QTextFragment,
    array_QTextFragment,
    copy_QTextFragment,
    release_QTextFragment,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 118 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 143 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 29198 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 224 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 29202 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QTextBlock_iterator_fragment, "fragment(self) -> QTextFragment");

extern "C" {static PyObject *meth_QTextBlock_iterator_fragment(PyObject *, PyObject *);}
static PyObject *meth_QTextBlock_iterator_fragment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock::iterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlock_iterator, &sipCpp))
        {
             ::QTextFragment*sipRes;

            sipRes = new  ::QTextFragment(sipCpp->fragment());

            return sipConvertFromNewType(sipRes,sipType_QTextFragment,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_iterator, sipName_fragment, doc_QTextBlock_iterator_fragment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlock_iterator_atEnd, "atEnd(self) -> bool");

extern "C" {static PyObject *meth_QTextBlock_iterator_atEnd(PyObject *, PyObject *);}
static PyObject *meth_QTextBlock_iterator_atEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock::iterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlock_iterator, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->atEnd();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_iterator, sipName_atEnd, doc_QTextBlock_iterator_atEnd);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QTextBlock_iterator___isub__(PyObject *,PyObject *);}
static PyObject *slot_QTextBlock_iterator___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTextBlock_iterator)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTextBlock::iterator *sipCpp = reinterpret_cast< ::QTextBlock::iterator *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextBlock_iterator));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 165 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
            if (a0 > 0)
                while (a0--)
                    (*sipCpp)--;
            else if (a0 < 0)
                while (a0++)
                    (*sipCpp)++;
#line 29289 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTextBlock_iterator___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QTextBlock_iterator___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTextBlock_iterator)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTextBlock::iterator *sipCpp = reinterpret_cast< ::QTextBlock::iterator *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextBlock_iterator));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 155 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
            if (a0 > 0)
                while (a0--)
                    (*sipCpp)++;
            else if (a0 < 0)
                while (a0++)
                    (*sipCpp)--;
#line 29336 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTextBlock_iterator___ne__(PyObject *,PyObject *);}
static PyObject *slot_QTextBlock_iterator___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextBlock::iterator *sipCpp = reinterpret_cast< ::QTextBlock::iterator *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextBlock_iterator));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock::iterator* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextBlock_iterator, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QTextBlock::iterator::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QTextBlock_iterator, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTextBlock_iterator___eq__(PyObject *,PyObject *);}
static PyObject *slot_QTextBlock_iterator___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextBlock::iterator *sipCpp = reinterpret_cast< ::QTextBlock::iterator *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextBlock_iterator));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock::iterator* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextBlock_iterator, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QTextBlock::iterator::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QTextBlock_iterator, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextBlock_iterator(void *, int);}
static void release_QTextBlock_iterator(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextBlock::iterator *>(sipCppV);
}


extern "C" {static void assign_QTextBlock_iterator(void *, SIP_SSIZE_T, void *);}
static void assign_QTextBlock_iterator(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTextBlock::iterator *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTextBlock::iterator *>(sipSrc);
}


extern "C" {static void *array_QTextBlock_iterator(SIP_SSIZE_T);}
static void *array_QTextBlock_iterator(SIP_SSIZE_T sipNrElem)
{
    return new  ::QTextBlock::iterator[sipNrElem];
}


extern "C" {static void *copy_QTextBlock_iterator(const void *, SIP_SSIZE_T);}
static void *copy_QTextBlock_iterator(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QTextBlock::iterator(reinterpret_cast<const  ::QTextBlock::iterator *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextBlock_iterator(sipSimpleWrapper *);}
static void dealloc_QTextBlock_iterator(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextBlock_iterator(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextBlock_iterator(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextBlock_iterator(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextBlock::iterator *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTextBlock::iterator();

            return sipCpp;
        }
    }

    {
        const  ::QTextBlock::iterator* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTextBlock_iterator, &a0))
        {
            sipCpp = new  ::QTextBlock::iterator(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QTextBlock_iterator[] = {
    {(void *)slot_QTextBlock_iterator___isub__, isub_slot},
    {(void *)slot_QTextBlock_iterator___iadd__, iadd_slot},
    {(void *)slot_QTextBlock_iterator___ne__, ne_slot},
    {(void *)slot_QTextBlock_iterator___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QTextBlock_iterator[] = {
    {SIP_MLNAME_CAST(sipName_atEnd), meth_QTextBlock_iterator_atEnd, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlock_iterator_atEnd)},
    {SIP_MLNAME_CAST(sipName_fragment), meth_QTextBlock_iterator_fragment, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlock_iterator_fragment)}
};

PyDoc_STRVAR(doc_QTextBlock_iterator, "\1QTextBlock.iterator()\n"
"QTextBlock.iterator(QTextBlock.iterator)");


static pyqt5ClassPluginDef plugin_QTextBlock_iterator = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextBlock_iterator = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextBlock__iterator,
        {SIP_NULLPTR},
        &plugin_QTextBlock_iterator
    },
    {
        sipNameNr_iterator,
        {282, 255, 0},
        2, methods_QTextBlock_iterator,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextBlock_iterator,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QTextBlock_iterator,
    init_type_QTextBlock_iterator,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextBlock_iterator,
    assign_QTextBlock_iterator,
    array_QTextBlock_iterator,
    copy_QTextBlock_iterator,
    release_QTextBlock_iterator,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 118 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 29567 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 29571 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 48 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextlayout.sip"
#include <qtextlayout.h>
#line 70 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextlayout.sip"
#include <qtextlayout.h>
#line 29576 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 29579 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 248 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 29582 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 118 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 143 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 29587 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextlist.sip"
#include <qtextlist.h>
#line 29590 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 29593 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 29596 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 255 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 29599 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 358 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 29602 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 48 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextlayout.sip"
#include <qtextlayout.h>
#line 29605 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QTextBlock_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QTextBlock_isValid(PyObject *, PyObject *);}
static PyObject *meth_QTextBlock_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlock, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlock, sipName_isValid, doc_QTextBlock_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlock_position, "position(self) -> int");

extern "C" {static PyObject *meth_QTextBlock_position(PyObject *, PyObject *);}
static PyObject *meth_QTextBlock_position(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlock, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->position();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlock, sipName_position, doc_QTextBlock_position);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlock_length, "length(self) -> int");

extern "C" {static PyObject *meth_QTextBlock_length(PyObject *, PyObject *);}
static PyObject *meth_QTextBlock_length(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlock, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->length();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlock, sipName_length, doc_QTextBlock_length);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlock_contains, "contains(self, int) -> bool");

extern "C" {static PyObject *meth_QTextBlock_contains(PyObject *, PyObject *);}
static PyObject *meth_QTextBlock_contains(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTextBlock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextBlock, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->contains(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlock, sipName_contains, doc_QTextBlock_contains);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlock_layout, "layout(self) -> QTextLayout");

extern "C" {static PyObject *meth_QTextBlock_layout(PyObject *, PyObject *);}
static PyObject *meth_QTextBlock_layout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlock, &sipCpp))
        {
             ::QTextLayout*sipRes;

            sipRes = sipCpp->layout();

            return sipConvertFromType(sipRes,sipType_QTextLayout,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlock, sipName_layout, doc_QTextBlock_layout);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlock_blockFormat, "blockFormat(self) -> QTextBlockFormat");

extern "C" {static PyObject *meth_QTextBlock_blockFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextBlock_blockFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlock, &sipCpp))
        {
             ::QTextBlockFormat*sipRes;

            sipRes = new  ::QTextBlockFormat(sipCpp->blockFormat());

            return sipConvertFromNewType(sipRes,sipType_QTextBlockFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlock, sipName_blockFormat, doc_QTextBlock_blockFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlock_blockFormatIndex, "blockFormatIndex(self) -> int");

extern "C" {static PyObject *meth_QTextBlock_blockFormatIndex(PyObject *, PyObject *);}
static PyObject *meth_QTextBlock_blockFormatIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlock, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->blockFormatIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlock, sipName_blockFormatIndex, doc_QTextBlock_blockFormatIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlock_charFormat, "charFormat(self) -> QTextCharFormat");

extern "C" {static PyObject *meth_QTextBlock_charFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextBlock_charFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlock, &sipCpp))
        {
             ::QTextCharFormat*sipRes;

            sipRes = new  ::QTextCharFormat(sipCpp->charFormat());

            return sipConvertFromNewType(sipRes,sipType_QTextCharFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlock, sipName_charFormat, doc_QTextBlock_charFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlock_charFormatIndex, "charFormatIndex(self) -> int");

extern "C" {static PyObject *meth_QTextBlock_charFormatIndex(PyObject *, PyObject *);}
static PyObject *meth_QTextBlock_charFormatIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlock, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->charFormatIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlock, sipName_charFormatIndex, doc_QTextBlock_charFormatIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlock_text, "text(self) -> str");

extern "C" {static PyObject *meth_QTextBlock_text(PyObject *, PyObject *);}
static PyObject *meth_QTextBlock_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlock, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->text());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlock, sipName_text, doc_QTextBlock_text);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlock_document, "document(self) -> QTextDocument");

extern "C" {static PyObject *meth_QTextBlock_document(PyObject *, PyObject *);}
static PyObject *meth_QTextBlock_document(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlock, &sipCpp))
        {
            const  ::QTextDocument*sipRes;

            sipRes = sipCpp->document();

            return sipConvertFromType(const_cast< ::QTextDocument *>(sipRes),sipType_QTextDocument,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlock, sipName_document, doc_QTextBlock_document);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlock_textList, "textList(self) -> QTextList");

extern "C" {static PyObject *meth_QTextBlock_textList(PyObject *, PyObject *);}
static PyObject *meth_QTextBlock_textList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlock, &sipCpp))
        {
             ::QTextList*sipRes;

            sipRes = sipCpp->textList();

            return sipConvertFromType(sipRes,sipType_QTextList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlock, sipName_textList, doc_QTextBlock_textList);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlock_begin, "begin(self) -> QTextBlock.iterator");

extern "C" {static PyObject *meth_QTextBlock_begin(PyObject *, PyObject *);}
static PyObject *meth_QTextBlock_begin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlock, &sipCpp))
        {
             ::QTextBlock::iterator*sipRes;

            sipRes = new  ::QTextBlock::iterator(sipCpp->begin());

            return sipConvertFromNewType(sipRes,sipType_QTextBlock_iterator,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlock, sipName_begin, doc_QTextBlock_begin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlock_end, "end(self) -> QTextBlock.iterator");

extern "C" {static PyObject *meth_QTextBlock_end(PyObject *, PyObject *);}
static PyObject *meth_QTextBlock_end(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlock, &sipCpp))
        {
             ::QTextBlock::iterator*sipRes;

            sipRes = new  ::QTextBlock::iterator(sipCpp->end());

            return sipConvertFromNewType(sipRes,sipType_QTextBlock_iterator,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlock, sipName_end, doc_QTextBlock_end);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlock_next, "next(self) -> QTextBlock");

extern "C" {static PyObject *meth_QTextBlock_next(PyObject *, PyObject *);}
static PyObject *meth_QTextBlock_next(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlock, &sipCpp))
        {
             ::QTextBlock*sipRes;

            sipRes = new  ::QTextBlock(sipCpp->next());

            return sipConvertFromNewType(sipRes,sipType_QTextBlock,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlock, sipName_next, doc_QTextBlock_next);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlock_previous, "previous(self) -> QTextBlock");

extern "C" {static PyObject *meth_QTextBlock_previous(PyObject *, PyObject *);}
static PyObject *meth_QTextBlock_previous(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlock, &sipCpp))
        {
             ::QTextBlock*sipRes;

            sipRes = new  ::QTextBlock(sipCpp->previous());

            return sipConvertFromNewType(sipRes,sipType_QTextBlock,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlock, sipName_previous, doc_QTextBlock_previous);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlock_userData, "userData(self) -> QTextBlockUserData");

extern "C" {static PyObject *meth_QTextBlock_userData(PyObject *, PyObject *);}
static PyObject *meth_QTextBlock_userData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlock, &sipCpp))
        {
             ::QTextBlockUserData*sipRes;

            sipRes = sipCpp->userData();

            return sipConvertFromType(sipRes,sipType_QTextBlockUserData,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlock, sipName_userData, doc_QTextBlock_userData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlock_setUserData, "setUserData(self, QTextBlockUserData)");

extern "C" {static PyObject *meth_QTextBlock_setUserData(PyObject *, PyObject *);}
static PyObject *meth_QTextBlock_setUserData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextBlockUserData* a0;
        PyObject *a0Wrapper;
         ::QTextBlock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QTextBlock, &sipCpp, &a0Wrapper, sipType_QTextBlockUserData, &a0))
        {
            int sipIsErr = 0;

#line 182 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
        // Ownership of the user data is with the document not the text block.
        const QTextDocument *td = sipCpp->document();
        
        if (td)
        {
            PyObject *py_td = qtgui_wrap_ancestors(const_cast<QTextDocument *>(td),
                    sipType_QTextDocument);
        
            if (!py_td)
            {
                sipIsErr = 1;
            }
            else
            {
                sipTransferTo(a0Wrapper, py_td);
                Py_DECREF(py_td);
            }
        }
        
        sipCpp->setUserData(a0);
#line 30123 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlock, sipName_setUserData, doc_QTextBlock_setUserData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlock_userState, "userState(self) -> int");

extern "C" {static PyObject *meth_QTextBlock_userState(PyObject *, PyObject *);}
static PyObject *meth_QTextBlock_userState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlock, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->userState();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlock, sipName_userState, doc_QTextBlock_userState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlock_setUserState, "setUserState(self, int)");

extern "C" {static PyObject *meth_QTextBlock_setUserState(PyObject *, PyObject *);}
static PyObject *meth_QTextBlock_setUserState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextBlock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextBlock, &sipCpp, &a0))
        {
            sipCpp->setUserState(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlock, sipName_setUserState, doc_QTextBlock_setUserState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlock_clearLayout, "clearLayout(self)");

extern "C" {static PyObject *meth_QTextBlock_clearLayout(PyObject *, PyObject *);}
static PyObject *meth_QTextBlock_clearLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextBlock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlock, &sipCpp))
        {
            sipCpp->clearLayout();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlock, sipName_clearLayout, doc_QTextBlock_clearLayout);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlock_revision, "revision(self) -> int");

extern "C" {static PyObject *meth_QTextBlock_revision(PyObject *, PyObject *);}
static PyObject *meth_QTextBlock_revision(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlock, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->revision();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlock, sipName_revision, doc_QTextBlock_revision);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlock_setRevision, "setRevision(self, int)");

extern "C" {static PyObject *meth_QTextBlock_setRevision(PyObject *, PyObject *);}
static PyObject *meth_QTextBlock_setRevision(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextBlock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextBlock, &sipCpp, &a0))
        {
            sipCpp->setRevision(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlock, sipName_setRevision, doc_QTextBlock_setRevision);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlock_isVisible, "isVisible(self) -> bool");

extern "C" {static PyObject *meth_QTextBlock_isVisible(PyObject *, PyObject *);}
static PyObject *meth_QTextBlock_isVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlock, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isVisible();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlock, sipName_isVisible, doc_QTextBlock_isVisible);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlock_setVisible, "setVisible(self, bool)");

extern "C" {static PyObject *meth_QTextBlock_setVisible(PyObject *, PyObject *);}
static PyObject *meth_QTextBlock_setVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTextBlock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextBlock, &sipCpp, &a0))
        {
            sipCpp->setVisible(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlock, sipName_setVisible, doc_QTextBlock_setVisible);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlock_blockNumber, "blockNumber(self) -> int");

extern "C" {static PyObject *meth_QTextBlock_blockNumber(PyObject *, PyObject *);}
static PyObject *meth_QTextBlock_blockNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlock, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->blockNumber();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlock, sipName_blockNumber, doc_QTextBlock_blockNumber);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlock_firstLineNumber, "firstLineNumber(self) -> int");

extern "C" {static PyObject *meth_QTextBlock_firstLineNumber(PyObject *, PyObject *);}
static PyObject *meth_QTextBlock_firstLineNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlock, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->firstLineNumber();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlock, sipName_firstLineNumber, doc_QTextBlock_firstLineNumber);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlock_setLineCount, "setLineCount(self, int)");

extern "C" {static PyObject *meth_QTextBlock_setLineCount(PyObject *, PyObject *);}
static PyObject *meth_QTextBlock_setLineCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextBlock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextBlock, &sipCpp, &a0))
        {
            sipCpp->setLineCount(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlock, sipName_setLineCount, doc_QTextBlock_setLineCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlock_lineCount, "lineCount(self) -> int");

extern "C" {static PyObject *meth_QTextBlock_lineCount(PyObject *, PyObject *);}
static PyObject *meth_QTextBlock_lineCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlock, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->lineCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlock, sipName_lineCount, doc_QTextBlock_lineCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlock_textDirection, "textDirection(self) -> Qt.LayoutDirection");

extern "C" {static PyObject *meth_QTextBlock_textDirection(PyObject *, PyObject *);}
static PyObject *meth_QTextBlock_textDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlock, &sipCpp))
        {
             ::Qt::LayoutDirection sipRes;

            sipRes = sipCpp->textDirection();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_LayoutDirection);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlock, sipName_textDirection, doc_QTextBlock_textDirection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlock_textFormats, "textFormats(self) -> List[QTextLayout.FormatRange]");

extern "C" {static PyObject *meth_QTextBlock_textFormats(PyObject *, PyObject *);}
static PyObject *meth_QTextBlock_textFormats(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlock, &sipCpp))
        {
            QVector< ::QTextLayout::FormatRange>*sipRes;

            sipRes = new QVector< ::QTextLayout::FormatRange>(sipCpp->textFormats());

            return sipConvertFromNewType(sipRes,sipType_QVector_0100QTextLayout_FormatRange,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlock, sipName_textFormats, doc_QTextBlock_textFormats);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QTextBlock___ge__(PyObject *,PyObject *);}
static PyObject *slot_QTextBlock___ge__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextBlock *sipCpp = reinterpret_cast< ::QTextBlock *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextBlock));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextBlock, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::QTextBlock::operator<(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ge_slot, sipType_QTextBlock, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTextBlock___lt__(PyObject *,PyObject *);}
static PyObject *slot_QTextBlock___lt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextBlock *sipCpp = reinterpret_cast< ::QTextBlock *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextBlock));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextBlock, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QTextBlock::operator<(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, lt_slot, sipType_QTextBlock, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTextBlock___ne__(PyObject *,PyObject *);}
static PyObject *slot_QTextBlock___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextBlock *sipCpp = reinterpret_cast< ::QTextBlock *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextBlock));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextBlock, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QTextBlock::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QTextBlock, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTextBlock___eq__(PyObject *,PyObject *);}
static PyObject *slot_QTextBlock___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextBlock *sipCpp = reinterpret_cast< ::QTextBlock *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextBlock));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextBlock, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QTextBlock::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QTextBlock, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextBlock(void *, int);}
static void release_QTextBlock(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextBlock *>(sipCppV);
}


extern "C" {static void assign_QTextBlock(void *, SIP_SSIZE_T, void *);}
static void assign_QTextBlock(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTextBlock *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTextBlock *>(sipSrc);
}


extern "C" {static void *array_QTextBlock(SIP_SSIZE_T);}
static void *array_QTextBlock(SIP_SSIZE_T sipNrElem)
{
    return new  ::QTextBlock[sipNrElem];
}


extern "C" {static void *copy_QTextBlock(const void *, SIP_SSIZE_T);}
static void *copy_QTextBlock(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QTextBlock(reinterpret_cast<const  ::QTextBlock *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextBlock(sipSimpleWrapper *);}
static void dealloc_QTextBlock(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextBlock(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextBlock(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextBlock(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextBlock *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTextBlock();

            return sipCpp;
        }
    }

    {
        const  ::QTextBlock* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTextBlock, &a0))
        {
            sipCpp = new  ::QTextBlock(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QTextBlock[] = {
    {(void *)slot_QTextBlock___ge__, ge_slot},
    {(void *)slot_QTextBlock___lt__, lt_slot},
    {(void *)slot_QTextBlock___ne__, ne_slot},
    {(void *)slot_QTextBlock___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QTextBlock[] = {
    {SIP_MLNAME_CAST(sipName_begin), meth_QTextBlock_begin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlock_begin)},
    {SIP_MLNAME_CAST(sipName_blockFormat), meth_QTextBlock_blockFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlock_blockFormat)},
    {SIP_MLNAME_CAST(sipName_blockFormatIndex), meth_QTextBlock_blockFormatIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlock_blockFormatIndex)},
    {SIP_MLNAME_CAST(sipName_blockNumber), meth_QTextBlock_blockNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlock_blockNumber)},
    {SIP_MLNAME_CAST(sipName_charFormat), meth_QTextBlock_charFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlock_charFormat)},
    {SIP_MLNAME_CAST(sipName_charFormatIndex), meth_QTextBlock_charFormatIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlock_charFormatIndex)},
    {SIP_MLNAME_CAST(sipName_clearLayout), meth_QTextBlock_clearLayout, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlock_clearLayout)},
    {SIP_MLNAME_CAST(sipName_contains), meth_QTextBlock_contains, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlock_contains)},
    {SIP_MLNAME_CAST(sipName_document), meth_QTextBlock_document, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlock_document)},
    {SIP_MLNAME_CAST(sipName_end), meth_QTextBlock_end, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlock_end)},
    {SIP_MLNAME_CAST(sipName_firstLineNumber), meth_QTextBlock_firstLineNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlock_firstLineNumber)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QTextBlock_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlock_isValid)},
    {SIP_MLNAME_CAST(sipName_isVisible), meth_QTextBlock_isVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlock_isVisible)},
    {SIP_MLNAME_CAST(sipName_layout), meth_QTextBlock_layout, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlock_layout)},
    {SIP_MLNAME_CAST(sipName_length), meth_QTextBlock_length, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlock_length)},
    {SIP_MLNAME_CAST(sipName_lineCount), meth_QTextBlock_lineCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlock_lineCount)},
    {SIP_MLNAME_CAST(sipName_next), meth_QTextBlock_next, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlock_next)},
    {SIP_MLNAME_CAST(sipName_position), meth_QTextBlock_position, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlock_position)},
    {SIP_MLNAME_CAST(sipName_previous), meth_QTextBlock_previous, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlock_previous)},
    {SIP_MLNAME_CAST(sipName_revision), meth_QTextBlock_revision, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlock_revision)},
    {SIP_MLNAME_CAST(sipName_setLineCount), meth_QTextBlock_setLineCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlock_setLineCount)},
    {SIP_MLNAME_CAST(sipName_setRevision), meth_QTextBlock_setRevision, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlock_setRevision)},
    {SIP_MLNAME_CAST(sipName_setUserData), meth_QTextBlock_setUserData, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlock_setUserData)},
    {SIP_MLNAME_CAST(sipName_setUserState), meth_QTextBlock_setUserState, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlock_setUserState)},
    {SIP_MLNAME_CAST(sipName_setVisible), meth_QTextBlock_setVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlock_setVisible)},
    {SIP_MLNAME_CAST(sipName_text), meth_QTextBlock_text, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlock_text)},
    {SIP_MLNAME_CAST(sipName_textDirection), meth_QTextBlock_textDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlock_textDirection)},
    {SIP_MLNAME_CAST(sipName_textFormats), meth_QTextBlock_textFormats, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlock_textFormats)},
    {SIP_MLNAME_CAST(sipName_textList), meth_QTextBlock_textList, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlock_textList)},
    {SIP_MLNAME_CAST(sipName_userData), meth_QTextBlock_userData, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlock_userData)},
    {SIP_MLNAME_CAST(sipName_userState), meth_QTextBlock_userState, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlock_userState)}
};

PyDoc_STRVAR(doc_QTextBlock, "\1QTextBlock()\n"
"QTextBlock(QTextBlock)");


static pyqt5ClassPluginDef plugin_QTextBlock = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextBlock = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextBlock,
        {SIP_NULLPTR},
        &plugin_QTextBlock
    },
    {
        sipNameNr_QTextBlock,
        {0, 0, 1},
        31, methods_QTextBlock,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextBlock,
    -1,
    -1,
    SIP_NULLPTR,
    slots_QTextBlock,
    init_type_QTextBlock,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextBlock,
    assign_QTextBlock,
    array_QTextBlock,
    copy_QTextBlock,
    release_QTextBlock,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 76 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 30810 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 118 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 30814 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 30817 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QTextFrame_iterator_parentFrame, "parentFrame(self) -> QTextFrame");

extern "C" {static PyObject *meth_QTextFrame_iterator_parentFrame(PyObject *, PyObject *);}
static PyObject *meth_QTextFrame_iterator_parentFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFrame::iterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrame_iterator, &sipCpp))
        {
             ::QTextFrame*sipRes;

            sipRes = sipCpp->parentFrame();

            return sipConvertFromType(sipRes,sipType_QTextFrame,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_iterator, sipName_parentFrame, doc_QTextFrame_iterator_parentFrame);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFrame_iterator_currentFrame, "currentFrame(self) -> QTextFrame");

extern "C" {static PyObject *meth_QTextFrame_iterator_currentFrame(PyObject *, PyObject *);}
static PyObject *meth_QTextFrame_iterator_currentFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFrame::iterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrame_iterator, &sipCpp))
        {
             ::QTextFrame*sipRes;

            sipRes = sipCpp->currentFrame();

            return sipConvertFromType(sipRes,sipType_QTextFrame,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_iterator, sipName_currentFrame, doc_QTextFrame_iterator_currentFrame);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFrame_iterator_currentBlock, "currentBlock(self) -> QTextBlock");

extern "C" {static PyObject *meth_QTextFrame_iterator_currentBlock(PyObject *, PyObject *);}
static PyObject *meth_QTextFrame_iterator_currentBlock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFrame::iterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrame_iterator, &sipCpp))
        {
             ::QTextBlock*sipRes;

            sipRes = new  ::QTextBlock(sipCpp->currentBlock());

            return sipConvertFromNewType(sipRes,sipType_QTextBlock,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_iterator, sipName_currentBlock, doc_QTextFrame_iterator_currentBlock);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFrame_iterator_atEnd, "atEnd(self) -> bool");

extern "C" {static PyObject *meth_QTextFrame_iterator_atEnd(PyObject *, PyObject *);}
static PyObject *meth_QTextFrame_iterator_atEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFrame::iterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrame_iterator, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->atEnd();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_iterator, sipName_atEnd, doc_QTextFrame_iterator_atEnd);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QTextFrame_iterator___isub__(PyObject *,PyObject *);}
static PyObject *slot_QTextFrame_iterator___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTextFrame_iterator)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTextFrame::iterator *sipCpp = reinterpret_cast< ::QTextFrame::iterator *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextFrame_iterator));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 100 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
            if (a0 > 0)
                while (a0--)
                    (*sipCpp)--;
            else if (a0 < 0)
                while (a0++)
                    (*sipCpp)++;
#line 30960 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTextFrame_iterator___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QTextFrame_iterator___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTextFrame_iterator)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTextFrame::iterator *sipCpp = reinterpret_cast< ::QTextFrame::iterator *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextFrame_iterator));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 90 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
            if (a0 > 0)
                while (a0--)
                    (*sipCpp)++;
            else if (a0 < 0)
                while (a0++)
                    (*sipCpp)--;
#line 31007 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTextFrame_iterator___ne__(PyObject *,PyObject *);}
static PyObject *slot_QTextFrame_iterator___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextFrame::iterator *sipCpp = reinterpret_cast< ::QTextFrame::iterator *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextFrame_iterator));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFrame::iterator* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextFrame_iterator, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QTextFrame::iterator::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QTextFrame_iterator, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTextFrame_iterator___eq__(PyObject *,PyObject *);}
static PyObject *slot_QTextFrame_iterator___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextFrame::iterator *sipCpp = reinterpret_cast< ::QTextFrame::iterator *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextFrame_iterator));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFrame::iterator* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextFrame_iterator, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QTextFrame::iterator::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QTextFrame_iterator, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextFrame_iterator(void *, int);}
static void release_QTextFrame_iterator(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextFrame::iterator *>(sipCppV);
}


extern "C" {static void assign_QTextFrame_iterator(void *, SIP_SSIZE_T, void *);}
static void assign_QTextFrame_iterator(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTextFrame::iterator *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTextFrame::iterator *>(sipSrc);
}


extern "C" {static void *array_QTextFrame_iterator(SIP_SSIZE_T);}
static void *array_QTextFrame_iterator(SIP_SSIZE_T sipNrElem)
{
    return new  ::QTextFrame::iterator[sipNrElem];
}


extern "C" {static void *copy_QTextFrame_iterator(const void *, SIP_SSIZE_T);}
static void *copy_QTextFrame_iterator(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QTextFrame::iterator(reinterpret_cast<const  ::QTextFrame::iterator *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextFrame_iterator(sipSimpleWrapper *);}
static void dealloc_QTextFrame_iterator(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextFrame_iterator(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextFrame_iterator(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextFrame_iterator(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextFrame::iterator *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTextFrame::iterator();

            return sipCpp;
        }
    }

    {
        const  ::QTextFrame::iterator* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTextFrame_iterator, &a0))
        {
            sipCpp = new  ::QTextFrame::iterator(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QTextFrame_iterator[] = {
    {(void *)slot_QTextFrame_iterator___isub__, isub_slot},
    {(void *)slot_QTextFrame_iterator___iadd__, iadd_slot},
    {(void *)slot_QTextFrame_iterator___ne__, ne_slot},
    {(void *)slot_QTextFrame_iterator___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QTextFrame_iterator[] = {
    {SIP_MLNAME_CAST(sipName_atEnd), meth_QTextFrame_iterator_atEnd, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrame_iterator_atEnd)},
    {SIP_MLNAME_CAST(sipName_currentBlock), meth_QTextFrame_iterator_currentBlock, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrame_iterator_currentBlock)},
    {SIP_MLNAME_CAST(sipName_currentFrame), meth_QTextFrame_iterator_currentFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrame_iterator_currentFrame)},
    {SIP_MLNAME_CAST(sipName_parentFrame), meth_QTextFrame_iterator_parentFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrame_iterator_parentFrame)}
};

PyDoc_STRVAR(doc_QTextFrame_iterator, "\1QTextFrame.iterator()\n"
"QTextFrame.iterator(QTextFrame.iterator)");


static pyqt5ClassPluginDef plugin_QTextFrame_iterator = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextFrame_iterator = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextFrame__iterator,
        {SIP_NULLPTR},
        &plugin_QTextFrame_iterator
    },
    {
        sipNameNr_iterator,
        {311, 255, 0},
        4, methods_QTextFrame_iterator,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextFrame_iterator,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QTextFrame_iterator,
    init_type_QTextFrame_iterator,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextFrame_iterator,
    assign_QTextFrame_iterator,
    array_QTextFrame_iterator,
    copy_QTextFrame_iterator,
    release_QTextFrame_iterator,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 31240 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 31244 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 464 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 31247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 76 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 31252 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 31255 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextcursor.sip"
#include <qtextcursor.h>
#line 31258 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 31261 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 31264 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 31267 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 31270 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 31273 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 31276 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 31279 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 31282 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 31285 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 31288 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 31291 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 31294 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 31297 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 31300 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 31303 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 31306 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 31309 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


class sipQTextFrame : public  ::QTextFrame
{
public:
    sipQTextFrame( ::QTextDocument*);
    virtual ~sipQTextFrame();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTextFrame(const sipQTextFrame &);
    sipQTextFrame &operator = (const sipQTextFrame &);

    char sipPyMethods[7];
};

sipQTextFrame::sipQTextFrame( ::QTextDocument*a0):  ::QTextFrame(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTextFrame::~sipQTextFrame()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQTextFrame::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QTextFrame);

    return  ::QTextFrame::metaObject();
}

int sipQTextFrame::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QTextFrame::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QTextFrame,_c,_id,_a);

    return _id;
}

void *sipQTextFrame::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QTextFrame, _clname, &sipCpp) ? sipCpp :  ::QTextFrame::qt_metacast(_clname));
}

void sipQTextFrame::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QTextFrame::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextFrame::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QTextFrame::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextFrame::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QTextFrame::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_1(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextFrame::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QTextFrame::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_2(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextFrame::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QTextFrame::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_3(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQTextFrame::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QTextFrame::eventFilter(a0,a1);

    extern bool sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_4(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQTextFrame::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QTextFrame::event(a0);

    extern bool sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_5(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QTextFrame_frameFormat, "frameFormat(self) -> QTextFrameFormat");

extern "C" {static PyObject *meth_QTextFrame_frameFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFrame_frameFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrame, &sipCpp))
        {
             ::QTextFrameFormat*sipRes;

            sipRes = new  ::QTextFrameFormat(sipCpp->frameFormat());

            return sipConvertFromNewType(sipRes,sipType_QTextFrameFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrame, sipName_frameFormat, doc_QTextFrame_frameFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFrame_firstCursorPosition, "firstCursorPosition(self) -> QTextCursor");

extern "C" {static PyObject *meth_QTextFrame_firstCursorPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextFrame_firstCursorPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrame, &sipCpp))
        {
             ::QTextCursor*sipRes;

            sipRes = new  ::QTextCursor(sipCpp->firstCursorPosition());

            return sipConvertFromNewType(sipRes,sipType_QTextCursor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrame, sipName_firstCursorPosition, doc_QTextFrame_firstCursorPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFrame_lastCursorPosition, "lastCursorPosition(self) -> QTextCursor");

extern "C" {static PyObject *meth_QTextFrame_lastCursorPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextFrame_lastCursorPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrame, &sipCpp))
        {
             ::QTextCursor*sipRes;

            sipRes = new  ::QTextCursor(sipCpp->lastCursorPosition());

            return sipConvertFromNewType(sipRes,sipType_QTextCursor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrame, sipName_lastCursorPosition, doc_QTextFrame_lastCursorPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFrame_firstPosition, "firstPosition(self) -> int");

extern "C" {static PyObject *meth_QTextFrame_firstPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextFrame_firstPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrame, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->firstPosition();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrame, sipName_firstPosition, doc_QTextFrame_firstPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFrame_lastPosition, "lastPosition(self) -> int");

extern "C" {static PyObject *meth_QTextFrame_lastPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextFrame_lastPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrame, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->lastPosition();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrame, sipName_lastPosition, doc_QTextFrame_lastPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFrame_childFrames, "childFrames(self) -> List[QTextFrame]");

extern "C" {static PyObject *meth_QTextFrame_childFrames(PyObject *, PyObject *);}
static PyObject *meth_QTextFrame_childFrames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrame, &sipCpp))
        {
            QList< ::QTextFrame*>*sipRes;

            sipRes = new QList< ::QTextFrame*>(sipCpp->childFrames());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QTextFrame,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrame, sipName_childFrames, doc_QTextFrame_childFrames);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFrame_parentFrame, "parentFrame(self) -> QTextFrame");

extern "C" {static PyObject *meth_QTextFrame_parentFrame(PyObject *, PyObject *);}
static PyObject *meth_QTextFrame_parentFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrame, &sipCpp))
        {
             ::QTextFrame*sipRes;

            sipRes = sipCpp->parentFrame();

            return sipConvertFromType(sipRes,sipType_QTextFrame,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrame, sipName_parentFrame, doc_QTextFrame_parentFrame);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFrame_begin, "begin(self) -> QTextFrame.iterator");

extern "C" {static PyObject *meth_QTextFrame_begin(PyObject *, PyObject *);}
static PyObject *meth_QTextFrame_begin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrame, &sipCpp))
        {
             ::QTextFrame::iterator*sipRes;

            sipRes = new  ::QTextFrame::iterator(sipCpp->begin());

            return sipConvertFromNewType(sipRes,sipType_QTextFrame_iterator,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrame, sipName_begin, doc_QTextFrame_begin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFrame_end, "end(self) -> QTextFrame.iterator");

extern "C" {static PyObject *meth_QTextFrame_end(PyObject *, PyObject *);}
static PyObject *meth_QTextFrame_end(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrame, &sipCpp))
        {
             ::QTextFrame::iterator*sipRes;

            sipRes = new  ::QTextFrame::iterator(sipCpp->end());

            return sipConvertFromNewType(sipRes,sipType_QTextFrame_iterator,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrame, sipName_end, doc_QTextFrame_end);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFrame_setFrameFormat, "setFrameFormat(self, QTextFrameFormat)");

extern "C" {static PyObject *meth_QTextFrame_setFrameFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFrame_setFrameFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFrameFormat* a0;
         ::QTextFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextFrame, &sipCpp, sipType_QTextFrameFormat, &a0))
        {
            sipCpp->setFrameFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrame, sipName_setFrameFormat, doc_QTextFrame_setFrameFormat);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QTextFrame(void *, const sipTypeDef *);}
static void *cast_QTextFrame(void *sipCppV, const sipTypeDef *targetType)
{
     ::QTextFrame *sipCpp = reinterpret_cast< ::QTextFrame *>(sipCppV);

    if (targetType == sipType_QTextObject)
        return static_cast< ::QTextObject *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextFrame(void *, int);}
static void release_QTextFrame(void *sipCppV, int)
{
     ::QTextFrame *sipCpp = reinterpret_cast< ::QTextFrame *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QTextFrame(sipSimpleWrapper *);}
static void dealloc_QTextFrame(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQTextFrame *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextFrame(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QTextFrame(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextFrame(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQTextFrame *sipCpp = SIP_NULLPTR;

    {
         ::QTextDocument* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8", sipType_QTextDocument, &a0))
        {
            sipCpp = new sipQTextFrame(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTextFrame[] = {{332, 255, 1}};


static PyMethodDef methods_QTextFrame[] = {
    {SIP_MLNAME_CAST(sipName_begin), meth_QTextFrame_begin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrame_begin)},
    {SIP_MLNAME_CAST(sipName_childFrames), meth_QTextFrame_childFrames, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrame_childFrames)},
    {SIP_MLNAME_CAST(sipName_end), meth_QTextFrame_end, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrame_end)},
    {SIP_MLNAME_CAST(sipName_firstCursorPosition), meth_QTextFrame_firstCursorPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrame_firstCursorPosition)},
    {SIP_MLNAME_CAST(sipName_firstPosition), meth_QTextFrame_firstPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrame_firstPosition)},
    {SIP_MLNAME_CAST(sipName_frameFormat), meth_QTextFrame_frameFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrame_frameFormat)},
    {SIP_MLNAME_CAST(sipName_lastCursorPosition), meth_QTextFrame_lastCursorPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrame_lastCursorPosition)},
    {SIP_MLNAME_CAST(sipName_lastPosition), meth_QTextFrame_lastPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrame_lastPosition)},
    {SIP_MLNAME_CAST(sipName_parentFrame), meth_QTextFrame_parentFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrame_parentFrame)},
    {SIP_MLNAME_CAST(sipName_setFrameFormat), meth_QTextFrame_setFrameFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrame_setFrameFormat)}
};

PyDoc_STRVAR(doc_QTextFrame, "\1QTextFrame(QTextDocument)");


static pyqt5ClassPluginDef plugin_QTextFrame = {
    & ::QTextFrame::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextFrame = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextFrame,
        {SIP_NULLPTR},
        &plugin_QTextFrame
    },
    {
        sipNameNr_QTextFrame,
        {0, 0, 1},
        10, methods_QTextFrame,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextFrame,
    -1,
    -1,
    supers_QTextFrame,
    SIP_NULLPTR,
    init_type_QTextFrame,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextFrame,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QTextFrame,
    cast_QTextFrame,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 31925 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 31929 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 31932 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 31935 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 31938 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 31941 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 31944 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 31947 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 31950 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 31953 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 31956 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 31959 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 31962 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 31965 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 31968 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 31971 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 31974 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 31977 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 31980 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


class sipQTextObject : public  ::QTextObject
{
public:
    sipQTextObject( ::QTextDocument*);
    virtual ~sipQTextObject();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTextObject(const sipQTextObject &);
    sipQTextObject &operator = (const sipQTextObject &);

    char sipPyMethods[7];
};

sipQTextObject::sipQTextObject( ::QTextDocument*a0):  ::QTextObject(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTextObject::~sipQTextObject()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQTextObject::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QTextObject);

    return  ::QTextObject::metaObject();
}

int sipQTextObject::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QTextObject::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QTextObject,_c,_id,_a);

    return _id;
}

void *sipQTextObject::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QTextObject, _clname, &sipCpp) ? sipCpp :  ::QTextObject::qt_metacast(_clname));
}

bool sipQTextObject::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QTextObject::event(a0);

    extern bool sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_5(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQTextObject::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QTextObject::eventFilter(a0,a1);

    extern bool sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_4(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQTextObject::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QTextObject::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_3(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextObject::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QTextObject::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_2(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextObject::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QTextObject::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_1(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextObject::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QTextObject::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextObject::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QTextObject::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QTextObject_setFormat, "setFormat(self, QTextFormat)");

extern "C" {static PyObject *meth_QTextObject_setFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextObject_setFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat* a0;
         ::QTextObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QTextObject, &sipCpp, sipType_QTextFormat, &a0))
        {
            sipCpp->setFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextObject, sipName_setFormat, doc_QTextObject_setFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextObject_format, "format(self) -> QTextFormat");

extern "C" {static PyObject *meth_QTextObject_format(PyObject *, PyObject *);}
static PyObject *meth_QTextObject_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextObject, &sipCpp))
        {
             ::QTextFormat*sipRes;

            sipRes = new  ::QTextFormat(sipCpp->format());

            return sipConvertFromNewType(sipRes,sipType_QTextFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextObject, sipName_format, doc_QTextObject_format);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextObject_formatIndex, "formatIndex(self) -> int");

extern "C" {static PyObject *meth_QTextObject_formatIndex(PyObject *, PyObject *);}
static PyObject *meth_QTextObject_formatIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextObject, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->formatIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextObject, sipName_formatIndex, doc_QTextObject_formatIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextObject_document, "document(self) -> QTextDocument");

extern "C" {static PyObject *meth_QTextObject_document(PyObject *, PyObject *);}
static PyObject *meth_QTextObject_document(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextObject, &sipCpp))
        {
             ::QTextDocument*sipRes;

            sipRes = sipCpp->document();

            return sipConvertFromType(sipRes,sipType_QTextDocument,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextObject, sipName_document, doc_QTextObject_document);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextObject_objectIndex, "objectIndex(self) -> int");

extern "C" {static PyObject *meth_QTextObject_objectIndex(PyObject *, PyObject *);}
static PyObject *meth_QTextObject_objectIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextObject, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->objectIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextObject, sipName_objectIndex, doc_QTextObject_objectIndex);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QTextObject(void *, const sipTypeDef *);}
static void *cast_QTextObject(void *sipCppV, const sipTypeDef *targetType)
{
     ::QTextObject *sipCpp = reinterpret_cast< ::QTextObject *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextObject(void *, int);}
static void release_QTextObject(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQTextObject *>(sipCppV);
}


extern "C" {static void dealloc_QTextObject(sipSimpleWrapper *);}
static void dealloc_QTextObject(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQTextObject *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextObject(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QTextObject(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextObject(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQTextObject *sipCpp = SIP_NULLPTR;

    {
         ::QTextDocument* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8", sipType_QTextDocument, &a0))
        {
            sipCpp = new sipQTextObject(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTextObject[] = {{25, 0, 1}};


static PyMethodDef methods_QTextObject[] = {
    {SIP_MLNAME_CAST(sipName_document), meth_QTextObject_document, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextObject_document)},
    {SIP_MLNAME_CAST(sipName_format), meth_QTextObject_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextObject_format)},
    {SIP_MLNAME_CAST(sipName_formatIndex), meth_QTextObject_formatIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextObject_formatIndex)},
    {SIP_MLNAME_CAST(sipName_objectIndex), meth_QTextObject_objectIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextObject_objectIndex)},
    {SIP_MLNAME_CAST(sipName_setFormat), meth_QTextObject_setFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextObject_setFormat)}
};

PyDoc_STRVAR(doc_QTextObject, "\1QTextObject(QTextDocument)");


static pyqt5ClassPluginDef plugin_QTextObject = {
    & ::QTextObject::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextObject = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextObject,
        {SIP_NULLPTR},
        &plugin_QTextObject
    },
    {
        sipNameNr_QTextObject,
        {0, 0, 1},
        5, methods_QTextObject,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextObject,
    -1,
    -1,
    supers_QTextObject,
    SIP_NULLPTR,
    init_type_QTextObject,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextObject,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QTextObject,
    cast_QTextObject,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextlist.sip"
#include <qtextlist.h>
#line 32444 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 32448 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 409 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 32451 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 118 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 32454 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 32457 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 32460 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 32463 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 32466 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 32469 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 32472 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 32475 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 32478 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 32481 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 32484 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 32487 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 32490 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 32493 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 32496 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 32499 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 32502 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 32505 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


class sipQTextList : public  ::QTextList
{
public:
    sipQTextList( ::QTextDocument*);
    virtual ~sipQTextList();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void blockInserted(const  ::QTextBlock&) SIP_OVERRIDE;
    void blockRemoved(const  ::QTextBlock&) SIP_OVERRIDE;
    void blockFormatChanged(const  ::QTextBlock&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTextList(const sipQTextList &);
    sipQTextList &operator = (const sipQTextList &);

    char sipPyMethods[10];
};

sipQTextList::sipQTextList( ::QTextDocument*a0):  ::QTextList(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTextList::~sipQTextList()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQTextList::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QTextList);

    return  ::QTextList::metaObject();
}

int sipQTextList::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QTextList::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QTextList,_c,_id,_a);

    return _id;
}

void *sipQTextList::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QTextList, _clname, &sipCpp) ? sipCpp :  ::QTextList::qt_metacast(_clname));
}

bool sipQTextList::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QTextList::event(a0);

    extern bool sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_5(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQTextList::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QTextList::eventFilter(a0,a1);

    extern bool sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_4(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQTextList::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QTextList::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_3(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextList::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QTextList::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_2(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextList::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QTextList::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_1(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextList::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QTextList::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextList::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QTextList::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextList::blockInserted(const  ::QTextBlock& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_blockInserted);

    if (!sipMeth)
    {
         ::QTextList::blockInserted(a0);
        return;
    }

    extern void sipVH_QtGui_106(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QTextBlock&);

    sipVH_QtGui_106(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextList::blockRemoved(const  ::QTextBlock& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_blockRemoved);

    if (!sipMeth)
    {
         ::QTextList::blockRemoved(a0);
        return;
    }

    extern void sipVH_QtGui_106(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QTextBlock&);

    sipVH_QtGui_106(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextList::blockFormatChanged(const  ::QTextBlock& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_blockFormatChanged);

    if (!sipMeth)
    {
         ::QTextList::blockFormatChanged(a0);
        return;
    }

    extern void sipVH_QtGui_106(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QTextBlock&);

    sipVH_QtGui_106(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QTextList_count, "count(self) -> int");

extern "C" {static PyObject *meth_QTextList_count(PyObject *, PyObject *);}
static PyObject *meth_QTextList_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextList *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextList, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->count();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_count, doc_QTextList_count);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextList_item, "item(self, int) -> QTextBlock");

extern "C" {static PyObject *meth_QTextList_item(PyObject *, PyObject *);}
static PyObject *meth_QTextList_item(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTextList *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextList, &sipCpp, &a0))
        {
             ::QTextBlock*sipRes;

            sipRes = new  ::QTextBlock(sipCpp->item(a0));

            return sipConvertFromNewType(sipRes,sipType_QTextBlock,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_item, doc_QTextList_item);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextList_itemNumber, "itemNumber(self, QTextBlock) -> int");

extern "C" {static PyObject *meth_QTextList_itemNumber(PyObject *, PyObject *);}
static PyObject *meth_QTextList_itemNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock* a0;
        const  ::QTextList *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextList, &sipCpp, sipType_QTextBlock, &a0))
        {
            int sipRes;

            sipRes = sipCpp->itemNumber(*a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_itemNumber, doc_QTextList_itemNumber);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextList_itemText, "itemText(self, QTextBlock) -> str");

extern "C" {static PyObject *meth_QTextList_itemText(PyObject *, PyObject *);}
static PyObject *meth_QTextList_itemText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock* a0;
        const  ::QTextList *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextList, &sipCpp, sipType_QTextBlock, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->itemText(*a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_itemText, doc_QTextList_itemText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextList_removeItem, "removeItem(self, int)");

extern "C" {static PyObject *meth_QTextList_removeItem(PyObject *, PyObject *);}
static PyObject *meth_QTextList_removeItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextList *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextList, &sipCpp, &a0))
        {
            sipCpp->removeItem(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_removeItem, doc_QTextList_removeItem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextList_remove, "remove(self, QTextBlock)");

extern "C" {static PyObject *meth_QTextList_remove(PyObject *, PyObject *);}
static PyObject *meth_QTextList_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock* a0;
         ::QTextList *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextList, &sipCpp, sipType_QTextBlock, &a0))
        {
            sipCpp->remove(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_remove, doc_QTextList_remove);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextList_add, "add(self, QTextBlock)");

extern "C" {static PyObject *meth_QTextList_add(PyObject *, PyObject *);}
static PyObject *meth_QTextList_add(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock* a0;
         ::QTextList *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextList, &sipCpp, sipType_QTextBlock, &a0))
        {
            sipCpp->add(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_add, doc_QTextList_add);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextList_format, "format(self) -> QTextListFormat");

extern "C" {static PyObject *meth_QTextList_format(PyObject *, PyObject *);}
static PyObject *meth_QTextList_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextList *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextList, &sipCpp))
        {
             ::QTextListFormat*sipRes;

            sipRes = new  ::QTextListFormat(sipCpp->format());

            return sipConvertFromNewType(sipRes,sipType_QTextListFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_format, doc_QTextList_format);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextList_setFormat, "setFormat(self, QTextListFormat)");

extern "C" {static PyObject *meth_QTextList_setFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextList_setFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextListFormat* a0;
         ::QTextList *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextList, &sipCpp, sipType_QTextListFormat, &a0))
        {
            sipCpp->setFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_setFormat, doc_QTextList_setFormat);

    return SIP_NULLPTR;
}


extern "C" {static SIP_SSIZE_T slot_QTextList___len__(PyObject *);}
static SIP_SSIZE_T slot_QTextList___len__(PyObject *sipSelf)
{
     ::QTextList *sipCpp = reinterpret_cast< ::QTextList *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextList));

    if (!sipCpp)
        return 0;


    {
        {
            SIP_SSIZE_T sipRes = 0;

#line 1 "Auto-generated"
            sipRes = (SIP_SSIZE_T)sipCpp->count();
#line 33024 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QTextList(void *, const sipTypeDef *);}
static void *cast_QTextList(void *sipCppV, const sipTypeDef *targetType)
{
     ::QTextList *sipCpp = reinterpret_cast< ::QTextList *>(sipCppV);

    if (targetType == sipType_QTextBlockGroup)
        return static_cast< ::QTextBlockGroup *>(sipCpp);

    if (targetType == sipType_QTextObject)
        return static_cast< ::QTextObject *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextList(void *, int);}
static void release_QTextList(void *sipCppV, int)
{
     ::QTextList *sipCpp = reinterpret_cast< ::QTextList *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QTextList(sipSimpleWrapper *);}
static void dealloc_QTextList(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQTextList *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextList(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QTextList(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextList(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQTextList *sipCpp = SIP_NULLPTR;

    {
         ::QTextDocument* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8", sipType_QTextDocument, &a0))
        {
            sipCpp = new sipQTextList(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTextList[] = {{286, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_QTextList[] = {
    {(void *)slot_QTextList___len__, len_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QTextList[] = {
    {SIP_MLNAME_CAST(sipName_add), meth_QTextList_add, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextList_add)},
    {SIP_MLNAME_CAST(sipName_count), meth_QTextList_count, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextList_count)},
    {SIP_MLNAME_CAST(sipName_format), meth_QTextList_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextList_format)},
    {SIP_MLNAME_CAST(sipName_item), meth_QTextList_item, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextList_item)},
    {SIP_MLNAME_CAST(sipName_itemNumber), meth_QTextList_itemNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextList_itemNumber)},
    {SIP_MLNAME_CAST(sipName_itemText), meth_QTextList_itemText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextList_itemText)},
    {SIP_MLNAME_CAST(sipName_remove), meth_QTextList_remove, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextList_remove)},
    {SIP_MLNAME_CAST(sipName_removeItem), meth_QTextList_removeItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextList_removeItem)},
    {SIP_MLNAME_CAST(sipName_setFormat), meth_QTextList_setFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextList_setFormat)}
};

PyDoc_STRVAR(doc_QTextList, "\1QTextList(QTextDocument)");


static pyqt5ClassPluginDef plugin_QTextList = {
    & ::QTextList::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextList = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextList,
        {SIP_NULLPTR},
        &plugin_QTextList
    },
    {
        sipNameNr_QTextList,
        {0, 0, 1},
        9, methods_QTextList,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextList,
    -1,
    -1,
    supers_QTextList,
    slots_QTextList,
    init_type_QTextList,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextList,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QTextList,
    cast_QTextList,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 44 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 33187 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 33191 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 33194 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 118 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 33197 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 33200 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 33203 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 33206 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 33209 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 33212 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33215 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33218 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 33221 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 33224 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 33227 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 33230 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 33233 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 33236 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 33239 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 33242 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 33245 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 33248 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


class sipQTextBlockGroup : public  ::QTextBlockGroup
{
public:
    sipQTextBlockGroup( ::QTextDocument*);
    virtual ~sipQTextBlockGroup();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void blockFormatChanged(const  ::QTextBlock&) SIP_OVERRIDE;
    void blockRemoved(const  ::QTextBlock&) SIP_OVERRIDE;
    void blockInserted(const  ::QTextBlock&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTextBlockGroup(const sipQTextBlockGroup &);
    sipQTextBlockGroup &operator = (const sipQTextBlockGroup &);

    char sipPyMethods[10];
};

sipQTextBlockGroup::sipQTextBlockGroup( ::QTextDocument*a0):  ::QTextBlockGroup(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTextBlockGroup::~sipQTextBlockGroup()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQTextBlockGroup::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QTextBlockGroup);

    return  ::QTextBlockGroup::metaObject();
}

int sipQTextBlockGroup::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QTextBlockGroup::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QTextBlockGroup,_c,_id,_a);

    return _id;
}

void *sipQTextBlockGroup::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QTextBlockGroup, _clname, &sipCpp) ? sipCpp :  ::QTextBlockGroup::qt_metacast(_clname));
}

void sipQTextBlockGroup::blockFormatChanged(const  ::QTextBlock& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_blockFormatChanged);

    if (!sipMeth)
    {
         ::QTextBlockGroup::blockFormatChanged(a0);
        return;
    }

    extern void sipVH_QtGui_106(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QTextBlock&);

    sipVH_QtGui_106(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextBlockGroup::blockRemoved(const  ::QTextBlock& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_blockRemoved);

    if (!sipMeth)
    {
         ::QTextBlockGroup::blockRemoved(a0);
        return;
    }

    extern void sipVH_QtGui_106(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QTextBlock&);

    sipVH_QtGui_106(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextBlockGroup::blockInserted(const  ::QTextBlock& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_blockInserted);

    if (!sipMeth)
    {
         ::QTextBlockGroup::blockInserted(a0);
        return;
    }

    extern void sipVH_QtGui_106(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QTextBlock&);

    sipVH_QtGui_106(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextBlockGroup::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QTextBlockGroup::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextBlockGroup::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QTextBlockGroup::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextBlockGroup::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QTextBlockGroup::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_1(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextBlockGroup::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QTextBlockGroup::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_2(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextBlockGroup::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QTextBlockGroup::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_3(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQTextBlockGroup::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QTextBlockGroup::eventFilter(a0,a1);

    extern bool sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_4(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQTextBlockGroup::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QTextBlockGroup::event(a0);

    extern bool sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_5(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QTextBlockGroup_blockInserted, "blockInserted(self, QTextBlock)");

extern "C" {static PyObject *meth_QTextBlockGroup_blockInserted(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockGroup_blockInserted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QTextBlock* a0;
         ::QTextBlockGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QTextBlockGroup, &sipCpp, sipType_QTextBlock, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTextBlockGroup::blockInserted(*a0) : sipCpp->blockInserted(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockGroup, sipName_blockInserted, doc_QTextBlockGroup_blockInserted);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockGroup_blockRemoved, "blockRemoved(self, QTextBlock)");

extern "C" {static PyObject *meth_QTextBlockGroup_blockRemoved(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockGroup_blockRemoved(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QTextBlock* a0;
         ::QTextBlockGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QTextBlockGroup, &sipCpp, sipType_QTextBlock, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTextBlockGroup::blockRemoved(*a0) : sipCpp->blockRemoved(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockGroup, sipName_blockRemoved, doc_QTextBlockGroup_blockRemoved);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockGroup_blockFormatChanged, "blockFormatChanged(self, QTextBlock)");

extern "C" {static PyObject *meth_QTextBlockGroup_blockFormatChanged(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockGroup_blockFormatChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QTextBlock* a0;
         ::QTextBlockGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QTextBlockGroup, &sipCpp, sipType_QTextBlock, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTextBlockGroup::blockFormatChanged(*a0) : sipCpp->blockFormatChanged(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockGroup, sipName_blockFormatChanged, doc_QTextBlockGroup_blockFormatChanged);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockGroup_blockList, "blockList(self) -> List[QTextBlock]");

extern "C" {static PyObject *meth_QTextBlockGroup_blockList(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockGroup_blockList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlockGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QTextBlockGroup, &sipCpp))
        {
            QList< ::QTextBlock>*sipRes;

            sipRes = new QList< ::QTextBlock>(sipCpp->blockList());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QTextBlock,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockGroup, sipName_blockList, doc_QTextBlockGroup_blockList);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QTextBlockGroup(void *, const sipTypeDef *);}
static void *cast_QTextBlockGroup(void *sipCppV, const sipTypeDef *targetType)
{
     ::QTextBlockGroup *sipCpp = reinterpret_cast< ::QTextBlockGroup *>(sipCppV);

    if (targetType == sipType_QTextObject)
        return static_cast< ::QTextObject *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextBlockGroup(void *, int);}
static void release_QTextBlockGroup(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQTextBlockGroup *>(sipCppV);
}


extern "C" {static void dealloc_QTextBlockGroup(sipSimpleWrapper *);}
static void dealloc_QTextBlockGroup(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQTextBlockGroup *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextBlockGroup(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QTextBlockGroup(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextBlockGroup(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQTextBlockGroup *sipCpp = SIP_NULLPTR;

    {
         ::QTextDocument* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8", sipType_QTextDocument, &a0))
        {
            sipCpp = new sipQTextBlockGroup(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTextBlockGroup[] = {{332, 255, 1}};


static PyMethodDef methods_QTextBlockGroup[] = {
    {SIP_MLNAME_CAST(sipName_blockFormatChanged), meth_QTextBlockGroup_blockFormatChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockGroup_blockFormatChanged)},
    {SIP_MLNAME_CAST(sipName_blockInserted), meth_QTextBlockGroup_blockInserted, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockGroup_blockInserted)},
    {SIP_MLNAME_CAST(sipName_blockList), meth_QTextBlockGroup_blockList, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockGroup_blockList)},
    {SIP_MLNAME_CAST(sipName_blockRemoved), meth_QTextBlockGroup_blockRemoved, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockGroup_blockRemoved)}
};

PyDoc_STRVAR(doc_QTextBlockGroup, "\1QTextBlockGroup(QTextDocument)");


static pyqt5ClassPluginDef plugin_QTextBlockGroup = {
    & ::QTextBlockGroup::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextBlockGroup = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextBlockGroup,
        {SIP_NULLPTR},
        &plugin_QTextBlockGroup
    },
    {
        sipNameNr_QTextBlockGroup,
        {0, 0, 1},
        4, methods_QTextBlockGroup,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextBlockGroup,
    -1,
    -1,
    supers_QTextBlockGroup,
    SIP_NULLPTR,
    init_type_QTextBlockGroup,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextBlockGroup,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QTextBlockGroup,
    cast_QTextBlockGroup,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 132 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextlayout.sip"
#include <qtextlayout.h>
#line 33746 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 33750 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qglyphrun.sip"
#include <qglyphrun.h>
#line 33753 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 33756 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 33759 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 48 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextlayout.sip"
#include <qtextlayout.h>
#line 70 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextlayout.sip"
#include <qtextlayout.h>
#line 33764 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 33767 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QTextLine_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QTextLine_isValid(PyObject *, PyObject *);}
static PyObject *meth_QTextLine_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLine, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLine, sipName_isValid, doc_QTextLine_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLine_rect, "rect(self) -> QRectF");

extern "C" {static PyObject *meth_QTextLine_rect(PyObject *, PyObject *);}
static PyObject *meth_QTextLine_rect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLine, &sipCpp))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->rect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLine, sipName_rect, doc_QTextLine_rect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLine_x, "x(self) -> float");

extern "C" {static PyObject *meth_QTextLine_x(PyObject *, PyObject *);}
static PyObject *meth_QTextLine_x(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLine, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->x();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLine, sipName_x, doc_QTextLine_x);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLine_y, "y(self) -> float");

extern "C" {static PyObject *meth_QTextLine_y(PyObject *, PyObject *);}
static PyObject *meth_QTextLine_y(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLine, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->y();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLine, sipName_y, doc_QTextLine_y);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLine_width, "width(self) -> float");

extern "C" {static PyObject *meth_QTextLine_width(PyObject *, PyObject *);}
static PyObject *meth_QTextLine_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLine, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->width();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLine, sipName_width, doc_QTextLine_width);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLine_ascent, "ascent(self) -> float");

extern "C" {static PyObject *meth_QTextLine_ascent(PyObject *, PyObject *);}
static PyObject *meth_QTextLine_ascent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLine, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->ascent();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLine, sipName_ascent, doc_QTextLine_ascent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLine_descent, "descent(self) -> float");

extern "C" {static PyObject *meth_QTextLine_descent(PyObject *, PyObject *);}
static PyObject *meth_QTextLine_descent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLine, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->descent();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLine, sipName_descent, doc_QTextLine_descent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLine_height, "height(self) -> float");

extern "C" {static PyObject *meth_QTextLine_height(PyObject *, PyObject *);}
static PyObject *meth_QTextLine_height(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLine, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->height();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLine, sipName_height, doc_QTextLine_height);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLine_naturalTextWidth, "naturalTextWidth(self) -> float");

extern "C" {static PyObject *meth_QTextLine_naturalTextWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextLine_naturalTextWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLine, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->naturalTextWidth();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLine, sipName_naturalTextWidth, doc_QTextLine_naturalTextWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLine_naturalTextRect, "naturalTextRect(self) -> QRectF");

extern "C" {static PyObject *meth_QTextLine_naturalTextRect(PyObject *, PyObject *);}
static PyObject *meth_QTextLine_naturalTextRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLine, &sipCpp))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->naturalTextRect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLine, sipName_naturalTextRect, doc_QTextLine_naturalTextRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLine_cursorToX, "cursorToX(self, int, edge: QTextLine.Edge = QTextLine.Leading) -> Tuple[float, int]");

extern "C" {static PyObject *meth_QTextLine_cursorToX(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextLine_cursorToX(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextLine::Edge a1 = QTextLine::Leading;
        const  ::QTextLine *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_edge,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|E", &sipSelf, sipType_QTextLine, &sipCpp, &a0, sipType_QTextLine_Edge, &a1))
        {
             ::qreal sipRes;

            sipRes = sipCpp->cursorToX(&a0,a1);

            return sipBuildResult(0,"(di)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLine, sipName_cursorToX, doc_QTextLine_cursorToX);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLine_xToCursor, "xToCursor(self, float, edge: QTextLine.CursorPosition = QTextLine.CursorBetweenCharacters) -> int");

extern "C" {static PyObject *meth_QTextLine_xToCursor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextLine_xToCursor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextLine::CursorPosition a1 = QTextLine::CursorBetweenCharacters;
        const  ::QTextLine *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_edge,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bd|E", &sipSelf, sipType_QTextLine, &sipCpp, &a0, sipType_QTextLine_CursorPosition, &a1))
        {
            int sipRes;

            sipRes = sipCpp->xToCursor(a0,a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLine, sipName_xToCursor, doc_QTextLine_xToCursor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLine_setLineWidth, "setLineWidth(self, float)");

extern "C" {static PyObject *meth_QTextLine_setLineWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextLine_setLineWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextLine, &sipCpp, &a0))
        {
            sipCpp->setLineWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLine, sipName_setLineWidth, doc_QTextLine_setLineWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLine_setNumColumns, "setNumColumns(self, int)\n"
"setNumColumns(self, int, float)");

extern "C" {static PyObject *meth_QTextLine_setNumColumns(PyObject *, PyObject *);}
static PyObject *meth_QTextLine_setNumColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextLine, &sipCpp, &a0))
        {
            sipCpp->setNumColumns(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::qreal a1;
         ::QTextLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bid", &sipSelf, sipType_QTextLine, &sipCpp, &a0, &a1))
        {
            sipCpp->setNumColumns(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLine, sipName_setNumColumns, doc_QTextLine_setNumColumns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLine_setPosition, "setPosition(self, Union[QPointF, QPoint])");

extern "C" {static PyObject *meth_QTextLine_setPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextLine_setPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::QTextLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextLine, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->setPosition(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLine, sipName_setPosition, doc_QTextLine_setPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLine_textStart, "textStart(self) -> int");

extern "C" {static PyObject *meth_QTextLine_textStart(PyObject *, PyObject *);}
static PyObject *meth_QTextLine_textStart(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLine, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->textStart();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLine, sipName_textStart, doc_QTextLine_textStart);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLine_textLength, "textLength(self) -> int");

extern "C" {static PyObject *meth_QTextLine_textLength(PyObject *, PyObject *);}
static PyObject *meth_QTextLine_textLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLine, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->textLength();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLine, sipName_textLength, doc_QTextLine_textLength);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLine_lineNumber, "lineNumber(self) -> int");

extern "C" {static PyObject *meth_QTextLine_lineNumber(PyObject *, PyObject *);}
static PyObject *meth_QTextLine_lineNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLine, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->lineNumber();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLine, sipName_lineNumber, doc_QTextLine_lineNumber);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLine_draw, "draw(self, QPainter, Union[QPointF, QPoint], selection: QTextLayout.FormatRange = None)");

extern "C" {static PyObject *meth_QTextLine_draw(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextLine_draw(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPainter* a0;
        const  ::QPointF* a1;
        int a1State = 0;
        const  ::QTextLayout::FormatRange* a2 = 0;
        const  ::QTextLine *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_selection,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J1|J8", &sipSelf, sipType_QTextLine, &sipCpp, sipType_QPainter, &a0, sipType_QPointF, &a1, &a1State, sipType_QTextLayout_FormatRange, &a2))
        {
            sipCpp->draw(a0,*a1,a2);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLine, sipName_draw, doc_QTextLine_draw);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLine_position, "position(self) -> QPointF");

extern "C" {static PyObject *meth_QTextLine_position(PyObject *, PyObject *);}
static PyObject *meth_QTextLine_position(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLine, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->position());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLine, sipName_position, doc_QTextLine_position);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLine_leading, "leading(self) -> float");

extern "C" {static PyObject *meth_QTextLine_leading(PyObject *, PyObject *);}
static PyObject *meth_QTextLine_leading(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLine, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->leading();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLine, sipName_leading, doc_QTextLine_leading);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLine_setLeadingIncluded, "setLeadingIncluded(self, bool)");

extern "C" {static PyObject *meth_QTextLine_setLeadingIncluded(PyObject *, PyObject *);}
static PyObject *meth_QTextLine_setLeadingIncluded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTextLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextLine, &sipCpp, &a0))
        {
            sipCpp->setLeadingIncluded(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLine, sipName_setLeadingIncluded, doc_QTextLine_setLeadingIncluded);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLine_leadingIncluded, "leadingIncluded(self) -> bool");

extern "C" {static PyObject *meth_QTextLine_leadingIncluded(PyObject *, PyObject *);}
static PyObject *meth_QTextLine_leadingIncluded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLine, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->leadingIncluded();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLine, sipName_leadingIncluded, doc_QTextLine_leadingIncluded);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLine_horizontalAdvance, "horizontalAdvance(self) -> float");

extern "C" {static PyObject *meth_QTextLine_horizontalAdvance(PyObject *, PyObject *);}
static PyObject *meth_QTextLine_horizontalAdvance(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLine, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->horizontalAdvance();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLine, sipName_horizontalAdvance, doc_QTextLine_horizontalAdvance);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLine_glyphRuns, "glyphRuns(self, from_: int = -1, length: int = -1) -> List[QGlyphRun]");

extern "C" {static PyObject *meth_QTextLine_glyphRuns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextLine_glyphRuns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = -1;
        int a1 = -1;
        const  ::QTextLine *sipCpp;

        static const char *sipKwdList[] = {
            sipName_from,
            sipName_length,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|ii", &sipSelf, sipType_QTextLine, &sipCpp, &a0, &a1))
        {
            QList< ::QGlyphRun>*sipRes;

            sipRes = new QList< ::QGlyphRun>(sipCpp->glyphRuns(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QGlyphRun,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLine, sipName_glyphRuns, doc_QTextLine_glyphRuns);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextLine(void *, int);}
static void release_QTextLine(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextLine *>(sipCppV);
}


extern "C" {static void assign_QTextLine(void *, SIP_SSIZE_T, void *);}
static void assign_QTextLine(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTextLine *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTextLine *>(sipSrc);
}


extern "C" {static void *array_QTextLine(SIP_SSIZE_T);}
static void *array_QTextLine(SIP_SSIZE_T sipNrElem)
{
    return new  ::QTextLine[sipNrElem];
}


extern "C" {static void *copy_QTextLine(const void *, SIP_SSIZE_T);}
static void *copy_QTextLine(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QTextLine(reinterpret_cast<const  ::QTextLine *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextLine(sipSimpleWrapper *);}
static void dealloc_QTextLine(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextLine(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextLine(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextLine(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextLine *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTextLine();

            return sipCpp;
        }
    }

    {
        const  ::QTextLine* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTextLine, &a0))
        {
            sipCpp = new  ::QTextLine(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QTextLine[] = {
    {SIP_MLNAME_CAST(sipName_ascent), meth_QTextLine_ascent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLine_ascent)},
    {SIP_MLNAME_CAST(sipName_cursorToX), SIP_MLMETH_CAST(meth_QTextLine_cursorToX), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextLine_cursorToX)},
    {SIP_MLNAME_CAST(sipName_descent), meth_QTextLine_descent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLine_descent)},
    {SIP_MLNAME_CAST(sipName_draw), SIP_MLMETH_CAST(meth_QTextLine_draw), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextLine_draw)},
    {SIP_MLNAME_CAST(sipName_glyphRuns), SIP_MLMETH_CAST(meth_QTextLine_glyphRuns), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextLine_glyphRuns)},
    {SIP_MLNAME_CAST(sipName_height), meth_QTextLine_height, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLine_height)},
    {SIP_MLNAME_CAST(sipName_horizontalAdvance), meth_QTextLine_horizontalAdvance, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLine_horizontalAdvance)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QTextLine_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLine_isValid)},
    {SIP_MLNAME_CAST(sipName_leading), meth_QTextLine_leading, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLine_leading)},
    {SIP_MLNAME_CAST(sipName_leadingIncluded), meth_QTextLine_leadingIncluded, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLine_leadingIncluded)},
    {SIP_MLNAME_CAST(sipName_lineNumber), meth_QTextLine_lineNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLine_lineNumber)},
    {SIP_MLNAME_CAST(sipName_naturalTextRect), meth_QTextLine_naturalTextRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLine_naturalTextRect)},
    {SIP_MLNAME_CAST(sipName_naturalTextWidth), meth_QTextLine_naturalTextWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLine_naturalTextWidth)},
    {SIP_MLNAME_CAST(sipName_position), meth_QTextLine_position, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLine_position)},
    {SIP_MLNAME_CAST(sipName_rect), meth_QTextLine_rect, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLine_rect)},
    {SIP_MLNAME_CAST(sipName_setLeadingIncluded), meth_QTextLine_setLeadingIncluded, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLine_setLeadingIncluded)},
    {SIP_MLNAME_CAST(sipName_setLineWidth), meth_QTextLine_setLineWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLine_setLineWidth)},
    {SIP_MLNAME_CAST(sipName_setNumColumns), meth_QTextLine_setNumColumns, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLine_setNumColumns)},
    {SIP_MLNAME_CAST(sipName_setPosition), meth_QTextLine_setPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLine_setPosition)},
    {SIP_MLNAME_CAST(sipName_textLength), meth_QTextLine_textLength, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLine_textLength)},
    {SIP_MLNAME_CAST(sipName_textStart), meth_QTextLine_textStart, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLine_textStart)},
    {SIP_MLNAME_CAST(sipName_width), meth_QTextLine_width, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLine_width)},
    {SIP_MLNAME_CAST(sipName_x), meth_QTextLine_x, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLine_x)},
    {SIP_MLNAME_CAST(sipName_xToCursor), SIP_MLMETH_CAST(meth_QTextLine_xToCursor), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextLine_xToCursor)},
    {SIP_MLNAME_CAST(sipName_y), meth_QTextLine_y, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLine_y)}
};

static sipEnumMemberDef enummembers_QTextLine[] = {
    {sipName_CursorBetweenCharacters, static_cast<int>( ::QTextLine::CursorBetweenCharacters), 327},
    {sipName_CursorOnCharacter, static_cast<int>( ::QTextLine::CursorOnCharacter), 327},
    {sipName_Leading, static_cast<int>( ::QTextLine::Leading), 328},
    {sipName_Trailing, static_cast<int>( ::QTextLine::Trailing), 328},
};

PyDoc_STRVAR(doc_QTextLine, "\1QTextLine()\n"
"QTextLine(QTextLine)");


static pyqt5ClassPluginDef plugin_QTextLine = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextLine = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextLine,
        {SIP_NULLPTR},
        &plugin_QTextLine
    },
    {
        sipNameNr_QTextLine,
        {0, 0, 1},
        25, methods_QTextLine,
        4, enummembers_QTextLine,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextLine,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QTextLine,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextLine,
    assign_QTextLine,
    array_QTextLine,
    copy_QTextLine,
    release_QTextLine,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 48 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextlayout.sip"
#include <qtextlayout.h>
#line 70 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextlayout.sip"
#include <qtextlayout.h>
#line 34689 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 255 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 34693 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static PyObject *slot_QTextLayout_FormatRange___eq__(PyObject *,PyObject *);}
static PyObject *slot_QTextLayout_FormatRange___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextLayout::FormatRange *sipCpp = reinterpret_cast< ::QTextLayout::FormatRange *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextLayout_FormatRange));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextLayout::FormatRange* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextLayout_FormatRange, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QTextLayout_FormatRange, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTextLayout_FormatRange___ne__(PyObject *,PyObject *);}
static PyObject *slot_QTextLayout_FormatRange___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextLayout::FormatRange *sipCpp = reinterpret_cast< ::QTextLayout::FormatRange *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextLayout_FormatRange));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextLayout::FormatRange* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextLayout_FormatRange, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QTextLayout_FormatRange, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextLayout_FormatRange(void *, int);}
static void release_QTextLayout_FormatRange(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextLayout::FormatRange *>(sipCppV);
}


extern "C" {static void assign_QTextLayout_FormatRange(void *, SIP_SSIZE_T, void *);}
static void assign_QTextLayout_FormatRange(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTextLayout::FormatRange *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTextLayout::FormatRange *>(sipSrc);
}


extern "C" {static void *array_QTextLayout_FormatRange(SIP_SSIZE_T);}
static void *array_QTextLayout_FormatRange(SIP_SSIZE_T sipNrElem)
{
    return new  ::QTextLayout::FormatRange[sipNrElem];
}


extern "C" {static void *copy_QTextLayout_FormatRange(const void *, SIP_SSIZE_T);}
static void *copy_QTextLayout_FormatRange(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QTextLayout::FormatRange(reinterpret_cast<const  ::QTextLayout::FormatRange *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextLayout_FormatRange(sipSimpleWrapper *);}
static void dealloc_QTextLayout_FormatRange(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextLayout_FormatRange(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextLayout_FormatRange(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextLayout_FormatRange(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextLayout::FormatRange *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTextLayout::FormatRange();

            return sipCpp;
        }
    }

    {
        const  ::QTextLayout::FormatRange* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTextLayout_FormatRange, &a0))
        {
            sipCpp = new  ::QTextLayout::FormatRange(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QTextLayout_FormatRange[] = {
    {(void *)slot_QTextLayout_FormatRange___eq__, eq_slot},
    {(void *)slot_QTextLayout_FormatRange___ne__, ne_slot},
    {0, (sipPySlotType)0}
};


extern "C" {static PyObject *varget_QTextLayout_FormatRange_format(void *, PyObject *, PyObject *);}
static PyObject *varget_QTextLayout_FormatRange_format(void *sipSelf, PyObject *, PyObject *)
{
     ::QTextCharFormat*sipVal;
     ::QTextLayout::FormatRange *sipCpp = reinterpret_cast< ::QTextLayout::FormatRange *>(sipSelf);

    sipVal = &sipCpp->format;

    return sipConvertFromType(sipVal, sipType_QTextCharFormat, SIP_NULLPTR);
}


extern "C" {static int varset_QTextLayout_FormatRange_format(void *, PyObject *, PyObject *);}
static int varset_QTextLayout_FormatRange_format(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::QTextCharFormat*sipVal;
     ::QTextLayout::FormatRange *sipCpp = reinterpret_cast< ::QTextLayout::FormatRange *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::QTextCharFormat *>(sipForceConvertToType(sipPy, sipType_QTextCharFormat, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->format = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QTextLayout_FormatRange_length(void *, PyObject *, PyObject *);}
static PyObject *varget_QTextLayout_FormatRange_length(void *sipSelf, PyObject *, PyObject *)
{
    int sipVal;
     ::QTextLayout::FormatRange *sipCpp = reinterpret_cast< ::QTextLayout::FormatRange *>(sipSelf);

    sipVal = sipCpp->length;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_QTextLayout_FormatRange_length(void *, PyObject *, PyObject *);}
static int varset_QTextLayout_FormatRange_length(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
     ::QTextLayout::FormatRange *sipCpp = reinterpret_cast< ::QTextLayout::FormatRange *>(sipSelf);

    sipVal = sipLong_AsInt(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->length = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QTextLayout_FormatRange_start(void *, PyObject *, PyObject *);}
static PyObject *varget_QTextLayout_FormatRange_start(void *sipSelf, PyObject *, PyObject *)
{
    int sipVal;
     ::QTextLayout::FormatRange *sipCpp = reinterpret_cast< ::QTextLayout::FormatRange *>(sipSelf);

    sipVal = sipCpp->start;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_QTextLayout_FormatRange_start(void *, PyObject *, PyObject *);}
static int varset_QTextLayout_FormatRange_start(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
     ::QTextLayout::FormatRange *sipCpp = reinterpret_cast< ::QTextLayout::FormatRange *>(sipSelf);

    sipVal = sipLong_AsInt(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->start = sipVal;

    return 0;
}

sipVariableDef variables_QTextLayout_FormatRange[] = {
    {InstanceVariable, sipName_format, (PyMethodDef *)varget_QTextLayout_FormatRange_format, (PyMethodDef *)varset_QTextLayout_FormatRange_format, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_length, (PyMethodDef *)varget_QTextLayout_FormatRange_length, (PyMethodDef *)varset_QTextLayout_FormatRange_length, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_start, (PyMethodDef *)varget_QTextLayout_FormatRange_start, (PyMethodDef *)varset_QTextLayout_FormatRange_start, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_QTextLayout_FormatRange, "\1QTextLayout.FormatRange()\n"
"QTextLayout.FormatRange(QTextLayout.FormatRange)");


static pyqt5ClassPluginDef plugin_QTextLayout_FormatRange = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextLayout_FormatRange = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextLayout__FormatRange,
        {SIP_NULLPTR},
        &plugin_QTextLayout_FormatRange
    },
    {
        sipNameNr_FormatRange,
        {321, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        3, variables_QTextLayout_FormatRange,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextLayout_FormatRange,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QTextLayout_FormatRange,
    init_type_QTextLayout_FormatRange,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextLayout_FormatRange,
    assign_QTextLayout_FormatRange,
    array_QTextLayout_FormatRange,
    copy_QTextLayout_FormatRange,
    release_QTextLayout_FormatRange,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 48 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextlayout.sip"
#include <qtextlayout.h>
#line 34995 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 34999 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 35002 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 35005 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 118 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 35008 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 35011 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 48 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextlayout.sip"
#include <qtextlayout.h>
#line 70 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextlayout.sip"
#include <qtextlayout.h>
#line 35016 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 35019 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qglyphrun.sip"
#include <qglyphrun.h>
#line 35022 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 35025 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 35028 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 35031 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 35034 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 132 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextlayout.sip"
#include <qtextlayout.h>
#line 35037 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 35040 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 35043 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QTextLayout_setFont, "setFont(self, QFont)");

extern "C" {static PyObject *meth_QTextLayout_setFont(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_setFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont* a0;
         ::QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextLayout, &sipCpp, sipType_QFont, &a0))
        {
            sipCpp->setFont(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_setFont, doc_QTextLayout_setFont);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLayout_font, "font(self) -> QFont");

extern "C" {static PyObject *meth_QTextLayout_font(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_font(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLayout, &sipCpp))
        {
             ::QFont*sipRes;

            sipRes = new  ::QFont(sipCpp->font());

            return sipConvertFromNewType(sipRes,sipType_QFont,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_font, doc_QTextLayout_font);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLayout_setText, "setText(self, str)");

extern "C" {static PyObject *meth_QTextLayout_setText(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextLayout, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setText(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_setText, doc_QTextLayout_setText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLayout_text, "text(self) -> str");

extern "C" {static PyObject *meth_QTextLayout_text(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLayout, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->text());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_text, doc_QTextLayout_text);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLayout_setTextOption, "setTextOption(self, QTextOption)");

extern "C" {static PyObject *meth_QTextLayout_setTextOption(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_setTextOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextOption* a0;
         ::QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextLayout, &sipCpp, sipType_QTextOption, &a0))
        {
            sipCpp->setTextOption(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_setTextOption, doc_QTextLayout_setTextOption);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLayout_textOption, "textOption(self) -> QTextOption");

extern "C" {static PyObject *meth_QTextLayout_textOption(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_textOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLayout, &sipCpp))
        {
             ::QTextOption*sipRes;

            sipRes = new  ::QTextOption(sipCpp->textOption());

            return sipConvertFromNewType(sipRes,sipType_QTextOption,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_textOption, doc_QTextLayout_textOption);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLayout_setPreeditArea, "setPreeditArea(self, int, str)");

extern "C" {static PyObject *meth_QTextLayout_setPreeditArea(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_setPreeditArea(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTextLayout, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->setPreeditArea(a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_setPreeditArea, doc_QTextLayout_setPreeditArea);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLayout_preeditAreaPosition, "preeditAreaPosition(self) -> int");

extern "C" {static PyObject *meth_QTextLayout_preeditAreaPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_preeditAreaPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLayout, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->preeditAreaPosition();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_preeditAreaPosition, doc_QTextLayout_preeditAreaPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLayout_preeditAreaText, "preeditAreaText(self) -> str");

extern "C" {static PyObject *meth_QTextLayout_preeditAreaText(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_preeditAreaText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLayout, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->preeditAreaText());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_preeditAreaText, doc_QTextLayout_preeditAreaText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLayout_setAdditionalFormats, "setAdditionalFormats(self, Iterable[QTextLayout.FormatRange])");

extern "C" {static PyObject *meth_QTextLayout_setAdditionalFormats(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_setAdditionalFormats(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QList< ::QTextLayout::FormatRange>* a0;
        int a0State = 0;
         ::QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextLayout, &sipCpp, sipType_QList_0100QTextLayout_FormatRange,&a0, &a0State))
        {
            sipCpp->setAdditionalFormats(*a0);
            sipReleaseType(const_cast<QList< ::QTextLayout::FormatRange> *>(a0),sipType_QList_0100QTextLayout_FormatRange,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_setAdditionalFormats, doc_QTextLayout_setAdditionalFormats);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLayout_additionalFormats, "additionalFormats(self) -> List[QTextLayout.FormatRange]");

extern "C" {static PyObject *meth_QTextLayout_additionalFormats(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_additionalFormats(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLayout, &sipCpp))
        {
            QList< ::QTextLayout::FormatRange>*sipRes;

            sipRes = new QList< ::QTextLayout::FormatRange>(sipCpp->additionalFormats());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QTextLayout_FormatRange,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_additionalFormats, doc_QTextLayout_additionalFormats);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLayout_clearAdditionalFormats, "clearAdditionalFormats(self)");

extern "C" {static PyObject *meth_QTextLayout_clearAdditionalFormats(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_clearAdditionalFormats(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLayout, &sipCpp))
        {
            sipCpp->clearAdditionalFormats();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_clearAdditionalFormats, doc_QTextLayout_clearAdditionalFormats);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLayout_setCacheEnabled, "setCacheEnabled(self, bool)");

extern "C" {static PyObject *meth_QTextLayout_setCacheEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_setCacheEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextLayout, &sipCpp, &a0))
        {
            sipCpp->setCacheEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_setCacheEnabled, doc_QTextLayout_setCacheEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLayout_cacheEnabled, "cacheEnabled(self) -> bool");

extern "C" {static PyObject *meth_QTextLayout_cacheEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_cacheEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLayout, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->cacheEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_cacheEnabled, doc_QTextLayout_cacheEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLayout_beginLayout, "beginLayout(self)");

extern "C" {static PyObject *meth_QTextLayout_beginLayout(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_beginLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLayout, &sipCpp))
        {
            sipCpp->beginLayout();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_beginLayout, doc_QTextLayout_beginLayout);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLayout_endLayout, "endLayout(self)");

extern "C" {static PyObject *meth_QTextLayout_endLayout(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_endLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLayout, &sipCpp))
        {
            sipCpp->endLayout();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_endLayout, doc_QTextLayout_endLayout);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLayout_createLine, "createLine(self) -> QTextLine");

extern "C" {static PyObject *meth_QTextLayout_createLine(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_createLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLayout, &sipCpp))
        {
             ::QTextLine*sipRes;

            sipRes = new  ::QTextLine(sipCpp->createLine());

            return sipConvertFromNewType(sipRes,sipType_QTextLine,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_createLine, doc_QTextLayout_createLine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLayout_lineCount, "lineCount(self) -> int");

extern "C" {static PyObject *meth_QTextLayout_lineCount(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_lineCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLayout, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->lineCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_lineCount, doc_QTextLayout_lineCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLayout_lineAt, "lineAt(self, int) -> QTextLine");

extern "C" {static PyObject *meth_QTextLayout_lineAt(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_lineAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextLayout, &sipCpp, &a0))
        {
             ::QTextLine*sipRes;

            sipRes = new  ::QTextLine(sipCpp->lineAt(a0));

            return sipConvertFromNewType(sipRes,sipType_QTextLine,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_lineAt, doc_QTextLayout_lineAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLayout_lineForTextPosition, "lineForTextPosition(self, int) -> QTextLine");

extern "C" {static PyObject *meth_QTextLayout_lineForTextPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_lineForTextPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextLayout, &sipCpp, &a0))
        {
             ::QTextLine*sipRes;

            sipRes = new  ::QTextLine(sipCpp->lineForTextPosition(a0));

            return sipConvertFromNewType(sipRes,sipType_QTextLine,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_lineForTextPosition, doc_QTextLayout_lineForTextPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLayout_isValidCursorPosition, "isValidCursorPosition(self, int) -> bool");

extern "C" {static PyObject *meth_QTextLayout_isValidCursorPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_isValidCursorPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextLayout, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isValidCursorPosition(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_isValidCursorPosition, doc_QTextLayout_isValidCursorPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLayout_nextCursorPosition, "nextCursorPosition(self, int, mode: QTextLayout.CursorMode = QTextLayout.SkipCharacters) -> int");

extern "C" {static PyObject *meth_QTextLayout_nextCursorPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_nextCursorPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextLayout::CursorMode a1 = QTextLayout::SkipCharacters;
        const  ::QTextLayout *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|E", &sipSelf, sipType_QTextLayout, &sipCpp, &a0, sipType_QTextLayout_CursorMode, &a1))
        {
            int sipRes;

            sipRes = sipCpp->nextCursorPosition(a0,a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_nextCursorPosition, doc_QTextLayout_nextCursorPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLayout_previousCursorPosition, "previousCursorPosition(self, int, mode: QTextLayout.CursorMode = QTextLayout.SkipCharacters) -> int");

extern "C" {static PyObject *meth_QTextLayout_previousCursorPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_previousCursorPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextLayout::CursorMode a1 = QTextLayout::SkipCharacters;
        const  ::QTextLayout *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|E", &sipSelf, sipType_QTextLayout, &sipCpp, &a0, sipType_QTextLayout_CursorMode, &a1))
        {
            int sipRes;

            sipRes = sipCpp->previousCursorPosition(a0,a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_previousCursorPosition, doc_QTextLayout_previousCursorPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLayout_draw, "draw(self, QPainter, Union[QPointF, QPoint], selections: Iterable[QTextLayout.FormatRange] = [], clip: QRectF = QRectF())");

extern "C" {static PyObject *meth_QTextLayout_draw(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_draw(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPainter* a0;
        const  ::QPointF* a1;
        int a1State = 0;
        const QVector< ::QTextLayout::FormatRange>& a2def = QVector<QTextLayout::FormatRange>();
        const QVector< ::QTextLayout::FormatRange>* a2 = &a2def;
        int a2State = 0;
        const  ::QRectF& a3def = QRectF();
        const  ::QRectF* a3 = &a3def;
        const  ::QTextLayout *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_selections,
            sipName_clip,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J1|J1J9", &sipSelf, sipType_QTextLayout, &sipCpp, sipType_QPainter, &a0, sipType_QPointF, &a1, &a1State, sipType_QVector_0100QTextLayout_FormatRange,&a2, &a2State, sipType_QRectF, &a3))
        {
            sipCpp->draw(a0,*a1,*a2,*a3);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);
            sipReleaseType(const_cast<QVector< ::QTextLayout::FormatRange> *>(a2),sipType_QVector_0100QTextLayout_FormatRange,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_draw, doc_QTextLayout_draw);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLayout_drawCursor, "drawCursor(self, QPainter, Union[QPointF, QPoint], int)\n"
"drawCursor(self, QPainter, Union[QPointF, QPoint], int, int)");

extern "C" {static PyObject *meth_QTextLayout_drawCursor(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_drawCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPainter* a0;
        const  ::QPointF* a1;
        int a1State = 0;
        int a2;
        const  ::QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J1i", &sipSelf, sipType_QTextLayout, &sipCpp, sipType_QPainter, &a0, sipType_QPointF, &a1, &a1State, &a2))
        {
            sipCpp->drawCursor(a0,*a1,a2);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QPainter* a0;
        const  ::QPointF* a1;
        int a1State = 0;
        int a2;
        int a3;
        const  ::QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J1ii", &sipSelf, sipType_QTextLayout, &sipCpp, sipType_QPainter, &a0, sipType_QPointF, &a1, &a1State, &a2, &a3))
        {
            sipCpp->drawCursor(a0,*a1,a2,a3);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_drawCursor, doc_QTextLayout_drawCursor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLayout_position, "position(self) -> QPointF");

extern "C" {static PyObject *meth_QTextLayout_position(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_position(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLayout, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->position());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_position, doc_QTextLayout_position);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLayout_setPosition, "setPosition(self, Union[QPointF, QPoint])");

extern "C" {static PyObject *meth_QTextLayout_setPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_setPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextLayout, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->setPosition(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_setPosition, doc_QTextLayout_setPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLayout_boundingRect, "boundingRect(self) -> QRectF");

extern "C" {static PyObject *meth_QTextLayout_boundingRect(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_boundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLayout, &sipCpp))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->boundingRect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_boundingRect, doc_QTextLayout_boundingRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLayout_minimumWidth, "minimumWidth(self) -> float");

extern "C" {static PyObject *meth_QTextLayout_minimumWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_minimumWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLayout, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->minimumWidth();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_minimumWidth, doc_QTextLayout_minimumWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLayout_maximumWidth, "maximumWidth(self) -> float");

extern "C" {static PyObject *meth_QTextLayout_maximumWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_maximumWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLayout, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->maximumWidth();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_maximumWidth, doc_QTextLayout_maximumWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLayout_clearLayout, "clearLayout(self)");

extern "C" {static PyObject *meth_QTextLayout_clearLayout(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_clearLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLayout, &sipCpp))
        {
            sipCpp->clearLayout();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_clearLayout, doc_QTextLayout_clearLayout);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLayout_setCursorMoveStyle, "setCursorMoveStyle(self, Qt.CursorMoveStyle)");

extern "C" {static PyObject *meth_QTextLayout_setCursorMoveStyle(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_setCursorMoveStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::CursorMoveStyle a0;
         ::QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextLayout, &sipCpp, sipType_Qt_CursorMoveStyle, &a0))
        {
            sipCpp->setCursorMoveStyle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_setCursorMoveStyle, doc_QTextLayout_setCursorMoveStyle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLayout_cursorMoveStyle, "cursorMoveStyle(self) -> Qt.CursorMoveStyle");

extern "C" {static PyObject *meth_QTextLayout_cursorMoveStyle(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_cursorMoveStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLayout, &sipCpp))
        {
             ::Qt::CursorMoveStyle sipRes;

            sipRes = sipCpp->cursorMoveStyle();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_CursorMoveStyle);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_cursorMoveStyle, doc_QTextLayout_cursorMoveStyle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLayout_leftCursorPosition, "leftCursorPosition(self, int) -> int");

extern "C" {static PyObject *meth_QTextLayout_leftCursorPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_leftCursorPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextLayout, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->leftCursorPosition(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_leftCursorPosition, doc_QTextLayout_leftCursorPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLayout_rightCursorPosition, "rightCursorPosition(self, int) -> int");

extern "C" {static PyObject *meth_QTextLayout_rightCursorPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_rightCursorPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextLayout, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->rightCursorPosition(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_rightCursorPosition, doc_QTextLayout_rightCursorPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLayout_glyphRuns, "glyphRuns(self, from_: int = -1, length: int = -1) -> List[QGlyphRun]");

extern "C" {static PyObject *meth_QTextLayout_glyphRuns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_glyphRuns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = -1;
        int a1 = -1;
        const  ::QTextLayout *sipCpp;

        static const char *sipKwdList[] = {
            sipName_from,
            sipName_length,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|ii", &sipSelf, sipType_QTextLayout, &sipCpp, &a0, &a1))
        {
            QList< ::QGlyphRun>*sipRes;

            sipRes = new QList< ::QGlyphRun>(sipCpp->glyphRuns(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QGlyphRun,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_glyphRuns, doc_QTextLayout_glyphRuns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLayout_setFormats, "setFormats(self, Iterable[QTextLayout.FormatRange])");

extern "C" {static PyObject *meth_QTextLayout_setFormats(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_setFormats(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QVector< ::QTextLayout::FormatRange>* a0;
        int a0State = 0;
         ::QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextLayout, &sipCpp, sipType_QVector_0100QTextLayout_FormatRange,&a0, &a0State))
        {
            sipCpp->setFormats(*a0);
            sipReleaseType(const_cast<QVector< ::QTextLayout::FormatRange> *>(a0),sipType_QVector_0100QTextLayout_FormatRange,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_setFormats, doc_QTextLayout_setFormats);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLayout_formats, "formats(self) -> List[QTextLayout.FormatRange]");

extern "C" {static PyObject *meth_QTextLayout_formats(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_formats(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLayout, &sipCpp))
        {
            QVector< ::QTextLayout::FormatRange>*sipRes;

            sipRes = new QVector< ::QTextLayout::FormatRange>(sipCpp->formats());

            return sipConvertFromNewType(sipRes,sipType_QVector_0100QTextLayout_FormatRange,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_formats, doc_QTextLayout_formats);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLayout_clearFormats, "clearFormats(self)");

extern "C" {static PyObject *meth_QTextLayout_clearFormats(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_clearFormats(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLayout, &sipCpp))
        {
            sipCpp->clearFormats();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_clearFormats, doc_QTextLayout_clearFormats);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextLayout(void *, int);}
static void release_QTextLayout(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextLayout *>(sipCppV);
}


extern "C" {static void dealloc_QTextLayout(sipSimpleWrapper *);}
static void dealloc_QTextLayout(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextLayout(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextLayout(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextLayout(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextLayout *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTextLayout();

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new  ::QTextLayout(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QFont* a1;
         ::QPaintDevice* a2 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_paintDevice,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1J9|J8", sipType_QString,&a0, &a0State, sipType_QFont, &a1, sipType_QPaintDevice, &a2))
        {
            sipCpp = new  ::QTextLayout(*a0,*a1,a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QTextBlock* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTextBlock, &a0))
        {
            sipCpp = new  ::QTextLayout(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QTextLayout[] = {
    {SIP_MLNAME_CAST(sipName_additionalFormats), meth_QTextLayout_additionalFormats, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_additionalFormats)},
    {SIP_MLNAME_CAST(sipName_beginLayout), meth_QTextLayout_beginLayout, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_beginLayout)},
    {SIP_MLNAME_CAST(sipName_boundingRect), meth_QTextLayout_boundingRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_boundingRect)},
    {SIP_MLNAME_CAST(sipName_cacheEnabled), meth_QTextLayout_cacheEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_cacheEnabled)},
    {SIP_MLNAME_CAST(sipName_clearAdditionalFormats), meth_QTextLayout_clearAdditionalFormats, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_clearAdditionalFormats)},
    {SIP_MLNAME_CAST(sipName_clearFormats), meth_QTextLayout_clearFormats, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_clearFormats)},
    {SIP_MLNAME_CAST(sipName_clearLayout), meth_QTextLayout_clearLayout, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_clearLayout)},
    {SIP_MLNAME_CAST(sipName_createLine), meth_QTextLayout_createLine, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_createLine)},
    {SIP_MLNAME_CAST(sipName_cursorMoveStyle), meth_QTextLayout_cursorMoveStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_cursorMoveStyle)},
    {SIP_MLNAME_CAST(sipName_draw), SIP_MLMETH_CAST(meth_QTextLayout_draw), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextLayout_draw)},
    {SIP_MLNAME_CAST(sipName_drawCursor), meth_QTextLayout_drawCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_drawCursor)},
    {SIP_MLNAME_CAST(sipName_endLayout), meth_QTextLayout_endLayout, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_endLayout)},
    {SIP_MLNAME_CAST(sipName_font), meth_QTextLayout_font, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_font)},
    {SIP_MLNAME_CAST(sipName_formats), meth_QTextLayout_formats, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_formats)},
    {SIP_MLNAME_CAST(sipName_glyphRuns), SIP_MLMETH_CAST(meth_QTextLayout_glyphRuns), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextLayout_glyphRuns)},
    {SIP_MLNAME_CAST(sipName_isValidCursorPosition), meth_QTextLayout_isValidCursorPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_isValidCursorPosition)},
    {SIP_MLNAME_CAST(sipName_leftCursorPosition), meth_QTextLayout_leftCursorPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_leftCursorPosition)},
    {SIP_MLNAME_CAST(sipName_lineAt), meth_QTextLayout_lineAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_lineAt)},
    {SIP_MLNAME_CAST(sipName_lineCount), meth_QTextLayout_lineCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_lineCount)},
    {SIP_MLNAME_CAST(sipName_lineForTextPosition), meth_QTextLayout_lineForTextPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_lineForTextPosition)},
    {SIP_MLNAME_CAST(sipName_maximumWidth), meth_QTextLayout_maximumWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_maximumWidth)},
    {SIP_MLNAME_CAST(sipName_minimumWidth), meth_QTextLayout_minimumWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_minimumWidth)},
    {SIP_MLNAME_CAST(sipName_nextCursorPosition), SIP_MLMETH_CAST(meth_QTextLayout_nextCursorPosition), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextLayout_nextCursorPosition)},
    {SIP_MLNAME_CAST(sipName_position), meth_QTextLayout_position, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_position)},
    {SIP_MLNAME_CAST(sipName_preeditAreaPosition), meth_QTextLayout_preeditAreaPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_preeditAreaPosition)},
    {SIP_MLNAME_CAST(sipName_preeditAreaText), meth_QTextLayout_preeditAreaText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_preeditAreaText)},
    {SIP_MLNAME_CAST(sipName_previousCursorPosition), SIP_MLMETH_CAST(meth_QTextLayout_previousCursorPosition), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextLayout_previousCursorPosition)},
    {SIP_MLNAME_CAST(sipName_rightCursorPosition), meth_QTextLayout_rightCursorPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_rightCursorPosition)},
    {SIP_MLNAME_CAST(sipName_setAdditionalFormats), meth_QTextLayout_setAdditionalFormats, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_setAdditionalFormats)},
    {SIP_MLNAME_CAST(sipName_setCacheEnabled), meth_QTextLayout_setCacheEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_setCacheEnabled)},
    {SIP_MLNAME_CAST(sipName_setCursorMoveStyle), meth_QTextLayout_setCursorMoveStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_setCursorMoveStyle)},
    {SIP_MLNAME_CAST(sipName_setFont), meth_QTextLayout_setFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_setFont)},
    {SIP_MLNAME_CAST(sipName_setFormats), meth_QTextLayout_setFormats, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_setFormats)},
    {SIP_MLNAME_CAST(sipName_setPosition), meth_QTextLayout_setPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_setPosition)},
    {SIP_MLNAME_CAST(sipName_setPreeditArea), meth_QTextLayout_setPreeditArea, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_setPreeditArea)},
    {SIP_MLNAME_CAST(sipName_setText), meth_QTextLayout_setText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_setText)},
    {SIP_MLNAME_CAST(sipName_setTextOption), meth_QTextLayout_setTextOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_setTextOption)},
    {SIP_MLNAME_CAST(sipName_text), meth_QTextLayout_text, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_text)},
    {SIP_MLNAME_CAST(sipName_textOption), meth_QTextLayout_textOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_textOption)}
};

static sipEnumMemberDef enummembers_QTextLayout[] = {
    {sipName_SkipCharacters, static_cast<int>( ::QTextLayout::SkipCharacters), 322},
    {sipName_SkipWords, static_cast<int>( ::QTextLayout::SkipWords), 322},
};

PyDoc_STRVAR(doc_QTextLayout, "\1QTextLayout()\n"
"QTextLayout(str)\n"
"QTextLayout(str, QFont, paintDevice: QPaintDevice = None)\n"
"QTextLayout(QTextBlock)");


static pyqt5ClassPluginDef plugin_QTextLayout = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextLayout = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextLayout,
        {SIP_NULLPTR},
        &plugin_QTextLayout
    },
    {
        sipNameNr_QTextLayout,
        {0, 0, 1},
        39, methods_QTextLayout,
        2, enummembers_QTextLayout,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextLayout,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QTextLayout,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextLayout,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QTextLayout,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextlayout.sip"
#include <qtextlayout.h>
#line 36407 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 36411 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 36414 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 36417 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QTextInlineObject_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QTextInlineObject_isValid(PyObject *, PyObject *);}
static PyObject *meth_QTextInlineObject_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextInlineObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextInlineObject, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextInlineObject, sipName_isValid, doc_QTextInlineObject_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextInlineObject_rect, "rect(self) -> QRectF");

extern "C" {static PyObject *meth_QTextInlineObject_rect(PyObject *, PyObject *);}
static PyObject *meth_QTextInlineObject_rect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextInlineObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextInlineObject, &sipCpp))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->rect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextInlineObject, sipName_rect, doc_QTextInlineObject_rect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextInlineObject_width, "width(self) -> float");

extern "C" {static PyObject *meth_QTextInlineObject_width(PyObject *, PyObject *);}
static PyObject *meth_QTextInlineObject_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextInlineObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextInlineObject, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->width();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextInlineObject, sipName_width, doc_QTextInlineObject_width);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextInlineObject_ascent, "ascent(self) -> float");

extern "C" {static PyObject *meth_QTextInlineObject_ascent(PyObject *, PyObject *);}
static PyObject *meth_QTextInlineObject_ascent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextInlineObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextInlineObject, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->ascent();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextInlineObject, sipName_ascent, doc_QTextInlineObject_ascent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextInlineObject_descent, "descent(self) -> float");

extern "C" {static PyObject *meth_QTextInlineObject_descent(PyObject *, PyObject *);}
static PyObject *meth_QTextInlineObject_descent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextInlineObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextInlineObject, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->descent();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextInlineObject, sipName_descent, doc_QTextInlineObject_descent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextInlineObject_height, "height(self) -> float");

extern "C" {static PyObject *meth_QTextInlineObject_height(PyObject *, PyObject *);}
static PyObject *meth_QTextInlineObject_height(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextInlineObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextInlineObject, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->height();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextInlineObject, sipName_height, doc_QTextInlineObject_height);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextInlineObject_textDirection, "textDirection(self) -> Qt.LayoutDirection");

extern "C" {static PyObject *meth_QTextInlineObject_textDirection(PyObject *, PyObject *);}
static PyObject *meth_QTextInlineObject_textDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextInlineObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextInlineObject, &sipCpp))
        {
             ::Qt::LayoutDirection sipRes;

            sipRes = sipCpp->textDirection();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_LayoutDirection);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextInlineObject, sipName_textDirection, doc_QTextInlineObject_textDirection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextInlineObject_setWidth, "setWidth(self, float)");

extern "C" {static PyObject *meth_QTextInlineObject_setWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextInlineObject_setWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextInlineObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextInlineObject, &sipCpp, &a0))
        {
            sipCpp->setWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextInlineObject, sipName_setWidth, doc_QTextInlineObject_setWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextInlineObject_setAscent, "setAscent(self, float)");

extern "C" {static PyObject *meth_QTextInlineObject_setAscent(PyObject *, PyObject *);}
static PyObject *meth_QTextInlineObject_setAscent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextInlineObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextInlineObject, &sipCpp, &a0))
        {
            sipCpp->setAscent(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextInlineObject, sipName_setAscent, doc_QTextInlineObject_setAscent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextInlineObject_setDescent, "setDescent(self, float)");

extern "C" {static PyObject *meth_QTextInlineObject_setDescent(PyObject *, PyObject *);}
static PyObject *meth_QTextInlineObject_setDescent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextInlineObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextInlineObject, &sipCpp, &a0))
        {
            sipCpp->setDescent(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextInlineObject, sipName_setDescent, doc_QTextInlineObject_setDescent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextInlineObject_textPosition, "textPosition(self) -> int");

extern "C" {static PyObject *meth_QTextInlineObject_textPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextInlineObject_textPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextInlineObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextInlineObject, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->textPosition();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextInlineObject, sipName_textPosition, doc_QTextInlineObject_textPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextInlineObject_formatIndex, "formatIndex(self) -> int");

extern "C" {static PyObject *meth_QTextInlineObject_formatIndex(PyObject *, PyObject *);}
static PyObject *meth_QTextInlineObject_formatIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextInlineObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextInlineObject, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->formatIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextInlineObject, sipName_formatIndex, doc_QTextInlineObject_formatIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextInlineObject_format, "format(self) -> QTextFormat");

extern "C" {static PyObject *meth_QTextInlineObject_format(PyObject *, PyObject *);}
static PyObject *meth_QTextInlineObject_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextInlineObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextInlineObject, &sipCpp))
        {
             ::QTextFormat*sipRes;

            sipRes = new  ::QTextFormat(sipCpp->format());

            return sipConvertFromNewType(sipRes,sipType_QTextFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextInlineObject, sipName_format, doc_QTextInlineObject_format);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextInlineObject(void *, int);}
static void release_QTextInlineObject(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextInlineObject *>(sipCppV);
}


extern "C" {static void assign_QTextInlineObject(void *, SIP_SSIZE_T, void *);}
static void assign_QTextInlineObject(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTextInlineObject *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTextInlineObject *>(sipSrc);
}


extern "C" {static void *array_QTextInlineObject(SIP_SSIZE_T);}
static void *array_QTextInlineObject(SIP_SSIZE_T sipNrElem)
{
    return new  ::QTextInlineObject[sipNrElem];
}


extern "C" {static void *copy_QTextInlineObject(const void *, SIP_SSIZE_T);}
static void *copy_QTextInlineObject(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QTextInlineObject(reinterpret_cast<const  ::QTextInlineObject *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextInlineObject(sipSimpleWrapper *);}
static void dealloc_QTextInlineObject(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextInlineObject(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextInlineObject(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextInlineObject(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextInlineObject *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTextInlineObject();

            return sipCpp;
        }
    }

    {
        const  ::QTextInlineObject* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTextInlineObject, &a0))
        {
            sipCpp = new  ::QTextInlineObject(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QTextInlineObject[] = {
    {SIP_MLNAME_CAST(sipName_ascent), meth_QTextInlineObject_ascent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextInlineObject_ascent)},
    {SIP_MLNAME_CAST(sipName_descent), meth_QTextInlineObject_descent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextInlineObject_descent)},
    {SIP_MLNAME_CAST(sipName_format), meth_QTextInlineObject_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextInlineObject_format)},
    {SIP_MLNAME_CAST(sipName_formatIndex), meth_QTextInlineObject_formatIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextInlineObject_formatIndex)},
    {SIP_MLNAME_CAST(sipName_height), meth_QTextInlineObject_height, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextInlineObject_height)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QTextInlineObject_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextInlineObject_isValid)},
    {SIP_MLNAME_CAST(sipName_rect), meth_QTextInlineObject_rect, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextInlineObject_rect)},
    {SIP_MLNAME_CAST(sipName_setAscent), meth_QTextInlineObject_setAscent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextInlineObject_setAscent)},
    {SIP_MLNAME_CAST(sipName_setDescent), meth_QTextInlineObject_setDescent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextInlineObject_setDescent)},
    {SIP_MLNAME_CAST(sipName_setWidth), meth_QTextInlineObject_setWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextInlineObject_setWidth)},
    {SIP_MLNAME_CAST(sipName_textDirection), meth_QTextInlineObject_textDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextInlineObject_textDirection)},
    {SIP_MLNAME_CAST(sipName_textPosition), meth_QTextInlineObject_textPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextInlineObject_textPosition)},
    {SIP_MLNAME_CAST(sipName_width), meth_QTextInlineObject_width, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextInlineObject_width)}
};

PyDoc_STRVAR(doc_QTextInlineObject, "\1QTextInlineObject()\n"
"QTextInlineObject(QTextInlineObject)");


static pyqt5ClassPluginDef plugin_QTextInlineObject = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextInlineObject = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextInlineObject,
        {SIP_NULLPTR},
        &plugin_QTextInlineObject
    },
    {
        sipNameNr_QTextInlineObject,
        {0, 0, 1},
        13, methods_QTextInlineObject,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextInlineObject,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QTextInlineObject,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextInlineObject,
    assign_QTextInlineObject,
    array_QTextInlineObject,
    copy_QTextInlineObject,
    release_QTextInlineObject,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 553 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 36933 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 36937 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 36940 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36943 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 255 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 36946 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpen.sip"
#include <qpen.h>
#line 36949 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 36952 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 36955 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 36958 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 36961 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 441 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 36964 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 464 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 36967 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 527 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 36970 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 409 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 36973 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 358 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 36976 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 146 "sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 36979 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 36982 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 36985 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 36988 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QTextTableCellFormat_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QTextTableCellFormat_isValid(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCellFormat_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextTableCellFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTableCellFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableCellFormat, sipName_isValid, doc_QTextTableCellFormat_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableCellFormat_setTopPadding, "setTopPadding(self, float)");

extern "C" {static PyObject *meth_QTextTableCellFormat_setTopPadding(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCellFormat_setTopPadding(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextTableCellFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextTableCellFormat, &sipCpp, &a0))
        {
            sipCpp->setTopPadding(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableCellFormat, sipName_setTopPadding, doc_QTextTableCellFormat_setTopPadding);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableCellFormat_topPadding, "topPadding(self) -> float");

extern "C" {static PyObject *meth_QTextTableCellFormat_topPadding(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCellFormat_topPadding(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextTableCellFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTableCellFormat, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->topPadding();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableCellFormat, sipName_topPadding, doc_QTextTableCellFormat_topPadding);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableCellFormat_setBottomPadding, "setBottomPadding(self, float)");

extern "C" {static PyObject *meth_QTextTableCellFormat_setBottomPadding(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCellFormat_setBottomPadding(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextTableCellFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextTableCellFormat, &sipCpp, &a0))
        {
            sipCpp->setBottomPadding(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableCellFormat, sipName_setBottomPadding, doc_QTextTableCellFormat_setBottomPadding);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableCellFormat_bottomPadding, "bottomPadding(self) -> float");

extern "C" {static PyObject *meth_QTextTableCellFormat_bottomPadding(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCellFormat_bottomPadding(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextTableCellFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTableCellFormat, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->bottomPadding();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableCellFormat, sipName_bottomPadding, doc_QTextTableCellFormat_bottomPadding);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableCellFormat_setLeftPadding, "setLeftPadding(self, float)");

extern "C" {static PyObject *meth_QTextTableCellFormat_setLeftPadding(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCellFormat_setLeftPadding(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextTableCellFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextTableCellFormat, &sipCpp, &a0))
        {
            sipCpp->setLeftPadding(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableCellFormat, sipName_setLeftPadding, doc_QTextTableCellFormat_setLeftPadding);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableCellFormat_leftPadding, "leftPadding(self) -> float");

extern "C" {static PyObject *meth_QTextTableCellFormat_leftPadding(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCellFormat_leftPadding(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextTableCellFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTableCellFormat, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->leftPadding();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableCellFormat, sipName_leftPadding, doc_QTextTableCellFormat_leftPadding);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableCellFormat_setRightPadding, "setRightPadding(self, float)");

extern "C" {static PyObject *meth_QTextTableCellFormat_setRightPadding(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCellFormat_setRightPadding(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextTableCellFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextTableCellFormat, &sipCpp, &a0))
        {
            sipCpp->setRightPadding(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableCellFormat, sipName_setRightPadding, doc_QTextTableCellFormat_setRightPadding);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableCellFormat_rightPadding, "rightPadding(self) -> float");

extern "C" {static PyObject *meth_QTextTableCellFormat_rightPadding(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCellFormat_rightPadding(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextTableCellFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTableCellFormat, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->rightPadding();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableCellFormat, sipName_rightPadding, doc_QTextTableCellFormat_rightPadding);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableCellFormat_setPadding, "setPadding(self, float)");

extern "C" {static PyObject *meth_QTextTableCellFormat_setPadding(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCellFormat_setPadding(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextTableCellFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextTableCellFormat, &sipCpp, &a0))
        {
            sipCpp->setPadding(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableCellFormat, sipName_setPadding, doc_QTextTableCellFormat_setPadding);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QTextTableCellFormat(void *, const sipTypeDef *);}
static void *cast_QTextTableCellFormat(void *sipCppV, const sipTypeDef *targetType)
{
     ::QTextTableCellFormat *sipCpp = reinterpret_cast< ::QTextTableCellFormat *>(sipCppV);

    if (targetType == sipType_QTextCharFormat)
        return static_cast< ::QTextCharFormat *>(sipCpp);

    if (targetType == sipType_QTextFormat)
        return static_cast< ::QTextFormat *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextTableCellFormat(void *, int);}
static void release_QTextTableCellFormat(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextTableCellFormat *>(sipCppV);
}


extern "C" {static void assign_QTextTableCellFormat(void *, SIP_SSIZE_T, void *);}
static void assign_QTextTableCellFormat(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTextTableCellFormat *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTextTableCellFormat *>(sipSrc);
}


extern "C" {static void *array_QTextTableCellFormat(SIP_SSIZE_T);}
static void *array_QTextTableCellFormat(SIP_SSIZE_T sipNrElem)
{
    return new  ::QTextTableCellFormat[sipNrElem];
}


extern "C" {static void *copy_QTextTableCellFormat(const void *, SIP_SSIZE_T);}
static void *copy_QTextTableCellFormat(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QTextTableCellFormat(reinterpret_cast<const  ::QTextTableCellFormat *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextTableCellFormat(sipSimpleWrapper *);}
static void dealloc_QTextTableCellFormat(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextTableCellFormat(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextTableCellFormat(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextTableCellFormat(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextTableCellFormat *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTextTableCellFormat();

            return sipCpp;
        }
    }

    {
        const  ::QTextTableCellFormat* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTextTableCellFormat, &a0))
        {
            sipCpp = new  ::QTextTableCellFormat(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTextTableCellFormat[] = {{288, 255, 1}};


static PyMethodDef methods_QTextTableCellFormat[] = {
    {SIP_MLNAME_CAST(sipName_bottomPadding), meth_QTextTableCellFormat_bottomPadding, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableCellFormat_bottomPadding)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QTextTableCellFormat_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableCellFormat_isValid)},
    {SIP_MLNAME_CAST(sipName_leftPadding), meth_QTextTableCellFormat_leftPadding, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableCellFormat_leftPadding)},
    {SIP_MLNAME_CAST(sipName_rightPadding), meth_QTextTableCellFormat_rightPadding, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableCellFormat_rightPadding)},
    {SIP_MLNAME_CAST(sipName_setBottomPadding), meth_QTextTableCellFormat_setBottomPadding, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableCellFormat_setBottomPadding)},
    {SIP_MLNAME_CAST(sipName_setLeftPadding), meth_QTextTableCellFormat_setLeftPadding, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableCellFormat_setLeftPadding)},
    {SIP_MLNAME_CAST(sipName_setPadding), meth_QTextTableCellFormat_setPadding, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableCellFormat_setPadding)},
    {SIP_MLNAME_CAST(sipName_setRightPadding), meth_QTextTableCellFormat_setRightPadding, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableCellFormat_setRightPadding)},
    {SIP_MLNAME_CAST(sipName_setTopPadding), meth_QTextTableCellFormat_setTopPadding, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableCellFormat_setTopPadding)},
    {SIP_MLNAME_CAST(sipName_topPadding), meth_QTextTableCellFormat_topPadding, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableCellFormat_topPadding)}
};

PyDoc_STRVAR(doc_QTextTableCellFormat, "\1QTextTableCellFormat()\n"
"QTextTableCellFormat(QTextTableCellFormat)");


static pyqt5ClassPluginDef plugin_QTextTableCellFormat = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextTableCellFormat = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextTableCellFormat,
        {SIP_NULLPTR},
        &plugin_QTextTableCellFormat
    },
    {
        sipNameNr_QTextTableCellFormat,
        {0, 0, 1},
        10, methods_QTextTableCellFormat,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextTableCellFormat,
    -1,
    -1,
    supers_QTextTableCellFormat,
    SIP_NULLPTR,
    init_type_QTextTableCellFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextTableCellFormat,
    assign_QTextTableCellFormat,
    array_QTextTableCellFormat,
    copy_QTextTableCellFormat,
    release_QTextTableCellFormat,
    cast_QTextTableCellFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 527 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 37437 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 37441 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 37444 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 37447 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 464 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 37450 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 37453 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 37456 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 37459 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 553 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 37462 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 37465 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 441 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 37468 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 409 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 37471 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 255 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 37474 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 358 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 37477 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 146 "sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 37480 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 37483 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpen.sip"
#include <qpen.h>
#line 37486 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 37489 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 37492 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QTextTableFormat_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QTextTableFormat_isValid(PyObject *, PyObject *);}
static PyObject *meth_QTextTableFormat_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextTableFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTableFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableFormat, sipName_isValid, doc_QTextTableFormat_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableFormat_columns, "columns(self) -> int");

extern "C" {static PyObject *meth_QTextTableFormat_columns(PyObject *, PyObject *);}
static PyObject *meth_QTextTableFormat_columns(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextTableFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTableFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->columns();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableFormat, sipName_columns, doc_QTextTableFormat_columns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableFormat_setColumnWidthConstraints, "setColumnWidthConstraints(self, Iterable[QTextLength])");

extern "C" {static PyObject *meth_QTextTableFormat_setColumnWidthConstraints(PyObject *, PyObject *);}
static PyObject *meth_QTextTableFormat_setColumnWidthConstraints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QVector< ::QTextLength>* a0;
        int a0State = 0;
         ::QTextTableFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextTableFormat, &sipCpp, sipType_QVector_0100QTextLength,&a0, &a0State))
        {
            sipCpp->setColumnWidthConstraints(*a0);
            sipReleaseType(const_cast<QVector< ::QTextLength> *>(a0),sipType_QVector_0100QTextLength,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableFormat, sipName_setColumnWidthConstraints, doc_QTextTableFormat_setColumnWidthConstraints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableFormat_columnWidthConstraints, "columnWidthConstraints(self) -> List[QTextLength]");

extern "C" {static PyObject *meth_QTextTableFormat_columnWidthConstraints(PyObject *, PyObject *);}
static PyObject *meth_QTextTableFormat_columnWidthConstraints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextTableFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTableFormat, &sipCpp))
        {
            QVector< ::QTextLength>*sipRes;

            sipRes = new QVector< ::QTextLength>(sipCpp->columnWidthConstraints());

            return sipConvertFromNewType(sipRes,sipType_QVector_0100QTextLength,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableFormat, sipName_columnWidthConstraints, doc_QTextTableFormat_columnWidthConstraints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableFormat_clearColumnWidthConstraints, "clearColumnWidthConstraints(self)");

extern "C" {static PyObject *meth_QTextTableFormat_clearColumnWidthConstraints(PyObject *, PyObject *);}
static PyObject *meth_QTextTableFormat_clearColumnWidthConstraints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextTableFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTableFormat, &sipCpp))
        {
            sipCpp->clearColumnWidthConstraints();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableFormat, sipName_clearColumnWidthConstraints, doc_QTextTableFormat_clearColumnWidthConstraints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableFormat_cellSpacing, "cellSpacing(self) -> float");

extern "C" {static PyObject *meth_QTextTableFormat_cellSpacing(PyObject *, PyObject *);}
static PyObject *meth_QTextTableFormat_cellSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextTableFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTableFormat, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->cellSpacing();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableFormat, sipName_cellSpacing, doc_QTextTableFormat_cellSpacing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableFormat_setCellSpacing, "setCellSpacing(self, float)");

extern "C" {static PyObject *meth_QTextTableFormat_setCellSpacing(PyObject *, PyObject *);}
static PyObject *meth_QTextTableFormat_setCellSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextTableFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextTableFormat, &sipCpp, &a0))
        {
            sipCpp->setCellSpacing(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableFormat, sipName_setCellSpacing, doc_QTextTableFormat_setCellSpacing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableFormat_cellPadding, "cellPadding(self) -> float");

extern "C" {static PyObject *meth_QTextTableFormat_cellPadding(PyObject *, PyObject *);}
static PyObject *meth_QTextTableFormat_cellPadding(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextTableFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTableFormat, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->cellPadding();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableFormat, sipName_cellPadding, doc_QTextTableFormat_cellPadding);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableFormat_alignment, "alignment(self) -> Qt.Alignment");

extern "C" {static PyObject *meth_QTextTableFormat_alignment(PyObject *, PyObject *);}
static PyObject *meth_QTextTableFormat_alignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextTableFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTableFormat, &sipCpp))
        {
             ::Qt::Alignment*sipRes;

            sipRes = new  ::Qt::Alignment(sipCpp->alignment());

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableFormat, sipName_alignment, doc_QTextTableFormat_alignment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableFormat_setColumns, "setColumns(self, int)");

extern "C" {static PyObject *meth_QTextTableFormat_setColumns(PyObject *, PyObject *);}
static PyObject *meth_QTextTableFormat_setColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextTableFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextTableFormat, &sipCpp, &a0))
        {
            sipCpp->setColumns(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableFormat, sipName_setColumns, doc_QTextTableFormat_setColumns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableFormat_setCellPadding, "setCellPadding(self, float)");

extern "C" {static PyObject *meth_QTextTableFormat_setCellPadding(PyObject *, PyObject *);}
static PyObject *meth_QTextTableFormat_setCellPadding(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextTableFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextTableFormat, &sipCpp, &a0))
        {
            sipCpp->setCellPadding(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableFormat, sipName_setCellPadding, doc_QTextTableFormat_setCellPadding);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableFormat_setAlignment, "setAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag])");

extern "C" {static PyObject *meth_QTextTableFormat_setAlignment(PyObject *, PyObject *);}
static PyObject *meth_QTextTableFormat_setAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::Alignment* a0;
        int a0State = 0;
         ::QTextTableFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextTableFormat, &sipCpp, sipType_Qt_Alignment, &a0, &a0State))
        {
            sipCpp->setAlignment(*a0);
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableFormat, sipName_setAlignment, doc_QTextTableFormat_setAlignment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableFormat_setHeaderRowCount, "setHeaderRowCount(self, int)");

extern "C" {static PyObject *meth_QTextTableFormat_setHeaderRowCount(PyObject *, PyObject *);}
static PyObject *meth_QTextTableFormat_setHeaderRowCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextTableFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextTableFormat, &sipCpp, &a0))
        {
            sipCpp->setHeaderRowCount(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableFormat, sipName_setHeaderRowCount, doc_QTextTableFormat_setHeaderRowCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextTableFormat_headerRowCount, "headerRowCount(self) -> int");

extern "C" {static PyObject *meth_QTextTableFormat_headerRowCount(PyObject *, PyObject *);}
static PyObject *meth_QTextTableFormat_headerRowCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextTableFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextTableFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->headerRowCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextTableFormat, sipName_headerRowCount, doc_QTextTableFormat_headerRowCount);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QTextTableFormat(void *, const sipTypeDef *);}
static void *cast_QTextTableFormat(void *sipCppV, const sipTypeDef *targetType)
{
     ::QTextTableFormat *sipCpp = reinterpret_cast< ::QTextTableFormat *>(sipCppV);

    if (targetType == sipType_QTextFrameFormat)
        return static_cast< ::QTextFrameFormat *>(sipCpp);

    if (targetType == sipType_QTextFormat)
        return static_cast< ::QTextFormat *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextTableFormat(void *, int);}
static void release_QTextTableFormat(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextTableFormat *>(sipCppV);
}


extern "C" {static void assign_QTextTableFormat(void *, SIP_SSIZE_T, void *);}
static void assign_QTextTableFormat(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTextTableFormat *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTextTableFormat *>(sipSrc);
}


extern "C" {static void *array_QTextTableFormat(SIP_SSIZE_T);}
static void *array_QTextTableFormat(SIP_SSIZE_T sipNrElem)
{
    return new  ::QTextTableFormat[sipNrElem];
}


extern "C" {static void *copy_QTextTableFormat(const void *, SIP_SSIZE_T);}
static void *copy_QTextTableFormat(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QTextTableFormat(reinterpret_cast<const  ::QTextTableFormat *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextTableFormat(sipSimpleWrapper *);}
static void dealloc_QTextTableFormat(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextTableFormat(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextTableFormat(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextTableFormat(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextTableFormat *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTextTableFormat();

            return sipCpp;
        }
    }

    {
        const  ::QTextTableFormat* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTextTableFormat, &a0))
        {
            sipCpp = new  ::QTextTableFormat(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTextTableFormat[] = {{313, 255, 1}};


static PyMethodDef methods_QTextTableFormat[] = {
    {SIP_MLNAME_CAST(sipName_alignment), meth_QTextTableFormat_alignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableFormat_alignment)},
    {SIP_MLNAME_CAST(sipName_cellPadding), meth_QTextTableFormat_cellPadding, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableFormat_cellPadding)},
    {SIP_MLNAME_CAST(sipName_cellSpacing), meth_QTextTableFormat_cellSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableFormat_cellSpacing)},
    {SIP_MLNAME_CAST(sipName_clearColumnWidthConstraints), meth_QTextTableFormat_clearColumnWidthConstraints, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableFormat_clearColumnWidthConstraints)},
    {SIP_MLNAME_CAST(sipName_columnWidthConstraints), meth_QTextTableFormat_columnWidthConstraints, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableFormat_columnWidthConstraints)},
    {SIP_MLNAME_CAST(sipName_columns), meth_QTextTableFormat_columns, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableFormat_columns)},
    {SIP_MLNAME_CAST(sipName_headerRowCount), meth_QTextTableFormat_headerRowCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableFormat_headerRowCount)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QTextTableFormat_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableFormat_isValid)},
    {SIP_MLNAME_CAST(sipName_setAlignment), meth_QTextTableFormat_setAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableFormat_setAlignment)},
    {SIP_MLNAME_CAST(sipName_setCellPadding), meth_QTextTableFormat_setCellPadding, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableFormat_setCellPadding)},
    {SIP_MLNAME_CAST(sipName_setCellSpacing), meth_QTextTableFormat_setCellSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableFormat_setCellSpacing)},
    {SIP_MLNAME_CAST(sipName_setColumnWidthConstraints), meth_QTextTableFormat_setColumnWidthConstraints, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableFormat_setColumnWidthConstraints)},
    {SIP_MLNAME_CAST(sipName_setColumns), meth_QTextTableFormat_setColumns, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableFormat_setColumns)},
    {SIP_MLNAME_CAST(sipName_setHeaderRowCount), meth_QTextTableFormat_setHeaderRowCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextTableFormat_setHeaderRowCount)}
};

PyDoc_STRVAR(doc_QTextTableFormat, "\1QTextTableFormat()\n"
"QTextTableFormat(QTextTableFormat)");


static pyqt5ClassPluginDef plugin_QTextTableFormat = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextTableFormat = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextTableFormat,
        {SIP_NULLPTR},
        &plugin_QTextTableFormat
    },
    {
        sipNameNr_QTextTableFormat,
        {0, 0, 1},
        14, methods_QTextTableFormat,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextTableFormat,
    -1,
    -1,
    supers_QTextTableFormat,
    SIP_NULLPTR,
    init_type_QTextTableFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextTableFormat,
    assign_QTextTableFormat,
    array_QTextTableFormat,
    copy_QTextTableFormat,
    release_QTextTableFormat,
    cast_QTextTableFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 464 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 38060 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 38064 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 38067 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 38070 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 38073 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 553 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 38076 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 38079 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 441 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 38082 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 527 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 38085 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 409 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 38088 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 255 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 38091 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 358 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 38094 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 146 "sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 38097 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 38100 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 38103 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpen.sip"
#include <qpen.h>
#line 38106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 38109 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 38112 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QTextFrameFormat_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QTextFrameFormat_isValid(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrameFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_isValid, doc_QTextFrameFormat_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFrameFormat_setPosition, "setPosition(self, QTextFrameFormat.Position)");

extern "C" {static PyObject *meth_QTextFrameFormat_setPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_setPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextFrameFormat::Position a0;
         ::QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextFrameFormat, &sipCpp, sipType_QTextFrameFormat_Position, &a0))
        {
            sipCpp->setPosition(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_setPosition, doc_QTextFrameFormat_setPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFrameFormat_position, "position(self) -> QTextFrameFormat.Position");

extern "C" {static PyObject *meth_QTextFrameFormat_position(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_position(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrameFormat, &sipCpp))
        {
             ::QTextFrameFormat::Position sipRes;

            sipRes = sipCpp->position();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QTextFrameFormat_Position);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_position, doc_QTextFrameFormat_position);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFrameFormat_border, "border(self) -> float");

extern "C" {static PyObject *meth_QTextFrameFormat_border(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_border(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrameFormat, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->border();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_border, doc_QTextFrameFormat_border);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFrameFormat_margin, "margin(self) -> float");

extern "C" {static PyObject *meth_QTextFrameFormat_margin(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_margin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrameFormat, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->margin();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_margin, doc_QTextFrameFormat_margin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFrameFormat_padding, "padding(self) -> float");

extern "C" {static PyObject *meth_QTextFrameFormat_padding(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_padding(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrameFormat, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->padding();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_padding, doc_QTextFrameFormat_padding);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFrameFormat_setWidth, "setWidth(self, QTextLength)\n"
"setWidth(self, float)");

extern "C" {static PyObject *meth_QTextFrameFormat_setWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_setWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextLength* a0;
         ::QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextFrameFormat, &sipCpp, sipType_QTextLength, &a0))
        {
            sipCpp->setWidth(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::qreal a0;
         ::QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextFrameFormat, &sipCpp, &a0))
        {
            sipCpp->setWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_setWidth, doc_QTextFrameFormat_setWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFrameFormat_width, "width(self) -> QTextLength");

extern "C" {static PyObject *meth_QTextFrameFormat_width(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrameFormat, &sipCpp))
        {
             ::QTextLength*sipRes;

            sipRes = new  ::QTextLength(sipCpp->width());

            return sipConvertFromNewType(sipRes,sipType_QTextLength,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_width, doc_QTextFrameFormat_width);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFrameFormat_height, "height(self) -> QTextLength");

extern "C" {static PyObject *meth_QTextFrameFormat_height(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_height(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrameFormat, &sipCpp))
        {
             ::QTextLength*sipRes;

            sipRes = new  ::QTextLength(sipCpp->height());

            return sipConvertFromNewType(sipRes,sipType_QTextLength,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_height, doc_QTextFrameFormat_height);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFrameFormat_setBorder, "setBorder(self, float)");

extern "C" {static PyObject *meth_QTextFrameFormat_setBorder(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_setBorder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextFrameFormat, &sipCpp, &a0))
        {
            sipCpp->setBorder(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_setBorder, doc_QTextFrameFormat_setBorder);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFrameFormat_setMargin, "setMargin(self, float)");

extern "C" {static PyObject *meth_QTextFrameFormat_setMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_setMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextFrameFormat, &sipCpp, &a0))
        {
            sipCpp->setMargin(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_setMargin, doc_QTextFrameFormat_setMargin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFrameFormat_setPadding, "setPadding(self, float)");

extern "C" {static PyObject *meth_QTextFrameFormat_setPadding(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_setPadding(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextFrameFormat, &sipCpp, &a0))
        {
            sipCpp->setPadding(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_setPadding, doc_QTextFrameFormat_setPadding);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFrameFormat_setHeight, "setHeight(self, float)\n"
"setHeight(self, QTextLength)");

extern "C" {static PyObject *meth_QTextFrameFormat_setHeight(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_setHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextFrameFormat, &sipCpp, &a0))
        {
            sipCpp->setHeight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QTextLength* a0;
         ::QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextFrameFormat, &sipCpp, sipType_QTextLength, &a0))
        {
            sipCpp->setHeight(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_setHeight, doc_QTextFrameFormat_setHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFrameFormat_setPageBreakPolicy, "setPageBreakPolicy(self, Union[QTextFormat.PageBreakFlags, QTextFormat.PageBreakFlag])");

extern "C" {static PyObject *meth_QTextFrameFormat_setPageBreakPolicy(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_setPageBreakPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextFormat::PageBreakFlags* a0;
        int a0State = 0;
         ::QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextFrameFormat, &sipCpp, sipType_QTextFormat_PageBreakFlags, &a0, &a0State))
        {
            sipCpp->setPageBreakPolicy(*a0);
            sipReleaseType(a0,sipType_QTextFormat_PageBreakFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_setPageBreakPolicy, doc_QTextFrameFormat_setPageBreakPolicy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFrameFormat_pageBreakPolicy, "pageBreakPolicy(self) -> QTextFormat.PageBreakFlags");

extern "C" {static PyObject *meth_QTextFrameFormat_pageBreakPolicy(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_pageBreakPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrameFormat, &sipCpp))
        {
             ::QTextFormat::PageBreakFlags*sipRes;

            sipRes = new  ::QTextFormat::PageBreakFlags(sipCpp->pageBreakPolicy());

            return sipConvertFromNewType(sipRes,sipType_QTextFormat_PageBreakFlags,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_pageBreakPolicy, doc_QTextFrameFormat_pageBreakPolicy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFrameFormat_setBorderBrush, "setBorderBrush(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QTextFrameFormat_setBorderBrush(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_setBorderBrush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBrush* a0;
        int a0State = 0;
         ::QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextFrameFormat, &sipCpp, sipType_QBrush, &a0, &a0State))
        {
            sipCpp->setBorderBrush(*a0);
            sipReleaseType(const_cast< ::QBrush *>(a0),sipType_QBrush,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_setBorderBrush, doc_QTextFrameFormat_setBorderBrush);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFrameFormat_borderBrush, "borderBrush(self) -> QBrush");

extern "C" {static PyObject *meth_QTextFrameFormat_borderBrush(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_borderBrush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrameFormat, &sipCpp))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->borderBrush());

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_borderBrush, doc_QTextFrameFormat_borderBrush);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFrameFormat_setBorderStyle, "setBorderStyle(self, QTextFrameFormat.BorderStyle)");

extern "C" {static PyObject *meth_QTextFrameFormat_setBorderStyle(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_setBorderStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextFrameFormat::BorderStyle a0;
         ::QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextFrameFormat, &sipCpp, sipType_QTextFrameFormat_BorderStyle, &a0))
        {
            sipCpp->setBorderStyle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_setBorderStyle, doc_QTextFrameFormat_setBorderStyle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFrameFormat_borderStyle, "borderStyle(self) -> QTextFrameFormat.BorderStyle");

extern "C" {static PyObject *meth_QTextFrameFormat_borderStyle(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_borderStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrameFormat, &sipCpp))
        {
             ::QTextFrameFormat::BorderStyle sipRes;

            sipRes = sipCpp->borderStyle();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QTextFrameFormat_BorderStyle);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_borderStyle, doc_QTextFrameFormat_borderStyle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFrameFormat_topMargin, "topMargin(self) -> float");

extern "C" {static PyObject *meth_QTextFrameFormat_topMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_topMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrameFormat, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->topMargin();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_topMargin, doc_QTextFrameFormat_topMargin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFrameFormat_bottomMargin, "bottomMargin(self) -> float");

extern "C" {static PyObject *meth_QTextFrameFormat_bottomMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_bottomMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrameFormat, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->bottomMargin();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_bottomMargin, doc_QTextFrameFormat_bottomMargin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFrameFormat_leftMargin, "leftMargin(self) -> float");

extern "C" {static PyObject *meth_QTextFrameFormat_leftMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_leftMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrameFormat, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->leftMargin();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_leftMargin, doc_QTextFrameFormat_leftMargin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFrameFormat_rightMargin, "rightMargin(self) -> float");

extern "C" {static PyObject *meth_QTextFrameFormat_rightMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_rightMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrameFormat, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->rightMargin();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_rightMargin, doc_QTextFrameFormat_rightMargin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFrameFormat_setTopMargin, "setTopMargin(self, float)");

extern "C" {static PyObject *meth_QTextFrameFormat_setTopMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_setTopMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextFrameFormat, &sipCpp, &a0))
        {
            sipCpp->setTopMargin(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_setTopMargin, doc_QTextFrameFormat_setTopMargin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFrameFormat_setBottomMargin, "setBottomMargin(self, float)");

extern "C" {static PyObject *meth_QTextFrameFormat_setBottomMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_setBottomMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextFrameFormat, &sipCpp, &a0))
        {
            sipCpp->setBottomMargin(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_setBottomMargin, doc_QTextFrameFormat_setBottomMargin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFrameFormat_setLeftMargin, "setLeftMargin(self, float)");

extern "C" {static PyObject *meth_QTextFrameFormat_setLeftMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_setLeftMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextFrameFormat, &sipCpp, &a0))
        {
            sipCpp->setLeftMargin(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_setLeftMargin, doc_QTextFrameFormat_setLeftMargin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFrameFormat_setRightMargin, "setRightMargin(self, float)");

extern "C" {static PyObject *meth_QTextFrameFormat_setRightMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_setRightMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextFrameFormat, &sipCpp, &a0))
        {
            sipCpp->setRightMargin(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_setRightMargin, doc_QTextFrameFormat_setRightMargin);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QTextFrameFormat(void *, const sipTypeDef *);}
static void *cast_QTextFrameFormat(void *sipCppV, const sipTypeDef *targetType)
{
     ::QTextFrameFormat *sipCpp = reinterpret_cast< ::QTextFrameFormat *>(sipCppV);

    if (targetType == sipType_QTextFormat)
        return static_cast< ::QTextFormat *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextFrameFormat(void *, int);}
static void release_QTextFrameFormat(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextFrameFormat *>(sipCppV);
}


extern "C" {static void assign_QTextFrameFormat(void *, SIP_SSIZE_T, void *);}
static void assign_QTextFrameFormat(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTextFrameFormat *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTextFrameFormat *>(sipSrc);
}


extern "C" {static void *array_QTextFrameFormat(SIP_SSIZE_T);}
static void *array_QTextFrameFormat(SIP_SSIZE_T sipNrElem)
{
    return new  ::QTextFrameFormat[sipNrElem];
}


extern "C" {static void *copy_QTextFrameFormat(const void *, SIP_SSIZE_T);}
static void *copy_QTextFrameFormat(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QTextFrameFormat(reinterpret_cast<const  ::QTextFrameFormat *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextFrameFormat(sipSimpleWrapper *);}
static void dealloc_QTextFrameFormat(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextFrameFormat(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextFrameFormat(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextFrameFormat(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextFrameFormat *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTextFrameFormat();

            return sipCpp;
        }
    }

    {
        const  ::QTextFrameFormat* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTextFrameFormat, &a0))
        {
            sipCpp = new  ::QTextFrameFormat(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTextFrameFormat[] = {{304, 255, 1}};


static PyMethodDef methods_QTextFrameFormat[] = {
    {SIP_MLNAME_CAST(sipName_border), meth_QTextFrameFormat_border, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_border)},
    {SIP_MLNAME_CAST(sipName_borderBrush), meth_QTextFrameFormat_borderBrush, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_borderBrush)},
    {SIP_MLNAME_CAST(sipName_borderStyle), meth_QTextFrameFormat_borderStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_borderStyle)},
    {SIP_MLNAME_CAST(sipName_bottomMargin), meth_QTextFrameFormat_bottomMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_bottomMargin)},
    {SIP_MLNAME_CAST(sipName_height), meth_QTextFrameFormat_height, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_height)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QTextFrameFormat_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_isValid)},
    {SIP_MLNAME_CAST(sipName_leftMargin), meth_QTextFrameFormat_leftMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_leftMargin)},
    {SIP_MLNAME_CAST(sipName_margin), meth_QTextFrameFormat_margin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_margin)},
    {SIP_MLNAME_CAST(sipName_padding), meth_QTextFrameFormat_padding, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_padding)},
    {SIP_MLNAME_CAST(sipName_pageBreakPolicy), meth_QTextFrameFormat_pageBreakPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_pageBreakPolicy)},
    {SIP_MLNAME_CAST(sipName_position), meth_QTextFrameFormat_position, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_position)},
    {SIP_MLNAME_CAST(sipName_rightMargin), meth_QTextFrameFormat_rightMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_rightMargin)},
    {SIP_MLNAME_CAST(sipName_setBorder), meth_QTextFrameFormat_setBorder, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_setBorder)},
    {SIP_MLNAME_CAST(sipName_setBorderBrush), meth_QTextFrameFormat_setBorderBrush, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_setBorderBrush)},
    {SIP_MLNAME_CAST(sipName_setBorderStyle), meth_QTextFrameFormat_setBorderStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_setBorderStyle)},
    {SIP_MLNAME_CAST(sipName_setBottomMargin), meth_QTextFrameFormat_setBottomMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_setBottomMargin)},
    {SIP_MLNAME_CAST(sipName_setHeight), meth_QTextFrameFormat_setHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_setHeight)},
    {SIP_MLNAME_CAST(sipName_setLeftMargin), meth_QTextFrameFormat_setLeftMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_setLeftMargin)},
    {SIP_MLNAME_CAST(sipName_setMargin), meth_QTextFrameFormat_setMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_setMargin)},
    {SIP_MLNAME_CAST(sipName_setPadding), meth_QTextFrameFormat_setPadding, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_setPadding)},
    {SIP_MLNAME_CAST(sipName_setPageBreakPolicy), meth_QTextFrameFormat_setPageBreakPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_setPageBreakPolicy)},
    {SIP_MLNAME_CAST(sipName_setPosition), meth_QTextFrameFormat_setPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_setPosition)},
    {SIP_MLNAME_CAST(sipName_setRightMargin), meth_QTextFrameFormat_setRightMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_setRightMargin)},
    {SIP_MLNAME_CAST(sipName_setTopMargin), meth_QTextFrameFormat_setTopMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_setTopMargin)},
    {SIP_MLNAME_CAST(sipName_setWidth), meth_QTextFrameFormat_setWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_setWidth)},
    {SIP_MLNAME_CAST(sipName_topMargin), meth_QTextFrameFormat_topMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_topMargin)},
    {SIP_MLNAME_CAST(sipName_width), meth_QTextFrameFormat_width, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_width)}
};

static sipEnumMemberDef enummembers_QTextFrameFormat[] = {
    {sipName_BorderStyle_Dashed, static_cast<int>( ::QTextFrameFormat::BorderStyle_Dashed), 314},
    {sipName_BorderStyle_DotDash, static_cast<int>( ::QTextFrameFormat::BorderStyle_DotDash), 314},
    {sipName_BorderStyle_DotDotDash, static_cast<int>( ::QTextFrameFormat::BorderStyle_DotDotDash), 314},
    {sipName_BorderStyle_Dotted, static_cast<int>( ::QTextFrameFormat::BorderStyle_Dotted), 314},
    {sipName_BorderStyle_Double, static_cast<int>( ::QTextFrameFormat::BorderStyle_Double), 314},
    {sipName_BorderStyle_Groove, static_cast<int>( ::QTextFrameFormat::BorderStyle_Groove), 314},
    {sipName_BorderStyle_Inset, static_cast<int>( ::QTextFrameFormat::BorderStyle_Inset), 314},
    {sipName_BorderStyle_None, static_cast<int>( ::QTextFrameFormat::BorderStyle_None), 314},
    {sipName_BorderStyle_Outset, static_cast<int>( ::QTextFrameFormat::BorderStyle_Outset), 314},
    {sipName_BorderStyle_Ridge, static_cast<int>( ::QTextFrameFormat::BorderStyle_Ridge), 314},
    {sipName_BorderStyle_Solid, static_cast<int>( ::QTextFrameFormat::BorderStyle_Solid), 314},
    {sipName_FloatLeft, static_cast<int>( ::QTextFrameFormat::FloatLeft), 315},
    {sipName_FloatRight, static_cast<int>( ::QTextFrameFormat::FloatRight), 315},
    {sipName_InFlow, static_cast<int>( ::QTextFrameFormat::InFlow), 315},
};

PyDoc_STRVAR(doc_QTextFrameFormat, "\1QTextFrameFormat()\n"
"QTextFrameFormat(QTextFrameFormat)");


static pyqt5ClassPluginDef plugin_QTextFrameFormat = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextFrameFormat = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextFrameFormat,
        {SIP_NULLPTR},
        &plugin_QTextFrameFormat
    },
    {
        sipNameNr_QTextFrameFormat,
        {0, 0, 1},
        27, methods_QTextFrameFormat,
        14, enummembers_QTextFrameFormat,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextFrameFormat,
    -1,
    -1,
    supers_QTextFrameFormat,
    SIP_NULLPTR,
    init_type_QTextFrameFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextFrameFormat,
    assign_QTextFrameFormat,
    array_QTextFrameFormat,
    copy_QTextFrameFormat,
    release_QTextFrameFormat,
    cast_QTextFrameFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 441 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 39102 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 39109 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 39112 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 255 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 39115 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpen.sip"
#include <qpen.h>
#line 39118 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 39121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 39124 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 553 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 39127 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 39130 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 39133 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 464 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 39136 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 527 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 39139 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 409 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 39142 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 358 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 39145 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 146 "sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 39148 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 39151 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 39154 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 39157 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QTextImageFormat_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QTextImageFormat_isValid(PyObject *, PyObject *);}
static PyObject *meth_QTextImageFormat_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextImageFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextImageFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextImageFormat, sipName_isValid, doc_QTextImageFormat_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextImageFormat_name, "name(self) -> str");

extern "C" {static PyObject *meth_QTextImageFormat_name(PyObject *, PyObject *);}
static PyObject *meth_QTextImageFormat_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextImageFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextImageFormat, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextImageFormat, sipName_name, doc_QTextImageFormat_name);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextImageFormat_width, "width(self) -> float");

extern "C" {static PyObject *meth_QTextImageFormat_width(PyObject *, PyObject *);}
static PyObject *meth_QTextImageFormat_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextImageFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextImageFormat, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->width();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextImageFormat, sipName_width, doc_QTextImageFormat_width);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextImageFormat_height, "height(self) -> float");

extern "C" {static PyObject *meth_QTextImageFormat_height(PyObject *, PyObject *);}
static PyObject *meth_QTextImageFormat_height(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextImageFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextImageFormat, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->height();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextImageFormat, sipName_height, doc_QTextImageFormat_height);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextImageFormat_quality, "quality(self) -> int");

extern "C" {static PyObject *meth_QTextImageFormat_quality(PyObject *, PyObject *);}
static PyObject *meth_QTextImageFormat_quality(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextImageFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextImageFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->quality();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextImageFormat, sipName_quality, doc_QTextImageFormat_quality);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextImageFormat_setName, "setName(self, str)");

extern "C" {static PyObject *meth_QTextImageFormat_setName(PyObject *, PyObject *);}
static PyObject *meth_QTextImageFormat_setName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextImageFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextImageFormat, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextImageFormat, sipName_setName, doc_QTextImageFormat_setName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextImageFormat_setWidth, "setWidth(self, float)");

extern "C" {static PyObject *meth_QTextImageFormat_setWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextImageFormat_setWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextImageFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextImageFormat, &sipCpp, &a0))
        {
            sipCpp->setWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextImageFormat, sipName_setWidth, doc_QTextImageFormat_setWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextImageFormat_setHeight, "setHeight(self, float)");

extern "C" {static PyObject *meth_QTextImageFormat_setHeight(PyObject *, PyObject *);}
static PyObject *meth_QTextImageFormat_setHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextImageFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextImageFormat, &sipCpp, &a0))
        {
            sipCpp->setHeight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextImageFormat, sipName_setHeight, doc_QTextImageFormat_setHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextImageFormat_setQuality, "setQuality(self, quality: int = 100)");

extern "C" {static PyObject *meth_QTextImageFormat_setQuality(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextImageFormat_setQuality(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 100;
         ::QTextImageFormat *sipCpp;

        static const char *sipKwdList[] = {
            sipName_quality,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QTextImageFormat, &sipCpp, &a0))
        {
            sipCpp->setQuality(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextImageFormat, sipName_setQuality, doc_QTextImageFormat_setQuality);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QTextImageFormat(void *, const sipTypeDef *);}
static void *cast_QTextImageFormat(void *sipCppV, const sipTypeDef *targetType)
{
     ::QTextImageFormat *sipCpp = reinterpret_cast< ::QTextImageFormat *>(sipCppV);

    if (targetType == sipType_QTextCharFormat)
        return static_cast< ::QTextCharFormat *>(sipCpp);

    if (targetType == sipType_QTextFormat)
        return static_cast< ::QTextFormat *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextImageFormat(void *, int);}
static void release_QTextImageFormat(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextImageFormat *>(sipCppV);
}


extern "C" {static void assign_QTextImageFormat(void *, SIP_SSIZE_T, void *);}
static void assign_QTextImageFormat(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTextImageFormat *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTextImageFormat *>(sipSrc);
}


extern "C" {static void *array_QTextImageFormat(SIP_SSIZE_T);}
static void *array_QTextImageFormat(SIP_SSIZE_T sipNrElem)
{
    return new  ::QTextImageFormat[sipNrElem];
}


extern "C" {static void *copy_QTextImageFormat(const void *, SIP_SSIZE_T);}
static void *copy_QTextImageFormat(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QTextImageFormat(reinterpret_cast<const  ::QTextImageFormat *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextImageFormat(sipSimpleWrapper *);}
static void dealloc_QTextImageFormat(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextImageFormat(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextImageFormat(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextImageFormat(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextImageFormat *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTextImageFormat();

            return sipCpp;
        }
    }

    {
        const  ::QTextImageFormat* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTextImageFormat, &a0))
        {
            sipCpp = new  ::QTextImageFormat(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTextImageFormat[] = {{288, 255, 1}};


static PyMethodDef methods_QTextImageFormat[] = {
    {SIP_MLNAME_CAST(sipName_height), meth_QTextImageFormat_height, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextImageFormat_height)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QTextImageFormat_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextImageFormat_isValid)},
    {SIP_MLNAME_CAST(sipName_name), meth_QTextImageFormat_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextImageFormat_name)},
    {SIP_MLNAME_CAST(sipName_quality), meth_QTextImageFormat_quality, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextImageFormat_quality)},
    {SIP_MLNAME_CAST(sipName_setHeight), meth_QTextImageFormat_setHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextImageFormat_setHeight)},
    {SIP_MLNAME_CAST(sipName_setName), meth_QTextImageFormat_setName, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextImageFormat_setName)},
    {SIP_MLNAME_CAST(sipName_setQuality), SIP_MLMETH_CAST(meth_QTextImageFormat_setQuality), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextImageFormat_setQuality)},
    {SIP_MLNAME_CAST(sipName_setWidth), meth_QTextImageFormat_setWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextImageFormat_setWidth)},
    {SIP_MLNAME_CAST(sipName_width), meth_QTextImageFormat_width, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextImageFormat_width)}
};

PyDoc_STRVAR(doc_QTextImageFormat, "\1QTextImageFormat()\n"
"QTextImageFormat(QTextImageFormat)");


static pyqt5ClassPluginDef plugin_QTextImageFormat = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextImageFormat = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextImageFormat,
        {SIP_NULLPTR},
        &plugin_QTextImageFormat
    },
    {
        sipNameNr_QTextImageFormat,
        {0, 0, 1},
        9, methods_QTextImageFormat,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextImageFormat,
    -1,
    -1,
    supers_QTextImageFormat,
    SIP_NULLPTR,
    init_type_QTextImageFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextImageFormat,
    assign_QTextImageFormat,
    array_QTextImageFormat,
    copy_QTextImageFormat,
    release_QTextImageFormat,
    cast_QTextImageFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 409 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 39583 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39587 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 39590 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 553 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 39593 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 39596 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 39599 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 441 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 39602 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 464 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 39605 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 527 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 39608 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 255 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 39611 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 358 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 39614 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 146 "sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 39617 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 39620 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 39623 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 39626 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpen.sip"
#include <qpen.h>
#line 39629 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 39632 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QTextListFormat_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QTextListFormat_isValid(PyObject *, PyObject *);}
static PyObject *meth_QTextListFormat_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextListFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextListFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextListFormat, sipName_isValid, doc_QTextListFormat_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextListFormat_style, "style(self) -> QTextListFormat.Style");

extern "C" {static PyObject *meth_QTextListFormat_style(PyObject *, PyObject *);}
static PyObject *meth_QTextListFormat_style(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextListFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextListFormat, &sipCpp))
        {
             ::QTextListFormat::Style sipRes;

            sipRes = sipCpp->style();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QTextListFormat_Style);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextListFormat, sipName_style, doc_QTextListFormat_style);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextListFormat_indent, "indent(self) -> int");

extern "C" {static PyObject *meth_QTextListFormat_indent(PyObject *, PyObject *);}
static PyObject *meth_QTextListFormat_indent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextListFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextListFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->indent();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextListFormat, sipName_indent, doc_QTextListFormat_indent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextListFormat_setStyle, "setStyle(self, QTextListFormat.Style)");

extern "C" {static PyObject *meth_QTextListFormat_setStyle(PyObject *, PyObject *);}
static PyObject *meth_QTextListFormat_setStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextListFormat::Style a0;
         ::QTextListFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextListFormat, &sipCpp, sipType_QTextListFormat_Style, &a0))
        {
            sipCpp->setStyle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextListFormat, sipName_setStyle, doc_QTextListFormat_setStyle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextListFormat_setIndent, "setIndent(self, int)");

extern "C" {static PyObject *meth_QTextListFormat_setIndent(PyObject *, PyObject *);}
static PyObject *meth_QTextListFormat_setIndent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextListFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextListFormat, &sipCpp, &a0))
        {
            sipCpp->setIndent(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextListFormat, sipName_setIndent, doc_QTextListFormat_setIndent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextListFormat_numberPrefix, "numberPrefix(self) -> str");

extern "C" {static PyObject *meth_QTextListFormat_numberPrefix(PyObject *, PyObject *);}
static PyObject *meth_QTextListFormat_numberPrefix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextListFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextListFormat, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->numberPrefix());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextListFormat, sipName_numberPrefix, doc_QTextListFormat_numberPrefix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextListFormat_numberSuffix, "numberSuffix(self) -> str");

extern "C" {static PyObject *meth_QTextListFormat_numberSuffix(PyObject *, PyObject *);}
static PyObject *meth_QTextListFormat_numberSuffix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextListFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextListFormat, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->numberSuffix());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextListFormat, sipName_numberSuffix, doc_QTextListFormat_numberSuffix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextListFormat_setNumberPrefix, "setNumberPrefix(self, str)");

extern "C" {static PyObject *meth_QTextListFormat_setNumberPrefix(PyObject *, PyObject *);}
static PyObject *meth_QTextListFormat_setNumberPrefix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextListFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextListFormat, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setNumberPrefix(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextListFormat, sipName_setNumberPrefix, doc_QTextListFormat_setNumberPrefix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextListFormat_setNumberSuffix, "setNumberSuffix(self, str)");

extern "C" {static PyObject *meth_QTextListFormat_setNumberSuffix(PyObject *, PyObject *);}
static PyObject *meth_QTextListFormat_setNumberSuffix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextListFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextListFormat, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setNumberSuffix(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextListFormat, sipName_setNumberSuffix, doc_QTextListFormat_setNumberSuffix);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QTextListFormat(void *, const sipTypeDef *);}
static void *cast_QTextListFormat(void *sipCppV, const sipTypeDef *targetType)
{
     ::QTextListFormat *sipCpp = reinterpret_cast< ::QTextListFormat *>(sipCppV);

    if (targetType == sipType_QTextFormat)
        return static_cast< ::QTextFormat *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextListFormat(void *, int);}
static void release_QTextListFormat(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextListFormat *>(sipCppV);
}


extern "C" {static void assign_QTextListFormat(void *, SIP_SSIZE_T, void *);}
static void assign_QTextListFormat(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTextListFormat *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTextListFormat *>(sipSrc);
}


extern "C" {static void *array_QTextListFormat(SIP_SSIZE_T);}
static void *array_QTextListFormat(SIP_SSIZE_T sipNrElem)
{
    return new  ::QTextListFormat[sipNrElem];
}


extern "C" {static void *copy_QTextListFormat(const void *, SIP_SSIZE_T);}
static void *copy_QTextListFormat(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QTextListFormat(reinterpret_cast<const  ::QTextListFormat *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextListFormat(sipSimpleWrapper *);}
static void dealloc_QTextListFormat(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextListFormat(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextListFormat(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextListFormat(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextListFormat *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTextListFormat();

            return sipCpp;
        }
    }

    {
        const  ::QTextListFormat* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTextListFormat, &a0))
        {
            sipCpp = new  ::QTextListFormat(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTextListFormat[] = {{304, 255, 1}};


static PyMethodDef methods_QTextListFormat[] = {
    {SIP_MLNAME_CAST(sipName_indent), meth_QTextListFormat_indent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextListFormat_indent)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QTextListFormat_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextListFormat_isValid)},
    {SIP_MLNAME_CAST(sipName_numberPrefix), meth_QTextListFormat_numberPrefix, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextListFormat_numberPrefix)},
    {SIP_MLNAME_CAST(sipName_numberSuffix), meth_QTextListFormat_numberSuffix, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextListFormat_numberSuffix)},
    {SIP_MLNAME_CAST(sipName_setIndent), meth_QTextListFormat_setIndent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextListFormat_setIndent)},
    {SIP_MLNAME_CAST(sipName_setNumberPrefix), meth_QTextListFormat_setNumberPrefix, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextListFormat_setNumberPrefix)},
    {SIP_MLNAME_CAST(sipName_setNumberSuffix), meth_QTextListFormat_setNumberSuffix, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextListFormat_setNumberSuffix)},
    {SIP_MLNAME_CAST(sipName_setStyle), meth_QTextListFormat_setStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextListFormat_setStyle)},
    {SIP_MLNAME_CAST(sipName_style), meth_QTextListFormat_style, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextListFormat_style)}
};

static sipEnumMemberDef enummembers_QTextListFormat[] = {
    {sipName_ListCircle, static_cast<int>( ::QTextListFormat::ListCircle), 331},
    {sipName_ListDecimal, static_cast<int>( ::QTextListFormat::ListDecimal), 331},
    {sipName_ListDisc, static_cast<int>( ::QTextListFormat::ListDisc), 331},
    {sipName_ListLowerAlpha, static_cast<int>( ::QTextListFormat::ListLowerAlpha), 331},
    {sipName_ListLowerRoman, static_cast<int>( ::QTextListFormat::ListLowerRoman), 331},
    {sipName_ListSquare, static_cast<int>( ::QTextListFormat::ListSquare), 331},
    {sipName_ListUpperAlpha, static_cast<int>( ::QTextListFormat::ListUpperAlpha), 331},
    {sipName_ListUpperRoman, static_cast<int>( ::QTextListFormat::ListUpperRoman), 331},
};

PyDoc_STRVAR(doc_QTextListFormat, "\1QTextListFormat()\n"
"QTextListFormat(QTextListFormat)");


static pyqt5ClassPluginDef plugin_QTextListFormat = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextListFormat = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextListFormat,
        {SIP_NULLPTR},
        &plugin_QTextListFormat
    },
    {
        sipNameNr_QTextListFormat,
        {0, 0, 1},
        9, methods_QTextListFormat,
        8, enummembers_QTextListFormat,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextListFormat,
    -1,
    -1,
    supers_QTextListFormat,
    SIP_NULLPTR,
    init_type_QTextListFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextListFormat,
    assign_QTextListFormat,
    array_QTextListFormat,
    copy_QTextListFormat,
    release_QTextListFormat,
    cast_QTextListFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 358 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 40064 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 40068 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 84 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 40073 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 40076 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 40079 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 40082 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 553 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 40085 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 40088 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 40091 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 441 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 40094 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 464 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 40097 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 527 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 40100 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 409 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 40103 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 255 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 40106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 146 "sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 40109 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 40112 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 40115 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 40118 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpen.sip"
#include <qpen.h>
#line 40121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 40124 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 40127 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QTextBlockFormat_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QTextBlockFormat_isValid(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_isValid, doc_QTextBlockFormat_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_alignment, "alignment(self) -> Qt.Alignment");

extern "C" {static PyObject *meth_QTextBlockFormat_alignment(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_alignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
             ::Qt::Alignment*sipRes;

            sipRes = new  ::Qt::Alignment(sipCpp->alignment());

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_alignment, doc_QTextBlockFormat_alignment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_setTopMargin, "setTopMargin(self, float)");

extern "C" {static PyObject *meth_QTextBlockFormat_setTopMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setTopMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextBlockFormat, &sipCpp, &a0))
        {
            sipCpp->setTopMargin(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setTopMargin, doc_QTextBlockFormat_setTopMargin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_topMargin, "topMargin(self) -> float");

extern "C" {static PyObject *meth_QTextBlockFormat_topMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_topMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->topMargin();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_topMargin, doc_QTextBlockFormat_topMargin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_setBottomMargin, "setBottomMargin(self, float)");

extern "C" {static PyObject *meth_QTextBlockFormat_setBottomMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setBottomMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextBlockFormat, &sipCpp, &a0))
        {
            sipCpp->setBottomMargin(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setBottomMargin, doc_QTextBlockFormat_setBottomMargin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_bottomMargin, "bottomMargin(self) -> float");

extern "C" {static PyObject *meth_QTextBlockFormat_bottomMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_bottomMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->bottomMargin();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_bottomMargin, doc_QTextBlockFormat_bottomMargin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_setLeftMargin, "setLeftMargin(self, float)");

extern "C" {static PyObject *meth_QTextBlockFormat_setLeftMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setLeftMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextBlockFormat, &sipCpp, &a0))
        {
            sipCpp->setLeftMargin(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setLeftMargin, doc_QTextBlockFormat_setLeftMargin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_leftMargin, "leftMargin(self) -> float");

extern "C" {static PyObject *meth_QTextBlockFormat_leftMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_leftMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->leftMargin();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_leftMargin, doc_QTextBlockFormat_leftMargin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_setRightMargin, "setRightMargin(self, float)");

extern "C" {static PyObject *meth_QTextBlockFormat_setRightMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setRightMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextBlockFormat, &sipCpp, &a0))
        {
            sipCpp->setRightMargin(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setRightMargin, doc_QTextBlockFormat_setRightMargin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_rightMargin, "rightMargin(self) -> float");

extern "C" {static PyObject *meth_QTextBlockFormat_rightMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_rightMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->rightMargin();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_rightMargin, doc_QTextBlockFormat_rightMargin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_setTextIndent, "setTextIndent(self, float)");

extern "C" {static PyObject *meth_QTextBlockFormat_setTextIndent(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setTextIndent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextBlockFormat, &sipCpp, &a0))
        {
            sipCpp->setTextIndent(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setTextIndent, doc_QTextBlockFormat_setTextIndent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_textIndent, "textIndent(self) -> float");

extern "C" {static PyObject *meth_QTextBlockFormat_textIndent(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_textIndent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->textIndent();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_textIndent, doc_QTextBlockFormat_textIndent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_indent, "indent(self) -> int");

extern "C" {static PyObject *meth_QTextBlockFormat_indent(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_indent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->indent();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_indent, doc_QTextBlockFormat_indent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_setNonBreakableLines, "setNonBreakableLines(self, bool)");

extern "C" {static PyObject *meth_QTextBlockFormat_setNonBreakableLines(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setNonBreakableLines(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextBlockFormat, &sipCpp, &a0))
        {
            sipCpp->setNonBreakableLines(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setNonBreakableLines, doc_QTextBlockFormat_setNonBreakableLines);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_nonBreakableLines, "nonBreakableLines(self) -> bool");

extern "C" {static PyObject *meth_QTextBlockFormat_nonBreakableLines(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_nonBreakableLines(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->nonBreakableLines();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_nonBreakableLines, doc_QTextBlockFormat_nonBreakableLines);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_setAlignment, "setAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag])");

extern "C" {static PyObject *meth_QTextBlockFormat_setAlignment(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::Alignment* a0;
        int a0State = 0;
         ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextBlockFormat, &sipCpp, sipType_Qt_Alignment, &a0, &a0State))
        {
            sipCpp->setAlignment(*a0);
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setAlignment, doc_QTextBlockFormat_setAlignment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_setIndent, "setIndent(self, int)");

extern "C" {static PyObject *meth_QTextBlockFormat_setIndent(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setIndent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextBlockFormat, &sipCpp, &a0))
        {
            sipCpp->setIndent(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setIndent, doc_QTextBlockFormat_setIndent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_setPageBreakPolicy, "setPageBreakPolicy(self, Union[QTextFormat.PageBreakFlags, QTextFormat.PageBreakFlag])");

extern "C" {static PyObject *meth_QTextBlockFormat_setPageBreakPolicy(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setPageBreakPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextFormat::PageBreakFlags* a0;
        int a0State = 0;
         ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextBlockFormat, &sipCpp, sipType_QTextFormat_PageBreakFlags, &a0, &a0State))
        {
            sipCpp->setPageBreakPolicy(*a0);
            sipReleaseType(a0,sipType_QTextFormat_PageBreakFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setPageBreakPolicy, doc_QTextBlockFormat_setPageBreakPolicy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_pageBreakPolicy, "pageBreakPolicy(self) -> QTextFormat.PageBreakFlags");

extern "C" {static PyObject *meth_QTextBlockFormat_pageBreakPolicy(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_pageBreakPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
             ::QTextFormat::PageBreakFlags*sipRes;

            sipRes = new  ::QTextFormat::PageBreakFlags(sipCpp->pageBreakPolicy());

            return sipConvertFromNewType(sipRes,sipType_QTextFormat_PageBreakFlags,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_pageBreakPolicy, doc_QTextBlockFormat_pageBreakPolicy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_setTabPositions, "setTabPositions(self, Iterable[QTextOption.Tab])");

extern "C" {static PyObject *meth_QTextBlockFormat_setTabPositions(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setTabPositions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QList< ::QTextOption::Tab>* a0;
        int a0State = 0;
         ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextBlockFormat, &sipCpp, sipType_QList_0100QTextOption_Tab,&a0, &a0State))
        {
            sipCpp->setTabPositions(*a0);
            sipReleaseType(const_cast<QList< ::QTextOption::Tab> *>(a0),sipType_QList_0100QTextOption_Tab,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setTabPositions, doc_QTextBlockFormat_setTabPositions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_tabPositions, "tabPositions(self) -> List[QTextOption.Tab]");

extern "C" {static PyObject *meth_QTextBlockFormat_tabPositions(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_tabPositions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
            QList< ::QTextOption::Tab>*sipRes;

            sipRes = new QList< ::QTextOption::Tab>(sipCpp->tabPositions());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QTextOption_Tab,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_tabPositions, doc_QTextBlockFormat_tabPositions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_setLineHeight, "setLineHeight(self, float, int)");

extern "C" {static PyObject *meth_QTextBlockFormat_setLineHeight(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setLineHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
        int a1;
         ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdi", &sipSelf, sipType_QTextBlockFormat, &sipCpp, &a0, &a1))
        {
            sipCpp->setLineHeight(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setLineHeight, doc_QTextBlockFormat_setLineHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_lineHeight, "lineHeight(self) -> float\n"
"lineHeight(self, float, scaling: float = 1) -> float");

extern "C" {static PyObject *meth_QTextBlockFormat_lineHeight(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_lineHeight(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlockFormat *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->lineHeight();

            return PyFloat_FromDouble(sipRes);
        }
    }

    {
         ::qreal a0;
         ::qreal a1 = 1;
        const  ::QTextBlockFormat *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_scaling,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bd|d", &sipSelf, sipType_QTextBlockFormat, &sipCpp, &a0, &a1))
        {
             ::qreal sipRes;

            sipRes = sipCpp->lineHeight(a0,a1);

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_lineHeight, doc_QTextBlockFormat_lineHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_lineHeightType, "lineHeightType(self) -> int");

extern "C" {static PyObject *meth_QTextBlockFormat_lineHeightType(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_lineHeightType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->lineHeightType();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_lineHeightType, doc_QTextBlockFormat_lineHeightType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_setHeadingLevel, "setHeadingLevel(self, int)");

extern "C" {static PyObject *meth_QTextBlockFormat_setHeadingLevel(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setHeadingLevel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextBlockFormat, &sipCpp, &a0))
        {
            sipCpp->setHeadingLevel(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setHeadingLevel, doc_QTextBlockFormat_setHeadingLevel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBlockFormat_headingLevel, "headingLevel(self) -> int");

extern "C" {static PyObject *meth_QTextBlockFormat_headingLevel(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_headingLevel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->headingLevel();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_headingLevel, doc_QTextBlockFormat_headingLevel);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QTextBlockFormat(void *, const sipTypeDef *);}
static void *cast_QTextBlockFormat(void *sipCppV, const sipTypeDef *targetType)
{
     ::QTextBlockFormat *sipCpp = reinterpret_cast< ::QTextBlockFormat *>(sipCppV);

    if (targetType == sipType_QTextFormat)
        return static_cast< ::QTextFormat *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextBlockFormat(void *, int);}
static void release_QTextBlockFormat(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextBlockFormat *>(sipCppV);
}


extern "C" {static void assign_QTextBlockFormat(void *, SIP_SSIZE_T, void *);}
static void assign_QTextBlockFormat(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTextBlockFormat *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTextBlockFormat *>(sipSrc);
}


extern "C" {static void *array_QTextBlockFormat(SIP_SSIZE_T);}
static void *array_QTextBlockFormat(SIP_SSIZE_T sipNrElem)
{
    return new  ::QTextBlockFormat[sipNrElem];
}


extern "C" {static void *copy_QTextBlockFormat(const void *, SIP_SSIZE_T);}
static void *copy_QTextBlockFormat(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QTextBlockFormat(reinterpret_cast<const  ::QTextBlockFormat *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextBlockFormat(sipSimpleWrapper *);}
static void dealloc_QTextBlockFormat(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextBlockFormat(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextBlockFormat(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextBlockFormat(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextBlockFormat *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTextBlockFormat();

            return sipCpp;
        }
    }

    {
        const  ::QTextBlockFormat* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTextBlockFormat, &a0))
        {
            sipCpp = new  ::QTextBlockFormat(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTextBlockFormat[] = {{304, 255, 1}};


static PyMethodDef methods_QTextBlockFormat[] = {
    {SIP_MLNAME_CAST(sipName_alignment), meth_QTextBlockFormat_alignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_alignment)},
    {SIP_MLNAME_CAST(sipName_bottomMargin), meth_QTextBlockFormat_bottomMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_bottomMargin)},
    {SIP_MLNAME_CAST(sipName_headingLevel), meth_QTextBlockFormat_headingLevel, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_headingLevel)},
    {SIP_MLNAME_CAST(sipName_indent), meth_QTextBlockFormat_indent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_indent)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QTextBlockFormat_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_isValid)},
    {SIP_MLNAME_CAST(sipName_leftMargin), meth_QTextBlockFormat_leftMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_leftMargin)},
    {SIP_MLNAME_CAST(sipName_lineHeight), SIP_MLMETH_CAST(meth_QTextBlockFormat_lineHeight), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextBlockFormat_lineHeight)},
    {SIP_MLNAME_CAST(sipName_lineHeightType), meth_QTextBlockFormat_lineHeightType, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_lineHeightType)},
    {SIP_MLNAME_CAST(sipName_nonBreakableLines), meth_QTextBlockFormat_nonBreakableLines, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_nonBreakableLines)},
    {SIP_MLNAME_CAST(sipName_pageBreakPolicy), meth_QTextBlockFormat_pageBreakPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_pageBreakPolicy)},
    {SIP_MLNAME_CAST(sipName_rightMargin), meth_QTextBlockFormat_rightMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_rightMargin)},
    {SIP_MLNAME_CAST(sipName_setAlignment), meth_QTextBlockFormat_setAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_setAlignment)},
    {SIP_MLNAME_CAST(sipName_setBottomMargin), meth_QTextBlockFormat_setBottomMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_setBottomMargin)},
    {SIP_MLNAME_CAST(sipName_setHeadingLevel), meth_QTextBlockFormat_setHeadingLevel, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_setHeadingLevel)},
    {SIP_MLNAME_CAST(sipName_setIndent), meth_QTextBlockFormat_setIndent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_setIndent)},
    {SIP_MLNAME_CAST(sipName_setLeftMargin), meth_QTextBlockFormat_setLeftMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_setLeftMargin)},
    {SIP_MLNAME_CAST(sipName_setLineHeight), meth_QTextBlockFormat_setLineHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_setLineHeight)},
    {SIP_MLNAME_CAST(sipName_setNonBreakableLines), meth_QTextBlockFormat_setNonBreakableLines, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_setNonBreakableLines)},
    {SIP_MLNAME_CAST(sipName_setPageBreakPolicy), meth_QTextBlockFormat_setPageBreakPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_setPageBreakPolicy)},
    {SIP_MLNAME_CAST(sipName_setRightMargin), meth_QTextBlockFormat_setRightMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_setRightMargin)},
    {SIP_MLNAME_CAST(sipName_setTabPositions), meth_QTextBlockFormat_setTabPositions, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_setTabPositions)},
    {SIP_MLNAME_CAST(sipName_setTextIndent), meth_QTextBlockFormat_setTextIndent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_setTextIndent)},
    {SIP_MLNAME_CAST(sipName_setTopMargin), meth_QTextBlockFormat_setTopMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_setTopMargin)},
    {SIP_MLNAME_CAST(sipName_tabPositions), meth_QTextBlockFormat_tabPositions, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_tabPositions)},
    {SIP_MLNAME_CAST(sipName_textIndent), meth_QTextBlockFormat_textIndent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_textIndent)},
    {SIP_MLNAME_CAST(sipName_topMargin), meth_QTextBlockFormat_topMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBlockFormat_topMargin)}
};

static sipEnumMemberDef enummembers_QTextBlockFormat[] = {
    {sipName_FixedHeight, static_cast<int>( ::QTextBlockFormat::FixedHeight), 285},
    {sipName_LineDistanceHeight, static_cast<int>( ::QTextBlockFormat::LineDistanceHeight), 285},
    {sipName_MinimumHeight, static_cast<int>( ::QTextBlockFormat::MinimumHeight), 285},
    {sipName_ProportionalHeight, static_cast<int>( ::QTextBlockFormat::ProportionalHeight), 285},
    {sipName_SingleHeight, static_cast<int>( ::QTextBlockFormat::SingleHeight), 285},
};

PyDoc_STRVAR(doc_QTextBlockFormat, "\1QTextBlockFormat()\n"
"QTextBlockFormat(QTextBlockFormat)");


static pyqt5ClassPluginDef plugin_QTextBlockFormat = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextBlockFormat = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextBlockFormat,
        {SIP_NULLPTR},
        &plugin_QTextBlockFormat
    },
    {
        sipNameNr_QTextBlockFormat,
        {0, 0, 1},
        26, methods_QTextBlockFormat,
        5, enummembers_QTextBlockFormat,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextBlockFormat,
    -1,
    -1,
    supers_QTextBlockFormat,
    SIP_NULLPTR,
    init_type_QTextBlockFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextBlockFormat,
    assign_QTextBlockFormat,
    array_QTextBlockFormat,
    copy_QTextBlockFormat,
    release_QTextBlockFormat,
    cast_QTextBlockFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 255 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 41074 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 41078 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 41081 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 41084 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpen.sip"
#include <qpen.h>
#line 41087 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 41090 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 41093 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 553 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 41096 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 41099 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 41102 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 441 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 41105 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 464 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 41108 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 527 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 41111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 409 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 41114 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 358 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 41117 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 146 "sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 41120 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 41123 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 41126 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 41129 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QTextCharFormat_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QTextCharFormat_isValid(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_isValid, doc_QTextCharFormat_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFont, "setFont(self, QFont)\n"
"setFont(self, QFont, QTextCharFormat.FontPropertiesInheritanceBehavior)");

extern "C" {static PyObject *meth_QTextCharFormat_setFont(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont* a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QFont, &a0))
        {
            sipCpp->setFont(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QFont* a0;
         ::QTextCharFormat::FontPropertiesInheritanceBehavior a1;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QFont, &a0, sipType_QTextCharFormat_FontPropertiesInheritanceBehavior, &a1))
        {
            sipCpp->setFont(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFont, doc_QTextCharFormat_setFont);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_font, "font(self) -> QFont");

extern "C" {static PyObject *meth_QTextCharFormat_font(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_font(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
             ::QFont*sipRes;

            sipRes = new  ::QFont(sipCpp->font());

            return sipConvertFromNewType(sipRes,sipType_QFont,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_font, doc_QTextCharFormat_font);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontFamily, "setFontFamily(self, str)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontFamily(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontFamily(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setFontFamily(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontFamily, doc_QTextCharFormat_setFontFamily);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontFamily, "fontFamily(self) -> str");

extern "C" {static PyObject *meth_QTextCharFormat_fontFamily(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontFamily(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->fontFamily());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontFamily, doc_QTextCharFormat_fontFamily);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontPointSize, "setFontPointSize(self, float)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontPointSize(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontPointSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setFontPointSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontPointSize, doc_QTextCharFormat_setFontPointSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontPointSize, "fontPointSize(self) -> float");

extern "C" {static PyObject *meth_QTextCharFormat_fontPointSize(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontPointSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->fontPointSize();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontPointSize, doc_QTextCharFormat_fontPointSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontWeight, "setFontWeight(self, int)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontWeight(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontWeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setFontWeight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontWeight, doc_QTextCharFormat_setFontWeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontWeight, "fontWeight(self) -> int");

extern "C" {static PyObject *meth_QTextCharFormat_fontWeight(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontWeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->fontWeight();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontWeight, doc_QTextCharFormat_fontWeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontItalic, "setFontItalic(self, bool)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontItalic(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontItalic(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setFontItalic(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontItalic, doc_QTextCharFormat_setFontItalic);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontItalic, "fontItalic(self) -> bool");

extern "C" {static PyObject *meth_QTextCharFormat_fontItalic(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontItalic(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->fontItalic();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontItalic, doc_QTextCharFormat_fontItalic);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontUnderline, "setFontUnderline(self, bool)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontUnderline(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontUnderline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setFontUnderline(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontUnderline, doc_QTextCharFormat_setFontUnderline);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontUnderline, "fontUnderline(self) -> bool");

extern "C" {static PyObject *meth_QTextCharFormat_fontUnderline(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontUnderline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->fontUnderline();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontUnderline, doc_QTextCharFormat_fontUnderline);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontOverline, "setFontOverline(self, bool)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontOverline(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontOverline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setFontOverline(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontOverline, doc_QTextCharFormat_setFontOverline);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontOverline, "fontOverline(self) -> bool");

extern "C" {static PyObject *meth_QTextCharFormat_fontOverline(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontOverline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->fontOverline();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontOverline, doc_QTextCharFormat_fontOverline);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontStrikeOut, "setFontStrikeOut(self, bool)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontStrikeOut(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontStrikeOut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setFontStrikeOut(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontStrikeOut, doc_QTextCharFormat_setFontStrikeOut);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontStrikeOut, "fontStrikeOut(self) -> bool");

extern "C" {static PyObject *meth_QTextCharFormat_fontStrikeOut(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontStrikeOut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->fontStrikeOut();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontStrikeOut, doc_QTextCharFormat_fontStrikeOut);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setUnderlineColor, "setUnderlineColor(self, Union[QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QTextCharFormat_setUnderlineColor(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setUnderlineColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor* a0;
        int a0State = 0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->setUnderlineColor(*a0);
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setUnderlineColor, doc_QTextCharFormat_setUnderlineColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_underlineColor, "underlineColor(self) -> QColor");

extern "C" {static PyObject *meth_QTextCharFormat_underlineColor(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_underlineColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor(sipCpp->underlineColor());

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_underlineColor, doc_QTextCharFormat_underlineColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontFixedPitch, "setFontFixedPitch(self, bool)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontFixedPitch(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontFixedPitch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setFontFixedPitch(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontFixedPitch, doc_QTextCharFormat_setFontFixedPitch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontFixedPitch, "fontFixedPitch(self) -> bool");

extern "C" {static PyObject *meth_QTextCharFormat_fontFixedPitch(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontFixedPitch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->fontFixedPitch();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontFixedPitch, doc_QTextCharFormat_fontFixedPitch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setVerticalAlignment, "setVerticalAlignment(self, QTextCharFormat.VerticalAlignment)");

extern "C" {static PyObject *meth_QTextCharFormat_setVerticalAlignment(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setVerticalAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextCharFormat::VerticalAlignment a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QTextCharFormat_VerticalAlignment, &a0))
        {
            sipCpp->setVerticalAlignment(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setVerticalAlignment, doc_QTextCharFormat_setVerticalAlignment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_verticalAlignment, "verticalAlignment(self) -> QTextCharFormat.VerticalAlignment");

extern "C" {static PyObject *meth_QTextCharFormat_verticalAlignment(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_verticalAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
             ::QTextCharFormat::VerticalAlignment sipRes;

            sipRes = sipCpp->verticalAlignment();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QTextCharFormat_VerticalAlignment);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_verticalAlignment, doc_QTextCharFormat_verticalAlignment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setAnchor, "setAnchor(self, bool)");

extern "C" {static PyObject *meth_QTextCharFormat_setAnchor(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setAnchor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setAnchor(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setAnchor, doc_QTextCharFormat_setAnchor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_isAnchor, "isAnchor(self) -> bool");

extern "C" {static PyObject *meth_QTextCharFormat_isAnchor(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_isAnchor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAnchor();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_isAnchor, doc_QTextCharFormat_isAnchor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setAnchorHref, "setAnchorHref(self, str)");

extern "C" {static PyObject *meth_QTextCharFormat_setAnchorHref(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setAnchorHref(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setAnchorHref(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setAnchorHref, doc_QTextCharFormat_setAnchorHref);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_anchorHref, "anchorHref(self) -> str");

extern "C" {static PyObject *meth_QTextCharFormat_anchorHref(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_anchorHref(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->anchorHref());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_anchorHref, doc_QTextCharFormat_anchorHref);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_tableCellRowSpan, "tableCellRowSpan(self) -> int");

extern "C" {static PyObject *meth_QTextCharFormat_tableCellRowSpan(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_tableCellRowSpan(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->tableCellRowSpan();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_tableCellRowSpan, doc_QTextCharFormat_tableCellRowSpan);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_tableCellColumnSpan, "tableCellColumnSpan(self) -> int");

extern "C" {static PyObject *meth_QTextCharFormat_tableCellColumnSpan(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_tableCellColumnSpan(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->tableCellColumnSpan();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_tableCellColumnSpan, doc_QTextCharFormat_tableCellColumnSpan);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setTableCellRowSpan, "setTableCellRowSpan(self, int)");

extern "C" {static PyObject *meth_QTextCharFormat_setTableCellRowSpan(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setTableCellRowSpan(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setTableCellRowSpan(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setTableCellRowSpan, doc_QTextCharFormat_setTableCellRowSpan);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setTableCellColumnSpan, "setTableCellColumnSpan(self, int)");

extern "C" {static PyObject *meth_QTextCharFormat_setTableCellColumnSpan(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setTableCellColumnSpan(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setTableCellColumnSpan(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setTableCellColumnSpan, doc_QTextCharFormat_setTableCellColumnSpan);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setTextOutline, "setTextOutline(self, Union[QPen, QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QTextCharFormat_setTextOutline(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setTextOutline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPen* a0;
        int a0State = 0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QPen, &a0, &a0State))
        {
            sipCpp->setTextOutline(*a0);
            sipReleaseType(const_cast< ::QPen *>(a0),sipType_QPen,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setTextOutline, doc_QTextCharFormat_setTextOutline);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_textOutline, "textOutline(self) -> QPen");

extern "C" {static PyObject *meth_QTextCharFormat_textOutline(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_textOutline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
             ::QPen*sipRes;

            sipRes = new  ::QPen(sipCpp->textOutline());

            return sipConvertFromNewType(sipRes,sipType_QPen,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_textOutline, doc_QTextCharFormat_textOutline);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setUnderlineStyle, "setUnderlineStyle(self, QTextCharFormat.UnderlineStyle)");

extern "C" {static PyObject *meth_QTextCharFormat_setUnderlineStyle(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setUnderlineStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextCharFormat::UnderlineStyle a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QTextCharFormat_UnderlineStyle, &a0))
        {
            sipCpp->setUnderlineStyle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setUnderlineStyle, doc_QTextCharFormat_setUnderlineStyle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_underlineStyle, "underlineStyle(self) -> QTextCharFormat.UnderlineStyle");

extern "C" {static PyObject *meth_QTextCharFormat_underlineStyle(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_underlineStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
             ::QTextCharFormat::UnderlineStyle sipRes;

            sipRes = sipCpp->underlineStyle();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QTextCharFormat_UnderlineStyle);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_underlineStyle, doc_QTextCharFormat_underlineStyle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setToolTip, "setToolTip(self, str)");

extern "C" {static PyObject *meth_QTextCharFormat_setToolTip(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setToolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setToolTip(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setToolTip, doc_QTextCharFormat_setToolTip);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_toolTip, "toolTip(self) -> str");

extern "C" {static PyObject *meth_QTextCharFormat_toolTip(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_toolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toolTip());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_toolTip, doc_QTextCharFormat_toolTip);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setAnchorNames, "setAnchorNames(self, Iterable[str])");

extern "C" {static PyObject *meth_QTextCharFormat_setAnchorNames(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setAnchorNames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            sipCpp->setAnchorNames(*a0);
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setAnchorNames, doc_QTextCharFormat_setAnchorNames);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_anchorNames, "anchorNames(self) -> List[str]");

extern "C" {static PyObject *meth_QTextCharFormat_anchorNames(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_anchorNames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->anchorNames());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_anchorNames, doc_QTextCharFormat_anchorNames);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontCapitalization, "setFontCapitalization(self, QFont.Capitalization)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontCapitalization(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontCapitalization(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFont::Capitalization a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QFont_Capitalization, &a0))
        {
            sipCpp->setFontCapitalization(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontCapitalization, doc_QTextCharFormat_setFontCapitalization);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontCapitalization, "fontCapitalization(self) -> QFont.Capitalization");

extern "C" {static PyObject *meth_QTextCharFormat_fontCapitalization(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontCapitalization(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
             ::QFont::Capitalization sipRes;

            sipRes = sipCpp->fontCapitalization();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QFont_Capitalization);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontCapitalization, doc_QTextCharFormat_fontCapitalization);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontLetterSpacing, "setFontLetterSpacing(self, float)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontLetterSpacing(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontLetterSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setFontLetterSpacing(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontLetterSpacing, doc_QTextCharFormat_setFontLetterSpacing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontLetterSpacing, "fontLetterSpacing(self) -> float");

extern "C" {static PyObject *meth_QTextCharFormat_fontLetterSpacing(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontLetterSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->fontLetterSpacing();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontLetterSpacing, doc_QTextCharFormat_fontLetterSpacing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontWordSpacing, "setFontWordSpacing(self, float)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontWordSpacing(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontWordSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setFontWordSpacing(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontWordSpacing, doc_QTextCharFormat_setFontWordSpacing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontWordSpacing, "fontWordSpacing(self) -> float");

extern "C" {static PyObject *meth_QTextCharFormat_fontWordSpacing(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontWordSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->fontWordSpacing();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontWordSpacing, doc_QTextCharFormat_fontWordSpacing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontStyleHint, "setFontStyleHint(self, QFont.StyleHint, strategy: QFont.StyleStrategy = QFont.PreferDefault)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontStyleHint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontStyleHint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFont::StyleHint a0;
         ::QFont::StyleStrategy a1 = QFont::PreferDefault;
         ::QTextCharFormat *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_strategy,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE|E", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QFont_StyleHint, &a0, sipType_QFont_StyleStrategy, &a1))
        {
            sipCpp->setFontStyleHint(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontStyleHint, doc_QTextCharFormat_setFontStyleHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontStyleStrategy, "setFontStyleStrategy(self, QFont.StyleStrategy)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontStyleStrategy(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontStyleStrategy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFont::StyleStrategy a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QFont_StyleStrategy, &a0))
        {
            sipCpp->setFontStyleStrategy(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontStyleStrategy, doc_QTextCharFormat_setFontStyleStrategy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontStyleHint, "fontStyleHint(self) -> QFont.StyleHint");

extern "C" {static PyObject *meth_QTextCharFormat_fontStyleHint(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontStyleHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
             ::QFont::StyleHint sipRes;

            sipRes = sipCpp->fontStyleHint();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QFont_StyleHint);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontStyleHint, doc_QTextCharFormat_fontStyleHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontStyleStrategy, "fontStyleStrategy(self) -> QFont.StyleStrategy");

extern "C" {static PyObject *meth_QTextCharFormat_fontStyleStrategy(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontStyleStrategy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
             ::QFont::StyleStrategy sipRes;

            sipRes = sipCpp->fontStyleStrategy();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QFont_StyleStrategy);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontStyleStrategy, doc_QTextCharFormat_fontStyleStrategy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontKerning, "setFontKerning(self, bool)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontKerning(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontKerning(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setFontKerning(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontKerning, doc_QTextCharFormat_setFontKerning);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontKerning, "fontKerning(self) -> bool");

extern "C" {static PyObject *meth_QTextCharFormat_fontKerning(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontKerning(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->fontKerning();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontKerning, doc_QTextCharFormat_fontKerning);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontHintingPreference, "setFontHintingPreference(self, QFont.HintingPreference)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontHintingPreference(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontHintingPreference(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFont::HintingPreference a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QFont_HintingPreference, &a0))
        {
            sipCpp->setFontHintingPreference(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontHintingPreference, doc_QTextCharFormat_setFontHintingPreference);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontHintingPreference, "fontHintingPreference(self) -> QFont.HintingPreference");

extern "C" {static PyObject *meth_QTextCharFormat_fontHintingPreference(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontHintingPreference(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
             ::QFont::HintingPreference sipRes;

            sipRes = sipCpp->fontHintingPreference();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QFont_HintingPreference);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontHintingPreference, doc_QTextCharFormat_fontHintingPreference);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontStretch, "fontStretch(self) -> int");

extern "C" {static PyObject *meth_QTextCharFormat_fontStretch(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontStretch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->fontStretch();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontStretch, doc_QTextCharFormat_fontStretch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontStretch, "setFontStretch(self, int)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontStretch(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontStretch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setFontStretch(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontStretch, doc_QTextCharFormat_setFontStretch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontLetterSpacingType, "setFontLetterSpacingType(self, QFont.SpacingType)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontLetterSpacingType(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontLetterSpacingType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFont::SpacingType a0;
         ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QFont_SpacingType, &a0))
        {
            sipCpp->setFontLetterSpacingType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontLetterSpacingType, doc_QTextCharFormat_setFontLetterSpacingType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontLetterSpacingType, "fontLetterSpacingType(self) -> QFont.SpacingType");

extern "C" {static PyObject *meth_QTextCharFormat_fontLetterSpacingType(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontLetterSpacingType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
             ::QFont::SpacingType sipRes;

            sipRes = sipCpp->fontLetterSpacingType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QFont_SpacingType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontLetterSpacingType, doc_QTextCharFormat_fontLetterSpacingType);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QTextCharFormat(void *, const sipTypeDef *);}
static void *cast_QTextCharFormat(void *sipCppV, const sipTypeDef *targetType)
{
     ::QTextCharFormat *sipCpp = reinterpret_cast< ::QTextCharFormat *>(sipCppV);

    if (targetType == sipType_QTextFormat)
        return static_cast< ::QTextFormat *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextCharFormat(void *, int);}
static void release_QTextCharFormat(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextCharFormat *>(sipCppV);
}


extern "C" {static void assign_QTextCharFormat(void *, SIP_SSIZE_T, void *);}
static void assign_QTextCharFormat(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTextCharFormat *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTextCharFormat *>(sipSrc);
}


extern "C" {static void *array_QTextCharFormat(SIP_SSIZE_T);}
static void *array_QTextCharFormat(SIP_SSIZE_T sipNrElem)
{
    return new  ::QTextCharFormat[sipNrElem];
}


extern "C" {static void *copy_QTextCharFormat(const void *, SIP_SSIZE_T);}
static void *copy_QTextCharFormat(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QTextCharFormat(reinterpret_cast<const  ::QTextCharFormat *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextCharFormat(sipSimpleWrapper *);}
static void dealloc_QTextCharFormat(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextCharFormat(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextCharFormat(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextCharFormat(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextCharFormat *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTextCharFormat();

            return sipCpp;
        }
    }

    {
        const  ::QTextCharFormat* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTextCharFormat, &a0))
        {
            sipCpp = new  ::QTextCharFormat(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTextCharFormat[] = {{304, 255, 1}};


static PyMethodDef methods_QTextCharFormat[] = {
    {SIP_MLNAME_CAST(sipName_anchorHref), meth_QTextCharFormat_anchorHref, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_anchorHref)},
    {SIP_MLNAME_CAST(sipName_anchorNames), meth_QTextCharFormat_anchorNames, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_anchorNames)},
    {SIP_MLNAME_CAST(sipName_font), meth_QTextCharFormat_font, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_font)},
    {SIP_MLNAME_CAST(sipName_fontCapitalization), meth_QTextCharFormat_fontCapitalization, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_fontCapitalization)},
    {SIP_MLNAME_CAST(sipName_fontFamily), meth_QTextCharFormat_fontFamily, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_fontFamily)},
    {SIP_MLNAME_CAST(sipName_fontFixedPitch), meth_QTextCharFormat_fontFixedPitch, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_fontFixedPitch)},
    {SIP_MLNAME_CAST(sipName_fontHintingPreference), meth_QTextCharFormat_fontHintingPreference, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_fontHintingPreference)},
    {SIP_MLNAME_CAST(sipName_fontItalic), meth_QTextCharFormat_fontItalic, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_fontItalic)},
    {SIP_MLNAME_CAST(sipName_fontKerning), meth_QTextCharFormat_fontKerning, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_fontKerning)},
    {SIP_MLNAME_CAST(sipName_fontLetterSpacing), meth_QTextCharFormat_fontLetterSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_fontLetterSpacing)},
    {SIP_MLNAME_CAST(sipName_fontLetterSpacingType), meth_QTextCharFormat_fontLetterSpacingType, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_fontLetterSpacingType)},
    {SIP_MLNAME_CAST(sipName_fontOverline), meth_QTextCharFormat_fontOverline, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_fontOverline)},
    {SIP_MLNAME_CAST(sipName_fontPointSize), meth_QTextCharFormat_fontPointSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_fontPointSize)},
    {SIP_MLNAME_CAST(sipName_fontStretch), meth_QTextCharFormat_fontStretch, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_fontStretch)},
    {SIP_MLNAME_CAST(sipName_fontStrikeOut), meth_QTextCharFormat_fontStrikeOut, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_fontStrikeOut)},
    {SIP_MLNAME_CAST(sipName_fontStyleHint), meth_QTextCharFormat_fontStyleHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_fontStyleHint)},
    {SIP_MLNAME_CAST(sipName_fontStyleStrategy), meth_QTextCharFormat_fontStyleStrategy, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_fontStyleStrategy)},
    {SIP_MLNAME_CAST(sipName_fontUnderline), meth_QTextCharFormat_fontUnderline, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_fontUnderline)},
    {SIP_MLNAME_CAST(sipName_fontWeight), meth_QTextCharFormat_fontWeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_fontWeight)},
    {SIP_MLNAME_CAST(sipName_fontWordSpacing), meth_QTextCharFormat_fontWordSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_fontWordSpacing)},
    {SIP_MLNAME_CAST(sipName_isAnchor), meth_QTextCharFormat_isAnchor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_isAnchor)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QTextCharFormat_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_isValid)},
    {SIP_MLNAME_CAST(sipName_setAnchor), meth_QTextCharFormat_setAnchor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setAnchor)},
    {SIP_MLNAME_CAST(sipName_setAnchorHref), meth_QTextCharFormat_setAnchorHref, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setAnchorHref)},
    {SIP_MLNAME_CAST(sipName_setAnchorNames), meth_QTextCharFormat_setAnchorNames, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setAnchorNames)},
    {SIP_MLNAME_CAST(sipName_setFont), meth_QTextCharFormat_setFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setFont)},
    {SIP_MLNAME_CAST(sipName_setFontCapitalization), meth_QTextCharFormat_setFontCapitalization, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setFontCapitalization)},
    {SIP_MLNAME_CAST(sipName_setFontFamily), meth_QTextCharFormat_setFontFamily, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setFontFamily)},
    {SIP_MLNAME_CAST(sipName_setFontFixedPitch), meth_QTextCharFormat_setFontFixedPitch, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setFontFixedPitch)},
    {SIP_MLNAME_CAST(sipName_setFontHintingPreference), meth_QTextCharFormat_setFontHintingPreference, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setFontHintingPreference)},
    {SIP_MLNAME_CAST(sipName_setFontItalic), meth_QTextCharFormat_setFontItalic, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setFontItalic)},
    {SIP_MLNAME_CAST(sipName_setFontKerning), meth_QTextCharFormat_setFontKerning, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setFontKerning)},
    {SIP_MLNAME_CAST(sipName_setFontLetterSpacing), meth_QTextCharFormat_setFontLetterSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setFontLetterSpacing)},
    {SIP_MLNAME_CAST(sipName_setFontLetterSpacingType), meth_QTextCharFormat_setFontLetterSpacingType, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setFontLetterSpacingType)},
    {SIP_MLNAME_CAST(sipName_setFontOverline), meth_QTextCharFormat_setFontOverline, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setFontOverline)},
    {SIP_MLNAME_CAST(sipName_setFontPointSize), meth_QTextCharFormat_setFontPointSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setFontPointSize)},
    {SIP_MLNAME_CAST(sipName_setFontStretch), meth_QTextCharFormat_setFontStretch, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setFontStretch)},
    {SIP_MLNAME_CAST(sipName_setFontStrikeOut), meth_QTextCharFormat_setFontStrikeOut, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setFontStrikeOut)},
    {SIP_MLNAME_CAST(sipName_setFontStyleHint), SIP_MLMETH_CAST(meth_QTextCharFormat_setFontStyleHint), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextCharFormat_setFontStyleHint)},
    {SIP_MLNAME_CAST(sipName_setFontStyleStrategy), meth_QTextCharFormat_setFontStyleStrategy, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setFontStyleStrategy)},
    {SIP_MLNAME_CAST(sipName_setFontUnderline), meth_QTextCharFormat_setFontUnderline, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setFontUnderline)},
    {SIP_MLNAME_CAST(sipName_setFontWeight), meth_QTextCharFormat_setFontWeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setFontWeight)},
    {SIP_MLNAME_CAST(sipName_setFontWordSpacing), meth_QTextCharFormat_setFontWordSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setFontWordSpacing)},
    {SIP_MLNAME_CAST(sipName_setTableCellColumnSpan), meth_QTextCharFormat_setTableCellColumnSpan, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setTableCellColumnSpan)},
    {SIP_MLNAME_CAST(sipName_setTableCellRowSpan), meth_QTextCharFormat_setTableCellRowSpan, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setTableCellRowSpan)},
    {SIP_MLNAME_CAST(sipName_setTextOutline), meth_QTextCharFormat_setTextOutline, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setTextOutline)},
    {SIP_MLNAME_CAST(sipName_setToolTip), meth_QTextCharFormat_setToolTip, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setToolTip)},
    {SIP_MLNAME_CAST(sipName_setUnderlineColor), meth_QTextCharFormat_setUnderlineColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setUnderlineColor)},
    {SIP_MLNAME_CAST(sipName_setUnderlineStyle), meth_QTextCharFormat_setUnderlineStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setUnderlineStyle)},
    {SIP_MLNAME_CAST(sipName_setVerticalAlignment), meth_QTextCharFormat_setVerticalAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setVerticalAlignment)},
    {SIP_MLNAME_CAST(sipName_tableCellColumnSpan), meth_QTextCharFormat_tableCellColumnSpan, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_tableCellColumnSpan)},
    {SIP_MLNAME_CAST(sipName_tableCellRowSpan), meth_QTextCharFormat_tableCellRowSpan, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_tableCellRowSpan)},
    {SIP_MLNAME_CAST(sipName_textOutline), meth_QTextCharFormat_textOutline, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_textOutline)},
    {SIP_MLNAME_CAST(sipName_toolTip), meth_QTextCharFormat_toolTip, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_toolTip)},
    {SIP_MLNAME_CAST(sipName_underlineColor), meth_QTextCharFormat_underlineColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_underlineColor)},
    {SIP_MLNAME_CAST(sipName_underlineStyle), meth_QTextCharFormat_underlineStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_underlineStyle)},
    {SIP_MLNAME_CAST(sipName_verticalAlignment), meth_QTextCharFormat_verticalAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_verticalAlignment)}
};

static sipEnumMemberDef enummembers_QTextCharFormat[] = {
    {sipName_AlignBaseline, static_cast<int>( ::QTextCharFormat::AlignBaseline), 291},
    {sipName_AlignBottom, static_cast<int>( ::QTextCharFormat::AlignBottom), 291},
    {sipName_AlignMiddle, static_cast<int>( ::QTextCharFormat::AlignMiddle), 291},
    {sipName_AlignNormal, static_cast<int>( ::QTextCharFormat::AlignNormal), 291},
    {sipName_AlignSubScript, static_cast<int>( ::QTextCharFormat::AlignSubScript), 291},
    {sipName_AlignSuperScript, static_cast<int>( ::QTextCharFormat::AlignSuperScript), 291},
    {sipName_AlignTop, static_cast<int>( ::QTextCharFormat::AlignTop), 291},
    {sipName_DashDotDotLine, static_cast<int>( ::QTextCharFormat::DashDotDotLine), 290},
    {sipName_DashDotLine, static_cast<int>( ::QTextCharFormat::DashDotLine), 290},
    {sipName_DashUnderline, static_cast<int>( ::QTextCharFormat::DashUnderline), 290},
    {sipName_DotLine, static_cast<int>( ::QTextCharFormat::DotLine), 290},
    {sipName_FontPropertiesAll, static_cast<int>( ::QTextCharFormat::FontPropertiesAll), 289},
    {sipName_FontPropertiesSpecifiedOnly, static_cast<int>( ::QTextCharFormat::FontPropertiesSpecifiedOnly), 289},
    {sipName_NoUnderline, static_cast<int>( ::QTextCharFormat::NoUnderline), 290},
    {sipName_SingleUnderline, static_cast<int>( ::QTextCharFormat::SingleUnderline), 290},
    {sipName_SpellCheckUnderline, static_cast<int>( ::QTextCharFormat::SpellCheckUnderline), 290},
    {sipName_WaveUnderline, static_cast<int>( ::QTextCharFormat::WaveUnderline), 290},
};

PyDoc_STRVAR(doc_QTextCharFormat, "\1QTextCharFormat()\n"
"QTextCharFormat(QTextCharFormat)");


static pyqt5ClassPluginDef plugin_QTextCharFormat = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextCharFormat = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextCharFormat,
        {SIP_NULLPTR},
        &plugin_QTextCharFormat
    },
    {
        sipNameNr_QTextCharFormat,
        {0, 0, 1},
        57, methods_QTextCharFormat,
        17, enummembers_QTextCharFormat,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextCharFormat,
    -1,
    -1,
    supers_QTextCharFormat,
    SIP_NULLPTR,
    init_type_QTextCharFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextCharFormat,
    assign_QTextCharFormat,
    array_QTextCharFormat,
    copy_QTextCharFormat,
    release_QTextCharFormat,
    cast_QTextCharFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 42992 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 42996 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static long slot_QTextFormat_PageBreakFlags___hash__(PyObject *);}
static long slot_QTextFormat_PageBreakFlags___hash__(PyObject *sipSelf)
{
     ::QTextFormat::PageBreakFlags *sipCpp = reinterpret_cast< ::QTextFormat::PageBreakFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextFormat_PageBreakFlags));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QTextFormat::PageBreakFlags::Int();
#line 43014 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QTextFormat_PageBreakFlags___bool__(PyObject *);}
static int slot_QTextFormat_PageBreakFlags___bool__(PyObject *sipSelf)
{
     ::QTextFormat::PageBreakFlags *sipCpp = reinterpret_cast< ::QTextFormat::PageBreakFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextFormat_PageBreakFlags));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QTextFormat::PageBreakFlags::Int() != 0);
#line 43039 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QTextFormat_PageBreakFlags___ne__(PyObject *,PyObject *);}
static PyObject *slot_QTextFormat_PageBreakFlags___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextFormat::PageBreakFlags *sipCpp = reinterpret_cast< ::QTextFormat::PageBreakFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextFormat_PageBreakFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat::PageBreakFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QTextFormat_PageBreakFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QTextFormat::PageBreakFlags::Int() != a0->operator QTextFormat::PageBreakFlags::Int());
#line 43069 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
            sipReleaseType(const_cast< ::QTextFormat::PageBreakFlags *>(a0),sipType_QTextFormat_PageBreakFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QTextFormat_PageBreakFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTextFormat_PageBreakFlags___eq__(PyObject *,PyObject *);}
static PyObject *slot_QTextFormat_PageBreakFlags___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextFormat::PageBreakFlags *sipCpp = reinterpret_cast< ::QTextFormat::PageBreakFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextFormat_PageBreakFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat::PageBreakFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QTextFormat_PageBreakFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QTextFormat::PageBreakFlags::Int() == a0->operator QTextFormat::PageBreakFlags::Int());
#line 43105 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
            sipReleaseType(const_cast< ::QTextFormat::PageBreakFlags *>(a0),sipType_QTextFormat_PageBreakFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QTextFormat_PageBreakFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTextFormat_PageBreakFlags___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QTextFormat_PageBreakFlags___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTextFormat_PageBreakFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTextFormat::PageBreakFlags *sipCpp = reinterpret_cast< ::QTextFormat::PageBreakFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextFormat_PageBreakFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QTextFormat::PageBreakFlags(*sipCpp ^ a0);
#line 43144 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTextFormat_PageBreakFlags___xor__(PyObject *,PyObject *);}
static PyObject *slot_QTextFormat_PageBreakFlags___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextFormat::PageBreakFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QTextFormat_PageBreakFlags, &a0, &a0State, &a1))
        {
             ::QTextFormat::PageBreakFlags*sipRes;

            sipRes = new  ::QTextFormat::PageBreakFlags((*a0 ^ a1));
            sipReleaseType(a0,sipType_QTextFormat_PageBreakFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTextFormat_PageBreakFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QTextFormat_PageBreakFlags___ior__(PyObject *,PyObject *);}
static PyObject *slot_QTextFormat_PageBreakFlags___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTextFormat_PageBreakFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTextFormat::PageBreakFlags *sipCpp = reinterpret_cast< ::QTextFormat::PageBreakFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextFormat_PageBreakFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QTextFormat::PageBreakFlags(*sipCpp | a0);
#line 43216 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTextFormat_PageBreakFlags___or__(PyObject *,PyObject *);}
static PyObject *slot_QTextFormat_PageBreakFlags___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextFormat::PageBreakFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QTextFormat_PageBreakFlags, &a0, &a0State, &a1))
        {
             ::QTextFormat::PageBreakFlags*sipRes;

            sipRes = new  ::QTextFormat::PageBreakFlags((*a0 | a1));
            sipReleaseType(a0,sipType_QTextFormat_PageBreakFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTextFormat_PageBreakFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QTextFormat_PageBreakFlags___iand__(PyObject *,PyObject *);}
static PyObject *slot_QTextFormat_PageBreakFlags___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTextFormat_PageBreakFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTextFormat::PageBreakFlags *sipCpp = reinterpret_cast< ::QTextFormat::PageBreakFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextFormat_PageBreakFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QTextFormat::PageBreakFlags::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTextFormat_PageBreakFlags___and__(PyObject *,PyObject *);}
static PyObject *slot_QTextFormat_PageBreakFlags___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextFormat::PageBreakFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QTextFormat_PageBreakFlags, &a0, &a0State, &a1))
        {
             ::QTextFormat::PageBreakFlags*sipRes;

            sipRes = new  ::QTextFormat::PageBreakFlags((*a0 & a1));
            sipReleaseType(a0,sipType_QTextFormat_PageBreakFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTextFormat_PageBreakFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QTextFormat_PageBreakFlags___invert__(PyObject *);}
static PyObject *slot_QTextFormat_PageBreakFlags___invert__(PyObject *sipSelf)
{
     ::QTextFormat::PageBreakFlags *sipCpp = reinterpret_cast< ::QTextFormat::PageBreakFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextFormat_PageBreakFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QTextFormat::PageBreakFlags*sipRes;

            sipRes = new  ::QTextFormat::PageBreakFlags(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QTextFormat_PageBreakFlags,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QTextFormat_PageBreakFlags___int__(PyObject *);}
static PyObject *slot_QTextFormat_PageBreakFlags___int__(PyObject *sipSelf)
{
     ::QTextFormat::PageBreakFlags *sipCpp = reinterpret_cast< ::QTextFormat::PageBreakFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextFormat_PageBreakFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextFormat_PageBreakFlags(void *, int);}
static void release_QTextFormat_PageBreakFlags(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextFormat::PageBreakFlags *>(sipCppV);
}


extern "C" {static void assign_QTextFormat_PageBreakFlags(void *, SIP_SSIZE_T, void *);}
static void assign_QTextFormat_PageBreakFlags(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTextFormat::PageBreakFlags *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTextFormat::PageBreakFlags *>(sipSrc);
}


extern "C" {static void *array_QTextFormat_PageBreakFlags(SIP_SSIZE_T);}
static void *array_QTextFormat_PageBreakFlags(SIP_SSIZE_T sipNrElem)
{
    return new  ::QTextFormat::PageBreakFlags[sipNrElem];
}


extern "C" {static void *copy_QTextFormat_PageBreakFlags(const void *, SIP_SSIZE_T);}
static void *copy_QTextFormat_PageBreakFlags(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QTextFormat::PageBreakFlags(reinterpret_cast<const  ::QTextFormat::PageBreakFlags *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextFormat_PageBreakFlags(sipSimpleWrapper *);}
static void dealloc_QTextFormat_PageBreakFlags(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextFormat_PageBreakFlags(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextFormat_PageBreakFlags(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextFormat_PageBreakFlags(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextFormat::PageBreakFlags *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTextFormat::PageBreakFlags();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QTextFormat::PageBreakFlags(a0);

            return sipCpp;
        }
    }

    {
        const  ::QTextFormat::PageBreakFlags* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QTextFormat_PageBreakFlags, &a0, &a0State))
        {
            sipCpp = new  ::QTextFormat::PageBreakFlags(*a0);
            sipReleaseType(const_cast< ::QTextFormat::PageBreakFlags *>(a0),sipType_QTextFormat_PageBreakFlags,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QTextFormat_PageBreakFlags(PyObject *, void **, int *, PyObject *);}
static int convertTo_QTextFormat_PageBreakFlags(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QTextFormat::PageBreakFlags **sipCppPtr = reinterpret_cast< ::QTextFormat::PageBreakFlags **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QTextFormat::PageBreakFlags is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QTextFormat_PageBreakFlag)) ||
            sipCanConvertToType(sipPy, sipType_QTextFormat_PageBreakFlags, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QTextFormat_PageBreakFlag)))
{
    *sipCppPtr = new QTextFormat::PageBreakFlags(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QTextFormat::PageBreakFlags *>(sipConvertToType(sipPy, sipType_QTextFormat_PageBreakFlags, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 43484 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QTextFormat_PageBreakFlags[] = {
    {(void *)slot_QTextFormat_PageBreakFlags___hash__, hash_slot},
    {(void *)slot_QTextFormat_PageBreakFlags___bool__, bool_slot},
    {(void *)slot_QTextFormat_PageBreakFlags___ne__, ne_slot},
    {(void *)slot_QTextFormat_PageBreakFlags___eq__, eq_slot},
    {(void *)slot_QTextFormat_PageBreakFlags___ixor__, ixor_slot},
    {(void *)slot_QTextFormat_PageBreakFlags___xor__, xor_slot},
    {(void *)slot_QTextFormat_PageBreakFlags___ior__, ior_slot},
    {(void *)slot_QTextFormat_PageBreakFlags___or__, or_slot},
    {(void *)slot_QTextFormat_PageBreakFlags___iand__, iand_slot},
    {(void *)slot_QTextFormat_PageBreakFlags___and__, and_slot},
    {(void *)slot_QTextFormat_PageBreakFlags___invert__, invert_slot},
    {(void *)slot_QTextFormat_PageBreakFlags___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QTextFormat_PageBreakFlags, "\1QTextFormat.PageBreakFlags()\n"
"QTextFormat.PageBreakFlags(Union[QTextFormat.PageBreakFlags, QTextFormat.PageBreakFlag])\n"
"QTextFormat.PageBreakFlags(QTextFormat.PageBreakFlags)");


static pyqt5ClassPluginDef plugin_QTextFormat_PageBreakFlags = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextFormat_PageBreakFlags = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextFormat__PageBreakFlags,
        {SIP_NULLPTR},
        &plugin_QTextFormat_PageBreakFlags
    },
    {
        sipNameNr_PageBreakFlags,
        {304, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextFormat_PageBreakFlags,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QTextFormat_PageBreakFlags,
    init_type_QTextFormat_PageBreakFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextFormat_PageBreakFlags,
    assign_QTextFormat_PageBreakFlags,
    array_QTextFormat_PageBreakFlags,
    copy_QTextFormat_PageBreakFlags,
    release_QTextFormat_PageBreakFlags,
    SIP_NULLPTR,
    convertTo_QTextFormat_PageBreakFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 43572 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 43576 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 553 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 43579 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 43582 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 43585 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 441 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 43588 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 464 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 43591 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 527 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 43594 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 409 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 43597 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 255 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 43600 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 358 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 43603 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 146 "sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 43606 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 43609 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 43612 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpen.sip"
#include <qpen.h>
#line 43615 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 43618 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 43621 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QTextFormat_merge, "merge(self, QTextFormat)");

extern "C" {static PyObject *meth_QTextFormat_merge(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_merge(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat* a0;
         ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextFormat, &sipCpp, sipType_QTextFormat, &a0))
        {
            sipCpp->merge(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_merge, doc_QTextFormat_merge);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QTextFormat_isValid(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_isValid, doc_QTextFormat_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_type, "type(self) -> int");

extern "C" {static PyObject *meth_QTextFormat_type(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->type();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_type, doc_QTextFormat_type);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_objectIndex, "objectIndex(self) -> int");

extern "C" {static PyObject *meth_QTextFormat_objectIndex(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_objectIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->objectIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_objectIndex, doc_QTextFormat_objectIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_setObjectIndex, "setObjectIndex(self, int)");

extern "C" {static PyObject *meth_QTextFormat_setObjectIndex(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_setObjectIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            sipCpp->setObjectIndex(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_setObjectIndex, doc_QTextFormat_setObjectIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_property, "property(self, int) -> Any");

extern "C" {static PyObject *meth_QTextFormat_property(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_property(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->property(a0));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_property, doc_QTextFormat_property);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_setProperty, "setProperty(self, int, Any)\n"
"setProperty(self, int, Iterable[QTextLength])");

extern "C" {static PyObject *meth_QTextFormat_setProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_setProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QVariant* a1;
        int a1State = 0;
         ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTextFormat, &sipCpp, &a0, sipType_QVariant, &a1, &a1State))
        {
            sipCpp->setProperty(a0,*a1);
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QVector< ::QTextLength>* a1;
        int a1State = 0;
         ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTextFormat, &sipCpp, &a0, sipType_QVector_0100QTextLength,&a1, &a1State))
        {
            sipCpp->setProperty(a0,*a1);
            sipReleaseType(const_cast<QVector< ::QTextLength> *>(a1),sipType_QVector_0100QTextLength,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_setProperty, doc_QTextFormat_setProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_clearProperty, "clearProperty(self, int)");

extern "C" {static PyObject *meth_QTextFormat_clearProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_clearProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            sipCpp->clearProperty(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_clearProperty, doc_QTextFormat_clearProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_hasProperty, "hasProperty(self, int) -> bool");

extern "C" {static PyObject *meth_QTextFormat_hasProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_hasProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->hasProperty(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_hasProperty, doc_QTextFormat_hasProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_boolProperty, "boolProperty(self, int) -> bool");

extern "C" {static PyObject *meth_QTextFormat_boolProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_boolProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->boolProperty(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_boolProperty, doc_QTextFormat_boolProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_intProperty, "intProperty(self, int) -> int");

extern "C" {static PyObject *meth_QTextFormat_intProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_intProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->intProperty(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_intProperty, doc_QTextFormat_intProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_doubleProperty, "doubleProperty(self, int) -> float");

extern "C" {static PyObject *meth_QTextFormat_doubleProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_doubleProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
             ::qreal sipRes;

            sipRes = sipCpp->doubleProperty(a0);

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_doubleProperty, doc_QTextFormat_doubleProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_stringProperty, "stringProperty(self, int) -> str");

extern "C" {static PyObject *meth_QTextFormat_stringProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_stringProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->stringProperty(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_stringProperty, doc_QTextFormat_stringProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_colorProperty, "colorProperty(self, int) -> QColor");

extern "C" {static PyObject *meth_QTextFormat_colorProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_colorProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor(sipCpp->colorProperty(a0));

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_colorProperty, doc_QTextFormat_colorProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_penProperty, "penProperty(self, int) -> QPen");

extern "C" {static PyObject *meth_QTextFormat_penProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_penProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
             ::QPen*sipRes;

            sipRes = new  ::QPen(sipCpp->penProperty(a0));

            return sipConvertFromNewType(sipRes,sipType_QPen,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_penProperty, doc_QTextFormat_penProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_brushProperty, "brushProperty(self, int) -> QBrush");

extern "C" {static PyObject *meth_QTextFormat_brushProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_brushProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->brushProperty(a0));

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_brushProperty, doc_QTextFormat_brushProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_lengthProperty, "lengthProperty(self, int) -> QTextLength");

extern "C" {static PyObject *meth_QTextFormat_lengthProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_lengthProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
             ::QTextLength*sipRes;

            sipRes = new  ::QTextLength(sipCpp->lengthProperty(a0));

            return sipConvertFromNewType(sipRes,sipType_QTextLength,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_lengthProperty, doc_QTextFormat_lengthProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_lengthVectorProperty, "lengthVectorProperty(self, int) -> List[QTextLength]");

extern "C" {static PyObject *meth_QTextFormat_lengthVectorProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_lengthVectorProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            QVector< ::QTextLength>*sipRes;

            sipRes = new QVector< ::QTextLength>(sipCpp->lengthVectorProperty(a0));

            return sipConvertFromNewType(sipRes,sipType_QVector_0100QTextLength,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_lengthVectorProperty, doc_QTextFormat_lengthVectorProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_properties, "properties(self) -> Dict[int, Any]");

extern "C" {static PyObject *meth_QTextFormat_properties(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_properties(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            QMap<int, ::QVariant>*sipRes;

            sipRes = new QMap<int, ::QVariant>(sipCpp->properties());

            return sipConvertFromNewType(sipRes,sipType_QMap_1800_0100QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_properties, doc_QTextFormat_properties);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_objectType, "objectType(self) -> int");

extern "C" {static PyObject *meth_QTextFormat_objectType(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_objectType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->objectType();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_objectType, doc_QTextFormat_objectType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_isCharFormat, "isCharFormat(self) -> bool");

extern "C" {static PyObject *meth_QTextFormat_isCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_isCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isCharFormat();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_isCharFormat, doc_QTextFormat_isCharFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_isBlockFormat, "isBlockFormat(self) -> bool");

extern "C" {static PyObject *meth_QTextFormat_isBlockFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_isBlockFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isBlockFormat();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_isBlockFormat, doc_QTextFormat_isBlockFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_isListFormat, "isListFormat(self) -> bool");

extern "C" {static PyObject *meth_QTextFormat_isListFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_isListFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isListFormat();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_isListFormat, doc_QTextFormat_isListFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_isFrameFormat, "isFrameFormat(self) -> bool");

extern "C" {static PyObject *meth_QTextFormat_isFrameFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_isFrameFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isFrameFormat();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_isFrameFormat, doc_QTextFormat_isFrameFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_isImageFormat, "isImageFormat(self) -> bool");

extern "C" {static PyObject *meth_QTextFormat_isImageFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_isImageFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isImageFormat();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_isImageFormat, doc_QTextFormat_isImageFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_isTableFormat, "isTableFormat(self) -> bool");

extern "C" {static PyObject *meth_QTextFormat_isTableFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_isTableFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isTableFormat();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_isTableFormat, doc_QTextFormat_isTableFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_toBlockFormat, "toBlockFormat(self) -> QTextBlockFormat");

extern "C" {static PyObject *meth_QTextFormat_toBlockFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_toBlockFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
             ::QTextBlockFormat*sipRes;

            sipRes = new  ::QTextBlockFormat(sipCpp->toBlockFormat());

            return sipConvertFromNewType(sipRes,sipType_QTextBlockFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_toBlockFormat, doc_QTextFormat_toBlockFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_toCharFormat, "toCharFormat(self) -> QTextCharFormat");

extern "C" {static PyObject *meth_QTextFormat_toCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_toCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
             ::QTextCharFormat*sipRes;

            sipRes = new  ::QTextCharFormat(sipCpp->toCharFormat());

            return sipConvertFromNewType(sipRes,sipType_QTextCharFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_toCharFormat, doc_QTextFormat_toCharFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_toListFormat, "toListFormat(self) -> QTextListFormat");

extern "C" {static PyObject *meth_QTextFormat_toListFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_toListFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
             ::QTextListFormat*sipRes;

            sipRes = new  ::QTextListFormat(sipCpp->toListFormat());

            return sipConvertFromNewType(sipRes,sipType_QTextListFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_toListFormat, doc_QTextFormat_toListFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_toTableFormat, "toTableFormat(self) -> QTextTableFormat");

extern "C" {static PyObject *meth_QTextFormat_toTableFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_toTableFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
             ::QTextTableFormat*sipRes;

            sipRes = new  ::QTextTableFormat(sipCpp->toTableFormat());

            return sipConvertFromNewType(sipRes,sipType_QTextTableFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_toTableFormat, doc_QTextFormat_toTableFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_toFrameFormat, "toFrameFormat(self) -> QTextFrameFormat");

extern "C" {static PyObject *meth_QTextFormat_toFrameFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_toFrameFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
             ::QTextFrameFormat*sipRes;

            sipRes = new  ::QTextFrameFormat(sipCpp->toFrameFormat());

            return sipConvertFromNewType(sipRes,sipType_QTextFrameFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_toFrameFormat, doc_QTextFormat_toFrameFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_toImageFormat, "toImageFormat(self) -> QTextImageFormat");

extern "C" {static PyObject *meth_QTextFormat_toImageFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_toImageFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
             ::QTextImageFormat*sipRes;

            sipRes = new  ::QTextImageFormat(sipCpp->toImageFormat());

            return sipConvertFromNewType(sipRes,sipType_QTextImageFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_toImageFormat, doc_QTextFormat_toImageFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_setLayoutDirection, "setLayoutDirection(self, Qt.LayoutDirection)");

extern "C" {static PyObject *meth_QTextFormat_setLayoutDirection(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_setLayoutDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::LayoutDirection a0;
         ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextFormat, &sipCpp, sipType_Qt_LayoutDirection, &a0))
        {
            sipCpp->setLayoutDirection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_setLayoutDirection, doc_QTextFormat_setLayoutDirection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_layoutDirection, "layoutDirection(self) -> Qt.LayoutDirection");

extern "C" {static PyObject *meth_QTextFormat_layoutDirection(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_layoutDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
             ::Qt::LayoutDirection sipRes;

            sipRes = sipCpp->layoutDirection();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_LayoutDirection);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_layoutDirection, doc_QTextFormat_layoutDirection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_setBackground, "setBackground(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QTextFormat_setBackground(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_setBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBrush* a0;
        int a0State = 0;
         ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextFormat, &sipCpp, sipType_QBrush, &a0, &a0State))
        {
            sipCpp->setBackground(*a0);
            sipReleaseType(const_cast< ::QBrush *>(a0),sipType_QBrush,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_setBackground, doc_QTextFormat_setBackground);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_background, "background(self) -> QBrush");

extern "C" {static PyObject *meth_QTextFormat_background(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_background(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->background());

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_background, doc_QTextFormat_background);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_clearBackground, "clearBackground(self)");

extern "C" {static PyObject *meth_QTextFormat_clearBackground(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_clearBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            sipCpp->clearBackground();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_clearBackground, doc_QTextFormat_clearBackground);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_setForeground, "setForeground(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QTextFormat_setForeground(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_setForeground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBrush* a0;
        int a0State = 0;
         ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextFormat, &sipCpp, sipType_QBrush, &a0, &a0State))
        {
            sipCpp->setForeground(*a0);
            sipReleaseType(const_cast< ::QBrush *>(a0),sipType_QBrush,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_setForeground, doc_QTextFormat_setForeground);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_foreground, "foreground(self) -> QBrush");

extern "C" {static PyObject *meth_QTextFormat_foreground(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_foreground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->foreground());

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_foreground, doc_QTextFormat_foreground);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_clearForeground, "clearForeground(self)");

extern "C" {static PyObject *meth_QTextFormat_clearForeground(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_clearForeground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            sipCpp->clearForeground();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_clearForeground, doc_QTextFormat_clearForeground);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_setObjectType, "setObjectType(self, int)");

extern "C" {static PyObject *meth_QTextFormat_setObjectType(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_setObjectType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            sipCpp->setObjectType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_setObjectType, doc_QTextFormat_setObjectType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_propertyCount, "propertyCount(self) -> int");

extern "C" {static PyObject *meth_QTextFormat_propertyCount(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_propertyCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->propertyCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_propertyCount, doc_QTextFormat_propertyCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_isTableCellFormat, "isTableCellFormat(self) -> bool");

extern "C" {static PyObject *meth_QTextFormat_isTableCellFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_isTableCellFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isTableCellFormat();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_isTableCellFormat, doc_QTextFormat_isTableCellFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_toTableCellFormat, "toTableCellFormat(self) -> QTextTableCellFormat");

extern "C" {static PyObject *meth_QTextFormat_toTableCellFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_toTableCellFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
             ::QTextTableCellFormat*sipRes;

            sipRes = new  ::QTextTableCellFormat(sipCpp->toTableCellFormat());

            return sipConvertFromNewType(sipRes,sipType_QTextTableCellFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_toTableCellFormat, doc_QTextFormat_toTableCellFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_swap, "swap(self, QTextFormat)");

extern "C" {static PyObject *meth_QTextFormat_swap(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextFormat* a0;
         ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextFormat, &sipCpp, sipType_QTextFormat, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_swap, doc_QTextFormat_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextFormat_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QTextFormat_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_isEmpty, doc_QTextFormat_isEmpty);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QTextFormat___ne__(PyObject *,PyObject *);}
static PyObject *slot_QTextFormat___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextFormat *sipCpp = reinterpret_cast< ::QTextFormat *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextFormat));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextFormat, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QTextFormat::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QTextFormat, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTextFormat___eq__(PyObject *,PyObject *);}
static PyObject *slot_QTextFormat___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextFormat *sipCpp = reinterpret_cast< ::QTextFormat *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextFormat));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextFormat, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QTextFormat::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QTextFormat, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextFormat(void *, int);}
static void release_QTextFormat(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextFormat *>(sipCppV);
}


extern "C" {static void assign_QTextFormat(void *, SIP_SSIZE_T, void *);}
static void assign_QTextFormat(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTextFormat *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTextFormat *>(sipSrc);
}


extern "C" {static void *array_QTextFormat(SIP_SSIZE_T);}
static void *array_QTextFormat(SIP_SSIZE_T sipNrElem)
{
    return new  ::QTextFormat[sipNrElem];
}


extern "C" {static void *copy_QTextFormat(const void *, SIP_SSIZE_T);}
static void *copy_QTextFormat(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QTextFormat(reinterpret_cast<const  ::QTextFormat *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextFormat(sipSimpleWrapper *);}
static void dealloc_QTextFormat(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextFormat(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextFormat(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextFormat(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextFormat *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTextFormat();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QTextFormat(a0);

            return sipCpp;
        }
    }

    {
        const  ::QTextFormat* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTextFormat, &a0))
        {
            sipCpp = new  ::QTextFormat(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QVariant* a0;
        PyObject *a0Wrapper;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "@J1", &a0Wrapper, sipType_QVariant, &a0, &a0State))
        {
            sipErrorState sipError = sipErrorNone;

#line 189 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
        if (a0->canConvert<QTextFormat>())
            sipCpp = new QTextFormat(a0->value<QTextFormat>());
        else
            sipError = sipBadCallableArg(0, a0Wrapper);
#line 45099 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            if (sipError == sipErrorNone)
                return sipCpp;

            if (sipUnused)
            {
                Py_XDECREF(*sipUnused);
            }

            sipAddException(sipError, sipParseErr);

            if (sipError == sipErrorFail)
                return SIP_NULLPTR;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QTextFormat[] = {
    {(void *)slot_QTextFormat___ne__, ne_slot},
    {(void *)slot_QTextFormat___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QTextFormat[] = {
    {SIP_MLNAME_CAST(sipName_background), meth_QTextFormat_background, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_background)},
    {SIP_MLNAME_CAST(sipName_boolProperty), meth_QTextFormat_boolProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_boolProperty)},
    {SIP_MLNAME_CAST(sipName_brushProperty), meth_QTextFormat_brushProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_brushProperty)},
    {SIP_MLNAME_CAST(sipName_clearBackground), meth_QTextFormat_clearBackground, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_clearBackground)},
    {SIP_MLNAME_CAST(sipName_clearForeground), meth_QTextFormat_clearForeground, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_clearForeground)},
    {SIP_MLNAME_CAST(sipName_clearProperty), meth_QTextFormat_clearProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_clearProperty)},
    {SIP_MLNAME_CAST(sipName_colorProperty), meth_QTextFormat_colorProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_colorProperty)},
    {SIP_MLNAME_CAST(sipName_doubleProperty), meth_QTextFormat_doubleProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_doubleProperty)},
    {SIP_MLNAME_CAST(sipName_foreground), meth_QTextFormat_foreground, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_foreground)},
    {SIP_MLNAME_CAST(sipName_hasProperty), meth_QTextFormat_hasProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_hasProperty)},
    {SIP_MLNAME_CAST(sipName_intProperty), meth_QTextFormat_intProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_intProperty)},
    {SIP_MLNAME_CAST(sipName_isBlockFormat), meth_QTextFormat_isBlockFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_isBlockFormat)},
    {SIP_MLNAME_CAST(sipName_isCharFormat), meth_QTextFormat_isCharFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_isCharFormat)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QTextFormat_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_isEmpty)},
    {SIP_MLNAME_CAST(sipName_isFrameFormat), meth_QTextFormat_isFrameFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_isFrameFormat)},
    {SIP_MLNAME_CAST(sipName_isImageFormat), meth_QTextFormat_isImageFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_isImageFormat)},
    {SIP_MLNAME_CAST(sipName_isListFormat), meth_QTextFormat_isListFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_isListFormat)},
    {SIP_MLNAME_CAST(sipName_isTableCellFormat), meth_QTextFormat_isTableCellFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_isTableCellFormat)},
    {SIP_MLNAME_CAST(sipName_isTableFormat), meth_QTextFormat_isTableFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_isTableFormat)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QTextFormat_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_isValid)},
    {SIP_MLNAME_CAST(sipName_layoutDirection), meth_QTextFormat_layoutDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_layoutDirection)},
    {SIP_MLNAME_CAST(sipName_lengthProperty), meth_QTextFormat_lengthProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_lengthProperty)},
    {SIP_MLNAME_CAST(sipName_lengthVectorProperty), meth_QTextFormat_lengthVectorProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_lengthVectorProperty)},
    {SIP_MLNAME_CAST(sipName_merge), meth_QTextFormat_merge, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_merge)},
    {SIP_MLNAME_CAST(sipName_objectIndex), meth_QTextFormat_objectIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_objectIndex)},
    {SIP_MLNAME_CAST(sipName_objectType), meth_QTextFormat_objectType, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_objectType)},
    {SIP_MLNAME_CAST(sipName_penProperty), meth_QTextFormat_penProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_penProperty)},
    {SIP_MLNAME_CAST(sipName_properties), meth_QTextFormat_properties, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_properties)},
    {SIP_MLNAME_CAST(sipName_property), meth_QTextFormat_property, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_property)},
    {SIP_MLNAME_CAST(sipName_propertyCount), meth_QTextFormat_propertyCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_propertyCount)},
    {SIP_MLNAME_CAST(sipName_setBackground), meth_QTextFormat_setBackground, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_setBackground)},
    {SIP_MLNAME_CAST(sipName_setForeground), meth_QTextFormat_setForeground, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_setForeground)},
    {SIP_MLNAME_CAST(sipName_setLayoutDirection), meth_QTextFormat_setLayoutDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_setLayoutDirection)},
    {SIP_MLNAME_CAST(sipName_setObjectIndex), meth_QTextFormat_setObjectIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_setObjectIndex)},
    {SIP_MLNAME_CAST(sipName_setObjectType), meth_QTextFormat_setObjectType, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_setObjectType)},
    {SIP_MLNAME_CAST(sipName_setProperty), meth_QTextFormat_setProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_setProperty)},
    {SIP_MLNAME_CAST(sipName_stringProperty), meth_QTextFormat_stringProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_stringProperty)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QTextFormat_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_swap)},
    {SIP_MLNAME_CAST(sipName_toBlockFormat), meth_QTextFormat_toBlockFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_toBlockFormat)},
    {SIP_MLNAME_CAST(sipName_toCharFormat), meth_QTextFormat_toCharFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_toCharFormat)},
    {SIP_MLNAME_CAST(sipName_toFrameFormat), meth_QTextFormat_toFrameFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_toFrameFormat)},
    {SIP_MLNAME_CAST(sipName_toImageFormat), meth_QTextFormat_toImageFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_toImageFormat)},
    {SIP_MLNAME_CAST(sipName_toListFormat), meth_QTextFormat_toListFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_toListFormat)},
    {SIP_MLNAME_CAST(sipName_toTableCellFormat), meth_QTextFormat_toTableCellFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_toTableCellFormat)},
    {SIP_MLNAME_CAST(sipName_toTableFormat), meth_QTextFormat_toTableFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_toTableFormat)},
    {SIP_MLNAME_CAST(sipName_type), meth_QTextFormat_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_type)}
};

static sipEnumMemberDef enummembers_QTextFormat[] = {
    {sipName_AnchorHref, static_cast<int>( ::QTextFormat::AnchorHref), 309},
    {sipName_AnchorName, static_cast<int>( ::QTextFormat::AnchorName), 309},
    {sipName_BackgroundBrush, static_cast<int>( ::QTextFormat::BackgroundBrush), 309},
    {sipName_BackgroundImageUrl, static_cast<int>( ::QTextFormat::BackgroundImageUrl), 309},
    {sipName_BlockAlignment, static_cast<int>( ::QTextFormat::BlockAlignment), 309},
    {sipName_BlockBottomMargin, static_cast<int>( ::QTextFormat::BlockBottomMargin), 309},
    {sipName_BlockFormat, static_cast<int>( ::QTextFormat::BlockFormat), 305},
    {sipName_BlockIndent, static_cast<int>( ::QTextFormat::BlockIndent), 309},
    {sipName_BlockLeftMargin, static_cast<int>( ::QTextFormat::BlockLeftMargin), 309},
    {sipName_BlockNonBreakableLines, static_cast<int>( ::QTextFormat::BlockNonBreakableLines), 309},
    {sipName_BlockRightMargin, static_cast<int>( ::QTextFormat::BlockRightMargin), 309},
    {sipName_BlockTopMargin, static_cast<int>( ::QTextFormat::BlockTopMargin), 309},
    {sipName_BlockTrailingHorizontalRulerWidth, static_cast<int>( ::QTextFormat::BlockTrailingHorizontalRulerWidth), 309},
    {sipName_CharFormat, static_cast<int>( ::QTextFormat::CharFormat), 305},
    {sipName_CssFloat, static_cast<int>( ::QTextFormat::CssFloat), 309},
    {sipName_FirstFontProperty, static_cast<int>( ::QTextFormat::FirstFontProperty), 309},
    {sipName_FontCapitalization, static_cast<int>( ::QTextFormat::FontCapitalization), 309},
    {sipName_FontFamily, static_cast<int>( ::QTextFormat::FontFamily), 309},
    {sipName_FontFixedPitch, static_cast<int>( ::QTextFormat::FontFixedPitch), 309},
    {sipName_FontHintingPreference, static_cast<int>( ::QTextFormat::FontHintingPreference), 309},
    {sipName_FontItalic, static_cast<int>( ::QTextFormat::FontItalic), 309},
    {sipName_FontKerning, static_cast<int>( ::QTextFormat::FontKerning), 309},
    {sipName_FontLetterSpacing, static_cast<int>( ::QTextFormat::FontLetterSpacing), 309},
    {sipName_FontLetterSpacingType, static_cast<int>( ::QTextFormat::FontLetterSpacingType), 309},
    {sipName_FontOverline, static_cast<int>( ::QTextFormat::FontOverline), 309},
    {sipName_FontPixelSize, static_cast<int>( ::QTextFormat::FontPixelSize), 309},
    {sipName_FontPointSize, static_cast<int>( ::QTextFormat::FontPointSize), 309},
    {sipName_FontSizeAdjustment, static_cast<int>( ::QTextFormat::FontSizeAdjustment), 309},
    {sipName_FontSizeIncrement, static_cast<int>( ::QTextFormat::FontSizeIncrement), 309},
    {sipName_FontStretch, static_cast<int>( ::QTextFormat::FontStretch), 309},
    {sipName_FontStrikeOut, static_cast<int>( ::QTextFormat::FontStrikeOut), 309},
    {sipName_FontStyleHint, static_cast<int>( ::QTextFormat::FontStyleHint), 309},
    {sipName_FontStyleStrategy, static_cast<int>( ::QTextFormat::FontStyleStrategy), 309},
    {sipName_FontUnderline, static_cast<int>( ::QTextFormat::FontUnderline), 309},
    {sipName_FontWeight, static_cast<int>( ::QTextFormat::FontWeight), 309},
    {sipName_FontWordSpacing, static_cast<int>( ::QTextFormat::FontWordSpacing), 309},
    {sipName_ForegroundBrush, static_cast<int>( ::QTextFormat::ForegroundBrush), 309},
    {sipName_FrameBorder, static_cast<int>( ::QTextFormat::FrameBorder), 309},
    {sipName_FrameBorderBrush, static_cast<int>( ::QTextFormat::FrameBorderBrush), 309},
    {sipName_FrameBorderStyle, static_cast<int>( ::QTextFormat::FrameBorderStyle), 309},
    {sipName_FrameBottomMargin, static_cast<int>( ::QTextFormat::FrameBottomMargin), 309},
    {sipName_FrameFormat, static_cast<int>( ::QTextFormat::FrameFormat), 305},
    {sipName_FrameHeight, static_cast<int>( ::QTextFormat::FrameHeight), 309},
    {sipName_FrameLeftMargin, static_cast<int>( ::QTextFormat::FrameLeftMargin), 309},
    {sipName_FrameMargin, static_cast<int>( ::QTextFormat::FrameMargin), 309},
    {sipName_FramePadding, static_cast<int>( ::QTextFormat::FramePadding), 309},
    {sipName_FrameRightMargin, static_cast<int>( ::QTextFormat::FrameRightMargin), 309},
    {sipName_FrameTopMargin, static_cast<int>( ::QTextFormat::FrameTopMargin), 309},
    {sipName_FrameWidth, static_cast<int>( ::QTextFormat::FrameWidth), 309},
    {sipName_FullWidthSelection, static_cast<int>( ::QTextFormat::FullWidthSelection), 309},
    {sipName_HeadingLevel, static_cast<int>( ::QTextFormat::HeadingLevel), 309},
    {sipName_ImageHeight, static_cast<int>( ::QTextFormat::ImageHeight), 309},
    {sipName_ImageName, static_cast<int>( ::QTextFormat::ImageName), 309},
    {sipName_ImageObject, static_cast<int>( ::QTextFormat::ImageObject), 306},
    {sipName_ImageQuality, static_cast<int>( ::QTextFormat::ImageQuality), 309},
    {sipName_ImageWidth, static_cast<int>( ::QTextFormat::ImageWidth), 309},
    {sipName_InvalidFormat, static_cast<int>( ::QTextFormat::InvalidFormat), 305},
    {sipName_IsAnchor, static_cast<int>( ::QTextFormat::IsAnchor), 309},
    {sipName_LastFontProperty, static_cast<int>( ::QTextFormat::LastFontProperty), 309},
    {sipName_LayoutDirection, static_cast<int>( ::QTextFormat::LayoutDirection), 309},
    {sipName_LineHeight, static_cast<int>( ::QTextFormat::LineHeight), 309},
    {sipName_LineHeightType, static_cast<int>( ::QTextFormat::LineHeightType), 309},
    {sipName_ListFormat, static_cast<int>( ::QTextFormat::ListFormat), 305},
    {sipName_ListIndent, static_cast<int>( ::QTextFormat::ListIndent), 309},
    {sipName_ListNumberPrefix, static_cast<int>( ::QTextFormat::ListNumberPrefix), 309},
    {sipName_ListNumberSuffix, static_cast<int>( ::QTextFormat::ListNumberSuffix), 309},
    {sipName_ListStyle, static_cast<int>( ::QTextFormat::ListStyle), 309},
    {sipName_NoObject, static_cast<int>( ::QTextFormat::NoObject), 306},
    {sipName_ObjectIndex, static_cast<int>( ::QTextFormat::ObjectIndex), 309},
    {sipName_ObjectType, static_cast<int>( ::QTextFormat::ObjectType), 309},
    {sipName_OutlinePen, static_cast<int>( ::QTextFormat::OutlinePen), 309},
    {sipName_PageBreakPolicy, static_cast<int>( ::QTextFormat::PageBreakPolicy), 309},
    {sipName_PageBreak_AlwaysAfter, static_cast<int>( ::QTextFormat::PageBreak_AlwaysAfter), 307},
    {sipName_PageBreak_AlwaysBefore, static_cast<int>( ::QTextFormat::PageBreak_AlwaysBefore), 307},
    {sipName_PageBreak_Auto, static_cast<int>( ::QTextFormat::PageBreak_Auto), 307},
    {sipName_TabPositions, static_cast<int>( ::QTextFormat::TabPositions), 309},
    {sipName_TableCellBottomPadding, static_cast<int>( ::QTextFormat::TableCellBottomPadding), 309},
    {sipName_TableCellColumnSpan, static_cast<int>( ::QTextFormat::TableCellColumnSpan), 309},
    {sipName_TableCellLeftPadding, static_cast<int>( ::QTextFormat::TableCellLeftPadding), 309},
    {sipName_TableCellObject, static_cast<int>( ::QTextFormat::TableCellObject), 306},
    {sipName_TableCellPadding, static_cast<int>( ::QTextFormat::TableCellPadding), 309},
    {sipName_TableCellRightPadding, static_cast<int>( ::QTextFormat::TableCellRightPadding), 309},
    {sipName_TableCellRowSpan, static_cast<int>( ::QTextFormat::TableCellRowSpan), 309},
    {sipName_TableCellSpacing, static_cast<int>( ::QTextFormat::TableCellSpacing), 309},
    {sipName_TableCellTopPadding, static_cast<int>( ::QTextFormat::TableCellTopPadding), 309},
    {sipName_TableColumnWidthConstraints, static_cast<int>( ::QTextFormat::TableColumnWidthConstraints), 309},
    {sipName_TableColumns, static_cast<int>( ::QTextFormat::TableColumns), 309},
    {sipName_TableFormat, static_cast<int>( ::QTextFormat::TableFormat), 305},
    {sipName_TableHeaderRowCount, static_cast<int>( ::QTextFormat::TableHeaderRowCount), 309},
    {sipName_TableObject, static_cast<int>( ::QTextFormat::TableObject), 306},
    {sipName_TextIndent, static_cast<int>( ::QTextFormat::TextIndent), 309},
    {sipName_TextOutline, static_cast<int>( ::QTextFormat::TextOutline), 309},
    {sipName_TextToolTip, static_cast<int>( ::QTextFormat::TextToolTip), 309},
    {sipName_TextUnderlineColor, static_cast<int>( ::QTextFormat::TextUnderlineColor), 309},
    {sipName_TextUnderlineStyle, static_cast<int>( ::QTextFormat::TextUnderlineStyle), 309},
    {sipName_TextVerticalAlignment, static_cast<int>( ::QTextFormat::TextVerticalAlignment), 309},
    {sipName_UserFormat, static_cast<int>( ::QTextFormat::UserFormat), 305},
    {sipName_UserObject, static_cast<int>( ::QTextFormat::UserObject), 306},
    {sipName_UserProperty, static_cast<int>( ::QTextFormat::UserProperty), 309},
};

PyDoc_STRVAR(doc_QTextFormat, "\1QTextFormat()\n"
"QTextFormat(int)\n"
"QTextFormat(QTextFormat)\n"
"QTextFormat(Any)");


static pyqt5ClassPluginDef plugin_QTextFormat = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextFormat = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextFormat,
        {SIP_NULLPTR},
        &plugin_QTextFormat
    },
    {
        sipNameNr_QTextFormat,
        {0, 0, 1},
        46, methods_QTextFormat,
        99, enummembers_QTextFormat,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextFormat,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QTextFormat,
    init_type_QTextFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextFormat,
    assign_QTextFormat,
    array_QTextFormat,
    copy_QTextFormat,
    release_QTextFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 45349 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 45353 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QTextLength_type, "type(self) -> QTextLength.Type");

extern "C" {static PyObject *meth_QTextLength_type(PyObject *, PyObject *);}
static PyObject *meth_QTextLength_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextLength *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLength, &sipCpp))
        {
             ::QTextLength::Type sipRes;

            sipRes = sipCpp->type();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QTextLength_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLength, sipName_type, doc_QTextLength_type);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLength_value, "value(self, float) -> float");

extern "C" {static PyObject *meth_QTextLength_value(PyObject *, PyObject *);}
static PyObject *meth_QTextLength_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
        const  ::QTextLength *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextLength, &sipCpp, &a0))
        {
             ::qreal sipRes;

            sipRes = sipCpp->value(a0);

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLength, sipName_value, doc_QTextLength_value);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextLength_rawValue, "rawValue(self) -> float");

extern "C" {static PyObject *meth_QTextLength_rawValue(PyObject *, PyObject *);}
static PyObject *meth_QTextLength_rawValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextLength *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLength, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->rawValue();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLength, sipName_rawValue, doc_QTextLength_rawValue);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QTextLength___ne__(PyObject *,PyObject *);}
static PyObject *slot_QTextLength___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextLength *sipCpp = reinterpret_cast< ::QTextLength *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextLength));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextLength* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextLength, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QTextLength::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QTextLength, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTextLength___eq__(PyObject *,PyObject *);}
static PyObject *slot_QTextLength___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextLength *sipCpp = reinterpret_cast< ::QTextLength *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextLength));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextLength* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextLength, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QTextLength::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QTextLength, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextLength(void *, int);}
static void release_QTextLength(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextLength *>(sipCppV);
}


extern "C" {static void assign_QTextLength(void *, SIP_SSIZE_T, void *);}
static void assign_QTextLength(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTextLength *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTextLength *>(sipSrc);
}


extern "C" {static void *array_QTextLength(SIP_SSIZE_T);}
static void *array_QTextLength(SIP_SSIZE_T sipNrElem)
{
    return new  ::QTextLength[sipNrElem];
}


extern "C" {static void *copy_QTextLength(const void *, SIP_SSIZE_T);}
static void *copy_QTextLength(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QTextLength(reinterpret_cast<const  ::QTextLength *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextLength(sipSimpleWrapper *);}
static void dealloc_QTextLength(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextLength(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextLength(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextLength(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextLength *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTextLength();

            return sipCpp;
        }
    }

    {
         ::QTextLength::Type a0;
         ::qreal a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "Ed", sipType_QTextLength_Type, &a0, &a1))
        {
            sipCpp = new  ::QTextLength(a0,a1);

            return sipCpp;
        }
    }

    {
        const  ::QVariant* a0;
        PyObject *a0Wrapper;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "@J1", &a0Wrapper, sipType_QVariant, &a0, &a0State))
        {
            sipErrorState sipError = sipErrorNone;

#line 46 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
        if (a0->canConvert<QTextLength>())
            sipCpp = new QTextLength(a0->value<QTextLength>());
        else
            sipError = sipBadCallableArg(0, a0Wrapper);
#line 45584 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            if (sipError == sipErrorNone)
                return sipCpp;

            if (sipUnused)
            {
                Py_XDECREF(*sipUnused);
            }

            sipAddException(sipError, sipParseErr);

            if (sipError == sipErrorFail)
                return SIP_NULLPTR;
        }
    }

    {
        const  ::QTextLength* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTextLength, &a0))
        {
            sipCpp = new  ::QTextLength(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QTextLength[] = {
    {(void *)slot_QTextLength___ne__, ne_slot},
    {(void *)slot_QTextLength___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QTextLength[] = {
    {SIP_MLNAME_CAST(sipName_rawValue), meth_QTextLength_rawValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLength_rawValue)},
    {SIP_MLNAME_CAST(sipName_type), meth_QTextLength_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLength_type)},
    {SIP_MLNAME_CAST(sipName_value), meth_QTextLength_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLength_value)}
};

static sipEnumMemberDef enummembers_QTextLength[] = {
    {sipName_FixedLength, static_cast<int>( ::QTextLength::FixedLength), 325},
    {sipName_PercentageLength, static_cast<int>( ::QTextLength::PercentageLength), 325},
    {sipName_VariableLength, static_cast<int>( ::QTextLength::VariableLength), 325},
};

PyDoc_STRVAR(doc_QTextLength, "\1QTextLength()\n"
"QTextLength(QTextLength.Type, float)\n"
"QTextLength(Any)\n"
"QTextLength(QTextLength)");


static pyqt5ClassPluginDef plugin_QTextLength = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextLength = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextLength,
        {SIP_NULLPTR},
        &plugin_QTextLength
    },
    {
        sipNameNr_QTextLength,
        {0, 0, 1},
        3, methods_QTextLength,
        3, enummembers_QTextLength,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextLength,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QTextLength,
    init_type_QTextLength,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextLength,
    assign_QTextLength,
    array_QTextLength,
    copy_QTextLength,
    release_QTextLength,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextdocumentwriter.sip"
#include <qtextdocumentwriter.h>
#line 45706 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 45710 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 45713 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 45716 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 45719 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 45722 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 45725 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextdocumentfragment.sip"
#include <qtextdocumentfragment.h>
#line 45728 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QTextDocumentWriter_setFormat, "setFormat(self, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QTextDocumentWriter_setFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextDocumentWriter_setFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QTextDocumentWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextDocumentWriter, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->setFormat(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocumentWriter, sipName_setFormat, doc_QTextDocumentWriter_setFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocumentWriter_format, "format(self) -> QByteArray");

extern "C" {static PyObject *meth_QTextDocumentWriter_format(PyObject *, PyObject *);}
static PyObject *meth_QTextDocumentWriter_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocumentWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocumentWriter, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->format());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocumentWriter, sipName_format, doc_QTextDocumentWriter_format);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocumentWriter_setDevice, "setDevice(self, QIODevice)");

extern "C" {static PyObject *meth_QTextDocumentWriter_setDevice(PyObject *, PyObject *);}
static PyObject *meth_QTextDocumentWriter_setDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QIODevice* a0;
         ::QTextDocumentWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTextDocumentWriter, &sipCpp, sipType_QIODevice, &a0))
        {
            sipCpp->setDevice(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocumentWriter, sipName_setDevice, doc_QTextDocumentWriter_setDevice);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocumentWriter_device, "device(self) -> QIODevice");

extern "C" {static PyObject *meth_QTextDocumentWriter_device(PyObject *, PyObject *);}
static PyObject *meth_QTextDocumentWriter_device(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocumentWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocumentWriter, &sipCpp))
        {
             ::QIODevice*sipRes;

            sipRes = sipCpp->device();

            return sipConvertFromType(sipRes,sipType_QIODevice,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocumentWriter, sipName_device, doc_QTextDocumentWriter_device);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocumentWriter_setFileName, "setFileName(self, str)");

extern "C" {static PyObject *meth_QTextDocumentWriter_setFileName(PyObject *, PyObject *);}
static PyObject *meth_QTextDocumentWriter_setFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextDocumentWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextDocumentWriter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setFileName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocumentWriter, sipName_setFileName, doc_QTextDocumentWriter_setFileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocumentWriter_fileName, "fileName(self) -> str");

extern "C" {static PyObject *meth_QTextDocumentWriter_fileName(PyObject *, PyObject *);}
static PyObject *meth_QTextDocumentWriter_fileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocumentWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocumentWriter, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->fileName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocumentWriter, sipName_fileName, doc_QTextDocumentWriter_fileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocumentWriter_write, "write(self, QTextDocument) -> bool\n"
"write(self, QTextDocumentFragment) -> bool");

extern "C" {static PyObject *meth_QTextDocumentWriter_write(PyObject *, PyObject *);}
static PyObject *meth_QTextDocumentWriter_write(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocument* a0;
         ::QTextDocumentWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTextDocumentWriter, &sipCpp, sipType_QTextDocument, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->write(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QTextDocumentFragment* a0;
         ::QTextDocumentWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextDocumentWriter, &sipCpp, sipType_QTextDocumentFragment, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->write(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocumentWriter, sipName_write, doc_QTextDocumentWriter_write);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocumentWriter_setCodec, "setCodec(self, QTextCodec)");

extern "C" {static PyObject *meth_QTextDocumentWriter_setCodec(PyObject *, PyObject *);}
static PyObject *meth_QTextDocumentWriter_setCodec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextCodec* a0;
        PyObject *a0Keep;
         ::QTextDocumentWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QTextDocumentWriter, &sipCpp, &a0Keep, sipType_QTextCodec, &a0))
        {
            sipCpp->setCodec(a0);

            sipKeepReference(sipSelf, -4, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocumentWriter, sipName_setCodec, doc_QTextDocumentWriter_setCodec);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocumentWriter_codec, "codec(self) -> QTextCodec");

extern "C" {static PyObject *meth_QTextDocumentWriter_codec(PyObject *, PyObject *);}
static PyObject *meth_QTextDocumentWriter_codec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocumentWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocumentWriter, &sipCpp))
        {
             ::QTextCodec*sipRes;

            sipRes = sipCpp->codec();

            return sipConvertFromType(sipRes,sipType_QTextCodec,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocumentWriter, sipName_codec, doc_QTextDocumentWriter_codec);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocumentWriter_supportedDocumentFormats, "supportedDocumentFormats() -> List[QByteArray]");

extern "C" {static PyObject *meth_QTextDocumentWriter_supportedDocumentFormats(PyObject *, PyObject *);}
static PyObject *meth_QTextDocumentWriter_supportedDocumentFormats(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList< ::QByteArray>*sipRes;

            sipRes = new QList< ::QByteArray>( ::QTextDocumentWriter::supportedDocumentFormats());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocumentWriter, sipName_supportedDocumentFormats, doc_QTextDocumentWriter_supportedDocumentFormats);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextDocumentWriter(void *, int);}
static void release_QTextDocumentWriter(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextDocumentWriter *>(sipCppV);
}


extern "C" {static void dealloc_QTextDocumentWriter(sipSimpleWrapper *);}
static void dealloc_QTextDocumentWriter(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextDocumentWriter(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextDocumentWriter(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextDocumentWriter(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextDocumentWriter *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTextDocumentWriter();

            return sipCpp;
        }
    }

    {
         ::QIODevice* a0;
        const  ::QByteArray* a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8J1", sipType_QIODevice, &a0, sipType_QByteArray, &a1, &a1State))
        {
            sipCpp = new  ::QTextDocumentWriter(a0,*a1);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QByteArray& a1def = QByteArray();
        const  ::QByteArray* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|J1", sipType_QString,&a0, &a0State, sipType_QByteArray, &a1, &a1State))
        {
            sipCpp = new  ::QTextDocumentWriter(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QTextDocumentWriter[] = {
    {SIP_MLNAME_CAST(sipName_codec), meth_QTextDocumentWriter_codec, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocumentWriter_codec)},
    {SIP_MLNAME_CAST(sipName_device), meth_QTextDocumentWriter_device, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocumentWriter_device)},
    {SIP_MLNAME_CAST(sipName_fileName), meth_QTextDocumentWriter_fileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocumentWriter_fileName)},
    {SIP_MLNAME_CAST(sipName_format), meth_QTextDocumentWriter_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocumentWriter_format)},
    {SIP_MLNAME_CAST(sipName_setCodec), meth_QTextDocumentWriter_setCodec, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocumentWriter_setCodec)},
    {SIP_MLNAME_CAST(sipName_setDevice), meth_QTextDocumentWriter_setDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocumentWriter_setDevice)},
    {SIP_MLNAME_CAST(sipName_setFileName), meth_QTextDocumentWriter_setFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocumentWriter_setFileName)},
    {SIP_MLNAME_CAST(sipName_setFormat), meth_QTextDocumentWriter_setFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocumentWriter_setFormat)},
    {SIP_MLNAME_CAST(sipName_supportedDocumentFormats), meth_QTextDocumentWriter_supportedDocumentFormats, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocumentWriter_supportedDocumentFormats)},
    {SIP_MLNAME_CAST(sipName_write), meth_QTextDocumentWriter_write, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocumentWriter_write)}
};

PyDoc_STRVAR(doc_QTextDocumentWriter, "\1QTextDocumentWriter()\n"
"QTextDocumentWriter(QIODevice, Union[QByteArray, bytes, bytearray])\n"
"QTextDocumentWriter(str, format: Union[QByteArray, bytes, bytearray] = QByteArray())");


static pyqt5ClassPluginDef plugin_QTextDocumentWriter = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextDocumentWriter = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextDocumentWriter,
        {SIP_NULLPTR},
        &plugin_QTextDocumentWriter
    },
    {
        sipNameNr_QTextDocumentWriter,
        {0, 0, 1},
        10, methods_QTextDocumentWriter,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextDocumentWriter,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QTextDocumentWriter,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextDocumentWriter,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QTextDocumentWriter,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextdocumentfragment.sip"
#include <qtextdocumentfragment.h>
#line 46185 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 46189 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextcursor.sip"
#include <qtextcursor.h>
#line 46192 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 46195 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 46198 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QTextDocumentFragment_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QTextDocumentFragment_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QTextDocumentFragment_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocumentFragment *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocumentFragment, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocumentFragment, sipName_isEmpty, doc_QTextDocumentFragment_isEmpty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocumentFragment_toPlainText, "toPlainText(self) -> str");

extern "C" {static PyObject *meth_QTextDocumentFragment_toPlainText(PyObject *, PyObject *);}
static PyObject *meth_QTextDocumentFragment_toPlainText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocumentFragment *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocumentFragment, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toPlainText());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocumentFragment, sipName_toPlainText, doc_QTextDocumentFragment_toPlainText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocumentFragment_toHtml, "toHtml(self, encoding: Union[QByteArray, bytes, bytearray] = QByteArray()) -> str");

extern "C" {static PyObject *meth_QTextDocumentFragment_toHtml(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextDocumentFragment_toHtml(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray& a0def = QByteArray();
        const  ::QByteArray* a0 = &a0def;
        int a0State = 0;
        const  ::QTextDocumentFragment *sipCpp;

        static const char *sipKwdList[] = {
            sipName_encoding,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QTextDocumentFragment, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toHtml(*a0));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocumentFragment, sipName_toHtml, doc_QTextDocumentFragment_toHtml);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocumentFragment_fromPlainText, "fromPlainText(str) -> QTextDocumentFragment");

extern "C" {static PyObject *meth_QTextDocumentFragment_fromPlainText(PyObject *, PyObject *);}
static PyObject *meth_QTextDocumentFragment_fromPlainText(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QTextDocumentFragment*sipRes;

            sipRes = new  ::QTextDocumentFragment( ::QTextDocumentFragment::fromPlainText(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTextDocumentFragment,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocumentFragment, sipName_fromPlainText, doc_QTextDocumentFragment_fromPlainText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocumentFragment_fromHtml, "fromHtml(str) -> QTextDocumentFragment\n"
"fromHtml(str, QTextDocument) -> QTextDocumentFragment");

extern "C" {static PyObject *meth_QTextDocumentFragment_fromHtml(PyObject *, PyObject *);}
static PyObject *meth_QTextDocumentFragment_fromHtml(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QTextDocumentFragment*sipRes;

            sipRes = new  ::QTextDocumentFragment( ::QTextDocumentFragment::fromHtml(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTextDocumentFragment,SIP_NULLPTR);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QTextDocument* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J8", sipType_QString,&a0, &a0State, sipType_QTextDocument, &a1))
        {
             ::QTextDocumentFragment*sipRes;

            sipRes = new  ::QTextDocumentFragment( ::QTextDocumentFragment::fromHtml(*a0,a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTextDocumentFragment,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocumentFragment, sipName_fromHtml, doc_QTextDocumentFragment_fromHtml);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextDocumentFragment(void *, int);}
static void release_QTextDocumentFragment(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextDocumentFragment *>(sipCppV);
}


extern "C" {static void assign_QTextDocumentFragment(void *, SIP_SSIZE_T, void *);}
static void assign_QTextDocumentFragment(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTextDocumentFragment *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTextDocumentFragment *>(sipSrc);
}


extern "C" {static void *array_QTextDocumentFragment(SIP_SSIZE_T);}
static void *array_QTextDocumentFragment(SIP_SSIZE_T sipNrElem)
{
    return new  ::QTextDocumentFragment[sipNrElem];
}


extern "C" {static void *copy_QTextDocumentFragment(const void *, SIP_SSIZE_T);}
static void *copy_QTextDocumentFragment(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QTextDocumentFragment(reinterpret_cast<const  ::QTextDocumentFragment *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextDocumentFragment(sipSimpleWrapper *);}
static void dealloc_QTextDocumentFragment(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextDocumentFragment(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextDocumentFragment(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextDocumentFragment(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextDocumentFragment *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTextDocumentFragment();

            return sipCpp;
        }
    }

    {
        const  ::QTextDocument* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8", sipType_QTextDocument, &a0))
        {
            sipCpp = new  ::QTextDocumentFragment(a0);

            return sipCpp;
        }
    }

    {
        const  ::QTextCursor* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTextCursor, &a0))
        {
            sipCpp = new  ::QTextDocumentFragment(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QTextDocumentFragment* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTextDocumentFragment, &a0))
        {
            sipCpp = new  ::QTextDocumentFragment(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QTextDocumentFragment[] = {
    {SIP_MLNAME_CAST(sipName_fromHtml), meth_QTextDocumentFragment_fromHtml, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocumentFragment_fromHtml)},
    {SIP_MLNAME_CAST(sipName_fromPlainText), meth_QTextDocumentFragment_fromPlainText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocumentFragment_fromPlainText)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QTextDocumentFragment_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocumentFragment_isEmpty)},
    {SIP_MLNAME_CAST(sipName_toHtml), SIP_MLMETH_CAST(meth_QTextDocumentFragment_toHtml), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextDocumentFragment_toHtml)},
    {SIP_MLNAME_CAST(sipName_toPlainText), meth_QTextDocumentFragment_toPlainText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocumentFragment_toPlainText)}
};

PyDoc_STRVAR(doc_QTextDocumentFragment, "\1QTextDocumentFragment()\n"
"QTextDocumentFragment(QTextDocument)\n"
"QTextDocumentFragment(QTextCursor)\n"
"QTextDocumentFragment(QTextDocumentFragment)");


static pyqt5ClassPluginDef plugin_QTextDocumentFragment = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextDocumentFragment = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextDocumentFragment,
        {SIP_NULLPTR},
        &plugin_QTextDocumentFragment
    },
    {
        sipNameNr_QTextDocumentFragment,
        {0, 0, 1},
        5, methods_QTextDocumentFragment,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextDocumentFragment,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QTextDocumentFragment,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextDocumentFragment,
    assign_QTextDocumentFragment,
    array_QTextDocumentFragment,
    copy_QTextDocumentFragment,
    release_QTextDocumentFragment,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 46538 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 46542 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static long slot_QTextDocument_FindFlags___hash__(PyObject *);}
static long slot_QTextDocument_FindFlags___hash__(PyObject *sipSelf)
{
     ::QTextDocument::FindFlags *sipCpp = reinterpret_cast< ::QTextDocument::FindFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextDocument_FindFlags));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QTextDocument::FindFlags::Int();
#line 46560 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QTextDocument_FindFlags___bool__(PyObject *);}
static int slot_QTextDocument_FindFlags___bool__(PyObject *sipSelf)
{
     ::QTextDocument::FindFlags *sipCpp = reinterpret_cast< ::QTextDocument::FindFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextDocument_FindFlags));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QTextDocument::FindFlags::Int() != 0);
#line 46585 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QTextDocument_FindFlags___ne__(PyObject *,PyObject *);}
static PyObject *slot_QTextDocument_FindFlags___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextDocument::FindFlags *sipCpp = reinterpret_cast< ::QTextDocument::FindFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextDocument_FindFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocument::FindFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QTextDocument_FindFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QTextDocument::FindFlags::Int() != a0->operator QTextDocument::FindFlags::Int());
#line 46615 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
            sipReleaseType(const_cast< ::QTextDocument::FindFlags *>(a0),sipType_QTextDocument_FindFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QTextDocument_FindFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTextDocument_FindFlags___eq__(PyObject *,PyObject *);}
static PyObject *slot_QTextDocument_FindFlags___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextDocument::FindFlags *sipCpp = reinterpret_cast< ::QTextDocument::FindFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextDocument_FindFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocument::FindFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QTextDocument_FindFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QTextDocument::FindFlags::Int() == a0->operator QTextDocument::FindFlags::Int());
#line 46651 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
            sipReleaseType(const_cast< ::QTextDocument::FindFlags *>(a0),sipType_QTextDocument_FindFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QTextDocument_FindFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTextDocument_FindFlags___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QTextDocument_FindFlags___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTextDocument_FindFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTextDocument::FindFlags *sipCpp = reinterpret_cast< ::QTextDocument::FindFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextDocument_FindFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QTextDocument::FindFlags(*sipCpp ^ a0);
#line 46690 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTextDocument_FindFlags___xor__(PyObject *,PyObject *);}
static PyObject *slot_QTextDocument_FindFlags___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextDocument::FindFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QTextDocument_FindFlags, &a0, &a0State, &a1))
        {
             ::QTextDocument::FindFlags*sipRes;

            sipRes = new  ::QTextDocument::FindFlags((*a0 ^ a1));
            sipReleaseType(a0,sipType_QTextDocument_FindFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTextDocument_FindFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QTextDocument_FindFlags___ior__(PyObject *,PyObject *);}
static PyObject *slot_QTextDocument_FindFlags___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTextDocument_FindFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTextDocument::FindFlags *sipCpp = reinterpret_cast< ::QTextDocument::FindFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextDocument_FindFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QTextDocument::FindFlags(*sipCpp | a0);
#line 46762 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTextDocument_FindFlags___or__(PyObject *,PyObject *);}
static PyObject *slot_QTextDocument_FindFlags___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextDocument::FindFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QTextDocument_FindFlags, &a0, &a0State, &a1))
        {
             ::QTextDocument::FindFlags*sipRes;

            sipRes = new  ::QTextDocument::FindFlags((*a0 | a1));
            sipReleaseType(a0,sipType_QTextDocument_FindFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTextDocument_FindFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QTextDocument_FindFlags___iand__(PyObject *,PyObject *);}
static PyObject *slot_QTextDocument_FindFlags___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTextDocument_FindFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTextDocument::FindFlags *sipCpp = reinterpret_cast< ::QTextDocument::FindFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextDocument_FindFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QTextDocument::FindFlags::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTextDocument_FindFlags___and__(PyObject *,PyObject *);}
static PyObject *slot_QTextDocument_FindFlags___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextDocument::FindFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QTextDocument_FindFlags, &a0, &a0State, &a1))
        {
             ::QTextDocument::FindFlags*sipRes;

            sipRes = new  ::QTextDocument::FindFlags((*a0 & a1));
            sipReleaseType(a0,sipType_QTextDocument_FindFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTextDocument_FindFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QTextDocument_FindFlags___invert__(PyObject *);}
static PyObject *slot_QTextDocument_FindFlags___invert__(PyObject *sipSelf)
{
     ::QTextDocument::FindFlags *sipCpp = reinterpret_cast< ::QTextDocument::FindFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextDocument_FindFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QTextDocument::FindFlags*sipRes;

            sipRes = new  ::QTextDocument::FindFlags(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QTextDocument_FindFlags,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QTextDocument_FindFlags___int__(PyObject *);}
static PyObject *slot_QTextDocument_FindFlags___int__(PyObject *sipSelf)
{
     ::QTextDocument::FindFlags *sipCpp = reinterpret_cast< ::QTextDocument::FindFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextDocument_FindFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextDocument_FindFlags(void *, int);}
static void release_QTextDocument_FindFlags(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextDocument::FindFlags *>(sipCppV);
}


extern "C" {static void assign_QTextDocument_FindFlags(void *, SIP_SSIZE_T, void *);}
static void assign_QTextDocument_FindFlags(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTextDocument::FindFlags *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTextDocument::FindFlags *>(sipSrc);
}


extern "C" {static void *array_QTextDocument_FindFlags(SIP_SSIZE_T);}
static void *array_QTextDocument_FindFlags(SIP_SSIZE_T sipNrElem)
{
    return new  ::QTextDocument::FindFlags[sipNrElem];
}


extern "C" {static void *copy_QTextDocument_FindFlags(const void *, SIP_SSIZE_T);}
static void *copy_QTextDocument_FindFlags(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QTextDocument::FindFlags(reinterpret_cast<const  ::QTextDocument::FindFlags *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextDocument_FindFlags(sipSimpleWrapper *);}
static void dealloc_QTextDocument_FindFlags(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextDocument_FindFlags(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextDocument_FindFlags(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextDocument_FindFlags(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextDocument::FindFlags *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTextDocument::FindFlags();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QTextDocument::FindFlags(a0);

            return sipCpp;
        }
    }

    {
        const  ::QTextDocument::FindFlags* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QTextDocument_FindFlags, &a0, &a0State))
        {
            sipCpp = new  ::QTextDocument::FindFlags(*a0);
            sipReleaseType(const_cast< ::QTextDocument::FindFlags *>(a0),sipType_QTextDocument_FindFlags,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QTextDocument_FindFlags(PyObject *, void **, int *, PyObject *);}
static int convertTo_QTextDocument_FindFlags(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QTextDocument::FindFlags **sipCppPtr = reinterpret_cast< ::QTextDocument::FindFlags **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QTextDocument::FindFlags is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QTextDocument_FindFlag)) ||
            sipCanConvertToType(sipPy, sipType_QTextDocument_FindFlags, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QTextDocument_FindFlag)))
{
    *sipCppPtr = new QTextDocument::FindFlags(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QTextDocument::FindFlags *>(sipConvertToType(sipPy, sipType_QTextDocument_FindFlags, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 47030 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QTextDocument_FindFlags[] = {
    {(void *)slot_QTextDocument_FindFlags___hash__, hash_slot},
    {(void *)slot_QTextDocument_FindFlags___bool__, bool_slot},
    {(void *)slot_QTextDocument_FindFlags___ne__, ne_slot},
    {(void *)slot_QTextDocument_FindFlags___eq__, eq_slot},
    {(void *)slot_QTextDocument_FindFlags___ixor__, ixor_slot},
    {(void *)slot_QTextDocument_FindFlags___xor__, xor_slot},
    {(void *)slot_QTextDocument_FindFlags___ior__, ior_slot},
    {(void *)slot_QTextDocument_FindFlags___or__, or_slot},
    {(void *)slot_QTextDocument_FindFlags___iand__, iand_slot},
    {(void *)slot_QTextDocument_FindFlags___and__, and_slot},
    {(void *)slot_QTextDocument_FindFlags___invert__, invert_slot},
    {(void *)slot_QTextDocument_FindFlags___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QTextDocument_FindFlags, "\1QTextDocument.FindFlags()\n"
"QTextDocument.FindFlags(Union[QTextDocument.FindFlags, QTextDocument.FindFlag])\n"
"QTextDocument.FindFlags(QTextDocument.FindFlags)");


static pyqt5ClassPluginDef plugin_QTextDocument_FindFlags = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextDocument_FindFlags = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextDocument__FindFlags,
        {SIP_NULLPTR},
        &plugin_QTextDocument_FindFlags
    },
    {
        sipNameNr_FindFlags,
        {296, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextDocument_FindFlags,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QTextDocument_FindFlags,
    init_type_QTextDocument_FindFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextDocument_FindFlags,
    assign_QTextDocument_FindFlags,
    array_QTextDocument_FindFlags,
    copy_QTextDocument_FindFlags,
    release_QTextDocument_FindFlags,
    SIP_NULLPTR,
    convertTo_QTextDocument_FindFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 47118 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 47122 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 47125 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 47128 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 47131 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "sip/QtCore/qchar.sip"
#include <qchar.h>
#line 47134 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 118 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 47137 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 47140 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 97 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 47143 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 47146 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 47149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 47152 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 47155 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 47158 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextcursor.sip"
#include <qtextcursor.h>
#line 47161 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 47164 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 47167 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 47170 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 47173 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 47176 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 47179 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 47182 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 47185 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 47188 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 47191 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 47194 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 47197 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 47200 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 47203 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 47206 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 47209 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 47212 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


class sipQTextDocument : public  ::QTextDocument
{
public:
    sipQTextDocument( ::QObject*);
    sipQTextDocument(const  ::QString&, ::QObject*);
    virtual ~sipQTextDocument();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QVariant loadResource(int,const  ::QUrl&) SIP_OVERRIDE;
     ::QTextObject* createObject(const  ::QTextFormat&) SIP_OVERRIDE;
    void clear() SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTextDocument(const sipQTextDocument &);
    sipQTextDocument &operator = (const sipQTextDocument &);

    char sipPyMethods[10];
};

sipQTextDocument::sipQTextDocument( ::QObject*a0):  ::QTextDocument(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTextDocument::sipQTextDocument(const  ::QString& a0, ::QObject*a1):  ::QTextDocument(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTextDocument::~sipQTextDocument()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQTextDocument::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QTextDocument);

    return  ::QTextDocument::metaObject();
}

int sipQTextDocument::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QTextDocument::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QTextDocument,_c,_id,_a);

    return _id;
}

void *sipQTextDocument::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QTextDocument, _clname, &sipCpp) ? sipCpp :  ::QTextDocument::qt_metacast(_clname));
}

 ::QVariant sipQTextDocument::loadResource(int a0,const  ::QUrl& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_loadResource);

    if (!sipMeth)
        return  ::QTextDocument::loadResource(a0,a1);

    extern  ::QVariant sipVH_QtGui_105(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,const  ::QUrl&);

    return sipVH_QtGui_105(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QTextObject* sipQTextDocument::createObject(const  ::QTextFormat& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_createObject);

    if (!sipMeth)
        return  ::QTextDocument::createObject(a0);

    extern  ::QTextObject* sipVH_QtGui_104(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QTextFormat&);

    return sipVH_QtGui_104(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextDocument::clear()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_clear);

    if (!sipMeth)
    {
         ::QTextDocument::clear();
        return;
    }

    extern void sipVH_QtGui_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtGui_39(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQTextDocument::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QTextDocument::event(a0);

    extern bool sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_5(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQTextDocument::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QTextDocument::eventFilter(a0,a1);

    extern bool sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_4(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQTextDocument::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QTextDocument::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_3(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextDocument::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QTextDocument::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_2(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextDocument::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QTextDocument::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_1(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextDocument::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QTextDocument::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextDocument::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QTextDocument::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QTextDocument_clone, "clone(self, parent: QObject = None) -> QTextDocument");

extern "C" {static PyObject *meth_QTextDocument_clone(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_clone(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;
        sipWrapper *sipOwner = SIP_NULLPTR;
        const  ::QTextDocument *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|JH", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QObject, &a0, &sipOwner))
        {
             ::QTextDocument*sipRes;

            sipRes = sipCpp->clone(a0);

            return sipConvertFromNewType(sipRes,sipType_QTextDocument,(PyObject *)sipOwner);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_clone, doc_QTextDocument_clone);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QTextDocument_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_isEmpty, doc_QTextDocument_isEmpty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_clear, "clear(self)");

extern "C" {static PyObject *meth_QTextDocument_clear(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QTextDocument::clear() : sipCpp->clear());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_clear, doc_QTextDocument_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_setUndoRedoEnabled, "setUndoRedoEnabled(self, bool)");

extern "C" {static PyObject *meth_QTextDocument_setUndoRedoEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_setUndoRedoEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextDocument, &sipCpp, &a0))
        {
            sipCpp->setUndoRedoEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_setUndoRedoEnabled, doc_QTextDocument_setUndoRedoEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_isUndoRedoEnabled, "isUndoRedoEnabled(self) -> bool");

extern "C" {static PyObject *meth_QTextDocument_isUndoRedoEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_isUndoRedoEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isUndoRedoEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_isUndoRedoEnabled, doc_QTextDocument_isUndoRedoEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_isUndoAvailable, "isUndoAvailable(self) -> bool");

extern "C" {static PyObject *meth_QTextDocument_isUndoAvailable(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_isUndoAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isUndoAvailable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_isUndoAvailable, doc_QTextDocument_isUndoAvailable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_isRedoAvailable, "isRedoAvailable(self) -> bool");

extern "C" {static PyObject *meth_QTextDocument_isRedoAvailable(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_isRedoAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRedoAvailable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_isRedoAvailable, doc_QTextDocument_isRedoAvailable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_setDocumentLayout, "setDocumentLayout(self, QAbstractTextDocumentLayout)");

extern "C" {static PyObject *meth_QTextDocument_setDocumentLayout(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_setDocumentLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractTextDocumentLayout* a0;
         ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QAbstractTextDocumentLayout, &a0))
        {
            sipCpp->setDocumentLayout(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_setDocumentLayout, doc_QTextDocument_setDocumentLayout);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_documentLayout, "documentLayout(self) -> QAbstractTextDocumentLayout");

extern "C" {static PyObject *meth_QTextDocument_documentLayout(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_documentLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
             ::QAbstractTextDocumentLayout*sipRes;

            sipRes = sipCpp->documentLayout();

            return sipConvertFromType(sipRes,sipType_QAbstractTextDocumentLayout,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_documentLayout, doc_QTextDocument_documentLayout);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_setMetaInformation, "setMetaInformation(self, QTextDocument.MetaInformation, str)");

extern "C" {static PyObject *meth_QTextDocument_setMetaInformation(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_setMetaInformation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextDocument::MetaInformation a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QTextDocument_MetaInformation, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->setMetaInformation(a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_setMetaInformation, doc_QTextDocument_setMetaInformation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_metaInformation, "metaInformation(self, QTextDocument.MetaInformation) -> str");

extern "C" {static PyObject *meth_QTextDocument_metaInformation(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_metaInformation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextDocument::MetaInformation a0;
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QTextDocument_MetaInformation, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->metaInformation(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_metaInformation, doc_QTextDocument_metaInformation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_toHtml, "toHtml(self, encoding: Union[QByteArray, bytes, bytearray] = QByteArray()) -> str");

extern "C" {static PyObject *meth_QTextDocument_toHtml(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_toHtml(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray& a0def = QByteArray();
        const  ::QByteArray* a0 = &a0def;
        int a0State = 0;
        const  ::QTextDocument *sipCpp;

        static const char *sipKwdList[] = {
            sipName_encoding,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toHtml(*a0));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_toHtml, doc_QTextDocument_toHtml);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_setHtml, "setHtml(self, str)");

extern "C" {static PyObject *meth_QTextDocument_setHtml(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_setHtml(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setHtml(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_setHtml, doc_QTextDocument_setHtml);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_toPlainText, "toPlainText(self) -> str");

extern "C" {static PyObject *meth_QTextDocument_toPlainText(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_toPlainText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toPlainText());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_toPlainText, doc_QTextDocument_toPlainText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_setPlainText, "setPlainText(self, str)");

extern "C" {static PyObject *meth_QTextDocument_setPlainText(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_setPlainText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setPlainText(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_setPlainText, doc_QTextDocument_setPlainText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_find, "find(self, str, position: int = 0, options: QTextDocument.FindFlags = 0) -> QTextCursor\n"
"find(self, QRegExp, position: int = 0, options: QTextDocument.FindFlags = 0) -> QTextCursor\n"
"find(self, QRegularExpression, position: int = 0, options: QTextDocument.FindFlags = 0) -> QTextCursor\n"
"find(self, str, QTextCursor, options: QTextDocument.FindFlags = 0) -> QTextCursor\n"
"find(self, QRegExp, QTextCursor, options: QTextDocument.FindFlags = 0) -> QTextCursor\n"
"find(self, QRegularExpression, QTextCursor, options: QTextDocument.FindFlags = 0) -> QTextCursor");

extern "C" {static PyObject *meth_QTextDocument_find(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_find(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1 = 0;
         ::QTextDocument::FindFlags a2def = 0;
         ::QTextDocument::FindFlags* a2 = &a2def;
        int a2State = 0;
        const  ::QTextDocument *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_position,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|iJ1", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QString,&a0, &a0State, &a1, sipType_QTextDocument_FindFlags, &a2, &a2State))
        {
             ::QTextCursor*sipRes;

            sipRes = new  ::QTextCursor(sipCpp->find(*a0,a1,*a2));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a2,sipType_QTextDocument_FindFlags,a2State);

            return sipConvertFromNewType(sipRes,sipType_QTextCursor,SIP_NULLPTR);
        }
    }

    {
        const  ::QRegExp* a0;
        int a1 = 0;
         ::QTextDocument::FindFlags a2def = 0;
         ::QTextDocument::FindFlags* a2 = &a2def;
        int a2State = 0;
        const  ::QTextDocument *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_position,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|iJ1", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QRegExp, &a0, &a1, sipType_QTextDocument_FindFlags, &a2, &a2State))
        {
             ::QTextCursor*sipRes;

            sipRes = new  ::QTextCursor(sipCpp->find(*a0,a1,*a2));
            sipReleaseType(a2,sipType_QTextDocument_FindFlags,a2State);

            return sipConvertFromNewType(sipRes,sipType_QTextCursor,SIP_NULLPTR);
        }
    }

    {
        const  ::QRegularExpression* a0;
        int a1 = 0;
         ::QTextDocument::FindFlags a2def = 0;
         ::QTextDocument::FindFlags* a2 = &a2def;
        int a2State = 0;
        const  ::QTextDocument *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_position,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|iJ1", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QRegularExpression, &a0, &a1, sipType_QTextDocument_FindFlags, &a2, &a2State))
        {
             ::QTextCursor*sipRes;

            sipRes = new  ::QTextCursor(sipCpp->find(*a0,a1,*a2));
            sipReleaseType(a2,sipType_QTextDocument_FindFlags,a2State);

            return sipConvertFromNewType(sipRes,sipType_QTextCursor,SIP_NULLPTR);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QTextCursor* a1;
         ::QTextDocument::FindFlags a2def = 0;
         ::QTextDocument::FindFlags* a2 = &a2def;
        int a2State = 0;
        const  ::QTextDocument *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J9|J1", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QString,&a0, &a0State, sipType_QTextCursor, &a1, sipType_QTextDocument_FindFlags, &a2, &a2State))
        {
             ::QTextCursor*sipRes;

            sipRes = new  ::QTextCursor(sipCpp->find(*a0,*a1,*a2));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a2,sipType_QTextDocument_FindFlags,a2State);

            return sipConvertFromNewType(sipRes,sipType_QTextCursor,SIP_NULLPTR);
        }
    }

    {
        const  ::QRegExp* a0;
        const  ::QTextCursor* a1;
         ::QTextDocument::FindFlags a2def = 0;
         ::QTextDocument::FindFlags* a2 = &a2def;
        int a2State = 0;
        const  ::QTextDocument *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J9|J1", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QRegExp, &a0, sipType_QTextCursor, &a1, sipType_QTextDocument_FindFlags, &a2, &a2State))
        {
             ::QTextCursor*sipRes;

            sipRes = new  ::QTextCursor(sipCpp->find(*a0,*a1,*a2));
            sipReleaseType(a2,sipType_QTextDocument_FindFlags,a2State);

            return sipConvertFromNewType(sipRes,sipType_QTextCursor,SIP_NULLPTR);
        }
    }

    {
        const  ::QRegularExpression* a0;
        const  ::QTextCursor* a1;
         ::QTextDocument::FindFlags a2def = 0;
         ::QTextDocument::FindFlags* a2 = &a2def;
        int a2State = 0;
        const  ::QTextDocument *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J9|J1", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QRegularExpression, &a0, sipType_QTextCursor, &a1, sipType_QTextDocument_FindFlags, &a2, &a2State))
        {
             ::QTextCursor*sipRes;

            sipRes = new  ::QTextCursor(sipCpp->find(*a0,*a1,*a2));
            sipReleaseType(a2,sipType_QTextDocument_FindFlags,a2State);

            return sipConvertFromNewType(sipRes,sipType_QTextCursor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_find, doc_QTextDocument_find);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_rootFrame, "rootFrame(self) -> QTextFrame");

extern "C" {static PyObject *meth_QTextDocument_rootFrame(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_rootFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
             ::QTextFrame*sipRes;

            sipRes = sipCpp->rootFrame();

            return sipConvertFromType(sipRes,sipType_QTextFrame,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_rootFrame, doc_QTextDocument_rootFrame);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_object, "object(self, int) -> QTextObject");

extern "C" {static PyObject *meth_QTextDocument_object(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_object(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextDocument, &sipCpp, &a0))
        {
             ::QTextObject*sipRes;

            sipRes = sipCpp->object(a0);

            return sipConvertFromType(sipRes,sipType_QTextObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_object, doc_QTextDocument_object);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_objectForFormat, "objectForFormat(self, QTextFormat) -> QTextObject");

extern "C" {static PyObject *meth_QTextDocument_objectForFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_objectForFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFormat* a0;
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QTextFormat, &a0))
        {
             ::QTextObject*sipRes;

            sipRes = sipCpp->objectForFormat(*a0);

            return sipConvertFromType(sipRes,sipType_QTextObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_objectForFormat, doc_QTextDocument_objectForFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_findBlock, "findBlock(self, int) -> QTextBlock");

extern "C" {static PyObject *meth_QTextDocument_findBlock(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_findBlock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextDocument, &sipCpp, &a0))
        {
             ::QTextBlock*sipRes;

            sipRes = new  ::QTextBlock(sipCpp->findBlock(a0));

            return sipConvertFromNewType(sipRes,sipType_QTextBlock,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_findBlock, doc_QTextDocument_findBlock);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_begin, "begin(self) -> QTextBlock");

extern "C" {static PyObject *meth_QTextDocument_begin(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_begin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
             ::QTextBlock*sipRes;

            sipRes = new  ::QTextBlock(sipCpp->begin());

            return sipConvertFromNewType(sipRes,sipType_QTextBlock,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_begin, doc_QTextDocument_begin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_end, "end(self) -> QTextBlock");

extern "C" {static PyObject *meth_QTextDocument_end(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_end(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
             ::QTextBlock*sipRes;

            sipRes = new  ::QTextBlock(sipCpp->end());

            return sipConvertFromNewType(sipRes,sipType_QTextBlock,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_end, doc_QTextDocument_end);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_setPageSize, "setPageSize(self, QSizeF)");

extern "C" {static PyObject *meth_QTextDocument_setPageSize(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_setPageSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSizeF* a0;
         ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QSizeF, &a0))
        {
            sipCpp->setPageSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_setPageSize, doc_QTextDocument_setPageSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_pageSize, "pageSize(self) -> QSizeF");

extern "C" {static PyObject *meth_QTextDocument_pageSize(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_pageSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
             ::QSizeF*sipRes;

            sipRes = new  ::QSizeF(sipCpp->pageSize());

            return sipConvertFromNewType(sipRes,sipType_QSizeF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_pageSize, doc_QTextDocument_pageSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_setDefaultFont, "setDefaultFont(self, QFont)");

extern "C" {static PyObject *meth_QTextDocument_setDefaultFont(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_setDefaultFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont* a0;
         ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QFont, &a0))
        {
            sipCpp->setDefaultFont(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_setDefaultFont, doc_QTextDocument_setDefaultFont);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_defaultFont, "defaultFont(self) -> QFont");

extern "C" {static PyObject *meth_QTextDocument_defaultFont(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_defaultFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
             ::QFont*sipRes;

            sipRes = new  ::QFont(sipCpp->defaultFont());

            return sipConvertFromNewType(sipRes,sipType_QFont,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_defaultFont, doc_QTextDocument_defaultFont);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_pageCount, "pageCount(self) -> int");

extern "C" {static PyObject *meth_QTextDocument_pageCount(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_pageCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->pageCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_pageCount, doc_QTextDocument_pageCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_isModified, "isModified(self) -> bool");

extern "C" {static PyObject *meth_QTextDocument_isModified(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_isModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isModified();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_isModified, doc_QTextDocument_isModified);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_resource, "resource(self, int, QUrl) -> Any");

extern "C" {static PyObject *meth_QTextDocument_resource(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_resource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QUrl* a1;
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QTextDocument, &sipCpp, &a0, sipType_QUrl, &a1))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->resource(a0,*a1));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_resource, doc_QTextDocument_resource);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_addResource, "addResource(self, int, QUrl, Any)");

extern "C" {static PyObject *meth_QTextDocument_addResource(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_addResource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QUrl* a1;
        const  ::QVariant* a2;
        int a2State = 0;
         ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9J1", &sipSelf, sipType_QTextDocument, &sipCpp, &a0, sipType_QUrl, &a1, sipType_QVariant, &a2, &a2State))
        {
            sipCpp->addResource(a0,*a1,*a2);
            sipReleaseType(const_cast< ::QVariant *>(a2),sipType_QVariant,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_addResource, doc_QTextDocument_addResource);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_allFormats, "allFormats(self) -> List[QTextFormat]");

extern "C" {static PyObject *meth_QTextDocument_allFormats(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_allFormats(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            QVector< ::QTextFormat>*sipRes;

            sipRes = new QVector< ::QTextFormat>(sipCpp->allFormats());

            return sipConvertFromNewType(sipRes,sipType_QVector_0100QTextFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_allFormats, doc_QTextDocument_allFormats);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_markContentsDirty, "markContentsDirty(self, int, int)");

extern "C" {static PyObject *meth_QTextDocument_markContentsDirty(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_markContentsDirty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTextDocument, &sipCpp, &a0, &a1))
        {
            sipCpp->markContentsDirty(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_markContentsDirty, doc_QTextDocument_markContentsDirty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_setUseDesignMetrics, "setUseDesignMetrics(self, bool)");

extern "C" {static PyObject *meth_QTextDocument_setUseDesignMetrics(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_setUseDesignMetrics(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextDocument, &sipCpp, &a0))
        {
            sipCpp->setUseDesignMetrics(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_setUseDesignMetrics, doc_QTextDocument_setUseDesignMetrics);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_useDesignMetrics, "useDesignMetrics(self) -> bool");

extern "C" {static PyObject *meth_QTextDocument_useDesignMetrics(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_useDesignMetrics(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->useDesignMetrics();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_useDesignMetrics, doc_QTextDocument_useDesignMetrics);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_undo, "undo(self)\n"
"undo(self, QTextCursor)");

extern "C" {static PyObject *meth_QTextDocument_undo(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_undo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            sipCpp->undo();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QTextCursor* a0;
         ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QTextCursor, &a0))
        {
            sipCpp->undo(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_undo, doc_QTextDocument_undo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_redo, "redo(self)\n"
"redo(self, QTextCursor)");

extern "C" {static PyObject *meth_QTextDocument_redo(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_redo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            sipCpp->redo();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QTextCursor* a0;
         ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QTextCursor, &a0))
        {
            sipCpp->redo(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_redo, doc_QTextDocument_redo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_setModified, "setModified(self, on: bool = True)");

extern "C" {static PyObject *meth_QTextDocument_setModified(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_setModified(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0 = 1;
         ::QTextDocument *sipCpp;

        static const char *sipKwdList[] = {
            sipName_on,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_QTextDocument, &sipCpp, &a0))
        {
            sipCpp->setModified(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_setModified, doc_QTextDocument_setModified);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_createObject, "createObject(self, QTextFormat) -> QTextObject");

extern "C" {static PyObject *meth_QTextDocument_createObject(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_createObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QTextFormat* a0;
         ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QTextFormat, &a0))
        {
             ::QTextObject*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QTextDocument::createObject(*a0) : sipCpp->createObject(*a0));

            return sipConvertFromNewType(sipRes,sipType_QTextObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_createObject, doc_QTextDocument_createObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_loadResource, "loadResource(self, int, QUrl) -> Any");

extern "C" {static PyObject *meth_QTextDocument_loadResource(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_loadResource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const  ::QUrl* a1;
         ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "piJ9", &sipSelf, sipType_QTextDocument, &sipCpp, &a0, sipType_QUrl, &a1))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QTextDocument::loadResource(a0,*a1) : sipCpp->loadResource(a0,*a1)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_loadResource, doc_QTextDocument_loadResource);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_drawContents, "drawContents(self, QPainter, rect: QRectF = QRectF())");

extern "C" {static PyObject *meth_QTextDocument_drawContents(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_drawContents(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPainter* a0;
        const  ::QRectF& a1def = QRectF();
        const  ::QRectF* a1 = &a1def;
         ::QTextDocument *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_rect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8|J9", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QPainter, &a0, sipType_QRectF, &a1))
        {
            sipCpp->drawContents(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_drawContents, doc_QTextDocument_drawContents);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_setTextWidth, "setTextWidth(self, float)");

extern "C" {static PyObject *meth_QTextDocument_setTextWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_setTextWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextDocument, &sipCpp, &a0))
        {
            sipCpp->setTextWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_setTextWidth, doc_QTextDocument_setTextWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_textWidth, "textWidth(self) -> float");

extern "C" {static PyObject *meth_QTextDocument_textWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_textWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->textWidth();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_textWidth, doc_QTextDocument_textWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_idealWidth, "idealWidth(self) -> float");

extern "C" {static PyObject *meth_QTextDocument_idealWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_idealWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->idealWidth();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_idealWidth, doc_QTextDocument_idealWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_adjustSize, "adjustSize(self)");

extern "C" {static PyObject *meth_QTextDocument_adjustSize(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_adjustSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            sipCpp->adjustSize();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_adjustSize, doc_QTextDocument_adjustSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_size, "size(self) -> QSizeF");

extern "C" {static PyObject *meth_QTextDocument_size(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
             ::QSizeF*sipRes;

            sipRes = new  ::QSizeF(sipCpp->size());

            return sipConvertFromNewType(sipRes,sipType_QSizeF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_size, doc_QTextDocument_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_blockCount, "blockCount(self) -> int");

extern "C" {static PyObject *meth_QTextDocument_blockCount(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_blockCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->blockCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_blockCount, doc_QTextDocument_blockCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_setDefaultStyleSheet, "setDefaultStyleSheet(self, str)");

extern "C" {static PyObject *meth_QTextDocument_setDefaultStyleSheet(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_setDefaultStyleSheet(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setDefaultStyleSheet(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_setDefaultStyleSheet, doc_QTextDocument_setDefaultStyleSheet);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_defaultStyleSheet, "defaultStyleSheet(self) -> str");

extern "C" {static PyObject *meth_QTextDocument_defaultStyleSheet(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_defaultStyleSheet(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->defaultStyleSheet());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_defaultStyleSheet, doc_QTextDocument_defaultStyleSheet);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_maximumBlockCount, "maximumBlockCount(self) -> int");

extern "C" {static PyObject *meth_QTextDocument_maximumBlockCount(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_maximumBlockCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maximumBlockCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_maximumBlockCount, doc_QTextDocument_maximumBlockCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_setMaximumBlockCount, "setMaximumBlockCount(self, int)");

extern "C" {static PyObject *meth_QTextDocument_setMaximumBlockCount(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_setMaximumBlockCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextDocument, &sipCpp, &a0))
        {
            sipCpp->setMaximumBlockCount(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_setMaximumBlockCount, doc_QTextDocument_setMaximumBlockCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_defaultTextOption, "defaultTextOption(self) -> QTextOption");

extern "C" {static PyObject *meth_QTextDocument_defaultTextOption(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_defaultTextOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
             ::QTextOption*sipRes;

            sipRes = new  ::QTextOption(sipCpp->defaultTextOption());

            return sipConvertFromNewType(sipRes,sipType_QTextOption,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_defaultTextOption, doc_QTextDocument_defaultTextOption);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_setDefaultTextOption, "setDefaultTextOption(self, QTextOption)");

extern "C" {static PyObject *meth_QTextDocument_setDefaultTextOption(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_setDefaultTextOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextOption* a0;
         ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QTextOption, &a0))
        {
            sipCpp->setDefaultTextOption(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_setDefaultTextOption, doc_QTextDocument_setDefaultTextOption);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_revision, "revision(self) -> int");

extern "C" {static PyObject *meth_QTextDocument_revision(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_revision(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->revision();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_revision, doc_QTextDocument_revision);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_findBlockByNumber, "findBlockByNumber(self, int) -> QTextBlock");

extern "C" {static PyObject *meth_QTextDocument_findBlockByNumber(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_findBlockByNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextDocument, &sipCpp, &a0))
        {
             ::QTextBlock*sipRes;

            sipRes = new  ::QTextBlock(sipCpp->findBlockByNumber(a0));

            return sipConvertFromNewType(sipRes,sipType_QTextBlock,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_findBlockByNumber, doc_QTextDocument_findBlockByNumber);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_findBlockByLineNumber, "findBlockByLineNumber(self, int) -> QTextBlock");

extern "C" {static PyObject *meth_QTextDocument_findBlockByLineNumber(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_findBlockByLineNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextDocument, &sipCpp, &a0))
        {
             ::QTextBlock*sipRes;

            sipRes = new  ::QTextBlock(sipCpp->findBlockByLineNumber(a0));

            return sipConvertFromNewType(sipRes,sipType_QTextBlock,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_findBlockByLineNumber, doc_QTextDocument_findBlockByLineNumber);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_firstBlock, "firstBlock(self) -> QTextBlock");

extern "C" {static PyObject *meth_QTextDocument_firstBlock(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_firstBlock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
             ::QTextBlock*sipRes;

            sipRes = new  ::QTextBlock(sipCpp->firstBlock());

            return sipConvertFromNewType(sipRes,sipType_QTextBlock,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_firstBlock, doc_QTextDocument_firstBlock);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_lastBlock, "lastBlock(self) -> QTextBlock");

extern "C" {static PyObject *meth_QTextDocument_lastBlock(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_lastBlock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
             ::QTextBlock*sipRes;

            sipRes = new  ::QTextBlock(sipCpp->lastBlock());

            return sipConvertFromNewType(sipRes,sipType_QTextBlock,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_lastBlock, doc_QTextDocument_lastBlock);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_indentWidth, "indentWidth(self) -> float");

extern "C" {static PyObject *meth_QTextDocument_indentWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_indentWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->indentWidth();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_indentWidth, doc_QTextDocument_indentWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_setIndentWidth, "setIndentWidth(self, float)");

extern "C" {static PyObject *meth_QTextDocument_setIndentWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_setIndentWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextDocument, &sipCpp, &a0))
        {
            sipCpp->setIndentWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_setIndentWidth, doc_QTextDocument_setIndentWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_characterAt, "characterAt(self, int) -> str");

extern "C" {static PyObject *meth_QTextDocument_characterAt(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_characterAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextDocument, &sipCpp, &a0))
        {
             ::QChar*sipRes;

            sipRes = new  ::QChar(sipCpp->characterAt(a0));

            return sipConvertFromNewType(sipRes,sipType_QChar,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_characterAt, doc_QTextDocument_characterAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_documentMargin, "documentMargin(self) -> float");

extern "C" {static PyObject *meth_QTextDocument_documentMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_documentMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->documentMargin();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_documentMargin, doc_QTextDocument_documentMargin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_setDocumentMargin, "setDocumentMargin(self, float)");

extern "C" {static PyObject *meth_QTextDocument_setDocumentMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_setDocumentMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextDocument, &sipCpp, &a0))
        {
            sipCpp->setDocumentMargin(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_setDocumentMargin, doc_QTextDocument_setDocumentMargin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_lineCount, "lineCount(self) -> int");

extern "C" {static PyObject *meth_QTextDocument_lineCount(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_lineCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->lineCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_lineCount, doc_QTextDocument_lineCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_characterCount, "characterCount(self) -> int");

extern "C" {static PyObject *meth_QTextDocument_characterCount(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_characterCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->characterCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_characterCount, doc_QTextDocument_characterCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_availableUndoSteps, "availableUndoSteps(self) -> int");

extern "C" {static PyObject *meth_QTextDocument_availableUndoSteps(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_availableUndoSteps(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->availableUndoSteps();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_availableUndoSteps, doc_QTextDocument_availableUndoSteps);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_availableRedoSteps, "availableRedoSteps(self) -> int");

extern "C" {static PyObject *meth_QTextDocument_availableRedoSteps(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_availableRedoSteps(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->availableRedoSteps();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_availableRedoSteps, doc_QTextDocument_availableRedoSteps);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_clearUndoRedoStacks, "clearUndoRedoStacks(self, stacks: QTextDocument.Stacks = QTextDocument.UndoAndRedoStacks)");

extern "C" {static PyObject *meth_QTextDocument_clearUndoRedoStacks(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_clearUndoRedoStacks(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextDocument::Stacks a0 = QTextDocument::UndoAndRedoStacks;
         ::QTextDocument *sipCpp;

        static const char *sipKwdList[] = {
            sipName_stacks,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|E", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QTextDocument_Stacks, &a0))
        {
            sipCpp->clearUndoRedoStacks(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_clearUndoRedoStacks, doc_QTextDocument_clearUndoRedoStacks);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_defaultCursorMoveStyle, "defaultCursorMoveStyle(self) -> Qt.CursorMoveStyle");

extern "C" {static PyObject *meth_QTextDocument_defaultCursorMoveStyle(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_defaultCursorMoveStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
             ::Qt::CursorMoveStyle sipRes;

            sipRes = sipCpp->defaultCursorMoveStyle();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_CursorMoveStyle);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_defaultCursorMoveStyle, doc_QTextDocument_defaultCursorMoveStyle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_setDefaultCursorMoveStyle, "setDefaultCursorMoveStyle(self, Qt.CursorMoveStyle)");

extern "C" {static PyObject *meth_QTextDocument_setDefaultCursorMoveStyle(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_setDefaultCursorMoveStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::CursorMoveStyle a0;
         ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_Qt_CursorMoveStyle, &a0))
        {
            sipCpp->setDefaultCursorMoveStyle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_setDefaultCursorMoveStyle, doc_QTextDocument_setDefaultCursorMoveStyle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_baseUrl, "baseUrl(self) -> QUrl");

extern "C" {static PyObject *meth_QTextDocument_baseUrl(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_baseUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl(sipCpp->baseUrl());

            return sipConvertFromNewType(sipRes,sipType_QUrl,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_baseUrl, doc_QTextDocument_baseUrl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_setBaseUrl, "setBaseUrl(self, QUrl)");

extern "C" {static PyObject *meth_QTextDocument_setBaseUrl(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_setBaseUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl* a0;
         ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->setBaseUrl(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_setBaseUrl, doc_QTextDocument_setBaseUrl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextDocument_toRawText, "toRawText(self) -> str");

extern "C" {static PyObject *meth_QTextDocument_toRawText(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_toRawText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toRawText());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_toRawText, doc_QTextDocument_toRawText);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QTextDocument(void *, const sipTypeDef *);}
static void *cast_QTextDocument(void *sipCppV, const sipTypeDef *targetType)
{
     ::QTextDocument *sipCpp = reinterpret_cast< ::QTextDocument *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextDocument(void *, int);}
static void release_QTextDocument(void *sipCppV, int)
{
     ::QTextDocument *sipCpp = reinterpret_cast< ::QTextDocument *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QTextDocument(sipSimpleWrapper *);}
static void dealloc_QTextDocument(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQTextDocument *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextDocument(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QTextDocument(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextDocument(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQTextDocument *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQTextDocument(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QString,&a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQTextDocument(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTextDocument[] = {{25, 0, 1}};


static PyMethodDef methods_QTextDocument[] = {
    {SIP_MLNAME_CAST(sipName_addResource), meth_QTextDocument_addResource, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_addResource)},
    {SIP_MLNAME_CAST(sipName_adjustSize), meth_QTextDocument_adjustSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_adjustSize)},
    {SIP_MLNAME_CAST(sipName_allFormats), meth_QTextDocument_allFormats, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_allFormats)},
    {SIP_MLNAME_CAST(sipName_availableRedoSteps), meth_QTextDocument_availableRedoSteps, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_availableRedoSteps)},
    {SIP_MLNAME_CAST(sipName_availableUndoSteps), meth_QTextDocument_availableUndoSteps, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_availableUndoSteps)},
    {SIP_MLNAME_CAST(sipName_baseUrl), meth_QTextDocument_baseUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_baseUrl)},
    {SIP_MLNAME_CAST(sipName_begin), meth_QTextDocument_begin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_begin)},
    {SIP_MLNAME_CAST(sipName_blockCount), meth_QTextDocument_blockCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_blockCount)},
    {SIP_MLNAME_CAST(sipName_characterAt), meth_QTextDocument_characterAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_characterAt)},
    {SIP_MLNAME_CAST(sipName_characterCount), meth_QTextDocument_characterCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_characterCount)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QTextDocument_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_clear)},
    {SIP_MLNAME_CAST(sipName_clearUndoRedoStacks), SIP_MLMETH_CAST(meth_QTextDocument_clearUndoRedoStacks), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextDocument_clearUndoRedoStacks)},
    {SIP_MLNAME_CAST(sipName_clone), SIP_MLMETH_CAST(meth_QTextDocument_clone), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextDocument_clone)},
    {SIP_MLNAME_CAST(sipName_createObject), meth_QTextDocument_createObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_createObject)},
    {SIP_MLNAME_CAST(sipName_defaultCursorMoveStyle), meth_QTextDocument_defaultCursorMoveStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_defaultCursorMoveStyle)},
    {SIP_MLNAME_CAST(sipName_defaultFont), meth_QTextDocument_defaultFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_defaultFont)},
    {SIP_MLNAME_CAST(sipName_defaultStyleSheet), meth_QTextDocument_defaultStyleSheet, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_defaultStyleSheet)},
    {SIP_MLNAME_CAST(sipName_defaultTextOption), meth_QTextDocument_defaultTextOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_defaultTextOption)},
    {SIP_MLNAME_CAST(sipName_documentLayout), meth_QTextDocument_documentLayout, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_documentLayout)},
    {SIP_MLNAME_CAST(sipName_documentMargin), meth_QTextDocument_documentMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_documentMargin)},
    {SIP_MLNAME_CAST(sipName_drawContents), SIP_MLMETH_CAST(meth_QTextDocument_drawContents), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextDocument_drawContents)},
    {SIP_MLNAME_CAST(sipName_end), meth_QTextDocument_end, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_end)},
    {SIP_MLNAME_CAST(sipName_find), SIP_MLMETH_CAST(meth_QTextDocument_find), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextDocument_find)},
    {SIP_MLNAME_CAST(sipName_findBlock), meth_QTextDocument_findBlock, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_findBlock)},
    {SIP_MLNAME_CAST(sipName_findBlockByLineNumber), meth_QTextDocument_findBlockByLineNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_findBlockByLineNumber)},
    {SIP_MLNAME_CAST(sipName_findBlockByNumber), meth_QTextDocument_findBlockByNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_findBlockByNumber)},
    {SIP_MLNAME_CAST(sipName_firstBlock), meth_QTextDocument_firstBlock, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_firstBlock)},
    {SIP_MLNAME_CAST(sipName_idealWidth), meth_QTextDocument_idealWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_idealWidth)},
    {SIP_MLNAME_CAST(sipName_indentWidth), meth_QTextDocument_indentWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_indentWidth)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QTextDocument_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_isEmpty)},
    {SIP_MLNAME_CAST(sipName_isModified), meth_QTextDocument_isModified, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_isModified)},
    {SIP_MLNAME_CAST(sipName_isRedoAvailable), meth_QTextDocument_isRedoAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_isRedoAvailable)},
    {SIP_MLNAME_CAST(sipName_isUndoAvailable), meth_QTextDocument_isUndoAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_isUndoAvailable)},
    {SIP_MLNAME_CAST(sipName_isUndoRedoEnabled), meth_QTextDocument_isUndoRedoEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_isUndoRedoEnabled)},
    {SIP_MLNAME_CAST(sipName_lastBlock), meth_QTextDocument_lastBlock, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_lastBlock)},
    {SIP_MLNAME_CAST(sipName_lineCount), meth_QTextDocument_lineCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_lineCount)},
    {SIP_MLNAME_CAST(sipName_loadResource), meth_QTextDocument_loadResource, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_loadResource)},
    {SIP_MLNAME_CAST(sipName_markContentsDirty), meth_QTextDocument_markContentsDirty, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_markContentsDirty)},
    {SIP_MLNAME_CAST(sipName_maximumBlockCount), meth_QTextDocument_maximumBlockCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_maximumBlockCount)},
    {SIP_MLNAME_CAST(sipName_metaInformation), meth_QTextDocument_metaInformation, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_metaInformation)},
    {SIP_MLNAME_CAST(sipName_object), meth_QTextDocument_object, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_object)},
    {SIP_MLNAME_CAST(sipName_objectForFormat), meth_QTextDocument_objectForFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_objectForFormat)},
    {SIP_MLNAME_CAST(sipName_pageCount), meth_QTextDocument_pageCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_pageCount)},
    {SIP_MLNAME_CAST(sipName_pageSize), meth_QTextDocument_pageSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_pageSize)},
    {SIP_MLNAME_CAST(sipName_redo), meth_QTextDocument_redo, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_redo)},
    {SIP_MLNAME_CAST(sipName_resource), meth_QTextDocument_resource, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_resource)},
    {SIP_MLNAME_CAST(sipName_revision), meth_QTextDocument_revision, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_revision)},
    {SIP_MLNAME_CAST(sipName_rootFrame), meth_QTextDocument_rootFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_rootFrame)},
    {SIP_MLNAME_CAST(sipName_setBaseUrl), meth_QTextDocument_setBaseUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_setBaseUrl)},
    {SIP_MLNAME_CAST(sipName_setDefaultCursorMoveStyle), meth_QTextDocument_setDefaultCursorMoveStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_setDefaultCursorMoveStyle)},
    {SIP_MLNAME_CAST(sipName_setDefaultFont), meth_QTextDocument_setDefaultFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_setDefaultFont)},
    {SIP_MLNAME_CAST(sipName_setDefaultStyleSheet), meth_QTextDocument_setDefaultStyleSheet, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_setDefaultStyleSheet)},
    {SIP_MLNAME_CAST(sipName_setDefaultTextOption), meth_QTextDocument_setDefaultTextOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_setDefaultTextOption)},
    {SIP_MLNAME_CAST(sipName_setDocumentLayout), meth_QTextDocument_setDocumentLayout, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_setDocumentLayout)},
    {SIP_MLNAME_CAST(sipName_setDocumentMargin), meth_QTextDocument_setDocumentMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_setDocumentMargin)},
    {SIP_MLNAME_CAST(sipName_setHtml), meth_QTextDocument_setHtml, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_setHtml)},
    {SIP_MLNAME_CAST(sipName_setIndentWidth), meth_QTextDocument_setIndentWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_setIndentWidth)},
    {SIP_MLNAME_CAST(sipName_setMaximumBlockCount), meth_QTextDocument_setMaximumBlockCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_setMaximumBlockCount)},
    {SIP_MLNAME_CAST(sipName_setMetaInformation), meth_QTextDocument_setMetaInformation, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_setMetaInformation)},
    {SIP_MLNAME_CAST(sipName_setModified), SIP_MLMETH_CAST(meth_QTextDocument_setModified), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextDocument_setModified)},
    {SIP_MLNAME_CAST(sipName_setPageSize), meth_QTextDocument_setPageSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_setPageSize)},
    {SIP_MLNAME_CAST(sipName_setPlainText), meth_QTextDocument_setPlainText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_setPlainText)},
    {SIP_MLNAME_CAST(sipName_setTextWidth), meth_QTextDocument_setTextWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_setTextWidth)},
    {SIP_MLNAME_CAST(sipName_setUndoRedoEnabled), meth_QTextDocument_setUndoRedoEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_setUndoRedoEnabled)},
    {SIP_MLNAME_CAST(sipName_setUseDesignMetrics), meth_QTextDocument_setUseDesignMetrics, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_setUseDesignMetrics)},
    {SIP_MLNAME_CAST(sipName_size), meth_QTextDocument_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_size)},
    {SIP_MLNAME_CAST(sipName_textWidth), meth_QTextDocument_textWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_textWidth)},
    {SIP_MLNAME_CAST(sipName_toHtml), SIP_MLMETH_CAST(meth_QTextDocument_toHtml), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextDocument_toHtml)},
    {SIP_MLNAME_CAST(sipName_toPlainText), meth_QTextDocument_toPlainText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_toPlainText)},
    {SIP_MLNAME_CAST(sipName_toRawText), meth_QTextDocument_toRawText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_toRawText)},
    {SIP_MLNAME_CAST(sipName_undo), meth_QTextDocument_undo, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_undo)},
    {SIP_MLNAME_CAST(sipName_useDesignMetrics), meth_QTextDocument_useDesignMetrics, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_useDesignMetrics)}
};

static sipEnumMemberDef enummembers_QTextDocument[] = {
    {sipName_DocumentTitle, static_cast<int>( ::QTextDocument::DocumentTitle), 299},
    {sipName_DocumentUrl, static_cast<int>( ::QTextDocument::DocumentUrl), 299},
    {sipName_FindBackward, static_cast<int>( ::QTextDocument::FindBackward), 297},
    {sipName_FindCaseSensitively, static_cast<int>( ::QTextDocument::FindCaseSensitively), 297},
    {sipName_FindWholeWords, static_cast<int>( ::QTextDocument::FindWholeWords), 297},
    {sipName_HtmlResource, static_cast<int>( ::QTextDocument::HtmlResource), 300},
    {sipName_ImageResource, static_cast<int>( ::QTextDocument::ImageResource), 300},
    {sipName_RedoStack, static_cast<int>( ::QTextDocument::RedoStack), 301},
    {sipName_StyleSheetResource, static_cast<int>( ::QTextDocument::StyleSheetResource), 300},
    {sipName_UndoAndRedoStacks, static_cast<int>( ::QTextDocument::UndoAndRedoStacks), 301},
    {sipName_UndoStack, static_cast<int>( ::QTextDocument::UndoStack), 301},
    {sipName_UserResource, static_cast<int>( ::QTextDocument::UserResource), 300},
};

PyDoc_STRVAR(doc_QTextDocument, "\1QTextDocument(parent: QObject = None)\n"
"QTextDocument(str, parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QTextDocument[] = {
    {"baseUrlChanged(QUrl)", "\1baseUrlChanged(self, QUrl)", SIP_NULLPTR, SIP_NULLPTR},
    {"documentLayoutChanged()", "\1documentLayoutChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"undoCommandAdded()", "\1undoCommandAdded(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"undoAvailable(bool)", "\1undoAvailable(self, bool)", SIP_NULLPTR, SIP_NULLPTR},
    {"redoAvailable(bool)", "\1redoAvailable(self, bool)", SIP_NULLPTR, SIP_NULLPTR},
    {"modificationChanged(bool)", "\1modificationChanged(self, bool)", SIP_NULLPTR, SIP_NULLPTR},
    {"cursorPositionChanged(QTextCursor)", "\1cursorPositionChanged(self, QTextCursor)", SIP_NULLPTR, SIP_NULLPTR},
    {"contentsChanged()", "\1contentsChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"contentsChange(int,int,int)", "\1contentsChange(self, int, int, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"blockCountChanged(int)", "\1blockCountChanged(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QTextDocument = {
    & ::QTextDocument::staticMetaObject,
    0,
    signals_QTextDocument,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextDocument = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextDocument,
        {SIP_NULLPTR},
        &plugin_QTextDocument
    },
    {
        sipNameNr_QTextDocument,
        {0, 0, 1},
        72, methods_QTextDocument,
        12, enummembers_QTextDocument,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextDocument,
    -1,
    -1,
    supers_QTextDocument,
    SIP_NULLPTR,
    init_type_QTextDocument,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextDocument,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QTextDocument,
    cast_QTextDocument,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 49973 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 49977 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 49980 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_Qt_convertFromPlainText, "convertFromPlainText(str, mode: Qt.WhiteSpaceMode = Qt.WhiteSpacePre) -> str");

extern "C" {static PyObject *meth_Qt_convertFromPlainText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Qt_convertFromPlainText(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::Qt::WhiteSpaceMode a1 = Qt::WhiteSpacePre;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1|E", sipType_QString,&a0, &a0State, sipType_Qt_WhiteSpaceMode, &a1))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::Qt::convertFromPlainText(*a0,a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_convertFromPlainText, doc_Qt_convertFromPlainText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Qt_mightBeRichText, "mightBeRichText(str) -> bool");

extern "C" {static PyObject *meth_Qt_mightBeRichText(PyObject *, PyObject *);}
static PyObject *meth_Qt_mightBeRichText(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes =  ::Qt::mightBeRichText(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_mightBeRichText, doc_Qt_mightBeRichText);

    return SIP_NULLPTR;
}


static PyMethodDef methods_Qt[] = {
    {SIP_MLNAME_CAST(sipName_convertFromPlainText), SIP_MLMETH_CAST(meth_Qt_convertFromPlainText), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Qt_convertFromPlainText)},
    {SIP_MLNAME_CAST(sipName_mightBeRichText), meth_Qt_mightBeRichText, METH_VARARGS, SIP_MLDOC_CAST(doc_Qt_mightBeRichText)}
};


static pyqt5ClassPluginDef plugin_Qt = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_Qt = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_NAMESPACE,
        sipNameNr_Qt,
        {SIP_NULLPTR},
        &plugin_Qt
    },
    {
        -1,
        {42, 0, 0},
        2, methods_Qt,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextcursor.sip"
#include <qtextcursor.h>
#line 50114 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 50118 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 50121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 118 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 50124 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 441 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 50127 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 464 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 50130 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 50133 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qimage.sip"
#include <qimage.h>
#line 50136 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextdocumentfragment.sip"
#include <qtextdocumentfragment.h>
#line 50139 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 50 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtexttable.sip"
#include <qtexttable.h>
#line 50142 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 527 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 50145 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextlist.sip"
#include <qtextlist.h>
#line 50148 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 409 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 50151 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 358 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 50154 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 255 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 50157 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QTextCursor_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QTextCursor_isNull(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_isNull, doc_QTextCursor_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_setPosition, "setPosition(self, int, mode: QTextCursor.MoveMode = QTextCursor.MoveAnchor)");

extern "C" {static PyObject *meth_QTextCursor_setPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_setPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextCursor::MoveMode a1 = QTextCursor::MoveAnchor;
         ::QTextCursor *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|E", &sipSelf, sipType_QTextCursor, &sipCpp, &a0, sipType_QTextCursor_MoveMode, &a1))
        {
            sipCpp->setPosition(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_setPosition, doc_QTextCursor_setPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_position, "position(self) -> int");

extern "C" {static PyObject *meth_QTextCursor_position(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_position(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->position();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_position, doc_QTextCursor_position);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_anchor, "anchor(self) -> int");

extern "C" {static PyObject *meth_QTextCursor_anchor(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_anchor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->anchor();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_anchor, doc_QTextCursor_anchor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_insertText, "insertText(self, str)\n"
"insertText(self, str, QTextCharFormat)");

extern "C" {static PyObject *meth_QTextCursor_insertText(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_insertText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->insertText(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QTextCharFormat* a1;
         ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QString,&a0, &a0State, sipType_QTextCharFormat, &a1))
        {
            sipCpp->insertText(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_insertText, doc_QTextCursor_insertText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_movePosition, "movePosition(self, QTextCursor.MoveOperation, mode: QTextCursor.MoveMode = QTextCursor.MoveAnchor, n: int = 1) -> bool");

extern "C" {static PyObject *meth_QTextCursor_movePosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_movePosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextCursor::MoveOperation a0;
         ::QTextCursor::MoveMode a1 = QTextCursor::MoveAnchor;
        int a2 = 1;
         ::QTextCursor *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
            sipName_n,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE|Ei", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextCursor_MoveOperation, &a0, sipType_QTextCursor_MoveMode, &a1, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->movePosition(a0,a1,a2);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_movePosition, doc_QTextCursor_movePosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_deleteChar, "deleteChar(self)");

extern "C" {static PyObject *meth_QTextCursor_deleteChar(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_deleteChar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            sipCpp->deleteChar();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_deleteChar, doc_QTextCursor_deleteChar);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_deletePreviousChar, "deletePreviousChar(self)");

extern "C" {static PyObject *meth_QTextCursor_deletePreviousChar(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_deletePreviousChar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            sipCpp->deletePreviousChar();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_deletePreviousChar, doc_QTextCursor_deletePreviousChar);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_select, "select(self, QTextCursor.SelectionType)");

extern "C" {static PyObject *meth_QTextCursor_select(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_select(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextCursor::SelectionType a0;
         ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextCursor_SelectionType, &a0))
        {
            sipCpp->select(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_select, doc_QTextCursor_select);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_hasSelection, "hasSelection(self) -> bool");

extern "C" {static PyObject *meth_QTextCursor_hasSelection(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_hasSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasSelection();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_hasSelection, doc_QTextCursor_hasSelection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_hasComplexSelection, "hasComplexSelection(self) -> bool");

extern "C" {static PyObject *meth_QTextCursor_hasComplexSelection(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_hasComplexSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasComplexSelection();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_hasComplexSelection, doc_QTextCursor_hasComplexSelection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_removeSelectedText, "removeSelectedText(self)");

extern "C" {static PyObject *meth_QTextCursor_removeSelectedText(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_removeSelectedText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            sipCpp->removeSelectedText();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_removeSelectedText, doc_QTextCursor_removeSelectedText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_clearSelection, "clearSelection(self)");

extern "C" {static PyObject *meth_QTextCursor_clearSelection(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_clearSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            sipCpp->clearSelection();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_clearSelection, doc_QTextCursor_clearSelection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_selectionStart, "selectionStart(self) -> int");

extern "C" {static PyObject *meth_QTextCursor_selectionStart(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_selectionStart(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->selectionStart();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_selectionStart, doc_QTextCursor_selectionStart);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_selectionEnd, "selectionEnd(self) -> int");

extern "C" {static PyObject *meth_QTextCursor_selectionEnd(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_selectionEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->selectionEnd();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_selectionEnd, doc_QTextCursor_selectionEnd);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_selectedText, "selectedText(self) -> str");

extern "C" {static PyObject *meth_QTextCursor_selectedText(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_selectedText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->selectedText());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_selectedText, doc_QTextCursor_selectedText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_selection, "selection(self) -> QTextDocumentFragment");

extern "C" {static PyObject *meth_QTextCursor_selection(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_selection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
             ::QTextDocumentFragment*sipRes;

            sipRes = new  ::QTextDocumentFragment(sipCpp->selection());

            return sipConvertFromNewType(sipRes,sipType_QTextDocumentFragment,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_selection, doc_QTextCursor_selection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_selectedTableCells, "selectedTableCells(self) -> Tuple[int, int, int, int]");

extern "C" {static PyObject *meth_QTextCursor_selectedTableCells(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_selectedTableCells(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const  ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            sipCpp->selectedTableCells(&a0,&a1,&a2,&a3);

            return sipBuildResult(0,"(iiii)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_selectedTableCells, doc_QTextCursor_selectedTableCells);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_block, "block(self) -> QTextBlock");

extern "C" {static PyObject *meth_QTextCursor_block(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_block(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
             ::QTextBlock*sipRes;

            sipRes = new  ::QTextBlock(sipCpp->block());

            return sipConvertFromNewType(sipRes,sipType_QTextBlock,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_block, doc_QTextCursor_block);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_charFormat, "charFormat(self) -> QTextCharFormat");

extern "C" {static PyObject *meth_QTextCursor_charFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_charFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
             ::QTextCharFormat*sipRes;

            sipRes = new  ::QTextCharFormat(sipCpp->charFormat());

            return sipConvertFromNewType(sipRes,sipType_QTextCharFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_charFormat, doc_QTextCursor_charFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_setCharFormat, "setCharFormat(self, QTextCharFormat)");

extern "C" {static PyObject *meth_QTextCursor_setCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_setCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat* a0;
         ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextCharFormat, &a0))
        {
            sipCpp->setCharFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_setCharFormat, doc_QTextCursor_setCharFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_mergeCharFormat, "mergeCharFormat(self, QTextCharFormat)");

extern "C" {static PyObject *meth_QTextCursor_mergeCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_mergeCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat* a0;
         ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextCharFormat, &a0))
        {
            sipCpp->mergeCharFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_mergeCharFormat, doc_QTextCursor_mergeCharFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_blockFormat, "blockFormat(self) -> QTextBlockFormat");

extern "C" {static PyObject *meth_QTextCursor_blockFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_blockFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
             ::QTextBlockFormat*sipRes;

            sipRes = new  ::QTextBlockFormat(sipCpp->blockFormat());

            return sipConvertFromNewType(sipRes,sipType_QTextBlockFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_blockFormat, doc_QTextCursor_blockFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_setBlockFormat, "setBlockFormat(self, QTextBlockFormat)");

extern "C" {static PyObject *meth_QTextCursor_setBlockFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_setBlockFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlockFormat* a0;
         ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextBlockFormat, &a0))
        {
            sipCpp->setBlockFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_setBlockFormat, doc_QTextCursor_setBlockFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_mergeBlockFormat, "mergeBlockFormat(self, QTextBlockFormat)");

extern "C" {static PyObject *meth_QTextCursor_mergeBlockFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_mergeBlockFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlockFormat* a0;
         ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextBlockFormat, &a0))
        {
            sipCpp->mergeBlockFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_mergeBlockFormat, doc_QTextCursor_mergeBlockFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_blockCharFormat, "blockCharFormat(self) -> QTextCharFormat");

extern "C" {static PyObject *meth_QTextCursor_blockCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_blockCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
             ::QTextCharFormat*sipRes;

            sipRes = new  ::QTextCharFormat(sipCpp->blockCharFormat());

            return sipConvertFromNewType(sipRes,sipType_QTextCharFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_blockCharFormat, doc_QTextCursor_blockCharFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_setBlockCharFormat, "setBlockCharFormat(self, QTextCharFormat)");

extern "C" {static PyObject *meth_QTextCursor_setBlockCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_setBlockCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat* a0;
         ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextCharFormat, &a0))
        {
            sipCpp->setBlockCharFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_setBlockCharFormat, doc_QTextCursor_setBlockCharFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_mergeBlockCharFormat, "mergeBlockCharFormat(self, QTextCharFormat)");

extern "C" {static PyObject *meth_QTextCursor_mergeBlockCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_mergeBlockCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCharFormat* a0;
         ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextCharFormat, &a0))
        {
            sipCpp->mergeBlockCharFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_mergeBlockCharFormat, doc_QTextCursor_mergeBlockCharFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_atBlockStart, "atBlockStart(self) -> bool");

extern "C" {static PyObject *meth_QTextCursor_atBlockStart(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_atBlockStart(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->atBlockStart();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_atBlockStart, doc_QTextCursor_atBlockStart);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_atBlockEnd, "atBlockEnd(self) -> bool");

extern "C" {static PyObject *meth_QTextCursor_atBlockEnd(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_atBlockEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->atBlockEnd();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_atBlockEnd, doc_QTextCursor_atBlockEnd);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_atStart, "atStart(self) -> bool");

extern "C" {static PyObject *meth_QTextCursor_atStart(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_atStart(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->atStart();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_atStart, doc_QTextCursor_atStart);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_atEnd, "atEnd(self) -> bool");

extern "C" {static PyObject *meth_QTextCursor_atEnd(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_atEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->atEnd();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_atEnd, doc_QTextCursor_atEnd);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_insertBlock, "insertBlock(self)\n"
"insertBlock(self, QTextBlockFormat)\n"
"insertBlock(self, QTextBlockFormat, QTextCharFormat)");

extern "C" {static PyObject *meth_QTextCursor_insertBlock(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_insertBlock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            sipCpp->insertBlock();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QTextBlockFormat* a0;
         ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextBlockFormat, &a0))
        {
            sipCpp->insertBlock(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QTextBlockFormat* a0;
        const  ::QTextCharFormat* a1;
         ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextBlockFormat, &a0, sipType_QTextCharFormat, &a1))
        {
            sipCpp->insertBlock(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_insertBlock, doc_QTextCursor_insertBlock);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_insertList, "insertList(self, QTextListFormat) -> QTextList\n"
"insertList(self, QTextListFormat.Style) -> QTextList");

extern "C" {static PyObject *meth_QTextCursor_insertList(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_insertList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextListFormat* a0;
         ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextListFormat, &a0))
        {
             ::QTextList*sipRes;

            sipRes = sipCpp->insertList(*a0);

            return sipConvertFromType(sipRes,sipType_QTextList,SIP_NULLPTR);
        }
    }

    {
         ::QTextListFormat::Style a0;
         ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextListFormat_Style, &a0))
        {
             ::QTextList*sipRes;

            sipRes = sipCpp->insertList(a0);

            return sipConvertFromType(sipRes,sipType_QTextList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_insertList, doc_QTextCursor_insertList);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_createList, "createList(self, QTextListFormat) -> QTextList\n"
"createList(self, QTextListFormat.Style) -> QTextList");

extern "C" {static PyObject *meth_QTextCursor_createList(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_createList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextListFormat* a0;
         ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextListFormat, &a0))
        {
             ::QTextList*sipRes;

            sipRes = sipCpp->createList(*a0);

            return sipConvertFromType(sipRes,sipType_QTextList,SIP_NULLPTR);
        }
    }

    {
         ::QTextListFormat::Style a0;
         ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextListFormat_Style, &a0))
        {
             ::QTextList*sipRes;

            sipRes = sipCpp->createList(a0);

            return sipConvertFromType(sipRes,sipType_QTextList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_createList, doc_QTextCursor_createList);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_currentList, "currentList(self) -> QTextList");

extern "C" {static PyObject *meth_QTextCursor_currentList(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_currentList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
             ::QTextList*sipRes;

            sipRes = sipCpp->currentList();

            return sipConvertFromType(sipRes,sipType_QTextList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_currentList, doc_QTextCursor_currentList);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_insertTable, "insertTable(self, int, int, QTextTableFormat) -> QTextTable\n"
"insertTable(self, int, int) -> QTextTable");

extern "C" {static PyObject *meth_QTextCursor_insertTable(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_insertTable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        const  ::QTextTableFormat* a2;
         ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ9", &sipSelf, sipType_QTextCursor, &sipCpp, &a0, &a1, sipType_QTextTableFormat, &a2))
        {
             ::QTextTable*sipRes;

            sipRes = sipCpp->insertTable(a0,a1,*a2);

            return sipConvertFromType(sipRes,sipType_QTextTable,SIP_NULLPTR);
        }
    }

    {
        int a0;
        int a1;
         ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTextCursor, &sipCpp, &a0, &a1))
        {
             ::QTextTable*sipRes;

            sipRes = sipCpp->insertTable(a0,a1);

            return sipConvertFromType(sipRes,sipType_QTextTable,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_insertTable, doc_QTextCursor_insertTable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_currentTable, "currentTable(self) -> QTextTable");

extern "C" {static PyObject *meth_QTextCursor_currentTable(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_currentTable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
             ::QTextTable*sipRes;

            sipRes = sipCpp->currentTable();

            return sipConvertFromType(sipRes,sipType_QTextTable,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_currentTable, doc_QTextCursor_currentTable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_insertFrame, "insertFrame(self, QTextFrameFormat) -> QTextFrame");

extern "C" {static PyObject *meth_QTextCursor_insertFrame(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_insertFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextFrameFormat* a0;
         ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextFrameFormat, &a0))
        {
             ::QTextFrame*sipRes;

            sipRes = sipCpp->insertFrame(*a0);

            return sipConvertFromType(sipRes,sipType_QTextFrame,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_insertFrame, doc_QTextCursor_insertFrame);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_currentFrame, "currentFrame(self) -> QTextFrame");

extern "C" {static PyObject *meth_QTextCursor_currentFrame(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_currentFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
             ::QTextFrame*sipRes;

            sipRes = sipCpp->currentFrame();

            return sipConvertFromType(sipRes,sipType_QTextFrame,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_currentFrame, doc_QTextCursor_currentFrame);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_insertFragment, "insertFragment(self, QTextDocumentFragment)");

extern "C" {static PyObject *meth_QTextCursor_insertFragment(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_insertFragment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextDocumentFragment* a0;
         ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextDocumentFragment, &a0))
        {
            sipCpp->insertFragment(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_insertFragment, doc_QTextCursor_insertFragment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_insertHtml, "insertHtml(self, str)");

extern "C" {static PyObject *meth_QTextCursor_insertHtml(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_insertHtml(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->insertHtml(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_insertHtml, doc_QTextCursor_insertHtml);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_insertImage, "insertImage(self, QTextImageFormat)\n"
"insertImage(self, QTextImageFormat, QTextFrameFormat.Position)\n"
"insertImage(self, str)\n"
"insertImage(self, QImage, name: str = '')");

extern "C" {static PyObject *meth_QTextCursor_insertImage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_insertImage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextImageFormat* a0;
         ::QTextCursor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ9", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextImageFormat, &a0))
        {
            sipCpp->insertImage(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QTextImageFormat* a0;
         ::QTextFrameFormat::Position a1;
         ::QTextCursor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ9E", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextImageFormat, &a0, sipType_QTextFrameFormat_Position, &a1))
        {
            sipCpp->insertImage(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextCursor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ1", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->insertImage(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QImage* a0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
         ::QTextCursor *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|J1", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QImage, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->insertImage(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_insertImage, doc_QTextCursor_insertImage);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_beginEditBlock, "beginEditBlock(self)");

extern "C" {static PyObject *meth_QTextCursor_beginEditBlock(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_beginEditBlock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            sipCpp->beginEditBlock();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_beginEditBlock, doc_QTextCursor_beginEditBlock);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_joinPreviousEditBlock, "joinPreviousEditBlock(self)");

extern "C" {static PyObject *meth_QTextCursor_joinPreviousEditBlock(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_joinPreviousEditBlock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            sipCpp->joinPreviousEditBlock();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_joinPreviousEditBlock, doc_QTextCursor_joinPreviousEditBlock);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_endEditBlock, "endEditBlock(self)");

extern "C" {static PyObject *meth_QTextCursor_endEditBlock(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_endEditBlock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            sipCpp->endEditBlock();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_endEditBlock, doc_QTextCursor_endEditBlock);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_blockNumber, "blockNumber(self) -> int");

extern "C" {static PyObject *meth_QTextCursor_blockNumber(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_blockNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->blockNumber();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_blockNumber, doc_QTextCursor_blockNumber);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_columnNumber, "columnNumber(self) -> int");

extern "C" {static PyObject *meth_QTextCursor_columnNumber(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_columnNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->columnNumber();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_columnNumber, doc_QTextCursor_columnNumber);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_isCopyOf, "isCopyOf(self, QTextCursor) -> bool");

extern "C" {static PyObject *meth_QTextCursor_isCopyOf(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_isCopyOf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor* a0;
        const  ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextCursor, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isCopyOf(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_isCopyOf, doc_QTextCursor_isCopyOf);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_visualNavigation, "visualNavigation(self) -> bool");

extern "C" {static PyObject *meth_QTextCursor_visualNavigation(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_visualNavigation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->visualNavigation();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_visualNavigation, doc_QTextCursor_visualNavigation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_setVisualNavigation, "setVisualNavigation(self, bool)");

extern "C" {static PyObject *meth_QTextCursor_setVisualNavigation(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_setVisualNavigation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextCursor, &sipCpp, &a0))
        {
            sipCpp->setVisualNavigation(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_setVisualNavigation, doc_QTextCursor_setVisualNavigation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_document, "document(self) -> QTextDocument");

extern "C" {static PyObject *meth_QTextCursor_document(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_document(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
             ::QTextDocument*sipRes;

            sipRes = sipCpp->document();

            return sipConvertFromType(sipRes,sipType_QTextDocument,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_document, doc_QTextCursor_document);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_positionInBlock, "positionInBlock(self) -> int");

extern "C" {static PyObject *meth_QTextCursor_positionInBlock(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_positionInBlock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->positionInBlock();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_positionInBlock, doc_QTextCursor_positionInBlock);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_setVerticalMovementX, "setVerticalMovementX(self, int)");

extern "C" {static PyObject *meth_QTextCursor_setVerticalMovementX(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_setVerticalMovementX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextCursor, &sipCpp, &a0))
        {
            sipCpp->setVerticalMovementX(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_setVerticalMovementX, doc_QTextCursor_setVerticalMovementX);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_verticalMovementX, "verticalMovementX(self) -> int");

extern "C" {static PyObject *meth_QTextCursor_verticalMovementX(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_verticalMovementX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->verticalMovementX();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_verticalMovementX, doc_QTextCursor_verticalMovementX);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_setKeepPositionOnInsert, "setKeepPositionOnInsert(self, bool)");

extern "C" {static PyObject *meth_QTextCursor_setKeepPositionOnInsert(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_setKeepPositionOnInsert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextCursor, &sipCpp, &a0))
        {
            sipCpp->setKeepPositionOnInsert(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_setKeepPositionOnInsert, doc_QTextCursor_setKeepPositionOnInsert);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_keepPositionOnInsert, "keepPositionOnInsert(self) -> bool");

extern "C" {static PyObject *meth_QTextCursor_keepPositionOnInsert(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_keepPositionOnInsert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->keepPositionOnInsert();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_keepPositionOnInsert, doc_QTextCursor_keepPositionOnInsert);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCursor_swap, "swap(self, QTextCursor)");

extern "C" {static PyObject *meth_QTextCursor_swap(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextCursor* a0;
         ::QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextCursor, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_swap, doc_QTextCursor_swap);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QTextCursor___gt__(PyObject *,PyObject *);}
static PyObject *slot_QTextCursor___gt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextCursor *sipCpp = reinterpret_cast< ::QTextCursor *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextCursor));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextCursor, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QTextCursor::operator>(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, gt_slot, sipType_QTextCursor, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTextCursor___ge__(PyObject *,PyObject *);}
static PyObject *slot_QTextCursor___ge__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextCursor *sipCpp = reinterpret_cast< ::QTextCursor *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextCursor));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextCursor, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QTextCursor::operator>=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ge_slot, sipType_QTextCursor, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTextCursor___eq__(PyObject *,PyObject *);}
static PyObject *slot_QTextCursor___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextCursor *sipCpp = reinterpret_cast< ::QTextCursor *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextCursor));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextCursor, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QTextCursor::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QTextCursor, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTextCursor___le__(PyObject *,PyObject *);}
static PyObject *slot_QTextCursor___le__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextCursor *sipCpp = reinterpret_cast< ::QTextCursor *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextCursor));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextCursor, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QTextCursor::operator<=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, le_slot, sipType_QTextCursor, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTextCursor___lt__(PyObject *,PyObject *);}
static PyObject *slot_QTextCursor___lt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextCursor *sipCpp = reinterpret_cast< ::QTextCursor *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextCursor));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextCursor, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QTextCursor::operator<(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, lt_slot, sipType_QTextCursor, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTextCursor___ne__(PyObject *,PyObject *);}
static PyObject *slot_QTextCursor___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextCursor *sipCpp = reinterpret_cast< ::QTextCursor *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextCursor));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCursor* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextCursor, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QTextCursor::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QTextCursor, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextCursor(void *, int);}
static void release_QTextCursor(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextCursor *>(sipCppV);
}


extern "C" {static void assign_QTextCursor(void *, SIP_SSIZE_T, void *);}
static void assign_QTextCursor(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTextCursor *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTextCursor *>(sipSrc);
}


extern "C" {static void *array_QTextCursor(SIP_SSIZE_T);}
static void *array_QTextCursor(SIP_SSIZE_T sipNrElem)
{
    return new  ::QTextCursor[sipNrElem];
}


extern "C" {static void *copy_QTextCursor(const void *, SIP_SSIZE_T);}
static void *copy_QTextCursor(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QTextCursor(reinterpret_cast<const  ::QTextCursor *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextCursor(sipSimpleWrapper *);}
static void dealloc_QTextCursor(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextCursor(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextCursor(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextCursor(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextCursor *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTextCursor();

            return sipCpp;
        }
    }

    {
         ::QTextDocument* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8", sipType_QTextDocument, &a0))
        {
            sipCpp = new  ::QTextCursor(a0);

            return sipCpp;
        }
    }

    {
         ::QTextFrame* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8", sipType_QTextFrame, &a0))
        {
            sipCpp = new  ::QTextCursor(a0);

            return sipCpp;
        }
    }

    {
        const  ::QTextBlock* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTextBlock, &a0))
        {
            sipCpp = new  ::QTextCursor(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QTextCursor* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTextCursor, &a0))
        {
            sipCpp = new  ::QTextCursor(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QTextCursor[] = {
    {(void *)slot_QTextCursor___gt__, gt_slot},
    {(void *)slot_QTextCursor___ge__, ge_slot},
    {(void *)slot_QTextCursor___eq__, eq_slot},
    {(void *)slot_QTextCursor___le__, le_slot},
    {(void *)slot_QTextCursor___lt__, lt_slot},
    {(void *)slot_QTextCursor___ne__, ne_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QTextCursor[] = {
    {SIP_MLNAME_CAST(sipName_anchor), meth_QTextCursor_anchor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_anchor)},
    {SIP_MLNAME_CAST(sipName_atBlockEnd), meth_QTextCursor_atBlockEnd, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_atBlockEnd)},
    {SIP_MLNAME_CAST(sipName_atBlockStart), meth_QTextCursor_atBlockStart, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_atBlockStart)},
    {SIP_MLNAME_CAST(sipName_atEnd), meth_QTextCursor_atEnd, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_atEnd)},
    {SIP_MLNAME_CAST(sipName_atStart), meth_QTextCursor_atStart, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_atStart)},
    {SIP_MLNAME_CAST(sipName_beginEditBlock), meth_QTextCursor_beginEditBlock, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_beginEditBlock)},
    {SIP_MLNAME_CAST(sipName_block), meth_QTextCursor_block, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_block)},
    {SIP_MLNAME_CAST(sipName_blockCharFormat), meth_QTextCursor_blockCharFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_blockCharFormat)},
    {SIP_MLNAME_CAST(sipName_blockFormat), meth_QTextCursor_blockFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_blockFormat)},
    {SIP_MLNAME_CAST(sipName_blockNumber), meth_QTextCursor_blockNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_blockNumber)},
    {SIP_MLNAME_CAST(sipName_charFormat), meth_QTextCursor_charFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_charFormat)},
    {SIP_MLNAME_CAST(sipName_clearSelection), meth_QTextCursor_clearSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_clearSelection)},
    {SIP_MLNAME_CAST(sipName_columnNumber), meth_QTextCursor_columnNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_columnNumber)},
    {SIP_MLNAME_CAST(sipName_createList), meth_QTextCursor_createList, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_createList)},
    {SIP_MLNAME_CAST(sipName_currentFrame), meth_QTextCursor_currentFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_currentFrame)},
    {SIP_MLNAME_CAST(sipName_currentList), meth_QTextCursor_currentList, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_currentList)},
    {SIP_MLNAME_CAST(sipName_currentTable), meth_QTextCursor_currentTable, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_currentTable)},
    {SIP_MLNAME_CAST(sipName_deleteChar), meth_QTextCursor_deleteChar, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_deleteChar)},
    {SIP_MLNAME_CAST(sipName_deletePreviousChar), meth_QTextCursor_deletePreviousChar, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_deletePreviousChar)},
    {SIP_MLNAME_CAST(sipName_document), meth_QTextCursor_document, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_document)},
    {SIP_MLNAME_CAST(sipName_endEditBlock), meth_QTextCursor_endEditBlock, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_endEditBlock)},
    {SIP_MLNAME_CAST(sipName_hasComplexSelection), meth_QTextCursor_hasComplexSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_hasComplexSelection)},
    {SIP_MLNAME_CAST(sipName_hasSelection), meth_QTextCursor_hasSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_hasSelection)},
    {SIP_MLNAME_CAST(sipName_insertBlock), meth_QTextCursor_insertBlock, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_insertBlock)},
    {SIP_MLNAME_CAST(sipName_insertFragment), meth_QTextCursor_insertFragment, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_insertFragment)},
    {SIP_MLNAME_CAST(sipName_insertFrame), meth_QTextCursor_insertFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_insertFrame)},
    {SIP_MLNAME_CAST(sipName_insertHtml), meth_QTextCursor_insertHtml, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_insertHtml)},
    {SIP_MLNAME_CAST(sipName_insertImage), SIP_MLMETH_CAST(meth_QTextCursor_insertImage), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextCursor_insertImage)},
    {SIP_MLNAME_CAST(sipName_insertList), meth_QTextCursor_insertList, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_insertList)},
    {SIP_MLNAME_CAST(sipName_insertTable), meth_QTextCursor_insertTable, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_insertTable)},
    {SIP_MLNAME_CAST(sipName_insertText), meth_QTextCursor_insertText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_insertText)},
    {SIP_MLNAME_CAST(sipName_isCopyOf), meth_QTextCursor_isCopyOf, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_isCopyOf)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QTextCursor_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_isNull)},
    {SIP_MLNAME_CAST(sipName_joinPreviousEditBlock), meth_QTextCursor_joinPreviousEditBlock, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_joinPreviousEditBlock)},
    {SIP_MLNAME_CAST(sipName_keepPositionOnInsert), meth_QTextCursor_keepPositionOnInsert, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_keepPositionOnInsert)},
    {SIP_MLNAME_CAST(sipName_mergeBlockCharFormat), meth_QTextCursor_mergeBlockCharFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_mergeBlockCharFormat)},
    {SIP_MLNAME_CAST(sipName_mergeBlockFormat), meth_QTextCursor_mergeBlockFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_mergeBlockFormat)},
    {SIP_MLNAME_CAST(sipName_mergeCharFormat), meth_QTextCursor_mergeCharFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_mergeCharFormat)},
    {SIP_MLNAME_CAST(sipName_movePosition), SIP_MLMETH_CAST(meth_QTextCursor_movePosition), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextCursor_movePosition)},
    {SIP_MLNAME_CAST(sipName_position), meth_QTextCursor_position, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_position)},
    {SIP_MLNAME_CAST(sipName_positionInBlock), meth_QTextCursor_positionInBlock, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_positionInBlock)},
    {SIP_MLNAME_CAST(sipName_removeSelectedText), meth_QTextCursor_removeSelectedText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_removeSelectedText)},
    {SIP_MLNAME_CAST(sipName_select), meth_QTextCursor_select, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_select)},
    {SIP_MLNAME_CAST(sipName_selectedTableCells), meth_QTextCursor_selectedTableCells, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_selectedTableCells)},
    {SIP_MLNAME_CAST(sipName_selectedText), meth_QTextCursor_selectedText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_selectedText)},
    {SIP_MLNAME_CAST(sipName_selection), meth_QTextCursor_selection, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_selection)},
    {SIP_MLNAME_CAST(sipName_selectionEnd), meth_QTextCursor_selectionEnd, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_selectionEnd)},
    {SIP_MLNAME_CAST(sipName_selectionStart), meth_QTextCursor_selectionStart, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_selectionStart)},
    {SIP_MLNAME_CAST(sipName_setBlockCharFormat), meth_QTextCursor_setBlockCharFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_setBlockCharFormat)},
    {SIP_MLNAME_CAST(sipName_setBlockFormat), meth_QTextCursor_setBlockFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_setBlockFormat)},
    {SIP_MLNAME_CAST(sipName_setCharFormat), meth_QTextCursor_setCharFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_setCharFormat)},
    {SIP_MLNAME_CAST(sipName_setKeepPositionOnInsert), meth_QTextCursor_setKeepPositionOnInsert, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_setKeepPositionOnInsert)},
    {SIP_MLNAME_CAST(sipName_setPosition), SIP_MLMETH_CAST(meth_QTextCursor_setPosition), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextCursor_setPosition)},
    {SIP_MLNAME_CAST(sipName_setVerticalMovementX), meth_QTextCursor_setVerticalMovementX, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_setVerticalMovementX)},
    {SIP_MLNAME_CAST(sipName_setVisualNavigation), meth_QTextCursor_setVisualNavigation, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_setVisualNavigation)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QTextCursor_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_swap)},
    {SIP_MLNAME_CAST(sipName_verticalMovementX), meth_QTextCursor_verticalMovementX, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_verticalMovementX)},
    {SIP_MLNAME_CAST(sipName_visualNavigation), meth_QTextCursor_visualNavigation, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_visualNavigation)}
};

static sipEnumMemberDef enummembers_QTextCursor[] = {
    {sipName_BlockUnderCursor, static_cast<int>( ::QTextCursor::BlockUnderCursor), 295},
    {sipName_Document, static_cast<int>( ::QTextCursor::Document), 295},
    {sipName_Down, static_cast<int>( ::QTextCursor::Down), 294},
    {sipName_End, static_cast<int>( ::QTextCursor::End), 294},
    {sipName_EndOfBlock, static_cast<int>( ::QTextCursor::EndOfBlock), 294},
    {sipName_EndOfLine, static_cast<int>( ::QTextCursor::EndOfLine), 294},
    {sipName_EndOfWord, static_cast<int>( ::QTextCursor::EndOfWord), 294},
    {sipName_KeepAnchor, static_cast<int>( ::QTextCursor::KeepAnchor), 293},
    {sipName_Left, static_cast<int>( ::QTextCursor::Left), 294},
    {sipName_LineUnderCursor, static_cast<int>( ::QTextCursor::LineUnderCursor), 295},
    {sipName_MoveAnchor, static_cast<int>( ::QTextCursor::MoveAnchor), 293},
    {sipName_NextBlock, static_cast<int>( ::QTextCursor::NextBlock), 294},
    {sipName_NextCell, static_cast<int>( ::QTextCursor::NextCell), 294},
    {sipName_NextCharacter, static_cast<int>( ::QTextCursor::NextCharacter), 294},
    {sipName_NextRow, static_cast<int>( ::QTextCursor::NextRow), 294},
    {sipName_NextWord, static_cast<int>( ::QTextCursor::NextWord), 294},
    {sipName_NoMove, static_cast<int>( ::QTextCursor::NoMove), 294},
    {sipName_PreviousBlock, static_cast<int>( ::QTextCursor::PreviousBlock), 294},
    {sipName_PreviousCell, static_cast<int>( ::QTextCursor::PreviousCell), 294},
    {sipName_PreviousCharacter, static_cast<int>( ::QTextCursor::PreviousCharacter), 294},
    {sipName_PreviousRow, static_cast<int>( ::QTextCursor::PreviousRow), 294},
    {sipName_PreviousWord, static_cast<int>( ::QTextCursor::PreviousWord), 294},
    {sipName_Right, static_cast<int>( ::QTextCursor::Right), 294},
    {sipName_Start, static_cast<int>( ::QTextCursor::Start), 294},
    {sipName_StartOfBlock, static_cast<int>( ::QTextCursor::StartOfBlock), 294},
    {sipName_StartOfLine, static_cast<int>( ::QTextCursor::StartOfLine), 294},
    {sipName_StartOfWord, static_cast<int>( ::QTextCursor::StartOfWord), 294},
    {sipName_Up, static_cast<int>( ::QTextCursor::Up), 294},
    {sipName_WordLeft, static_cast<int>( ::QTextCursor::WordLeft), 294},
    {sipName_WordRight, static_cast<int>( ::QTextCursor::WordRight), 294},
    {sipName_WordUnderCursor, static_cast<int>( ::QTextCursor::WordUnderCursor), 295},
};

PyDoc_STRVAR(doc_QTextCursor, "\1QTextCursor()\n"
"QTextCursor(QTextDocument)\n"
"QTextCursor(QTextFrame)\n"
"QTextCursor(QTextBlock)\n"
"QTextCursor(QTextCursor)");


static pyqt5ClassPluginDef plugin_QTextCursor = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextCursor = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextCursor,
        {SIP_NULLPTR},
        &plugin_QTextCursor
    },
    {
        sipNameNr_QTextCursor,
        {0, 0, 1},
        58, methods_QTextCursor,
        31, enummembers_QTextCursor,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextCursor,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QTextCursor,
    init_type_QTextCursor,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextCursor,
    assign_QTextCursor,
    array_QTextCursor,
    copy_QTextCursor,
    release_QTextCursor,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qsyntaxhighlighter.sip"
#include <qsyntaxhighlighter.h>
#line 52430 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 52434 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 52437 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 118 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 52440 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 248 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 52443 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 255 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 52446 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 52449 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 52452 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 52455 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 52458 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 52461 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 52464 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 52467 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 52470 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 52473 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 52476 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 52479 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 52482 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 52485 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 52488 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 52491 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 52494 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 52497 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


class sipQSyntaxHighlighter : public  ::QSyntaxHighlighter
{
public:
    sipQSyntaxHighlighter( ::QTextDocument*);
    sipQSyntaxHighlighter( ::QObject*);
    virtual ~sipQSyntaxHighlighter();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void highlightBlock(const  ::QString&) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSyntaxHighlighter(const sipQSyntaxHighlighter &);
    sipQSyntaxHighlighter &operator = (const sipQSyntaxHighlighter &);

    char sipPyMethods[8];
};

sipQSyntaxHighlighter::sipQSyntaxHighlighter( ::QTextDocument*a0):  ::QSyntaxHighlighter(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSyntaxHighlighter::sipQSyntaxHighlighter( ::QObject*a0):  ::QSyntaxHighlighter(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSyntaxHighlighter::~sipQSyntaxHighlighter()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQSyntaxHighlighter::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QSyntaxHighlighter);

    return  ::QSyntaxHighlighter::metaObject();
}

int sipQSyntaxHighlighter::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QSyntaxHighlighter::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QSyntaxHighlighter,_c,_id,_a);

    return _id;
}

void *sipQSyntaxHighlighter::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QSyntaxHighlighter, _clname, &sipCpp) ? sipCpp :  ::QSyntaxHighlighter::qt_metacast(_clname));
}

void sipQSyntaxHighlighter::highlightBlock(const  ::QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QSyntaxHighlighter,sipName_highlightBlock);

    if (!sipMeth)
        return;

    extern void sipVH_QtGui_103(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&);

    sipVH_QtGui_103(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQSyntaxHighlighter::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QSyntaxHighlighter::event(a0);

    extern bool sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_5(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQSyntaxHighlighter::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QSyntaxHighlighter::eventFilter(a0,a1);

    extern bool sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_4(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQSyntaxHighlighter::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QSyntaxHighlighter::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_3(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSyntaxHighlighter::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QSyntaxHighlighter::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_2(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSyntaxHighlighter::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QSyntaxHighlighter::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_1(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSyntaxHighlighter::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QSyntaxHighlighter::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSyntaxHighlighter::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QSyntaxHighlighter::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_setDocument, "setDocument(self, QTextDocument)");

extern "C" {static PyObject *meth_QSyntaxHighlighter_setDocument(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_setDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextDocument* a0;
        PyObject *a0Keep;
         ::QSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, &a0Keep, sipType_QTextDocument, &a0))
        {
            sipCpp->setDocument(a0);

            sipKeepReference(sipSelf, -3, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_setDocument, doc_QSyntaxHighlighter_setDocument);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_document, "document(self) -> QTextDocument");

extern "C" {static PyObject *meth_QSyntaxHighlighter_document(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_document(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp))
        {
             ::QTextDocument*sipRes;

            sipRes = sipCpp->document();

            return sipConvertFromType(sipRes,sipType_QTextDocument,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_document, doc_QSyntaxHighlighter_document);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_rehighlight, "rehighlight(self)");

extern "C" {static PyObject *meth_QSyntaxHighlighter_rehighlight(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_rehighlight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp))
        {
            sipCpp->rehighlight();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_rehighlight, doc_QSyntaxHighlighter_rehighlight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_rehighlightBlock, "rehighlightBlock(self, QTextBlock)");

extern "C" {static PyObject *meth_QSyntaxHighlighter_rehighlightBlock(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_rehighlightBlock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBlock* a0;
         ::QSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, sipType_QTextBlock, &a0))
        {
            sipCpp->rehighlightBlock(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_rehighlightBlock, doc_QSyntaxHighlighter_rehighlightBlock);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_highlightBlock, "highlightBlock(self, str)");

extern "C" {static PyObject *meth_QSyntaxHighlighter_highlightBlock(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_highlightBlock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSyntaxHighlighter, sipName_highlightBlock);
                return SIP_NULLPTR;
            }

            sipCpp->highlightBlock(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_highlightBlock, doc_QSyntaxHighlighter_highlightBlock);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_setFormat, "setFormat(self, int, int, QTextCharFormat)\n"
"setFormat(self, int, int, Union[QColor, Qt.GlobalColor, QGradient])\n"
"setFormat(self, int, int, QFont)");

extern "C" {static PyObject *meth_QSyntaxHighlighter_setFormat(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_setFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        const  ::QTextCharFormat* a2;
         ::QSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "piiJ9", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, &a0, &a1, sipType_QTextCharFormat, &a2))
        {
            sipCpp->setFormat(a0,a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        const  ::QColor* a2;
        int a2State = 0;
         ::QSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "piiJ1", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, &a0, &a1, sipType_QColor, &a2, &a2State))
        {
            sipCpp->setFormat(a0,a1,*a2);
            sipReleaseType(const_cast< ::QColor *>(a2),sipType_QColor,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        const  ::QFont* a2;
         ::QSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "piiJ9", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, &a0, &a1, sipType_QFont, &a2))
        {
            sipCpp->setFormat(a0,a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_setFormat, doc_QSyntaxHighlighter_setFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_format, "format(self, int) -> QTextCharFormat");

extern "C" {static PyObject *meth_QSyntaxHighlighter_format(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, &a0))
        {
             ::QTextCharFormat*sipRes;

            sipRes = new  ::QTextCharFormat(sipCpp->format(a0));

            return sipConvertFromNewType(sipRes,sipType_QTextCharFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_format, doc_QSyntaxHighlighter_format);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_previousBlockState, "previousBlockState(self) -> int");

extern "C" {static PyObject *meth_QSyntaxHighlighter_previousBlockState(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_previousBlockState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->previousBlockState();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_previousBlockState, doc_QSyntaxHighlighter_previousBlockState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_currentBlockState, "currentBlockState(self) -> int");

extern "C" {static PyObject *meth_QSyntaxHighlighter_currentBlockState(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_currentBlockState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->currentBlockState();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_currentBlockState, doc_QSyntaxHighlighter_currentBlockState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_setCurrentBlockState, "setCurrentBlockState(self, int)");

extern "C" {static PyObject *meth_QSyntaxHighlighter_setCurrentBlockState(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_setCurrentBlockState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, &a0))
        {
            sipCpp->setCurrentBlockState(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_setCurrentBlockState, doc_QSyntaxHighlighter_setCurrentBlockState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_setCurrentBlockUserData, "setCurrentBlockUserData(self, QTextBlockUserData)");

extern "C" {static PyObject *meth_QSyntaxHighlighter_setCurrentBlockUserData(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_setCurrentBlockUserData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextBlockUserData* a0;
        PyObject *a0Wrapper;
         ::QSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p@J8", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, &a0Wrapper, sipType_QTextBlockUserData, &a0))
        {
            int sipIsErr = 0;

#line 51 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qsyntaxhighlighter.sip"
        // Ownership of the user data is with the document not the syntax highlighter.
        
        typedef PyObject *(*helper_func)(QObject *, const sipTypeDef *);
        
        static helper_func helper = 0;
        
        if (!helper)
        {
            helper = (helper_func)sipImportSymbol("qtgui_wrap_ancestors");
            Q_ASSERT(helper);
        }
        
        QTextDocument *td = sipCpp->document();
        
        if (td)
        {
            PyObject *py_td = helper(td, sipType_QTextDocument);
        
            if (!py_td)
            {
                sipIsErr = 1;
            }
            else
            {
                sipTransferTo(a0Wrapper, py_td);
                Py_DECREF(py_td);
            }
        }
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipCpp->setCurrentBlockUserData(a0);
        #else
        sipCpp->sipProtect_setCurrentBlockUserData(a0);
        #endif
#line 53093 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_setCurrentBlockUserData, doc_QSyntaxHighlighter_setCurrentBlockUserData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_currentBlockUserData, "currentBlockUserData(self) -> QTextBlockUserData");

extern "C" {static PyObject *meth_QSyntaxHighlighter_currentBlockUserData(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_currentBlockUserData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp))
        {
             ::QTextBlockUserData*sipRes;

            sipRes = sipCpp->currentBlockUserData();

            return sipConvertFromType(sipRes,sipType_QTextBlockUserData,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_currentBlockUserData, doc_QSyntaxHighlighter_currentBlockUserData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_currentBlock, "currentBlock(self) -> QTextBlock");

extern "C" {static PyObject *meth_QSyntaxHighlighter_currentBlock(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_currentBlock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp))
        {
             ::QTextBlock*sipRes;

            sipRes = new  ::QTextBlock(sipCpp->currentBlock());

            return sipConvertFromNewType(sipRes,sipType_QTextBlock,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_currentBlock, doc_QSyntaxHighlighter_currentBlock);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSyntaxHighlighter(void *, const sipTypeDef *);}
static void *cast_QSyntaxHighlighter(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSyntaxHighlighter *sipCpp = reinterpret_cast< ::QSyntaxHighlighter *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSyntaxHighlighter(void *, int);}
static void release_QSyntaxHighlighter(void *sipCppV, int)
{
     ::QSyntaxHighlighter *sipCpp = reinterpret_cast< ::QSyntaxHighlighter *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QSyntaxHighlighter(sipSimpleWrapper *);}
static void dealloc_QSyntaxHighlighter(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSyntaxHighlighter *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSyntaxHighlighter(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSyntaxHighlighter(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSyntaxHighlighter(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQSyntaxHighlighter *sipCpp = SIP_NULLPTR;

    {
         ::QTextDocument* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "JH", sipType_QTextDocument, &a0, sipOwner))
        {
            sipCpp = new sipQSyntaxHighlighter(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QObject* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQSyntaxHighlighter(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSyntaxHighlighter[] = {{25, 0, 1}};


static PyMethodDef methods_QSyntaxHighlighter[] = {
    {SIP_MLNAME_CAST(sipName_currentBlock), meth_QSyntaxHighlighter_currentBlock, METH_VARARGS, SIP_MLDOC_CAST(doc_QSyntaxHighlighter_currentBlock)},
    {SIP_MLNAME_CAST(sipName_currentBlockState), meth_QSyntaxHighlighter_currentBlockState, METH_VARARGS, SIP_MLDOC_CAST(doc_QSyntaxHighlighter_currentBlockState)},
    {SIP_MLNAME_CAST(sipName_currentBlockUserData), meth_QSyntaxHighlighter_currentBlockUserData, METH_VARARGS, SIP_MLDOC_CAST(doc_QSyntaxHighlighter_currentBlockUserData)},
    {SIP_MLNAME_CAST(sipName_document), meth_QSyntaxHighlighter_document, METH_VARARGS, SIP_MLDOC_CAST(doc_QSyntaxHighlighter_document)},
    {SIP_MLNAME_CAST(sipName_format), meth_QSyntaxHighlighter_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QSyntaxHighlighter_format)},
    {SIP_MLNAME_CAST(sipName_highlightBlock), meth_QSyntaxHighlighter_highlightBlock, METH_VARARGS, SIP_MLDOC_CAST(doc_QSyntaxHighlighter_highlightBlock)},
    {SIP_MLNAME_CAST(sipName_previousBlockState), meth_QSyntaxHighlighter_previousBlockState, METH_VARARGS, SIP_MLDOC_CAST(doc_QSyntaxHighlighter_previousBlockState)},
    {SIP_MLNAME_CAST(sipName_rehighlight), meth_QSyntaxHighlighter_rehighlight, METH_VARARGS, SIP_MLDOC_CAST(doc_QSyntaxHighlighter_rehighlight)},
    {SIP_MLNAME_CAST(sipName_rehighlightBlock), meth_QSyntaxHighlighter_rehighlightBlock, METH_VARARGS, SIP_MLDOC_CAST(doc_QSyntaxHighlighter_rehighlightBlock)},
    {SIP_MLNAME_CAST(sipName_setCurrentBlockState), meth_QSyntaxHighlighter_setCurrentBlockState, METH_VARARGS, SIP_MLDOC_CAST(doc_QSyntaxHighlighter_setCurrentBlockState)},
    {SIP_MLNAME_CAST(sipName_setCurrentBlockUserData), meth_QSyntaxHighlighter_setCurrentBlockUserData, METH_VARARGS, SIP_MLDOC_CAST(doc_QSyntaxHighlighter_setCurrentBlockUserData)},
    {SIP_MLNAME_CAST(sipName_setDocument), meth_QSyntaxHighlighter_setDocument, METH_VARARGS, SIP_MLDOC_CAST(doc_QSyntaxHighlighter_setDocument)},
    {SIP_MLNAME_CAST(sipName_setFormat), meth_QSyntaxHighlighter_setFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QSyntaxHighlighter_setFormat)}
};

PyDoc_STRVAR(doc_QSyntaxHighlighter, "\1QSyntaxHighlighter(QTextDocument)\n"
"QSyntaxHighlighter(QObject)");


static pyqt5ClassPluginDef plugin_QSyntaxHighlighter = {
    & ::QSyntaxHighlighter::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QSyntaxHighlighter = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSyntaxHighlighter,
        {SIP_NULLPTR},
        &plugin_QSyntaxHighlighter
    },
    {
        sipNameNr_QSyntaxHighlighter,
        {0, 0, 1},
        13, methods_QSyntaxHighlighter,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSyntaxHighlighter,
    -1,
    -1,
    supers_QSyntaxHighlighter,
    SIP_NULLPTR,
    init_type_QSyntaxHighlighter,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSyntaxHighlighter,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSyntaxHighlighter,
    cast_QSyntaxHighlighter,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qsurfaceformat.sip"
#include <qsurfaceformat.h>
#line 53325 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qsurfaceformat.sip"
#include <qsurfaceformat.h>
#line 53329 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static long slot_QSurfaceFormat_FormatOptions___hash__(PyObject *);}
static long slot_QSurfaceFormat_FormatOptions___hash__(PyObject *sipSelf)
{
     ::QSurfaceFormat::FormatOptions *sipCpp = reinterpret_cast< ::QSurfaceFormat::FormatOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSurfaceFormat_FormatOptions));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QSurfaceFormat::FormatOptions::Int();
#line 53347 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QSurfaceFormat_FormatOptions___bool__(PyObject *);}
static int slot_QSurfaceFormat_FormatOptions___bool__(PyObject *sipSelf)
{
     ::QSurfaceFormat::FormatOptions *sipCpp = reinterpret_cast< ::QSurfaceFormat::FormatOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSurfaceFormat_FormatOptions));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QSurfaceFormat::FormatOptions::Int() != 0);
#line 53372 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QSurfaceFormat_FormatOptions___ne__(PyObject *,PyObject *);}
static PyObject *slot_QSurfaceFormat_FormatOptions___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSurfaceFormat::FormatOptions *sipCpp = reinterpret_cast< ::QSurfaceFormat::FormatOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSurfaceFormat_FormatOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat::FormatOptions* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QSurfaceFormat_FormatOptions, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QSurfaceFormat::FormatOptions::Int() != a0->operator QSurfaceFormat::FormatOptions::Int());
#line 53402 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
            sipReleaseType(const_cast< ::QSurfaceFormat::FormatOptions *>(a0),sipType_QSurfaceFormat_FormatOptions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QSurfaceFormat_FormatOptions, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QSurfaceFormat_FormatOptions___eq__(PyObject *,PyObject *);}
static PyObject *slot_QSurfaceFormat_FormatOptions___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSurfaceFormat::FormatOptions *sipCpp = reinterpret_cast< ::QSurfaceFormat::FormatOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSurfaceFormat_FormatOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat::FormatOptions* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QSurfaceFormat_FormatOptions, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QSurfaceFormat::FormatOptions::Int() == a0->operator QSurfaceFormat::FormatOptions::Int());
#line 53438 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
            sipReleaseType(const_cast< ::QSurfaceFormat::FormatOptions *>(a0),sipType_QSurfaceFormat_FormatOptions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QSurfaceFormat_FormatOptions, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QSurfaceFormat_FormatOptions___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QSurfaceFormat_FormatOptions___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSurfaceFormat_FormatOptions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSurfaceFormat::FormatOptions *sipCpp = reinterpret_cast< ::QSurfaceFormat::FormatOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSurfaceFormat_FormatOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QSurfaceFormat::FormatOptions(*sipCpp ^ a0);
#line 53477 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSurfaceFormat_FormatOptions___xor__(PyObject *,PyObject *);}
static PyObject *slot_QSurfaceFormat_FormatOptions___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSurfaceFormat::FormatOptions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QSurfaceFormat_FormatOptions, &a0, &a0State, &a1))
        {
             ::QSurfaceFormat::FormatOptions*sipRes;

            sipRes = new  ::QSurfaceFormat::FormatOptions((*a0 ^ a1));
            sipReleaseType(a0,sipType_QSurfaceFormat_FormatOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSurfaceFormat_FormatOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSurfaceFormat_FormatOptions___ior__(PyObject *,PyObject *);}
static PyObject *slot_QSurfaceFormat_FormatOptions___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSurfaceFormat_FormatOptions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSurfaceFormat::FormatOptions *sipCpp = reinterpret_cast< ::QSurfaceFormat::FormatOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSurfaceFormat_FormatOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QSurfaceFormat::FormatOptions(*sipCpp | a0);
#line 53549 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSurfaceFormat_FormatOptions___or__(PyObject *,PyObject *);}
static PyObject *slot_QSurfaceFormat_FormatOptions___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSurfaceFormat::FormatOptions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QSurfaceFormat_FormatOptions, &a0, &a0State, &a1))
        {
             ::QSurfaceFormat::FormatOptions*sipRes;

            sipRes = new  ::QSurfaceFormat::FormatOptions((*a0 | a1));
            sipReleaseType(a0,sipType_QSurfaceFormat_FormatOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSurfaceFormat_FormatOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSurfaceFormat_FormatOptions___iand__(PyObject *,PyObject *);}
static PyObject *slot_QSurfaceFormat_FormatOptions___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSurfaceFormat_FormatOptions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSurfaceFormat::FormatOptions *sipCpp = reinterpret_cast< ::QSurfaceFormat::FormatOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSurfaceFormat_FormatOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QSurfaceFormat::FormatOptions::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSurfaceFormat_FormatOptions___and__(PyObject *,PyObject *);}
static PyObject *slot_QSurfaceFormat_FormatOptions___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSurfaceFormat::FormatOptions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QSurfaceFormat_FormatOptions, &a0, &a0State, &a1))
        {
             ::QSurfaceFormat::FormatOptions*sipRes;

            sipRes = new  ::QSurfaceFormat::FormatOptions((*a0 & a1));
            sipReleaseType(a0,sipType_QSurfaceFormat_FormatOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSurfaceFormat_FormatOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSurfaceFormat_FormatOptions___invert__(PyObject *);}
static PyObject *slot_QSurfaceFormat_FormatOptions___invert__(PyObject *sipSelf)
{
     ::QSurfaceFormat::FormatOptions *sipCpp = reinterpret_cast< ::QSurfaceFormat::FormatOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSurfaceFormat_FormatOptions));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QSurfaceFormat::FormatOptions*sipRes;

            sipRes = new  ::QSurfaceFormat::FormatOptions(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QSurfaceFormat_FormatOptions,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QSurfaceFormat_FormatOptions___int__(PyObject *);}
static PyObject *slot_QSurfaceFormat_FormatOptions___int__(PyObject *sipSelf)
{
     ::QSurfaceFormat::FormatOptions *sipCpp = reinterpret_cast< ::QSurfaceFormat::FormatOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSurfaceFormat_FormatOptions));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSurfaceFormat_FormatOptions(void *, int);}
static void release_QSurfaceFormat_FormatOptions(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSurfaceFormat::FormatOptions *>(sipCppV);
}


extern "C" {static void assign_QSurfaceFormat_FormatOptions(void *, SIP_SSIZE_T, void *);}
static void assign_QSurfaceFormat_FormatOptions(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QSurfaceFormat::FormatOptions *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QSurfaceFormat::FormatOptions *>(sipSrc);
}


extern "C" {static void *array_QSurfaceFormat_FormatOptions(SIP_SSIZE_T);}
static void *array_QSurfaceFormat_FormatOptions(SIP_SSIZE_T sipNrElem)
{
    return new  ::QSurfaceFormat::FormatOptions[sipNrElem];
}


extern "C" {static void *copy_QSurfaceFormat_FormatOptions(const void *, SIP_SSIZE_T);}
static void *copy_QSurfaceFormat_FormatOptions(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QSurfaceFormat::FormatOptions(reinterpret_cast<const  ::QSurfaceFormat::FormatOptions *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSurfaceFormat_FormatOptions(sipSimpleWrapper *);}
static void dealloc_QSurfaceFormat_FormatOptions(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSurfaceFormat_FormatOptions(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QSurfaceFormat_FormatOptions(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSurfaceFormat_FormatOptions(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QSurfaceFormat::FormatOptions *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QSurfaceFormat::FormatOptions();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QSurfaceFormat::FormatOptions(a0);

            return sipCpp;
        }
    }

    {
        const  ::QSurfaceFormat::FormatOptions* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QSurfaceFormat_FormatOptions, &a0, &a0State))
        {
            sipCpp = new  ::QSurfaceFormat::FormatOptions(*a0);
            sipReleaseType(const_cast< ::QSurfaceFormat::FormatOptions *>(a0),sipType_QSurfaceFormat_FormatOptions,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QSurfaceFormat_FormatOptions(PyObject *, void **, int *, PyObject *);}
static int convertTo_QSurfaceFormat_FormatOptions(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QSurfaceFormat::FormatOptions **sipCppPtr = reinterpret_cast< ::QSurfaceFormat::FormatOptions **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QSurfaceFormat::FormatOptions is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QSurfaceFormat_FormatOption)) ||
            sipCanConvertToType(sipPy, sipType_QSurfaceFormat_FormatOptions, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QSurfaceFormat_FormatOption)))
{
    *sipCppPtr = new QSurfaceFormat::FormatOptions(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QSurfaceFormat::FormatOptions *>(sipConvertToType(sipPy, sipType_QSurfaceFormat_FormatOptions, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 53817 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QSurfaceFormat_FormatOptions[] = {
    {(void *)slot_QSurfaceFormat_FormatOptions___hash__, hash_slot},
    {(void *)slot_QSurfaceFormat_FormatOptions___bool__, bool_slot},
    {(void *)slot_QSurfaceFormat_FormatOptions___ne__, ne_slot},
    {(void *)slot_QSurfaceFormat_FormatOptions___eq__, eq_slot},
    {(void *)slot_QSurfaceFormat_FormatOptions___ixor__, ixor_slot},
    {(void *)slot_QSurfaceFormat_FormatOptions___xor__, xor_slot},
    {(void *)slot_QSurfaceFormat_FormatOptions___ior__, ior_slot},
    {(void *)slot_QSurfaceFormat_FormatOptions___or__, or_slot},
    {(void *)slot_QSurfaceFormat_FormatOptions___iand__, iand_slot},
    {(void *)slot_QSurfaceFormat_FormatOptions___and__, and_slot},
    {(void *)slot_QSurfaceFormat_FormatOptions___invert__, invert_slot},
    {(void *)slot_QSurfaceFormat_FormatOptions___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QSurfaceFormat_FormatOptions, "\1QSurfaceFormat.FormatOptions()\n"
"QSurfaceFormat.FormatOptions(Union[QSurfaceFormat.FormatOptions, QSurfaceFormat.FormatOption])\n"
"QSurfaceFormat.FormatOptions(QSurfaceFormat.FormatOptions)");


static pyqt5ClassPluginDef plugin_QSurfaceFormat_FormatOptions = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QSurfaceFormat_FormatOptions = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSurfaceFormat__FormatOptions,
        {SIP_NULLPTR},
        &plugin_QSurfaceFormat_FormatOptions
    },
    {
        sipNameNr_FormatOptions,
        {271, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSurfaceFormat_FormatOptions,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QSurfaceFormat_FormatOptions,
    init_type_QSurfaceFormat_FormatOptions,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSurfaceFormat_FormatOptions,
    assign_QSurfaceFormat_FormatOptions,
    array_QSurfaceFormat_FormatOptions,
    copy_QSurfaceFormat_FormatOptions,
    release_QSurfaceFormat_FormatOptions,
    SIP_NULLPTR,
    convertTo_QSurfaceFormat_FormatOptions,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qsurfaceformat.sip"
#include <qsurfaceformat.h>
#line 53905 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qsurfaceformat.sip"
#include <qsurfaceformat.h>
#line 53909 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 250 "sip/QtCore/qpycore_qpair.sip"
#include <qpair.h>
#line 53912 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QSurfaceFormat_setDepthBufferSize, "setDepthBufferSize(self, int)");

extern "C" {static PyObject *meth_QSurfaceFormat_setDepthBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setDepthBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSurfaceFormat, &sipCpp, &a0))
        {
            sipCpp->setDepthBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setDepthBufferSize, doc_QSurfaceFormat_setDepthBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_depthBufferSize, "depthBufferSize(self) -> int");

extern "C" {static PyObject *meth_QSurfaceFormat_depthBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_depthBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->depthBufferSize();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_depthBufferSize, doc_QSurfaceFormat_depthBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setStencilBufferSize, "setStencilBufferSize(self, int)");

extern "C" {static PyObject *meth_QSurfaceFormat_setStencilBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setStencilBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSurfaceFormat, &sipCpp, &a0))
        {
            sipCpp->setStencilBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setStencilBufferSize, doc_QSurfaceFormat_setStencilBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_stencilBufferSize, "stencilBufferSize(self) -> int");

extern "C" {static PyObject *meth_QSurfaceFormat_stencilBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_stencilBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->stencilBufferSize();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_stencilBufferSize, doc_QSurfaceFormat_stencilBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setRedBufferSize, "setRedBufferSize(self, int)");

extern "C" {static PyObject *meth_QSurfaceFormat_setRedBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setRedBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSurfaceFormat, &sipCpp, &a0))
        {
            sipCpp->setRedBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setRedBufferSize, doc_QSurfaceFormat_setRedBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_redBufferSize, "redBufferSize(self) -> int");

extern "C" {static PyObject *meth_QSurfaceFormat_redBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_redBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->redBufferSize();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_redBufferSize, doc_QSurfaceFormat_redBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setGreenBufferSize, "setGreenBufferSize(self, int)");

extern "C" {static PyObject *meth_QSurfaceFormat_setGreenBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setGreenBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSurfaceFormat, &sipCpp, &a0))
        {
            sipCpp->setGreenBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setGreenBufferSize, doc_QSurfaceFormat_setGreenBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_greenBufferSize, "greenBufferSize(self) -> int");

extern "C" {static PyObject *meth_QSurfaceFormat_greenBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_greenBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->greenBufferSize();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_greenBufferSize, doc_QSurfaceFormat_greenBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setBlueBufferSize, "setBlueBufferSize(self, int)");

extern "C" {static PyObject *meth_QSurfaceFormat_setBlueBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setBlueBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSurfaceFormat, &sipCpp, &a0))
        {
            sipCpp->setBlueBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setBlueBufferSize, doc_QSurfaceFormat_setBlueBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_blueBufferSize, "blueBufferSize(self) -> int");

extern "C" {static PyObject *meth_QSurfaceFormat_blueBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_blueBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->blueBufferSize();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_blueBufferSize, doc_QSurfaceFormat_blueBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setAlphaBufferSize, "setAlphaBufferSize(self, int)");

extern "C" {static PyObject *meth_QSurfaceFormat_setAlphaBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setAlphaBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSurfaceFormat, &sipCpp, &a0))
        {
            sipCpp->setAlphaBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setAlphaBufferSize, doc_QSurfaceFormat_setAlphaBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_alphaBufferSize, "alphaBufferSize(self) -> int");

extern "C" {static PyObject *meth_QSurfaceFormat_alphaBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_alphaBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->alphaBufferSize();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_alphaBufferSize, doc_QSurfaceFormat_alphaBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setSamples, "setSamples(self, int)");

extern "C" {static PyObject *meth_QSurfaceFormat_setSamples(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setSamples(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSurfaceFormat, &sipCpp, &a0))
        {
            sipCpp->setSamples(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setSamples, doc_QSurfaceFormat_setSamples);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_samples, "samples(self) -> int");

extern "C" {static PyObject *meth_QSurfaceFormat_samples(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_samples(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->samples();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_samples, doc_QSurfaceFormat_samples);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setSwapBehavior, "setSwapBehavior(self, QSurfaceFormat.SwapBehavior)");

extern "C" {static PyObject *meth_QSurfaceFormat_setSwapBehavior(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setSwapBehavior(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSurfaceFormat::SwapBehavior a0;
         ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSurfaceFormat, &sipCpp, sipType_QSurfaceFormat_SwapBehavior, &a0))
        {
            sipCpp->setSwapBehavior(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setSwapBehavior, doc_QSurfaceFormat_setSwapBehavior);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_swapBehavior, "swapBehavior(self) -> QSurfaceFormat.SwapBehavior");

extern "C" {static PyObject *meth_QSurfaceFormat_swapBehavior(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_swapBehavior(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
             ::QSurfaceFormat::SwapBehavior sipRes;

            sipRes = sipCpp->swapBehavior();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSurfaceFormat_SwapBehavior);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_swapBehavior, doc_QSurfaceFormat_swapBehavior);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_hasAlpha, "hasAlpha(self) -> bool");

extern "C" {static PyObject *meth_QSurfaceFormat_hasAlpha(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_hasAlpha(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasAlpha();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_hasAlpha, doc_QSurfaceFormat_hasAlpha);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setProfile, "setProfile(self, QSurfaceFormat.OpenGLContextProfile)");

extern "C" {static PyObject *meth_QSurfaceFormat_setProfile(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setProfile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSurfaceFormat::OpenGLContextProfile a0;
         ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSurfaceFormat, &sipCpp, sipType_QSurfaceFormat_OpenGLContextProfile, &a0))
        {
            sipCpp->setProfile(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setProfile, doc_QSurfaceFormat_setProfile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_profile, "profile(self) -> QSurfaceFormat.OpenGLContextProfile");

extern "C" {static PyObject *meth_QSurfaceFormat_profile(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_profile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
             ::QSurfaceFormat::OpenGLContextProfile sipRes;

            sipRes = sipCpp->profile();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSurfaceFormat_OpenGLContextProfile);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_profile, doc_QSurfaceFormat_profile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setRenderableType, "setRenderableType(self, QSurfaceFormat.RenderableType)");

extern "C" {static PyObject *meth_QSurfaceFormat_setRenderableType(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setRenderableType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSurfaceFormat::RenderableType a0;
         ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSurfaceFormat, &sipCpp, sipType_QSurfaceFormat_RenderableType, &a0))
        {
            sipCpp->setRenderableType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setRenderableType, doc_QSurfaceFormat_setRenderableType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_renderableType, "renderableType(self) -> QSurfaceFormat.RenderableType");

extern "C" {static PyObject *meth_QSurfaceFormat_renderableType(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_renderableType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
             ::QSurfaceFormat::RenderableType sipRes;

            sipRes = sipCpp->renderableType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSurfaceFormat_RenderableType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_renderableType, doc_QSurfaceFormat_renderableType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setMajorVersion, "setMajorVersion(self, int)");

extern "C" {static PyObject *meth_QSurfaceFormat_setMajorVersion(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setMajorVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSurfaceFormat, &sipCpp, &a0))
        {
            sipCpp->setMajorVersion(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setMajorVersion, doc_QSurfaceFormat_setMajorVersion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_majorVersion, "majorVersion(self) -> int");

extern "C" {static PyObject *meth_QSurfaceFormat_majorVersion(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_majorVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->majorVersion();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_majorVersion, doc_QSurfaceFormat_majorVersion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setMinorVersion, "setMinorVersion(self, int)");

extern "C" {static PyObject *meth_QSurfaceFormat_setMinorVersion(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setMinorVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSurfaceFormat, &sipCpp, &a0))
        {
            sipCpp->setMinorVersion(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setMinorVersion, doc_QSurfaceFormat_setMinorVersion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_minorVersion, "minorVersion(self) -> int");

extern "C" {static PyObject *meth_QSurfaceFormat_minorVersion(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_minorVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->minorVersion();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_minorVersion, doc_QSurfaceFormat_minorVersion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setStereo, "setStereo(self, bool)");

extern "C" {static PyObject *meth_QSurfaceFormat_setStereo(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setStereo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QSurfaceFormat, &sipCpp, &a0))
        {
            sipCpp->setStereo(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setStereo, doc_QSurfaceFormat_setStereo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setOption, "setOption(self, Union[QSurfaceFormat.FormatOptions, QSurfaceFormat.FormatOption])\n"
"setOption(self, QSurfaceFormat.FormatOption, on: bool = True)");

extern "C" {static PyObject *meth_QSurfaceFormat_setOption(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setOption(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSurfaceFormat::FormatOptions* a0;
        int a0State = 0;
         ::QSurfaceFormat *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ1", &sipSelf, sipType_QSurfaceFormat, &sipCpp, sipType_QSurfaceFormat_FormatOptions, &a0, &a0State))
        {
            sipCpp->setOption(*a0);
            sipReleaseType(a0,sipType_QSurfaceFormat_FormatOptions,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QSurfaceFormat::FormatOption a0;
        bool a1 = 1;
         ::QSurfaceFormat *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_on,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE|b", &sipSelf, sipType_QSurfaceFormat, &sipCpp, sipType_QSurfaceFormat_FormatOption, &a0, &a1))
        {
            sipCpp->setOption(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setOption, doc_QSurfaceFormat_setOption);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_testOption, "testOption(self, Union[QSurfaceFormat.FormatOptions, QSurfaceFormat.FormatOption]) -> bool\n"
"testOption(self, QSurfaceFormat.FormatOption) -> bool");

extern "C" {static PyObject *meth_QSurfaceFormat_testOption(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_testOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSurfaceFormat::FormatOptions* a0;
        int a0State = 0;
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSurfaceFormat, &sipCpp, sipType_QSurfaceFormat_FormatOptions, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->testOption(*a0);
            sipReleaseType(a0,sipType_QSurfaceFormat_FormatOptions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::QSurfaceFormat::FormatOption a0;
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSurfaceFormat, &sipCpp, sipType_QSurfaceFormat_FormatOption, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->testOption(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_testOption, doc_QSurfaceFormat_testOption);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_stereo, "stereo(self) -> bool");

extern "C" {static PyObject *meth_QSurfaceFormat_stereo(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_stereo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->stereo();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_stereo, doc_QSurfaceFormat_stereo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_version, "version(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_QSurfaceFormat_version(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_version(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
             ::QPair<int,int>*sipRes;

            sipRes = new  ::QPair<int,int>(sipCpp->version());

            return sipConvertFromNewType(sipRes,sipType_QPair_1800_1800,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_version, doc_QSurfaceFormat_version);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setVersion, "setVersion(self, int, int)");

extern "C" {static PyObject *meth_QSurfaceFormat_setVersion(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QSurfaceFormat, &sipCpp, &a0, &a1))
        {
            sipCpp->setVersion(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setVersion, doc_QSurfaceFormat_setVersion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setOptions, "setOptions(self, Union[QSurfaceFormat.FormatOptions, QSurfaceFormat.FormatOption])");

extern "C" {static PyObject *meth_QSurfaceFormat_setOptions(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSurfaceFormat::FormatOptions* a0;
        int a0State = 0;
         ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSurfaceFormat, &sipCpp, sipType_QSurfaceFormat_FormatOptions, &a0, &a0State))
        {
            sipCpp->setOptions(*a0);
            sipReleaseType(a0,sipType_QSurfaceFormat_FormatOptions,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setOptions, doc_QSurfaceFormat_setOptions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_options, "options(self) -> QSurfaceFormat.FormatOptions");

extern "C" {static PyObject *meth_QSurfaceFormat_options(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_options(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
             ::QSurfaceFormat::FormatOptions*sipRes;

            sipRes = new  ::QSurfaceFormat::FormatOptions(sipCpp->options());

            return sipConvertFromNewType(sipRes,sipType_QSurfaceFormat_FormatOptions,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_options, doc_QSurfaceFormat_options);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_swapInterval, "swapInterval(self) -> int");

extern "C" {static PyObject *meth_QSurfaceFormat_swapInterval(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_swapInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->swapInterval();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_swapInterval, doc_QSurfaceFormat_swapInterval);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setSwapInterval, "setSwapInterval(self, int)");

extern "C" {static PyObject *meth_QSurfaceFormat_setSwapInterval(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setSwapInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSurfaceFormat, &sipCpp, &a0))
        {
            sipCpp->setSwapInterval(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setSwapInterval, doc_QSurfaceFormat_setSwapInterval);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setDefaultFormat, "setDefaultFormat(QSurfaceFormat)");

extern "C" {static PyObject *meth_QSurfaceFormat_setDefaultFormat(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setDefaultFormat(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QSurfaceFormat, &a0))
        {
             ::QSurfaceFormat::setDefaultFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setDefaultFormat, doc_QSurfaceFormat_setDefaultFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_defaultFormat, "defaultFormat() -> QSurfaceFormat");

extern "C" {static PyObject *meth_QSurfaceFormat_defaultFormat(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_defaultFormat(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QSurfaceFormat*sipRes;

            sipRes = new  ::QSurfaceFormat( ::QSurfaceFormat::defaultFormat());

            return sipConvertFromNewType(sipRes,sipType_QSurfaceFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_defaultFormat, doc_QSurfaceFormat_defaultFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_colorSpace, "colorSpace(self) -> QSurfaceFormat.ColorSpace");

extern "C" {static PyObject *meth_QSurfaceFormat_colorSpace(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_colorSpace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
             ::QSurfaceFormat::ColorSpace sipRes;

            sipRes = sipCpp->colorSpace();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSurfaceFormat_ColorSpace);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_colorSpace, doc_QSurfaceFormat_colorSpace);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setColorSpace, "setColorSpace(self, QSurfaceFormat.ColorSpace)");

extern "C" {static PyObject *meth_QSurfaceFormat_setColorSpace(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setColorSpace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSurfaceFormat::ColorSpace a0;
         ::QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSurfaceFormat, &sipCpp, sipType_QSurfaceFormat_ColorSpace, &a0))
        {
            sipCpp->setColorSpace(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setColorSpace, doc_QSurfaceFormat_setColorSpace);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QSurfaceFormat___eq__(PyObject *,PyObject *);}
static PyObject *slot_QSurfaceFormat___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSurfaceFormat *sipCpp = reinterpret_cast< ::QSurfaceFormat *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSurfaceFormat));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QSurfaceFormat, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QSurfaceFormat, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QSurfaceFormat___ne__(PyObject *,PyObject *);}
static PyObject *slot_QSurfaceFormat___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSurfaceFormat *sipCpp = reinterpret_cast< ::QSurfaceFormat *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSurfaceFormat));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QSurfaceFormat, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QSurfaceFormat, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QSurfaceFormat(void *, int);}
static void release_QSurfaceFormat(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSurfaceFormat *>(sipCppV);
}


extern "C" {static void assign_QSurfaceFormat(void *, SIP_SSIZE_T, void *);}
static void assign_QSurfaceFormat(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QSurfaceFormat *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QSurfaceFormat *>(sipSrc);
}


extern "C" {static void *array_QSurfaceFormat(SIP_SSIZE_T);}
static void *array_QSurfaceFormat(SIP_SSIZE_T sipNrElem)
{
    return new  ::QSurfaceFormat[sipNrElem];
}


extern "C" {static void *copy_QSurfaceFormat(const void *, SIP_SSIZE_T);}
static void *copy_QSurfaceFormat(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QSurfaceFormat(reinterpret_cast<const  ::QSurfaceFormat *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSurfaceFormat(sipSimpleWrapper *);}
static void dealloc_QSurfaceFormat(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSurfaceFormat(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QSurfaceFormat(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSurfaceFormat(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QSurfaceFormat *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QSurfaceFormat();

            return sipCpp;
        }
    }

    {
         ::QSurfaceFormat::FormatOptions* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QSurfaceFormat_FormatOptions, &a0, &a0State))
        {
            sipCpp = new  ::QSurfaceFormat(*a0);
            sipReleaseType(a0,sipType_QSurfaceFormat_FormatOptions,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QSurfaceFormat* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QSurfaceFormat, &a0))
        {
            sipCpp = new  ::QSurfaceFormat(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QSurfaceFormat[] = {
    {(void *)slot_QSurfaceFormat___eq__, eq_slot},
    {(void *)slot_QSurfaceFormat___ne__, ne_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QSurfaceFormat[] = {
    {SIP_MLNAME_CAST(sipName_alphaBufferSize), meth_QSurfaceFormat_alphaBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_alphaBufferSize)},
    {SIP_MLNAME_CAST(sipName_blueBufferSize), meth_QSurfaceFormat_blueBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_blueBufferSize)},
    {SIP_MLNAME_CAST(sipName_colorSpace), meth_QSurfaceFormat_colorSpace, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_colorSpace)},
    {SIP_MLNAME_CAST(sipName_defaultFormat), meth_QSurfaceFormat_defaultFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_defaultFormat)},
    {SIP_MLNAME_CAST(sipName_depthBufferSize), meth_QSurfaceFormat_depthBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_depthBufferSize)},
    {SIP_MLNAME_CAST(sipName_greenBufferSize), meth_QSurfaceFormat_greenBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_greenBufferSize)},
    {SIP_MLNAME_CAST(sipName_hasAlpha), meth_QSurfaceFormat_hasAlpha, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_hasAlpha)},
    {SIP_MLNAME_CAST(sipName_majorVersion), meth_QSurfaceFormat_majorVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_majorVersion)},
    {SIP_MLNAME_CAST(sipName_minorVersion), meth_QSurfaceFormat_minorVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_minorVersion)},
    {SIP_MLNAME_CAST(sipName_options), meth_QSurfaceFormat_options, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_options)},
    {SIP_MLNAME_CAST(sipName_profile), meth_QSurfaceFormat_profile, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_profile)},
    {SIP_MLNAME_CAST(sipName_redBufferSize), meth_QSurfaceFormat_redBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_redBufferSize)},
    {SIP_MLNAME_CAST(sipName_renderableType), meth_QSurfaceFormat_renderableType, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_renderableType)},
    {SIP_MLNAME_CAST(sipName_samples), meth_QSurfaceFormat_samples, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_samples)},
    {SIP_MLNAME_CAST(sipName_setAlphaBufferSize), meth_QSurfaceFormat_setAlphaBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_setAlphaBufferSize)},
    {SIP_MLNAME_CAST(sipName_setBlueBufferSize), meth_QSurfaceFormat_setBlueBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_setBlueBufferSize)},
    {SIP_MLNAME_CAST(sipName_setColorSpace), meth_QSurfaceFormat_setColorSpace, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_setColorSpace)},
    {SIP_MLNAME_CAST(sipName_setDefaultFormat), meth_QSurfaceFormat_setDefaultFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_setDefaultFormat)},
    {SIP_MLNAME_CAST(sipName_setDepthBufferSize), meth_QSurfaceFormat_setDepthBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_setDepthBufferSize)},
    {SIP_MLNAME_CAST(sipName_setGreenBufferSize), meth_QSurfaceFormat_setGreenBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_setGreenBufferSize)},
    {SIP_MLNAME_CAST(sipName_setMajorVersion), meth_QSurfaceFormat_setMajorVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_setMajorVersion)},
    {SIP_MLNAME_CAST(sipName_setMinorVersion), meth_QSurfaceFormat_setMinorVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_setMinorVersion)},
    {SIP_MLNAME_CAST(sipName_setOption), SIP_MLMETH_CAST(meth_QSurfaceFormat_setOption), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSurfaceFormat_setOption)},
    {SIP_MLNAME_CAST(sipName_setOptions), meth_QSurfaceFormat_setOptions, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_setOptions)},
    {SIP_MLNAME_CAST(sipName_setProfile), meth_QSurfaceFormat_setProfile, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_setProfile)},
    {SIP_MLNAME_CAST(sipName_setRedBufferSize), meth_QSurfaceFormat_setRedBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_setRedBufferSize)},
    {SIP_MLNAME_CAST(sipName_setRenderableType), meth_QSurfaceFormat_setRenderableType, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_setRenderableType)},
    {SIP_MLNAME_CAST(sipName_setSamples), meth_QSurfaceFormat_setSamples, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_setSamples)},
    {SIP_MLNAME_CAST(sipName_setStencilBufferSize), meth_QSurfaceFormat_setStencilBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_setStencilBufferSize)},
    {SIP_MLNAME_CAST(sipName_setStereo), meth_QSurfaceFormat_setStereo, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_setStereo)},
    {SIP_MLNAME_CAST(sipName_setSwapBehavior), meth_QSurfaceFormat_setSwapBehavior, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_setSwapBehavior)},
    {SIP_MLNAME_CAST(sipName_setSwapInterval), meth_QSurfaceFormat_setSwapInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_setSwapInterval)},
    {SIP_MLNAME_CAST(sipName_setVersion), meth_QSurfaceFormat_setVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_setVersion)},
    {SIP_MLNAME_CAST(sipName_stencilBufferSize), meth_QSurfaceFormat_stencilBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_stencilBufferSize)},
    {SIP_MLNAME_CAST(sipName_stereo), meth_QSurfaceFormat_stereo, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_stereo)},
    {SIP_MLNAME_CAST(sipName_swapBehavior), meth_QSurfaceFormat_swapBehavior, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_swapBehavior)},
    {SIP_MLNAME_CAST(sipName_swapInterval), meth_QSurfaceFormat_swapInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_swapInterval)},
    {SIP_MLNAME_CAST(sipName_testOption), meth_QSurfaceFormat_testOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_testOption)},
    {SIP_MLNAME_CAST(sipName_version), meth_QSurfaceFormat_version, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_version)}
};

static sipEnumMemberDef enummembers_QSurfaceFormat[] = {
    {sipName_CompatibilityProfile, static_cast<int>( ::QSurfaceFormat::CompatibilityProfile), 275},
    {sipName_CoreProfile, static_cast<int>( ::QSurfaceFormat::CoreProfile), 275},
    {sipName_DebugContext, static_cast<int>( ::QSurfaceFormat::DebugContext), 273},
    {sipName_DefaultColorSpace, static_cast<int>( ::QSurfaceFormat::DefaultColorSpace), 272},
    {sipName_DefaultRenderableType, static_cast<int>( ::QSurfaceFormat::DefaultRenderableType), 276},
    {sipName_DefaultSwapBehavior, static_cast<int>( ::QSurfaceFormat::DefaultSwapBehavior), 277},
    {sipName_DeprecatedFunctions, static_cast<int>( ::QSurfaceFormat::DeprecatedFunctions), 273},
    {sipName_DoubleBuffer, static_cast<int>( ::QSurfaceFormat::DoubleBuffer), 277},
    {sipName_NoProfile, static_cast<int>( ::QSurfaceFormat::NoProfile), 275},
    {sipName_OpenGL, static_cast<int>( ::QSurfaceFormat::OpenGL), 276},
    {sipName_OpenGLES, static_cast<int>( ::QSurfaceFormat::OpenGLES), 276},
    {sipName_OpenVG, static_cast<int>( ::QSurfaceFormat::OpenVG), 276},
    {sipName_ResetNotification, static_cast<int>( ::QSurfaceFormat::ResetNotification), 273},
    {sipName_SingleBuffer, static_cast<int>( ::QSurfaceFormat::SingleBuffer), 277},
    {sipName_StereoBuffers, static_cast<int>( ::QSurfaceFormat::StereoBuffers), 273},
    {sipName_TripleBuffer, static_cast<int>( ::QSurfaceFormat::TripleBuffer), 277},
    {sipName_sRGBColorSpace, static_cast<int>( ::QSurfaceFormat::sRGBColorSpace), 272},
};

PyDoc_STRVAR(doc_QSurfaceFormat, "\1QSurfaceFormat()\n"
"QSurfaceFormat(Union[QSurfaceFormat.FormatOptions, QSurfaceFormat.FormatOption])\n"
"QSurfaceFormat(QSurfaceFormat)");


static pyqt5ClassPluginDef plugin_QSurfaceFormat = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QSurfaceFormat = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSurfaceFormat,
        {SIP_NULLPTR},
        &plugin_QSurfaceFormat
    },
    {
        sipNameNr_QSurfaceFormat,
        {0, 0, 1},
        39, methods_QSurfaceFormat,
        17, enummembers_QSurfaceFormat,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSurfaceFormat,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QSurfaceFormat,
    init_type_QSurfaceFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSurfaceFormat,
    assign_QSurfaceFormat,
    array_QSurfaceFormat,
    copy_QSurfaceFormat,
    release_QSurfaceFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qstylehints.sip"
#include <qstylehints.h>
#line 55331 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 55335 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "sip/QtCore/qchar.sip"
#include <qchar.h>
#line 55338 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 55341 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 55344 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 55347 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 55350 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 55353 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 55356 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 55359 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 55362 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 55365 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 55368 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 55371 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 55374 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 55377 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 55380 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 55383 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QStyleHints_mouseDoubleClickInterval, "mouseDoubleClickInterval(self) -> int");

extern "C" {static PyObject *meth_QStyleHints_mouseDoubleClickInterval(PyObject *, PyObject *);}
static PyObject *meth_QStyleHints_mouseDoubleClickInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStyleHints *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStyleHints, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->mouseDoubleClickInterval();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStyleHints, sipName_mouseDoubleClickInterval, doc_QStyleHints_mouseDoubleClickInterval);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStyleHints_startDragDistance, "startDragDistance(self) -> int");

extern "C" {static PyObject *meth_QStyleHints_startDragDistance(PyObject *, PyObject *);}
static PyObject *meth_QStyleHints_startDragDistance(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStyleHints *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStyleHints, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->startDragDistance();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStyleHints, sipName_startDragDistance, doc_QStyleHints_startDragDistance);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStyleHints_startDragTime, "startDragTime(self) -> int");

extern "C" {static PyObject *meth_QStyleHints_startDragTime(PyObject *, PyObject *);}
static PyObject *meth_QStyleHints_startDragTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStyleHints *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStyleHints, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->startDragTime();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStyleHints, sipName_startDragTime, doc_QStyleHints_startDragTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStyleHints_startDragVelocity, "startDragVelocity(self) -> int");

extern "C" {static PyObject *meth_QStyleHints_startDragVelocity(PyObject *, PyObject *);}
static PyObject *meth_QStyleHints_startDragVelocity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStyleHints *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStyleHints, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->startDragVelocity();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStyleHints, sipName_startDragVelocity, doc_QStyleHints_startDragVelocity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStyleHints_keyboardInputInterval, "keyboardInputInterval(self) -> int");

extern "C" {static PyObject *meth_QStyleHints_keyboardInputInterval(PyObject *, PyObject *);}
static PyObject *meth_QStyleHints_keyboardInputInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStyleHints *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStyleHints, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->keyboardInputInterval();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStyleHints, sipName_keyboardInputInterval, doc_QStyleHints_keyboardInputInterval);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStyleHints_keyboardAutoRepeatRate, "keyboardAutoRepeatRate(self) -> int");

extern "C" {static PyObject *meth_QStyleHints_keyboardAutoRepeatRate(PyObject *, PyObject *);}
static PyObject *meth_QStyleHints_keyboardAutoRepeatRate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStyleHints *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStyleHints, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->keyboardAutoRepeatRate();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStyleHints, sipName_keyboardAutoRepeatRate, doc_QStyleHints_keyboardAutoRepeatRate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStyleHints_cursorFlashTime, "cursorFlashTime(self) -> int");

extern "C" {static PyObject *meth_QStyleHints_cursorFlashTime(PyObject *, PyObject *);}
static PyObject *meth_QStyleHints_cursorFlashTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStyleHints *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStyleHints, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->cursorFlashTime();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStyleHints, sipName_cursorFlashTime, doc_QStyleHints_cursorFlashTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStyleHints_showIsFullScreen, "showIsFullScreen(self) -> bool");

extern "C" {static PyObject *meth_QStyleHints_showIsFullScreen(PyObject *, PyObject *);}
static PyObject *meth_QStyleHints_showIsFullScreen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStyleHints *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStyleHints, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->showIsFullScreen();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStyleHints, sipName_showIsFullScreen, doc_QStyleHints_showIsFullScreen);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStyleHints_passwordMaskDelay, "passwordMaskDelay(self) -> int");

extern "C" {static PyObject *meth_QStyleHints_passwordMaskDelay(PyObject *, PyObject *);}
static PyObject *meth_QStyleHints_passwordMaskDelay(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStyleHints *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStyleHints, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->passwordMaskDelay();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStyleHints, sipName_passwordMaskDelay, doc_QStyleHints_passwordMaskDelay);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStyleHints_fontSmoothingGamma, "fontSmoothingGamma(self) -> float");

extern "C" {static PyObject *meth_QStyleHints_fontSmoothingGamma(PyObject *, PyObject *);}
static PyObject *meth_QStyleHints_fontSmoothingGamma(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStyleHints *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStyleHints, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->fontSmoothingGamma();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStyleHints, sipName_fontSmoothingGamma, doc_QStyleHints_fontSmoothingGamma);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStyleHints_useRtlExtensions, "useRtlExtensions(self) -> bool");

extern "C" {static PyObject *meth_QStyleHints_useRtlExtensions(PyObject *, PyObject *);}
static PyObject *meth_QStyleHints_useRtlExtensions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStyleHints *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStyleHints, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->useRtlExtensions();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStyleHints, sipName_useRtlExtensions, doc_QStyleHints_useRtlExtensions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStyleHints_passwordMaskCharacter, "passwordMaskCharacter(self) -> str");

extern "C" {static PyObject *meth_QStyleHints_passwordMaskCharacter(PyObject *, PyObject *);}
static PyObject *meth_QStyleHints_passwordMaskCharacter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStyleHints *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStyleHints, &sipCpp))
        {
             ::QChar*sipRes;

            sipRes = new  ::QChar(sipCpp->passwordMaskCharacter());

            return sipConvertFromNewType(sipRes,sipType_QChar,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStyleHints, sipName_passwordMaskCharacter, doc_QStyleHints_passwordMaskCharacter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStyleHints_setFocusOnTouchRelease, "setFocusOnTouchRelease(self) -> bool");

extern "C" {static PyObject *meth_QStyleHints_setFocusOnTouchRelease(PyObject *, PyObject *);}
static PyObject *meth_QStyleHints_setFocusOnTouchRelease(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStyleHints *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStyleHints, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->setFocusOnTouchRelease();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStyleHints, sipName_setFocusOnTouchRelease, doc_QStyleHints_setFocusOnTouchRelease);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStyleHints_mousePressAndHoldInterval, "mousePressAndHoldInterval(self) -> int");

extern "C" {static PyObject *meth_QStyleHints_mousePressAndHoldInterval(PyObject *, PyObject *);}
static PyObject *meth_QStyleHints_mousePressAndHoldInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStyleHints *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStyleHints, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->mousePressAndHoldInterval();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStyleHints, sipName_mousePressAndHoldInterval, doc_QStyleHints_mousePressAndHoldInterval);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStyleHints_tabFocusBehavior, "tabFocusBehavior(self) -> Qt.TabFocusBehavior");

extern "C" {static PyObject *meth_QStyleHints_tabFocusBehavior(PyObject *, PyObject *);}
static PyObject *meth_QStyleHints_tabFocusBehavior(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStyleHints *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStyleHints, &sipCpp))
        {
             ::Qt::TabFocusBehavior sipRes;

            sipRes = sipCpp->tabFocusBehavior();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_TabFocusBehavior);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStyleHints, sipName_tabFocusBehavior, doc_QStyleHints_tabFocusBehavior);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStyleHints_singleClickActivation, "singleClickActivation(self) -> bool");

extern "C" {static PyObject *meth_QStyleHints_singleClickActivation(PyObject *, PyObject *);}
static PyObject *meth_QStyleHints_singleClickActivation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStyleHints *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStyleHints, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->singleClickActivation();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStyleHints, sipName_singleClickActivation, doc_QStyleHints_singleClickActivation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStyleHints_showIsMaximized, "showIsMaximized(self) -> bool");

extern "C" {static PyObject *meth_QStyleHints_showIsMaximized(PyObject *, PyObject *);}
static PyObject *meth_QStyleHints_showIsMaximized(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStyleHints *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStyleHints, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->showIsMaximized();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStyleHints, sipName_showIsMaximized, doc_QStyleHints_showIsMaximized);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStyleHints_useHoverEffects, "useHoverEffects(self) -> bool");

extern "C" {static PyObject *meth_QStyleHints_useHoverEffects(PyObject *, PyObject *);}
static PyObject *meth_QStyleHints_useHoverEffects(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStyleHints *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStyleHints, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->useHoverEffects();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStyleHints, sipName_useHoverEffects, doc_QStyleHints_useHoverEffects);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStyleHints_setUseHoverEffects, "setUseHoverEffects(self, bool)");

extern "C" {static PyObject *meth_QStyleHints_setUseHoverEffects(PyObject *, PyObject *);}
static PyObject *meth_QStyleHints_setUseHoverEffects(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QStyleHints *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QStyleHints, &sipCpp, &a0))
        {
            sipCpp->setUseHoverEffects(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStyleHints, sipName_setUseHoverEffects, doc_QStyleHints_setUseHoverEffects);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStyleHints_wheelScrollLines, "wheelScrollLines(self) -> int");

extern "C" {static PyObject *meth_QStyleHints_wheelScrollLines(PyObject *, PyObject *);}
static PyObject *meth_QStyleHints_wheelScrollLines(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStyleHints *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStyleHints, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->wheelScrollLines();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStyleHints, sipName_wheelScrollLines, doc_QStyleHints_wheelScrollLines);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStyleHints_showShortcutsInContextMenus, "showShortcutsInContextMenus(self) -> bool");

extern "C" {static PyObject *meth_QStyleHints_showShortcutsInContextMenus(PyObject *, PyObject *);}
static PyObject *meth_QStyleHints_showShortcutsInContextMenus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStyleHints *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStyleHints, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->showShortcutsInContextMenus();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStyleHints, sipName_showShortcutsInContextMenus, doc_QStyleHints_showShortcutsInContextMenus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStyleHints_mouseQuickSelectionThreshold, "mouseQuickSelectionThreshold(self) -> int");

extern "C" {static PyObject *meth_QStyleHints_mouseQuickSelectionThreshold(PyObject *, PyObject *);}
static PyObject *meth_QStyleHints_mouseQuickSelectionThreshold(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStyleHints *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStyleHints, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->mouseQuickSelectionThreshold();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStyleHints, sipName_mouseQuickSelectionThreshold, doc_QStyleHints_mouseQuickSelectionThreshold);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QStyleHints(void *, const sipTypeDef *);}
static void *cast_QStyleHints(void *sipCppV, const sipTypeDef *targetType)
{
     ::QStyleHints *sipCpp = reinterpret_cast< ::QStyleHints *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QStyleHints(void *, int);}
static void release_QStyleHints(void *sipCppV, int)
{
     ::QStyleHints *sipCpp = reinterpret_cast< ::QStyleHints *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QStyleHints(sipSimpleWrapper *);}
static void dealloc_QStyleHints(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QStyleHints(sipGetAddress(sipSelf), 0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QStyleHints[] = {{25, 0, 1}};


static PyMethodDef methods_QStyleHints[] = {
    {SIP_MLNAME_CAST(sipName_cursorFlashTime), meth_QStyleHints_cursorFlashTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QStyleHints_cursorFlashTime)},
    {SIP_MLNAME_CAST(sipName_fontSmoothingGamma), meth_QStyleHints_fontSmoothingGamma, METH_VARARGS, SIP_MLDOC_CAST(doc_QStyleHints_fontSmoothingGamma)},
    {SIP_MLNAME_CAST(sipName_keyboardAutoRepeatRate), meth_QStyleHints_keyboardAutoRepeatRate, METH_VARARGS, SIP_MLDOC_CAST(doc_QStyleHints_keyboardAutoRepeatRate)},
    {SIP_MLNAME_CAST(sipName_keyboardInputInterval), meth_QStyleHints_keyboardInputInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QStyleHints_keyboardInputInterval)},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickInterval), meth_QStyleHints_mouseDoubleClickInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QStyleHints_mouseDoubleClickInterval)},
    {SIP_MLNAME_CAST(sipName_mousePressAndHoldInterval), meth_QStyleHints_mousePressAndHoldInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QStyleHints_mousePressAndHoldInterval)},
    {SIP_MLNAME_CAST(sipName_mouseQuickSelectionThreshold), meth_QStyleHints_mouseQuickSelectionThreshold, METH_VARARGS, SIP_MLDOC_CAST(doc_QStyleHints_mouseQuickSelectionThreshold)},
    {SIP_MLNAME_CAST(sipName_passwordMaskCharacter), meth_QStyleHints_passwordMaskCharacter, METH_VARARGS, SIP_MLDOC_CAST(doc_QStyleHints_passwordMaskCharacter)},
    {SIP_MLNAME_CAST(sipName_passwordMaskDelay), meth_QStyleHints_passwordMaskDelay, METH_VARARGS, SIP_MLDOC_CAST(doc_QStyleHints_passwordMaskDelay)},
    {SIP_MLNAME_CAST(sipName_setFocusOnTouchRelease), meth_QStyleHints_setFocusOnTouchRelease, METH_VARARGS, SIP_MLDOC_CAST(doc_QStyleHints_setFocusOnTouchRelease)},
    {SIP_MLNAME_CAST(sipName_setUseHoverEffects), meth_QStyleHints_setUseHoverEffects, METH_VARARGS, SIP_MLDOC_CAST(doc_QStyleHints_setUseHoverEffects)},
    {SIP_MLNAME_CAST(sipName_showIsFullScreen), meth_QStyleHints_showIsFullScreen, METH_VARARGS, SIP_MLDOC_CAST(doc_QStyleHints_showIsFullScreen)},
    {SIP_MLNAME_CAST(sipName_showIsMaximized), meth_QStyleHints_showIsMaximized, METH_VARARGS, SIP_MLDOC_CAST(doc_QStyleHints_showIsMaximized)},
    {SIP_MLNAME_CAST(sipName_showShortcutsInContextMenus), meth_QStyleHints_showShortcutsInContextMenus, METH_VARARGS, SIP_MLDOC_CAST(doc_QStyleHints_showShortcutsInContextMenus)},
    {SIP_MLNAME_CAST(sipName_singleClickActivation), meth_QStyleHints_singleClickActivation, METH_VARARGS, SIP_MLDOC_CAST(doc_QStyleHints_singleClickActivation)},
    {SIP_MLNAME_CAST(sipName_startDragDistance), meth_QStyleHints_startDragDistance, METH_VARARGS, SIP_MLDOC_CAST(doc_QStyleHints_startDragDistance)},
    {SIP_MLNAME_CAST(sipName_startDragTime), meth_QStyleHints_startDragTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QStyleHints_startDragTime)},
    {SIP_MLNAME_CAST(sipName_startDragVelocity), meth_QStyleHints_startDragVelocity, METH_VARARGS, SIP_MLDOC_CAST(doc_QStyleHints_startDragVelocity)},
    {SIP_MLNAME_CAST(sipName_tabFocusBehavior), meth_QStyleHints_tabFocusBehavior, METH_VARARGS, SIP_MLDOC_CAST(doc_QStyleHints_tabFocusBehavior)},
    {SIP_MLNAME_CAST(sipName_useHoverEffects), meth_QStyleHints_useHoverEffects, METH_VARARGS, SIP_MLDOC_CAST(doc_QStyleHints_useHoverEffects)},
    {SIP_MLNAME_CAST(sipName_useRtlExtensions), meth_QStyleHints_useRtlExtensions, METH_VARARGS, SIP_MLDOC_CAST(doc_QStyleHints_useRtlExtensions)},
    {SIP_MLNAME_CAST(sipName_wheelScrollLines), meth_QStyleHints_wheelScrollLines, METH_VARARGS, SIP_MLDOC_CAST(doc_QStyleHints_wheelScrollLines)}
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QStyleHints[] = {
    {"mouseQuickSelectionThresholdChanged(int)", "\1mouseQuickSelectionThresholdChanged(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"wheelScrollLinesChanged(int)", "\1wheelScrollLinesChanged(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"useHoverEffectsChanged(bool)", "\1useHoverEffectsChanged(self, bool)", SIP_NULLPTR, SIP_NULLPTR},
    {"tabFocusBehaviorChanged(Qt::TabFocusBehavior)", "\1tabFocusBehaviorChanged(self, Qt.TabFocusBehavior)", SIP_NULLPTR, SIP_NULLPTR},
    {"mousePressAndHoldIntervalChanged(int)", "\1mousePressAndHoldIntervalChanged(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"startDragTimeChanged(int)", "\1startDragTimeChanged(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"startDragDistanceChanged(int)", "\1startDragDistanceChanged(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"mouseDoubleClickIntervalChanged(int)", "\1mouseDoubleClickIntervalChanged(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"keyboardInputIntervalChanged(int)", "\1keyboardInputIntervalChanged(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"cursorFlashTimeChanged(int)", "\1cursorFlashTimeChanged(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QStyleHints = {
    & ::QStyleHints::staticMetaObject,
    0,
    signals_QStyleHints,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QStyleHints = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QStyleHints,
        {SIP_NULLPTR},
        &plugin_QStyleHints
    },
    {
        sipNameNr_QStyleHints,
        {0, 0, 1},
        22, methods_QStyleHints,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_QStyleHints,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QStyleHints,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QStyleHints,
    cast_QStyleHints,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qstatictext.sip"
#include <qstatictext.h>
#line 56143 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 56147 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 56150 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 56153 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 97 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 56156 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 56159 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 56162 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QStaticText_setText, "setText(self, str)");

extern "C" {static PyObject *meth_QStaticText_setText(PyObject *, PyObject *);}
static PyObject *meth_QStaticText_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QStaticText *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QStaticText, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setText(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStaticText, sipName_setText, doc_QStaticText_setText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStaticText_text, "text(self) -> str");

extern "C" {static PyObject *meth_QStaticText_text(PyObject *, PyObject *);}
static PyObject *meth_QStaticText_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStaticText *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStaticText, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->text());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStaticText, sipName_text, doc_QStaticText_text);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStaticText_setTextFormat, "setTextFormat(self, Qt.TextFormat)");

extern "C" {static PyObject *meth_QStaticText_setTextFormat(PyObject *, PyObject *);}
static PyObject *meth_QStaticText_setTextFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::TextFormat a0;
         ::QStaticText *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QStaticText, &sipCpp, sipType_Qt_TextFormat, &a0))
        {
            sipCpp->setTextFormat(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStaticText, sipName_setTextFormat, doc_QStaticText_setTextFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStaticText_textFormat, "textFormat(self) -> Qt.TextFormat");

extern "C" {static PyObject *meth_QStaticText_textFormat(PyObject *, PyObject *);}
static PyObject *meth_QStaticText_textFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStaticText *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStaticText, &sipCpp))
        {
             ::Qt::TextFormat sipRes;

            sipRes = sipCpp->textFormat();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_TextFormat);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStaticText, sipName_textFormat, doc_QStaticText_textFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStaticText_setTextWidth, "setTextWidth(self, float)");

extern "C" {static PyObject *meth_QStaticText_setTextWidth(PyObject *, PyObject *);}
static PyObject *meth_QStaticText_setTextWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QStaticText *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QStaticText, &sipCpp, &a0))
        {
            sipCpp->setTextWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStaticText, sipName_setTextWidth, doc_QStaticText_setTextWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStaticText_textWidth, "textWidth(self) -> float");

extern "C" {static PyObject *meth_QStaticText_textWidth(PyObject *, PyObject *);}
static PyObject *meth_QStaticText_textWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStaticText *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStaticText, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->textWidth();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStaticText, sipName_textWidth, doc_QStaticText_textWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStaticText_setTextOption, "setTextOption(self, QTextOption)");

extern "C" {static PyObject *meth_QStaticText_setTextOption(PyObject *, PyObject *);}
static PyObject *meth_QStaticText_setTextOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextOption* a0;
         ::QStaticText *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QStaticText, &sipCpp, sipType_QTextOption, &a0))
        {
            sipCpp->setTextOption(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStaticText, sipName_setTextOption, doc_QStaticText_setTextOption);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStaticText_textOption, "textOption(self) -> QTextOption");

extern "C" {static PyObject *meth_QStaticText_textOption(PyObject *, PyObject *);}
static PyObject *meth_QStaticText_textOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStaticText *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStaticText, &sipCpp))
        {
             ::QTextOption*sipRes;

            sipRes = new  ::QTextOption(sipCpp->textOption());

            return sipConvertFromNewType(sipRes,sipType_QTextOption,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStaticText, sipName_textOption, doc_QStaticText_textOption);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStaticText_size, "size(self) -> QSizeF");

extern "C" {static PyObject *meth_QStaticText_size(PyObject *, PyObject *);}
static PyObject *meth_QStaticText_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStaticText *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStaticText, &sipCpp))
        {
             ::QSizeF*sipRes;

            sipRes = new  ::QSizeF(sipCpp->size());

            return sipConvertFromNewType(sipRes,sipType_QSizeF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStaticText, sipName_size, doc_QStaticText_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStaticText_prepare, "prepare(self, matrix: QTransform = QTransform(), font: QFont = QFont())");

extern "C" {static PyObject *meth_QStaticText_prepare(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStaticText_prepare(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTransform& a0def = QTransform();
        const  ::QTransform* a0 = &a0def;
        const  ::QFont& a1def = QFont();
        const  ::QFont* a1 = &a1def;
         ::QStaticText *sipCpp;

        static const char *sipKwdList[] = {
            sipName_matrix,
            sipName_font,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J9J9", &sipSelf, sipType_QStaticText, &sipCpp, sipType_QTransform, &a0, sipType_QFont, &a1))
        {
            sipCpp->prepare(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStaticText, sipName_prepare, doc_QStaticText_prepare);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStaticText_setPerformanceHint, "setPerformanceHint(self, QStaticText.PerformanceHint)");

extern "C" {static PyObject *meth_QStaticText_setPerformanceHint(PyObject *, PyObject *);}
static PyObject *meth_QStaticText_setPerformanceHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QStaticText::PerformanceHint a0;
         ::QStaticText *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QStaticText, &sipCpp, sipType_QStaticText_PerformanceHint, &a0))
        {
            sipCpp->setPerformanceHint(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStaticText, sipName_setPerformanceHint, doc_QStaticText_setPerformanceHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStaticText_performanceHint, "performanceHint(self) -> QStaticText.PerformanceHint");

extern "C" {static PyObject *meth_QStaticText_performanceHint(PyObject *, PyObject *);}
static PyObject *meth_QStaticText_performanceHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStaticText *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStaticText, &sipCpp))
        {
             ::QStaticText::PerformanceHint sipRes;

            sipRes = sipCpp->performanceHint();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QStaticText_PerformanceHint);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStaticText, sipName_performanceHint, doc_QStaticText_performanceHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStaticText_swap, "swap(self, QStaticText)");

extern "C" {static PyObject *meth_QStaticText_swap(PyObject *, PyObject *);}
static PyObject *meth_QStaticText_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QStaticText* a0;
         ::QStaticText *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QStaticText, &sipCpp, sipType_QStaticText, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStaticText, sipName_swap, doc_QStaticText_swap);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QStaticText___ne__(PyObject *,PyObject *);}
static PyObject *slot_QStaticText___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QStaticText *sipCpp = reinterpret_cast< ::QStaticText *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QStaticText));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStaticText* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QStaticText, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QStaticText::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QStaticText, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QStaticText___eq__(PyObject *,PyObject *);}
static PyObject *slot_QStaticText___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QStaticText *sipCpp = reinterpret_cast< ::QStaticText *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QStaticText));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStaticText* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QStaticText, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QStaticText::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QStaticText, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QStaticText(void *, int);}
static void release_QStaticText(void *sipCppV, int)
{
    delete reinterpret_cast< ::QStaticText *>(sipCppV);
}


extern "C" {static void assign_QStaticText(void *, SIP_SSIZE_T, void *);}
static void assign_QStaticText(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QStaticText *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QStaticText *>(sipSrc);
}


extern "C" {static void *array_QStaticText(SIP_SSIZE_T);}
static void *array_QStaticText(SIP_SSIZE_T sipNrElem)
{
    return new  ::QStaticText[sipNrElem];
}


extern "C" {static void *copy_QStaticText(const void *, SIP_SSIZE_T);}
static void *copy_QStaticText(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QStaticText(reinterpret_cast<const  ::QStaticText *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QStaticText(sipSimpleWrapper *);}
static void dealloc_QStaticText(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QStaticText(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QStaticText(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QStaticText(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QStaticText *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QStaticText();

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new  ::QStaticText(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QStaticText* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QStaticText, &a0))
        {
            sipCpp = new  ::QStaticText(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QStaticText[] = {
    {(void *)slot_QStaticText___ne__, ne_slot},
    {(void *)slot_QStaticText___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QStaticText[] = {
    {SIP_MLNAME_CAST(sipName_performanceHint), meth_QStaticText_performanceHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QStaticText_performanceHint)},
    {SIP_MLNAME_CAST(sipName_prepare), SIP_MLMETH_CAST(meth_QStaticText_prepare), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStaticText_prepare)},
    {SIP_MLNAME_CAST(sipName_setPerformanceHint), meth_QStaticText_setPerformanceHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QStaticText_setPerformanceHint)},
    {SIP_MLNAME_CAST(sipName_setText), meth_QStaticText_setText, METH_VARARGS, SIP_MLDOC_CAST(doc_QStaticText_setText)},
    {SIP_MLNAME_CAST(sipName_setTextFormat), meth_QStaticText_setTextFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QStaticText_setTextFormat)},
    {SIP_MLNAME_CAST(sipName_setTextOption), meth_QStaticText_setTextOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QStaticText_setTextOption)},
    {SIP_MLNAME_CAST(sipName_setTextWidth), meth_QStaticText_setTextWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QStaticText_setTextWidth)},
    {SIP_MLNAME_CAST(sipName_size), meth_QStaticText_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QStaticText_size)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QStaticText_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QStaticText_swap)},
    {SIP_MLNAME_CAST(sipName_text), meth_QStaticText_text, METH_VARARGS, SIP_MLDOC_CAST(doc_QStaticText_text)},
    {SIP_MLNAME_CAST(sipName_textFormat), meth_QStaticText_textFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QStaticText_textFormat)},
    {SIP_MLNAME_CAST(sipName_textOption), meth_QStaticText_textOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QStaticText_textOption)},
    {SIP_MLNAME_CAST(sipName_textWidth), meth_QStaticText_textWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QStaticText_textWidth)}
};

static sipEnumMemberDef enummembers_QStaticText[] = {
    {sipName_AggressiveCaching, static_cast<int>( ::QStaticText::AggressiveCaching), 265},
    {sipName_ModerateCaching, static_cast<int>( ::QStaticText::ModerateCaching), 265},
};

PyDoc_STRVAR(doc_QStaticText, "\1QStaticText()\n"
"QStaticText(str)\n"
"QStaticText(QStaticText)");


static pyqt5ClassPluginDef plugin_QStaticText = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QStaticText = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QStaticText,
        {SIP_NULLPTR},
        &plugin_QStaticText
    },
    {
        sipNameNr_QStaticText,
        {0, 0, 1},
        13, methods_QStaticText,
        2, enummembers_QStaticText,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QStaticText,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QStaticText,
    init_type_QStaticText,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QStaticText,
    assign_QStaticText,
    array_QStaticText,
    copy_QStaticText,
    release_QStaticText,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 103 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qstandarditemmodel.sip"
#include <qstandarditemmodel.h>
#line 56780 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 56784 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 56787 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 56790 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 56793 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 56796 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 56799 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 56802 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 56805 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 56808 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qstandarditemmodel.sip"
#include <qstandarditemmodel.h>
#line 56811 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 56814 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 56817 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 56820 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


class sipQStandardItem : public  ::QStandardItem
{
public:
    sipQStandardItem();
    sipQStandardItem(const  ::QString&);
    sipQStandardItem(const  ::QIcon&,const  ::QString&);
    sipQStandardItem(int,int);
    sipQStandardItem(const  ::QStandardItem&);
    virtual ~sipQStandardItem();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool operator<(const  ::QStandardItem&) const SIP_OVERRIDE;
    void write( ::QDataStream&) const SIP_OVERRIDE;
    void read( ::QDataStream&) SIP_OVERRIDE;
    int type() const SIP_OVERRIDE;
     ::QStandardItem* clone() const SIP_OVERRIDE;
    void setData(const  ::QVariant&,int) SIP_OVERRIDE;
     ::QVariant data(int) const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQStandardItem(const sipQStandardItem &);
    sipQStandardItem &operator = (const sipQStandardItem &);

    char sipPyMethods[7];
};

sipQStandardItem::sipQStandardItem():  ::QStandardItem(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQStandardItem::sipQStandardItem(const  ::QString& a0):  ::QStandardItem(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQStandardItem::sipQStandardItem(const  ::QIcon& a0,const  ::QString& a1):  ::QStandardItem(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQStandardItem::sipQStandardItem(int a0,int a1):  ::QStandardItem(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQStandardItem::sipQStandardItem(const  ::QStandardItem& a0):  ::QStandardItem(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQStandardItem::~sipQStandardItem()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

bool sipQStandardItem::operator<(const  ::QStandardItem& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName___lt__);

    if (!sipMeth)
        return  ::QStandardItem::operator<(a0);

    extern bool sipVH_QtGui_102(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QStandardItem&);

    return sipVH_QtGui_102(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQStandardItem::write( ::QDataStream& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_write);

    if (!sipMeth)
    {
         ::QStandardItem::write(a0);
        return;
    }

    extern void sipVH_QtGui_101(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDataStream&);

    sipVH_QtGui_101(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQStandardItem::read( ::QDataStream& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_read);

    if (!sipMeth)
    {
         ::QStandardItem::read(a0);
        return;
    }

    extern void sipVH_QtGui_101(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDataStream&);

    sipVH_QtGui_101(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQStandardItem::type() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,SIP_NULLPTR,sipName_type);

    if (!sipMeth)
        return  ::QStandardItem::type();

    extern int sipVH_QtGui_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_8(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QStandardItem* sipQStandardItem::clone() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,SIP_NULLPTR,sipName_clone);

    if (!sipMeth)
        return  ::QStandardItem::clone();

    extern  ::QStandardItem* sipVH_QtGui_100(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_100(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQStandardItem::setData(const  ::QVariant& a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_setData);

    if (!sipMeth)
    {
         ::QStandardItem::setData(a0,a1);
        return;
    }

    extern void sipVH_QtGui_99(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QVariant&,int);

    sipVH_QtGui_99(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QVariant sipQStandardItem::data(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,SIP_NULLPTR,sipName_data);

    if (!sipMeth)
        return  ::QStandardItem::data(a0);

    extern  ::QVariant sipVH_QtGui_98(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_98(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QStandardItem_data, "data(self, role: int = Qt.UserRole+1) -> Any");

extern "C" {static PyObject *meth_QStandardItem_data(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_data(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0 = Qt::UserRole+1;
        const  ::QStandardItem *sipCpp;

        static const char *sipKwdList[] = {
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QStandardItem, &sipCpp, &a0))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QStandardItem::data(a0) : sipCpp->data(a0)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_data, doc_QStandardItem_data);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_setData, "setData(self, Any, role: int = Qt.UserRole+1)");

extern "C" {static PyObject *meth_QStandardItem_setData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QVariant* a0;
        int a0State = 0;
        int a1 = Qt::UserRole+1;
         ::QStandardItem *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|i", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_QVariant, &a0, &a0State, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QStandardItem::setData(*a0,a1) : sipCpp->setData(*a0,a1));
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setData, doc_QStandardItem_setData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_text, "text(self) -> str");

extern "C" {static PyObject *meth_QStandardItem_text(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->text());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_text, doc_QStandardItem_text);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_icon, "icon(self) -> QIcon");

extern "C" {static PyObject *meth_QStandardItem_icon(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
             ::QIcon*sipRes;

            sipRes = new  ::QIcon(sipCpp->icon());

            return sipConvertFromNewType(sipRes,sipType_QIcon,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_icon, doc_QStandardItem_icon);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_toolTip, "toolTip(self) -> str");

extern "C" {static PyObject *meth_QStandardItem_toolTip(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_toolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toolTip());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_toolTip, doc_QStandardItem_toolTip);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_statusTip, "statusTip(self) -> str");

extern "C" {static PyObject *meth_QStandardItem_statusTip(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_statusTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->statusTip());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_statusTip, doc_QStandardItem_statusTip);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_whatsThis, "whatsThis(self) -> str");

extern "C" {static PyObject *meth_QStandardItem_whatsThis(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_whatsThis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->whatsThis());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_whatsThis, doc_QStandardItem_whatsThis);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_sizeHint, "sizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QStandardItem_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->sizeHint());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_sizeHint, doc_QStandardItem_sizeHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_font, "font(self) -> QFont");

extern "C" {static PyObject *meth_QStandardItem_font(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_font(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
             ::QFont*sipRes;

            sipRes = new  ::QFont(sipCpp->font());

            return sipConvertFromNewType(sipRes,sipType_QFont,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_font, doc_QStandardItem_font);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_textAlignment, "textAlignment(self) -> Qt.Alignment");

extern "C" {static PyObject *meth_QStandardItem_textAlignment(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_textAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
             ::Qt::Alignment*sipRes;

            sipRes = new  ::Qt::Alignment(sipCpp->textAlignment());

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_textAlignment, doc_QStandardItem_textAlignment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_background, "background(self) -> QBrush");

extern "C" {static PyObject *meth_QStandardItem_background(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_background(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->background());

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_background, doc_QStandardItem_background);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_foreground, "foreground(self) -> QBrush");

extern "C" {static PyObject *meth_QStandardItem_foreground(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_foreground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->foreground());

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_foreground, doc_QStandardItem_foreground);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_checkState, "checkState(self) -> Qt.CheckState");

extern "C" {static PyObject *meth_QStandardItem_checkState(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_checkState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
             ::Qt::CheckState sipRes;

            sipRes = sipCpp->checkState();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_CheckState);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_checkState, doc_QStandardItem_checkState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_accessibleText, "accessibleText(self) -> str");

extern "C" {static PyObject *meth_QStandardItem_accessibleText(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_accessibleText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->accessibleText());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_accessibleText, doc_QStandardItem_accessibleText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_accessibleDescription, "accessibleDescription(self) -> str");

extern "C" {static PyObject *meth_QStandardItem_accessibleDescription(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_accessibleDescription(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->accessibleDescription());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_accessibleDescription, doc_QStandardItem_accessibleDescription);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_flags, "flags(self) -> Qt.ItemFlags");

extern "C" {static PyObject *meth_QStandardItem_flags(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
             ::Qt::ItemFlags*sipRes;

            sipRes = new  ::Qt::ItemFlags(sipCpp->flags());

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_flags, doc_QStandardItem_flags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_setFlags, "setFlags(self, Union[Qt.ItemFlags, Qt.ItemFlag])");

extern "C" {static PyObject *meth_QStandardItem_setFlags(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ItemFlags* a0;
        int a0State = 0;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_Qt_ItemFlags, &a0, &a0State))
        {
            sipCpp->setFlags(*a0);
            sipReleaseType(a0,sipType_Qt_ItemFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setFlags, doc_QStandardItem_setFlags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_isEnabled, "isEnabled(self) -> bool");

extern "C" {static PyObject *meth_QStandardItem_isEnabled(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_isEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_isEnabled, doc_QStandardItem_isEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_setEnabled, "setEnabled(self, bool)");

extern "C" {static PyObject *meth_QStandardItem_setEnabled(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QStandardItem, &sipCpp, &a0))
        {
            sipCpp->setEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setEnabled, doc_QStandardItem_setEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_isEditable, "isEditable(self) -> bool");

extern "C" {static PyObject *meth_QStandardItem_isEditable(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_isEditable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEditable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_isEditable, doc_QStandardItem_isEditable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_setEditable, "setEditable(self, bool)");

extern "C" {static PyObject *meth_QStandardItem_setEditable(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setEditable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QStandardItem, &sipCpp, &a0))
        {
            sipCpp->setEditable(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setEditable, doc_QStandardItem_setEditable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_isSelectable, "isSelectable(self) -> bool");

extern "C" {static PyObject *meth_QStandardItem_isSelectable(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_isSelectable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSelectable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_isSelectable, doc_QStandardItem_isSelectable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_setSelectable, "setSelectable(self, bool)");

extern "C" {static PyObject *meth_QStandardItem_setSelectable(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setSelectable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QStandardItem, &sipCpp, &a0))
        {
            sipCpp->setSelectable(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setSelectable, doc_QStandardItem_setSelectable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_isCheckable, "isCheckable(self) -> bool");

extern "C" {static PyObject *meth_QStandardItem_isCheckable(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_isCheckable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isCheckable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_isCheckable, doc_QStandardItem_isCheckable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_setCheckable, "setCheckable(self, bool)");

extern "C" {static PyObject *meth_QStandardItem_setCheckable(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setCheckable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QStandardItem, &sipCpp, &a0))
        {
            sipCpp->setCheckable(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setCheckable, doc_QStandardItem_setCheckable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_isTristate, "isTristate(self) -> bool");

extern "C" {static PyObject *meth_QStandardItem_isTristate(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_isTristate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isTristate();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_isTristate, doc_QStandardItem_isTristate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_setTristate, "setTristate(self, bool)");

extern "C" {static PyObject *meth_QStandardItem_setTristate(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setTristate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QStandardItem, &sipCpp, &a0))
        {
            sipCpp->setTristate(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setTristate, doc_QStandardItem_setTristate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_isDragEnabled, "isDragEnabled(self) -> bool");

extern "C" {static PyObject *meth_QStandardItem_isDragEnabled(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_isDragEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDragEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_isDragEnabled, doc_QStandardItem_isDragEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_setDragEnabled, "setDragEnabled(self, bool)");

extern "C" {static PyObject *meth_QStandardItem_setDragEnabled(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setDragEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QStandardItem, &sipCpp, &a0))
        {
            sipCpp->setDragEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setDragEnabled, doc_QStandardItem_setDragEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_isDropEnabled, "isDropEnabled(self) -> bool");

extern "C" {static PyObject *meth_QStandardItem_isDropEnabled(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_isDropEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDropEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_isDropEnabled, doc_QStandardItem_isDropEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_setDropEnabled, "setDropEnabled(self, bool)");

extern "C" {static PyObject *meth_QStandardItem_setDropEnabled(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setDropEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QStandardItem, &sipCpp, &a0))
        {
            sipCpp->setDropEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setDropEnabled, doc_QStandardItem_setDropEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_parent, "parent(self) -> QStandardItem");

extern "C" {static PyObject *meth_QStandardItem_parent(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_parent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
             ::QStandardItem*sipRes;

            sipRes = sipCpp->parent();

            return sipConvertFromType(sipRes,sipType_QStandardItem,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_parent, doc_QStandardItem_parent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_row, "row(self) -> int");

extern "C" {static PyObject *meth_QStandardItem_row(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_row(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->row();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_row, doc_QStandardItem_row);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_column, "column(self) -> int");

extern "C" {static PyObject *meth_QStandardItem_column(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_column(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->column();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_column, doc_QStandardItem_column);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_index, "index(self) -> QModelIndex");

extern "C" {static PyObject *meth_QStandardItem_index(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_index(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex(sipCpp->index());

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_index, doc_QStandardItem_index);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_model, "model(self) -> QStandardItemModel");

extern "C" {static PyObject *meth_QStandardItem_model(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_model(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
             ::QStandardItemModel*sipRes;

            sipRes = sipCpp->model();

            return sipConvertFromType(sipRes,sipType_QStandardItemModel,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_model, doc_QStandardItem_model);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_rowCount, "rowCount(self) -> int");

extern "C" {static PyObject *meth_QStandardItem_rowCount(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_rowCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->rowCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_rowCount, doc_QStandardItem_rowCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_setRowCount, "setRowCount(self, int)");

extern "C" {static PyObject *meth_QStandardItem_setRowCount(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setRowCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStandardItem, &sipCpp, &a0))
        {
            sipCpp->setRowCount(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setRowCount, doc_QStandardItem_setRowCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_columnCount, "columnCount(self) -> int");

extern "C" {static PyObject *meth_QStandardItem_columnCount(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_columnCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->columnCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_columnCount, doc_QStandardItem_columnCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_setColumnCount, "setColumnCount(self, int)");

extern "C" {static PyObject *meth_QStandardItem_setColumnCount(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setColumnCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStandardItem, &sipCpp, &a0))
        {
            sipCpp->setColumnCount(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setColumnCount, doc_QStandardItem_setColumnCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_hasChildren, "hasChildren(self) -> bool");

extern "C" {static PyObject *meth_QStandardItem_hasChildren(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_hasChildren(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasChildren();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_hasChildren, doc_QStandardItem_hasChildren);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_child, "child(self, int, column: int = 0) -> QStandardItem");

extern "C" {static PyObject *meth_QStandardItem_child(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_child(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1 = 0;
        const  ::QStandardItem *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|i", &sipSelf, sipType_QStandardItem, &sipCpp, &a0, &a1))
        {
             ::QStandardItem*sipRes;

            sipRes = sipCpp->child(a0,a1);

            return sipConvertFromType(sipRes,sipType_QStandardItem,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_child, doc_QStandardItem_child);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_setChild, "setChild(self, int, int, QStandardItem)\n"
"setChild(self, int, QStandardItem)");

extern "C" {static PyObject *meth_QStandardItem_setChild(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QStandardItem* a2;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ:", &sipSelf, sipType_QStandardItem, &sipCpp, &a0, &a1, sipType_QStandardItem, &a2))
        {
            sipCpp->setChild(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::QStandardItem* a1;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:", &sipSelf, sipType_QStandardItem, &sipCpp, &a0, sipType_QStandardItem, &a1))
        {
            sipCpp->setChild(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setChild, doc_QStandardItem_setChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_insertRow, "insertRow(self, int, Iterable[QStandardItem])\n"
"insertRow(self, int, QStandardItem)");

extern "C" {static PyObject *meth_QStandardItem_insertRow(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_insertRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const QList< ::QStandardItem*>* a1;
        int a1State = 0;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ3", &sipSelf, sipType_QStandardItem, &sipCpp, &a0, sipType_QList_0101QStandardItem,&a1, &a1State))
        {
            sipCpp->insertRow(a0,*a1);
            sipReleaseType(const_cast<QList< ::QStandardItem*> *>(a1),sipType_QList_0101QStandardItem,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::QStandardItem* a1;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:", &sipSelf, sipType_QStandardItem, &sipCpp, &a0, sipType_QStandardItem, &a1))
        {
            sipCpp->insertRow(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_insertRow, doc_QStandardItem_insertRow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_insertRows, "insertRows(self, int, int)\n"
"insertRows(self, int, Iterable[QStandardItem])");

extern "C" {static PyObject *meth_QStandardItem_insertRows(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_insertRows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QStandardItem, &sipCpp, &a0, &a1))
        {
            sipCpp->insertRows(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QList< ::QStandardItem*>* a1;
        int a1State = 0;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ3", &sipSelf, sipType_QStandardItem, &sipCpp, &a0, sipType_QList_0101QStandardItem,&a1, &a1State))
        {
            sipCpp->insertRows(a0,*a1);
            sipReleaseType(const_cast<QList< ::QStandardItem*> *>(a1),sipType_QList_0101QStandardItem,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_insertRows, doc_QStandardItem_insertRows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_insertColumn, "insertColumn(self, int, Iterable[QStandardItem])");

extern "C" {static PyObject *meth_QStandardItem_insertColumn(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_insertColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const QList< ::QStandardItem*>* a1;
        int a1State = 0;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ3", &sipSelf, sipType_QStandardItem, &sipCpp, &a0, sipType_QList_0101QStandardItem,&a1, &a1State))
        {
            sipCpp->insertColumn(a0,*a1);
            sipReleaseType(const_cast<QList< ::QStandardItem*> *>(a1),sipType_QList_0101QStandardItem,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_insertColumn, doc_QStandardItem_insertColumn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_insertColumns, "insertColumns(self, int, int)");

extern "C" {static PyObject *meth_QStandardItem_insertColumns(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_insertColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QStandardItem, &sipCpp, &a0, &a1))
        {
            sipCpp->insertColumns(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_insertColumns, doc_QStandardItem_insertColumns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_removeRow, "removeRow(self, int)");

extern "C" {static PyObject *meth_QStandardItem_removeRow(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_removeRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStandardItem, &sipCpp, &a0))
        {
            sipCpp->removeRow(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_removeRow, doc_QStandardItem_removeRow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_removeColumn, "removeColumn(self, int)");

extern "C" {static PyObject *meth_QStandardItem_removeColumn(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_removeColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStandardItem, &sipCpp, &a0))
        {
            sipCpp->removeColumn(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_removeColumn, doc_QStandardItem_removeColumn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_removeRows, "removeRows(self, int, int)");

extern "C" {static PyObject *meth_QStandardItem_removeRows(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_removeRows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QStandardItem, &sipCpp, &a0, &a1))
        {
            sipCpp->removeRows(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_removeRows, doc_QStandardItem_removeRows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_removeColumns, "removeColumns(self, int, int)");

extern "C" {static PyObject *meth_QStandardItem_removeColumns(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_removeColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QStandardItem, &sipCpp, &a0, &a1))
        {
            sipCpp->removeColumns(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_removeColumns, doc_QStandardItem_removeColumns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_takeChild, "takeChild(self, int, column: int = 0) -> QStandardItem");

extern "C" {static PyObject *meth_QStandardItem_takeChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_takeChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1 = 0;
         ::QStandardItem *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|i", &sipSelf, sipType_QStandardItem, &sipCpp, &a0, &a1))
        {
             ::QStandardItem*sipRes;

            sipRes = sipCpp->takeChild(a0,a1);

            return sipConvertFromType(sipRes,sipType_QStandardItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_takeChild, doc_QStandardItem_takeChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_takeRow, "takeRow(self, int) -> List[QStandardItem]");

extern "C" {static PyObject *meth_QStandardItem_takeRow(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_takeRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStandardItem, &sipCpp, &a0))
        {
            QList< ::QStandardItem*>*sipRes;

            sipRes = new QList< ::QStandardItem*>(sipCpp->takeRow(a0));

            return sipConvertFromNewType(sipRes,sipType_QList_0101QStandardItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_takeRow, doc_QStandardItem_takeRow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_takeColumn, "takeColumn(self, int) -> List[QStandardItem]");

extern "C" {static PyObject *meth_QStandardItem_takeColumn(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_takeColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStandardItem, &sipCpp, &a0))
        {
            QList< ::QStandardItem*>*sipRes;

            sipRes = new QList< ::QStandardItem*>(sipCpp->takeColumn(a0));

            return sipConvertFromNewType(sipRes,sipType_QList_0101QStandardItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_takeColumn, doc_QStandardItem_takeColumn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_sortChildren, "sortChildren(self, int, order: Qt.SortOrder = Qt.AscendingOrder)");

extern "C" {static PyObject *meth_QStandardItem_sortChildren(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_sortChildren(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::Qt::SortOrder a1 = Qt::AscendingOrder;
         ::QStandardItem *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_order,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|E", &sipSelf, sipType_QStandardItem, &sipCpp, &a0, sipType_Qt_SortOrder, &a1))
        {
            sipCpp->sortChildren(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_sortChildren, doc_QStandardItem_sortChildren);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_clone, "clone(self) -> QStandardItem");

extern "C" {static PyObject *meth_QStandardItem_clone(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
             ::QStandardItem*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QStandardItem::clone() : sipCpp->clone());

            return sipConvertFromNewType(sipRes,sipType_QStandardItem,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_clone, doc_QStandardItem_clone);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_type, "type(self) -> int");

extern "C" {static PyObject *meth_QStandardItem_type(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QStandardItem::type() : sipCpp->type());

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_type, doc_QStandardItem_type);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_read, "read(self, QDataStream)");

extern "C" {static PyObject *meth_QStandardItem_read(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_read(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDataStream* a0;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_QDataStream, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QStandardItem::read(*a0) : sipCpp->read(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_read, doc_QStandardItem_read);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_write, "write(self, QDataStream)");

extern "C" {static PyObject *meth_QStandardItem_write(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_write(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDataStream* a0;
        const  ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_QDataStream, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QStandardItem::write(*a0) : sipCpp->write(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_write, doc_QStandardItem_write);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_setText, "setText(self, str)");

extern "C" {static PyObject *meth_QStandardItem_setText(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setText(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setText, doc_QStandardItem_setText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_setIcon, "setIcon(self, QIcon)");

extern "C" {static PyObject *meth_QStandardItem_setIcon(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QIcon* a0;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_QIcon, &a0))
        {
            sipCpp->setIcon(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setIcon, doc_QStandardItem_setIcon);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_setToolTip, "setToolTip(self, str)");

extern "C" {static PyObject *meth_QStandardItem_setToolTip(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setToolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setToolTip(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setToolTip, doc_QStandardItem_setToolTip);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_setStatusTip, "setStatusTip(self, str)");

extern "C" {static PyObject *meth_QStandardItem_setStatusTip(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setStatusTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setStatusTip(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setStatusTip, doc_QStandardItem_setStatusTip);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_setWhatsThis, "setWhatsThis(self, str)");

extern "C" {static PyObject *meth_QStandardItem_setWhatsThis(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setWhatsThis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setWhatsThis(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setWhatsThis, doc_QStandardItem_setWhatsThis);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_setSizeHint, "setSizeHint(self, QSize)");

extern "C" {static PyObject *meth_QStandardItem_setSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setSizeHint(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setSizeHint, doc_QStandardItem_setSizeHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_setFont, "setFont(self, QFont)");

extern "C" {static PyObject *meth_QStandardItem_setFont(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont* a0;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_QFont, &a0))
        {
            sipCpp->setFont(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setFont, doc_QStandardItem_setFont);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_setTextAlignment, "setTextAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag])");

extern "C" {static PyObject *meth_QStandardItem_setTextAlignment(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setTextAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::Alignment* a0;
        int a0State = 0;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_Qt_Alignment, &a0, &a0State))
        {
            sipCpp->setTextAlignment(*a0);
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setTextAlignment, doc_QStandardItem_setTextAlignment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_setBackground, "setBackground(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QStandardItem_setBackground(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBrush* a0;
        int a0State = 0;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_QBrush, &a0, &a0State))
        {
            sipCpp->setBackground(*a0);
            sipReleaseType(const_cast< ::QBrush *>(a0),sipType_QBrush,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setBackground, doc_QStandardItem_setBackground);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_setForeground, "setForeground(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QStandardItem_setForeground(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setForeground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBrush* a0;
        int a0State = 0;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_QBrush, &a0, &a0State))
        {
            sipCpp->setForeground(*a0);
            sipReleaseType(const_cast< ::QBrush *>(a0),sipType_QBrush,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setForeground, doc_QStandardItem_setForeground);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_setCheckState, "setCheckState(self, Qt.CheckState)");

extern "C" {static PyObject *meth_QStandardItem_setCheckState(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setCheckState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::CheckState a0;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_Qt_CheckState, &a0))
        {
            sipCpp->setCheckState(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setCheckState, doc_QStandardItem_setCheckState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_setAccessibleText, "setAccessibleText(self, str)");

extern "C" {static PyObject *meth_QStandardItem_setAccessibleText(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setAccessibleText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setAccessibleText(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setAccessibleText, doc_QStandardItem_setAccessibleText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_setAccessibleDescription, "setAccessibleDescription(self, str)");

extern "C" {static PyObject *meth_QStandardItem_setAccessibleDescription(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setAccessibleDescription(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setAccessibleDescription(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setAccessibleDescription, doc_QStandardItem_setAccessibleDescription);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_appendRow, "appendRow(self, Iterable[QStandardItem])\n"
"appendRow(self, QStandardItem)");

extern "C" {static PyObject *meth_QStandardItem_appendRow(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_appendRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QList< ::QStandardItem*>* a0;
        int a0State = 0;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ3", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_QList_0101QStandardItem,&a0, &a0State))
        {
            sipCpp->appendRow(*a0);
            sipReleaseType(const_cast<QList< ::QStandardItem*> *>(a0),sipType_QList_0101QStandardItem,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QStandardItem* a0;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_QStandardItem, &a0))
        {
            sipCpp->appendRow(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_appendRow, doc_QStandardItem_appendRow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_appendColumn, "appendColumn(self, Iterable[QStandardItem])");

extern "C" {static PyObject *meth_QStandardItem_appendColumn(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_appendColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QList< ::QStandardItem*>* a0;
        int a0State = 0;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ3", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_QList_0101QStandardItem,&a0, &a0State))
        {
            sipCpp->appendColumn(*a0);
            sipReleaseType(const_cast<QList< ::QStandardItem*> *>(a0),sipType_QList_0101QStandardItem,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_appendColumn, doc_QStandardItem_appendColumn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_appendRows, "appendRows(self, Iterable[QStandardItem])");

extern "C" {static PyObject *meth_QStandardItem_appendRows(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_appendRows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QList< ::QStandardItem*>* a0;
        int a0State = 0;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ3", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_QList_0101QStandardItem,&a0, &a0State))
        {
            sipCpp->appendRows(*a0);
            sipReleaseType(const_cast<QList< ::QStandardItem*> *>(a0),sipType_QList_0101QStandardItem,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_appendRows, doc_QStandardItem_appendRows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_emitDataChanged, "emitDataChanged(self)");

extern "C" {static PyObject *meth_QStandardItem_emitDataChanged(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_emitDataChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            sipCpp->emitDataChanged();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_emitDataChanged, doc_QStandardItem_emitDataChanged);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_isAutoTristate, "isAutoTristate(self) -> bool");

extern "C" {static PyObject *meth_QStandardItem_isAutoTristate(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_isAutoTristate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAutoTristate();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_isAutoTristate, doc_QStandardItem_isAutoTristate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_setAutoTristate, "setAutoTristate(self, bool)");

extern "C" {static PyObject *meth_QStandardItem_setAutoTristate(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setAutoTristate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QStandardItem, &sipCpp, &a0))
        {
            sipCpp->setAutoTristate(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setAutoTristate, doc_QStandardItem_setAutoTristate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_isUserTristate, "isUserTristate(self) -> bool");

extern "C" {static PyObject *meth_QStandardItem_isUserTristate(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_isUserTristate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isUserTristate();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_isUserTristate, doc_QStandardItem_isUserTristate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_setUserTristate, "setUserTristate(self, bool)");

extern "C" {static PyObject *meth_QStandardItem_setUserTristate(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setUserTristate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QStandardItem, &sipCpp, &a0))
        {
            sipCpp->setUserTristate(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setUserTristate, doc_QStandardItem_setUserTristate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItem_clearData, "clearData(self)");

extern "C" {static PyObject *meth_QStandardItem_clearData(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_clearData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            sipCpp->clearData();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_clearData, doc_QStandardItem_clearData);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QStandardItem___ge__(PyObject *,PyObject *);}
static PyObject *slot_QStandardItem___ge__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QStandardItem *sipCpp = reinterpret_cast< ::QStandardItem *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QStandardItem));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardItem* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QStandardItem, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::QStandardItem::operator<(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ge_slot, sipType_QStandardItem, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QStandardItem___lt__(PyObject *,PyObject *);}
static PyObject *slot_QStandardItem___lt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QStandardItem *sipCpp = reinterpret_cast< ::QStandardItem *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QStandardItem));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardItem* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QStandardItem, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QStandardItem::operator<(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, lt_slot, sipType_QStandardItem, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QStandardItem(void *, int);}
static void release_QStandardItem(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQStandardItem *>(sipCppV);
    else
        delete reinterpret_cast< ::QStandardItem *>(sipCppV);
}


extern "C" {static void assign_QStandardItem(void *, SIP_SSIZE_T, void *);}
static void assign_QStandardItem(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QStandardItem *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QStandardItem *>(sipSrc);
}


extern "C" {static void *array_QStandardItem(SIP_SSIZE_T);}
static void *array_QStandardItem(SIP_SSIZE_T sipNrElem)
{
    return new  ::QStandardItem[sipNrElem];
}


extern "C" {static void *copy_QStandardItem(const void *, SIP_SSIZE_T);}
static void *copy_QStandardItem(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QStandardItem(reinterpret_cast<const  ::QStandardItem *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QStandardItem(sipSimpleWrapper *);}
static void dealloc_QStandardItem(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQStandardItem *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QStandardItem(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QStandardItem(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QStandardItem(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQStandardItem *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQStandardItem();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new sipQStandardItem(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QIcon* a0;
        const  ::QString* a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9J1", sipType_QIcon, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp = new sipQStandardItem(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        int a0;
        int a1 = 1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_columns,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "i|i", &a0, &a1))
        {
            sipCpp = new sipQStandardItem(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QStandardItem* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QStandardItem, &a0))
        {
            sipCpp = new sipQStandardItem(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QStandardItem[] = {
    {(void *)slot_QStandardItem___ge__, ge_slot},
    {(void *)slot_QStandardItem___lt__, lt_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QStandardItem[] = {
    {SIP_MLNAME_CAST(sipName_accessibleDescription), meth_QStandardItem_accessibleDescription, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_accessibleDescription)},
    {SIP_MLNAME_CAST(sipName_accessibleText), meth_QStandardItem_accessibleText, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_accessibleText)},
    {SIP_MLNAME_CAST(sipName_appendColumn), meth_QStandardItem_appendColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_appendColumn)},
    {SIP_MLNAME_CAST(sipName_appendRow), meth_QStandardItem_appendRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_appendRow)},
    {SIP_MLNAME_CAST(sipName_appendRows), meth_QStandardItem_appendRows, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_appendRows)},
    {SIP_MLNAME_CAST(sipName_background), meth_QStandardItem_background, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_background)},
    {SIP_MLNAME_CAST(sipName_checkState), meth_QStandardItem_checkState, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_checkState)},
    {SIP_MLNAME_CAST(sipName_child), SIP_MLMETH_CAST(meth_QStandardItem_child), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItem_child)},
    {SIP_MLNAME_CAST(sipName_clearData), meth_QStandardItem_clearData, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_clearData)},
    {SIP_MLNAME_CAST(sipName_clone), meth_QStandardItem_clone, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_clone)},
    {SIP_MLNAME_CAST(sipName_column), meth_QStandardItem_column, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_column)},
    {SIP_MLNAME_CAST(sipName_columnCount), meth_QStandardItem_columnCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_columnCount)},
    {SIP_MLNAME_CAST(sipName_data), SIP_MLMETH_CAST(meth_QStandardItem_data), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItem_data)},
    {SIP_MLNAME_CAST(sipName_emitDataChanged), meth_QStandardItem_emitDataChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_emitDataChanged)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QStandardItem_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_flags)},
    {SIP_MLNAME_CAST(sipName_font), meth_QStandardItem_font, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_font)},
    {SIP_MLNAME_CAST(sipName_foreground), meth_QStandardItem_foreground, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_foreground)},
    {SIP_MLNAME_CAST(sipName_hasChildren), meth_QStandardItem_hasChildren, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_hasChildren)},
    {SIP_MLNAME_CAST(sipName_icon), meth_QStandardItem_icon, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_icon)},
    {SIP_MLNAME_CAST(sipName_index), meth_QStandardItem_index, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_index)},
    {SIP_MLNAME_CAST(sipName_insertColumn), meth_QStandardItem_insertColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_insertColumn)},
    {SIP_MLNAME_CAST(sipName_insertColumns), meth_QStandardItem_insertColumns, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_insertColumns)},
    {SIP_MLNAME_CAST(sipName_insertRow), meth_QStandardItem_insertRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_insertRow)},
    {SIP_MLNAME_CAST(sipName_insertRows), meth_QStandardItem_insertRows, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_insertRows)},
    {SIP_MLNAME_CAST(sipName_isAutoTristate), meth_QStandardItem_isAutoTristate, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_isAutoTristate)},
    {SIP_MLNAME_CAST(sipName_isCheckable), meth_QStandardItem_isCheckable, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_isCheckable)},
    {SIP_MLNAME_CAST(sipName_isDragEnabled), meth_QStandardItem_isDragEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_isDragEnabled)},
    {SIP_MLNAME_CAST(sipName_isDropEnabled), meth_QStandardItem_isDropEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_isDropEnabled)},
    {SIP_MLNAME_CAST(sipName_isEditable), meth_QStandardItem_isEditable, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_isEditable)},
    {SIP_MLNAME_CAST(sipName_isEnabled), meth_QStandardItem_isEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_isEnabled)},
    {SIP_MLNAME_CAST(sipName_isSelectable), meth_QStandardItem_isSelectable, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_isSelectable)},
    {SIP_MLNAME_CAST(sipName_isTristate), meth_QStandardItem_isTristate, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_isTristate)},
    {SIP_MLNAME_CAST(sipName_isUserTristate), meth_QStandardItem_isUserTristate, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_isUserTristate)},
    {SIP_MLNAME_CAST(sipName_model), meth_QStandardItem_model, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_model)},
    {SIP_MLNAME_CAST(sipName_parent), meth_QStandardItem_parent, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_parent)},
    {SIP_MLNAME_CAST(sipName_read), meth_QStandardItem_read, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_read)},
    {SIP_MLNAME_CAST(sipName_removeColumn), meth_QStandardItem_removeColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_removeColumn)},
    {SIP_MLNAME_CAST(sipName_removeColumns), meth_QStandardItem_removeColumns, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_removeColumns)},
    {SIP_MLNAME_CAST(sipName_removeRow), meth_QStandardItem_removeRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_removeRow)},
    {SIP_MLNAME_CAST(sipName_removeRows), meth_QStandardItem_removeRows, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_removeRows)},
    {SIP_MLNAME_CAST(sipName_row), meth_QStandardItem_row, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_row)},
    {SIP_MLNAME_CAST(sipName_rowCount), meth_QStandardItem_rowCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_rowCount)},
    {SIP_MLNAME_CAST(sipName_setAccessibleDescription), meth_QStandardItem_setAccessibleDescription, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setAccessibleDescription)},
    {SIP_MLNAME_CAST(sipName_setAccessibleText), meth_QStandardItem_setAccessibleText, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setAccessibleText)},
    {SIP_MLNAME_CAST(sipName_setAutoTristate), meth_QStandardItem_setAutoTristate, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setAutoTristate)},
    {SIP_MLNAME_CAST(sipName_setBackground), meth_QStandardItem_setBackground, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setBackground)},
    {SIP_MLNAME_CAST(sipName_setCheckState), meth_QStandardItem_setCheckState, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setCheckState)},
    {SIP_MLNAME_CAST(sipName_setCheckable), meth_QStandardItem_setCheckable, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setCheckable)},
    {SIP_MLNAME_CAST(sipName_setChild), meth_QStandardItem_setChild, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setChild)},
    {SIP_MLNAME_CAST(sipName_setColumnCount), meth_QStandardItem_setColumnCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setColumnCount)},
    {SIP_MLNAME_CAST(sipName_setData), SIP_MLMETH_CAST(meth_QStandardItem_setData), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItem_setData)},
    {SIP_MLNAME_CAST(sipName_setDragEnabled), meth_QStandardItem_setDragEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setDragEnabled)},
    {SIP_MLNAME_CAST(sipName_setDropEnabled), meth_QStandardItem_setDropEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setDropEnabled)},
    {SIP_MLNAME_CAST(sipName_setEditable), meth_QStandardItem_setEditable, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setEditable)},
    {SIP_MLNAME_CAST(sipName_setEnabled), meth_QStandardItem_setEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setEnabled)},
    {SIP_MLNAME_CAST(sipName_setFlags), meth_QStandardItem_setFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setFlags)},
    {SIP_MLNAME_CAST(sipName_setFont), meth_QStandardItem_setFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setFont)},
    {SIP_MLNAME_CAST(sipName_setForeground), meth_QStandardItem_setForeground, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setForeground)},
    {SIP_MLNAME_CAST(sipName_setIcon), meth_QStandardItem_setIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setIcon)},
    {SIP_MLNAME_CAST(sipName_setRowCount), meth_QStandardItem_setRowCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setRowCount)},
    {SIP_MLNAME_CAST(sipName_setSelectable), meth_QStandardItem_setSelectable, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setSelectable)},
    {SIP_MLNAME_CAST(sipName_setSizeHint), meth_QStandardItem_setSizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setSizeHint)},
    {SIP_MLNAME_CAST(sipName_setStatusTip), meth_QStandardItem_setStatusTip, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setStatusTip)},
    {SIP_MLNAME_CAST(sipName_setText), meth_QStandardItem_setText, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setText)},
    {SIP_MLNAME_CAST(sipName_setTextAlignment), meth_QStandardItem_setTextAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setTextAlignment)},
    {SIP_MLNAME_CAST(sipName_setToolTip), meth_QStandardItem_setToolTip, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setToolTip)},
    {SIP_MLNAME_CAST(sipName_setTristate), meth_QStandardItem_setTristate, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setTristate)},
    {SIP_MLNAME_CAST(sipName_setUserTristate), meth_QStandardItem_setUserTristate, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setUserTristate)},
    {SIP_MLNAME_CAST(sipName_setWhatsThis), meth_QStandardItem_setWhatsThis, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setWhatsThis)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QStandardItem_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_sizeHint)},
    {SIP_MLNAME_CAST(sipName_sortChildren), SIP_MLMETH_CAST(meth_QStandardItem_sortChildren), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItem_sortChildren)},
    {SIP_MLNAME_CAST(sipName_statusTip), meth_QStandardItem_statusTip, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_statusTip)},
    {SIP_MLNAME_CAST(sipName_takeChild), SIP_MLMETH_CAST(meth_QStandardItem_takeChild), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItem_takeChild)},
    {SIP_MLNAME_CAST(sipName_takeColumn), meth_QStandardItem_takeColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_takeColumn)},
    {SIP_MLNAME_CAST(sipName_takeRow), meth_QStandardItem_takeRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_takeRow)},
    {SIP_MLNAME_CAST(sipName_text), meth_QStandardItem_text, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_text)},
    {SIP_MLNAME_CAST(sipName_textAlignment), meth_QStandardItem_textAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_textAlignment)},
    {SIP_MLNAME_CAST(sipName_toolTip), meth_QStandardItem_toolTip, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_toolTip)},
    {SIP_MLNAME_CAST(sipName_type), meth_QStandardItem_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_type)},
    {SIP_MLNAME_CAST(sipName_whatsThis), meth_QStandardItem_whatsThis, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_whatsThis)},
    {SIP_MLNAME_CAST(sipName_write), meth_QStandardItem_write, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_write)}
};

static sipEnumMemberDef enummembers_QStandardItem[] = {
    {sipName_Type, static_cast<int>( ::QStandardItem::Type), 262},
    {sipName_UserType, static_cast<int>( ::QStandardItem::UserType), 262},
};

PyDoc_STRVAR(doc_QStandardItem, "\1QStandardItem()\n"
"QStandardItem(str)\n"
"QStandardItem(QIcon, str)\n"
"QStandardItem(int, columns: int = 1)\n"
"QStandardItem(QStandardItem)");


static pyqt5ClassPluginDef plugin_QStandardItem = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QStandardItem = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QStandardItem,
        {SIP_NULLPTR},
        &plugin_QStandardItem
    },
    {
        sipNameNr_QStandardItem,
        {0, 0, 1},
        81, methods_QStandardItem,
        2, enummembers_QStandardItem,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QStandardItem,
    -1,
    -1,
    SIP_NULLPTR,
    slots_QStandardItem,
    init_type_QStandardItem,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QStandardItem,
    assign_QStandardItem,
    array_QStandardItem,
    copy_QStandardItem,
    release_QStandardItem,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qstandarditemmodel.sip"
#include <qstandarditemmodel.h>
#line 59771 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 59775 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 59778 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 103 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qstandarditemmodel.sip"
#include <qstandarditemmodel.h>
#line 59781 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 275 "sip/QtCore/qpycore_qhash.sip"
#include <qhash.h>
#line 59784 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 59787 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 59790 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 59793 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 59796 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 59799 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 59802 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 59805 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 59808 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 146 "sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 59811 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 59814 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 59817 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 59820 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 111 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 59823 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 59826 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 59829 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 76 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 59832 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 111 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 59835 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 328 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 59838 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 59841 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 59844 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 59847 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 59850 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 59853 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 59856 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 59859 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 59862 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 59865 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 59868 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 59871 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 59874 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


class sipQStandardItemModel : public  ::QStandardItemModel
{
public:
    sipQStandardItemModel( ::QObject*);
    sipQStandardItemModel(int,int, ::QObject*);
    virtual ~sipQStandardItemModel();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
     ::QModelIndex index(int,int,const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QModelIndex parent(const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QModelIndex sibling(int,int,const  ::QModelIndex&) const SIP_OVERRIDE;
    int rowCount(const  ::QModelIndex&) const SIP_OVERRIDE;
    int columnCount(const  ::QModelIndex&) const SIP_OVERRIDE;
    bool hasChildren(const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QVariant data(const  ::QModelIndex&,int) const SIP_OVERRIDE;
    bool setData(const  ::QModelIndex&,const  ::QVariant&,int) SIP_OVERRIDE;
     ::QVariant headerData(int, ::Qt::Orientation,int) const SIP_OVERRIDE;
    bool setHeaderData(int, ::Qt::Orientation,const  ::QVariant&,int) SIP_OVERRIDE;
    QMap<int, ::QVariant> itemData(const  ::QModelIndex&) const SIP_OVERRIDE;
    bool setItemData(const  ::QModelIndex&,const QMap<int, ::QVariant>&) SIP_OVERRIDE;
     ::QStringList mimeTypes() const SIP_OVERRIDE;
     ::QMimeData* mimeData(const  ::QModelIndexList&) const SIP_OVERRIDE;
    bool dropMimeData(const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&) SIP_OVERRIDE;
     ::Qt::DropActions supportedDropActions() const SIP_OVERRIDE;
    bool insertRows(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
    bool insertColumns(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
    bool removeRows(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
    bool removeColumns(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
    void fetchMore(const  ::QModelIndex&) SIP_OVERRIDE;
    bool canFetchMore(const  ::QModelIndex&) const SIP_OVERRIDE;
     ::Qt::ItemFlags flags(const  ::QModelIndex&) const SIP_OVERRIDE;
    void sort(int, ::Qt::SortOrder) SIP_OVERRIDE;
     ::QModelIndex buddy(const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QModelIndexList match(const  ::QModelIndex&,int,const  ::QVariant&,int, ::Qt::MatchFlags) const SIP_OVERRIDE;
     ::QSize span(const  ::QModelIndex&) const SIP_OVERRIDE;
    bool submit() SIP_OVERRIDE;
    void revert() SIP_OVERRIDE;
     ::Qt::DropActions supportedDragActions() const SIP_OVERRIDE;
    QHash<int, ::QByteArray> roleNames() const SIP_OVERRIDE;
    bool canDropMimeData(const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&) const SIP_OVERRIDE;
    bool moveRows(const  ::QModelIndex&,int,int,const  ::QModelIndex&,int) SIP_OVERRIDE;
    bool moveColumns(const  ::QModelIndex&,int,int,const  ::QModelIndex&,int) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQStandardItemModel(const sipQStandardItemModel &);
    sipQStandardItemModel &operator = (const sipQStandardItemModel &);

    char sipPyMethods[41];
};

sipQStandardItemModel::sipQStandardItemModel( ::QObject*a0):  ::QStandardItemModel(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQStandardItemModel::sipQStandardItemModel(int a0,int a1, ::QObject*a2):  ::QStandardItemModel(a0,a1,a2), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQStandardItemModel::~sipQStandardItemModel()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQStandardItemModel::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QStandardItemModel);

    return  ::QStandardItemModel::metaObject();
}

int sipQStandardItemModel::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QStandardItemModel::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QStandardItemModel,_c,_id,_a);

    return _id;
}

void *sipQStandardItemModel::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QStandardItemModel, _clname, &sipCpp) ? sipCpp :  ::QStandardItemModel::qt_metacast(_clname));
}

void sipQStandardItemModel::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QStandardItemModel::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQStandardItemModel::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QStandardItemModel::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQStandardItemModel::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QStandardItemModel::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_1(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQStandardItemModel::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QStandardItemModel::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_2(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQStandardItemModel::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QStandardItemModel::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_3(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQStandardItemModel::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QStandardItemModel::eventFilter(a0,a1);

    extern bool sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_4(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQStandardItemModel::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QStandardItemModel::event(a0);

    extern bool sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_5(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QModelIndex sipQStandardItemModel::index(int a0,int a1,const  ::QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,SIP_NULLPTR,sipName_index);

    if (!sipMeth)
        return  ::QStandardItemModel::index(a0,a1,a2);

    extern  ::QModelIndex sipVH_QtGui_97(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtGui_97(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QModelIndex sipQStandardItemModel::parent(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,SIP_NULLPTR,sipName_parent);

    if (!sipMeth)
        return  ::QStandardItemModel::parent(a0);

    extern  ::QModelIndex sipVH_QtGui_82(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtGui_82(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QModelIndex sipQStandardItemModel::sibling(int a0,int a1,const  ::QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,SIP_NULLPTR,sipName_sibling);

    if (!sipMeth)
        return  ::QStandardItemModel::sibling(a0,a1,a2);

    extern  ::QModelIndex sipVH_QtGui_97(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtGui_97(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

int sipQStandardItemModel::rowCount(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,SIP_NULLPTR,sipName_rowCount);

    if (!sipMeth)
        return  ::QStandardItemModel::rowCount(a0);

    extern int sipVH_QtGui_96(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtGui_96(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQStandardItemModel::columnCount(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,SIP_NULLPTR,sipName_columnCount);

    if (!sipMeth)
        return  ::QStandardItemModel::columnCount(a0);

    extern int sipVH_QtGui_96(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtGui_96(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQStandardItemModel::hasChildren(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,SIP_NULLPTR,sipName_hasChildren);

    if (!sipMeth)
        return  ::QStandardItemModel::hasChildren(a0);

    extern bool sipVH_QtGui_85(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtGui_85(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQStandardItemModel::data(const  ::QModelIndex& a0,int a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,SIP_NULLPTR,sipName_data);

    if (!sipMeth)
        return  ::QStandardItemModel::data(a0,a1);

    extern  ::QVariant sipVH_QtGui_95(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int);

    return sipVH_QtGui_95(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQStandardItemModel::setData(const  ::QModelIndex& a0,const  ::QVariant& a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_setData);

    if (!sipMeth)
        return  ::QStandardItemModel::setData(a0,a1,a2);

    extern bool sipVH_QtGui_94(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const  ::QVariant&,int);

    return sipVH_QtGui_94(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QVariant sipQStandardItemModel::headerData(int a0, ::Qt::Orientation a1,int a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,SIP_NULLPTR,sipName_headerData);

    if (!sipMeth)
        return  ::QStandardItemModel::headerData(a0,a1,a2);

    extern  ::QVariant sipVH_QtGui_93(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::Orientation,int);

    return sipVH_QtGui_93(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQStandardItemModel::setHeaderData(int a0, ::Qt::Orientation a1,const  ::QVariant& a2,int a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,SIP_NULLPTR,sipName_setHeaderData);

    if (!sipMeth)
        return  ::QStandardItemModel::setHeaderData(a0,a1,a2,a3);

    extern bool sipVH_QtGui_92(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::Orientation,const  ::QVariant&,int);

    return sipVH_QtGui_92(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2, a3);
}

QMap<int, ::QVariant> sipQStandardItemModel::itemData(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,SIP_NULLPTR,sipName_itemData);

    if (!sipMeth)
        return  ::QStandardItemModel::itemData(a0);

    extern QMap<int, ::QVariant> sipVH_QtGui_91(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtGui_91(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQStandardItemModel::setItemData(const  ::QModelIndex& a0,const QMap<int, ::QVariant>& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,SIP_NULLPTR,sipName_setItemData);

    if (!sipMeth)
        return  ::QStandardItemModel::setItemData(a0,a1);

    extern bool sipVH_QtGui_90(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const QMap<int, ::QVariant>&);

    return sipVH_QtGui_90(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QStringList sipQStandardItemModel::mimeTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,SIP_NULLPTR,sipName_mimeTypes);

    if (!sipMeth)
        return  ::QStandardItemModel::mimeTypes();

    extern  ::QStringList sipVH_QtGui_89(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_89(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QMimeData* sipQStandardItemModel::mimeData(const  ::QModelIndexList& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,SIP_NULLPTR,sipName_mimeData);

    if (!sipMeth)
        return  ::QStandardItemModel::mimeData(a0);

    extern  ::QMimeData* sipVH_QtGui_88(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndexList&);

    return sipVH_QtGui_88(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQStandardItemModel::dropMimeData(const  ::QMimeData*a0, ::Qt::DropAction a1,int a2,int a3,const  ::QModelIndex& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,SIP_NULLPTR,sipName_dropMimeData);

    if (!sipMeth)
        return  ::QStandardItemModel::dropMimeData(a0,a1,a2,a3,a4);

    extern bool sipVH_QtGui_77(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&);

    return sipVH_QtGui_77(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

 ::Qt::DropActions sipQStandardItemModel::supportedDropActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,SIP_NULLPTR,sipName_supportedDropActions);

    if (!sipMeth)
        return  ::QStandardItemModel::supportedDropActions();

    extern  ::Qt::DropActions sipVH_QtGui_79(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_79(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQStandardItemModel::insertRows(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,SIP_NULLPTR,sipName_insertRows);

    if (!sipMeth)
        return  ::QStandardItemModel::insertRows(a0,a1,a2);

    extern bool sipVH_QtGui_87(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtGui_87(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQStandardItemModel::insertColumns(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,SIP_NULLPTR,sipName_insertColumns);

    if (!sipMeth)
        return  ::QStandardItemModel::insertColumns(a0,a1,a2);

    extern bool sipVH_QtGui_87(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtGui_87(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQStandardItemModel::removeRows(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,SIP_NULLPTR,sipName_removeRows);

    if (!sipMeth)
        return  ::QStandardItemModel::removeRows(a0,a1,a2);

    extern bool sipVH_QtGui_87(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtGui_87(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQStandardItemModel::removeColumns(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,SIP_NULLPTR,sipName_removeColumns);

    if (!sipMeth)
        return  ::QStandardItemModel::removeColumns(a0,a1,a2);

    extern bool sipVH_QtGui_87(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtGui_87(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQStandardItemModel::fetchMore(const  ::QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,SIP_NULLPTR,sipName_fetchMore);

    if (!sipMeth)
    {
         ::QStandardItemModel::fetchMore(a0);
        return;
    }

    extern void sipVH_QtGui_86(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    sipVH_QtGui_86(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQStandardItemModel::canFetchMore(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,SIP_NULLPTR,sipName_canFetchMore);

    if (!sipMeth)
        return  ::QStandardItemModel::canFetchMore(a0);

    extern bool sipVH_QtGui_85(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtGui_85(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::Qt::ItemFlags sipQStandardItemModel::flags(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,SIP_NULLPTR,sipName_flags);

    if (!sipMeth)
        return  ::QStandardItemModel::flags(a0);

    extern  ::Qt::ItemFlags sipVH_QtGui_84(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtGui_84(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQStandardItemModel::sort(int a0, ::Qt::SortOrder a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,SIP_NULLPTR,sipName_sort);

    if (!sipMeth)
    {
         ::QStandardItemModel::sort(a0,a1);
        return;
    }

    extern void sipVH_QtGui_83(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::SortOrder);

    sipVH_QtGui_83(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QModelIndex sipQStandardItemModel::buddy(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,SIP_NULLPTR,sipName_buddy);

    if (!sipMeth)
        return  ::QStandardItemModel::buddy(a0);

    extern  ::QModelIndex sipVH_QtGui_82(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtGui_82(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QModelIndexList sipQStandardItemModel::match(const  ::QModelIndex& a0,int a1,const  ::QVariant& a2,int a3, ::Qt::MatchFlags a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,SIP_NULLPTR,sipName_match);

    if (!sipMeth)
        return  ::QStandardItemModel::match(a0,a1,a2,a3,a4);

    extern  ::QModelIndexList sipVH_QtGui_81(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,const  ::QVariant&,int, ::Qt::MatchFlags);

    return sipVH_QtGui_81(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

 ::QSize sipQStandardItemModel::span(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,SIP_NULLPTR,sipName_span);

    if (!sipMeth)
        return  ::QStandardItemModel::span(a0);

    extern  ::QSize sipVH_QtGui_80(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtGui_80(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQStandardItemModel::submit()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,SIP_NULLPTR,sipName_submit);

    if (!sipMeth)
        return  ::QStandardItemModel::submit();

    extern bool sipVH_QtGui_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_28(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQStandardItemModel::revert()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,SIP_NULLPTR,sipName_revert);

    if (!sipMeth)
    {
         ::QStandardItemModel::revert();
        return;
    }

    extern void sipVH_QtGui_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtGui_39(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::Qt::DropActions sipQStandardItemModel::supportedDragActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[36]),sipPySelf,SIP_NULLPTR,sipName_supportedDragActions);

    if (!sipMeth)
        return  ::QStandardItemModel::supportedDragActions();

    extern  ::Qt::DropActions sipVH_QtGui_79(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_79(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

QHash<int, ::QByteArray> sipQStandardItemModel::roleNames() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,SIP_NULLPTR,sipName_roleNames);

    if (!sipMeth)
        return  ::QStandardItemModel::roleNames();

    extern QHash<int, ::QByteArray> sipVH_QtGui_78(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_78(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQStandardItemModel::canDropMimeData(const  ::QMimeData*a0, ::Qt::DropAction a1,int a2,int a3,const  ::QModelIndex& a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,SIP_NULLPTR,sipName_canDropMimeData);

    if (!sipMeth)
        return  ::QStandardItemModel::canDropMimeData(a0,a1,a2,a3,a4);

    extern bool sipVH_QtGui_77(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&);

    return sipVH_QtGui_77(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

bool sipQStandardItemModel::moveRows(const  ::QModelIndex& a0,int a1,int a2,const  ::QModelIndex& a3,int a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,SIP_NULLPTR,sipName_moveRows);

    if (!sipMeth)
        return  ::QStandardItemModel::moveRows(a0,a1,a2,a3,a4);

    extern bool sipVH_QtGui_76(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,int,const  ::QModelIndex&,int);

    return sipVH_QtGui_76(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

bool sipQStandardItemModel::moveColumns(const  ::QModelIndex& a0,int a1,int a2,const  ::QModelIndex& a3,int a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,SIP_NULLPTR,sipName_moveColumns);

    if (!sipMeth)
        return  ::QStandardItemModel::moveColumns(a0,a1,a2,a3,a4);

    extern bool sipVH_QtGui_76(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,int,const  ::QModelIndex&,int);

    return sipVH_QtGui_76(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}


PyDoc_STRVAR(doc_QStandardItemModel_index, "index(self, int, int, parent: QModelIndex = QModelIndex()) -> QModelIndex");

extern "C" {static PyObject *meth_QStandardItemModel_index(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_index(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
        const  ::QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|J9", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QStandardItemModel::index(a0,a1,*a2) : sipCpp->index(a0,a1,*a2)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_index, doc_QStandardItemModel_index);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_parent, "parent(self, QModelIndex) -> QModelIndex\n"
"parent(self) -> QObject");

extern "C" {static PyObject *meth_QStandardItemModel_parent(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_parent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QStandardItemModel::parent(*a0) : sipCpp->parent(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    {
        const  ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItemModel, &sipCpp))
        {
             ::QObject*sipRes;

            sipRes = sipCpp->parent();

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_parent, doc_QStandardItemModel_parent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_rowCount, "rowCount(self, parent: QModelIndex = QModelIndex()) -> int");

extern "C" {static PyObject *meth_QStandardItemModel_rowCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_rowCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex& a0def = QModelIndex();
        const  ::QModelIndex* a0 = &a0def;
        const  ::QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J9", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QStandardItemModel::rowCount(*a0) : sipCpp->rowCount(*a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_rowCount, doc_QStandardItemModel_rowCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_columnCount, "columnCount(self, parent: QModelIndex = QModelIndex()) -> int");

extern "C" {static PyObject *meth_QStandardItemModel_columnCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_columnCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex& a0def = QModelIndex();
        const  ::QModelIndex* a0 = &a0def;
        const  ::QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J9", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QStandardItemModel::columnCount(*a0) : sipCpp->columnCount(*a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_columnCount, doc_QStandardItemModel_columnCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_hasChildren, "hasChildren(self, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QStandardItemModel_hasChildren(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_hasChildren(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex& a0def = QModelIndex();
        const  ::QModelIndex* a0 = &a0def;
        const  ::QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J9", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QStandardItemModel::hasChildren(*a0) : sipCpp->hasChildren(*a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_hasChildren, doc_QStandardItemModel_hasChildren);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_data, "data(self, QModelIndex, role: int = Qt.DisplayRole) -> Any");

extern "C" {static PyObject *meth_QStandardItemModel_data(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_data(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        int a1 = Qt::DisplayRole;
        const  ::QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|i", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QModelIndex, &a0, &a1))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QStandardItemModel::data(*a0,a1) : sipCpp->data(*a0,a1)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_data, doc_QStandardItemModel_data);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_setData, "setData(self, QModelIndex, Any, role: int = Qt.EditRole) -> bool");

extern "C" {static PyObject *meth_QStandardItemModel_setData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_setData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QVariant* a1;
        int a1State = 0;
        int a2 = Qt::EditRole;
         ::QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J1|i", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QVariant, &a1, &a1State, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QStandardItemModel::setData(*a0,*a1,a2) : sipCpp->setData(*a0,*a1,a2));
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_setData, doc_QStandardItemModel_setData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_headerData, "headerData(self, int, Qt.Orientation, role: int = Qt.DisplayRole) -> Any");

extern "C" {static PyObject *meth_QStandardItemModel_headerData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_headerData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::Qt::Orientation a1;
        int a2 = Qt::DisplayRole;
        const  ::QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiE|i", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, sipType_Qt_Orientation, &a1, &a2))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QStandardItemModel::headerData(a0,a1,a2) : sipCpp->headerData(a0,a1,a2)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_headerData, doc_QStandardItemModel_headerData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_setHeaderData, "setHeaderData(self, int, Qt.Orientation, Any, role: int = Qt.EditRole) -> bool");

extern "C" {static PyObject *meth_QStandardItemModel_setHeaderData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_setHeaderData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::Qt::Orientation a1;
        const  ::QVariant* a2;
        int a2State = 0;
        int a3 = Qt::EditRole;
         ::QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiEJ1|i", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, sipType_Qt_Orientation, &a1, sipType_QVariant, &a2, &a2State, &a3))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QStandardItemModel::setHeaderData(a0,a1,*a2,a3) : sipCpp->setHeaderData(a0,a1,*a2,a3));
            sipReleaseType(const_cast< ::QVariant *>(a2),sipType_QVariant,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_setHeaderData, doc_QStandardItemModel_setHeaderData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_insertRows, "insertRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QStandardItemModel_insertRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_insertRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
         ::QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|J9", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QStandardItemModel::insertRows(a0,a1,*a2) : sipCpp->insertRows(a0,a1,*a2));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_insertRows, doc_QStandardItemModel_insertRows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_insertColumns, "insertColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QStandardItemModel_insertColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_insertColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
         ::QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|J9", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QStandardItemModel::insertColumns(a0,a1,*a2) : sipCpp->insertColumns(a0,a1,*a2));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_insertColumns, doc_QStandardItemModel_insertColumns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_removeRows, "removeRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QStandardItemModel_removeRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_removeRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
         ::QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|J9", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QStandardItemModel::removeRows(a0,a1,*a2) : sipCpp->removeRows(a0,a1,*a2));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_removeRows, doc_QStandardItemModel_removeRows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_removeColumns, "removeColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QStandardItemModel_removeColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_removeColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
         ::QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|J9", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QStandardItemModel::removeColumns(a0,a1,*a2) : sipCpp->removeColumns(a0,a1,*a2));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_removeColumns, doc_QStandardItemModel_removeColumns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_flags, "flags(self, QModelIndex) -> Qt.ItemFlags");

extern "C" {static PyObject *meth_QStandardItemModel_flags(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::Qt::ItemFlags*sipRes;

            sipRes = new  ::Qt::ItemFlags((sipSelfWasArg ? sipCpp-> ::QStandardItemModel::flags(*a0) : sipCpp->flags(*a0)));

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_flags, doc_QStandardItemModel_flags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_clear, "clear(self)");

extern "C" {static PyObject *meth_QStandardItemModel_clear(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItemModel, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_clear, doc_QStandardItemModel_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_supportedDropActions, "supportedDropActions(self) -> Qt.DropActions");

extern "C" {static PyObject *meth_QStandardItemModel_supportedDropActions(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_supportedDropActions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItemModel, &sipCpp))
        {
             ::Qt::DropActions*sipRes;

            sipRes = new  ::Qt::DropActions((sipSelfWasArg ? sipCpp-> ::QStandardItemModel::supportedDropActions() : sipCpp->supportedDropActions()));

            return sipConvertFromNewType(sipRes,sipType_Qt_DropActions,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_supportedDropActions, doc_QStandardItemModel_supportedDropActions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_itemData, "itemData(self, QModelIndex) -> Dict[int, Any]");

extern "C" {static PyObject *meth_QStandardItemModel_itemData(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_itemData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            QMap<int, ::QVariant>*sipRes;

            sipRes = new QMap<int, ::QVariant>((sipSelfWasArg ? sipCpp-> ::QStandardItemModel::itemData(*a0) : sipCpp->itemData(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QMap_1800_0100QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_itemData, doc_QStandardItemModel_itemData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_setItemData, "setItemData(self, QModelIndex, Dict[int, Any]) -> bool");

extern "C" {static PyObject *meth_QStandardItemModel_setItemData(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_setItemData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const QMap<int, ::QVariant>* a1;
        int a1State = 0;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QMap_1800_0100QVariant,&a1, &a1State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QStandardItemModel::setItemData(*a0,*a1) : sipCpp->setItemData(*a0,*a1));
            sipReleaseType(const_cast<QMap<int, ::QVariant> *>(a1),sipType_QMap_1800_0100QVariant,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_setItemData, doc_QStandardItemModel_setItemData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_sort, "sort(self, int, order: Qt.SortOrder = Qt.AscendingOrder)");

extern "C" {static PyObject *meth_QStandardItemModel_sort(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_sort(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::Qt::SortOrder a1 = Qt::AscendingOrder;
         ::QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_order,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|E", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, sipType_Qt_SortOrder, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QStandardItemModel::sort(a0,a1) : sipCpp->sort(a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_sort, doc_QStandardItemModel_sort);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_itemFromIndex, "itemFromIndex(self, QModelIndex) -> QStandardItem");

extern "C" {static PyObject *meth_QStandardItemModel_itemFromIndex(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_itemFromIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
        const  ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QStandardItem*sipRes;

            sipRes = sipCpp->itemFromIndex(*a0);

            return sipConvertFromType(sipRes,sipType_QStandardItem,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_itemFromIndex, doc_QStandardItemModel_itemFromIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_indexFromItem, "indexFromItem(self, QStandardItem) -> QModelIndex");

extern "C" {static PyObject *meth_QStandardItemModel_indexFromItem(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_indexFromItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardItem* a0;
        const  ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QStandardItem, &a0))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex(sipCpp->indexFromItem(a0));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_indexFromItem, doc_QStandardItemModel_indexFromItem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_item, "item(self, int, column: int = 0) -> QStandardItem");

extern "C" {static PyObject *meth_QStandardItemModel_item(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_item(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1 = 0;
        const  ::QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|i", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, &a1))
        {
             ::QStandardItem*sipRes;

            sipRes = sipCpp->item(a0,a1);

            return sipConvertFromType(sipRes,sipType_QStandardItem,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_item, doc_QStandardItemModel_item);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_setItem, "setItem(self, int, int, QStandardItem)\n"
"setItem(self, int, QStandardItem)");

extern "C" {static PyObject *meth_QStandardItemModel_setItem(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_setItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QStandardItem* a2;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ:", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, &a1, sipType_QStandardItem, &a2))
        {
            sipCpp->setItem(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::QStandardItem* a1;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, sipType_QStandardItem, &a1))
        {
            sipCpp->setItem(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_setItem, doc_QStandardItemModel_setItem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_invisibleRootItem, "invisibleRootItem(self) -> QStandardItem");

extern "C" {static PyObject *meth_QStandardItemModel_invisibleRootItem(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_invisibleRootItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItemModel, &sipCpp))
        {
             ::QStandardItem*sipRes;

            sipRes = sipCpp->invisibleRootItem();

            return sipConvertFromType(sipRes,sipType_QStandardItem,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_invisibleRootItem, doc_QStandardItemModel_invisibleRootItem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_horizontalHeaderItem, "horizontalHeaderItem(self, int) -> QStandardItem");

extern "C" {static PyObject *meth_QStandardItemModel_horizontalHeaderItem(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_horizontalHeaderItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0))
        {
             ::QStandardItem*sipRes;

            sipRes = sipCpp->horizontalHeaderItem(a0);

            return sipConvertFromType(sipRes,sipType_QStandardItem,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_horizontalHeaderItem, doc_QStandardItemModel_horizontalHeaderItem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_setHorizontalHeaderItem, "setHorizontalHeaderItem(self, int, QStandardItem)");

extern "C" {static PyObject *meth_QStandardItemModel_setHorizontalHeaderItem(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_setHorizontalHeaderItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QStandardItem* a1;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, sipType_QStandardItem, &a1))
        {
            sipCpp->setHorizontalHeaderItem(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_setHorizontalHeaderItem, doc_QStandardItemModel_setHorizontalHeaderItem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_verticalHeaderItem, "verticalHeaderItem(self, int) -> QStandardItem");

extern "C" {static PyObject *meth_QStandardItemModel_verticalHeaderItem(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_verticalHeaderItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0))
        {
             ::QStandardItem*sipRes;

            sipRes = sipCpp->verticalHeaderItem(a0);

            return sipConvertFromType(sipRes,sipType_QStandardItem,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_verticalHeaderItem, doc_QStandardItemModel_verticalHeaderItem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_setVerticalHeaderItem, "setVerticalHeaderItem(self, int, QStandardItem)");

extern "C" {static PyObject *meth_QStandardItemModel_setVerticalHeaderItem(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_setVerticalHeaderItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QStandardItem* a1;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, sipType_QStandardItem, &a1))
        {
            sipCpp->setVerticalHeaderItem(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_setVerticalHeaderItem, doc_QStandardItemModel_setVerticalHeaderItem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_setHorizontalHeaderLabels, "setHorizontalHeaderLabels(self, Iterable[str])");

extern "C" {static PyObject *meth_QStandardItemModel_setHorizontalHeaderLabels(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_setHorizontalHeaderLabels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            sipCpp->setHorizontalHeaderLabels(*a0);
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_setHorizontalHeaderLabels, doc_QStandardItemModel_setHorizontalHeaderLabels);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_setVerticalHeaderLabels, "setVerticalHeaderLabels(self, Iterable[str])");

extern "C" {static PyObject *meth_QStandardItemModel_setVerticalHeaderLabels(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_setVerticalHeaderLabels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            sipCpp->setVerticalHeaderLabels(*a0);
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_setVerticalHeaderLabels, doc_QStandardItemModel_setVerticalHeaderLabels);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_setRowCount, "setRowCount(self, int)");

extern "C" {static PyObject *meth_QStandardItemModel_setRowCount(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_setRowCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0))
        {
            sipCpp->setRowCount(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_setRowCount, doc_QStandardItemModel_setRowCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_setColumnCount, "setColumnCount(self, int)");

extern "C" {static PyObject *meth_QStandardItemModel_setColumnCount(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_setColumnCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0))
        {
            sipCpp->setColumnCount(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_setColumnCount, doc_QStandardItemModel_setColumnCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_appendRow, "appendRow(self, Iterable[QStandardItem])\n"
"appendRow(self, QStandardItem)");

extern "C" {static PyObject *meth_QStandardItemModel_appendRow(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_appendRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QList< ::QStandardItem*>* a0;
        int a0State = 0;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ3", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QList_0101QStandardItem,&a0, &a0State))
        {
            sipCpp->appendRow(*a0);
            sipReleaseType(const_cast<QList< ::QStandardItem*> *>(a0),sipType_QList_0101QStandardItem,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QStandardItem* a0;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QStandardItem, &a0))
        {
            sipCpp->appendRow(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_appendRow, doc_QStandardItemModel_appendRow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_appendColumn, "appendColumn(self, Iterable[QStandardItem])");

extern "C" {static PyObject *meth_QStandardItemModel_appendColumn(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_appendColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QList< ::QStandardItem*>* a0;
        int a0State = 0;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ3", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QList_0101QStandardItem,&a0, &a0State))
        {
            sipCpp->appendColumn(*a0);
            sipReleaseType(const_cast<QList< ::QStandardItem*> *>(a0),sipType_QList_0101QStandardItem,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_appendColumn, doc_QStandardItemModel_appendColumn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_insertRow, "insertRow(self, int, Iterable[QStandardItem])\n"
"insertRow(self, int, QStandardItem)\n"
"insertRow(self, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QStandardItemModel_insertRow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_insertRow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const QList< ::QStandardItem*>* a1;
        int a1State = 0;
         ::QStandardItemModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BiJ3", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, sipType_QList_0101QStandardItem,&a1, &a1State))
        {
            sipCpp->insertRow(a0,*a1);
            sipReleaseType(const_cast<QList< ::QStandardItem*> *>(a1),sipType_QList_0101QStandardItem,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::QStandardItem* a1;
         ::QStandardItemModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BiJ:", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, sipType_QStandardItem, &a1))
        {
            sipCpp->insertRow(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QModelIndex& a1def = QModelIndex();
        const  ::QModelIndex* a1 = &a1def;
         ::QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|J9", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, sipType_QModelIndex, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->insertRow(a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_insertRow, doc_QStandardItemModel_insertRow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_insertColumn, "insertColumn(self, int, Iterable[QStandardItem])\n"
"insertColumn(self, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QStandardItemModel_insertColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_insertColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const QList< ::QStandardItem*>* a1;
        int a1State = 0;
         ::QStandardItemModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BiJ3", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, sipType_QList_0101QStandardItem,&a1, &a1State))
        {
            sipCpp->insertColumn(a0,*a1);
            sipReleaseType(const_cast<QList< ::QStandardItem*> *>(a1),sipType_QList_0101QStandardItem,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QModelIndex& a1def = QModelIndex();
        const  ::QModelIndex* a1 = &a1def;
         ::QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|J9", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, sipType_QModelIndex, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->insertColumn(a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_insertColumn, doc_QStandardItemModel_insertColumn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_takeItem, "takeItem(self, int, column: int = 0) -> QStandardItem");

extern "C" {static PyObject *meth_QStandardItemModel_takeItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_takeItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1 = 0;
         ::QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|i", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, &a1))
        {
             ::QStandardItem*sipRes;

            sipRes = sipCpp->takeItem(a0,a1);

            return sipConvertFromType(sipRes,sipType_QStandardItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_takeItem, doc_QStandardItemModel_takeItem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_takeRow, "takeRow(self, int) -> List[QStandardItem]");

extern "C" {static PyObject *meth_QStandardItemModel_takeRow(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_takeRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0))
        {
            QList< ::QStandardItem*>*sipRes;

            sipRes = new QList< ::QStandardItem*>(sipCpp->takeRow(a0));

            return sipConvertFromNewType(sipRes,sipType_QList_0101QStandardItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_takeRow, doc_QStandardItemModel_takeRow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_takeColumn, "takeColumn(self, int) -> List[QStandardItem]");

extern "C" {static PyObject *meth_QStandardItemModel_takeColumn(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_takeColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0))
        {
            QList< ::QStandardItem*>*sipRes;

            sipRes = new QList< ::QStandardItem*>(sipCpp->takeColumn(a0));

            return sipConvertFromNewType(sipRes,sipType_QList_0101QStandardItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_takeColumn, doc_QStandardItemModel_takeColumn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_takeHorizontalHeaderItem, "takeHorizontalHeaderItem(self, int) -> QStandardItem");

extern "C" {static PyObject *meth_QStandardItemModel_takeHorizontalHeaderItem(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_takeHorizontalHeaderItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0))
        {
             ::QStandardItem*sipRes;

            sipRes = sipCpp->takeHorizontalHeaderItem(a0);

            return sipConvertFromType(sipRes,sipType_QStandardItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_takeHorizontalHeaderItem, doc_QStandardItemModel_takeHorizontalHeaderItem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_takeVerticalHeaderItem, "takeVerticalHeaderItem(self, int) -> QStandardItem");

extern "C" {static PyObject *meth_QStandardItemModel_takeVerticalHeaderItem(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_takeVerticalHeaderItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0))
        {
             ::QStandardItem*sipRes;

            sipRes = sipCpp->takeVerticalHeaderItem(a0);

            return sipConvertFromType(sipRes,sipType_QStandardItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_takeVerticalHeaderItem, doc_QStandardItemModel_takeVerticalHeaderItem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_itemPrototype, "itemPrototype(self) -> QStandardItem");

extern "C" {static PyObject *meth_QStandardItemModel_itemPrototype(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_itemPrototype(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItemModel, &sipCpp))
        {
            const  ::QStandardItem*sipRes;

            sipRes = sipCpp->itemPrototype();

            return sipConvertFromType(const_cast< ::QStandardItem *>(sipRes),sipType_QStandardItem,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_itemPrototype, doc_QStandardItemModel_itemPrototype);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_setItemPrototype, "setItemPrototype(self, QStandardItem)");

extern "C" {static PyObject *meth_QStandardItemModel_setItemPrototype(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_setItemPrototype(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardItem* a0;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QStandardItem, &a0))
        {
            sipCpp->setItemPrototype(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_setItemPrototype, doc_QStandardItemModel_setItemPrototype);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_findItems, "findItems(self, str, flags: Union[Qt.MatchFlags, Qt.MatchFlag] = Qt.MatchExactly, column: int = 0) -> List[QStandardItem]");

extern "C" {static PyObject *meth_QStandardItemModel_findItems(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_findItems(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::Qt::MatchFlags a1def = Qt::MatchExactly;
         ::Qt::MatchFlags* a1 = &a1def;
        int a1State = 0;
        int a2 = 0;
        const  ::QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_flags,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J1i", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QString,&a0, &a0State, sipType_Qt_MatchFlags, &a1, &a1State, &a2))
        {
            QList< ::QStandardItem*>*sipRes;

            sipRes = new QList< ::QStandardItem*>(sipCpp->findItems(*a0,*a1,a2));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_Qt_MatchFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QList_0101QStandardItem,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_findItems, doc_QStandardItemModel_findItems);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_sortRole, "sortRole(self) -> int");

extern "C" {static PyObject *meth_QStandardItemModel_sortRole(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_sortRole(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItemModel, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sortRole();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_sortRole, doc_QStandardItemModel_sortRole);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_setSortRole, "setSortRole(self, int)");

extern "C" {static PyObject *meth_QStandardItemModel_setSortRole(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_setSortRole(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0))
        {
            sipCpp->setSortRole(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_setSortRole, doc_QStandardItemModel_setSortRole);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_mimeTypes, "mimeTypes(self) -> List[str]");

extern "C" {static PyObject *meth_QStandardItemModel_mimeTypes(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_mimeTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItemModel, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList((sipSelfWasArg ? sipCpp-> ::QStandardItemModel::mimeTypes() : sipCpp->mimeTypes()));

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_mimeTypes, doc_QStandardItemModel_mimeTypes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_mimeData, "mimeData(self, Iterable[QModelIndex]) -> QMimeData");

extern "C" {static PyObject *meth_QStandardItemModel_mimeData(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_mimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndexList* a0;
        int a0State = 0;
        const  ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QList_0100QModelIndex,&a0, &a0State))
        {
             ::QMimeData*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QStandardItemModel::mimeData(*a0) : sipCpp->mimeData(*a0));
            sipReleaseType(const_cast< ::QModelIndexList *>(a0),sipType_QList_0100QModelIndex,a0State);

            return sipConvertFromType(sipRes,sipType_QMimeData,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_mimeData, doc_QStandardItemModel_mimeData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_dropMimeData, "dropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QStandardItemModel_dropMimeData(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_dropMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMimeData* a0;
         ::Qt::DropAction a1;
        int a2;
        int a3;
        const  ::QModelIndex* a4;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8EiiJ9", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QMimeData, &a0, sipType_Qt_DropAction, &a1, &a2, &a3, sipType_QModelIndex, &a4))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QStandardItemModel::dropMimeData(a0,a1,a2,a3,*a4) : sipCpp->dropMimeData(a0,a1,a2,a3,*a4));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_dropMimeData, doc_QStandardItemModel_dropMimeData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_sibling, "sibling(self, int, int, QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QStandardItemModel_sibling(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_sibling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex* a2;
        const  ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ9", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QStandardItemModel::sibling(a0,a1,*a2) : sipCpp->sibling(a0,a1,*a2)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_sibling, doc_QStandardItemModel_sibling);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_setItemRoleNames, "setItemRoleNames(self, Dict[int, Union[QByteArray, bytes, bytearray]])");

extern "C" {static PyObject *meth_QStandardItemModel_setItemRoleNames(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_setItemRoleNames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QHash<int, ::QByteArray>* a0;
        int a0State = 0;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QHash_1800_0100QByteArray,&a0, &a0State))
        {
            sipCpp->setItemRoleNames(*a0);
            sipReleaseType(const_cast<QHash<int, ::QByteArray> *>(a0),sipType_QHash_1800_0100QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_setItemRoleNames, doc_QStandardItemModel_setItemRoleNames);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardItemModel_clearItemData, "clearItemData(self, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QStandardItemModel_clearItemData(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_clearItemData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->clearItemData(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_clearItemData, doc_QStandardItemModel_clearItemData);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QStandardItemModel(void *, const sipTypeDef *);}
static void *cast_QStandardItemModel(void *sipCppV, const sipTypeDef *targetType)
{
     ::QStandardItemModel *sipCpp = reinterpret_cast< ::QStandardItemModel *>(sipCppV);

    if (targetType == sipType_QAbstractItemModel)
        return static_cast< ::QAbstractItemModel *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QStandardItemModel(void *, int);}
static void release_QStandardItemModel(void *sipCppV, int)
{
     ::QStandardItemModel *sipCpp = reinterpret_cast< ::QStandardItemModel *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QStandardItemModel(sipSimpleWrapper *);}
static void dealloc_QStandardItemModel(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQStandardItemModel *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QStandardItemModel(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QStandardItemModel(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QStandardItemModel(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQStandardItemModel *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQStandardItemModel(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        int a0;
        int a1;
         ::QObject* a2 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "ii|JH", &a0, &a1, sipType_QObject, &a2, sipOwner))
        {
            sipCpp = new sipQStandardItemModel(a0,a1,a2);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QStandardItemModel[] = {{0, 0, 1}};


static PyMethodDef methods_QStandardItemModel[] = {
    {SIP_MLNAME_CAST(sipName_appendColumn), meth_QStandardItemModel_appendColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_appendColumn)},
    {SIP_MLNAME_CAST(sipName_appendRow), meth_QStandardItemModel_appendRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_appendRow)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QStandardItemModel_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_clear)},
    {SIP_MLNAME_CAST(sipName_clearItemData), meth_QStandardItemModel_clearItemData, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_clearItemData)},
    {SIP_MLNAME_CAST(sipName_columnCount), SIP_MLMETH_CAST(meth_QStandardItemModel_columnCount), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_columnCount)},
    {SIP_MLNAME_CAST(sipName_data), SIP_MLMETH_CAST(meth_QStandardItemModel_data), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_data)},
    {SIP_MLNAME_CAST(sipName_dropMimeData), meth_QStandardItemModel_dropMimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_dropMimeData)},
    {SIP_MLNAME_CAST(sipName_findItems), SIP_MLMETH_CAST(meth_QStandardItemModel_findItems), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_findItems)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QStandardItemModel_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_flags)},
    {SIP_MLNAME_CAST(sipName_hasChildren), SIP_MLMETH_CAST(meth_QStandardItemModel_hasChildren), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_hasChildren)},
    {SIP_MLNAME_CAST(sipName_headerData), SIP_MLMETH_CAST(meth_QStandardItemModel_headerData), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_headerData)},
    {SIP_MLNAME_CAST(sipName_horizontalHeaderItem), meth_QStandardItemModel_horizontalHeaderItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_horizontalHeaderItem)},
    {SIP_MLNAME_CAST(sipName_index), SIP_MLMETH_CAST(meth_QStandardItemModel_index), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_index)},
    {SIP_MLNAME_CAST(sipName_indexFromItem), meth_QStandardItemModel_indexFromItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_indexFromItem)},
    {SIP_MLNAME_CAST(sipName_insertColumn), SIP_MLMETH_CAST(meth_QStandardItemModel_insertColumn), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_insertColumn)},
    {SIP_MLNAME_CAST(sipName_insertColumns), SIP_MLMETH_CAST(meth_QStandardItemModel_insertColumns), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_insertColumns)},
    {SIP_MLNAME_CAST(sipName_insertRow), SIP_MLMETH_CAST(meth_QStandardItemModel_insertRow), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_insertRow)},
    {SIP_MLNAME_CAST(sipName_insertRows), SIP_MLMETH_CAST(meth_QStandardItemModel_insertRows), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_insertRows)},
    {SIP_MLNAME_CAST(sipName_invisibleRootItem), meth_QStandardItemModel_invisibleRootItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_invisibleRootItem)},
    {SIP_MLNAME_CAST(sipName_item), SIP_MLMETH_CAST(meth_QStandardItemModel_item), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_item)},
    {SIP_MLNAME_CAST(sipName_itemData), meth_QStandardItemModel_itemData, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_itemData)},
    {SIP_MLNAME_CAST(sipName_itemFromIndex), meth_QStandardItemModel_itemFromIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_itemFromIndex)},
    {SIP_MLNAME_CAST(sipName_itemPrototype), meth_QStandardItemModel_itemPrototype, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_itemPrototype)},
    {SIP_MLNAME_CAST(sipName_mimeData), meth_QStandardItemModel_mimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_mimeData)},
    {SIP_MLNAME_CAST(sipName_mimeTypes), meth_QStandardItemModel_mimeTypes, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_mimeTypes)},
    {SIP_MLNAME_CAST(sipName_parent), meth_QStandardItemModel_parent, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_parent)},
    {SIP_MLNAME_CAST(sipName_removeColumns), SIP_MLMETH_CAST(meth_QStandardItemModel_removeColumns), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_removeColumns)},
    {SIP_MLNAME_CAST(sipName_removeRows), SIP_MLMETH_CAST(meth_QStandardItemModel_removeRows), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_removeRows)},
    {SIP_MLNAME_CAST(sipName_rowCount), SIP_MLMETH_CAST(meth_QStandardItemModel_rowCount), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_rowCount)},
    {SIP_MLNAME_CAST(sipName_setColumnCount), meth_QStandardItemModel_setColumnCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_setColumnCount)},
    {SIP_MLNAME_CAST(sipName_setData), SIP_MLMETH_CAST(meth_QStandardItemModel_setData), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_setData)},
    {SIP_MLNAME_CAST(sipName_setHeaderData), SIP_MLMETH_CAST(meth_QStandardItemModel_setHeaderData), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_setHeaderData)},
    {SIP_MLNAME_CAST(sipName_setHorizontalHeaderItem), meth_QStandardItemModel_setHorizontalHeaderItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_setHorizontalHeaderItem)},
    {SIP_MLNAME_CAST(sipName_setHorizontalHeaderLabels), meth_QStandardItemModel_setHorizontalHeaderLabels, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_setHorizontalHeaderLabels)},
    {SIP_MLNAME_CAST(sipName_setItem), meth_QStandardItemModel_setItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_setItem)},
    {SIP_MLNAME_CAST(sipName_setItemData), meth_QStandardItemModel_setItemData, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_setItemData)},
    {SIP_MLNAME_CAST(sipName_setItemPrototype), meth_QStandardItemModel_setItemPrototype, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_setItemPrototype)},
    {SIP_MLNAME_CAST(sipName_setItemRoleNames), meth_QStandardItemModel_setItemRoleNames, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_setItemRoleNames)},
    {SIP_MLNAME_CAST(sipName_setRowCount), meth_QStandardItemModel_setRowCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_setRowCount)},
    {SIP_MLNAME_CAST(sipName_setSortRole), meth_QStandardItemModel_setSortRole, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_setSortRole)},
    {SIP_MLNAME_CAST(sipName_setVerticalHeaderItem), meth_QStandardItemModel_setVerticalHeaderItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_setVerticalHeaderItem)},
    {SIP_MLNAME_CAST(sipName_setVerticalHeaderLabels), meth_QStandardItemModel_setVerticalHeaderLabels, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_setVerticalHeaderLabels)},
    {SIP_MLNAME_CAST(sipName_sibling), meth_QStandardItemModel_sibling, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_sibling)},
    {SIP_MLNAME_CAST(sipName_sort), SIP_MLMETH_CAST(meth_QStandardItemModel_sort), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_sort)},
    {SIP_MLNAME_CAST(sipName_sortRole), meth_QStandardItemModel_sortRole, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_sortRole)},
    {SIP_MLNAME_CAST(sipName_supportedDropActions), meth_QStandardItemModel_supportedDropActions, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_supportedDropActions)},
    {SIP_MLNAME_CAST(sipName_takeColumn), meth_QStandardItemModel_takeColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_takeColumn)},
    {SIP_MLNAME_CAST(sipName_takeHorizontalHeaderItem), meth_QStandardItemModel_takeHorizontalHeaderItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_takeHorizontalHeaderItem)},
    {SIP_MLNAME_CAST(sipName_takeItem), SIP_MLMETH_CAST(meth_QStandardItemModel_takeItem), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_takeItem)},
    {SIP_MLNAME_CAST(sipName_takeRow), meth_QStandardItemModel_takeRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_takeRow)},
    {SIP_MLNAME_CAST(sipName_takeVerticalHeaderItem), meth_QStandardItemModel_takeVerticalHeaderItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_takeVerticalHeaderItem)},
    {SIP_MLNAME_CAST(sipName_verticalHeaderItem), meth_QStandardItemModel_verticalHeaderItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_verticalHeaderItem)}
};

PyDoc_STRVAR(doc_QStandardItemModel, "\1QStandardItemModel(parent: QObject = None)\n"
"QStandardItemModel(int, int, parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QStandardItemModel[] = {
    {"itemChanged(QStandardItem*)", "\1itemChanged(self, QStandardItem)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QStandardItemModel = {
    & ::QStandardItemModel::staticMetaObject,
    0,
    signals_QStandardItemModel,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QStandardItemModel = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QStandardItemModel,
        {SIP_NULLPTR},
        &plugin_QStandardItemModel
    },
    {
        sipNameNr_QStandardItemModel,
        {0, 0, 1},
        52, methods_QStandardItemModel,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QStandardItemModel,
    -1,
    -1,
    supers_QStandardItemModel,
    SIP_NULLPTR,
    init_type_QStandardItemModel,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QStandardItemModel,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QStandardItemModel,
    cast_QStandardItemModel,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qsessionmanager.sip"
#include <qsessionmanager.h>
#line 62619 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qguiapplication.sip"
#include <qguiapplication.h>
#line 62623 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 62626 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 62629 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 62632 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 62635 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 62638 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 62641 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 62644 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 62647 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 62650 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 62653 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 62656 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 62659 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 62662 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 62665 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 62668 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 62671 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 62674 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QSessionManager_sessionId, "sessionId(self) -> str");

extern "C" {static PyObject *meth_QSessionManager_sessionId(PyObject *, PyObject *);}
static PyObject *meth_QSessionManager_sessionId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSessionManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSessionManager, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->sessionId());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSessionManager, sipName_sessionId, doc_QSessionManager_sessionId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSessionManager_sessionKey, "sessionKey(self) -> str");

extern "C" {static PyObject *meth_QSessionManager_sessionKey(PyObject *, PyObject *);}
static PyObject *meth_QSessionManager_sessionKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSessionManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSessionManager, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->sessionKey());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSessionManager, sipName_sessionKey, doc_QSessionManager_sessionKey);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSessionManager_allowsInteraction, "allowsInteraction(self) -> bool");

extern "C" {static PyObject *meth_QSessionManager_allowsInteraction(PyObject *, PyObject *);}
static PyObject *meth_QSessionManager_allowsInteraction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSessionManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSessionManager, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->allowsInteraction();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSessionManager, sipName_allowsInteraction, doc_QSessionManager_allowsInteraction);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSessionManager_allowsErrorInteraction, "allowsErrorInteraction(self) -> bool");

extern "C" {static PyObject *meth_QSessionManager_allowsErrorInteraction(PyObject *, PyObject *);}
static PyObject *meth_QSessionManager_allowsErrorInteraction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSessionManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSessionManager, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->allowsErrorInteraction();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSessionManager, sipName_allowsErrorInteraction, doc_QSessionManager_allowsErrorInteraction);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSessionManager_release, "release(self)");

extern "C" {static PyObject *meth_QSessionManager_release(PyObject *, PyObject *);}
static PyObject *meth_QSessionManager_release(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSessionManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSessionManager, &sipCpp))
        {
            sipCpp->release();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSessionManager, sipName_release, doc_QSessionManager_release);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSessionManager_cancel, "cancel(self)");

extern "C" {static PyObject *meth_QSessionManager_cancel(PyObject *, PyObject *);}
static PyObject *meth_QSessionManager_cancel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSessionManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSessionManager, &sipCpp))
        {
            sipCpp->cancel();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSessionManager, sipName_cancel, doc_QSessionManager_cancel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSessionManager_setRestartHint, "setRestartHint(self, QSessionManager.RestartHint)");

extern "C" {static PyObject *meth_QSessionManager_setRestartHint(PyObject *, PyObject *);}
static PyObject *meth_QSessionManager_setRestartHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSessionManager::RestartHint a0;
         ::QSessionManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSessionManager, &sipCpp, sipType_QSessionManager_RestartHint, &a0))
        {
            sipCpp->setRestartHint(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSessionManager, sipName_setRestartHint, doc_QSessionManager_setRestartHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSessionManager_restartHint, "restartHint(self) -> QSessionManager.RestartHint");

extern "C" {static PyObject *meth_QSessionManager_restartHint(PyObject *, PyObject *);}
static PyObject *meth_QSessionManager_restartHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSessionManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSessionManager, &sipCpp))
        {
             ::QSessionManager::RestartHint sipRes;

            sipRes = sipCpp->restartHint();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSessionManager_RestartHint);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSessionManager, sipName_restartHint, doc_QSessionManager_restartHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSessionManager_setRestartCommand, "setRestartCommand(self, Iterable[str])");

extern "C" {static PyObject *meth_QSessionManager_setRestartCommand(PyObject *, PyObject *);}
static PyObject *meth_QSessionManager_setRestartCommand(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QSessionManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSessionManager, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            sipCpp->setRestartCommand(*a0);
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSessionManager, sipName_setRestartCommand, doc_QSessionManager_setRestartCommand);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSessionManager_restartCommand, "restartCommand(self) -> List[str]");

extern "C" {static PyObject *meth_QSessionManager_restartCommand(PyObject *, PyObject *);}
static PyObject *meth_QSessionManager_restartCommand(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSessionManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSessionManager, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->restartCommand());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSessionManager, sipName_restartCommand, doc_QSessionManager_restartCommand);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSessionManager_setDiscardCommand, "setDiscardCommand(self, Iterable[str])");

extern "C" {static PyObject *meth_QSessionManager_setDiscardCommand(PyObject *, PyObject *);}
static PyObject *meth_QSessionManager_setDiscardCommand(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QSessionManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSessionManager, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            sipCpp->setDiscardCommand(*a0);
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSessionManager, sipName_setDiscardCommand, doc_QSessionManager_setDiscardCommand);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSessionManager_discardCommand, "discardCommand(self) -> List[str]");

extern "C" {static PyObject *meth_QSessionManager_discardCommand(PyObject *, PyObject *);}
static PyObject *meth_QSessionManager_discardCommand(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSessionManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSessionManager, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->discardCommand());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSessionManager, sipName_discardCommand, doc_QSessionManager_discardCommand);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSessionManager_setManagerProperty, "setManagerProperty(self, str, str)\n"
"setManagerProperty(self, str, Iterable[str])");

extern "C" {static PyObject *meth_QSessionManager_setManagerProperty(PyObject *, PyObject *);}
static PyObject *meth_QSessionManager_setManagerProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QSessionManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QSessionManager, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            sipCpp->setManagerProperty(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QStringList* a1;
        int a1State = 0;
         ::QSessionManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QSessionManager, &sipCpp, sipType_QString,&a0, &a0State, sipType_QStringList,&a1, &a1State))
        {
            sipCpp->setManagerProperty(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QStringList *>(a1),sipType_QStringList,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSessionManager, sipName_setManagerProperty, doc_QSessionManager_setManagerProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSessionManager_isPhase2, "isPhase2(self) -> bool");

extern "C" {static PyObject *meth_QSessionManager_isPhase2(PyObject *, PyObject *);}
static PyObject *meth_QSessionManager_isPhase2(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSessionManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSessionManager, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isPhase2();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSessionManager, sipName_isPhase2, doc_QSessionManager_isPhase2);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSessionManager_requestPhase2, "requestPhase2(self)");

extern "C" {static PyObject *meth_QSessionManager_requestPhase2(PyObject *, PyObject *);}
static PyObject *meth_QSessionManager_requestPhase2(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSessionManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSessionManager, &sipCpp))
        {
            sipCpp->requestPhase2();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSessionManager, sipName_requestPhase2, doc_QSessionManager_requestPhase2);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSessionManager(void *, const sipTypeDef *);}
static void *cast_QSessionManager(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSessionManager *sipCpp = reinterpret_cast< ::QSessionManager *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSessionManager(void *, int);}
static void release_QSessionManager(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSessionManager[] = {{25, 0, 1}};


static PyMethodDef methods_QSessionManager[] = {
    {SIP_MLNAME_CAST(sipName_allowsErrorInteraction), meth_QSessionManager_allowsErrorInteraction, METH_VARARGS, SIP_MLDOC_CAST(doc_QSessionManager_allowsErrorInteraction)},
    {SIP_MLNAME_CAST(sipName_allowsInteraction), meth_QSessionManager_allowsInteraction, METH_VARARGS, SIP_MLDOC_CAST(doc_QSessionManager_allowsInteraction)},
    {SIP_MLNAME_CAST(sipName_cancel), meth_QSessionManager_cancel, METH_VARARGS, SIP_MLDOC_CAST(doc_QSessionManager_cancel)},
    {SIP_MLNAME_CAST(sipName_discardCommand), meth_QSessionManager_discardCommand, METH_VARARGS, SIP_MLDOC_CAST(doc_QSessionManager_discardCommand)},
    {SIP_MLNAME_CAST(sipName_isPhase2), meth_QSessionManager_isPhase2, METH_VARARGS, SIP_MLDOC_CAST(doc_QSessionManager_isPhase2)},
    {SIP_MLNAME_CAST(sipName_release), meth_QSessionManager_release, METH_VARARGS, SIP_MLDOC_CAST(doc_QSessionManager_release)},
    {SIP_MLNAME_CAST(sipName_requestPhase2), meth_QSessionManager_requestPhase2, METH_VARARGS, SIP_MLDOC_CAST(doc_QSessionManager_requestPhase2)},
    {SIP_MLNAME_CAST(sipName_restartCommand), meth_QSessionManager_restartCommand, METH_VARARGS, SIP_MLDOC_CAST(doc_QSessionManager_restartCommand)},
    {SIP_MLNAME_CAST(sipName_restartHint), meth_QSessionManager_restartHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QSessionManager_restartHint)},
    {SIP_MLNAME_CAST(sipName_sessionId), meth_QSessionManager_sessionId, METH_VARARGS, SIP_MLDOC_CAST(doc_QSessionManager_sessionId)},
    {SIP_MLNAME_CAST(sipName_sessionKey), meth_QSessionManager_sessionKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QSessionManager_sessionKey)},
    {SIP_MLNAME_CAST(sipName_setDiscardCommand), meth_QSessionManager_setDiscardCommand, METH_VARARGS, SIP_MLDOC_CAST(doc_QSessionManager_setDiscardCommand)},
    {SIP_MLNAME_CAST(sipName_setManagerProperty), meth_QSessionManager_setManagerProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QSessionManager_setManagerProperty)},
    {SIP_MLNAME_CAST(sipName_setRestartCommand), meth_QSessionManager_setRestartCommand, METH_VARARGS, SIP_MLDOC_CAST(doc_QSessionManager_setRestartCommand)},
    {SIP_MLNAME_CAST(sipName_setRestartHint), meth_QSessionManager_setRestartHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QSessionManager_setRestartHint)}
};

static sipEnumMemberDef enummembers_QSessionManager[] = {
    {sipName_RestartAnyway, static_cast<int>( ::QSessionManager::RestartAnyway), 257},
    {sipName_RestartIfRunning, static_cast<int>( ::QSessionManager::RestartIfRunning), 257},
    {sipName_RestartImmediately, static_cast<int>( ::QSessionManager::RestartImmediately), 257},
    {sipName_RestartNever, static_cast<int>( ::QSessionManager::RestartNever), 257},
};


static pyqt5ClassPluginDef plugin_QSessionManager = {
    & ::QSessionManager::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QSessionManager = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSessionManager,
        {SIP_NULLPTR},
        &plugin_QSessionManager
    },
    {
        sipNameNr_QSessionManager,
        {0, 0, 1},
        15, methods_QSessionManager,
        4, enummembers_QSessionManager,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_QSessionManager,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSessionManager,
    cast_QSessionManager,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qscreen.sip"
#include <qscreen.h>
#line 63232 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 63236 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 63239 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 97 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 63242 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 63245 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 63248 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 189 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 63251 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 63254 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 63257 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 63260 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 63263 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 63266 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63269 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63272 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63275 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 63278 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 63281 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 63284 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 63287 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 63290 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 63293 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 63296 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 63299 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 63302 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 63305 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QScreen_name, "name(self) -> str");

extern "C" {static PyObject *meth_QScreen_name(PyObject *, PyObject *);}
static PyObject *meth_QScreen_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_name, doc_QScreen_name);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScreen_depth, "depth(self) -> int");

extern "C" {static PyObject *meth_QScreen_depth(PyObject *, PyObject *);}
static PyObject *meth_QScreen_depth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->depth();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_depth, doc_QScreen_depth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScreen_size, "size(self) -> QSize");

extern "C" {static PyObject *meth_QScreen_size(PyObject *, PyObject *);}
static PyObject *meth_QScreen_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->size());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_size, doc_QScreen_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScreen_geometry, "geometry(self) -> QRect");

extern "C" {static PyObject *meth_QScreen_geometry(PyObject *, PyObject *);}
static PyObject *meth_QScreen_geometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->geometry());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_geometry, doc_QScreen_geometry);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScreen_physicalSize, "physicalSize(self) -> QSizeF");

extern "C" {static PyObject *meth_QScreen_physicalSize(PyObject *, PyObject *);}
static PyObject *meth_QScreen_physicalSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
             ::QSizeF*sipRes;

            sipRes = new  ::QSizeF(sipCpp->physicalSize());

            return sipConvertFromNewType(sipRes,sipType_QSizeF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_physicalSize, doc_QScreen_physicalSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScreen_physicalDotsPerInchX, "physicalDotsPerInchX(self) -> float");

extern "C" {static PyObject *meth_QScreen_physicalDotsPerInchX(PyObject *, PyObject *);}
static PyObject *meth_QScreen_physicalDotsPerInchX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->physicalDotsPerInchX();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_physicalDotsPerInchX, doc_QScreen_physicalDotsPerInchX);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScreen_physicalDotsPerInchY, "physicalDotsPerInchY(self) -> float");

extern "C" {static PyObject *meth_QScreen_physicalDotsPerInchY(PyObject *, PyObject *);}
static PyObject *meth_QScreen_physicalDotsPerInchY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->physicalDotsPerInchY();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_physicalDotsPerInchY, doc_QScreen_physicalDotsPerInchY);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScreen_physicalDotsPerInch, "physicalDotsPerInch(self) -> float");

extern "C" {static PyObject *meth_QScreen_physicalDotsPerInch(PyObject *, PyObject *);}
static PyObject *meth_QScreen_physicalDotsPerInch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->physicalDotsPerInch();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_physicalDotsPerInch, doc_QScreen_physicalDotsPerInch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScreen_logicalDotsPerInchX, "logicalDotsPerInchX(self) -> float");

extern "C" {static PyObject *meth_QScreen_logicalDotsPerInchX(PyObject *, PyObject *);}
static PyObject *meth_QScreen_logicalDotsPerInchX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->logicalDotsPerInchX();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_logicalDotsPerInchX, doc_QScreen_logicalDotsPerInchX);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScreen_logicalDotsPerInchY, "logicalDotsPerInchY(self) -> float");

extern "C" {static PyObject *meth_QScreen_logicalDotsPerInchY(PyObject *, PyObject *);}
static PyObject *meth_QScreen_logicalDotsPerInchY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->logicalDotsPerInchY();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_logicalDotsPerInchY, doc_QScreen_logicalDotsPerInchY);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScreen_logicalDotsPerInch, "logicalDotsPerInch(self) -> float");

extern "C" {static PyObject *meth_QScreen_logicalDotsPerInch(PyObject *, PyObject *);}
static PyObject *meth_QScreen_logicalDotsPerInch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->logicalDotsPerInch();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_logicalDotsPerInch, doc_QScreen_logicalDotsPerInch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScreen_availableSize, "availableSize(self) -> QSize");

extern "C" {static PyObject *meth_QScreen_availableSize(PyObject *, PyObject *);}
static PyObject *meth_QScreen_availableSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->availableSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_availableSize, doc_QScreen_availableSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScreen_availableGeometry, "availableGeometry(self) -> QRect");

extern "C" {static PyObject *meth_QScreen_availableGeometry(PyObject *, PyObject *);}
static PyObject *meth_QScreen_availableGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->availableGeometry());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_availableGeometry, doc_QScreen_availableGeometry);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScreen_virtualSiblings, "virtualSiblings(self) -> List[QScreen]");

extern "C" {static PyObject *meth_QScreen_virtualSiblings(PyObject *, PyObject *);}
static PyObject *meth_QScreen_virtualSiblings(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
            QList< ::QScreen*>*sipRes;

            sipRes = new QList< ::QScreen*>(sipCpp->virtualSiblings());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QScreen,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_virtualSiblings, doc_QScreen_virtualSiblings);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScreen_virtualSize, "virtualSize(self) -> QSize");

extern "C" {static PyObject *meth_QScreen_virtualSize(PyObject *, PyObject *);}
static PyObject *meth_QScreen_virtualSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->virtualSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_virtualSize, doc_QScreen_virtualSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScreen_virtualGeometry, "virtualGeometry(self) -> QRect");

extern "C" {static PyObject *meth_QScreen_virtualGeometry(PyObject *, PyObject *);}
static PyObject *meth_QScreen_virtualGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->virtualGeometry());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_virtualGeometry, doc_QScreen_virtualGeometry);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScreen_availableVirtualSize, "availableVirtualSize(self) -> QSize");

extern "C" {static PyObject *meth_QScreen_availableVirtualSize(PyObject *, PyObject *);}
static PyObject *meth_QScreen_availableVirtualSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->availableVirtualSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_availableVirtualSize, doc_QScreen_availableVirtualSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScreen_availableVirtualGeometry, "availableVirtualGeometry(self) -> QRect");

extern "C" {static PyObject *meth_QScreen_availableVirtualGeometry(PyObject *, PyObject *);}
static PyObject *meth_QScreen_availableVirtualGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->availableVirtualGeometry());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_availableVirtualGeometry, doc_QScreen_availableVirtualGeometry);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScreen_nativeOrientation, "nativeOrientation(self) -> Qt.ScreenOrientation");

extern "C" {static PyObject *meth_QScreen_nativeOrientation(PyObject *, PyObject *);}
static PyObject *meth_QScreen_nativeOrientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
             ::Qt::ScreenOrientation sipRes;

            sipRes = sipCpp->nativeOrientation();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_ScreenOrientation);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_nativeOrientation, doc_QScreen_nativeOrientation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScreen_primaryOrientation, "primaryOrientation(self) -> Qt.ScreenOrientation");

extern "C" {static PyObject *meth_QScreen_primaryOrientation(PyObject *, PyObject *);}
static PyObject *meth_QScreen_primaryOrientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
             ::Qt::ScreenOrientation sipRes;

            sipRes = sipCpp->primaryOrientation();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_ScreenOrientation);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_primaryOrientation, doc_QScreen_primaryOrientation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScreen_orientation, "orientation(self) -> Qt.ScreenOrientation");

extern "C" {static PyObject *meth_QScreen_orientation(PyObject *, PyObject *);}
static PyObject *meth_QScreen_orientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
             ::Qt::ScreenOrientation sipRes;

            sipRes = sipCpp->orientation();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_ScreenOrientation);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_orientation, doc_QScreen_orientation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScreen_orientationUpdateMask, "orientationUpdateMask(self) -> Qt.ScreenOrientations");

extern "C" {static PyObject *meth_QScreen_orientationUpdateMask(PyObject *, PyObject *);}
static PyObject *meth_QScreen_orientationUpdateMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
             ::Qt::ScreenOrientations*sipRes;

            sipRes = new  ::Qt::ScreenOrientations(sipCpp->orientationUpdateMask());

            return sipConvertFromNewType(sipRes,sipType_Qt_ScreenOrientations,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_orientationUpdateMask, doc_QScreen_orientationUpdateMask);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScreen_setOrientationUpdateMask, "setOrientationUpdateMask(self, Union[Qt.ScreenOrientations, Qt.ScreenOrientation])");

extern "C" {static PyObject *meth_QScreen_setOrientationUpdateMask(PyObject *, PyObject *);}
static PyObject *meth_QScreen_setOrientationUpdateMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ScreenOrientations* a0;
        int a0State = 0;
         ::QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QScreen, &sipCpp, sipType_Qt_ScreenOrientations, &a0, &a0State))
        {
            sipCpp->setOrientationUpdateMask(*a0);
            sipReleaseType(a0,sipType_Qt_ScreenOrientations,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_setOrientationUpdateMask, doc_QScreen_setOrientationUpdateMask);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScreen_angleBetween, "angleBetween(self, Qt.ScreenOrientation, Qt.ScreenOrientation) -> int");

extern "C" {static PyObject *meth_QScreen_angleBetween(PyObject *, PyObject *);}
static PyObject *meth_QScreen_angleBetween(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ScreenOrientation a0;
         ::Qt::ScreenOrientation a1;
        const  ::QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEE", &sipSelf, sipType_QScreen, &sipCpp, sipType_Qt_ScreenOrientation, &a0, sipType_Qt_ScreenOrientation, &a1))
        {
            int sipRes;

            sipRes = sipCpp->angleBetween(a0,a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_angleBetween, doc_QScreen_angleBetween);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScreen_transformBetween, "transformBetween(self, Qt.ScreenOrientation, Qt.ScreenOrientation, QRect) -> QTransform");

extern "C" {static PyObject *meth_QScreen_transformBetween(PyObject *, PyObject *);}
static PyObject *meth_QScreen_transformBetween(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ScreenOrientation a0;
         ::Qt::ScreenOrientation a1;
        const  ::QRect* a2;
        const  ::QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEEJ9", &sipSelf, sipType_QScreen, &sipCpp, sipType_Qt_ScreenOrientation, &a0, sipType_Qt_ScreenOrientation, &a1, sipType_QRect, &a2))
        {
             ::QTransform*sipRes;

            sipRes = new  ::QTransform(sipCpp->transformBetween(a0,a1,*a2));

            return sipConvertFromNewType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_transformBetween, doc_QScreen_transformBetween);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScreen_mapBetween, "mapBetween(self, Qt.ScreenOrientation, Qt.ScreenOrientation, QRect) -> QRect");

extern "C" {static PyObject *meth_QScreen_mapBetween(PyObject *, PyObject *);}
static PyObject *meth_QScreen_mapBetween(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ScreenOrientation a0;
         ::Qt::ScreenOrientation a1;
        const  ::QRect* a2;
        const  ::QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEEJ9", &sipSelf, sipType_QScreen, &sipCpp, sipType_Qt_ScreenOrientation, &a0, sipType_Qt_ScreenOrientation, &a1, sipType_QRect, &a2))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->mapBetween(a0,a1,*a2));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_mapBetween, doc_QScreen_mapBetween);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScreen_isPortrait, "isPortrait(self, Qt.ScreenOrientation) -> bool");

extern "C" {static PyObject *meth_QScreen_isPortrait(PyObject *, PyObject *);}
static PyObject *meth_QScreen_isPortrait(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ScreenOrientation a0;
        const  ::QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QScreen, &sipCpp, sipType_Qt_ScreenOrientation, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isPortrait(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_isPortrait, doc_QScreen_isPortrait);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScreen_isLandscape, "isLandscape(self, Qt.ScreenOrientation) -> bool");

extern "C" {static PyObject *meth_QScreen_isLandscape(PyObject *, PyObject *);}
static PyObject *meth_QScreen_isLandscape(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ScreenOrientation a0;
        const  ::QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QScreen, &sipCpp, sipType_Qt_ScreenOrientation, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isLandscape(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_isLandscape, doc_QScreen_isLandscape);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScreen_grabWindow, "grabWindow(self, sip.voidptr, x: int = 0, y: int = 0, width: int = -1, height: int = -1) -> QPixmap");

extern "C" {static PyObject *meth_QScreen_grabWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QScreen_grabWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::WId* a0;
        int a0State = 0;
        int a1 = 0;
        int a2 = 0;
        int a3 = -1;
        int a4 = -1;
         ::QScreen *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|iiii", &sipSelf, sipType_QScreen, &sipCpp, sipType_quintptr,&a0, &a0State, &a1, &a2, &a3, &a4))
        {
             ::QPixmap*sipRes;

            sipRes = new  ::QPixmap(sipCpp->grabWindow(*a0,a1,a2,a3,a4));
            sipReleaseType(a0,sipType_quintptr,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_grabWindow, doc_QScreen_grabWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScreen_refreshRate, "refreshRate(self) -> float");

extern "C" {static PyObject *meth_QScreen_refreshRate(PyObject *, PyObject *);}
static PyObject *meth_QScreen_refreshRate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->refreshRate();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_refreshRate, doc_QScreen_refreshRate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScreen_devicePixelRatio, "devicePixelRatio(self) -> float");

extern "C" {static PyObject *meth_QScreen_devicePixelRatio(PyObject *, PyObject *);}
static PyObject *meth_QScreen_devicePixelRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->devicePixelRatio();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_devicePixelRatio, doc_QScreen_devicePixelRatio);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScreen_manufacturer, "manufacturer(self) -> str");

extern "C" {static PyObject *meth_QScreen_manufacturer(PyObject *, PyObject *);}
static PyObject *meth_QScreen_manufacturer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->manufacturer());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_manufacturer, doc_QScreen_manufacturer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScreen_model, "model(self) -> str");

extern "C" {static PyObject *meth_QScreen_model(PyObject *, PyObject *);}
static PyObject *meth_QScreen_model(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->model());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_model, doc_QScreen_model);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QScreen_serialNumber, "serialNumber(self) -> str");

extern "C" {static PyObject *meth_QScreen_serialNumber(PyObject *, PyObject *);}
static PyObject *meth_QScreen_serialNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->serialNumber());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_serialNumber, doc_QScreen_serialNumber);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QScreen(void *, const sipTypeDef *);}
static void *cast_QScreen(void *sipCppV, const sipTypeDef *targetType)
{
     ::QScreen *sipCpp = reinterpret_cast< ::QScreen *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QScreen(void *, int);}
static void release_QScreen(void *sipCppV, int)
{
     ::QScreen *sipCpp = reinterpret_cast< ::QScreen *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QScreen(sipSimpleWrapper *);}
static void dealloc_QScreen(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QScreen(sipGetAddress(sipSelf), 0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QScreen[] = {{25, 0, 1}};


static PyMethodDef methods_QScreen[] = {
    {SIP_MLNAME_CAST(sipName_angleBetween), meth_QScreen_angleBetween, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_angleBetween)},
    {SIP_MLNAME_CAST(sipName_availableGeometry), meth_QScreen_availableGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_availableGeometry)},
    {SIP_MLNAME_CAST(sipName_availableSize), meth_QScreen_availableSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_availableSize)},
    {SIP_MLNAME_CAST(sipName_availableVirtualGeometry), meth_QScreen_availableVirtualGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_availableVirtualGeometry)},
    {SIP_MLNAME_CAST(sipName_availableVirtualSize), meth_QScreen_availableVirtualSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_availableVirtualSize)},
    {SIP_MLNAME_CAST(sipName_depth), meth_QScreen_depth, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_depth)},
    {SIP_MLNAME_CAST(sipName_devicePixelRatio), meth_QScreen_devicePixelRatio, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_devicePixelRatio)},
    {SIP_MLNAME_CAST(sipName_geometry), meth_QScreen_geometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_geometry)},
    {SIP_MLNAME_CAST(sipName_grabWindow), SIP_MLMETH_CAST(meth_QScreen_grabWindow), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QScreen_grabWindow)},
    {SIP_MLNAME_CAST(sipName_isLandscape), meth_QScreen_isLandscape, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_isLandscape)},
    {SIP_MLNAME_CAST(sipName_isPortrait), meth_QScreen_isPortrait, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_isPortrait)},
    {SIP_MLNAME_CAST(sipName_logicalDotsPerInch), meth_QScreen_logicalDotsPerInch, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_logicalDotsPerInch)},
    {SIP_MLNAME_CAST(sipName_logicalDotsPerInchX), meth_QScreen_logicalDotsPerInchX, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_logicalDotsPerInchX)},
    {SIP_MLNAME_CAST(sipName_logicalDotsPerInchY), meth_QScreen_logicalDotsPerInchY, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_logicalDotsPerInchY)},
    {SIP_MLNAME_CAST(sipName_manufacturer), meth_QScreen_manufacturer, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_manufacturer)},
    {SIP_MLNAME_CAST(sipName_mapBetween), meth_QScreen_mapBetween, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_mapBetween)},
    {SIP_MLNAME_CAST(sipName_model), meth_QScreen_model, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_model)},
    {SIP_MLNAME_CAST(sipName_name), meth_QScreen_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_name)},
    {SIP_MLNAME_CAST(sipName_nativeOrientation), meth_QScreen_nativeOrientation, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_nativeOrientation)},
    {SIP_MLNAME_CAST(sipName_orientation), meth_QScreen_orientation, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_orientation)},
    {SIP_MLNAME_CAST(sipName_orientationUpdateMask), meth_QScreen_orientationUpdateMask, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_orientationUpdateMask)},
    {SIP_MLNAME_CAST(sipName_physicalDotsPerInch), meth_QScreen_physicalDotsPerInch, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_physicalDotsPerInch)},
    {SIP_MLNAME_CAST(sipName_physicalDotsPerInchX), meth_QScreen_physicalDotsPerInchX, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_physicalDotsPerInchX)},
    {SIP_MLNAME_CAST(sipName_physicalDotsPerInchY), meth_QScreen_physicalDotsPerInchY, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_physicalDotsPerInchY)},
    {SIP_MLNAME_CAST(sipName_physicalSize), meth_QScreen_physicalSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_physicalSize)},
    {SIP_MLNAME_CAST(sipName_primaryOrientation), meth_QScreen_primaryOrientation, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_primaryOrientation)},
    {SIP_MLNAME_CAST(sipName_refreshRate), meth_QScreen_refreshRate, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_refreshRate)},
    {SIP_MLNAME_CAST(sipName_serialNumber), meth_QScreen_serialNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_serialNumber)},
    {SIP_MLNAME_CAST(sipName_setOrientationUpdateMask), meth_QScreen_setOrientationUpdateMask, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_setOrientationUpdateMask)},
    {SIP_MLNAME_CAST(sipName_size), meth_QScreen_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_size)},
    {SIP_MLNAME_CAST(sipName_transformBetween), meth_QScreen_transformBetween, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_transformBetween)},
    {SIP_MLNAME_CAST(sipName_virtualGeometry), meth_QScreen_virtualGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_virtualGeometry)},
    {SIP_MLNAME_CAST(sipName_virtualSiblings), meth_QScreen_virtualSiblings, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_virtualSiblings)},
    {SIP_MLNAME_CAST(sipName_virtualSize), meth_QScreen_virtualSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_virtualSize)}
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QScreen[] = {
    {"availableGeometryChanged(QRect)", "\1availableGeometryChanged(self, QRect)", SIP_NULLPTR, SIP_NULLPTR},
    {"virtualGeometryChanged(QRect)", "\1virtualGeometryChanged(self, QRect)", SIP_NULLPTR, SIP_NULLPTR},
    {"physicalSizeChanged(QSizeF)", "\1physicalSizeChanged(self, QSizeF)", SIP_NULLPTR, SIP_NULLPTR},
    {"refreshRateChanged(qreal)", "\1refreshRateChanged(self, float)", SIP_NULLPTR, SIP_NULLPTR},
    {"orientationChanged(Qt::ScreenOrientation)", "\1orientationChanged(self, Qt.ScreenOrientation)", SIP_NULLPTR, SIP_NULLPTR},
    {"primaryOrientationChanged(Qt::ScreenOrientation)", "\1primaryOrientationChanged(self, Qt.ScreenOrientation)", SIP_NULLPTR, SIP_NULLPTR},
    {"logicalDotsPerInchChanged(qreal)", "\1logicalDotsPerInchChanged(self, float)", SIP_NULLPTR, SIP_NULLPTR},
    {"physicalDotsPerInchChanged(qreal)", "\1physicalDotsPerInchChanged(self, float)", SIP_NULLPTR, SIP_NULLPTR},
    {"geometryChanged(QRect)", "\1geometryChanged(self, QRect)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QScreen = {
    & ::QScreen::staticMetaObject,
    0,
    signals_QScreen,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QScreen = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QScreen,
        {SIP_NULLPTR},
        &plugin_QScreen
    },
    {
        sipNameNr_QScreen,
        {0, 0, 1},
        34, methods_QScreen,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_QScreen,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QScreen,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QScreen,
    cast_QScreen,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 34 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qrgba64.sip"
#include <qrgba64.h>
#line 64439 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"



PyDoc_STRVAR(doc_QRgba64_fromRgba64, "fromRgba64(int) -> QRgba64\n"
"fromRgba64(int, int, int, int) -> QRgba64");

extern "C" {static PyObject *meth_QRgba64_fromRgba64(PyObject *, PyObject *);}
static PyObject *meth_QRgba64_fromRgba64(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::quint64 a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "o", &a0))
        {
             ::QRgba64*sipRes;

            sipRes = new  ::QRgba64( ::QRgba64::fromRgba64(a0));

            return sipConvertFromNewType(sipRes,sipType_QRgba64,SIP_NULLPTR);
        }
    }

    {
         ::quint16 a0;
         ::quint16 a1;
         ::quint16 a2;
         ::quint16 a3;

        if (sipParseArgs(&sipParseErr, sipArgs, "tttt", &a0, &a1, &a2, &a3))
        {
             ::QRgba64*sipRes;

            sipRes = new  ::QRgba64( ::QRgba64::fromRgba64(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QRgba64,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRgba64, sipName_fromRgba64, doc_QRgba64_fromRgba64);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRgba64_fromRgba, "fromRgba(int, int, int, int) -> QRgba64");

extern "C" {static PyObject *meth_QRgba64_fromRgba(PyObject *, PyObject *);}
static PyObject *meth_QRgba64_fromRgba(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::quint8 a0;
         ::quint8 a1;
         ::quint8 a2;
         ::quint8 a3;

        if (sipParseArgs(&sipParseErr, sipArgs, "MMMM", &a0, &a1, &a2, &a3))
        {
             ::QRgba64*sipRes;

            sipRes = new  ::QRgba64( ::QRgba64::fromRgba(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QRgba64,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRgba64, sipName_fromRgba, doc_QRgba64_fromRgba);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRgba64_fromArgb32, "fromArgb32(int) -> QRgba64");

extern "C" {static PyObject *meth_QRgba64_fromArgb32(PyObject *, PyObject *);}
static PyObject *meth_QRgba64_fromArgb32(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::uint a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "u", &a0))
        {
             ::QRgba64*sipRes;

            sipRes = new  ::QRgba64( ::QRgba64::fromArgb32(a0));

            return sipConvertFromNewType(sipRes,sipType_QRgba64,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRgba64, sipName_fromArgb32, doc_QRgba64_fromArgb32);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRgba64_isOpaque, "isOpaque(self) -> bool");

extern "C" {static PyObject *meth_QRgba64_isOpaque(PyObject *, PyObject *);}
static PyObject *meth_QRgba64_isOpaque(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRgba64 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRgba64, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isOpaque();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRgba64, sipName_isOpaque, doc_QRgba64_isOpaque);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRgba64_isTransparent, "isTransparent(self) -> bool");

extern "C" {static PyObject *meth_QRgba64_isTransparent(PyObject *, PyObject *);}
static PyObject *meth_QRgba64_isTransparent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRgba64 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRgba64, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isTransparent();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRgba64, sipName_isTransparent, doc_QRgba64_isTransparent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRgba64_red, "red(self) -> int");

extern "C" {static PyObject *meth_QRgba64_red(PyObject *, PyObject *);}
static PyObject *meth_QRgba64_red(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRgba64 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRgba64, &sipCpp))
        {
             ::quint16 sipRes;

            sipRes = sipCpp->red();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRgba64, sipName_red, doc_QRgba64_red);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRgba64_green, "green(self) -> int");

extern "C" {static PyObject *meth_QRgba64_green(PyObject *, PyObject *);}
static PyObject *meth_QRgba64_green(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRgba64 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRgba64, &sipCpp))
        {
             ::quint16 sipRes;

            sipRes = sipCpp->green();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRgba64, sipName_green, doc_QRgba64_green);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRgba64_blue, "blue(self) -> int");

extern "C" {static PyObject *meth_QRgba64_blue(PyObject *, PyObject *);}
static PyObject *meth_QRgba64_blue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRgba64 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRgba64, &sipCpp))
        {
             ::quint16 sipRes;

            sipRes = sipCpp->blue();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRgba64, sipName_blue, doc_QRgba64_blue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRgba64_alpha, "alpha(self) -> int");

extern "C" {static PyObject *meth_QRgba64_alpha(PyObject *, PyObject *);}
static PyObject *meth_QRgba64_alpha(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRgba64 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRgba64, &sipCpp))
        {
             ::quint16 sipRes;

            sipRes = sipCpp->alpha();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRgba64, sipName_alpha, doc_QRgba64_alpha);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRgba64_setRed, "setRed(self, int)");

extern "C" {static PyObject *meth_QRgba64_setRed(PyObject *, PyObject *);}
static PyObject *meth_QRgba64_setRed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::quint16 a0;
         ::QRgba64 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bt", &sipSelf, sipType_QRgba64, &sipCpp, &a0))
        {
            sipCpp->setRed(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRgba64, sipName_setRed, doc_QRgba64_setRed);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRgba64_setGreen, "setGreen(self, int)");

extern "C" {static PyObject *meth_QRgba64_setGreen(PyObject *, PyObject *);}
static PyObject *meth_QRgba64_setGreen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::quint16 a0;
         ::QRgba64 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bt", &sipSelf, sipType_QRgba64, &sipCpp, &a0))
        {
            sipCpp->setGreen(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRgba64, sipName_setGreen, doc_QRgba64_setGreen);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRgba64_setBlue, "setBlue(self, int)");

extern "C" {static PyObject *meth_QRgba64_setBlue(PyObject *, PyObject *);}
static PyObject *meth_QRgba64_setBlue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::quint16 a0;
         ::QRgba64 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bt", &sipSelf, sipType_QRgba64, &sipCpp, &a0))
        {
            sipCpp->setBlue(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRgba64, sipName_setBlue, doc_QRgba64_setBlue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRgba64_setAlpha, "setAlpha(self, int)");

extern "C" {static PyObject *meth_QRgba64_setAlpha(PyObject *, PyObject *);}
static PyObject *meth_QRgba64_setAlpha(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::quint16 a0;
         ::QRgba64 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bt", &sipSelf, sipType_QRgba64, &sipCpp, &a0))
        {
            sipCpp->setAlpha(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRgba64, sipName_setAlpha, doc_QRgba64_setAlpha);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRgba64_red8, "red8(self) -> int");

extern "C" {static PyObject *meth_QRgba64_red8(PyObject *, PyObject *);}
static PyObject *meth_QRgba64_red8(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRgba64 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRgba64, &sipCpp))
        {
             ::quint8 sipRes;

            sipRes = sipCpp->red8();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRgba64, sipName_red8, doc_QRgba64_red8);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRgba64_green8, "green8(self) -> int");

extern "C" {static PyObject *meth_QRgba64_green8(PyObject *, PyObject *);}
static PyObject *meth_QRgba64_green8(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRgba64 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRgba64, &sipCpp))
        {
             ::quint8 sipRes;

            sipRes = sipCpp->green8();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRgba64, sipName_green8, doc_QRgba64_green8);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRgba64_blue8, "blue8(self) -> int");

extern "C" {static PyObject *meth_QRgba64_blue8(PyObject *, PyObject *);}
static PyObject *meth_QRgba64_blue8(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRgba64 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRgba64, &sipCpp))
        {
             ::quint8 sipRes;

            sipRes = sipCpp->blue8();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRgba64, sipName_blue8, doc_QRgba64_blue8);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRgba64_alpha8, "alpha8(self) -> int");

extern "C" {static PyObject *meth_QRgba64_alpha8(PyObject *, PyObject *);}
static PyObject *meth_QRgba64_alpha8(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRgba64 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRgba64, &sipCpp))
        {
             ::quint8 sipRes;

            sipRes = sipCpp->alpha8();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRgba64, sipName_alpha8, doc_QRgba64_alpha8);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRgba64_toArgb32, "toArgb32(self) -> int");

extern "C" {static PyObject *meth_QRgba64_toArgb32(PyObject *, PyObject *);}
static PyObject *meth_QRgba64_toArgb32(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRgba64 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRgba64, &sipCpp))
        {
             ::uint sipRes;

            sipRes = sipCpp->toArgb32();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRgba64, sipName_toArgb32, doc_QRgba64_toArgb32);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRgba64_toRgb16, "toRgb16(self) -> int");

extern "C" {static PyObject *meth_QRgba64_toRgb16(PyObject *, PyObject *);}
static PyObject *meth_QRgba64_toRgb16(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRgba64 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRgba64, &sipCpp))
        {
             ::ushort sipRes;

            sipRes = sipCpp->toRgb16();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRgba64, sipName_toRgb16, doc_QRgba64_toRgb16);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRgba64_premultiplied, "premultiplied(self) -> QRgba64");

extern "C" {static PyObject *meth_QRgba64_premultiplied(PyObject *, PyObject *);}
static PyObject *meth_QRgba64_premultiplied(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRgba64 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRgba64, &sipCpp))
        {
             ::QRgba64*sipRes;

            sipRes = new  ::QRgba64(sipCpp->premultiplied());

            return sipConvertFromNewType(sipRes,sipType_QRgba64,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRgba64, sipName_premultiplied, doc_QRgba64_premultiplied);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRgba64_unpremultiplied, "unpremultiplied(self) -> QRgba64");

extern "C" {static PyObject *meth_QRgba64_unpremultiplied(PyObject *, PyObject *);}
static PyObject *meth_QRgba64_unpremultiplied(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRgba64 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRgba64, &sipCpp))
        {
             ::QRgba64*sipRes;

            sipRes = new  ::QRgba64(sipCpp->unpremultiplied());

            return sipConvertFromNewType(sipRes,sipType_QRgba64,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRgba64, sipName_unpremultiplied, doc_QRgba64_unpremultiplied);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QRgba64___long__(PyObject *);}
static PyObject *slot_QRgba64___long__(PyObject *sipSelf)
{
     ::QRgba64 *sipCpp = reinterpret_cast< ::QRgba64 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRgba64));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::quint64 sipRes;

            sipRes = *sipCpp;

            return PyLong_FromUnsignedLongLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QRgba64(void *, int);}
static void release_QRgba64(void *sipCppV, int)
{
    delete reinterpret_cast< ::QRgba64 *>(sipCppV);
}


extern "C" {static void assign_QRgba64(void *, SIP_SSIZE_T, void *);}
static void assign_QRgba64(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QRgba64 *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QRgba64 *>(sipSrc);
}


extern "C" {static void *array_QRgba64(SIP_SSIZE_T);}
static void *array_QRgba64(SIP_SSIZE_T sipNrElem)
{
    return new  ::QRgba64[sipNrElem];
}


extern "C" {static void *copy_QRgba64(const void *, SIP_SSIZE_T);}
static void *copy_QRgba64(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QRgba64(reinterpret_cast<const  ::QRgba64 *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QRgba64(sipSimpleWrapper *);}
static void dealloc_QRgba64(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QRgba64(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QRgba64(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QRgba64(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QRgba64 *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QRgba64();

            return sipCpp;
        }
    }

    {
        const  ::QRgba64* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QRgba64, &a0))
        {
            sipCpp = new  ::QRgba64(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QRgba64[] = {
#if PY_MAJOR_VERSION < 3
    {(void *)slot_QRgba64___long__, long_slot},
#else
    {(void *)slot_QRgba64___long__, int_slot},
#endif
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QRgba64[] = {
    {SIP_MLNAME_CAST(sipName_alpha), meth_QRgba64_alpha, METH_VARARGS, SIP_MLDOC_CAST(doc_QRgba64_alpha)},
    {SIP_MLNAME_CAST(sipName_alpha8), meth_QRgba64_alpha8, METH_VARARGS, SIP_MLDOC_CAST(doc_QRgba64_alpha8)},
    {SIP_MLNAME_CAST(sipName_blue), meth_QRgba64_blue, METH_VARARGS, SIP_MLDOC_CAST(doc_QRgba64_blue)},
    {SIP_MLNAME_CAST(sipName_blue8), meth_QRgba64_blue8, METH_VARARGS, SIP_MLDOC_CAST(doc_QRgba64_blue8)},
    {SIP_MLNAME_CAST(sipName_fromArgb32), meth_QRgba64_fromArgb32, METH_VARARGS, SIP_MLDOC_CAST(doc_QRgba64_fromArgb32)},
    {SIP_MLNAME_CAST(sipName_fromRgba), meth_QRgba64_fromRgba, METH_VARARGS, SIP_MLDOC_CAST(doc_QRgba64_fromRgba)},
    {SIP_MLNAME_CAST(sipName_fromRgba64), meth_QRgba64_fromRgba64, METH_VARARGS, SIP_MLDOC_CAST(doc_QRgba64_fromRgba64)},
    {SIP_MLNAME_CAST(sipName_green), meth_QRgba64_green, METH_VARARGS, SIP_MLDOC_CAST(doc_QRgba64_green)},
    {SIP_MLNAME_CAST(sipName_green8), meth_QRgba64_green8, METH_VARARGS, SIP_MLDOC_CAST(doc_QRgba64_green8)},
    {SIP_MLNAME_CAST(sipName_isOpaque), meth_QRgba64_isOpaque, METH_VARARGS, SIP_MLDOC_CAST(doc_QRgba64_isOpaque)},
    {SIP_MLNAME_CAST(sipName_isTransparent), meth_QRgba64_isTransparent, METH_VARARGS, SIP_MLDOC_CAST(doc_QRgba64_isTransparent)},
    {SIP_MLNAME_CAST(sipName_premultiplied), meth_QRgba64_premultiplied, METH_VARARGS, SIP_MLDOC_CAST(doc_QRgba64_premultiplied)},
    {SIP_MLNAME_CAST(sipName_red), meth_QRgba64_red, METH_VARARGS, SIP_MLDOC_CAST(doc_QRgba64_red)},
    {SIP_MLNAME_CAST(sipName_red8), meth_QRgba64_red8, METH_VARARGS, SIP_MLDOC_CAST(doc_QRgba64_red8)},
    {SIP_MLNAME_CAST(sipName_setAlpha), meth_QRgba64_setAlpha, METH_VARARGS, SIP_MLDOC_CAST(doc_QRgba64_setAlpha)},
    {SIP_MLNAME_CAST(sipName_setBlue), meth_QRgba64_setBlue, METH_VARARGS, SIP_MLDOC_CAST(doc_QRgba64_setBlue)},
    {SIP_MLNAME_CAST(sipName_setGreen), meth_QRgba64_setGreen, METH_VARARGS, SIP_MLDOC_CAST(doc_QRgba64_setGreen)},
    {SIP_MLNAME_CAST(sipName_setRed), meth_QRgba64_setRed, METH_VARARGS, SIP_MLDOC_CAST(doc_QRgba64_setRed)},
    {SIP_MLNAME_CAST(sipName_toArgb32), meth_QRgba64_toArgb32, METH_VARARGS, SIP_MLDOC_CAST(doc_QRgba64_toArgb32)},
    {SIP_MLNAME_CAST(sipName_toRgb16), meth_QRgba64_toRgb16, METH_VARARGS, SIP_MLDOC_CAST(doc_QRgba64_toRgb16)},
    {SIP_MLNAME_CAST(sipName_unpremultiplied), meth_QRgba64_unpremultiplied, METH_VARARGS, SIP_MLDOC_CAST(doc_QRgba64_unpremultiplied)}
};

PyDoc_STRVAR(doc_QRgba64, "\1QRgba64()\n"
"QRgba64(QRgba64)");


static pyqt5ClassPluginDef plugin_QRgba64 = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QRgba64 = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QRgba64,
        {SIP_NULLPTR},
        &plugin_QRgba64
    },
    {
        sipNameNr_QRgba64,
        {0, 0, 1},
        21, methods_QRgba64,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QRgba64,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QRgba64,
    init_type_QRgba64,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QRgba64,
    assign_QRgba64,
    array_QRgba64,
    copy_QRgba64,
    release_QRgba64,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 65279 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 65283 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 65286 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 65289 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 65292 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 65295 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 65298 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 65301 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 65304 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QRegion_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QRegion_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QRegion_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegion, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegion, sipName_isEmpty, doc_QRegion_isEmpty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegion_contains, "contains(self, QPoint) -> bool\n"
"contains(self, QRect) -> bool");

extern "C" {static PyObject *meth_QRegion_contains(PyObject *, PyObject *);}
static PyObject *meth_QRegion_contains(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
        const  ::QRegion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRegion, &sipCpp, sipType_QPoint, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->contains(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QRect* a0;
        const  ::QRegion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRegion, &sipCpp, sipType_QRect, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->contains(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegion, sipName_contains, doc_QRegion_contains);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegion_translate, "translate(self, int, int)\n"
"translate(self, QPoint)");

extern "C" {static PyObject *meth_QRegion_translate(PyObject *, PyObject *);}
static PyObject *meth_QRegion_translate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QRegion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QRegion, &sipCpp, &a0, &a1))
        {
            sipCpp->translate(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPoint* a0;
         ::QRegion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRegion, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->translate(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegion, sipName_translate, doc_QRegion_translate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegion_translated, "translated(self, int, int) -> QRegion\n"
"translated(self, QPoint) -> QRegion");

extern "C" {static PyObject *meth_QRegion_translated(PyObject *, PyObject *);}
static PyObject *meth_QRegion_translated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        const  ::QRegion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QRegion, &sipCpp, &a0, &a1))
        {
             ::QRegion*sipRes;

            sipRes = new  ::QRegion(sipCpp->translated(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QRegion,SIP_NULLPTR);
        }
    }

    {
        const  ::QPoint* a0;
        const  ::QRegion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRegion, &sipCpp, sipType_QPoint, &a0))
        {
             ::QRegion*sipRes;

            sipRes = new  ::QRegion(sipCpp->translated(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRegion,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegion, sipName_translated, doc_QRegion_translated);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegion_united, "united(self, QRegion) -> QRegion\n"
"united(self, QRect) -> QRegion");

extern "C" {static PyObject *meth_QRegion_united(PyObject *, PyObject *);}
static PyObject *meth_QRegion_united(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegion* a0;
        const  ::QRegion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRegion, &sipCpp, sipType_QRegion, &a0))
        {
             ::QRegion*sipRes;

            sipRes = new  ::QRegion(sipCpp->united(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRegion,SIP_NULLPTR);
        }
    }

    {
        const  ::QRect* a0;
        const  ::QRegion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRegion, &sipCpp, sipType_QRect, &a0))
        {
             ::QRegion*sipRes;

            sipRes = new  ::QRegion(sipCpp->united(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRegion,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegion, sipName_united, doc_QRegion_united);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegion_boundingRect, "boundingRect(self) -> QRect");

extern "C" {static PyObject *meth_QRegion_boundingRect(PyObject *, PyObject *);}
static PyObject *meth_QRegion_boundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegion, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->boundingRect());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegion, sipName_boundingRect, doc_QRegion_boundingRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegion_rects, "rects(self) -> List[QRect]");

extern "C" {static PyObject *meth_QRegion_rects(PyObject *, PyObject *);}
static PyObject *meth_QRegion_rects(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegion, &sipCpp))
        {
            QVector< ::QRect>*sipRes;

            sipRes = new QVector< ::QRect>(sipCpp->rects());

            return sipConvertFromNewType(sipRes,sipType_QVector_0100QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegion, sipName_rects, doc_QRegion_rects);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegion_setRects, "setRects(self, Iterable[QRect])");

extern "C" {static PyObject *meth_QRegion_setRects(PyObject *, PyObject *);}
static PyObject *meth_QRegion_setRects(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QVector< ::QRect>* a0;
        int a0State = 0;
         ::QRegion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QRegion, &sipCpp, sipType_QVector_0100QRect,&a0, &a0State))
        {
#line 82 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qregion.sip"
        if (a0->size())
            sipCpp->setRects(a0->data(), a0->size());
        else
            sipCpp->setRects(0, 0);
#line 65591 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
            sipReleaseType(const_cast<QVector< ::QRect> *>(a0),sipType_QVector_0100QRect,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegion, sipName_setRects, doc_QRegion_setRects);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegion_intersected, "intersected(self, QRegion) -> QRegion\n"
"intersected(self, QRect) -> QRegion");

extern "C" {static PyObject *meth_QRegion_intersected(PyObject *, PyObject *);}
static PyObject *meth_QRegion_intersected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegion* a0;
        const  ::QRegion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRegion, &sipCpp, sipType_QRegion, &a0))
        {
             ::QRegion*sipRes;

            sipRes = new  ::QRegion(sipCpp->intersected(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRegion,SIP_NULLPTR);
        }
    }

    {
        const  ::QRect* a0;
        const  ::QRegion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRegion, &sipCpp, sipType_QRect, &a0))
        {
             ::QRegion*sipRes;

            sipRes = new  ::QRegion(sipCpp->intersected(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRegion,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegion, sipName_intersected, doc_QRegion_intersected);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegion_subtracted, "subtracted(self, QRegion) -> QRegion");

extern "C" {static PyObject *meth_QRegion_subtracted(PyObject *, PyObject *);}
static PyObject *meth_QRegion_subtracted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegion* a0;
        const  ::QRegion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRegion, &sipCpp, sipType_QRegion, &a0))
        {
             ::QRegion*sipRes;

            sipRes = new  ::QRegion(sipCpp->subtracted(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRegion,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegion, sipName_subtracted, doc_QRegion_subtracted);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegion_xored, "xored(self, QRegion) -> QRegion");

extern "C" {static PyObject *meth_QRegion_xored(PyObject *, PyObject *);}
static PyObject *meth_QRegion_xored(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegion* a0;
        const  ::QRegion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRegion, &sipCpp, sipType_QRegion, &a0))
        {
             ::QRegion*sipRes;

            sipRes = new  ::QRegion(sipCpp->xored(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRegion,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegion, sipName_xored, doc_QRegion_xored);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegion_intersects, "intersects(self, QRegion) -> bool\n"
"intersects(self, QRect) -> bool");

extern "C" {static PyObject *meth_QRegion_intersects(PyObject *, PyObject *);}
static PyObject *meth_QRegion_intersects(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegion* a0;
        const  ::QRegion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRegion, &sipCpp, sipType_QRegion, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->intersects(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QRect* a0;
        const  ::QRegion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRegion, &sipCpp, sipType_QRect, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->intersects(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegion, sipName_intersects, doc_QRegion_intersects);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegion_rectCount, "rectCount(self) -> int");

extern "C" {static PyObject *meth_QRegion_rectCount(PyObject *, PyObject *);}
static PyObject *meth_QRegion_rectCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegion, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->rectCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegion, sipName_rectCount, doc_QRegion_rectCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegion_swap, "swap(self, QRegion)");

extern "C" {static PyObject *meth_QRegion_swap(PyObject *, PyObject *);}
static PyObject *meth_QRegion_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRegion* a0;
         ::QRegion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRegion, &sipCpp, sipType_QRegion, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegion, sipName_swap, doc_QRegion_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegion_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QRegion_isNull(PyObject *, PyObject *);}
static PyObject *meth_QRegion_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegion, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegion, sipName_isNull, doc_QRegion_isNull);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QRegion___mul__(PyObject *,PyObject *);}
static PyObject *slot_QRegion___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegion* a0;
        const  ::QTransform* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QRegion, &a0, sipType_QTransform, &a1))
        {
             ::QRegion*sipRes;

            sipRes = new  ::QRegion((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QRegion,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, mul_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QRegion___ne__(PyObject *,PyObject *);}
static PyObject *slot_QRegion___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QRegion *sipCpp = reinterpret_cast< ::QRegion *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRegion));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegion* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRegion, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QRegion::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QRegion, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QRegion___eq__(PyObject *,PyObject *);}
static PyObject *slot_QRegion___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QRegion *sipCpp = reinterpret_cast< ::QRegion *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRegion));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegion* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRegion, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QRegion::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QRegion, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QRegion___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QRegion___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QRegion)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QRegion *sipCpp = reinterpret_cast< ::QRegion *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRegion));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegion* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRegion, &a0))
        {
            sipCpp-> ::QRegion::operator^=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QRegion___isub__(PyObject *,PyObject *);}
static PyObject *slot_QRegion___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QRegion)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QRegion *sipCpp = reinterpret_cast< ::QRegion *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRegion));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegion* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRegion, &a0))
        {
            sipCpp-> ::QRegion::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QRegion___iand__(PyObject *,PyObject *);}
static PyObject *slot_QRegion___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QRegion)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QRegion *sipCpp = reinterpret_cast< ::QRegion *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRegion));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegion* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRegion, &a0))
        {
            sipCpp-> ::QRegion::operator&=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        const  ::QRect* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRect, &a0))
        {
            sipCpp-> ::QRegion::operator&=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QRegion___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QRegion___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QRegion)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QRegion *sipCpp = reinterpret_cast< ::QRegion *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRegion));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegion* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRegion, &a0))
        {
            sipCpp-> ::QRegion::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        const  ::QRect* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRect, &a0))
        {
            sipCpp-> ::QRegion::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QRegion___ior__(PyObject *,PyObject *);}
static PyObject *slot_QRegion___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QRegion)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QRegion *sipCpp = reinterpret_cast< ::QRegion *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRegion));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegion* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRegion, &a0))
        {
            sipCpp-> ::QRegion::operator|=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QRegion___xor__(PyObject *,PyObject *);}
static PyObject *slot_QRegion___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRegion* a0;
        const  ::QRegion* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QRegion, &a0, sipType_QRegion, &a1))
        {
             ::QRegion*sipRes;

            sipRes = new  ::QRegion((*a0 ^ *a1));

            return sipConvertFromNewType(sipRes,sipType_QRegion,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QRegion___sub__(PyObject *,PyObject *);}
static PyObject *slot_QRegion___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRegion* a0;
        const  ::QRegion* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QRegion, &a0, sipType_QRegion, &a1))
        {
             ::QRegion*sipRes;

            sipRes = new  ::QRegion((*a0 - *a1));

            return sipConvertFromNewType(sipRes,sipType_QRegion,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, sub_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QRegion___and__(PyObject *,PyObject *);}
static PyObject *slot_QRegion___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRegion* a0;
        const  ::QRegion* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QRegion, &a0, sipType_QRegion, &a1))
        {
             ::QRegion*sipRes;

            sipRes = new  ::QRegion((*a0 & *a1));

            return sipConvertFromNewType(sipRes,sipType_QRegion,SIP_NULLPTR);
        }
    }

    {
         ::QRegion* a0;
        const  ::QRect* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QRegion, &a0, sipType_QRect, &a1))
        {
             ::QRegion*sipRes;

            sipRes = new  ::QRegion((*a0 & *a1));

            return sipConvertFromNewType(sipRes,sipType_QRegion,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QRegion___add__(PyObject *,PyObject *);}
static PyObject *slot_QRegion___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRegion* a0;
        const  ::QRegion* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QRegion, &a0, sipType_QRegion, &a1))
        {
             ::QRegion*sipRes;

            sipRes = new  ::QRegion((*a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_QRegion,SIP_NULLPTR);
        }
    }

    {
         ::QRegion* a0;
        const  ::QRect* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QRegion, &a0, sipType_QRect, &a1))
        {
             ::QRegion*sipRes;

            sipRes = new  ::QRegion((*a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_QRegion,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, add_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QRegion___or__(PyObject *,PyObject *);}
static PyObject *slot_QRegion___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRegion* a0;
        const  ::QRegion* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QRegion, &a0, sipType_QRegion, &a1))
        {
             ::QRegion*sipRes;

            sipRes = new  ::QRegion((*a0 | *a1));

            return sipConvertFromNewType(sipRes,sipType_QRegion,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static int slot_QRegion___contains__(PyObject *,PyObject *);}
static int slot_QRegion___contains__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QRegion *sipCpp = reinterpret_cast< ::QRegion *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRegion));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPoint, &a0))
        {
            int sipRes = 0;

#line 60 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qregion.sip"
        sipRes = sipCpp->contains(*a0);
#line 66341 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipRes;
        }
    }

    {
        const  ::QRect* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRect, &a0))
        {
            int sipRes = 0;

#line 66 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qregion.sip"
        sipRes = sipCpp->contains(*a0);
#line 66356 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegion, sipName___contains__, SIP_NULLPTR);

    return -1;
}


extern "C" {static int slot_QRegion___bool__(PyObject *);}
static int slot_QRegion___bool__(PyObject *sipSelf)
{
     ::QRegion *sipCpp = reinterpret_cast< ::QRegion *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRegion));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 54 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qregion.sip"
        sipRes = !sipCpp->isEmpty();
#line 66384 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QRegion(void *, int);}
static void release_QRegion(void *sipCppV, int)
{
    delete reinterpret_cast< ::QRegion *>(sipCppV);
}


extern "C" {static void assign_QRegion(void *, SIP_SSIZE_T, void *);}
static void assign_QRegion(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QRegion *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QRegion *>(sipSrc);
}


extern "C" {static void *array_QRegion(SIP_SSIZE_T);}
static void *array_QRegion(SIP_SSIZE_T sipNrElem)
{
    return new  ::QRegion[sipNrElem];
}


extern "C" {static void *copy_QRegion(const void *, SIP_SSIZE_T);}
static void *copy_QRegion(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QRegion(reinterpret_cast<const  ::QRegion *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QRegion(sipSimpleWrapper *);}
static void dealloc_QRegion(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QRegion(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QRegion(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QRegion(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QRegion *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QRegion();

            return sipCpp;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
         ::QRegion::RegionType a4 = QRegion::Rectangle;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "iiii|E", &a0, &a1, &a2, &a3, sipType_QRegion_RegionType, &a4))
        {
            sipCpp = new  ::QRegion(a0,a1,a2,a3,a4);

            return sipCpp;
        }
    }

    {
        const  ::QRect* a0;
         ::QRegion::RegionType a1 = QRegion::Rectangle;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|E", sipType_QRect, &a0, sipType_QRegion_RegionType, &a1))
        {
            sipCpp = new  ::QRegion(*a0,a1);

            return sipCpp;
        }
    }

    {
        const  ::QPolygon* a0;
         ::Qt::FillRule a1 = Qt::OddEvenFill;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_fillRule,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|E", sipType_QPolygon, &a0, sipType_Qt_FillRule, &a1))
        {
            sipCpp = new  ::QRegion(*a0,a1);

            return sipCpp;
        }
    }

    {
        const  ::QBitmap* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QBitmap, &a0))
        {
            sipCpp = new  ::QRegion(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QRegion* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QRegion, &a0))
        {
            sipCpp = new  ::QRegion(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QVariant* a0;
        PyObject *a0Wrapper;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "@J1", &a0Wrapper, sipType_QVariant, &a0, &a0State))
        {
            sipErrorState sipError = sipErrorNone;

#line 44 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qregion.sip"
        if (a0->canConvert<QRegion>())
            sipCpp = new QRegion(a0->value<QRegion>());
        else
            sipError = sipBadCallableArg(0, a0Wrapper);
#line 66540 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            if (sipError == sipErrorNone)
                return sipCpp;

            if (sipUnused)
            {
                Py_XDECREF(*sipUnused);
            }

            sipAddException(sipError, sipParseErr);

            if (sipError == sipErrorFail)
                return SIP_NULLPTR;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QRegion[] = {
    {(void *)slot_QRegion___mul__, mul_slot},
    {(void *)slot_QRegion___ne__, ne_slot},
    {(void *)slot_QRegion___eq__, eq_slot},
    {(void *)slot_QRegion___ixor__, ixor_slot},
    {(void *)slot_QRegion___isub__, isub_slot},
    {(void *)slot_QRegion___iand__, iand_slot},
    {(void *)slot_QRegion___iadd__, iadd_slot},
    {(void *)slot_QRegion___ior__, ior_slot},
    {(void *)slot_QRegion___xor__, xor_slot},
    {(void *)slot_QRegion___sub__, sub_slot},
    {(void *)slot_QRegion___and__, and_slot},
    {(void *)slot_QRegion___add__, add_slot},
    {(void *)slot_QRegion___or__, or_slot},
    {(void *)slot_QRegion___contains__, contains_slot},
    {(void *)slot_QRegion___bool__, bool_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QRegion[] = {
    {SIP_MLNAME_CAST(sipName_boundingRect), meth_QRegion_boundingRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegion_boundingRect)},
    {SIP_MLNAME_CAST(sipName_contains), meth_QRegion_contains, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegion_contains)},
    {SIP_MLNAME_CAST(sipName_intersected), meth_QRegion_intersected, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegion_intersected)},
    {SIP_MLNAME_CAST(sipName_intersects), meth_QRegion_intersects, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegion_intersects)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QRegion_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegion_isEmpty)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QRegion_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegion_isNull)},
    {SIP_MLNAME_CAST(sipName_rectCount), meth_QRegion_rectCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegion_rectCount)},
    {SIP_MLNAME_CAST(sipName_rects), meth_QRegion_rects, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegion_rects)},
    {SIP_MLNAME_CAST(sipName_setRects), meth_QRegion_setRects, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegion_setRects)},
    {SIP_MLNAME_CAST(sipName_subtracted), meth_QRegion_subtracted, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegion_subtracted)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QRegion_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegion_swap)},
    {SIP_MLNAME_CAST(sipName_translate), meth_QRegion_translate, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegion_translate)},
    {SIP_MLNAME_CAST(sipName_translated), meth_QRegion_translated, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegion_translated)},
    {SIP_MLNAME_CAST(sipName_united), meth_QRegion_united, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegion_united)},
    {SIP_MLNAME_CAST(sipName_xored), meth_QRegion_xored, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegion_xored)}
};

static sipEnumMemberDef enummembers_QRegion[] = {
    {sipName_Ellipse, static_cast<int>( ::QRegion::Ellipse), 248},
    {sipName_Rectangle, static_cast<int>( ::QRegion::Rectangle), 248},
};

PyDoc_STRVAR(doc_QRegion, "\1QRegion()\n"
"QRegion(int, int, int, int, type: QRegion.RegionType = QRegion.Rectangle)\n"
"QRegion(QRect, type: QRegion.RegionType = QRegion.Rectangle)\n"
"QRegion(QPolygon, fillRule: Qt.FillRule = Qt.OddEvenFill)\n"
"QRegion(QBitmap)\n"
"QRegion(QRegion)\n"
"QRegion(Any)");


static pyqt5ClassPluginDef plugin_QRegion = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QRegion = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QRegion,
        {SIP_NULLPTR},
        &plugin_QRegion
    },
    {
        sipNameNr_QRegion,
        {0, 0, 1},
        15, methods_QRegion,
        2, enummembers_QRegion,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QRegion,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QRegion,
    init_type_QRegion,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QRegion,
    assign_QRegion,
    array_QRegion,
    copy_QRegion,
    release_QRegion,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qrawfont.sip"
#include <qrawfont.h>
#line 66681 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qrawfont.sip"
#include <qrawfont.h>
#line 66685 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static long slot_QRawFont_LayoutFlags___hash__(PyObject *);}
static long slot_QRawFont_LayoutFlags___hash__(PyObject *sipSelf)
{
     ::QRawFont::LayoutFlags *sipCpp = reinterpret_cast< ::QRawFont::LayoutFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRawFont_LayoutFlags));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QRawFont::LayoutFlags::Int();
#line 66703 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QRawFont_LayoutFlags___bool__(PyObject *);}
static int slot_QRawFont_LayoutFlags___bool__(PyObject *sipSelf)
{
     ::QRawFont::LayoutFlags *sipCpp = reinterpret_cast< ::QRawFont::LayoutFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRawFont_LayoutFlags));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QRawFont::LayoutFlags::Int() != 0);
#line 66728 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QRawFont_LayoutFlags___ne__(PyObject *,PyObject *);}
static PyObject *slot_QRawFont_LayoutFlags___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QRawFont::LayoutFlags *sipCpp = reinterpret_cast< ::QRawFont::LayoutFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRawFont_LayoutFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont::LayoutFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QRawFont_LayoutFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QRawFont::LayoutFlags::Int() != a0->operator QRawFont::LayoutFlags::Int());
#line 66758 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
            sipReleaseType(const_cast< ::QRawFont::LayoutFlags *>(a0),sipType_QRawFont_LayoutFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QRawFont_LayoutFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QRawFont_LayoutFlags___eq__(PyObject *,PyObject *);}
static PyObject *slot_QRawFont_LayoutFlags___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QRawFont::LayoutFlags *sipCpp = reinterpret_cast< ::QRawFont::LayoutFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRawFont_LayoutFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont::LayoutFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QRawFont_LayoutFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QRawFont::LayoutFlags::Int() == a0->operator QRawFont::LayoutFlags::Int());
#line 66794 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
            sipReleaseType(const_cast< ::QRawFont::LayoutFlags *>(a0),sipType_QRawFont_LayoutFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QRawFont_LayoutFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QRawFont_LayoutFlags___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QRawFont_LayoutFlags___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QRawFont_LayoutFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QRawFont::LayoutFlags *sipCpp = reinterpret_cast< ::QRawFont::LayoutFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRawFont_LayoutFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QRawFont::LayoutFlags(*sipCpp ^ a0);
#line 66833 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QRawFont_LayoutFlags___xor__(PyObject *,PyObject *);}
static PyObject *slot_QRawFont_LayoutFlags___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRawFont::LayoutFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QRawFont_LayoutFlags, &a0, &a0State, &a1))
        {
             ::QRawFont::LayoutFlags*sipRes;

            sipRes = new  ::QRawFont::LayoutFlags((*a0 ^ a1));
            sipReleaseType(a0,sipType_QRawFont_LayoutFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QRawFont_LayoutFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QRawFont_LayoutFlags___ior__(PyObject *,PyObject *);}
static PyObject *slot_QRawFont_LayoutFlags___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QRawFont_LayoutFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QRawFont::LayoutFlags *sipCpp = reinterpret_cast< ::QRawFont::LayoutFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRawFont_LayoutFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QRawFont::LayoutFlags(*sipCpp | a0);
#line 66905 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QRawFont_LayoutFlags___or__(PyObject *,PyObject *);}
static PyObject *slot_QRawFont_LayoutFlags___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRawFont::LayoutFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QRawFont_LayoutFlags, &a0, &a0State, &a1))
        {
             ::QRawFont::LayoutFlags*sipRes;

            sipRes = new  ::QRawFont::LayoutFlags((*a0 | a1));
            sipReleaseType(a0,sipType_QRawFont_LayoutFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QRawFont_LayoutFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QRawFont_LayoutFlags___iand__(PyObject *,PyObject *);}
static PyObject *slot_QRawFont_LayoutFlags___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QRawFont_LayoutFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QRawFont::LayoutFlags *sipCpp = reinterpret_cast< ::QRawFont::LayoutFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRawFont_LayoutFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QRawFont::LayoutFlags::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QRawFont_LayoutFlags___and__(PyObject *,PyObject *);}
static PyObject *slot_QRawFont_LayoutFlags___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRawFont::LayoutFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QRawFont_LayoutFlags, &a0, &a0State, &a1))
        {
             ::QRawFont::LayoutFlags*sipRes;

            sipRes = new  ::QRawFont::LayoutFlags((*a0 & a1));
            sipReleaseType(a0,sipType_QRawFont_LayoutFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QRawFont_LayoutFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QRawFont_LayoutFlags___invert__(PyObject *);}
static PyObject *slot_QRawFont_LayoutFlags___invert__(PyObject *sipSelf)
{
     ::QRawFont::LayoutFlags *sipCpp = reinterpret_cast< ::QRawFont::LayoutFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRawFont_LayoutFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QRawFont::LayoutFlags*sipRes;

            sipRes = new  ::QRawFont::LayoutFlags(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QRawFont_LayoutFlags,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QRawFont_LayoutFlags___int__(PyObject *);}
static PyObject *slot_QRawFont_LayoutFlags___int__(PyObject *sipSelf)
{
     ::QRawFont::LayoutFlags *sipCpp = reinterpret_cast< ::QRawFont::LayoutFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRawFont_LayoutFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QRawFont_LayoutFlags(void *, int);}
static void release_QRawFont_LayoutFlags(void *sipCppV, int)
{
    delete reinterpret_cast< ::QRawFont::LayoutFlags *>(sipCppV);
}


extern "C" {static void assign_QRawFont_LayoutFlags(void *, SIP_SSIZE_T, void *);}
static void assign_QRawFont_LayoutFlags(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QRawFont::LayoutFlags *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QRawFont::LayoutFlags *>(sipSrc);
}


extern "C" {static void *array_QRawFont_LayoutFlags(SIP_SSIZE_T);}
static void *array_QRawFont_LayoutFlags(SIP_SSIZE_T sipNrElem)
{
    return new  ::QRawFont::LayoutFlags[sipNrElem];
}


extern "C" {static void *copy_QRawFont_LayoutFlags(const void *, SIP_SSIZE_T);}
static void *copy_QRawFont_LayoutFlags(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QRawFont::LayoutFlags(reinterpret_cast<const  ::QRawFont::LayoutFlags *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QRawFont_LayoutFlags(sipSimpleWrapper *);}
static void dealloc_QRawFont_LayoutFlags(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QRawFont_LayoutFlags(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QRawFont_LayoutFlags(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QRawFont_LayoutFlags(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QRawFont::LayoutFlags *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QRawFont::LayoutFlags();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QRawFont::LayoutFlags(a0);

            return sipCpp;
        }
    }

    {
        const  ::QRawFont::LayoutFlags* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QRawFont_LayoutFlags, &a0, &a0State))
        {
            sipCpp = new  ::QRawFont::LayoutFlags(*a0);
            sipReleaseType(const_cast< ::QRawFont::LayoutFlags *>(a0),sipType_QRawFont_LayoutFlags,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QRawFont_LayoutFlags(PyObject *, void **, int *, PyObject *);}
static int convertTo_QRawFont_LayoutFlags(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QRawFont::LayoutFlags **sipCppPtr = reinterpret_cast< ::QRawFont::LayoutFlags **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QRawFont::LayoutFlags is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QRawFont_LayoutFlag)) ||
            sipCanConvertToType(sipPy, sipType_QRawFont_LayoutFlags, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QRawFont_LayoutFlag)))
{
    *sipCppPtr = new QRawFont::LayoutFlags(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QRawFont::LayoutFlags *>(sipConvertToType(sipPy, sipType_QRawFont_LayoutFlags, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 67173 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QRawFont_LayoutFlags[] = {
    {(void *)slot_QRawFont_LayoutFlags___hash__, hash_slot},
    {(void *)slot_QRawFont_LayoutFlags___bool__, bool_slot},
    {(void *)slot_QRawFont_LayoutFlags___ne__, ne_slot},
    {(void *)slot_QRawFont_LayoutFlags___eq__, eq_slot},
    {(void *)slot_QRawFont_LayoutFlags___ixor__, ixor_slot},
    {(void *)slot_QRawFont_LayoutFlags___xor__, xor_slot},
    {(void *)slot_QRawFont_LayoutFlags___ior__, ior_slot},
    {(void *)slot_QRawFont_LayoutFlags___or__, or_slot},
    {(void *)slot_QRawFont_LayoutFlags___iand__, iand_slot},
    {(void *)slot_QRawFont_LayoutFlags___and__, and_slot},
    {(void *)slot_QRawFont_LayoutFlags___invert__, invert_slot},
    {(void *)slot_QRawFont_LayoutFlags___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QRawFont_LayoutFlags, "\1QRawFont.LayoutFlags()\n"
"QRawFont.LayoutFlags(Union[QRawFont.LayoutFlags, QRawFont.LayoutFlag])\n"
"QRawFont.LayoutFlags(QRawFont.LayoutFlags)");


static pyqt5ClassPluginDef plugin_QRawFont_LayoutFlags = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QRawFont_LayoutFlags = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QRawFont__LayoutFlags,
        {SIP_NULLPTR},
        &plugin_QRawFont_LayoutFlags
    },
    {
        sipNameNr_LayoutFlags,
        {242, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QRawFont_LayoutFlags,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QRawFont_LayoutFlags,
    init_type_QRawFont_LayoutFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QRawFont_LayoutFlags,
    assign_QRawFont_LayoutFlags,
    array_QRawFont_LayoutFlags,
    copy_QRawFont_LayoutFlags,
    release_QRawFont_LayoutFlags,
    SIP_NULLPTR,
    convertTo_QRawFont_LayoutFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qrawfont.sip"
#include <qrawfont.h>
#line 67261 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 67265 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 67268 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 67271 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 67274 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qfontdatabase.sip"
#include <qfontdatabase.h>
#line 67277 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpygui_qlist.sip"
#include <qfontdatabase.h>
#line 67280 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "sip/QtCore/qchar.sip"
#include <qchar.h>
#line 67283 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 67286 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qimage.sip"
#include <qimage.h>
#line 67289 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 67292 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 67295 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 67298 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpygui_qvector.sip"
#include <qvector.h>
#line 67301 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qrawfont.sip"
#include <qrawfont.h>
#line 67304 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QRawFont_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QRawFont_isValid(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRawFont, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_isValid, doc_QRawFont_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_familyName, "familyName(self) -> str");

extern "C" {static PyObject *meth_QRawFont_familyName(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_familyName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRawFont, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->familyName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_familyName, doc_QRawFont_familyName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_styleName, "styleName(self) -> str");

extern "C" {static PyObject *meth_QRawFont_styleName(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_styleName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRawFont, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->styleName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_styleName, doc_QRawFont_styleName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_style, "style(self) -> QFont.Style");

extern "C" {static PyObject *meth_QRawFont_style(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_style(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRawFont, &sipCpp))
        {
             ::QFont::Style sipRes;

            sipRes = sipCpp->style();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QFont_Style);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_style, doc_QRawFont_style);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_weight, "weight(self) -> int");

extern "C" {static PyObject *meth_QRawFont_weight(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_weight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRawFont, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->weight();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_weight, doc_QRawFont_weight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_glyphIndexesForString, "glyphIndexesForString(self, str) -> List[int]");

extern "C" {static PyObject *meth_QRawFont_glyphIndexesForString(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_glyphIndexesForString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QRawFont, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QVector<uint>*sipRes;

            sipRes = new  ::QVector<uint>(sipCpp->glyphIndexesForString(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QVector_1900,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_glyphIndexesForString, doc_QRawFont_glyphIndexesForString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_advancesForGlyphIndexes, "advancesForGlyphIndexes(self, Iterable[int]) -> List[QPointF]\n"
"advancesForGlyphIndexes(self, Iterable[int], Union[QRawFont.LayoutFlags, QRawFont.LayoutFlag]) -> List[QPointF]");

extern "C" {static PyObject *meth_QRawFont_advancesForGlyphIndexes(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_advancesForGlyphIndexes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector<uint>* a0;
        int a0State = 0;
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QRawFont, &sipCpp, sipType_QVector_1900,&a0, &a0State))
        {
            QVector< ::QPointF>*sipRes;

            sipRes = new QVector< ::QPointF>(sipCpp->advancesForGlyphIndexes(*a0));
            sipReleaseType(const_cast< ::QVector<uint> *>(a0),sipType_QVector_1900,a0State);

            return sipConvertFromNewType(sipRes,sipType_QVector_0100QPointF,SIP_NULLPTR);
        }
    }

    {
        const  ::QVector<uint>* a0;
        int a0State = 0;
         ::QRawFont::LayoutFlags* a1;
        int a1State = 0;
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QRawFont, &sipCpp, sipType_QVector_1900,&a0, &a0State, sipType_QRawFont_LayoutFlags, &a1, &a1State))
        {
            QVector< ::QPointF>*sipRes;

            sipRes = new QVector< ::QPointF>(sipCpp->advancesForGlyphIndexes(*a0,*a1));
            sipReleaseType(const_cast< ::QVector<uint> *>(a0),sipType_QVector_1900,a0State);
            sipReleaseType(a1,sipType_QRawFont_LayoutFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QVector_0100QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_advancesForGlyphIndexes, doc_QRawFont_advancesForGlyphIndexes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_alphaMapForGlyph, "alphaMapForGlyph(self, int, antialiasingType: QRawFont.AntialiasingType = QRawFont.SubPixelAntialiasing, transform: QTransform = QTransform()) -> QImage");

extern "C" {static PyObject *meth_QRawFont_alphaMapForGlyph(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QRawFont_alphaMapForGlyph(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::quint32 a0;
         ::QRawFont::AntialiasingType a1 = QRawFont::SubPixelAntialiasing;
        const  ::QTransform& a2def = QTransform();
        const  ::QTransform* a2 = &a2def;
        const  ::QRawFont *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_antialiasingType,
            sipName_transform,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bu|EJ9", &sipSelf, sipType_QRawFont, &sipCpp, &a0, sipType_QRawFont_AntialiasingType, &a1, sipType_QTransform, &a2))
        {
             ::QImage*sipRes;

            sipRes = new  ::QImage(sipCpp->alphaMapForGlyph(a0,a1,*a2));

            return sipConvertFromNewType(sipRes,sipType_QImage,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_alphaMapForGlyph, doc_QRawFont_alphaMapForGlyph);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_pathForGlyph, "pathForGlyph(self, int) -> QPainterPath");

extern "C" {static PyObject *meth_QRawFont_pathForGlyph(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_pathForGlyph(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::quint32 a0;
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QRawFont, &sipCpp, &a0))
        {
             ::QPainterPath*sipRes;

            sipRes = new  ::QPainterPath(sipCpp->pathForGlyph(a0));

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_pathForGlyph, doc_QRawFont_pathForGlyph);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_setPixelSize, "setPixelSize(self, float)");

extern "C" {static PyObject *meth_QRawFont_setPixelSize(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_setPixelSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QRawFont, &sipCpp, &a0))
        {
            sipCpp->setPixelSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_setPixelSize, doc_QRawFont_setPixelSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_pixelSize, "pixelSize(self) -> float");

extern "C" {static PyObject *meth_QRawFont_pixelSize(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_pixelSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRawFont, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->pixelSize();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_pixelSize, doc_QRawFont_pixelSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_hintingPreference, "hintingPreference(self) -> QFont.HintingPreference");

extern "C" {static PyObject *meth_QRawFont_hintingPreference(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_hintingPreference(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRawFont, &sipCpp))
        {
             ::QFont::HintingPreference sipRes;

            sipRes = sipCpp->hintingPreference();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QFont_HintingPreference);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_hintingPreference, doc_QRawFont_hintingPreference);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_ascent, "ascent(self) -> float");

extern "C" {static PyObject *meth_QRawFont_ascent(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_ascent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRawFont, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->ascent();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_ascent, doc_QRawFont_ascent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_descent, "descent(self) -> float");

extern "C" {static PyObject *meth_QRawFont_descent(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_descent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRawFont, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->descent();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_descent, doc_QRawFont_descent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_leading, "leading(self) -> float");

extern "C" {static PyObject *meth_QRawFont_leading(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_leading(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRawFont, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->leading();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_leading, doc_QRawFont_leading);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_xHeight, "xHeight(self) -> float");

extern "C" {static PyObject *meth_QRawFont_xHeight(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_xHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRawFont, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->xHeight();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_xHeight, doc_QRawFont_xHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_averageCharWidth, "averageCharWidth(self) -> float");

extern "C" {static PyObject *meth_QRawFont_averageCharWidth(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_averageCharWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRawFont, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->averageCharWidth();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_averageCharWidth, doc_QRawFont_averageCharWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_maxCharWidth, "maxCharWidth(self) -> float");

extern "C" {static PyObject *meth_QRawFont_maxCharWidth(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_maxCharWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRawFont, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->maxCharWidth();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_maxCharWidth, doc_QRawFont_maxCharWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_unitsPerEm, "unitsPerEm(self) -> float");

extern "C" {static PyObject *meth_QRawFont_unitsPerEm(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_unitsPerEm(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRawFont, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->unitsPerEm();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_unitsPerEm, doc_QRawFont_unitsPerEm);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_loadFromFile, "loadFromFile(self, str, float, QFont.HintingPreference)");

extern "C" {static PyObject *meth_QRawFont_loadFromFile(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_loadFromFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::qreal a1;
         ::QFont::HintingPreference a2;
         ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1dE", &sipSelf, sipType_QRawFont, &sipCpp, sipType_QString,&a0, &a0State, &a1, sipType_QFont_HintingPreference, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->loadFromFile(*a0,a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_loadFromFile, doc_QRawFont_loadFromFile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_loadFromData, "loadFromData(self, Union[QByteArray, bytes, bytearray], float, QFont.HintingPreference)");

extern "C" {static PyObject *meth_QRawFont_loadFromData(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_loadFromData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::qreal a1;
         ::QFont::HintingPreference a2;
         ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1dE", &sipSelf, sipType_QRawFont, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1, sipType_QFont_HintingPreference, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->loadFromData(*a0,a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_loadFromData, doc_QRawFont_loadFromData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_supportsCharacter, "supportsCharacter(self, int) -> bool\n"
"supportsCharacter(self, str) -> bool");

extern "C" {static PyObject *meth_QRawFont_supportsCharacter(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_supportsCharacter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::uint a0;
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QRawFont, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->supportsCharacter(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::QChar* a0;
        int a0State = 0;
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QRawFont, &sipCpp, sipType_QChar,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->supportsCharacter(*a0);
            sipReleaseType(a0,sipType_QChar,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_supportsCharacter, doc_QRawFont_supportsCharacter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_supportedWritingSystems, "supportedWritingSystems(self) -> List[QFontDatabase.WritingSystem]");

extern "C" {static PyObject *meth_QRawFont_supportedWritingSystems(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_supportedWritingSystems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRawFont, &sipCpp))
        {
             ::QList< ::QFontDatabase::WritingSystem>*sipRes;

            sipRes = new  ::QList< ::QFontDatabase::WritingSystem>(sipCpp->supportedWritingSystems());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QFontDatabase_WritingSystem,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_supportedWritingSystems, doc_QRawFont_supportedWritingSystems);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_fontTable, "fontTable(self, str) -> QByteArray");

extern "C" {static PyObject *meth_QRawFont_fontTable(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_fontTable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAA", &sipSelf, sipType_QRawFont, &sipCpp, &a0Keep, &a0))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->fontTable(a0));
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_fontTable, doc_QRawFont_fontTable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_fromFont, "fromFont(QFont, writingSystem: QFontDatabase.WritingSystem = QFontDatabase.Any) -> QRawFont");

extern "C" {static PyObject *meth_QRawFont_fromFont(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QRawFont_fromFont(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFont* a0;
         ::QFontDatabase::WritingSystem a1 = QFontDatabase::Any;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_writingSystem,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J9|E", sipType_QFont, &a0, sipType_QFontDatabase_WritingSystem, &a1))
        {
             ::QRawFont*sipRes;

            sipRes = new  ::QRawFont( ::QRawFont::fromFont(*a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QRawFont,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_fromFont, doc_QRawFont_fromFont);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_boundingRect, "boundingRect(self, int) -> QRectF");

extern "C" {static PyObject *meth_QRawFont_boundingRect(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_boundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::quint32 a0;
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QRawFont, &sipCpp, &a0))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->boundingRect(a0));

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_boundingRect, doc_QRawFont_boundingRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_lineThickness, "lineThickness(self) -> float");

extern "C" {static PyObject *meth_QRawFont_lineThickness(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_lineThickness(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRawFont, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->lineThickness();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_lineThickness, doc_QRawFont_lineThickness);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_underlinePosition, "underlinePosition(self) -> float");

extern "C" {static PyObject *meth_QRawFont_underlinePosition(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_underlinePosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRawFont, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->underlinePosition();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_underlinePosition, doc_QRawFont_underlinePosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_swap, "swap(self, QRawFont)");

extern "C" {static PyObject *meth_QRawFont_swap(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRawFont* a0;
         ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRawFont, &sipCpp, sipType_QRawFont, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_swap, doc_QRawFont_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRawFont_capHeight, "capHeight(self) -> float");

extern "C" {static PyObject *meth_QRawFont_capHeight(PyObject *, PyObject *);}
static PyObject *meth_QRawFont_capHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRawFont, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->capHeight();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRawFont, sipName_capHeight, doc_QRawFont_capHeight);

    return SIP_NULLPTR;
}


extern "C" {static long slot_QRawFont___hash__(PyObject *);}
static long slot_QRawFont___hash__(PyObject *sipSelf)
{
     ::QRawFont *sipCpp = reinterpret_cast< ::QRawFont *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRawFont));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 97 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qrawfont.sip"
        sipRes = qHash(*sipCpp);
#line 68241 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QRawFont___ne__(PyObject *,PyObject *);}
static PyObject *slot_QRawFont___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QRawFont *sipCpp = reinterpret_cast< ::QRawFont *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRawFont));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRawFont, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QRawFont::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QRawFont, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QRawFont___eq__(PyObject *,PyObject *);}
static PyObject *slot_QRawFont___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QRawFont *sipCpp = reinterpret_cast< ::QRawFont *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRawFont));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRawFont* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRawFont, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QRawFont::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QRawFont, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QRawFont(void *, int);}
static void release_QRawFont(void *sipCppV, int)
{
    delete reinterpret_cast< ::QRawFont *>(sipCppV);
}


extern "C" {static void assign_QRawFont(void *, SIP_SSIZE_T, void *);}
static void assign_QRawFont(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QRawFont *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QRawFont *>(sipSrc);
}


extern "C" {static void *array_QRawFont(SIP_SSIZE_T);}
static void *array_QRawFont(SIP_SSIZE_T sipNrElem)
{
    return new  ::QRawFont[sipNrElem];
}


extern "C" {static void *copy_QRawFont(const void *, SIP_SSIZE_T);}
static void *copy_QRawFont(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QRawFont(reinterpret_cast<const  ::QRawFont *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QRawFont(sipSimpleWrapper *);}
static void dealloc_QRawFont(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QRawFont(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QRawFont(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QRawFont(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QRawFont *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QRawFont();

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::qreal a1;
         ::QFont::HintingPreference a2 = QFont::PreferDefaultHinting;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_hintingPreference,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1d|E", sipType_QString,&a0, &a0State, &a1, sipType_QFont_HintingPreference, &a2))
        {
            sipCpp = new  ::QRawFont(*a0,a1,a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::qreal a1;
         ::QFont::HintingPreference a2 = QFont::PreferDefaultHinting;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_hintingPreference,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1d|E", sipType_QByteArray, &a0, &a0State, &a1, sipType_QFont_HintingPreference, &a2))
        {
            sipCpp = new  ::QRawFont(*a0,a1,a2);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QRawFont* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QRawFont, &a0))
        {
            sipCpp = new  ::QRawFont(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QRawFont[] = {
    {(void *)slot_QRawFont___hash__, hash_slot},
    {(void *)slot_QRawFont___ne__, ne_slot},
    {(void *)slot_QRawFont___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QRawFont[] = {
    {SIP_MLNAME_CAST(sipName_advancesForGlyphIndexes), meth_QRawFont_advancesForGlyphIndexes, METH_VARARGS, SIP_MLDOC_CAST(doc_QRawFont_advancesForGlyphIndexes)},
    {SIP_MLNAME_CAST(sipName_alphaMapForGlyph), SIP_MLMETH_CAST(meth_QRawFont_alphaMapForGlyph), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QRawFont_alphaMapForGlyph)},
    {SIP_MLNAME_CAST(sipName_ascent), meth_QRawFont_ascent, METH_VARARGS, SIP_MLDOC_CAST(doc_QRawFont_ascent)},
    {SIP_MLNAME_CAST(sipName_averageCharWidth), meth_QRawFont_averageCharWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QRawFont_averageCharWidth)},
    {SIP_MLNAME_CAST(sipName_boundingRect), meth_QRawFont_boundingRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QRawFont_boundingRect)},
    {SIP_MLNAME_CAST(sipName_capHeight), meth_QRawFont_capHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QRawFont_capHeight)},
    {SIP_MLNAME_CAST(sipName_descent), meth_QRawFont_descent, METH_VARARGS, SIP_MLDOC_CAST(doc_QRawFont_descent)},
    {SIP_MLNAME_CAST(sipName_familyName), meth_QRawFont_familyName, METH_VARARGS, SIP_MLDOC_CAST(doc_QRawFont_familyName)},
    {SIP_MLNAME_CAST(sipName_fontTable), meth_QRawFont_fontTable, METH_VARARGS, SIP_MLDOC_CAST(doc_QRawFont_fontTable)},
    {SIP_MLNAME_CAST(sipName_fromFont), SIP_MLMETH_CAST(meth_QRawFont_fromFont), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QRawFont_fromFont)},
    {SIP_MLNAME_CAST(sipName_glyphIndexesForString), meth_QRawFont_glyphIndexesForString, METH_VARARGS, SIP_MLDOC_CAST(doc_QRawFont_glyphIndexesForString)},
    {SIP_MLNAME_CAST(sipName_hintingPreference), meth_QRawFont_hintingPreference, METH_VARARGS, SIP_MLDOC_CAST(doc_QRawFont_hintingPreference)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QRawFont_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QRawFont_isValid)},
    {SIP_MLNAME_CAST(sipName_leading), meth_QRawFont_leading, METH_VARARGS, SIP_MLDOC_CAST(doc_QRawFont_leading)},
    {SIP_MLNAME_CAST(sipName_lineThickness), meth_QRawFont_lineThickness, METH_VARARGS, SIP_MLDOC_CAST(doc_QRawFont_lineThickness)},
    {SIP_MLNAME_CAST(sipName_loadFromData), meth_QRawFont_loadFromData, METH_VARARGS, SIP_MLDOC_CAST(doc_QRawFont_loadFromData)},
    {SIP_MLNAME_CAST(sipName_loadFromFile), meth_QRawFont_loadFromFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QRawFont_loadFromFile)},
    {SIP_MLNAME_CAST(sipName_maxCharWidth), meth_QRawFont_maxCharWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QRawFont_maxCharWidth)},
    {SIP_MLNAME_CAST(sipName_pathForGlyph), meth_QRawFont_pathForGlyph, METH_VARARGS, SIP_MLDOC_CAST(doc_QRawFont_pathForGlyph)},
    {SIP_MLNAME_CAST(sipName_pixelSize), meth_QRawFont_pixelSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QRawFont_pixelSize)},
    {SIP_MLNAME_CAST(sipName_setPixelSize), meth_QRawFont_setPixelSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QRawFont_setPixelSize)},
    {SIP_MLNAME_CAST(sipName_style), meth_QRawFont_style, METH_VARARGS, SIP_MLDOC_CAST(doc_QRawFont_style)},
    {SIP_MLNAME_CAST(sipName_styleName), meth_QRawFont_styleName, METH_VARARGS, SIP_MLDOC_CAST(doc_QRawFont_styleName)},
    {SIP_MLNAME_CAST(sipName_supportedWritingSystems), meth_QRawFont_supportedWritingSystems, METH_VARARGS, SIP_MLDOC_CAST(doc_QRawFont_supportedWritingSystems)},
    {SIP_MLNAME_CAST(sipName_supportsCharacter), meth_QRawFont_supportsCharacter, METH_VARARGS, SIP_MLDOC_CAST(doc_QRawFont_supportsCharacter)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QRawFont_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QRawFont_swap)},
    {SIP_MLNAME_CAST(sipName_underlinePosition), meth_QRawFont_underlinePosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QRawFont_underlinePosition)},
    {SIP_MLNAME_CAST(sipName_unitsPerEm), meth_QRawFont_unitsPerEm, METH_VARARGS, SIP_MLDOC_CAST(doc_QRawFont_unitsPerEm)},
    {SIP_MLNAME_CAST(sipName_weight), meth_QRawFont_weight, METH_VARARGS, SIP_MLDOC_CAST(doc_QRawFont_weight)},
    {SIP_MLNAME_CAST(sipName_xHeight), meth_QRawFont_xHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QRawFont_xHeight)}
};

static sipEnumMemberDef enummembers_QRawFont[] = {
    {sipName_KernedAdvances, static_cast<int>( ::QRawFont::KernedAdvances), 244},
    {sipName_PixelAntialiasing, static_cast<int>( ::QRawFont::PixelAntialiasing), 243},
    {sipName_SeparateAdvances, static_cast<int>( ::QRawFont::SeparateAdvances), 244},
    {sipName_SubPixelAntialiasing, static_cast<int>( ::QRawFont::SubPixelAntialiasing), 243},
    {sipName_UseDesignMetrics, static_cast<int>( ::QRawFont::UseDesignMetrics), 244},
};

PyDoc_STRVAR(doc_QRawFont, "\1QRawFont()\n"
"QRawFont(str, float, hintingPreference: QFont.HintingPreference = QFont.PreferDefaultHinting)\n"
"QRawFont(Union[QByteArray, bytes, bytearray], float, hintingPreference: QFont.HintingPreference = QFont.PreferDefaultHinting)\n"
"QRawFont(QRawFont)");


static pyqt5ClassPluginDef plugin_QRawFont = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QRawFont = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QRawFont,
        {SIP_NULLPTR},
        &plugin_QRawFont
    },
    {
        sipNameNr_QRawFont,
        {0, 0, 1},
        30, methods_QRawFont,
        5, enummembers_QRawFont,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QRawFont,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QRawFont,
    init_type_QRawFont,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QRawFont,
    assign_QRawFont,
    array_QRawFont,
    copy_QRawFont,
    release_QRawFont,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qrasterwindow.sip"
#include <qrasterwindow.h>
#line 68544 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 68548 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 68551 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 68554 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 786 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 68557 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 389 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 68560 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 68563 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 68566 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 68569 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 68572 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 189 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 68575 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 296 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 68578 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 717 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 68581 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 253 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 68584 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 205 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 68587 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 354 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 68590 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 462 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 68593 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 451 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 68596 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 375 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 68599 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 403 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 68602 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 416 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 68605 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 68608 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 68611 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qscreen.sip"
#include <qscreen.h>
#line 68614 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 68617 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 68620 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 68623 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 68626 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 68629 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 68632 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qsurfaceformat.sip"
#include <qsurfaceformat.h>
#line 68635 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qsurface.sip"
#include <qsurface.h>
#line 68638 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 68641 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 68644 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 68647 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 68650 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 68653 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 68656 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 68659 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 68662 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 68665 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 68668 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 68671 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 68674 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 52 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 68677 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


class sipQRasterWindow : public  ::QRasterWindow
{
public:
    sipQRasterWindow( ::QWindow*);
    virtual ~sipQRasterWindow();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void tabletEvent( ::QTabletEvent*) SIP_OVERRIDE;
    void touchEvent( ::QTouchEvent*) SIP_OVERRIDE;
    void wheelEvent( ::QWheelEvent*) SIP_OVERRIDE;
    void mouseMoveEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseDoubleClickEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseReleaseEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mousePressEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void keyReleaseEvent( ::QKeyEvent*) SIP_OVERRIDE;
    void keyPressEvent( ::QKeyEvent*) SIP_OVERRIDE;
    void hideEvent( ::QHideEvent*) SIP_OVERRIDE;
    void showEvent( ::QShowEvent*) SIP_OVERRIDE;
    void focusOutEvent( ::QFocusEvent*) SIP_OVERRIDE;
    void focusInEvent( ::QFocusEvent*) SIP_OVERRIDE;
    void moveEvent( ::QMoveEvent*) SIP_OVERRIDE;
    void resizeEvent( ::QResizeEvent*) SIP_OVERRIDE;
    void exposeEvent( ::QExposeEvent*) SIP_OVERRIDE;
     ::QObject* focusObject() const SIP_OVERRIDE;
     ::QSurfaceFormat format() const SIP_OVERRIDE;
     ::QSurface::SurfaceType surfaceType() const SIP_OVERRIDE;
     ::QSize size() const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    int metric( ::QPaintDevice::PaintDeviceMetric) const SIP_OVERRIDE;
     ::QPaintEngine* paintEngine() const SIP_OVERRIDE;
    void paintEvent( ::QPaintEvent*) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQRasterWindow(const sipQRasterWindow &);
    sipQRasterWindow &operator = (const sipQRasterWindow &);

    char sipPyMethods[30];
};

sipQRasterWindow::sipQRasterWindow( ::QWindow*a0):  ::QRasterWindow(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQRasterWindow::~sipQRasterWindow()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQRasterWindow::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QRasterWindow);

    return  ::QRasterWindow::metaObject();
}

int sipQRasterWindow::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QRasterWindow::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QRasterWindow,_c,_id,_a);

    return _id;
}

void *sipQRasterWindow::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QRasterWindow, _clname, &sipCpp) ? sipCpp :  ::QRasterWindow::qt_metacast(_clname));
}

void sipQRasterWindow::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_tabletEvent);

    if (!sipMeth)
    {
         ::QRasterWindow::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_51(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_QtGui_51(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRasterWindow::touchEvent( ::QTouchEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_touchEvent);

    if (!sipMeth)
    {
         ::QRasterWindow::touchEvent(a0);
        return;
    }

    extern void sipVH_QtGui_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTouchEvent*);

    sipVH_QtGui_50(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRasterWindow::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_wheelEvent);

    if (!sipMeth)
    {
         ::QRasterWindow::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtGui_49(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRasterWindow::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
         ::QRasterWindow::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_48(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRasterWindow::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
         ::QRasterWindow::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_48(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRasterWindow::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
         ::QRasterWindow::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_48(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRasterWindow::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_mousePressEvent);

    if (!sipMeth)
    {
         ::QRasterWindow::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_48(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRasterWindow::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
         ::QRasterWindow::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtGui_47(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRasterWindow::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_keyPressEvent);

    if (!sipMeth)
    {
         ::QRasterWindow::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtGui_47(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRasterWindow::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_hideEvent);

    if (!sipMeth)
    {
         ::QRasterWindow::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_QtGui_46(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRasterWindow::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_showEvent);

    if (!sipMeth)
    {
         ::QRasterWindow::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_QtGui_45(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRasterWindow::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,SIP_NULLPTR,sipName_focusOutEvent);

    if (!sipMeth)
    {
         ::QRasterWindow::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtGui_44(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRasterWindow::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,SIP_NULLPTR,sipName_focusInEvent);

    if (!sipMeth)
    {
         ::QRasterWindow::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtGui_44(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRasterWindow::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,SIP_NULLPTR,sipName_moveEvent);

    if (!sipMeth)
    {
         ::QRasterWindow::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_QtGui_43(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRasterWindow::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_resizeEvent);

    if (!sipMeth)
    {
         ::QRasterWindow::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_42(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_QtGui_42(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRasterWindow::exposeEvent( ::QExposeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,SIP_NULLPTR,sipName_exposeEvent);

    if (!sipMeth)
    {
         ::QRasterWindow::exposeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QExposeEvent*);

    sipVH_QtGui_41(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QObject* sipQRasterWindow::focusObject() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,SIP_NULLPTR,sipName_focusObject);

    if (!sipMeth)
        return  ::QRasterWindow::focusObject();

    extern  ::QObject* sipVH_QtGui_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_40(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSurfaceFormat sipQRasterWindow::format() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,SIP_NULLPTR,sipName_format);

    if (!sipMeth)
        return  ::QRasterWindow::format();

    extern  ::QSurfaceFormat sipVH_QtGui_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_36(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSurface::SurfaceType sipQRasterWindow::surfaceType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,SIP_NULLPTR,sipName_surfaceType);

    if (!sipMeth)
        return  ::QRasterWindow::surfaceType();

    extern  ::QSurface::SurfaceType sipVH_QtGui_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_37(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQRasterWindow::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,SIP_NULLPTR,sipName_size);

    if (!sipMeth)
        return  ::QRasterWindow::size();

    extern  ::QSize sipVH_QtGui_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_38(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQRasterWindow::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QRasterWindow::event(a0);

    extern bool sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_5(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQRasterWindow::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QRasterWindow::eventFilter(a0,a1);

    extern bool sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_4(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQRasterWindow::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QRasterWindow::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_3(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRasterWindow::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QRasterWindow::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_2(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRasterWindow::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QRasterWindow::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_1(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRasterWindow::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QRasterWindow::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQRasterWindow::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QRasterWindow::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQRasterWindow::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,SIP_NULLPTR,sipName_metric);

    if (!sipMeth)
        return  ::QRasterWindow::metric(a0);

    extern int sipVH_QtGui_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_18(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QPaintEngine* sipQRasterWindow::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,sipName_QRasterWindow,sipName_paintEngine);

    if (!sipMeth)
        return 0;

    extern  ::QPaintEngine* sipVH_QtGui_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_17(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQRasterWindow::paintEvent( ::QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,SIP_NULLPTR,sipName_paintEvent);

    if (!sipMeth)
    {
         ::QRasterWindow::paintEvent(a0);
        return;
    }

    extern void sipVH_QtGui_52(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintEvent*);

    sipVH_QtGui_52(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QRasterWindow_metric, "metric(self, QPaintDevice.PaintDeviceMetric) -> int");

extern "C" {static PyObject *meth_QRasterWindow_metric(PyObject *, PyObject *);}
static PyObject *meth_QRasterWindow_metric(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintDevice::PaintDeviceMetric a0;
        const  ::QRasterWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QRasterWindow, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QRasterWindow::metric(a0) : sipCpp->metric(a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRasterWindow, sipName_metric, doc_QRasterWindow_metric);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QRasterWindow(void *, const sipTypeDef *);}
static void *cast_QRasterWindow(void *sipCppV, const sipTypeDef *targetType)
{
     ::QRasterWindow *sipCpp = reinterpret_cast< ::QRasterWindow *>(sipCppV);

    if (targetType == sipType_QPaintDeviceWindow)
        return static_cast< ::QPaintDeviceWindow *>(sipCpp);

    if (targetType == sipType_QWindow)
        return static_cast< ::QWindow *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QSurface)
        return static_cast< ::QSurface *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QRasterWindow(void *, int);}
static void release_QRasterWindow(void *sipCppV, int)
{
     ::QRasterWindow *sipCpp = reinterpret_cast< ::QRasterWindow *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QRasterWindow(sipSimpleWrapper *);}
static void dealloc_QRasterWindow(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQRasterWindow *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QRasterWindow(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QRasterWindow(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QRasterWindow(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQRasterWindow *sipCpp = SIP_NULLPTR;

    {
         ::QWindow* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWindow, &a0, sipOwner))
        {
            sipCpp = new sipQRasterWindow(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QRasterWindow[] = {{193, 255, 1}};


static PyMethodDef methods_QRasterWindow[] = {
    {SIP_MLNAME_CAST(sipName_metric), meth_QRasterWindow_metric, METH_VARARGS, SIP_MLDOC_CAST(doc_QRasterWindow_metric)}
};

PyDoc_STRVAR(doc_QRasterWindow, "\1QRasterWindow(parent: QWindow = None)");


static pyqt5ClassPluginDef plugin_QRasterWindow = {
    & ::QRasterWindow::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QRasterWindow = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QRasterWindow,
        {SIP_NULLPTR},
        &plugin_QRasterWindow
    },
    {
        sipNameNr_QRasterWindow,
        {0, 0, 1},
        1, methods_QRasterWindow,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QRasterWindow,
    -1,
    -1,
    supers_QRasterWindow,
    SIP_NULLPTR,
    init_type_QRasterWindow,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QRasterWindow,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QRasterWindow,
    cast_QRasterWindow,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qquaternion.sip"
#include <qquaternion.h>
#line 69466 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qvector3d.sip"
#include <qvector3d.h>
#line 69470 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qvector4d.sip"
#include <qvector4d.h>
#line 69473 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 483 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 69476 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QQuaternion_length, "length(self) -> float");

extern "C" {static PyObject *meth_QQuaternion_length(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_length(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuaternion, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->length();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_length, doc_QQuaternion_length);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuaternion_lengthSquared, "lengthSquared(self) -> float");

extern "C" {static PyObject *meth_QQuaternion_lengthSquared(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_lengthSquared(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuaternion, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->lengthSquared();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_lengthSquared, doc_QQuaternion_lengthSquared);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuaternion_normalized, "normalized(self) -> QQuaternion");

extern "C" {static PyObject *meth_QQuaternion_normalized(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_normalized(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuaternion, &sipCpp))
        {
             ::QQuaternion*sipRes;

            sipRes = new  ::QQuaternion(sipCpp->normalized());

            return sipConvertFromNewType(sipRes,sipType_QQuaternion,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_normalized, doc_QQuaternion_normalized);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuaternion_normalize, "normalize(self)");

extern "C" {static PyObject *meth_QQuaternion_normalize(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_normalize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuaternion, &sipCpp))
        {
            sipCpp->normalize();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_normalize, doc_QQuaternion_normalize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuaternion_rotatedVector, "rotatedVector(self, QVector3D) -> QVector3D");

extern "C" {static PyObject *meth_QQuaternion_rotatedVector(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_rotatedVector(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector3D* a0;
        const  ::QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QQuaternion, &sipCpp, sipType_QVector3D, &a0))
        {
             ::QVector3D*sipRes;

            sipRes = new  ::QVector3D(sipCpp->rotatedVector(*a0));

            return sipConvertFromNewType(sipRes,sipType_QVector3D,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_rotatedVector, doc_QQuaternion_rotatedVector);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuaternion_fromAxisAndAngle, "fromAxisAndAngle(QVector3D, float) -> QQuaternion\n"
"fromAxisAndAngle(float, float, float, float) -> QQuaternion");

extern "C" {static PyObject *meth_QQuaternion_fromAxisAndAngle(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_fromAxisAndAngle(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector3D* a0;
        float a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9f", sipType_QVector3D, &a0, &a1))
        {
             ::QQuaternion*sipRes;

            sipRes = new  ::QQuaternion( ::QQuaternion::fromAxisAndAngle(*a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QQuaternion,SIP_NULLPTR);
        }
    }

    {
        float a0;
        float a1;
        float a2;
        float a3;

        if (sipParseArgs(&sipParseErr, sipArgs, "ffff", &a0, &a1, &a2, &a3))
        {
             ::QQuaternion*sipRes;

            sipRes = new  ::QQuaternion( ::QQuaternion::fromAxisAndAngle(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QQuaternion,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_fromAxisAndAngle, doc_QQuaternion_fromAxisAndAngle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuaternion_slerp, "slerp(QQuaternion, QQuaternion, float) -> QQuaternion");

extern "C" {static PyObject *meth_QQuaternion_slerp(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_slerp(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuaternion* a0;
        const  ::QQuaternion* a1;
        float a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9f", sipType_QQuaternion, &a0, sipType_QQuaternion, &a1, &a2))
        {
             ::QQuaternion*sipRes;

            sipRes = new  ::QQuaternion( ::QQuaternion::slerp(*a0,*a1,a2));

            return sipConvertFromNewType(sipRes,sipType_QQuaternion,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_slerp, doc_QQuaternion_slerp);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuaternion_nlerp, "nlerp(QQuaternion, QQuaternion, float) -> QQuaternion");

extern "C" {static PyObject *meth_QQuaternion_nlerp(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_nlerp(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuaternion* a0;
        const  ::QQuaternion* a1;
        float a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9f", sipType_QQuaternion, &a0, sipType_QQuaternion, &a1, &a2))
        {
             ::QQuaternion*sipRes;

            sipRes = new  ::QQuaternion( ::QQuaternion::nlerp(*a0,*a1,a2));

            return sipConvertFromNewType(sipRes,sipType_QQuaternion,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_nlerp, doc_QQuaternion_nlerp);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuaternion_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QQuaternion_isNull(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuaternion, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_isNull, doc_QQuaternion_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuaternion_isIdentity, "isIdentity(self) -> bool");

extern "C" {static PyObject *meth_QQuaternion_isIdentity(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_isIdentity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuaternion, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isIdentity();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_isIdentity, doc_QQuaternion_isIdentity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuaternion_x, "x(self) -> float");

extern "C" {static PyObject *meth_QQuaternion_x(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_x(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuaternion, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->x();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_x, doc_QQuaternion_x);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuaternion_y, "y(self) -> float");

extern "C" {static PyObject *meth_QQuaternion_y(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_y(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuaternion, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->y();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_y, doc_QQuaternion_y);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuaternion_z, "z(self) -> float");

extern "C" {static PyObject *meth_QQuaternion_z(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_z(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuaternion, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->z();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_z, doc_QQuaternion_z);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuaternion_scalar, "scalar(self) -> float");

extern "C" {static PyObject *meth_QQuaternion_scalar(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_scalar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuaternion, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->scalar();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_scalar, doc_QQuaternion_scalar);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuaternion_setX, "setX(self, float)");

extern "C" {static PyObject *meth_QQuaternion_setX(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_setX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
         ::QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QQuaternion, &sipCpp, &a0))
        {
            sipCpp->setX(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_setX, doc_QQuaternion_setX);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuaternion_setY, "setY(self, float)");

extern "C" {static PyObject *meth_QQuaternion_setY(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_setY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
         ::QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QQuaternion, &sipCpp, &a0))
        {
            sipCpp->setY(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_setY, doc_QQuaternion_setY);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuaternion_setZ, "setZ(self, float)");

extern "C" {static PyObject *meth_QQuaternion_setZ(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_setZ(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
         ::QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QQuaternion, &sipCpp, &a0))
        {
            sipCpp->setZ(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_setZ, doc_QQuaternion_setZ);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuaternion_setScalar, "setScalar(self, float)");

extern "C" {static PyObject *meth_QQuaternion_setScalar(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_setScalar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
         ::QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QQuaternion, &sipCpp, &a0))
        {
            sipCpp->setScalar(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_setScalar, doc_QQuaternion_setScalar);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuaternion_conjugate, "conjugate(self) -> QQuaternion");

extern "C" {static PyObject *meth_QQuaternion_conjugate(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_conjugate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuaternion, &sipCpp))
        {
             ::QQuaternion*sipRes;

            sipRes = new  ::QQuaternion(sipCpp->conjugate());

            return sipConvertFromNewType(sipRes,sipType_QQuaternion,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_conjugate, doc_QQuaternion_conjugate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuaternion_setVector, "setVector(self, QVector3D)\n"
"setVector(self, float, float, float)");

extern "C" {static PyObject *meth_QQuaternion_setVector(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_setVector(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector3D* a0;
         ::QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QQuaternion, &sipCpp, sipType_QVector3D, &a0))
        {
            sipCpp->setVector(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        float a0;
        float a1;
        float a2;
         ::QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bfff", &sipSelf, sipType_QQuaternion, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->setVector(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_setVector, doc_QQuaternion_setVector);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuaternion_vector, "vector(self) -> QVector3D");

extern "C" {static PyObject *meth_QQuaternion_vector(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_vector(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuaternion, &sipCpp))
        {
             ::QVector3D*sipRes;

            sipRes = new  ::QVector3D(sipCpp->vector());

            return sipConvertFromNewType(sipRes,sipType_QVector3D,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_vector, doc_QQuaternion_vector);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuaternion_toVector4D, "toVector4D(self) -> QVector4D");

extern "C" {static PyObject *meth_QQuaternion_toVector4D(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_toVector4D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuaternion, &sipCpp))
        {
             ::QVector4D*sipRes;

            sipRes = new  ::QVector4D(sipCpp->toVector4D());

            return sipConvertFromNewType(sipRes,sipType_QVector4D,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_toVector4D, doc_QQuaternion_toVector4D);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuaternion_getAxisAndAngle, "getAxisAndAngle(self) -> Tuple[QVector3D, float]");

extern "C" {static PyObject *meth_QQuaternion_getAxisAndAngle(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_getAxisAndAngle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QVector3D* a0;
        float a1;
        const  ::QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuaternion, &sipCpp))
        {
            a0 = new  ::QVector3D();

            sipCpp->getAxisAndAngle(a0,&a1);

            return sipBuildResult(0,"(Nf)",a0,sipType_QVector3D,SIP_NULLPTR,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_getAxisAndAngle, doc_QQuaternion_getAxisAndAngle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuaternion_getEulerAngles, "getEulerAngles(self) -> Tuple[float, float, float]");

extern "C" {static PyObject *meth_QQuaternion_getEulerAngles(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_getEulerAngles(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
        float a1;
        float a2;
        const  ::QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuaternion, &sipCpp))
        {
            sipCpp->getEulerAngles(&a0,&a1,&a2);

            return sipBuildResult(0,"(fff)",a0,a1,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_getEulerAngles, doc_QQuaternion_getEulerAngles);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuaternion_fromEulerAngles, "fromEulerAngles(float, float, float) -> QQuaternion\n"
"fromEulerAngles(QVector3D) -> QQuaternion");

extern "C" {static PyObject *meth_QQuaternion_fromEulerAngles(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_fromEulerAngles(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
        float a1;
        float a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "fff", &a0, &a1, &a2))
        {
             ::QQuaternion*sipRes;

            sipRes = new  ::QQuaternion( ::QQuaternion::fromEulerAngles(a0,a1,a2));

            return sipConvertFromNewType(sipRes,sipType_QQuaternion,SIP_NULLPTR);
        }
    }

    {
        const  ::QVector3D* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QVector3D, &a0))
        {
             ::QQuaternion*sipRes;

            sipRes = new  ::QQuaternion( ::QQuaternion::fromEulerAngles(*a0));

            return sipConvertFromNewType(sipRes,sipType_QQuaternion,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_fromEulerAngles, doc_QQuaternion_fromEulerAngles);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuaternion_toRotationMatrix, "toRotationMatrix(self) -> QMatrix3x3");

extern "C" {static PyObject *meth_QQuaternion_toRotationMatrix(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_toRotationMatrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuaternion, &sipCpp))
        {
             ::QMatrix3x3*sipRes;

            sipRes = new  ::QMatrix3x3(sipCpp->toRotationMatrix());

            return sipConvertFromNewType(sipRes,sipType_QMatrix3x3,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_toRotationMatrix, doc_QQuaternion_toRotationMatrix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuaternion_fromRotationMatrix, "fromRotationMatrix(QMatrix3x3) -> QQuaternion");

extern "C" {static PyObject *meth_QQuaternion_fromRotationMatrix(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_fromRotationMatrix(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix3x3* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QMatrix3x3, &a0))
        {
             ::QQuaternion*sipRes;

            sipRes = new  ::QQuaternion( ::QQuaternion::fromRotationMatrix(*a0));

            return sipConvertFromNewType(sipRes,sipType_QQuaternion,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_fromRotationMatrix, doc_QQuaternion_fromRotationMatrix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuaternion_getAxes, "getAxes(self) -> Tuple[QVector3D, QVector3D, QVector3D]");

extern "C" {static PyObject *meth_QQuaternion_getAxes(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_getAxes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QVector3D* a0;
         ::QVector3D* a1;
         ::QVector3D* a2;
        const  ::QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuaternion, &sipCpp))
        {
            a0 = new  ::QVector3D();
            a1 = new  ::QVector3D();
            a2 = new  ::QVector3D();

            sipCpp->getAxes(a0,a1,a2);

            return sipBuildResult(0,"(NNN)",a0,sipType_QVector3D,SIP_NULLPTR,a1,sipType_QVector3D,SIP_NULLPTR,a2,sipType_QVector3D,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_getAxes, doc_QQuaternion_getAxes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuaternion_fromAxes, "fromAxes(QVector3D, QVector3D, QVector3D) -> QQuaternion");

extern "C" {static PyObject *meth_QQuaternion_fromAxes(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_fromAxes(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector3D* a0;
        const  ::QVector3D* a1;
        const  ::QVector3D* a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9J9", sipType_QVector3D, &a0, sipType_QVector3D, &a1, sipType_QVector3D, &a2))
        {
             ::QQuaternion*sipRes;

            sipRes = new  ::QQuaternion( ::QQuaternion::fromAxes(*a0,*a1,*a2));

            return sipConvertFromNewType(sipRes,sipType_QQuaternion,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_fromAxes, doc_QQuaternion_fromAxes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuaternion_fromDirection, "fromDirection(QVector3D, QVector3D) -> QQuaternion");

extern "C" {static PyObject *meth_QQuaternion_fromDirection(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_fromDirection(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector3D* a0;
        const  ::QVector3D* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9", sipType_QVector3D, &a0, sipType_QVector3D, &a1))
        {
             ::QQuaternion*sipRes;

            sipRes = new  ::QQuaternion( ::QQuaternion::fromDirection(*a0,*a1));

            return sipConvertFromNewType(sipRes,sipType_QQuaternion,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_fromDirection, doc_QQuaternion_fromDirection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuaternion_rotationTo, "rotationTo(QVector3D, QVector3D) -> QQuaternion");

extern "C" {static PyObject *meth_QQuaternion_rotationTo(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_rotationTo(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector3D* a0;
        const  ::QVector3D* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9", sipType_QVector3D, &a0, sipType_QVector3D, &a1))
        {
             ::QQuaternion*sipRes;

            sipRes = new  ::QQuaternion( ::QQuaternion::rotationTo(*a0,*a1));

            return sipConvertFromNewType(sipRes,sipType_QQuaternion,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_rotationTo, doc_QQuaternion_rotationTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuaternion_dotProduct, "dotProduct(QQuaternion, QQuaternion) -> float");

extern "C" {static PyObject *meth_QQuaternion_dotProduct(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_dotProduct(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuaternion* a0;
        const  ::QQuaternion* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9", sipType_QQuaternion, &a0, sipType_QQuaternion, &a1))
        {
            float sipRes;

            sipRes =  ::QQuaternion::dotProduct(*a0,*a1);

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_dotProduct, doc_QQuaternion_dotProduct);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuaternion_inverted, "inverted(self) -> QQuaternion");

extern "C" {static PyObject *meth_QQuaternion_inverted(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_inverted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuaternion, &sipCpp))
        {
             ::QQuaternion*sipRes;

            sipRes = new  ::QQuaternion(sipCpp->inverted());

            return sipConvertFromNewType(sipRes,sipType_QQuaternion,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_inverted, doc_QQuaternion_inverted);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuaternion_conjugated, "conjugated(self) -> QQuaternion");

extern "C" {static PyObject *meth_QQuaternion_conjugated(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_conjugated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuaternion, &sipCpp))
        {
             ::QQuaternion*sipRes;

            sipRes = new  ::QQuaternion(sipCpp->conjugated());

            return sipConvertFromNewType(sipRes,sipType_QQuaternion,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_conjugated, doc_QQuaternion_conjugated);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuaternion_toEulerAngles, "toEulerAngles(self) -> QVector3D");

extern "C" {static PyObject *meth_QQuaternion_toEulerAngles(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_toEulerAngles(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuaternion, &sipCpp))
        {
             ::QVector3D*sipRes;

            sipRes = new  ::QVector3D(sipCpp->toEulerAngles());

            return sipConvertFromNewType(sipRes,sipType_QVector3D,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_toEulerAngles, doc_QQuaternion_toEulerAngles);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QQuaternion___eq__(PyObject *,PyObject *);}
static PyObject *slot_QQuaternion___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QQuaternion *sipCpp = reinterpret_cast< ::QQuaternion *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuaternion));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuaternion* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QQuaternion, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QQuaternion, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QQuaternion___ne__(PyObject *,PyObject *);}
static PyObject *slot_QQuaternion___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QQuaternion *sipCpp = reinterpret_cast< ::QQuaternion *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuaternion));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuaternion* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QQuaternion, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QQuaternion, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QQuaternion___div__(PyObject *,PyObject *);}
static PyObject *slot_QQuaternion___div__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuaternion* a0;
        float a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9f", sipType_QQuaternion, &a0, &a1))
        {
             ::QQuaternion*sipRes;

            sipRes = new  ::QQuaternion((*a0 / a1));

            return sipConvertFromNewType(sipRes,sipType_QQuaternion,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, div_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QQuaternion___add__(PyObject *,PyObject *);}
static PyObject *slot_QQuaternion___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuaternion* a0;
        const  ::QQuaternion* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QQuaternion, &a0, sipType_QQuaternion, &a1))
        {
             ::QQuaternion*sipRes;

            sipRes = new  ::QQuaternion((*a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_QQuaternion,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, add_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QQuaternion___sub__(PyObject *,PyObject *);}
static PyObject *slot_QQuaternion___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuaternion* a0;
        const  ::QQuaternion* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QQuaternion, &a0, sipType_QQuaternion, &a1))
        {
             ::QQuaternion*sipRes;

            sipRes = new  ::QQuaternion((*a0 - *a1));

            return sipConvertFromNewType(sipRes,sipType_QQuaternion,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, sub_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QQuaternion___mul__(PyObject *,PyObject *);}
static PyObject *slot_QQuaternion___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuaternion* a0;
        const  ::QQuaternion* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QQuaternion, &a0, sipType_QQuaternion, &a1))
        {
             ::QQuaternion*sipRes;

            sipRes = new  ::QQuaternion((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QQuaternion,SIP_NULLPTR);
        }
    }

    {
        float a0;
        const  ::QQuaternion* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "fJ9", &a0, sipType_QQuaternion, &a1))
        {
             ::QQuaternion*sipRes;

            sipRes = new  ::QQuaternion((a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QQuaternion,SIP_NULLPTR);
        }
    }

    {
        const  ::QQuaternion* a0;
        float a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9f", sipType_QQuaternion, &a0, &a1))
        {
             ::QQuaternion*sipRes;

            sipRes = new  ::QQuaternion((*a0 * a1));

            return sipConvertFromNewType(sipRes,sipType_QQuaternion,SIP_NULLPTR);
        }
    }

    {
        const  ::QQuaternion* a0;
        const  ::QVector3D* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QQuaternion, &a0, sipType_QVector3D, &a1))
        {
             ::QVector3D*sipRes;

            sipRes = new  ::QVector3D((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QVector3D,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, mul_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QQuaternion___neg__(PyObject *);}
static PyObject *slot_QQuaternion___neg__(PyObject *sipSelf)
{
     ::QQuaternion *sipCpp = reinterpret_cast< ::QQuaternion *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuaternion));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QQuaternion*sipRes;

            sipRes = new  ::QQuaternion(-(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QQuaternion,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QQuaternion___idiv__(PyObject *,PyObject *);}
static PyObject *slot_QQuaternion___idiv__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QQuaternion)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QQuaternion *sipCpp = reinterpret_cast< ::QQuaternion *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuaternion));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1f", &a0))
        {
            sipCpp-> ::QQuaternion::operator/=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QQuaternion___imul__(PyObject *,PyObject *);}
static PyObject *slot_QQuaternion___imul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QQuaternion)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QQuaternion *sipCpp = reinterpret_cast< ::QQuaternion *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuaternion));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1f", &a0))
        {
            sipCpp-> ::QQuaternion::operator*=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        const  ::QQuaternion* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QQuaternion, &a0))
        {
            sipCpp-> ::QQuaternion::operator*=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QQuaternion___isub__(PyObject *,PyObject *);}
static PyObject *slot_QQuaternion___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QQuaternion)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QQuaternion *sipCpp = reinterpret_cast< ::QQuaternion *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuaternion));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuaternion* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QQuaternion, &a0))
        {
            sipCpp-> ::QQuaternion::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QQuaternion___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QQuaternion___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QQuaternion)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QQuaternion *sipCpp = reinterpret_cast< ::QQuaternion *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuaternion));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuaternion* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QQuaternion, &a0))
        {
            sipCpp-> ::QQuaternion::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QQuaternion___repr__(PyObject *);}
static PyObject *slot_QQuaternion___repr__(PyObject *sipSelf)
{
     ::QQuaternion *sipCpp = reinterpret_cast< ::QQuaternion *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuaternion));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 45 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qquaternion.sip"
        PyObject *scalar = PyFloat_FromDouble(sipCpp->scalar());
        PyObject *x = PyFloat_FromDouble(sipCpp->x());
        PyObject *y = PyFloat_FromDouble(sipCpp->y());
        PyObject *z = PyFloat_FromDouble(sipCpp->z());
        
        if (scalar && x && y && z)
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromFormat("PyQt5.QtGui.QQuaternion(%R, %R, %R, %R)",
                    scalar, x, y, z);
        #else
            sipRes = PyString_FromString("PyQt5.QtGui.QQuaternion(");
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(scalar));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(x));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(y));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(z));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
        #endif
        }
        
        Py_XDECREF(scalar);
        Py_XDECREF(x);
        Py_XDECREF(y);
        Py_XDECREF(z);
#line 70983 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQuaternion(void *, int);}
static void release_QQuaternion(void *sipCppV, int)
{
    delete reinterpret_cast< ::QQuaternion *>(sipCppV);
}


extern "C" {static PyObject *pickle_QQuaternion(void *);}
static PyObject *pickle_QQuaternion(void *sipCppV)
{
     ::QQuaternion *sipCpp = reinterpret_cast< ::QQuaternion *>(sipCppV);
    PyObject *sipRes;

#line 34 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qquaternion.sip"
    sipRes = Py_BuildValue((char *)"dddd", (double)sipCpp->scalar(),
            (double)sipCpp->x(), (double)sipCpp->y(), (double)sipCpp->z());
#line 71010 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

    return sipRes;
}


extern "C" {static void assign_QQuaternion(void *, SIP_SSIZE_T, void *);}
static void assign_QQuaternion(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QQuaternion *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QQuaternion *>(sipSrc);
}


extern "C" {static void *array_QQuaternion(SIP_SSIZE_T);}
static void *array_QQuaternion(SIP_SSIZE_T sipNrElem)
{
    return new  ::QQuaternion[sipNrElem];
}


extern "C" {static void *copy_QQuaternion(const void *, SIP_SSIZE_T);}
static void *copy_QQuaternion(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QQuaternion(reinterpret_cast<const  ::QQuaternion *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QQuaternion(sipSimpleWrapper *);}
static void dealloc_QQuaternion(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQuaternion(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QQuaternion(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQuaternion(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QQuaternion *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QQuaternion();

            return sipCpp;
        }
    }

    {
        float a0;
        float a1;
        float a2;
        float a3;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "ffff", &a0, &a1, &a2, &a3))
        {
            sipCpp = new  ::QQuaternion(a0,a1,a2,a3);

            return sipCpp;
        }
    }

    {
        float a0;
        const  ::QVector3D* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "fJ9", &a0, sipType_QVector3D, &a1))
        {
            sipCpp = new  ::QQuaternion(a0,*a1);

            return sipCpp;
        }
    }

    {
        const  ::QVector4D* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QVector4D, &a0))
        {
            sipCpp = new  ::QQuaternion(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QQuaternion* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QQuaternion, &a0))
        {
            sipCpp = new  ::QQuaternion(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QQuaternion[] = {
    {(void *)slot_QQuaternion___eq__, eq_slot},
    {(void *)slot_QQuaternion___ne__, ne_slot},
    {(void *)slot_QQuaternion___div__, div_slot},
    {(void *)slot_QQuaternion___add__, add_slot},
    {(void *)slot_QQuaternion___sub__, sub_slot},
    {(void *)slot_QQuaternion___mul__, mul_slot},
    {(void *)slot_QQuaternion___neg__, neg_slot},
    {(void *)slot_QQuaternion___idiv__, idiv_slot},
    {(void *)slot_QQuaternion___imul__, imul_slot},
    {(void *)slot_QQuaternion___isub__, isub_slot},
    {(void *)slot_QQuaternion___iadd__, iadd_slot},
    {(void *)slot_QQuaternion___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QQuaternion[] = {
    {SIP_MLNAME_CAST(sipName_conjugate), meth_QQuaternion_conjugate, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_conjugate)},
    {SIP_MLNAME_CAST(sipName_conjugated), meth_QQuaternion_conjugated, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_conjugated)},
    {SIP_MLNAME_CAST(sipName_dotProduct), meth_QQuaternion_dotProduct, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_dotProduct)},
    {SIP_MLNAME_CAST(sipName_fromAxes), meth_QQuaternion_fromAxes, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_fromAxes)},
    {SIP_MLNAME_CAST(sipName_fromAxisAndAngle), meth_QQuaternion_fromAxisAndAngle, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_fromAxisAndAngle)},
    {SIP_MLNAME_CAST(sipName_fromDirection), meth_QQuaternion_fromDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_fromDirection)},
    {SIP_MLNAME_CAST(sipName_fromEulerAngles), meth_QQuaternion_fromEulerAngles, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_fromEulerAngles)},
    {SIP_MLNAME_CAST(sipName_fromRotationMatrix), meth_QQuaternion_fromRotationMatrix, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_fromRotationMatrix)},
    {SIP_MLNAME_CAST(sipName_getAxes), meth_QQuaternion_getAxes, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_getAxes)},
    {SIP_MLNAME_CAST(sipName_getAxisAndAngle), meth_QQuaternion_getAxisAndAngle, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_getAxisAndAngle)},
    {SIP_MLNAME_CAST(sipName_getEulerAngles), meth_QQuaternion_getEulerAngles, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_getEulerAngles)},
    {SIP_MLNAME_CAST(sipName_inverted), meth_QQuaternion_inverted, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_inverted)},
    {SIP_MLNAME_CAST(sipName_isIdentity), meth_QQuaternion_isIdentity, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_isIdentity)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QQuaternion_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_isNull)},
    {SIP_MLNAME_CAST(sipName_length), meth_QQuaternion_length, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_length)},
    {SIP_MLNAME_CAST(sipName_lengthSquared), meth_QQuaternion_lengthSquared, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_lengthSquared)},
    {SIP_MLNAME_CAST(sipName_nlerp), meth_QQuaternion_nlerp, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_nlerp)},
    {SIP_MLNAME_CAST(sipName_normalize), meth_QQuaternion_normalize, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_normalize)},
    {SIP_MLNAME_CAST(sipName_normalized), meth_QQuaternion_normalized, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_normalized)},
    {SIP_MLNAME_CAST(sipName_rotatedVector), meth_QQuaternion_rotatedVector, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_rotatedVector)},
    {SIP_MLNAME_CAST(sipName_rotationTo), meth_QQuaternion_rotationTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_rotationTo)},
    {SIP_MLNAME_CAST(sipName_scalar), meth_QQuaternion_scalar, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_scalar)},
    {SIP_MLNAME_CAST(sipName_setScalar), meth_QQuaternion_setScalar, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_setScalar)},
    {SIP_MLNAME_CAST(sipName_setVector), meth_QQuaternion_setVector, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_setVector)},
    {SIP_MLNAME_CAST(sipName_setX), meth_QQuaternion_setX, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_setX)},
    {SIP_MLNAME_CAST(sipName_setY), meth_QQuaternion_setY, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_setY)},
    {SIP_MLNAME_CAST(sipName_setZ), meth_QQuaternion_setZ, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_setZ)},
    {SIP_MLNAME_CAST(sipName_slerp), meth_QQuaternion_slerp, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_slerp)},
    {SIP_MLNAME_CAST(sipName_toEulerAngles), meth_QQuaternion_toEulerAngles, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_toEulerAngles)},
    {SIP_MLNAME_CAST(sipName_toRotationMatrix), meth_QQuaternion_toRotationMatrix, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_toRotationMatrix)},
    {SIP_MLNAME_CAST(sipName_toVector4D), meth_QQuaternion_toVector4D, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_toVector4D)},
    {SIP_MLNAME_CAST(sipName_vector), meth_QQuaternion_vector, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_vector)},
    {SIP_MLNAME_CAST(sipName_x), meth_QQuaternion_x, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_x)},
    {SIP_MLNAME_CAST(sipName_y), meth_QQuaternion_y, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_y)},
    {SIP_MLNAME_CAST(sipName_z), meth_QQuaternion_z, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_z)}
};

PyDoc_STRVAR(doc_QQuaternion, "\1QQuaternion()\n"
"QQuaternion(float, float, float, float)\n"
"QQuaternion(float, QVector3D)\n"
"QQuaternion(QVector4D)\n"
"QQuaternion(QQuaternion)");


static pyqt5ClassPluginDef plugin_QQuaternion = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QQuaternion = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQuaternion,
        {SIP_NULLPTR},
        &plugin_QQuaternion
    },
    {
        sipNameNr_QQuaternion,
        {0, 0, 1},
        35, methods_QQuaternion,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QQuaternion,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QQuaternion,
    init_type_QQuaternion,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQuaternion,
    assign_QQuaternion,
    array_QQuaternion,
    copy_QQuaternion,
    release_QQuaternion,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    pickle_QQuaternion,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 315 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 71240 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 71244 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 71247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 71250 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 71253 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 71256 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 71259 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QPolygonF_translate, "translate(self, Union[QPointF, QPoint])\n"
"translate(self, float, float)");

extern "C" {static PyObject *meth_QPolygonF_translate(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_translate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->translate(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
         ::QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QPolygonF, &sipCpp, &a0, &a1))
        {
            sipCpp->translate(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_translate, doc_QPolygonF_translate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygonF_toPolygon, "toPolygon(self) -> QPolygon");

extern "C" {static PyObject *meth_QPolygonF_toPolygon(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_toPolygon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygonF, &sipCpp))
        {
             ::QPolygon*sipRes;

            sipRes = new  ::QPolygon(sipCpp->toPolygon());

            return sipConvertFromNewType(sipRes,sipType_QPolygon,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_toPolygon, doc_QPolygonF_toPolygon);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygonF_isClosed, "isClosed(self) -> bool");

extern "C" {static PyObject *meth_QPolygonF_isClosed(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_isClosed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygonF, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isClosed();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_isClosed, doc_QPolygonF_isClosed);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygonF_boundingRect, "boundingRect(self) -> QRectF");

extern "C" {static PyObject *meth_QPolygonF_boundingRect(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_boundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygonF, &sipCpp))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->boundingRect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_boundingRect, doc_QPolygonF_boundingRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygonF_containsPoint, "containsPoint(self, Union[QPointF, QPoint], Qt.FillRule) -> bool");

extern "C" {static PyObject *meth_QPolygonF_containsPoint(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_containsPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::Qt::FillRule a1;
        const  ::QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1E", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPointF, &a0, &a0State, sipType_Qt_FillRule, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->containsPoint(*a0,a1);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_containsPoint, doc_QPolygonF_containsPoint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygonF_united, "united(self, QPolygonF) -> QPolygonF");

extern "C" {static PyObject *meth_QPolygonF_united(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_united(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPolygonF* a0;
        const  ::QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPolygonF, &a0))
        {
             ::QPolygonF*sipRes;

            sipRes = new  ::QPolygonF(sipCpp->united(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPolygonF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_united, doc_QPolygonF_united);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygonF_intersected, "intersected(self, QPolygonF) -> QPolygonF");

extern "C" {static PyObject *meth_QPolygonF_intersected(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_intersected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPolygonF* a0;
        const  ::QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPolygonF, &a0))
        {
             ::QPolygonF*sipRes;

            sipRes = new  ::QPolygonF(sipCpp->intersected(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPolygonF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_intersected, doc_QPolygonF_intersected);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygonF_subtracted, "subtracted(self, QPolygonF) -> QPolygonF");

extern "C" {static PyObject *meth_QPolygonF_subtracted(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_subtracted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPolygonF* a0;
        const  ::QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPolygonF, &a0))
        {
             ::QPolygonF*sipRes;

            sipRes = new  ::QPolygonF(sipCpp->subtracted(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPolygonF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_subtracted, doc_QPolygonF_subtracted);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygonF_translated, "translated(self, Union[QPointF, QPoint]) -> QPolygonF\n"
"translated(self, float, float) -> QPolygonF");

extern "C" {static PyObject *meth_QPolygonF_translated(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_translated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
             ::QPolygonF*sipRes;

            sipRes = new  ::QPolygonF(sipCpp->translated(*a0));
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPolygonF,SIP_NULLPTR);
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
        const  ::QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QPolygonF, &sipCpp, &a0, &a1))
        {
             ::QPolygonF*sipRes;

            sipRes = new  ::QPolygonF(sipCpp->translated(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QPolygonF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_translated, doc_QPolygonF_translated);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygonF_append, "append(self, Union[QPointF, QPoint])");

extern "C" {static PyObject *meth_QPolygonF_append(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_append(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->append(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_append, doc_QPolygonF_append);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygonF_at, "at(self, int) -> QPointF");

extern "C" {static PyObject *meth_QPolygonF_at(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_at(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPolygonF, &sipCpp, &a0))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->at(a0));

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_at, doc_QPolygonF_at);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygonF_clear, "clear(self)");

extern "C" {static PyObject *meth_QPolygonF_clear(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygonF, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_clear, doc_QPolygonF_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygonF_contains, "contains(self, Union[QPointF, QPoint]) -> bool");

extern "C" {static PyObject *meth_QPolygonF_contains(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_contains(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->contains(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_contains, doc_QPolygonF_contains);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygonF_count, "count(self, Union[QPointF, QPoint]) -> int\n"
"count(self) -> int");

extern "C" {static PyObject *meth_QPolygonF_count(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            int sipRes;

            sipRes = sipCpp->count(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const  ::QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygonF, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->count();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_count, doc_QPolygonF_count);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygonF_data, "data(self) -> sip.voidptr");

extern "C" {static PyObject *meth_QPolygonF_data(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygonF, &sipCpp))
        {
            void*sipRes;

            sipRes = sipCpp->data();

            return sipConvertFromVoidPtr(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_data, doc_QPolygonF_data);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygonF_fill, "fill(self, Union[QPointF, QPoint], size: int = -1)");

extern "C" {static PyObject *meth_QPolygonF_fill(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_fill(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        int a1 = -1;
         ::QPolygonF *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_size,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|i", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPointF, &a0, &a0State, &a1))
        {
            sipCpp->fill(*a0,a1);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_fill, doc_QPolygonF_fill);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygonF_first, "first(self) -> QPointF");

extern "C" {static PyObject *meth_QPolygonF_first(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_first(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygonF, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = &sipCpp->first();

            return sipConvertFromType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_first, doc_QPolygonF_first);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygonF_indexOf, "indexOf(self, Union[QPointF, QPoint], from_: int = 0) -> int");

extern "C" {static PyObject *meth_QPolygonF_indexOf(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_indexOf(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        int a1 = 0;
        const  ::QPolygonF *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_from,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|i", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPointF, &a0, &a0State, &a1))
        {
            int sipRes;

            sipRes = sipCpp->indexOf(*a0,a1);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_indexOf, doc_QPolygonF_indexOf);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygonF_insert, "insert(self, int, Union[QPointF, QPoint])");

extern "C" {static PyObject *meth_QPolygonF_insert(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_insert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QPointF* a1;
        int a1State = 0;
         ::QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QPolygonF, &sipCpp, &a0, sipType_QPointF, &a1, &a1State))
        {
            sipCpp->insert(a0,*a1);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_insert, doc_QPolygonF_insert);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygonF_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QPolygonF_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygonF, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_isEmpty, doc_QPolygonF_isEmpty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygonF_last, "last(self) -> QPointF");

extern "C" {static PyObject *meth_QPolygonF_last(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_last(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygonF, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = &sipCpp->last();

            return sipConvertFromType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_last, doc_QPolygonF_last);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygonF_lastIndexOf, "lastIndexOf(self, Union[QPointF, QPoint], from_: int = -1) -> int");

extern "C" {static PyObject *meth_QPolygonF_lastIndexOf(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_lastIndexOf(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        int a1 = -1;
        const  ::QPolygonF *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_from,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|i", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPointF, &a0, &a0State, &a1))
        {
            int sipRes;

            sipRes = sipCpp->lastIndexOf(*a0,a1);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_lastIndexOf, doc_QPolygonF_lastIndexOf);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygonF_mid, "mid(self, int, length: int = -1) -> QPolygonF");

extern "C" {static PyObject *meth_QPolygonF_mid(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_mid(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1 = -1;
        const  ::QPolygonF *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_length,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|i", &sipSelf, sipType_QPolygonF, &sipCpp, &a0, &a1))
        {
             ::QPolygonF*sipRes;

            sipRes = new  ::QPolygonF(sipCpp->mid(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QPolygonF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_mid, doc_QPolygonF_mid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygonF_prepend, "prepend(self, Union[QPointF, QPoint])");

extern "C" {static PyObject *meth_QPolygonF_prepend(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_prepend(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->prepend(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_prepend, doc_QPolygonF_prepend);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygonF_remove, "remove(self, int)\n"
"remove(self, int, int)");

extern "C" {static PyObject *meth_QPolygonF_remove(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPolygonF, &sipCpp, &a0))
        {
            sipCpp->remove(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
         ::QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QPolygonF, &sipCpp, &a0, &a1))
        {
            sipCpp->remove(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_remove, doc_QPolygonF_remove);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygonF_replace, "replace(self, int, Union[QPointF, QPoint])");

extern "C" {static PyObject *meth_QPolygonF_replace(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_replace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QPointF* a1;
        int a1State = 0;
         ::QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QPolygonF, &sipCpp, &a0, sipType_QPointF, &a1, &a1State))
        {
            sipCpp->replace(a0,*a1);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_replace, doc_QPolygonF_replace);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygonF_size, "size(self) -> int");

extern "C" {static PyObject *meth_QPolygonF_size(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygonF, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->size();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_size, doc_QPolygonF_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygonF_value, "value(self, int) -> QPointF\n"
"value(self, int, Union[QPointF, QPoint]) -> QPointF");

extern "C" {static PyObject *meth_QPolygonF_value(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPolygonF, &sipCpp, &a0))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->value(a0));

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    {
        int a0;
        const  ::QPointF* a1;
        int a1State = 0;
        const  ::QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QPolygonF, &sipCpp, &a0, sipType_QPointF, &a1, &a1State))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->value(a0,*a1));
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_value, doc_QPolygonF_value);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygonF_swap, "swap(self, QPolygonF)");

extern "C" {static PyObject *meth_QPolygonF_swap(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPolygonF* a0;
         ::QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPolygonF, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_swap, doc_QPolygonF_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygonF_intersects, "intersects(self, QPolygonF) -> bool");

extern "C" {static PyObject *meth_QPolygonF_intersects(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_intersects(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPolygonF* a0;
        const  ::QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPolygonF, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->intersects(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_intersects, doc_QPolygonF_intersects);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QPolygonF___mul__(PyObject *,PyObject *);}
static PyObject *slot_QPolygonF___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPolygonF* a0;
        const  ::QTransform* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QPolygonF, &a0, sipType_QTransform, &a1))
        {
             ::QPolygonF*sipRes;

            sipRes = new  ::QPolygonF((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QPolygonF,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, mul_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static int slot_QPolygonF___contains__(PyObject *,PyObject *);}
static int slot_QPolygonF___contains__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPolygonF *sipCpp = reinterpret_cast< ::QPolygonF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygonF));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QPointF, &a0, &a0State))
        {
            int sipRes = 0;

#line 489 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpolygon.sip"
// It looks like you can't assign QBool to int.
sipRes = bool(sipCpp->contains(*a0));
#line 72297 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName___contains__, SIP_NULLPTR);

    return -1;
}


extern "C" {static int slot_QPolygonF___delitem__(PyObject *,PyObject *);}
static int slot_QPolygonF___delitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPolygonF *sipCpp = reinterpret_cast< ::QPolygonF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygonF));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            int sipIsErr = 0;

#line 443 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpolygon.sip"
if ((a0 = (int)sipConvertFromSequenceIndex(a0, sipCpp->count())) < 0)
    sipIsErr = 1;
else
    sipCpp->remove(a0);
#line 72333 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1T", &PySlice_Type, &a0))
        {
            int sipIsErr = 0;

#line 451 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpolygon.sip"
Py_ssize_t start, stop, step, slicelength;

if (sipConvertFromSliceObject(a0, sipCpp->count(), &start, &stop, &step, &slicelength) < 0)
{
    sipIsErr = 1;
}
else
{
    for (Py_ssize_t i = 0; i < slicelength; ++i)
    {
        sipCpp->remove(start);
        start += step - 1;
    }
}
#line 72364 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName___delitem__, SIP_NULLPTR);

    return -1;
}


extern "C" {static int slot_QPolygonF___setitem__(PyObject *,PyObject *);}
static int slot_QPolygonF___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
     ::QPolygonF *sipCpp = reinterpret_cast< ::QPolygonF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygonF));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QPointF* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "iJ1", &a0, sipType_QPointF, &a1, &a1State))
        {
            int sipIsErr = 0;

#line 400 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpolygon.sip"
int len;

len = sipCpp->count();

if ((a0 = (int)sipConvertFromSequenceIndex(a0, len)) < 0)
    sipIsErr = 1;
else
    (*sipCpp)[a0] = *a1;
#line 72408 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    {
        PyObject * a0;
        const  ::QPolygonF* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "TJ9", &PySlice_Type, &a0, sipType_QPolygonF, &a1))
        {
            int sipIsErr = 0;

#line 412 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpolygon.sip"
Py_ssize_t start, stop, step, slicelength;

if (sipConvertFromSliceObject(a0, sipCpp->count(), &start, &stop, &step, &slicelength) < 0)
{
    sipIsErr = 1;
}
else
{
    int vlen = a1->count();

    if (vlen != slicelength)
    {
        sipBadLengthForSlice(vlen, slicelength);
        sipIsErr = 1;
    }
    else
    {
        QVector<QPointF>::const_iterator it = a1->begin();

        for (Py_ssize_t i = 0; i < slicelength; ++i)
        {
            (*sipCpp)[start] = *it;
            start += step;
            ++it;
        }
    }
}
#line 72454 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName___setitem__, SIP_NULLPTR);

    return -1;
}


extern "C" {static PyObject *slot_QPolygonF___getitem__(PyObject *,PyObject *);}
static PyObject *slot_QPolygonF___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPolygonF *sipCpp = reinterpret_cast< ::QPolygonF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygonF));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
             ::QPointF*sipRes = 0;
            int sipIsErr = 0;

#line 388 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpolygon.sip"
Py_ssize_t idx = sipConvertFromSequenceIndex(a0, sipCpp->count());

if (idx < 0)
    sipIsErr = 1;
else
    sipRes = new QPointF(sipCpp->operator[]((int)idx));
#line 72495 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1T", &PySlice_Type, &a0))
        {
             ::QPolygonF*sipRes = 0;
            int sipIsErr = 0;

#line 469 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpolygon.sip"
Py_ssize_t start, stop, step, slicelength;

if (sipConvertFromSliceObject(a0, sipCpp->count(), &start, &stop, &step, &slicelength) < 0)
{
    sipIsErr = 1;
}
else
{
    sipRes = new QPolygonF();

    for (Py_ssize_t i = 0; i < slicelength; ++i)
    {
        (*sipRes) += (*sipCpp)[start];
        start += step;
    }
}
#line 72529 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromType(sipRes,sipType_QPolygonF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName___getitem__, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QPolygonF___lshift__(PyObject *,PyObject *);}
static PyObject *slot_QPolygonF___lshift__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPolygonF* a0;
        const  ::QPointF* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J1", sipType_QPolygonF, &a0, sipType_QPointF, &a1, &a1State))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 380 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpolygon.sip"
    *a0 << *a1;

    sipRes = sipArg0;
    Py_INCREF(sipRes);
#line 72564 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);

            return sipRes;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, lshift_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QPolygonF___eq__(PyObject *,PyObject *);}
static PyObject *slot_QPolygonF___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPolygonF *sipCpp = reinterpret_cast< ::QPolygonF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygonF));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPolygonF* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPolygonF, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QPolygonF::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QPolygonF, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QPolygonF___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QPolygonF___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPolygonF *sipCpp = reinterpret_cast< ::QPolygonF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygonF));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPolygonF* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPolygonF, &a0))
        {
            sipCpp-> ::QPolygonF::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QPointF, &a0, &a0State))
        {
            sipCpp-> ::QPolygonF::operator+=(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    /* Raise an exception if the argument couldn't be parsed. */
    sipBadOperatorArg(sipSelf,sipArg,iconcat_slot);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QPolygonF___add__(PyObject *,PyObject *);}
static PyObject *slot_QPolygonF___add__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPolygonF *sipCpp = reinterpret_cast< ::QPolygonF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygonF));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPolygonF* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPolygonF, &a0))
        {
             ::QPolygonF*sipRes;

            sipRes = new  ::QPolygonF(sipCpp-> ::QPolygonF::operator+(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPolygonF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the argument couldn't be parsed. */
    sipBadOperatorArg(sipSelf,sipArg,concat_slot);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QPolygonF___ne__(PyObject *,PyObject *);}
static PyObject *slot_QPolygonF___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPolygonF *sipCpp = reinterpret_cast< ::QPolygonF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygonF));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPolygonF* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPolygonF, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QPolygonF::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QPolygonF, sipSelf, sipArg);
}


extern "C" {static SIP_SSIZE_T slot_QPolygonF___len__(PyObject *);}
static SIP_SSIZE_T slot_QPolygonF___len__(PyObject *sipSelf)
{
     ::QPolygonF *sipCpp = reinterpret_cast< ::QPolygonF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygonF));

    if (!sipCpp)
        return 0;


    {
        {
            SIP_SSIZE_T sipRes = 0;

#line 1 "Auto-generated"
            sipRes = (SIP_SSIZE_T)sipCpp->count();
#line 72732 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPolygonF(void *, int);}
static void release_QPolygonF(void *sipCppV, int)
{
    delete reinterpret_cast< ::QPolygonF *>(sipCppV);
}


extern "C" {static void assign_QPolygonF(void *, SIP_SSIZE_T, void *);}
static void assign_QPolygonF(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QPolygonF *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QPolygonF *>(sipSrc);
}


extern "C" {static void *array_QPolygonF(SIP_SSIZE_T);}
static void *array_QPolygonF(SIP_SSIZE_T sipNrElem)
{
    return new  ::QPolygonF[sipNrElem];
}


extern "C" {static void *copy_QPolygonF(const void *, SIP_SSIZE_T);}
static void *copy_QPolygonF(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QPolygonF(reinterpret_cast<const  ::QPolygonF *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPolygonF(sipSimpleWrapper *);}
static void dealloc_QPolygonF(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPolygonF(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QPolygonF(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPolygonF(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QPolygonF *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QPolygonF();

            return sipCpp;
        }
    }

    {
        const  ::QPolygonF* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QPolygonF, &a0))
        {
            sipCpp = new  ::QPolygonF(*a0);

            return sipCpp;
        }
    }

    {
        const QVector< ::QPointF>* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QVector_0100QPointF,&a0, &a0State))
        {
            sipCpp = new  ::QPolygonF(*a0);
            sipReleaseType(const_cast<QVector< ::QPointF> *>(a0),sipType_QVector_0100QPointF,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QRectF* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QRectF, &a0))
        {
            sipCpp = new  ::QPolygonF(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QPolygon* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QPolygon, &a0))
        {
            sipCpp = new  ::QPolygonF(*a0);

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QPolygonF(a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QPolygonF[] = {
    {(void *)slot_QPolygonF___mul__, mul_slot},
    {(void *)slot_QPolygonF___contains__, contains_slot},
    {(void *)slot_QPolygonF___delitem__, delitem_slot},
    {(void *)slot_QPolygonF___setitem__, setitem_slot},
    {(void *)slot_QPolygonF___getitem__, getitem_slot},
    {(void *)slot_QPolygonF___lshift__, lshift_slot},
    {(void *)slot_QPolygonF___eq__, eq_slot},
    {(void *)slot_QPolygonF___iadd__, iconcat_slot},
    {(void *)slot_QPolygonF___add__, concat_slot},
    {(void *)slot_QPolygonF___ne__, ne_slot},
    {(void *)slot_QPolygonF___len__, len_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QPolygonF[] = {
    {SIP_MLNAME_CAST(sipName_append), meth_QPolygonF_append, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_append)},
    {SIP_MLNAME_CAST(sipName_at), meth_QPolygonF_at, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_at)},
    {SIP_MLNAME_CAST(sipName_boundingRect), meth_QPolygonF_boundingRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_boundingRect)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QPolygonF_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_clear)},
    {SIP_MLNAME_CAST(sipName_contains), meth_QPolygonF_contains, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_contains)},
    {SIP_MLNAME_CAST(sipName_containsPoint), meth_QPolygonF_containsPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_containsPoint)},
    {SIP_MLNAME_CAST(sipName_count), meth_QPolygonF_count, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_count)},
    {SIP_MLNAME_CAST(sipName_data), meth_QPolygonF_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_data)},
    {SIP_MLNAME_CAST(sipName_fill), SIP_MLMETH_CAST(meth_QPolygonF_fill), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPolygonF_fill)},
    {SIP_MLNAME_CAST(sipName_first), meth_QPolygonF_first, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_first)},
    {SIP_MLNAME_CAST(sipName_indexOf), SIP_MLMETH_CAST(meth_QPolygonF_indexOf), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPolygonF_indexOf)},
    {SIP_MLNAME_CAST(sipName_insert), meth_QPolygonF_insert, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_insert)},
    {SIP_MLNAME_CAST(sipName_intersected), meth_QPolygonF_intersected, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_intersected)},
    {SIP_MLNAME_CAST(sipName_intersects), meth_QPolygonF_intersects, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_intersects)},
    {SIP_MLNAME_CAST(sipName_isClosed), meth_QPolygonF_isClosed, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_isClosed)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QPolygonF_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_isEmpty)},
    {SIP_MLNAME_CAST(sipName_last), meth_QPolygonF_last, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_last)},
    {SIP_MLNAME_CAST(sipName_lastIndexOf), SIP_MLMETH_CAST(meth_QPolygonF_lastIndexOf), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPolygonF_lastIndexOf)},
    {SIP_MLNAME_CAST(sipName_mid), SIP_MLMETH_CAST(meth_QPolygonF_mid), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPolygonF_mid)},
    {SIP_MLNAME_CAST(sipName_prepend), meth_QPolygonF_prepend, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_prepend)},
    {SIP_MLNAME_CAST(sipName_remove), meth_QPolygonF_remove, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_remove)},
    {SIP_MLNAME_CAST(sipName_replace), meth_QPolygonF_replace, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_replace)},
    {SIP_MLNAME_CAST(sipName_size), meth_QPolygonF_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_size)},
    {SIP_MLNAME_CAST(sipName_subtracted), meth_QPolygonF_subtracted, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_subtracted)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QPolygonF_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_swap)},
    {SIP_MLNAME_CAST(sipName_toPolygon), meth_QPolygonF_toPolygon, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_toPolygon)},
    {SIP_MLNAME_CAST(sipName_translate), meth_QPolygonF_translate, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_translate)},
    {SIP_MLNAME_CAST(sipName_translated), meth_QPolygonF_translated, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_translated)},
    {SIP_MLNAME_CAST(sipName_united), meth_QPolygonF_united, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_united)},
    {SIP_MLNAME_CAST(sipName_value), meth_QPolygonF_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_value)}
};

PyDoc_STRVAR(doc_QPolygonF, "\1QPolygonF()\n"
"QPolygonF(QPolygonF)\n"
"QPolygonF(Iterable[Union[QPointF, QPoint]])\n"
"QPolygonF(QRectF)\n"
"QPolygonF(QPolygon)\n"
"QPolygonF(int)");


static pyqt5ClassPluginDef plugin_QPolygonF = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QPolygonF = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPolygonF,
        {SIP_NULLPTR},
        &plugin_QPolygonF
    },
    {
        sipNameNr_QPolygonF,
        {0, 0, 1},
        30, methods_QPolygonF,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPolygonF,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QPolygonF,
    init_type_QPolygonF,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QPolygonF,
    assign_QPolygonF,
    array_QPolygonF,
    copy_QPolygonF,
    release_QPolygonF,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 72979 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 72983 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 72986 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 72989 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 72992 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 72995 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72998 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpolygon.sip"
// Set the points of a polygon from a Python list.
static bool setPointsFromList(QPolygon *poly, PyObject *l)
{
    int *coords = new int[PyList_Size(l)];

    for (Py_ssize_t i = 0; i < PyList_Size(l); ++i)
    {
        coords[i] = SIPLong_AsLong(PyList_GetItem(l, i));

        if (PyErr_Occurred() != NULL)
        {
            delete[] coords;
            return false;
        }
    }

    poly->setPoints(PyList_Size(l) >> 1, coords);

    delete[] coords;
    return true;
}
#line 73021 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QPolygon_translate, "translate(self, int, int)\n"
"translate(self, QPoint)");

extern "C" {static PyObject *meth_QPolygon_translate(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_translate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QPolygon, &sipCpp, &a0, &a1))
        {
            sipCpp->translate(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPoint* a0;
         ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPolygon, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->translate(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_translate, doc_QPolygon_translate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygon_boundingRect, "boundingRect(self) -> QRect");

extern "C" {static PyObject *meth_QPolygon_boundingRect(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_boundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygon, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->boundingRect());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_boundingRect, doc_QPolygon_boundingRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygon_point, "point(self, int) -> QPoint");

extern "C" {static PyObject *meth_QPolygon_point(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_point(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPolygon, &sipCpp, &a0))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->point(a0));

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_point, doc_QPolygon_point);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygon_setPoints, "setPoints(self, List[int])\n"
"setPoints(self, int, int, *)");

extern "C" {static PyObject *meth_QPolygon_setPoints(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_setPoints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;
         ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BT", &sipSelf, sipType_QPolygon, &sipCpp, &PyList_Type, &a0))
        {
            int sipIsErr = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpolygon.sip"
        if (!setPointsFromList(sipCpp, a0))
            sipIsErr = 1;
#line 73146 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        PyObject * a2;
         ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiW", &sipSelf, sipType_QPolygon, &sipCpp, &a0, &a1, &a2))
        {
#line 107 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpolygon.sip"
        // Accept at least one pair of integer coordinates.
        int nPoints = 1 + ((PyTuple_Size(a2) + 1) >> 1);
        
        int *points = new int[nPoints * 2];
        
        points[0] = a0;
        points[1] = a1;
        
        for (Py_ssize_t i = 0; i < PyTuple_Size(a2); ++i)
            points[2 + i] = SIPLong_AsLong(PyTuple_GetItem(a2, i));
        
        sipCpp->setPoints(nPoints, points);
        
        delete[] points;
#line 73179 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            Py_DECREF(a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_setPoints, doc_QPolygon_setPoints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygon_putPoints, "putPoints(self, int, int, int, *)\n"
"putPoints(self, int, int, QPolygon, from_: int = 0)");

extern "C" {static PyObject *meth_QPolygon_putPoints(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPolygon_putPoints(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        PyObject * a3;
         ::QPolygon *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BiiiW", &sipSelf, sipType_QPolygon, &sipCpp, &a0, &a1, &a2, &a3))
        {
#line 125 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpolygon.sip"
        // Accept at least one pair of integer coordinates.
        int nPoints = 1 + ((PyTuple_Size(a3) + 1) >> 1);
        
        int *points = new int[nPoints * 2];
        
        points[0] = a1;
        points[1] = a2;
        
        for (Py_ssize_t i = 0; i < PyTuple_Size(a3); ++i)
            points[2 + i] = SIPLong_AsLong(PyTuple_GetItem(a3, i));
        
        sipCpp->putPoints(a0, nPoints, points);
        
        delete[] points;
#line 73229 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            Py_DECREF(a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        const  ::QPolygon* a2;
        int a3 = 0;
         ::QPolygon *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_from,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiiJ9|i", &sipSelf, sipType_QPolygon, &sipCpp, &a0, &a1, sipType_QPolygon, &a2, &a3))
        {
            sipCpp->putPoints(a0,a1,*a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_putPoints, doc_QPolygon_putPoints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygon_setPoint, "setPoint(self, int, QPoint)\n"
"setPoint(self, int, int, int)");

extern "C" {static PyObject *meth_QPolygon_setPoint(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_setPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QPoint* a1;
         ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QPolygon, &sipCpp, &a0, sipType_QPoint, &a1))
        {
            sipCpp->setPoint(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
         ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biii", &sipSelf, sipType_QPolygon, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->setPoint(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_setPoint, doc_QPolygon_setPoint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygon_containsPoint, "containsPoint(self, QPoint, Qt.FillRule) -> bool");

extern "C" {static PyObject *meth_QPolygon_containsPoint(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_containsPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
         ::Qt::FillRule a1;
        const  ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QPolygon, &sipCpp, sipType_QPoint, &a0, sipType_Qt_FillRule, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->containsPoint(*a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_containsPoint, doc_QPolygon_containsPoint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygon_united, "united(self, QPolygon) -> QPolygon");

extern "C" {static PyObject *meth_QPolygon_united(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_united(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPolygon* a0;
        const  ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPolygon, &sipCpp, sipType_QPolygon, &a0))
        {
             ::QPolygon*sipRes;

            sipRes = new  ::QPolygon(sipCpp->united(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPolygon,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_united, doc_QPolygon_united);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygon_intersected, "intersected(self, QPolygon) -> QPolygon");

extern "C" {static PyObject *meth_QPolygon_intersected(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_intersected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPolygon* a0;
        const  ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPolygon, &sipCpp, sipType_QPolygon, &a0))
        {
             ::QPolygon*sipRes;

            sipRes = new  ::QPolygon(sipCpp->intersected(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPolygon,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_intersected, doc_QPolygon_intersected);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygon_subtracted, "subtracted(self, QPolygon) -> QPolygon");

extern "C" {static PyObject *meth_QPolygon_subtracted(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_subtracted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPolygon* a0;
        const  ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPolygon, &sipCpp, sipType_QPolygon, &a0))
        {
             ::QPolygon*sipRes;

            sipRes = new  ::QPolygon(sipCpp->subtracted(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPolygon,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_subtracted, doc_QPolygon_subtracted);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygon_translated, "translated(self, int, int) -> QPolygon\n"
"translated(self, QPoint) -> QPolygon");

extern "C" {static PyObject *meth_QPolygon_translated(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_translated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        const  ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QPolygon, &sipCpp, &a0, &a1))
        {
             ::QPolygon*sipRes;

            sipRes = new  ::QPolygon(sipCpp->translated(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QPolygon,SIP_NULLPTR);
        }
    }

    {
        const  ::QPoint* a0;
        const  ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPolygon, &sipCpp, sipType_QPoint, &a0))
        {
             ::QPolygon*sipRes;

            sipRes = new  ::QPolygon(sipCpp->translated(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPolygon,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_translated, doc_QPolygon_translated);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygon_append, "append(self, QPoint)");

extern "C" {static PyObject *meth_QPolygon_append(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_append(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
         ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPolygon, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->append(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_append, doc_QPolygon_append);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygon_at, "at(self, int) -> QPoint");

extern "C" {static PyObject *meth_QPolygon_at(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_at(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPolygon, &sipCpp, &a0))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->at(a0));

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_at, doc_QPolygon_at);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygon_clear, "clear(self)");

extern "C" {static PyObject *meth_QPolygon_clear(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygon, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_clear, doc_QPolygon_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygon_contains, "contains(self, QPoint) -> bool");

extern "C" {static PyObject *meth_QPolygon_contains(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_contains(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
        const  ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPolygon, &sipCpp, sipType_QPoint, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->contains(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_contains, doc_QPolygon_contains);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygon_count, "count(self, QPoint) -> int\n"
"count(self) -> int");

extern "C" {static PyObject *meth_QPolygon_count(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
        const  ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPolygon, &sipCpp, sipType_QPoint, &a0))
        {
            int sipRes;

            sipRes = sipCpp->count(*a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const  ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygon, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->count();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_count, doc_QPolygon_count);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygon_data, "data(self) -> sip.voidptr");

extern "C" {static PyObject *meth_QPolygon_data(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygon, &sipCpp))
        {
            void*sipRes;

            sipRes = sipCpp->data();

            return sipConvertFromVoidPtr(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_data, doc_QPolygon_data);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygon_fill, "fill(self, QPoint, size: int = -1)");

extern "C" {static PyObject *meth_QPolygon_fill(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPolygon_fill(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
        int a1 = -1;
         ::QPolygon *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_size,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|i", &sipSelf, sipType_QPolygon, &sipCpp, sipType_QPoint, &a0, &a1))
        {
            sipCpp->fill(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_fill, doc_QPolygon_fill);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygon_first, "first(self) -> QPoint");

extern "C" {static PyObject *meth_QPolygon_first(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_first(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygon, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = &sipCpp->first();

            return sipConvertFromType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_first, doc_QPolygon_first);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygon_indexOf, "indexOf(self, QPoint, from_: int = 0) -> int");

extern "C" {static PyObject *meth_QPolygon_indexOf(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPolygon_indexOf(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
        int a1 = 0;
        const  ::QPolygon *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_from,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|i", &sipSelf, sipType_QPolygon, &sipCpp, sipType_QPoint, &a0, &a1))
        {
            int sipRes;

            sipRes = sipCpp->indexOf(*a0,a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_indexOf, doc_QPolygon_indexOf);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygon_insert, "insert(self, int, QPoint)");

extern "C" {static PyObject *meth_QPolygon_insert(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_insert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QPoint* a1;
         ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QPolygon, &sipCpp, &a0, sipType_QPoint, &a1))
        {
            sipCpp->insert(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_insert, doc_QPolygon_insert);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygon_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QPolygon_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygon, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_isEmpty, doc_QPolygon_isEmpty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygon_last, "last(self) -> QPoint");

extern "C" {static PyObject *meth_QPolygon_last(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_last(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygon, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = &sipCpp->last();

            return sipConvertFromType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_last, doc_QPolygon_last);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygon_lastIndexOf, "lastIndexOf(self, QPoint, from_: int = -1) -> int");

extern "C" {static PyObject *meth_QPolygon_lastIndexOf(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPolygon_lastIndexOf(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
        int a1 = -1;
        const  ::QPolygon *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_from,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|i", &sipSelf, sipType_QPolygon, &sipCpp, sipType_QPoint, &a0, &a1))
        {
            int sipRes;

            sipRes = sipCpp->lastIndexOf(*a0,a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_lastIndexOf, doc_QPolygon_lastIndexOf);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygon_mid, "mid(self, int, length: int = -1) -> QPolygon");

extern "C" {static PyObject *meth_QPolygon_mid(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPolygon_mid(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1 = -1;
        const  ::QPolygon *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_length,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|i", &sipSelf, sipType_QPolygon, &sipCpp, &a0, &a1))
        {
             ::QPolygon*sipRes;

            sipRes = new  ::QPolygon(sipCpp->mid(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QPolygon,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_mid, doc_QPolygon_mid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygon_prepend, "prepend(self, QPoint)");

extern "C" {static PyObject *meth_QPolygon_prepend(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_prepend(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
         ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPolygon, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->prepend(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_prepend, doc_QPolygon_prepend);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygon_remove, "remove(self, int)\n"
"remove(self, int, int)");

extern "C" {static PyObject *meth_QPolygon_remove(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPolygon, &sipCpp, &a0))
        {
            sipCpp->remove(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
         ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QPolygon, &sipCpp, &a0, &a1))
        {
            sipCpp->remove(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_remove, doc_QPolygon_remove);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygon_replace, "replace(self, int, QPoint)");

extern "C" {static PyObject *meth_QPolygon_replace(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_replace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QPoint* a1;
         ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QPolygon, &sipCpp, &a0, sipType_QPoint, &a1))
        {
            sipCpp->replace(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_replace, doc_QPolygon_replace);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygon_size, "size(self) -> int");

extern "C" {static PyObject *meth_QPolygon_size(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygon, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->size();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_size, doc_QPolygon_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygon_value, "value(self, int) -> QPoint\n"
"value(self, int, QPoint) -> QPoint");

extern "C" {static PyObject *meth_QPolygon_value(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPolygon, &sipCpp, &a0))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->value(a0));

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    {
        int a0;
        const  ::QPoint* a1;
        const  ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QPolygon, &sipCpp, &a0, sipType_QPoint, &a1))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->value(a0,*a1));

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_value, doc_QPolygon_value);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygon_swap, "swap(self, QPolygon)");

extern "C" {static PyObject *meth_QPolygon_swap(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPolygon* a0;
         ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPolygon, &sipCpp, sipType_QPolygon, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_swap, doc_QPolygon_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPolygon_intersects, "intersects(self, QPolygon) -> bool");

extern "C" {static PyObject *meth_QPolygon_intersects(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_intersects(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPolygon* a0;
        const  ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPolygon, &sipCpp, sipType_QPolygon, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->intersects(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_intersects, doc_QPolygon_intersects);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QPolygon___mul__(PyObject *,PyObject *);}
static PyObject *slot_QPolygon___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPolygon* a0;
        const  ::QTransform* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QPolygon, &a0, sipType_QTransform, &a1))
        {
             ::QPolygon*sipRes;

            sipRes = new  ::QPolygon((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QPolygon,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, mul_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static int slot_QPolygon___contains__(PyObject *,PyObject *);}
static int slot_QPolygon___contains__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPolygon *sipCpp = reinterpret_cast< ::QPolygon *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygon));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPoint, &a0))
        {
            int sipRes = 0;

#line 303 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpolygon.sip"
// It looks like you can't assign QBool to int.
sipRes = bool(sipCpp->contains(*a0));
#line 74194 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName___contains__, SIP_NULLPTR);

    return -1;
}


extern "C" {static int slot_QPolygon___delitem__(PyObject *,PyObject *);}
static int slot_QPolygon___delitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPolygon *sipCpp = reinterpret_cast< ::QPolygon *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygon));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            int sipIsErr = 0;

#line 257 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpolygon.sip"
if ((a0 = (int)sipConvertFromSequenceIndex(a0, sipCpp->count())) < 0)
    sipIsErr = 1;
else
    sipCpp->remove(a0);
#line 74229 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1T", &PySlice_Type, &a0))
        {
            int sipIsErr = 0;

#line 265 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpolygon.sip"
Py_ssize_t start, stop, step, slicelength;

if (sipConvertFromSliceObject(a0, sipCpp->count(), &start, &stop, &step, &slicelength) < 0)
{
    sipIsErr = 1;
}
else
{
    for (Py_ssize_t i = 0; i < slicelength; ++i)
    {
        sipCpp->remove(start);
        start += step - 1;
    }
}
#line 74260 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName___delitem__, SIP_NULLPTR);

    return -1;
}


extern "C" {static int slot_QPolygon___setitem__(PyObject *,PyObject *);}
static int slot_QPolygon___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
     ::QPolygon *sipCpp = reinterpret_cast< ::QPolygon *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygon));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QPoint* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "iJ9", &a0, sipType_QPoint, &a1))
        {
            int sipIsErr = 0;

#line 214 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpolygon.sip"
int len;

len = sipCpp->count();

if ((a0 = (int)sipConvertFromSequenceIndex(a0, len)) < 0)
    sipIsErr = 1;
else
    (*sipCpp)[a0] = *a1;
#line 74303 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    {
        PyObject * a0;
        const  ::QPolygon* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "TJ9", &PySlice_Type, &a0, sipType_QPolygon, &a1))
        {
            int sipIsErr = 0;

#line 226 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpolygon.sip"
Py_ssize_t start, stop, step, slicelength;

if (sipConvertFromSliceObject(a0, sipCpp->count(), &start, &stop, &step, &slicelength) < 0)
{
    sipIsErr = 1;
}
else
{
    int vlen = a1->count();

    if (vlen != slicelength)
    {
        sipBadLengthForSlice(vlen, slicelength);
        sipIsErr = 1;
    }
    else
    {
        QVector<QPoint>::const_iterator it = a1->begin();

        for (Py_ssize_t i = 0; i < slicelength; ++i)
        {
            (*sipCpp)[start] = *it;
            start += step;
            ++it;
        }
    }
}
#line 74348 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName___setitem__, SIP_NULLPTR);

    return -1;
}


extern "C" {static PyObject *slot_QPolygon___getitem__(PyObject *,PyObject *);}
static PyObject *slot_QPolygon___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPolygon *sipCpp = reinterpret_cast< ::QPolygon *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygon));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
             ::QPoint*sipRes = 0;
            int sipIsErr = 0;

#line 202 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpolygon.sip"
Py_ssize_t idx = sipConvertFromSequenceIndex(a0, sipCpp->count());

if (idx < 0)
    sipIsErr = 1;
else
    sipRes = new QPoint(sipCpp->operator[]((int)idx));
#line 74389 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1T", &PySlice_Type, &a0))
        {
             ::QPolygon*sipRes = 0;
            int sipIsErr = 0;

#line 283 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpolygon.sip"
Py_ssize_t start, stop, step, slicelength;

if (sipConvertFromSliceObject(a0, sipCpp->count(), &start, &stop, &step, &slicelength) < 0)
{
    sipIsErr = 1;
}
else
{
    sipRes = new QPolygon();

    for (Py_ssize_t i = 0; i < slicelength; ++i)
    {
        (*sipRes) += (*sipCpp)[start];
        start += step;
    }
}
#line 74423 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromType(sipRes,sipType_QPolygon,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName___getitem__, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QPolygon___lshift__(PyObject *,PyObject *);}
static PyObject *slot_QPolygon___lshift__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPolygon* a0;
        const  ::QPoint* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QPolygon, &a0, sipType_QPoint, &a1))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 194 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpolygon.sip"
    *a0 << *a1;

    sipRes = sipArg0;
    Py_INCREF(sipRes);
#line 74457 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipRes;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, lshift_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QPolygon___eq__(PyObject *,PyObject *);}
static PyObject *slot_QPolygon___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPolygon *sipCpp = reinterpret_cast< ::QPolygon *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygon));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPolygon* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPolygon, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QPolygon::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QPolygon, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QPolygon___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QPolygon___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPolygon *sipCpp = reinterpret_cast< ::QPolygon *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygon));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPolygon* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPolygon, &a0))
        {
            sipCpp-> ::QPolygon::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        const  ::QPoint* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPoint, &a0))
        {
            sipCpp-> ::QPolygon::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    /* Raise an exception if the argument couldn't be parsed. */
    sipBadOperatorArg(sipSelf,sipArg,iconcat_slot);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QPolygon___add__(PyObject *,PyObject *);}
static PyObject *slot_QPolygon___add__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPolygon *sipCpp = reinterpret_cast< ::QPolygon *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygon));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPolygon* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPolygon, &a0))
        {
             ::QPolygon*sipRes;

            sipRes = new  ::QPolygon(sipCpp-> ::QPolygon::operator+(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPolygon,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the argument couldn't be parsed. */
    sipBadOperatorArg(sipSelf,sipArg,concat_slot);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QPolygon___ne__(PyObject *,PyObject *);}
static PyObject *slot_QPolygon___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPolygon *sipCpp = reinterpret_cast< ::QPolygon *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygon));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPolygon* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPolygon, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QPolygon::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QPolygon, sipSelf, sipArg);
}


extern "C" {static SIP_SSIZE_T slot_QPolygon___len__(PyObject *);}
static SIP_SSIZE_T slot_QPolygon___len__(PyObject *sipSelf)
{
     ::QPolygon *sipCpp = reinterpret_cast< ::QPolygon *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygon));

    if (!sipCpp)
        return 0;


    {
        {
            SIP_SSIZE_T sipRes = 0;

#line 1 "Auto-generated"
            sipRes = (SIP_SSIZE_T)sipCpp->count();
#line 74622 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPolygon(void *, int);}
static void release_QPolygon(void *sipCppV, int)
{
    delete reinterpret_cast< ::QPolygon *>(sipCppV);
}


extern "C" {static PyObject *pickle_QPolygon(void *);}
static PyObject *pickle_QPolygon(void *sipCppV)
{
     ::QPolygon *sipCpp = reinterpret_cast< ::QPolygon *>(sipCppV);
    PyObject *sipRes;

#line 54 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpolygon.sip"
    PyObject *pl = PyList_New(sipCpp->count() * 2);
    
    for (int p = 0, i = 0; i < sipCpp->count(); ++i, p += 2)
    {
        int x, y;
    
        sipCpp->point(i, &x, &y);
    
        PyList_SetItem(pl, p, SIPLong_FromLong(x));
        PyList_SetItem(pl, p + 1, SIPLong_FromLong(y));
    }
    
    sipRes = Py_BuildValue((char *)"(N)", pl);
#line 74660 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

    return sipRes;
}


extern "C" {static void assign_QPolygon(void *, SIP_SSIZE_T, void *);}
static void assign_QPolygon(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QPolygon *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QPolygon *>(sipSrc);
}


extern "C" {static void *array_QPolygon(SIP_SSIZE_T);}
static void *array_QPolygon(SIP_SSIZE_T sipNrElem)
{
    return new  ::QPolygon[sipNrElem];
}


extern "C" {static void *copy_QPolygon(const void *, SIP_SSIZE_T);}
static void *copy_QPolygon(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QPolygon(reinterpret_cast<const  ::QPolygon *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPolygon(sipSimpleWrapper *);}
static void dealloc_QPolygon(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPolygon(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QPolygon(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPolygon(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QPolygon *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QPolygon();

            return sipCpp;
        }
    }

    {
        const  ::QPolygon* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QPolygon, &a0))
        {
            sipCpp = new  ::QPolygon(*a0);

            return sipCpp;
        }
    }

    {
        const QVector< ::QPoint>* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QVector_0100QPoint,&a0, &a0State))
        {
            sipCpp = new  ::QPolygon(*a0);
            sipReleaseType(const_cast<QVector< ::QPoint> *>(a0),sipType_QVector_0100QPoint,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QRect* a0;
        bool a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_closed,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|b", sipType_QRect, &a0, &a1))
        {
            sipCpp = new  ::QPolygon(*a0,a1);

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QPolygon(a0);

            return sipCpp;
        }
    }

    {
        PyObject * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "T", &PyList_Type, &a0))
        {
            int sipIsErr = 0;

#line 78 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpolygon.sip"
        sipCpp = new QPolygon();
        
        if (!setPointsFromList(sipCpp, a0))
        {
            delete sipCpp;
            sipCpp = 0;
            sipIsErr = 1;
        }
#line 74779 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            if (sipIsErr)
            {
                if (sipUnused)
                {
                    Py_XDECREF(*sipUnused);
                }

                sipAddException(sipErrorFail, sipParseErr);
                return SIP_NULLPTR;
            }

            return sipCpp;
        }
    }

    {
        const  ::QVariant* a0;
        PyObject *a0Wrapper;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "@J1", &a0Wrapper, sipType_QVariant, &a0, &a0State))
        {
            sipErrorState sipError = sipErrorNone;

#line 90 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpolygon.sip"
        if (a0->canConvert<QPolygon>())
            sipCpp = new QPolygon(a0->value<QPolygon>());
        else
            sipError = sipBadCallableArg(0, a0Wrapper);
#line 74810 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            if (sipError == sipErrorNone)
                return sipCpp;

            if (sipUnused)
            {
                Py_XDECREF(*sipUnused);
            }

            sipAddException(sipError, sipParseErr);

            if (sipError == sipErrorFail)
                return SIP_NULLPTR;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QPolygon[] = {
    {(void *)slot_QPolygon___mul__, mul_slot},
    {(void *)slot_QPolygon___contains__, contains_slot},
    {(void *)slot_QPolygon___delitem__, delitem_slot},
    {(void *)slot_QPolygon___setitem__, setitem_slot},
    {(void *)slot_QPolygon___getitem__, getitem_slot},
    {(void *)slot_QPolygon___lshift__, lshift_slot},
    {(void *)slot_QPolygon___eq__, eq_slot},
    {(void *)slot_QPolygon___iadd__, iconcat_slot},
    {(void *)slot_QPolygon___add__, concat_slot},
    {(void *)slot_QPolygon___ne__, ne_slot},
    {(void *)slot_QPolygon___len__, len_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QPolygon[] = {
    {SIP_MLNAME_CAST(sipName_append), meth_QPolygon_append, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_append)},
    {SIP_MLNAME_CAST(sipName_at), meth_QPolygon_at, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_at)},
    {SIP_MLNAME_CAST(sipName_boundingRect), meth_QPolygon_boundingRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_boundingRect)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QPolygon_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_clear)},
    {SIP_MLNAME_CAST(sipName_contains), meth_QPolygon_contains, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_contains)},
    {SIP_MLNAME_CAST(sipName_containsPoint), meth_QPolygon_containsPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_containsPoint)},
    {SIP_MLNAME_CAST(sipName_count), meth_QPolygon_count, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_count)},
    {SIP_MLNAME_CAST(sipName_data), meth_QPolygon_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_data)},
    {SIP_MLNAME_CAST(sipName_fill), SIP_MLMETH_CAST(meth_QPolygon_fill), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPolygon_fill)},
    {SIP_MLNAME_CAST(sipName_first), meth_QPolygon_first, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_first)},
    {SIP_MLNAME_CAST(sipName_indexOf), SIP_MLMETH_CAST(meth_QPolygon_indexOf), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPolygon_indexOf)},
    {SIP_MLNAME_CAST(sipName_insert), meth_QPolygon_insert, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_insert)},
    {SIP_MLNAME_CAST(sipName_intersected), meth_QPolygon_intersected, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_intersected)},
    {SIP_MLNAME_CAST(sipName_intersects), meth_QPolygon_intersects, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_intersects)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QPolygon_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_isEmpty)},
    {SIP_MLNAME_CAST(sipName_last), meth_QPolygon_last, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_last)},
    {SIP_MLNAME_CAST(sipName_lastIndexOf), SIP_MLMETH_CAST(meth_QPolygon_lastIndexOf), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPolygon_lastIndexOf)},
    {SIP_MLNAME_CAST(sipName_mid), SIP_MLMETH_CAST(meth_QPolygon_mid), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPolygon_mid)},
    {SIP_MLNAME_CAST(sipName_point), meth_QPolygon_point, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_point)},
    {SIP_MLNAME_CAST(sipName_prepend), meth_QPolygon_prepend, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_prepend)},
    {SIP_MLNAME_CAST(sipName_putPoints), SIP_MLMETH_CAST(meth_QPolygon_putPoints), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPolygon_putPoints)},
    {SIP_MLNAME_CAST(sipName_remove), meth_QPolygon_remove, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_remove)},
    {SIP_MLNAME_CAST(sipName_replace), meth_QPolygon_replace, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_replace)},
    {SIP_MLNAME_CAST(sipName_setPoint), meth_QPolygon_setPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_setPoint)},
    {SIP_MLNAME_CAST(sipName_setPoints), meth_QPolygon_setPoints, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_setPoints)},
    {SIP_MLNAME_CAST(sipName_size), meth_QPolygon_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_size)},
    {SIP_MLNAME_CAST(sipName_subtracted), meth_QPolygon_subtracted, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_subtracted)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QPolygon_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_swap)},
    {SIP_MLNAME_CAST(sipName_translate), meth_QPolygon_translate, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_translate)},
    {SIP_MLNAME_CAST(sipName_translated), meth_QPolygon_translated, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_translated)},
    {SIP_MLNAME_CAST(sipName_united), meth_QPolygon_united, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_united)},
    {SIP_MLNAME_CAST(sipName_value), meth_QPolygon_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_value)}
};

PyDoc_STRVAR(doc_QPolygon, "\1QPolygon()\n"
"QPolygon(QPolygon)\n"
"QPolygon(Iterable[QPoint])\n"
"QPolygon(QRect, closed: bool = False)\n"
"QPolygon(int)\n"
"QPolygon(List[int])\n"
"QPolygon(Any)");


static pyqt5ClassPluginDef plugin_QPolygon = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QPolygon = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPolygon,
        {SIP_NULLPTR},
        &plugin_QPolygon
    },
    {
        sipNameNr_QPolygon,
        {0, 0, 1},
        32, methods_QPolygon,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPolygon,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QPolygon,
    init_type_QPolygon,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QPolygon,
    assign_QPolygon,
    array_QPolygon,
    copy_QPolygon,
    release_QPolygon,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    pickle_QPolygon,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpixmapcache.sip"
#include <qpixmapcache.h>
#line 33 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpixmapcache.sip"
#include <qpixmapcache.h>
#line 74961 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"



PyDoc_STRVAR(doc_QPixmapCache_Key_swap, "swap(self, QPixmapCache.Key)");

extern "C" {static PyObject *meth_QPixmapCache_Key_swap(PyObject *, PyObject *);}
static PyObject *meth_QPixmapCache_Key_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPixmapCache::Key* a0;
         ::QPixmapCache::Key *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPixmapCache_Key, &sipCpp, sipType_QPixmapCache_Key, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Key, sipName_swap, doc_QPixmapCache_Key_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmapCache_Key_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QPixmapCache_Key_isValid(PyObject *, PyObject *);}
static PyObject *meth_QPixmapCache_Key_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixmapCache::Key *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixmapCache_Key, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Key, sipName_isValid, doc_QPixmapCache_Key_isValid);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QPixmapCache_Key___ne__(PyObject *,PyObject *);}
static PyObject *slot_QPixmapCache_Key___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPixmapCache::Key *sipCpp = reinterpret_cast< ::QPixmapCache::Key *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPixmapCache_Key));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixmapCache::Key* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPixmapCache_Key, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QPixmapCache::Key::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QPixmapCache_Key, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QPixmapCache_Key___eq__(PyObject *,PyObject *);}
static PyObject *slot_QPixmapCache_Key___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPixmapCache::Key *sipCpp = reinterpret_cast< ::QPixmapCache::Key *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPixmapCache_Key));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixmapCache::Key* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPixmapCache_Key, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QPixmapCache::Key::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QPixmapCache_Key, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QPixmapCache_Key(void *, int);}
static void release_QPixmapCache_Key(void *sipCppV, int)
{
    delete reinterpret_cast< ::QPixmapCache::Key *>(sipCppV);
}


extern "C" {static void assign_QPixmapCache_Key(void *, SIP_SSIZE_T, void *);}
static void assign_QPixmapCache_Key(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QPixmapCache::Key *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QPixmapCache::Key *>(sipSrc);
}


extern "C" {static void *array_QPixmapCache_Key(SIP_SSIZE_T);}
static void *array_QPixmapCache_Key(SIP_SSIZE_T sipNrElem)
{
    return new  ::QPixmapCache::Key[sipNrElem];
}


extern "C" {static void *copy_QPixmapCache_Key(const void *, SIP_SSIZE_T);}
static void *copy_QPixmapCache_Key(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QPixmapCache::Key(reinterpret_cast<const  ::QPixmapCache::Key *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPixmapCache_Key(sipSimpleWrapper *);}
static void dealloc_QPixmapCache_Key(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPixmapCache_Key(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QPixmapCache_Key(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPixmapCache_Key(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QPixmapCache::Key *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QPixmapCache::Key();

            return sipCpp;
        }
    }

    {
        const  ::QPixmapCache::Key* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QPixmapCache_Key, &a0))
        {
            sipCpp = new  ::QPixmapCache::Key(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QPixmapCache_Key[] = {
    {(void *)slot_QPixmapCache_Key___ne__, ne_slot},
    {(void *)slot_QPixmapCache_Key___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QPixmapCache_Key[] = {
    {SIP_MLNAME_CAST(sipName_isValid), meth_QPixmapCache_Key_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmapCache_Key_isValid)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QPixmapCache_Key_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmapCache_Key_swap)}
};

PyDoc_STRVAR(doc_QPixmapCache_Key, "\1QPixmapCache.Key()\n"
"QPixmapCache.Key(QPixmapCache.Key)");


static pyqt5ClassPluginDef plugin_QPixmapCache_Key = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QPixmapCache_Key = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPixmapCache__Key,
        {SIP_NULLPTR},
        &plugin_QPixmapCache_Key
    },
    {
        sipNameNr_Key,
        {232, 255, 0},
        2, methods_QPixmapCache_Key,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPixmapCache_Key,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QPixmapCache_Key,
    init_type_QPixmapCache_Key,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QPixmapCache_Key,
    assign_QPixmapCache_Key,
    array_QPixmapCache_Key,
    copy_QPixmapCache_Key,
    release_QPixmapCache_Key,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpixmapcache.sip"
#include <qpixmapcache.h>
#line 75231 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpixmapcache.sip"
#include <qpixmapcache.h>
#line 33 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpixmapcache.sip"
#include <qpixmapcache.h>
#line 75237 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 75240 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 75243 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QPixmapCache_cacheLimit, "cacheLimit() -> int");

extern "C" {static PyObject *meth_QPixmapCache_cacheLimit(PyObject *, PyObject *);}
static PyObject *meth_QPixmapCache_cacheLimit(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            sipRes =  ::QPixmapCache::cacheLimit();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmapCache, sipName_cacheLimit, doc_QPixmapCache_cacheLimit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmapCache_clear, "clear()");

extern "C" {static PyObject *meth_QPixmapCache_clear(PyObject *, PyObject *);}
static PyObject *meth_QPixmapCache_clear(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QPixmapCache::clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmapCache, sipName_clear, doc_QPixmapCache_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmapCache_find, "find(str) -> QPixmap\n"
"find(QPixmapCache.Key) -> QPixmap");

extern "C" {static PyObject *meth_QPixmapCache_find(PyObject *, PyObject *);}
static PyObject *meth_QPixmapCache_find(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QPixmap*sipRes = 0;

#line 54 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpixmapcache.sip"
        sipRes = new QPixmap;
        
        if (!QPixmapCache::find(*a0, sipRes))
        {
            delete sipRes;
            sipRes = 0;
        }
#line 75323 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
        }
    }

    {
        const  ::QPixmapCache::Key* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QPixmapCache_Key, &a0))
        {
             ::QPixmap*sipRes = 0;

#line 65 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpixmapcache.sip"
        sipRes = new QPixmap;
        
        if (!QPixmapCache::find(*a0, sipRes))
        {
            delete sipRes;
            sipRes = 0;
        }
#line 75345 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmapCache, sipName_find, doc_QPixmapCache_find);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmapCache_insert, "insert(str, QPixmap) -> bool\n"
"insert(QPixmap) -> QPixmapCache.Key");

extern "C" {static PyObject *meth_QPixmapCache_insert(PyObject *, PyObject *);}
static PyObject *meth_QPixmapCache_insert(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QPixmap* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J9", sipType_QString,&a0, &a0State, sipType_QPixmap, &a1))
        {
            bool sipRes;

            sipRes =  ::QPixmapCache::insert(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QPixmap* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QPixmap, &a0))
        {
             ::QPixmapCache::Key*sipRes;

            sipRes = new  ::QPixmapCache::Key( ::QPixmapCache::insert(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPixmapCache_Key,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmapCache, sipName_insert, doc_QPixmapCache_insert);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmapCache_remove, "remove(str)\n"
"remove(QPixmapCache.Key)");

extern "C" {static PyObject *meth_QPixmapCache_remove(PyObject *, PyObject *);}
static PyObject *meth_QPixmapCache_remove(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QPixmapCache::remove(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPixmapCache::Key* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QPixmapCache_Key, &a0))
        {
             ::QPixmapCache::remove(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmapCache, sipName_remove, doc_QPixmapCache_remove);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmapCache_replace, "replace(QPixmapCache.Key, QPixmap) -> bool");

extern "C" {static PyObject *meth_QPixmapCache_replace(PyObject *, PyObject *);}
static PyObject *meth_QPixmapCache_replace(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixmapCache::Key* a0;
        const  ::QPixmap* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9", sipType_QPixmapCache_Key, &a0, sipType_QPixmap, &a1))
        {
            bool sipRes;

            sipRes =  ::QPixmapCache::replace(*a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmapCache, sipName_replace, doc_QPixmapCache_replace);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixmapCache_setCacheLimit, "setCacheLimit(int)");

extern "C" {static PyObject *meth_QPixmapCache_setCacheLimit(PyObject *, PyObject *);}
static PyObject *meth_QPixmapCache_setCacheLimit(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
             ::QPixmapCache::setCacheLimit(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixmapCache, sipName_setCacheLimit, doc_QPixmapCache_setCacheLimit);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPixmapCache(void *, int);}
static void release_QPixmapCache(void *sipCppV, int)
{
    delete reinterpret_cast< ::QPixmapCache *>(sipCppV);
}


extern "C" {static void assign_QPixmapCache(void *, SIP_SSIZE_T, void *);}
static void assign_QPixmapCache(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QPixmapCache *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QPixmapCache *>(sipSrc);
}


extern "C" {static void *array_QPixmapCache(SIP_SSIZE_T);}
static void *array_QPixmapCache(SIP_SSIZE_T sipNrElem)
{
    return new  ::QPixmapCache[sipNrElem];
}


extern "C" {static void *copy_QPixmapCache(const void *, SIP_SSIZE_T);}
static void *copy_QPixmapCache(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QPixmapCache(reinterpret_cast<const  ::QPixmapCache *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPixmapCache(sipSimpleWrapper *);}
static void dealloc_QPixmapCache(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPixmapCache(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QPixmapCache(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPixmapCache(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QPixmapCache *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QPixmapCache();

            return sipCpp;
        }
    }

    {
        const  ::QPixmapCache* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QPixmapCache, &a0))
        {
            sipCpp = new  ::QPixmapCache(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QPixmapCache[] = {
    {SIP_MLNAME_CAST(sipName_cacheLimit), meth_QPixmapCache_cacheLimit, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmapCache_cacheLimit)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QPixmapCache_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmapCache_clear)},
    {SIP_MLNAME_CAST(sipName_find), meth_QPixmapCache_find, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmapCache_find)},
    {SIP_MLNAME_CAST(sipName_insert), meth_QPixmapCache_insert, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmapCache_insert)},
    {SIP_MLNAME_CAST(sipName_remove), meth_QPixmapCache_remove, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmapCache_remove)},
    {SIP_MLNAME_CAST(sipName_replace), meth_QPixmapCache_replace, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmapCache_replace)},
    {SIP_MLNAME_CAST(sipName_setCacheLimit), meth_QPixmapCache_setCacheLimit, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixmapCache_setCacheLimit)}
};

PyDoc_STRVAR(doc_QPixmapCache, "\1QPixmapCache()\n"
"QPixmapCache(QPixmapCache)");


static pyqt5ClassPluginDef plugin_QPixmapCache = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QPixmapCache = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPixmapCache,
        {SIP_NULLPTR},
        &plugin_QPixmapCache
    },
    {
        sipNameNr_QPixmapCache,
        {0, 0, 1},
        7, methods_QPixmapCache,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPixmapCache,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QPixmapCache,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QPixmapCache,
    assign_QPixmapCache,
    array_QPixmapCache,
    copy_QPixmapCache,
    release_QPixmapCache,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 34 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpixelformat.sip"
#include <qpixelformat.h>
#line 75646 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"



PyDoc_STRVAR(doc_QPixelFormat_colorModel, "colorModel(self) -> QPixelFormat.ColorModel");

extern "C" {static PyObject *meth_QPixelFormat_colorModel(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_colorModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::QPixelFormat::ColorModel sipRes;

            sipRes = sipCpp->colorModel();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QPixelFormat_ColorModel);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_colorModel, doc_QPixelFormat_colorModel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_channelCount, "channelCount(self) -> int");

extern "C" {static PyObject *meth_QPixelFormat_channelCount(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_channelCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::uchar sipRes;

            sipRes = sipCpp->channelCount();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_channelCount, doc_QPixelFormat_channelCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_redSize, "redSize(self) -> int");

extern "C" {static PyObject *meth_QPixelFormat_redSize(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_redSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::uchar sipRes;

            sipRes = sipCpp->redSize();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_redSize, doc_QPixelFormat_redSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_greenSize, "greenSize(self) -> int");

extern "C" {static PyObject *meth_QPixelFormat_greenSize(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_greenSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::uchar sipRes;

            sipRes = sipCpp->greenSize();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_greenSize, doc_QPixelFormat_greenSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_blueSize, "blueSize(self) -> int");

extern "C" {static PyObject *meth_QPixelFormat_blueSize(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_blueSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::uchar sipRes;

            sipRes = sipCpp->blueSize();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_blueSize, doc_QPixelFormat_blueSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_cyanSize, "cyanSize(self) -> int");

extern "C" {static PyObject *meth_QPixelFormat_cyanSize(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_cyanSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::uchar sipRes;

            sipRes = sipCpp->cyanSize();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_cyanSize, doc_QPixelFormat_cyanSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_magentaSize, "magentaSize(self) -> int");

extern "C" {static PyObject *meth_QPixelFormat_magentaSize(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_magentaSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::uchar sipRes;

            sipRes = sipCpp->magentaSize();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_magentaSize, doc_QPixelFormat_magentaSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_yellowSize, "yellowSize(self) -> int");

extern "C" {static PyObject *meth_QPixelFormat_yellowSize(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_yellowSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::uchar sipRes;

            sipRes = sipCpp->yellowSize();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_yellowSize, doc_QPixelFormat_yellowSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_blackSize, "blackSize(self) -> int");

extern "C" {static PyObject *meth_QPixelFormat_blackSize(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_blackSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::uchar sipRes;

            sipRes = sipCpp->blackSize();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_blackSize, doc_QPixelFormat_blackSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_hueSize, "hueSize(self) -> int");

extern "C" {static PyObject *meth_QPixelFormat_hueSize(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_hueSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::uchar sipRes;

            sipRes = sipCpp->hueSize();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_hueSize, doc_QPixelFormat_hueSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_saturationSize, "saturationSize(self) -> int");

extern "C" {static PyObject *meth_QPixelFormat_saturationSize(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_saturationSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::uchar sipRes;

            sipRes = sipCpp->saturationSize();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_saturationSize, doc_QPixelFormat_saturationSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_lightnessSize, "lightnessSize(self) -> int");

extern "C" {static PyObject *meth_QPixelFormat_lightnessSize(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_lightnessSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::uchar sipRes;

            sipRes = sipCpp->lightnessSize();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_lightnessSize, doc_QPixelFormat_lightnessSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_brightnessSize, "brightnessSize(self) -> int");

extern "C" {static PyObject *meth_QPixelFormat_brightnessSize(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_brightnessSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::uchar sipRes;

            sipRes = sipCpp->brightnessSize();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_brightnessSize, doc_QPixelFormat_brightnessSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_alphaSize, "alphaSize(self) -> int");

extern "C" {static PyObject *meth_QPixelFormat_alphaSize(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_alphaSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::uchar sipRes;

            sipRes = sipCpp->alphaSize();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_alphaSize, doc_QPixelFormat_alphaSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_bitsPerPixel, "bitsPerPixel(self) -> int");

extern "C" {static PyObject *meth_QPixelFormat_bitsPerPixel(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_bitsPerPixel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::uchar sipRes;

            sipRes = sipCpp->bitsPerPixel();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_bitsPerPixel, doc_QPixelFormat_bitsPerPixel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_alphaUsage, "alphaUsage(self) -> QPixelFormat.AlphaUsage");

extern "C" {static PyObject *meth_QPixelFormat_alphaUsage(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_alphaUsage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::QPixelFormat::AlphaUsage sipRes;

            sipRes = sipCpp->alphaUsage();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QPixelFormat_AlphaUsage);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_alphaUsage, doc_QPixelFormat_alphaUsage);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_alphaPosition, "alphaPosition(self) -> QPixelFormat.AlphaPosition");

extern "C" {static PyObject *meth_QPixelFormat_alphaPosition(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_alphaPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::QPixelFormat::AlphaPosition sipRes;

            sipRes = sipCpp->alphaPosition();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QPixelFormat_AlphaPosition);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_alphaPosition, doc_QPixelFormat_alphaPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_premultiplied, "premultiplied(self) -> QPixelFormat.AlphaPremultiplied");

extern "C" {static PyObject *meth_QPixelFormat_premultiplied(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_premultiplied(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::QPixelFormat::AlphaPremultiplied sipRes;

            sipRes = sipCpp->premultiplied();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QPixelFormat_AlphaPremultiplied);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_premultiplied, doc_QPixelFormat_premultiplied);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_typeInterpretation, "typeInterpretation(self) -> QPixelFormat.TypeInterpretation");

extern "C" {static PyObject *meth_QPixelFormat_typeInterpretation(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_typeInterpretation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::QPixelFormat::TypeInterpretation sipRes;

            sipRes = sipCpp->typeInterpretation();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QPixelFormat_TypeInterpretation);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_typeInterpretation, doc_QPixelFormat_typeInterpretation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_byteOrder, "byteOrder(self) -> QPixelFormat.ByteOrder");

extern "C" {static PyObject *meth_QPixelFormat_byteOrder(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_byteOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::QPixelFormat::ByteOrder sipRes;

            sipRes = sipCpp->byteOrder();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QPixelFormat_ByteOrder);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_byteOrder, doc_QPixelFormat_byteOrder);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_yuvLayout, "yuvLayout(self) -> QPixelFormat.YUVLayout");

extern "C" {static PyObject *meth_QPixelFormat_yuvLayout(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_yuvLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::QPixelFormat::YUVLayout sipRes;

            sipRes = sipCpp->yuvLayout();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QPixelFormat_YUVLayout);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_yuvLayout, doc_QPixelFormat_yuvLayout);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPixelFormat_subEnum, "subEnum(self) -> int");

extern "C" {static PyObject *meth_QPixelFormat_subEnum(PyObject *, PyObject *);}
static PyObject *meth_QPixelFormat_subEnum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPixelFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPixelFormat, &sipCpp))
        {
             ::uchar sipRes;

            sipRes = sipCpp->subEnum();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPixelFormat, sipName_subEnum, doc_QPixelFormat_subEnum);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QPixelFormat___eq__(PyObject *,PyObject *);}
static PyObject *slot_QPixelFormat___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPixelFormat *sipCpp = reinterpret_cast< ::QPixelFormat *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPixelFormat));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPixelFormat* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPixelFormat, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QPixelFormat, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QPixelFormat___ne__(PyObject *,PyObject *);}
static PyObject *slot_QPixelFormat___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPixelFormat *sipCpp = reinterpret_cast< ::QPixelFormat *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPixelFormat));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPixelFormat* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPixelFormat, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QPixelFormat, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QPixelFormat(void *, int);}
static void release_QPixelFormat(void *sipCppV, int)
{
    delete reinterpret_cast< ::QPixelFormat *>(sipCppV);
}


extern "C" {static void assign_QPixelFormat(void *, SIP_SSIZE_T, void *);}
static void assign_QPixelFormat(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QPixelFormat *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QPixelFormat *>(sipSrc);
}


extern "C" {static void *array_QPixelFormat(SIP_SSIZE_T);}
static void *array_QPixelFormat(SIP_SSIZE_T sipNrElem)
{
    return new  ::QPixelFormat[sipNrElem];
}


extern "C" {static void *copy_QPixelFormat(const void *, SIP_SSIZE_T);}
static void *copy_QPixelFormat(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QPixelFormat(reinterpret_cast<const  ::QPixelFormat *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPixelFormat(sipSimpleWrapper *);}
static void dealloc_QPixelFormat(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPixelFormat(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QPixelFormat(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPixelFormat(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QPixelFormat *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QPixelFormat();

            return sipCpp;
        }
    }

    {
         ::QPixelFormat::ColorModel a0;
         ::uchar a1;
         ::uchar a2;
         ::uchar a3;
         ::uchar a4;
         ::uchar a5;
         ::uchar a6;
         ::QPixelFormat::AlphaUsage a7;
         ::QPixelFormat::AlphaPosition a8;
         ::QPixelFormat::AlphaPremultiplied a9;
         ::QPixelFormat::TypeInterpretation a10;
         ::QPixelFormat::ByteOrder a11 = QPixelFormat::CurrentSystemEndian;
         ::uchar a12 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_byteOrder,
            sipName_subEnum,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "EMMMMMMEEEE|EM", sipType_QPixelFormat_ColorModel, &a0, &a1, &a2, &a3, &a4, &a5, &a6, sipType_QPixelFormat_AlphaUsage, &a7, sipType_QPixelFormat_AlphaPosition, &a8, sipType_QPixelFormat_AlphaPremultiplied, &a9, sipType_QPixelFormat_TypeInterpretation, &a10, sipType_QPixelFormat_ByteOrder, &a11, &a12))
        {
            sipCpp = new  ::QPixelFormat(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12);

            return sipCpp;
        }
    }

    {
        const  ::QPixelFormat* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QPixelFormat, &a0))
        {
            sipCpp = new  ::QPixelFormat(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QPixelFormat[] = {
    {(void *)slot_QPixelFormat___eq__, eq_slot},
    {(void *)slot_QPixelFormat___ne__, ne_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QPixelFormat[] = {
    {SIP_MLNAME_CAST(sipName_alphaPosition), meth_QPixelFormat_alphaPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixelFormat_alphaPosition)},
    {SIP_MLNAME_CAST(sipName_alphaSize), meth_QPixelFormat_alphaSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixelFormat_alphaSize)},
    {SIP_MLNAME_CAST(sipName_alphaUsage), meth_QPixelFormat_alphaUsage, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixelFormat_alphaUsage)},
    {SIP_MLNAME_CAST(sipName_bitsPerPixel), meth_QPixelFormat_bitsPerPixel, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixelFormat_bitsPerPixel)},
    {SIP_MLNAME_CAST(sipName_blackSize), meth_QPixelFormat_blackSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixelFormat_blackSize)},
    {SIP_MLNAME_CAST(sipName_blueSize), meth_QPixelFormat_blueSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixelFormat_blueSize)},
    {SIP_MLNAME_CAST(sipName_brightnessSize), meth_QPixelFormat_brightnessSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixelFormat_brightnessSize)},
    {SIP_MLNAME_CAST(sipName_byteOrder), meth_QPixelFormat_byteOrder, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixelFormat_byteOrder)},
    {SIP_MLNAME_CAST(sipName_channelCount), meth_QPixelFormat_channelCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixelFormat_channelCount)},
    {SIP_MLNAME_CAST(sipName_colorModel), meth_QPixelFormat_colorModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixelFormat_colorModel)},
    {SIP_MLNAME_CAST(sipName_cyanSize), meth_QPixelFormat_cyanSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixelFormat_cyanSize)},
    {SIP_MLNAME_CAST(sipName_greenSize), meth_QPixelFormat_greenSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixelFormat_greenSize)},
    {SIP_MLNAME_CAST(sipName_hueSize), meth_QPixelFormat_hueSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixelFormat_hueSize)},
    {SIP_MLNAME_CAST(sipName_lightnessSize), meth_QPixelFormat_lightnessSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixelFormat_lightnessSize)},
    {SIP_MLNAME_CAST(sipName_magentaSize), meth_QPixelFormat_magentaSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixelFormat_magentaSize)},
    {SIP_MLNAME_CAST(sipName_premultiplied), meth_QPixelFormat_premultiplied, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixelFormat_premultiplied)},
    {SIP_MLNAME_CAST(sipName_redSize), meth_QPixelFormat_redSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixelFormat_redSize)},
    {SIP_MLNAME_CAST(sipName_saturationSize), meth_QPixelFormat_saturationSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixelFormat_saturationSize)},
    {SIP_MLNAME_CAST(sipName_subEnum), meth_QPixelFormat_subEnum, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixelFormat_subEnum)},
    {SIP_MLNAME_CAST(sipName_typeInterpretation), meth_QPixelFormat_typeInterpretation, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixelFormat_typeInterpretation)},
    {SIP_MLNAME_CAST(sipName_yellowSize), meth_QPixelFormat_yellowSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixelFormat_yellowSize)},
    {SIP_MLNAME_CAST(sipName_yuvLayout), meth_QPixelFormat_yuvLayout, METH_VARARGS, SIP_MLDOC_CAST(doc_QPixelFormat_yuvLayout)}
};

static sipEnumMemberDef enummembers_QPixelFormat[] = {
    {sipName_Alpha, static_cast<int>( ::QPixelFormat::Alpha), 228},
    {sipName_AtBeginning, static_cast<int>( ::QPixelFormat::AtBeginning), 224},
    {sipName_AtEnd, static_cast<int>( ::QPixelFormat::AtEnd), 224},
    {sipName_BGR, static_cast<int>( ::QPixelFormat::BGR), 228},
    {sipName_BigEndian, static_cast<int>( ::QPixelFormat::BigEndian), 227},
    {sipName_CMYK, static_cast<int>( ::QPixelFormat::CMYK), 228},
    {sipName_CurrentSystemEndian, static_cast<int>( ::QPixelFormat::CurrentSystemEndian), 227},
    {sipName_FloatingPoint, static_cast<int>( ::QPixelFormat::FloatingPoint), 229},
    {sipName_Grayscale, static_cast<int>( ::QPixelFormat::Grayscale), 228},
    {sipName_HSL, static_cast<int>( ::QPixelFormat::HSL), 228},
    {sipName_HSV, static_cast<int>( ::QPixelFormat::HSV), 228},
    {sipName_IMC1, static_cast<int>( ::QPixelFormat::IMC1), 230},
    {sipName_IMC2, static_cast<int>( ::QPixelFormat::IMC2), 230},
    {sipName_IMC3, static_cast<int>( ::QPixelFormat::IMC3), 230},
    {sipName_IMC4, static_cast<int>( ::QPixelFormat::IMC4), 230},
    {sipName_IgnoresAlpha, static_cast<int>( ::QPixelFormat::IgnoresAlpha), 226},
    {sipName_Indexed, static_cast<int>( ::QPixelFormat::Indexed), 228},
    {sipName_LittleEndian, static_cast<int>( ::QPixelFormat::LittleEndian), 227},
    {sipName_NV12, static_cast<int>( ::QPixelFormat::NV12), 230},
    {sipName_NV21, static_cast<int>( ::QPixelFormat::NV21), 230},
    {sipName_NotPremultiplied, static_cast<int>( ::QPixelFormat::NotPremultiplied), 225},
    {sipName_Premultiplied, static_cast<int>( ::QPixelFormat::Premultiplied), 225},
    {sipName_RGB, static_cast<int>( ::QPixelFormat::RGB), 228},
    {sipName_UYVY, static_cast<int>( ::QPixelFormat::UYVY), 230},
    {sipName_UnsignedByte, static_cast<int>( ::QPixelFormat::UnsignedByte), 229},
    {sipName_UnsignedInteger, static_cast<int>( ::QPixelFormat::UnsignedInteger), 229},
    {sipName_UnsignedShort, static_cast<int>( ::QPixelFormat::UnsignedShort), 229},
    {sipName_UsesAlpha, static_cast<int>( ::QPixelFormat::UsesAlpha), 226},
    {sipName_Y16, static_cast<int>( ::QPixelFormat::Y16), 230},
    {sipName_Y8, static_cast<int>( ::QPixelFormat::Y8), 230},
    {sipName_YUV, static_cast<int>( ::QPixelFormat::YUV), 228},
    {sipName_YUV411, static_cast<int>( ::QPixelFormat::YUV411), 230},
    {sipName_YUV420P, static_cast<int>( ::QPixelFormat::YUV420P), 230},
    {sipName_YUV420SP, static_cast<int>( ::QPixelFormat::YUV420SP), 230},
    {sipName_YUV422, static_cast<int>( ::QPixelFormat::YUV422), 230},
    {sipName_YUV444, static_cast<int>( ::QPixelFormat::YUV444), 230},
    {sipName_YUYV, static_cast<int>( ::QPixelFormat::YUYV), 230},
    {sipName_YV12, static_cast<int>( ::QPixelFormat::YV12), 230},
};

PyDoc_STRVAR(doc_QPixelFormat, "\1QPixelFormat()\n"
"QPixelFormat(QPixelFormat.ColorModel, int, int, int, int, int, int, QPixelFormat.AlphaUsage, QPixelFormat.AlphaPosition, QPixelFormat.AlphaPremultiplied, QPixelFormat.TypeInterpretation, byteOrder: QPixelFormat.ByteOrder = QPixelFormat.CurrentSystemEndian, subEnum: int = 0)\n"
"QPixelFormat(QPixelFormat)");


static pyqt5ClassPluginDef plugin_QPixelFormat = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QPixelFormat = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPixelFormat,
        {SIP_NULLPTR},
        &plugin_QPixelFormat
    },
    {
        sipNameNr_QPixelFormat,
        {0, 0, 1},
        22, methods_QPixelFormat,
        38, enummembers_QPixelFormat,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPixelFormat,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QPixelFormat,
    init_type_QPixelFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QPixelFormat,
    assign_QPixelFormat,
    array_QPixelFormat,
    copy_QPixelFormat,
    release_QPixelFormat,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpicture.sip"
#include <qpicture.h>
#line 76638 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 76642 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 76645 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 76648 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 76651 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpicture.sip"
#include <qpicture.h>
#line 76654 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 63 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpicture.sip"
// This defines the mapping between picture formats and the corresponding
// Python i/o handler callables.
struct qtgui_pio {
    const char *format;     // The format.
    PyObject *read;         // The read handler.
    PyObject *write;        // The write handler.
    qtgui_pio *next;        // The next in the list.
};


// The head of the list.
static qtgui_pio *qtgui_pio_head = 0;


// Find the entry for the given picture.
static const qtgui_pio *qtgui_pio_find(QPictureIO *pio)
{
    for (const qtgui_pio *p = qtgui_pio_head; p; p = p->next)
        if (qstrcmp(pio->format(), p->format) == 0)
            return p;

    return 0;
}


// This is the C++ read handler.
static void qtgui_pio_read(QPictureIO *pio)
{
    const qtgui_pio *p = qtgui_pio_find(pio);

    if (p && p->read)
    {
        Py_XDECREF(sipCallMethod(0, p->read, "D", pio, sipType_QPictureIO, NULL));
    }
}


// This is the C++ write handler.
static void qtgui_pio_write(QPictureIO *pio)
{
    const qtgui_pio *p = qtgui_pio_find(pio);

    if (p && p->write)
    {
        Py_XDECREF(sipCallMethod(0, p->write, "D", pio, sipType_QPictureIO, NULL));
    }
}
#line 76703 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QPictureIO_picture, "picture(self) -> QPicture");

extern "C" {static PyObject *meth_QPictureIO_picture(PyObject *, PyObject *);}
static PyObject *meth_QPictureIO_picture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPictureIO *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPictureIO, &sipCpp))
        {
             ::QPicture*sipRes;

            sipRes = new  ::QPicture(sipCpp->picture());

            return sipConvertFromNewType(sipRes,sipType_QPicture,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPictureIO, sipName_picture, doc_QPictureIO_picture);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPictureIO_status, "status(self) -> int");

extern "C" {static PyObject *meth_QPictureIO_status(PyObject *, PyObject *);}
static PyObject *meth_QPictureIO_status(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPictureIO *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPictureIO, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->status();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPictureIO, sipName_status, doc_QPictureIO_status);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPictureIO_format, "format(self) -> str");

extern "C" {static PyObject *meth_QPictureIO_format(PyObject *, PyObject *);}
static PyObject *meth_QPictureIO_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPictureIO *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPictureIO, &sipCpp))
        {
            const char*sipRes;

            sipRes = sipCpp->format();

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_DecodeASCII(sipRes, strlen(sipRes), SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPictureIO, sipName_format, doc_QPictureIO_format);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPictureIO_ioDevice, "ioDevice(self) -> QIODevice");

extern "C" {static PyObject *meth_QPictureIO_ioDevice(PyObject *, PyObject *);}
static PyObject *meth_QPictureIO_ioDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPictureIO *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPictureIO, &sipCpp))
        {
             ::QIODevice*sipRes;

            sipRes = sipCpp->ioDevice();

            return sipConvertFromType(sipRes,sipType_QIODevice,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPictureIO, sipName_ioDevice, doc_QPictureIO_ioDevice);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPictureIO_fileName, "fileName(self) -> str");

extern "C" {static PyObject *meth_QPictureIO_fileName(PyObject *, PyObject *);}
static PyObject *meth_QPictureIO_fileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPictureIO *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPictureIO, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->fileName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPictureIO, sipName_fileName, doc_QPictureIO_fileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPictureIO_quality, "quality(self) -> int");

extern "C" {static PyObject *meth_QPictureIO_quality(PyObject *, PyObject *);}
static PyObject *meth_QPictureIO_quality(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPictureIO *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPictureIO, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->quality();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPictureIO, sipName_quality, doc_QPictureIO_quality);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPictureIO_description, "description(self) -> str");

extern "C" {static PyObject *meth_QPictureIO_description(PyObject *, PyObject *);}
static PyObject *meth_QPictureIO_description(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPictureIO *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPictureIO, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->description());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPictureIO, sipName_description, doc_QPictureIO_description);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPictureIO_parameters, "parameters(self) -> str");

extern "C" {static PyObject *meth_QPictureIO_parameters(PyObject *, PyObject *);}
static PyObject *meth_QPictureIO_parameters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPictureIO *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPictureIO, &sipCpp))
        {
            const char*sipRes;

            sipRes = sipCpp->parameters();

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_DecodeASCII(sipRes, strlen(sipRes), SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPictureIO, sipName_parameters, doc_QPictureIO_parameters);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPictureIO_gamma, "gamma(self) -> float");

extern "C" {static PyObject *meth_QPictureIO_gamma(PyObject *, PyObject *);}
static PyObject *meth_QPictureIO_gamma(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPictureIO *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPictureIO, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->gamma();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPictureIO, sipName_gamma, doc_QPictureIO_gamma);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPictureIO_setPicture, "setPicture(self, QPicture)");

extern "C" {static PyObject *meth_QPictureIO_setPicture(PyObject *, PyObject *);}
static PyObject *meth_QPictureIO_setPicture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPicture* a0;
         ::QPictureIO *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPictureIO, &sipCpp, sipType_QPicture, &a0))
        {
            sipCpp->setPicture(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPictureIO, sipName_setPicture, doc_QPictureIO_setPicture);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPictureIO_setStatus, "setStatus(self, int)");

extern "C" {static PyObject *meth_QPictureIO_setStatus(PyObject *, PyObject *);}
static PyObject *meth_QPictureIO_setStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QPictureIO *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPictureIO, &sipCpp, &a0))
        {
            sipCpp->setStatus(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPictureIO, sipName_setStatus, doc_QPictureIO_setStatus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPictureIO_setFormat, "setFormat(self, str)");

extern "C" {static PyObject *meth_QPictureIO_setFormat(PyObject *, PyObject *);}
static PyObject *meth_QPictureIO_setFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
         ::QPictureIO *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAA", &sipSelf, sipType_QPictureIO, &sipCpp, &a0Keep, &a0))
        {
            sipCpp->setFormat(a0);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPictureIO, sipName_setFormat, doc_QPictureIO_setFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPictureIO_setIODevice, "setIODevice(self, QIODevice)");

extern "C" {static PyObject *meth_QPictureIO_setIODevice(PyObject *, PyObject *);}
static PyObject *meth_QPictureIO_setIODevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QIODevice* a0;
         ::QPictureIO *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QPictureIO, &sipCpp, sipType_QIODevice, &a0))
        {
            sipCpp->setIODevice(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPictureIO, sipName_setIODevice, doc_QPictureIO_setIODevice);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPictureIO_setFileName, "setFileName(self, str)");

extern "C" {static PyObject *meth_QPictureIO_setFileName(PyObject *, PyObject *);}
static PyObject *meth_QPictureIO_setFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QPictureIO *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPictureIO, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setFileName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPictureIO, sipName_setFileName, doc_QPictureIO_setFileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPictureIO_setQuality, "setQuality(self, int)");

extern "C" {static PyObject *meth_QPictureIO_setQuality(PyObject *, PyObject *);}
static PyObject *meth_QPictureIO_setQuality(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QPictureIO *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPictureIO, &sipCpp, &a0))
        {
            sipCpp->setQuality(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPictureIO, sipName_setQuality, doc_QPictureIO_setQuality);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPictureIO_setDescription, "setDescription(self, str)");

extern "C" {static PyObject *meth_QPictureIO_setDescription(PyObject *, PyObject *);}
static PyObject *meth_QPictureIO_setDescription(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QPictureIO *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPictureIO, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setDescription(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPictureIO, sipName_setDescription, doc_QPictureIO_setDescription);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPictureIO_setParameters, "setParameters(self, str)");

extern "C" {static PyObject *meth_QPictureIO_setParameters(PyObject *, PyObject *);}
static PyObject *meth_QPictureIO_setParameters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
         ::QPictureIO *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAA", &sipSelf, sipType_QPictureIO, &sipCpp, &a0Keep, &a0))
        {
            sipCpp->setParameters(a0);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPictureIO, sipName_setParameters, doc_QPictureIO_setParameters);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPictureIO_setGamma, "setGamma(self, float)");

extern "C" {static PyObject *meth_QPictureIO_setGamma(PyObject *, PyObject *);}
static PyObject *meth_QPictureIO_setGamma(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
         ::QPictureIO *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QPictureIO, &sipCpp, &a0))
        {
            sipCpp->setGamma(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPictureIO, sipName_setGamma, doc_QPictureIO_setGamma);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPictureIO_read, "read(self) -> bool");

extern "C" {static PyObject *meth_QPictureIO_read(PyObject *, PyObject *);}
static PyObject *meth_QPictureIO_read(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPictureIO *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPictureIO, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->read();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPictureIO, sipName_read, doc_QPictureIO_read);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPictureIO_write, "write(self) -> bool");

extern "C" {static PyObject *meth_QPictureIO_write(PyObject *, PyObject *);}
static PyObject *meth_QPictureIO_write(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPictureIO *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPictureIO, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->write();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPictureIO, sipName_write, doc_QPictureIO_write);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPictureIO_pictureFormat, "pictureFormat(str) -> QByteArray\n"
"pictureFormat(QIODevice) -> QByteArray");

extern "C" {static PyObject *meth_QPictureIO_pictureFormat(PyObject *, PyObject *);}
static PyObject *meth_QPictureIO_pictureFormat(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray( ::QPictureIO::pictureFormat(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    {
         ::QIODevice* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_QIODevice, &a0))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray( ::QPictureIO::pictureFormat(a0));

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPictureIO, sipName_pictureFormat, doc_QPictureIO_pictureFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPictureIO_inputFormats, "inputFormats() -> List[QByteArray]");

extern "C" {static PyObject *meth_QPictureIO_inputFormats(PyObject *, PyObject *);}
static PyObject *meth_QPictureIO_inputFormats(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList< ::QByteArray>*sipRes;

            sipRes = new QList< ::QByteArray>( ::QPictureIO::inputFormats());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPictureIO, sipName_inputFormats, doc_QPictureIO_inputFormats);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPictureIO_outputFormats, "outputFormats() -> List[QByteArray]");

extern "C" {static PyObject *meth_QPictureIO_outputFormats(PyObject *, PyObject *);}
static PyObject *meth_QPictureIO_outputFormats(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList< ::QByteArray>*sipRes;

            sipRes = new QList< ::QByteArray>( ::QPictureIO::outputFormats());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPictureIO, sipName_outputFormats, doc_QPictureIO_outputFormats);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPictureIO_defineIOHandler, "defineIOHandler(str, str, str, Optional[Callable[[QPictureIO], None]], Optional[Callable[[QPictureIO], None]])");

extern "C" {static PyObject *meth_QPictureIO_defineIOHandler(PyObject *, PyObject *);}
static PyObject *meth_QPictureIO_defineIOHandler(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        const char* a1;
        PyObject *a1Keep;
        const char* a2;
        PyObject *a2Keep;
        PyObject * a3;
        PyObject * a4;

        if (sipParseArgs(&sipParseErr, sipArgs, "AAAAAAHH", &a0Keep, &a0, &a1Keep, &a1, &a2Keep, &a2, &a3, &a4))
        {
#line 143 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpicture.sip"
        // Convert None to NULL.
        if (a3 == Py_None)
            a3 = 0;
        
        if (a4 == Py_None)
            a4 = 0;
        
        // See if we already know about the format.
        qtgui_pio *p;
        
        for (p = qtgui_pio_head; p; p = p->next)
            if (qstrcmp(a0, p->format) == 0)
                break;
        
        if (!p)
        {
            // Handle the new format.
            p = new qtgui_pio;
            p->format = qstrdup(a0);
            p->read = 0;
            p->write = 0;
            p->next = qtgui_pio_head;
        
            qtgui_pio_head = p;
        }
        
        // Replace the old callables with the new ones.
        Py_XDECREF(p->read);
        p->read = a3;
        Py_XINCREF(p->read);
        
        Py_XDECREF(p->write);
        p->write = a4;
        Py_XINCREF(p->write);
        
        // Install the generic handlers.
        QPictureIO::defineIOHandler(a0, a1, a2, qtgui_pio_read, qtgui_pio_write);
#line 77445 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
            Py_DECREF(a0Keep);
            Py_DECREF(a1Keep);
            Py_DECREF(a2Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPictureIO, sipName_defineIOHandler, doc_QPictureIO_defineIOHandler);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPictureIO(void *, int);}
static void release_QPictureIO(void *sipCppV, int)
{
    delete reinterpret_cast< ::QPictureIO *>(sipCppV);
}


extern "C" {static void dealloc_QPictureIO(sipSimpleWrapper *);}
static void dealloc_QPictureIO(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPictureIO(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QPictureIO(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPictureIO(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QPictureIO *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QPictureIO();

            return sipCpp;
        }
    }

    {
         ::QIODevice* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8AA", sipType_QIODevice, &a0, &a1Keep, &a1))
        {
            sipCpp = new  ::QPictureIO(a0,a1);
            Py_DECREF(a1Keep);

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1AA", sipType_QString,&a0, &a0State, &a1Keep, &a1))
        {
            sipCpp = new  ::QPictureIO(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            Py_DECREF(a1Keep);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QPictureIO[] = {
    {SIP_MLNAME_CAST(sipName_defineIOHandler), meth_QPictureIO_defineIOHandler, METH_VARARGS, SIP_MLDOC_CAST(doc_QPictureIO_defineIOHandler)},
    {SIP_MLNAME_CAST(sipName_description), meth_QPictureIO_description, METH_VARARGS, SIP_MLDOC_CAST(doc_QPictureIO_description)},
    {SIP_MLNAME_CAST(sipName_fileName), meth_QPictureIO_fileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QPictureIO_fileName)},
    {SIP_MLNAME_CAST(sipName_format), meth_QPictureIO_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QPictureIO_format)},
    {SIP_MLNAME_CAST(sipName_gamma), meth_QPictureIO_gamma, METH_VARARGS, SIP_MLDOC_CAST(doc_QPictureIO_gamma)},
    {SIP_MLNAME_CAST(sipName_inputFormats), meth_QPictureIO_inputFormats, METH_VARARGS, SIP_MLDOC_CAST(doc_QPictureIO_inputFormats)},
    {SIP_MLNAME_CAST(sipName_ioDevice), meth_QPictureIO_ioDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QPictureIO_ioDevice)},
    {SIP_MLNAME_CAST(sipName_outputFormats), meth_QPictureIO_outputFormats, METH_VARARGS, SIP_MLDOC_CAST(doc_QPictureIO_outputFormats)},
    {SIP_MLNAME_CAST(sipName_parameters), meth_QPictureIO_parameters, METH_VARARGS, SIP_MLDOC_CAST(doc_QPictureIO_parameters)},
    {SIP_MLNAME_CAST(sipName_picture), meth_QPictureIO_picture, METH_VARARGS, SIP_MLDOC_CAST(doc_QPictureIO_picture)},
    {SIP_MLNAME_CAST(sipName_pictureFormat), meth_QPictureIO_pictureFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QPictureIO_pictureFormat)},
    {SIP_MLNAME_CAST(sipName_quality), meth_QPictureIO_quality, METH_VARARGS, SIP_MLDOC_CAST(doc_QPictureIO_quality)},
    {SIP_MLNAME_CAST(sipName_read), meth_QPictureIO_read, METH_VARARGS, SIP_MLDOC_CAST(doc_QPictureIO_read)},
    {SIP_MLNAME_CAST(sipName_setDescription), meth_QPictureIO_setDescription, METH_VARARGS, SIP_MLDOC_CAST(doc_QPictureIO_setDescription)},
    {SIP_MLNAME_CAST(sipName_setFileName), meth_QPictureIO_setFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QPictureIO_setFileName)},
    {SIP_MLNAME_CAST(sipName_setFormat), meth_QPictureIO_setFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QPictureIO_setFormat)},
    {SIP_MLNAME_CAST(sipName_setGamma), meth_QPictureIO_setGamma, METH_VARARGS, SIP_MLDOC_CAST(doc_QPictureIO_setGamma)},
    {SIP_MLNAME_CAST(sipName_setIODevice), meth_QPictureIO_setIODevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QPictureIO_setIODevice)},
    {SIP_MLNAME_CAST(sipName_setParameters), meth_QPictureIO_setParameters, METH_VARARGS, SIP_MLDOC_CAST(doc_QPictureIO_setParameters)},
    {SIP_MLNAME_CAST(sipName_setPicture), meth_QPictureIO_setPicture, METH_VARARGS, SIP_MLDOC_CAST(doc_QPictureIO_setPicture)},
    {SIP_MLNAME_CAST(sipName_setQuality), meth_QPictureIO_setQuality, METH_VARARGS, SIP_MLDOC_CAST(doc_QPictureIO_setQuality)},
    {SIP_MLNAME_CAST(sipName_setStatus), meth_QPictureIO_setStatus, METH_VARARGS, SIP_MLDOC_CAST(doc_QPictureIO_setStatus)},
    {SIP_MLNAME_CAST(sipName_status), meth_QPictureIO_status, METH_VARARGS, SIP_MLDOC_CAST(doc_QPictureIO_status)},
    {SIP_MLNAME_CAST(sipName_write), meth_QPictureIO_write, METH_VARARGS, SIP_MLDOC_CAST(doc_QPictureIO_write)}
};

PyDoc_STRVAR(doc_QPictureIO, "\1QPictureIO()\n"
"QPictureIO(QIODevice, str)\n"
"QPictureIO(str, str)");


static pyqt5ClassPluginDef plugin_QPictureIO = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QPictureIO = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPictureIO,
        {SIP_NULLPTR},
        &plugin_QPictureIO
    },
    {
        sipNameNr_QPictureIO,
        {0, 0, 1},
        24, methods_QPictureIO,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPictureIO,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QPictureIO,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QPictureIO,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QPictureIO,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpicture.sip"
#include <qpicture.h>
#line 77622 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 77626 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 52 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 77629 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 77632 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 77635 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 77638 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 77641 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


class sipQPicture : public  ::QPicture
{
public:
    sipQPicture(int);
    sipQPicture(const  ::QPicture&);
    virtual ~sipQPicture();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void setData(const char*,uint) SIP_OVERRIDE;
    int devType() const SIP_OVERRIDE;
     ::QPaintEngine* paintEngine() const SIP_OVERRIDE;
    int metric( ::QPaintDevice::PaintDeviceMetric) const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPicture(const sipQPicture &);
    sipQPicture &operator = (const sipQPicture &);

    char sipPyMethods[4];
};

sipQPicture::sipQPicture(int a0):  ::QPicture(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPicture::sipQPicture(const  ::QPicture& a0):  ::QPicture(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPicture::~sipQPicture()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

void sipQPicture::setData(const char*a0,uint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_setData);

    if (!sipMeth)
    {
         ::QPicture::setData(a0,a1);
        return;
    }

    extern void sipVH_QtGui_75(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*,uint);

    sipVH_QtGui_75(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

int sipQPicture::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_devType);

    if (!sipMeth)
        return  ::QPicture::devType();

    extern int sipVH_QtGui_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_8(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QPaintEngine* sipQPicture::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,SIP_NULLPTR,sipName_paintEngine);

    if (!sipMeth)
        return  ::QPicture::paintEngine();

    extern  ::QPaintEngine* sipVH_QtGui_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_17(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQPicture::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,SIP_NULLPTR,sipName_metric);

    if (!sipMeth)
        return  ::QPicture::metric(a0);

    extern int sipVH_QtGui_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_18(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QPicture_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QPicture_isNull(PyObject *, PyObject *);}
static PyObject *meth_QPicture_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPicture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPicture, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPicture, sipName_isNull, doc_QPicture_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPicture_devType, "devType(self) -> int");

extern "C" {static PyObject *meth_QPicture_devType(PyObject *, PyObject *);}
static PyObject *meth_QPicture_devType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QPicture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPicture, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QPicture::devType() : sipCpp->devType());

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPicture, sipName_devType, doc_QPicture_devType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPicture_size, "size(self) -> int");

extern "C" {static PyObject *meth_QPicture_size(PyObject *, PyObject *);}
static PyObject *meth_QPicture_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPicture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPicture, &sipCpp))
        {
             ::uint sipRes;

            sipRes = sipCpp->size();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPicture, sipName_size, doc_QPicture_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPicture_data, "data(self) -> str");

extern "C" {static PyObject *meth_QPicture_data(PyObject *, PyObject *);}
static PyObject *meth_QPicture_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPicture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPicture, &sipCpp))
        {
            const char*sipRes;

            sipRes = sipCpp->data();

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPicture, sipName_data, doc_QPicture_data);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPicture_setData, "setData(self, bytes)");

extern "C" {static PyObject *meth_QPicture_setData(PyObject *, PyObject *);}
static PyObject *meth_QPicture_setData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const char* a0;
        SIP_SSIZE_T a1;
         ::QPicture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bk", &sipSelf, sipType_QPicture, &sipCpp, &a0, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QPicture::setData(a0,(uint)a1) : sipCpp->setData(a0,(uint)a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPicture, sipName_setData, doc_QPicture_setData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPicture_play, "play(self, QPainter) -> bool");

extern "C" {static PyObject *meth_QPicture_play(PyObject *, PyObject *);}
static PyObject *meth_QPicture_play(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPainter* a0;
         ::QPicture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QPicture, &sipCpp, sipType_QPainter, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->play(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPicture, sipName_play, doc_QPicture_play);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPicture_load, "load(self, QIODevice, format: str = None) -> bool\n"
"load(self, str, format: str = None) -> bool");

extern "C" {static PyObject *meth_QPicture_load(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPicture_load(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QIODevice* a0;
        const char* a1 = 0;
        PyObject *a1Keep = 0;
         ::QPicture *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8|AA", &sipSelf, sipType_QPicture, &sipCpp, sipType_QIODevice, &a0, &a1Keep, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->load(a0,a1);
            Py_END_ALLOW_THREADS
            Py_XDECREF(a1Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const char* a1 = 0;
        PyObject *a1Keep = 0;
         ::QPicture *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|AA", &sipSelf, sipType_QPicture, &sipCpp, sipType_QString,&a0, &a0State, &a1Keep, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->load(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            Py_XDECREF(a1Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPicture, sipName_load, doc_QPicture_load);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPicture_save, "save(self, QIODevice, format: str = None) -> bool\n"
"save(self, str, format: str = None) -> bool");

extern "C" {static PyObject *meth_QPicture_save(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPicture_save(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QIODevice* a0;
        const char* a1 = 0;
        PyObject *a1Keep = 0;
         ::QPicture *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8|AA", &sipSelf, sipType_QPicture, &sipCpp, sipType_QIODevice, &a0, &a1Keep, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->save(a0,a1);
            Py_END_ALLOW_THREADS
            Py_XDECREF(a1Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const char* a1 = 0;
        PyObject *a1Keep = 0;
         ::QPicture *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|AA", &sipSelf, sipType_QPicture, &sipCpp, sipType_QString,&a0, &a0State, &a1Keep, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->save(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            Py_XDECREF(a1Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPicture, sipName_save, doc_QPicture_save);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPicture_boundingRect, "boundingRect(self) -> QRect");

extern "C" {static PyObject *meth_QPicture_boundingRect(PyObject *, PyObject *);}
static PyObject *meth_QPicture_boundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPicture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPicture, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->boundingRect());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPicture, sipName_boundingRect, doc_QPicture_boundingRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPicture_setBoundingRect, "setBoundingRect(self, QRect)");

extern "C" {static PyObject *meth_QPicture_setBoundingRect(PyObject *, PyObject *);}
static PyObject *meth_QPicture_setBoundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect* a0;
         ::QPicture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPicture, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->setBoundingRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPicture, sipName_setBoundingRect, doc_QPicture_setBoundingRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPicture_detach, "detach(self)");

extern "C" {static PyObject *meth_QPicture_detach(PyObject *, PyObject *);}
static PyObject *meth_QPicture_detach(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPicture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPicture, &sipCpp))
        {
            sipCpp->detach();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPicture, sipName_detach, doc_QPicture_detach);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPicture_isDetached, "isDetached(self) -> bool");

extern "C" {static PyObject *meth_QPicture_isDetached(PyObject *, PyObject *);}
static PyObject *meth_QPicture_isDetached(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPicture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPicture, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDetached();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPicture, sipName_isDetached, doc_QPicture_isDetached);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPicture_paintEngine, "paintEngine(self) -> QPaintEngine");

extern "C" {static PyObject *meth_QPicture_paintEngine(PyObject *, PyObject *);}
static PyObject *meth_QPicture_paintEngine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QPicture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPicture, &sipCpp))
        {
             ::QPaintEngine*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QPicture::paintEngine() : sipCpp->paintEngine());

            return sipConvertFromType(sipRes,sipType_QPaintEngine,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPicture, sipName_paintEngine, doc_QPicture_paintEngine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPicture_metric, "metric(self, QPaintDevice.PaintDeviceMetric) -> int");

extern "C" {static PyObject *meth_QPicture_metric(PyObject *, PyObject *);}
static PyObject *meth_QPicture_metric(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintDevice::PaintDeviceMetric a0;
        const  ::QPicture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QPicture, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QPicture::metric(a0) : sipCpp->metric(a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPicture, sipName_metric, doc_QPicture_metric);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPicture_swap, "swap(self, QPicture)");

extern "C" {static PyObject *meth_QPicture_swap(PyObject *, PyObject *);}
static PyObject *meth_QPicture_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPicture* a0;
         ::QPicture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPicture, &sipCpp, sipType_QPicture, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPicture, sipName_swap, doc_QPicture_swap);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QPicture(void *, const sipTypeDef *);}
static void *cast_QPicture(void *sipCppV, const sipTypeDef *targetType)
{
     ::QPicture *sipCpp = reinterpret_cast< ::QPicture *>(sipCppV);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPicture(void *, int);}
static void release_QPicture(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQPicture *>(sipCppV);
    else
        delete reinterpret_cast< ::QPicture *>(sipCppV);
}


extern "C" {static void assign_QPicture(void *, SIP_SSIZE_T, void *);}
static void assign_QPicture(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QPicture *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QPicture *>(sipSrc);
}


extern "C" {static void *array_QPicture(SIP_SSIZE_T);}
static void *array_QPicture(SIP_SSIZE_T sipNrElem)
{
    return new  ::QPicture[sipNrElem];
}


extern "C" {static void *copy_QPicture(const void *, SIP_SSIZE_T);}
static void *copy_QPicture(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QPicture(reinterpret_cast<const  ::QPicture *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPicture(sipSimpleWrapper *);}
static void dealloc_QPicture(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQPicture *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPicture(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QPicture(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPicture(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQPicture *sipCpp = SIP_NULLPTR;

    {
        int a0 = -1;

        static const char *sipKwdList[] = {
            sipName_formatVersion,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|i", &a0))
        {
            sipCpp = new sipQPicture(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QPicture* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QPicture, &a0))
        {
            sipCpp = new sipQPicture(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QPicture[] = {{191, 255, 1}};


static PyMethodDef methods_QPicture[] = {
    {SIP_MLNAME_CAST(sipName_boundingRect), meth_QPicture_boundingRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QPicture_boundingRect)},
    {SIP_MLNAME_CAST(sipName_data), meth_QPicture_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QPicture_data)},
    {SIP_MLNAME_CAST(sipName_detach), meth_QPicture_detach, METH_VARARGS, SIP_MLDOC_CAST(doc_QPicture_detach)},
    {SIP_MLNAME_CAST(sipName_devType), meth_QPicture_devType, METH_VARARGS, SIP_MLDOC_CAST(doc_QPicture_devType)},
    {SIP_MLNAME_CAST(sipName_isDetached), meth_QPicture_isDetached, METH_VARARGS, SIP_MLDOC_CAST(doc_QPicture_isDetached)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QPicture_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QPicture_isNull)},
    {SIP_MLNAME_CAST(sipName_load), SIP_MLMETH_CAST(meth_QPicture_load), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPicture_load)},
    {SIP_MLNAME_CAST(sipName_metric), meth_QPicture_metric, METH_VARARGS, SIP_MLDOC_CAST(doc_QPicture_metric)},
    {SIP_MLNAME_CAST(sipName_paintEngine), meth_QPicture_paintEngine, METH_VARARGS, SIP_MLDOC_CAST(doc_QPicture_paintEngine)},
    {SIP_MLNAME_CAST(sipName_play), meth_QPicture_play, METH_VARARGS, SIP_MLDOC_CAST(doc_QPicture_play)},
    {SIP_MLNAME_CAST(sipName_save), SIP_MLMETH_CAST(meth_QPicture_save), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPicture_save)},
    {SIP_MLNAME_CAST(sipName_setBoundingRect), meth_QPicture_setBoundingRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QPicture_setBoundingRect)},
    {SIP_MLNAME_CAST(sipName_setData), meth_QPicture_setData, METH_VARARGS, SIP_MLDOC_CAST(doc_QPicture_setData)},
    {SIP_MLNAME_CAST(sipName_size), meth_QPicture_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QPicture_size)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QPicture_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QPicture_swap)}
};

PyDoc_STRVAR(doc_QPicture, "\1QPicture(formatVersion: int = -1)\n"
"QPicture(QPicture)");


static pyqt5ClassPluginDef plugin_QPicture = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QPicture = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPicture,
        {SIP_NULLPTR},
        &plugin_QPicture
    },
    {
        sipNameNr_QPicture,
        {0, 0, 1},
        15, methods_QPicture,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPicture,
    -1,
    -1,
    supers_QPicture,
    SIP_NULLPTR,
    init_type_QPicture,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QPicture,
    assign_QPicture,
    array_QPicture,
    copy_QPicture,
    release_QPicture,
    cast_QPicture,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpen.sip"
#include <qpen.h>
#line 78444 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78448 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 78451 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 78454 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 241 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpygui_qvector.sip"
#include <qvector.h>
#line 78457 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 78460 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QPen_style, "style(self) -> Qt.PenStyle");

extern "C" {static PyObject *meth_QPen_style(PyObject *, PyObject *);}
static PyObject *meth_QPen_style(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPen, &sipCpp))
        {
             ::Qt::PenStyle sipRes;

            sipRes = sipCpp->style();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_PenStyle);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_style, doc_QPen_style);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPen_setStyle, "setStyle(self, Qt.PenStyle)");

extern "C" {static PyObject *meth_QPen_setStyle(PyObject *, PyObject *);}
static PyObject *meth_QPen_setStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::PenStyle a0;
         ::QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPen, &sipCpp, sipType_Qt_PenStyle, &a0))
        {
            sipCpp->setStyle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_setStyle, doc_QPen_setStyle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPen_widthF, "widthF(self) -> float");

extern "C" {static PyObject *meth_QPen_widthF(PyObject *, PyObject *);}
static PyObject *meth_QPen_widthF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPen, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->widthF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_widthF, doc_QPen_widthF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPen_setWidthF, "setWidthF(self, float)");

extern "C" {static PyObject *meth_QPen_setWidthF(PyObject *, PyObject *);}
static PyObject *meth_QPen_setWidthF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPen, &sipCpp, &a0))
        {
            sipCpp->setWidthF(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_setWidthF, doc_QPen_setWidthF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPen_width, "width(self) -> int");

extern "C" {static PyObject *meth_QPen_width(PyObject *, PyObject *);}
static PyObject *meth_QPen_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPen, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->width();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_width, doc_QPen_width);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPen_setWidth, "setWidth(self, int)");

extern "C" {static PyObject *meth_QPen_setWidth(PyObject *, PyObject *);}
static PyObject *meth_QPen_setWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPen, &sipCpp, &a0))
        {
            sipCpp->setWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_setWidth, doc_QPen_setWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPen_color, "color(self) -> QColor");

extern "C" {static PyObject *meth_QPen_color(PyObject *, PyObject *);}
static PyObject *meth_QPen_color(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPen, &sipCpp))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor(sipCpp->color());

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_color, doc_QPen_color);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPen_setColor, "setColor(self, Union[QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QPen_setColor(PyObject *, PyObject *);}
static PyObject *meth_QPen_setColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor* a0;
        int a0State = 0;
         ::QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPen, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->setColor(*a0);
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_setColor, doc_QPen_setColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPen_brush, "brush(self) -> QBrush");

extern "C" {static PyObject *meth_QPen_brush(PyObject *, PyObject *);}
static PyObject *meth_QPen_brush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPen, &sipCpp))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->brush());

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_brush, doc_QPen_brush);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPen_setBrush, "setBrush(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QPen_setBrush(PyObject *, PyObject *);}
static PyObject *meth_QPen_setBrush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBrush* a0;
        int a0State = 0;
         ::QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPen, &sipCpp, sipType_QBrush, &a0, &a0State))
        {
            sipCpp->setBrush(*a0);
            sipReleaseType(const_cast< ::QBrush *>(a0),sipType_QBrush,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_setBrush, doc_QPen_setBrush);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPen_isSolid, "isSolid(self) -> bool");

extern "C" {static PyObject *meth_QPen_isSolid(PyObject *, PyObject *);}
static PyObject *meth_QPen_isSolid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPen, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSolid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_isSolid, doc_QPen_isSolid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPen_capStyle, "capStyle(self) -> Qt.PenCapStyle");

extern "C" {static PyObject *meth_QPen_capStyle(PyObject *, PyObject *);}
static PyObject *meth_QPen_capStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPen, &sipCpp))
        {
             ::Qt::PenCapStyle sipRes;

            sipRes = sipCpp->capStyle();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_PenCapStyle);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_capStyle, doc_QPen_capStyle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPen_setCapStyle, "setCapStyle(self, Qt.PenCapStyle)");

extern "C" {static PyObject *meth_QPen_setCapStyle(PyObject *, PyObject *);}
static PyObject *meth_QPen_setCapStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::PenCapStyle a0;
         ::QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPen, &sipCpp, sipType_Qt_PenCapStyle, &a0))
        {
            sipCpp->setCapStyle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_setCapStyle, doc_QPen_setCapStyle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPen_joinStyle, "joinStyle(self) -> Qt.PenJoinStyle");

extern "C" {static PyObject *meth_QPen_joinStyle(PyObject *, PyObject *);}
static PyObject *meth_QPen_joinStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPen, &sipCpp))
        {
             ::Qt::PenJoinStyle sipRes;

            sipRes = sipCpp->joinStyle();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_PenJoinStyle);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_joinStyle, doc_QPen_joinStyle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPen_setJoinStyle, "setJoinStyle(self, Qt.PenJoinStyle)");

extern "C" {static PyObject *meth_QPen_setJoinStyle(PyObject *, PyObject *);}
static PyObject *meth_QPen_setJoinStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::PenJoinStyle a0;
         ::QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPen, &sipCpp, sipType_Qt_PenJoinStyle, &a0))
        {
            sipCpp->setJoinStyle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_setJoinStyle, doc_QPen_setJoinStyle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPen_dashPattern, "dashPattern(self) -> List[float]");

extern "C" {static PyObject *meth_QPen_dashPattern(PyObject *, PyObject *);}
static PyObject *meth_QPen_dashPattern(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPen, &sipCpp))
        {
             ::QVector< ::qreal>*sipRes;

            sipRes = new  ::QVector< ::qreal>(sipCpp->dashPattern());

            return sipConvertFromNewType(sipRes,sipType_QVector_2400,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_dashPattern, doc_QPen_dashPattern);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPen_setDashPattern, "setDashPattern(self, Iterable[float])");

extern "C" {static PyObject *meth_QPen_setDashPattern(PyObject *, PyObject *);}
static PyObject *meth_QPen_setDashPattern(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector< ::qreal>* a0;
        int a0State = 0;
         ::QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPen, &sipCpp, sipType_QVector_2400,&a0, &a0State))
        {
            sipCpp->setDashPattern(*a0);
            sipReleaseType(const_cast< ::QVector< ::qreal> *>(a0),sipType_QVector_2400,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_setDashPattern, doc_QPen_setDashPattern);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPen_miterLimit, "miterLimit(self) -> float");

extern "C" {static PyObject *meth_QPen_miterLimit(PyObject *, PyObject *);}
static PyObject *meth_QPen_miterLimit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPen, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->miterLimit();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_miterLimit, doc_QPen_miterLimit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPen_setMiterLimit, "setMiterLimit(self, float)");

extern "C" {static PyObject *meth_QPen_setMiterLimit(PyObject *, PyObject *);}
static PyObject *meth_QPen_setMiterLimit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPen, &sipCpp, &a0))
        {
            sipCpp->setMiterLimit(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_setMiterLimit, doc_QPen_setMiterLimit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPen_dashOffset, "dashOffset(self) -> float");

extern "C" {static PyObject *meth_QPen_dashOffset(PyObject *, PyObject *);}
static PyObject *meth_QPen_dashOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPen, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->dashOffset();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_dashOffset, doc_QPen_dashOffset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPen_setDashOffset, "setDashOffset(self, float)");

extern "C" {static PyObject *meth_QPen_setDashOffset(PyObject *, PyObject *);}
static PyObject *meth_QPen_setDashOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPen, &sipCpp, &a0))
        {
            sipCpp->setDashOffset(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_setDashOffset, doc_QPen_setDashOffset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPen_isCosmetic, "isCosmetic(self) -> bool");

extern "C" {static PyObject *meth_QPen_isCosmetic(PyObject *, PyObject *);}
static PyObject *meth_QPen_isCosmetic(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPen, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isCosmetic();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_isCosmetic, doc_QPen_isCosmetic);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPen_setCosmetic, "setCosmetic(self, bool)");

extern "C" {static PyObject *meth_QPen_setCosmetic(PyObject *, PyObject *);}
static PyObject *meth_QPen_setCosmetic(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPen, &sipCpp, &a0))
        {
            sipCpp->setCosmetic(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_setCosmetic, doc_QPen_setCosmetic);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPen_swap, "swap(self, QPen)");

extern "C" {static PyObject *meth_QPen_swap(PyObject *, PyObject *);}
static PyObject *meth_QPen_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPen* a0;
         ::QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPen, &sipCpp, sipType_QPen, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_swap, doc_QPen_swap);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QPen___ne__(PyObject *,PyObject *);}
static PyObject *slot_QPen___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPen *sipCpp = reinterpret_cast< ::QPen *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPen));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPen* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QPen, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QPen::operator!=(*a0);
            sipReleaseType(const_cast< ::QPen *>(a0),sipType_QPen,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QPen, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QPen___eq__(PyObject *,PyObject *);}
static PyObject *slot_QPen___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPen *sipCpp = reinterpret_cast< ::QPen *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPen));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPen* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QPen, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QPen::operator==(*a0);
            sipReleaseType(const_cast< ::QPen *>(a0),sipType_QPen,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QPen, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QPen(void *, int);}
static void release_QPen(void *sipCppV, int)
{
    delete reinterpret_cast< ::QPen *>(sipCppV);
}


extern "C" {static void assign_QPen(void *, SIP_SSIZE_T, void *);}
static void assign_QPen(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QPen *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QPen *>(sipSrc);
}


extern "C" {static void *array_QPen(SIP_SSIZE_T);}
static void *array_QPen(SIP_SSIZE_T sipNrElem)
{
    return new  ::QPen[sipNrElem];
}


extern "C" {static void *copy_QPen(const void *, SIP_SSIZE_T);}
static void *copy_QPen(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QPen(reinterpret_cast<const  ::QPen *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPen(sipSimpleWrapper *);}
static void dealloc_QPen(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPen(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QPen(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPen(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QPen *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QPen();

            return sipCpp;
        }
    }

    {
         ::Qt::PenStyle a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "E", sipType_Qt_PenStyle, &a0))
        {
            sipCpp = new  ::QPen(a0);

            return sipCpp;
        }
    }

    {
        const  ::QBrush* a0;
        int a0State = 0;
         ::qreal a1;
         ::Qt::PenStyle a2 = Qt::SolidLine;
         ::Qt::PenCapStyle a3 = Qt::SquareCap;
         ::Qt::PenJoinStyle a4 = Qt::BevelJoin;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_style,
            sipName_cap,
            sipName_join,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1d|EEE", sipType_QBrush, &a0, &a0State, &a1, sipType_Qt_PenStyle, &a2, sipType_Qt_PenCapStyle, &a3, sipType_Qt_PenJoinStyle, &a4))
        {
            sipCpp = new  ::QPen(*a0,a1,a2,a3,a4);
            sipReleaseType(const_cast< ::QBrush *>(a0),sipType_QBrush,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QPen* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QPen, &a0, &a0State))
        {
            sipCpp = new  ::QPen(*a0);
            sipReleaseType(const_cast< ::QPen *>(a0),sipType_QPen,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QVariant* a0;
        PyObject *a0Wrapper;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "@J1", &a0Wrapper, sipType_QVariant, &a0, &a0State))
        {
            sipErrorState sipError = sipErrorNone;

#line 67 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpen.sip"
        if (a0->canConvert<QPen>())
            sipCpp = new QPen(a0->value<QPen>());
        else
            sipError = sipBadCallableArg(0, a0Wrapper);
#line 79325 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            if (sipError == sipErrorNone)
                return sipCpp;

            if (sipUnused)
            {
                Py_XDECREF(*sipUnused);
            }

            sipAddException(sipError, sipParseErr);

            if (sipError == sipErrorFail)
                return SIP_NULLPTR;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QPen(PyObject *, void **, int *, PyObject *);}
static int convertTo_QPen(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QPen **sipCppPtr = reinterpret_cast< ::QPen **>(sipCppPtrV);

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpen.sip"
// SIP doesn't support automatic type convertors so we explicitly allow a
// QColor to be used whenever a QPen is expected.

if (sipIsErr == NULL)
    return (sipCanConvertToType(sipPy, sipType_QPen, SIP_NO_CONVERTORS) ||
            sipCanConvertToType(sipPy, sipType_QColor, 0));

if (sipCanConvertToType(sipPy, sipType_QPen, SIP_NO_CONVERTORS))
{
    *sipCppPtr = reinterpret_cast<QPen *>(sipConvertToType(sipPy, sipType_QPen, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

    return 0;
}

int state;
QColor *c = reinterpret_cast<QColor *>(sipConvertToType(sipPy, sipType_QColor, 0, 0, &state, sipIsErr));

if (*sipIsErr)
{
    sipReleaseType(c, sipType_QColor, state);
    return 0;
}

*sipCppPtr = new QPen(*c);

sipReleaseType(c, sipType_QColor, state);

return sipGetState(sipTransferObj);
#line 79381 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QPen[] = {
    {(void *)slot_QPen___ne__, ne_slot},
    {(void *)slot_QPen___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QPen[] = {
    {SIP_MLNAME_CAST(sipName_brush), meth_QPen_brush, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_brush)},
    {SIP_MLNAME_CAST(sipName_capStyle), meth_QPen_capStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_capStyle)},
    {SIP_MLNAME_CAST(sipName_color), meth_QPen_color, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_color)},
    {SIP_MLNAME_CAST(sipName_dashOffset), meth_QPen_dashOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_dashOffset)},
    {SIP_MLNAME_CAST(sipName_dashPattern), meth_QPen_dashPattern, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_dashPattern)},
    {SIP_MLNAME_CAST(sipName_isCosmetic), meth_QPen_isCosmetic, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_isCosmetic)},
    {SIP_MLNAME_CAST(sipName_isSolid), meth_QPen_isSolid, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_isSolid)},
    {SIP_MLNAME_CAST(sipName_joinStyle), meth_QPen_joinStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_joinStyle)},
    {SIP_MLNAME_CAST(sipName_miterLimit), meth_QPen_miterLimit, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_miterLimit)},
    {SIP_MLNAME_CAST(sipName_setBrush), meth_QPen_setBrush, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_setBrush)},
    {SIP_MLNAME_CAST(sipName_setCapStyle), meth_QPen_setCapStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_setCapStyle)},
    {SIP_MLNAME_CAST(sipName_setColor), meth_QPen_setColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_setColor)},
    {SIP_MLNAME_CAST(sipName_setCosmetic), meth_QPen_setCosmetic, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_setCosmetic)},
    {SIP_MLNAME_CAST(sipName_setDashOffset), meth_QPen_setDashOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_setDashOffset)},
    {SIP_MLNAME_CAST(sipName_setDashPattern), meth_QPen_setDashPattern, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_setDashPattern)},
    {SIP_MLNAME_CAST(sipName_setJoinStyle), meth_QPen_setJoinStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_setJoinStyle)},
    {SIP_MLNAME_CAST(sipName_setMiterLimit), meth_QPen_setMiterLimit, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_setMiterLimit)},
    {SIP_MLNAME_CAST(sipName_setStyle), meth_QPen_setStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_setStyle)},
    {SIP_MLNAME_CAST(sipName_setWidth), meth_QPen_setWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_setWidth)},
    {SIP_MLNAME_CAST(sipName_setWidthF), meth_QPen_setWidthF, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_setWidthF)},
    {SIP_MLNAME_CAST(sipName_style), meth_QPen_style, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_style)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QPen_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_swap)},
    {SIP_MLNAME_CAST(sipName_width), meth_QPen_width, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_width)},
    {SIP_MLNAME_CAST(sipName_widthF), meth_QPen_widthF, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_widthF)}
};

PyDoc_STRVAR(doc_QPen, "\1QPen()\n"
"QPen(Qt.PenStyle)\n"
"QPen(Union[QBrush, QColor, Qt.GlobalColor, QGradient], float, style: Qt.PenStyle = Qt.SolidLine, cap: Qt.PenCapStyle = Qt.SquareCap, join: Qt.PenJoinStyle = Qt.BevelJoin)\n"
"QPen(Union[QPen, QColor, Qt.GlobalColor, QGradient])\n"
"QPen(Any)");


static pyqt5ClassPluginDef plugin_QPen = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QPen = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPen,
        {SIP_NULLPTR},
        &plugin_QPen
    },
    {
        sipNameNr_QPen,
        {0, 0, 1},
        24, methods_QPen,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPen,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QPen,
    init_type_QPen,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QPen,
    assign_QPen,
    array_QPen,
    copy_QPen,
    release_QPen,
    SIP_NULLPTR,
    convertTo_QPen,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpdfwriter.sip"
#include <qpdfwriter.h>
#line 79491 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 79495 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 79498 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpagedpaintdevice.sip"
#include <qpagedpaintdevice.h>
#line 79501 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 79504 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 52 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 79507 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpagedpaintdevice.sip"
#include <qpagedpaintdevice.h>
#line 374 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpagedpaintdevice.sip"
#include <qpagedpaintdevice.h>
#line 79512 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 97 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 79515 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 79518 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 79521 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 79524 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 79527 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 79530 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 79533 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 79536 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 79539 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 79542 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 79545 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 79548 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 79551 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 79554 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 79557 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 79560 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpagelayout.sip"
#include <qpagelayout.h>
#line 79563 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 115 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 79566 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


class sipQPdfWriter : public  ::QPdfWriter
{
public:
    sipQPdfWriter(const  ::QString&);
    sipQPdfWriter( ::QIODevice*);
    virtual ~sipQPdfWriter();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    int metric( ::QPaintDevice::PaintDeviceMetric) const SIP_OVERRIDE;
     ::QPaintEngine* paintEngine() const SIP_OVERRIDE;
    bool newPage() SIP_OVERRIDE;
    void setPageSize( ::QPagedPaintDevice::PageSize) SIP_OVERRIDE;
    void setPageSizeMM(const  ::QSizeF&) SIP_OVERRIDE;
    void setMargins(const  ::QPagedPaintDevice::Margins&) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPdfWriter(const sipQPdfWriter &);
    sipQPdfWriter &operator = (const sipQPdfWriter &);

    char sipPyMethods[13];
};

sipQPdfWriter::sipQPdfWriter(const  ::QString& a0):  ::QPdfWriter(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPdfWriter::sipQPdfWriter( ::QIODevice*a0):  ::QPdfWriter(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPdfWriter::~sipQPdfWriter()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQPdfWriter::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QPdfWriter);

    return  ::QPdfWriter::metaObject();
}

int sipQPdfWriter::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QPdfWriter::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QPdfWriter,_c,_id,_a);

    return _id;
}

void *sipQPdfWriter::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QPdfWriter, _clname, &sipCpp) ? sipCpp :  ::QPdfWriter::qt_metacast(_clname));
}

int sipQPdfWriter::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_metric);

    if (!sipMeth)
        return  ::QPdfWriter::metric(a0);

    extern int sipVH_QtGui_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_18(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QPaintEngine* sipQPdfWriter::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_paintEngine);

    if (!sipMeth)
        return  ::QPdfWriter::paintEngine();

    extern  ::QPaintEngine* sipVH_QtGui_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_17(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQPdfWriter::newPage()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_newPage);

    if (!sipMeth)
        return  ::QPdfWriter::newPage();

    extern bool sipVH_QtGui_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_28(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQPdfWriter::setPageSize( ::QPagedPaintDevice::PageSize a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_setPageSize);

    if (!sipMeth)
    {
         ::QPdfWriter::setPageSize(a0);
        return;
    }

    extern void sipVH_QtGui_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPagedPaintDevice::PageSize);

    sipVH_QtGui_54(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPdfWriter::setPageSizeMM(const  ::QSizeF& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_setPageSizeMM);

    if (!sipMeth)
    {
         ::QPdfWriter::setPageSizeMM(a0);
        return;
    }

    extern void sipVH_QtGui_55(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QSizeF&);

    sipVH_QtGui_55(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPdfWriter::setMargins(const  ::QPagedPaintDevice::Margins& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_setMargins);

    if (!sipMeth)
    {
         ::QPdfWriter::setMargins(a0);
        return;
    }

    extern void sipVH_QtGui_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QPagedPaintDevice::Margins&);

    sipVH_QtGui_56(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQPdfWriter::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QPdfWriter::event(a0);

    extern bool sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_5(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQPdfWriter::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QPdfWriter::eventFilter(a0,a1);

    extern bool sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_4(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQPdfWriter::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QPdfWriter::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_3(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPdfWriter::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QPdfWriter::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_2(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPdfWriter::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QPdfWriter::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_1(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPdfWriter::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QPdfWriter::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPdfWriter::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QPdfWriter::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QPdfWriter_title, "title(self) -> str");

extern "C" {static PyObject *meth_QPdfWriter_title(PyObject *, PyObject *);}
static PyObject *meth_QPdfWriter_title(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPdfWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPdfWriter, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->title());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPdfWriter, sipName_title, doc_QPdfWriter_title);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPdfWriter_setTitle, "setTitle(self, str)");

extern "C" {static PyObject *meth_QPdfWriter_setTitle(PyObject *, PyObject *);}
static PyObject *meth_QPdfWriter_setTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QPdfWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPdfWriter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setTitle(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPdfWriter, sipName_setTitle, doc_QPdfWriter_setTitle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPdfWriter_creator, "creator(self) -> str");

extern "C" {static PyObject *meth_QPdfWriter_creator(PyObject *, PyObject *);}
static PyObject *meth_QPdfWriter_creator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPdfWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPdfWriter, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->creator());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPdfWriter, sipName_creator, doc_QPdfWriter_creator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPdfWriter_setCreator, "setCreator(self, str)");

extern "C" {static PyObject *meth_QPdfWriter_setCreator(PyObject *, PyObject *);}
static PyObject *meth_QPdfWriter_setCreator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QPdfWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPdfWriter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setCreator(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPdfWriter, sipName_setCreator, doc_QPdfWriter_setCreator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPdfWriter_newPage, "newPage(self) -> bool");

extern "C" {static PyObject *meth_QPdfWriter_newPage(PyObject *, PyObject *);}
static PyObject *meth_QPdfWriter_newPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPdfWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPdfWriter, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QPdfWriter::newPage() : sipCpp->newPage());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPdfWriter, sipName_newPage, doc_QPdfWriter_newPage);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPdfWriter_setPageSize, "setPageSize(self, QPagedPaintDevice.PageSize)");

extern "C" {static PyObject *meth_QPdfWriter_setPageSize(PyObject *, PyObject *);}
static PyObject *meth_QPdfWriter_setPageSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPagedPaintDevice::PageSize a0;
         ::QPdfWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPdfWriter, &sipCpp, sipType_QPagedPaintDevice_PageSize, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QPdfWriter::setPageSize(a0) : sipCpp->setPageSize(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPdfWriter, sipName_setPageSize, doc_QPdfWriter_setPageSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPdfWriter_setPageSizeMM, "setPageSizeMM(self, QSizeF)");

extern "C" {static PyObject *meth_QPdfWriter_setPageSizeMM(PyObject *, PyObject *);}
static PyObject *meth_QPdfWriter_setPageSizeMM(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSizeF* a0;
         ::QPdfWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPdfWriter, &sipCpp, sipType_QSizeF, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QPdfWriter::setPageSizeMM(*a0) : sipCpp->setPageSizeMM(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPdfWriter, sipName_setPageSizeMM, doc_QPdfWriter_setPageSizeMM);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPdfWriter_setMargins, "setMargins(self, QPagedPaintDevice.Margins)");

extern "C" {static PyObject *meth_QPdfWriter_setMargins(PyObject *, PyObject *);}
static PyObject *meth_QPdfWriter_setMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QPagedPaintDevice::Margins* a0;
         ::QPdfWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPdfWriter, &sipCpp, sipType_QPagedPaintDevice_Margins, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QPdfWriter::setMargins(*a0) : sipCpp->setMargins(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPdfWriter, sipName_setMargins, doc_QPdfWriter_setMargins);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPdfWriter_paintEngine, "paintEngine(self) -> QPaintEngine");

extern "C" {static PyObject *meth_QPdfWriter_paintEngine(PyObject *, PyObject *);}
static PyObject *meth_QPdfWriter_paintEngine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QPdfWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QPdfWriter, &sipCpp))
        {
             ::QPaintEngine*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QPdfWriter::paintEngine() : sipCpp->paintEngine());

            return sipConvertFromType(sipRes,sipType_QPaintEngine,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPdfWriter, sipName_paintEngine, doc_QPdfWriter_paintEngine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPdfWriter_metric, "metric(self, QPaintDevice.PaintDeviceMetric) -> int");

extern "C" {static PyObject *meth_QPdfWriter_metric(PyObject *, PyObject *);}
static PyObject *meth_QPdfWriter_metric(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintDevice::PaintDeviceMetric a0;
        const  ::QPdfWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QPdfWriter, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QPdfWriter::metric(a0) : sipCpp->metric(a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPdfWriter, sipName_metric, doc_QPdfWriter_metric);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPdfWriter_setResolution, "setResolution(self, int)");

extern "C" {static PyObject *meth_QPdfWriter_setResolution(PyObject *, PyObject *);}
static PyObject *meth_QPdfWriter_setResolution(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QPdfWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPdfWriter, &sipCpp, &a0))
        {
            sipCpp->setResolution(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPdfWriter, sipName_setResolution, doc_QPdfWriter_setResolution);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPdfWriter_resolution, "resolution(self) -> int");

extern "C" {static PyObject *meth_QPdfWriter_resolution(PyObject *, PyObject *);}
static PyObject *meth_QPdfWriter_resolution(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPdfWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPdfWriter, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->resolution();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPdfWriter, sipName_resolution, doc_QPdfWriter_resolution);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPdfWriter_setPdfVersion, "setPdfVersion(self, QPagedPaintDevice.PdfVersion)");

extern "C" {static PyObject *meth_QPdfWriter_setPdfVersion(PyObject *, PyObject *);}
static PyObject *meth_QPdfWriter_setPdfVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPagedPaintDevice::PdfVersion a0;
         ::QPdfWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPdfWriter, &sipCpp, sipType_QPagedPaintDevice_PdfVersion, &a0))
        {
            sipCpp->setPdfVersion(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPdfWriter, sipName_setPdfVersion, doc_QPdfWriter_setPdfVersion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPdfWriter_pdfVersion, "pdfVersion(self) -> QPagedPaintDevice.PdfVersion");

extern "C" {static PyObject *meth_QPdfWriter_pdfVersion(PyObject *, PyObject *);}
static PyObject *meth_QPdfWriter_pdfVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPdfWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPdfWriter, &sipCpp))
        {
             ::QPagedPaintDevice::PdfVersion sipRes;

            sipRes = sipCpp->pdfVersion();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QPagedPaintDevice_PdfVersion);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPdfWriter, sipName_pdfVersion, doc_QPdfWriter_pdfVersion);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QPdfWriter(void *, const sipTypeDef *);}
static void *cast_QPdfWriter(void *sipCppV, const sipTypeDef *targetType)
{
     ::QPdfWriter *sipCpp = reinterpret_cast< ::QPdfWriter *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPagedPaintDevice)
        return static_cast< ::QPagedPaintDevice *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPdfWriter(void *, int);}
static void release_QPdfWriter(void *sipCppV, int)
{
     ::QPdfWriter *sipCpp = reinterpret_cast< ::QPdfWriter *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QPdfWriter(sipSimpleWrapper *);}
static void dealloc_QPdfWriter(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQPdfWriter *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPdfWriter(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QPdfWriter(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPdfWriter(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQPdfWriter *sipCpp = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new sipQPdfWriter(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QIODevice* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8", sipType_QIODevice, &a0))
        {
            sipCpp = new sipQPdfWriter(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QPdfWriter[] = {{25, 0, 0}, {187, 255, 1}};


static PyMethodDef methods_QPdfWriter[] = {
    {SIP_MLNAME_CAST(sipName_creator), meth_QPdfWriter_creator, METH_VARARGS, SIP_MLDOC_CAST(doc_QPdfWriter_creator)},
    {SIP_MLNAME_CAST(sipName_metric), meth_QPdfWriter_metric, METH_VARARGS, SIP_MLDOC_CAST(doc_QPdfWriter_metric)},
    {SIP_MLNAME_CAST(sipName_newPage), meth_QPdfWriter_newPage, METH_VARARGS, SIP_MLDOC_CAST(doc_QPdfWriter_newPage)},
    {SIP_MLNAME_CAST(sipName_paintEngine), meth_QPdfWriter_paintEngine, METH_VARARGS, SIP_MLDOC_CAST(doc_QPdfWriter_paintEngine)},
    {SIP_MLNAME_CAST(sipName_pdfVersion), meth_QPdfWriter_pdfVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QPdfWriter_pdfVersion)},
    {SIP_MLNAME_CAST(sipName_resolution), meth_QPdfWriter_resolution, METH_VARARGS, SIP_MLDOC_CAST(doc_QPdfWriter_resolution)},
    {SIP_MLNAME_CAST(sipName_setCreator), meth_QPdfWriter_setCreator, METH_VARARGS, SIP_MLDOC_CAST(doc_QPdfWriter_setCreator)},
    {SIP_MLNAME_CAST(sipName_setMargins), meth_QPdfWriter_setMargins, METH_VARARGS, SIP_MLDOC_CAST(doc_QPdfWriter_setMargins)},
    {SIP_MLNAME_CAST(sipName_setPageSize), meth_QPdfWriter_setPageSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QPdfWriter_setPageSize)},
    {SIP_MLNAME_CAST(sipName_setPageSizeMM), meth_QPdfWriter_setPageSizeMM, METH_VARARGS, SIP_MLDOC_CAST(doc_QPdfWriter_setPageSizeMM)},
    {SIP_MLNAME_CAST(sipName_setPdfVersion), meth_QPdfWriter_setPdfVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QPdfWriter_setPdfVersion)},
    {SIP_MLNAME_CAST(sipName_setResolution), meth_QPdfWriter_setResolution, METH_VARARGS, SIP_MLDOC_CAST(doc_QPdfWriter_setResolution)},
    {SIP_MLNAME_CAST(sipName_setTitle), meth_QPdfWriter_setTitle, METH_VARARGS, SIP_MLDOC_CAST(doc_QPdfWriter_setTitle)},
    {SIP_MLNAME_CAST(sipName_title), meth_QPdfWriter_title, METH_VARARGS, SIP_MLDOC_CAST(doc_QPdfWriter_title)}
};

PyDoc_STRVAR(doc_QPdfWriter, "\1QPdfWriter(str)\n"
"QPdfWriter(QIODevice)");


static pyqt5ClassPluginDef plugin_QPdfWriter = {
    & ::QPdfWriter::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QPdfWriter = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPdfWriter,
        {SIP_NULLPTR},
        &plugin_QPdfWriter
    },
    {
        sipNameNr_QPdfWriter,
        {0, 0, 1},
        14, methods_QPdfWriter,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPdfWriter,
    -1,
    -1,
    supers_QPdfWriter,
    SIP_NULLPTR,
    init_type_QPdfWriter,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QPdfWriter,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QPdfWriter,
    cast_QPdfWriter,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 80440 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 80444 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 80447 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 80450 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 80453 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QPalette_currentColorGroup, "currentColorGroup(self) -> QPalette.ColorGroup");

extern "C" {static PyObject *meth_QPalette_currentColorGroup(PyObject *, PyObject *);}
static PyObject *meth_QPalette_currentColorGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
             ::QPalette::ColorGroup sipRes;

            sipRes = sipCpp->currentColorGroup();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QPalette_ColorGroup);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_currentColorGroup, doc_QPalette_currentColorGroup);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPalette_setCurrentColorGroup, "setCurrentColorGroup(self, QPalette.ColorGroup)");

extern "C" {static PyObject *meth_QPalette_setCurrentColorGroup(PyObject *, PyObject *);}
static PyObject *meth_QPalette_setCurrentColorGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPalette::ColorGroup a0;
         ::QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPalette, &sipCpp, sipType_QPalette_ColorGroup, &a0))
        {
            sipCpp->setCurrentColorGroup(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_setCurrentColorGroup, doc_QPalette_setCurrentColorGroup);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPalette_color, "color(self, QPalette.ColorGroup, QPalette.ColorRole) -> QColor\n"
"color(self, QPalette.ColorRole) -> QColor");

extern "C" {static PyObject *meth_QPalette_color(PyObject *, PyObject *);}
static PyObject *meth_QPalette_color(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPalette::ColorGroup a0;
         ::QPalette::ColorRole a1;
        const  ::QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEE", &sipSelf, sipType_QPalette, &sipCpp, sipType_QPalette_ColorGroup, &a0, sipType_QPalette_ColorRole, &a1))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor(sipCpp->color(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    {
         ::QPalette::ColorRole a0;
        const  ::QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPalette, &sipCpp, sipType_QPalette_ColorRole, &a0))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor(sipCpp->color(a0));

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_color, doc_QPalette_color);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPalette_brush, "brush(self, QPalette.ColorGroup, QPalette.ColorRole) -> QBrush\n"
"brush(self, QPalette.ColorRole) -> QBrush");

extern "C" {static PyObject *meth_QPalette_brush(PyObject *, PyObject *);}
static PyObject *meth_QPalette_brush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPalette::ColorGroup a0;
         ::QPalette::ColorRole a1;
        const  ::QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEE", &sipSelf, sipType_QPalette, &sipCpp, sipType_QPalette_ColorGroup, &a0, sipType_QPalette_ColorRole, &a1))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->brush(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    {
         ::QPalette::ColorRole a0;
        const  ::QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPalette, &sipCpp, sipType_QPalette_ColorRole, &a0))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->brush(a0));

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_brush, doc_QPalette_brush);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPalette_setBrush, "setBrush(self, QPalette.ColorGroup, QPalette.ColorRole, Union[QBrush, QColor, Qt.GlobalColor, QGradient])\n"
"setBrush(self, QPalette.ColorRole, Union[QBrush, QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QPalette_setBrush(PyObject *, PyObject *);}
static PyObject *meth_QPalette_setBrush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPalette::ColorGroup a0;
         ::QPalette::ColorRole a1;
        const  ::QBrush* a2;
        int a2State = 0;
         ::QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEEJ1", &sipSelf, sipType_QPalette, &sipCpp, sipType_QPalette_ColorGroup, &a0, sipType_QPalette_ColorRole, &a1, sipType_QBrush, &a2, &a2State))
        {
            sipCpp->setBrush(a0,a1,*a2);
            sipReleaseType(const_cast< ::QBrush *>(a2),sipType_QBrush,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QPalette::ColorRole a0;
        const  ::QBrush* a1;
        int a1State = 0;
         ::QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QPalette, &sipCpp, sipType_QPalette_ColorRole, &a0, sipType_QBrush, &a1, &a1State))
        {
            sipCpp->setBrush(a0,*a1);
            sipReleaseType(const_cast< ::QBrush *>(a1),sipType_QBrush,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_setBrush, doc_QPalette_setBrush);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPalette_setColorGroup, "setColorGroup(self, QPalette.ColorGroup, Union[QBrush, QColor, Qt.GlobalColor, QGradient], Union[QBrush, QColor, Qt.GlobalColor, QGradient], Union[QBrush, QColor, Qt.GlobalColor, QGradient], Union[QBrush, QColor, Qt.GlobalColor, QGradient], Union[QBrush, QColor, Qt.GlobalColor, QGradient], Union[QBrush, QColor, Qt.GlobalColor, QGradient], Union[QBrush, QColor, Qt.GlobalColor, QGradient], Union[QBrush, QColor, Qt.GlobalColor, QGradient], Union[QBrush, QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QPalette_setColorGroup(PyObject *, PyObject *);}
static PyObject *meth_QPalette_setColorGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPalette::ColorGroup a0;
        const  ::QBrush* a1;
        int a1State = 0;
        const  ::QBrush* a2;
        int a2State = 0;
        const  ::QBrush* a3;
        int a3State = 0;
        const  ::QBrush* a4;
        int a4State = 0;
        const  ::QBrush* a5;
        int a5State = 0;
        const  ::QBrush* a6;
        int a6State = 0;
        const  ::QBrush* a7;
        int a7State = 0;
        const  ::QBrush* a8;
        int a8State = 0;
        const  ::QBrush* a9;
        int a9State = 0;
         ::QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1J1J1J1J1J1J1J1J1", &sipSelf, sipType_QPalette, &sipCpp, sipType_QPalette_ColorGroup, &a0, sipType_QBrush, &a1, &a1State, sipType_QBrush, &a2, &a2State, sipType_QBrush, &a3, &a3State, sipType_QBrush, &a4, &a4State, sipType_QBrush, &a5, &a5State, sipType_QBrush, &a6, &a6State, sipType_QBrush, &a7, &a7State, sipType_QBrush, &a8, &a8State, sipType_QBrush, &a9, &a9State))
        {
            sipCpp->setColorGroup(a0,*a1,*a2,*a3,*a4,*a5,*a6,*a7,*a8,*a9);
            sipReleaseType(const_cast< ::QBrush *>(a1),sipType_QBrush,a1State);
            sipReleaseType(const_cast< ::QBrush *>(a2),sipType_QBrush,a2State);
            sipReleaseType(const_cast< ::QBrush *>(a3),sipType_QBrush,a3State);
            sipReleaseType(const_cast< ::QBrush *>(a4),sipType_QBrush,a4State);
            sipReleaseType(const_cast< ::QBrush *>(a5),sipType_QBrush,a5State);
            sipReleaseType(const_cast< ::QBrush *>(a6),sipType_QBrush,a6State);
            sipReleaseType(const_cast< ::QBrush *>(a7),sipType_QBrush,a7State);
            sipReleaseType(const_cast< ::QBrush *>(a8),sipType_QBrush,a8State);
            sipReleaseType(const_cast< ::QBrush *>(a9),sipType_QBrush,a9State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_setColorGroup, doc_QPalette_setColorGroup);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPalette_isEqual, "isEqual(self, QPalette.ColorGroup, QPalette.ColorGroup) -> bool");

extern "C" {static PyObject *meth_QPalette_isEqual(PyObject *, PyObject *);}
static PyObject *meth_QPalette_isEqual(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPalette::ColorGroup a0;
         ::QPalette::ColorGroup a1;
        const  ::QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEE", &sipSelf, sipType_QPalette, &sipCpp, sipType_QPalette_ColorGroup, &a0, sipType_QPalette_ColorGroup, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->isEqual(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_isEqual, doc_QPalette_isEqual);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPalette_windowText, "windowText(self) -> QBrush");

extern "C" {static PyObject *meth_QPalette_windowText(PyObject *, PyObject *);}
static PyObject *meth_QPalette_windowText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->windowText());

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_windowText, doc_QPalette_windowText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPalette_button, "button(self) -> QBrush");

extern "C" {static PyObject *meth_QPalette_button(PyObject *, PyObject *);}
static PyObject *meth_QPalette_button(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->button());

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_button, doc_QPalette_button);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPalette_light, "light(self) -> QBrush");

extern "C" {static PyObject *meth_QPalette_light(PyObject *, PyObject *);}
static PyObject *meth_QPalette_light(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->light());

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_light, doc_QPalette_light);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPalette_dark, "dark(self) -> QBrush");

extern "C" {static PyObject *meth_QPalette_dark(PyObject *, PyObject *);}
static PyObject *meth_QPalette_dark(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->dark());

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_dark, doc_QPalette_dark);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPalette_mid, "mid(self) -> QBrush");

extern "C" {static PyObject *meth_QPalette_mid(PyObject *, PyObject *);}
static PyObject *meth_QPalette_mid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->mid());

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_mid, doc_QPalette_mid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPalette_text, "text(self) -> QBrush");

extern "C" {static PyObject *meth_QPalette_text(PyObject *, PyObject *);}
static PyObject *meth_QPalette_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->text());

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_text, doc_QPalette_text);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPalette_base, "base(self) -> QBrush");

extern "C" {static PyObject *meth_QPalette_base(PyObject *, PyObject *);}
static PyObject *meth_QPalette_base(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->base());

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_base, doc_QPalette_base);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPalette_alternateBase, "alternateBase(self) -> QBrush");

extern "C" {static PyObject *meth_QPalette_alternateBase(PyObject *, PyObject *);}
static PyObject *meth_QPalette_alternateBase(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->alternateBase());

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_alternateBase, doc_QPalette_alternateBase);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPalette_window, "window(self) -> QBrush");

extern "C" {static PyObject *meth_QPalette_window(PyObject *, PyObject *);}
static PyObject *meth_QPalette_window(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->window());

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_window, doc_QPalette_window);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPalette_midlight, "midlight(self) -> QBrush");

extern "C" {static PyObject *meth_QPalette_midlight(PyObject *, PyObject *);}
static PyObject *meth_QPalette_midlight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->midlight());

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_midlight, doc_QPalette_midlight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPalette_brightText, "brightText(self) -> QBrush");

extern "C" {static PyObject *meth_QPalette_brightText(PyObject *, PyObject *);}
static PyObject *meth_QPalette_brightText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->brightText());

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_brightText, doc_QPalette_brightText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPalette_buttonText, "buttonText(self) -> QBrush");

extern "C" {static PyObject *meth_QPalette_buttonText(PyObject *, PyObject *);}
static PyObject *meth_QPalette_buttonText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->buttonText());

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_buttonText, doc_QPalette_buttonText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPalette_shadow, "shadow(self) -> QBrush");

extern "C" {static PyObject *meth_QPalette_shadow(PyObject *, PyObject *);}
static PyObject *meth_QPalette_shadow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->shadow());

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_shadow, doc_QPalette_shadow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPalette_highlight, "highlight(self) -> QBrush");

extern "C" {static PyObject *meth_QPalette_highlight(PyObject *, PyObject *);}
static PyObject *meth_QPalette_highlight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->highlight());

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_highlight, doc_QPalette_highlight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPalette_highlightedText, "highlightedText(self) -> QBrush");

extern "C" {static PyObject *meth_QPalette_highlightedText(PyObject *, PyObject *);}
static PyObject *meth_QPalette_highlightedText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->highlightedText());

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_highlightedText, doc_QPalette_highlightedText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPalette_link, "link(self) -> QBrush");

extern "C" {static PyObject *meth_QPalette_link(PyObject *, PyObject *);}
static PyObject *meth_QPalette_link(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->link());

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_link, doc_QPalette_link);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPalette_linkVisited, "linkVisited(self) -> QBrush");

extern "C" {static PyObject *meth_QPalette_linkVisited(PyObject *, PyObject *);}
static PyObject *meth_QPalette_linkVisited(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->linkVisited());

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_linkVisited, doc_QPalette_linkVisited);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPalette_toolTipBase, "toolTipBase(self) -> QBrush");

extern "C" {static PyObject *meth_QPalette_toolTipBase(PyObject *, PyObject *);}
static PyObject *meth_QPalette_toolTipBase(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->toolTipBase());

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_toolTipBase, doc_QPalette_toolTipBase);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPalette_toolTipText, "toolTipText(self) -> QBrush");

extern "C" {static PyObject *meth_QPalette_toolTipText(PyObject *, PyObject *);}
static PyObject *meth_QPalette_toolTipText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->toolTipText());

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_toolTipText, doc_QPalette_toolTipText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPalette_placeholderText, "placeholderText(self) -> QBrush");

extern "C" {static PyObject *meth_QPalette_placeholderText(PyObject *, PyObject *);}
static PyObject *meth_QPalette_placeholderText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->placeholderText());

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_placeholderText, doc_QPalette_placeholderText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPalette_isCopyOf, "isCopyOf(self, QPalette) -> bool");

extern "C" {static PyObject *meth_QPalette_isCopyOf(PyObject *, PyObject *);}
static PyObject *meth_QPalette_isCopyOf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPalette* a0;
        const  ::QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPalette, &sipCpp, sipType_QPalette, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isCopyOf(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_isCopyOf, doc_QPalette_isCopyOf);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPalette_resolve, "resolve(self, QPalette) -> QPalette\n"
"resolve(self) -> int\n"
"resolve(self, int)");

extern "C" {static PyObject *meth_QPalette_resolve(PyObject *, PyObject *);}
static PyObject *meth_QPalette_resolve(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPalette* a0;
        const  ::QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPalette, &sipCpp, sipType_QPalette, &a0))
        {
             ::QPalette*sipRes;

            sipRes = new  ::QPalette(sipCpp->resolve(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPalette,SIP_NULLPTR);
        }
    }

    {
        const  ::QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
             ::uint sipRes;

            sipRes = sipCpp->resolve();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    {
         ::uint a0;
         ::QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QPalette, &sipCpp, &a0))
        {
            sipCpp->resolve(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_resolve, doc_QPalette_resolve);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPalette_setColor, "setColor(self, QPalette.ColorGroup, QPalette.ColorRole, Union[QColor, Qt.GlobalColor, QGradient])\n"
"setColor(self, QPalette.ColorRole, Union[QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QPalette_setColor(PyObject *, PyObject *);}
static PyObject *meth_QPalette_setColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPalette::ColorGroup a0;
         ::QPalette::ColorRole a1;
        const  ::QColor* a2;
        int a2State = 0;
         ::QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEEJ1", &sipSelf, sipType_QPalette, &sipCpp, sipType_QPalette_ColorGroup, &a0, sipType_QPalette_ColorRole, &a1, sipType_QColor, &a2, &a2State))
        {
            sipCpp->setColor(a0,a1,*a2);
            sipReleaseType(const_cast< ::QColor *>(a2),sipType_QColor,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QPalette::ColorRole a0;
        const  ::QColor* a1;
        int a1State = 0;
         ::QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QPalette, &sipCpp, sipType_QPalette_ColorRole, &a0, sipType_QColor, &a1, &a1State))
        {
            sipCpp->setColor(a0,*a1);
            sipReleaseType(const_cast< ::QColor *>(a1),sipType_QColor,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_setColor, doc_QPalette_setColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPalette_isBrushSet, "isBrushSet(self, QPalette.ColorGroup, QPalette.ColorRole) -> bool");

extern "C" {static PyObject *meth_QPalette_isBrushSet(PyObject *, PyObject *);}
static PyObject *meth_QPalette_isBrushSet(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPalette::ColorGroup a0;
         ::QPalette::ColorRole a1;
        const  ::QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEE", &sipSelf, sipType_QPalette, &sipCpp, sipType_QPalette_ColorGroup, &a0, sipType_QPalette_ColorRole, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->isBrushSet(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_isBrushSet, doc_QPalette_isBrushSet);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPalette_cacheKey, "cacheKey(self) -> int");

extern "C" {static PyObject *meth_QPalette_cacheKey(PyObject *, PyObject *);}
static PyObject *meth_QPalette_cacheKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->cacheKey();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_cacheKey, doc_QPalette_cacheKey);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPalette_swap, "swap(self, QPalette)");

extern "C" {static PyObject *meth_QPalette_swap(PyObject *, PyObject *);}
static PyObject *meth_QPalette_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPalette* a0;
         ::QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPalette, &sipCpp, sipType_QPalette, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_swap, doc_QPalette_swap);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QPalette___ne__(PyObject *,PyObject *);}
static PyObject *slot_QPalette___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPalette *sipCpp = reinterpret_cast< ::QPalette *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPalette));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPalette* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPalette, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QPalette::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QPalette, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QPalette___eq__(PyObject *,PyObject *);}
static PyObject *slot_QPalette___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPalette *sipCpp = reinterpret_cast< ::QPalette *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPalette));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPalette* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPalette, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QPalette::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QPalette, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QPalette(void *, int);}
static void release_QPalette(void *sipCppV, int)
{
    delete reinterpret_cast< ::QPalette *>(sipCppV);
}


extern "C" {static void assign_QPalette(void *, SIP_SSIZE_T, void *);}
static void assign_QPalette(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QPalette *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QPalette *>(sipSrc);
}


extern "C" {static void *array_QPalette(SIP_SSIZE_T);}
static void *array_QPalette(SIP_SSIZE_T sipNrElem)
{
    return new  ::QPalette[sipNrElem];
}


extern "C" {static void *copy_QPalette(const void *, SIP_SSIZE_T);}
static void *copy_QPalette(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QPalette(reinterpret_cast<const  ::QPalette *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPalette(sipSimpleWrapper *);}
static void dealloc_QPalette(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPalette(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QPalette(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPalette(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QPalette *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QPalette();

            return sipCpp;
        }
    }

    {
        const  ::QColor* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QColor, &a0, &a0State))
        {
            sipCpp = new  ::QPalette(*a0);
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            return sipCpp;
        }
    }

    {
         ::Qt::GlobalColor a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "E", sipType_Qt_GlobalColor, &a0))
        {
            sipCpp = new  ::QPalette(a0);

            return sipCpp;
        }
    }

    {
        const  ::QColor* a0;
        int a0State = 0;
        const  ::QColor* a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1J1", sipType_QColor, &a0, &a0State, sipType_QColor, &a1, &a1State))
        {
            sipCpp = new  ::QPalette(*a0,*a1);
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);
            sipReleaseType(const_cast< ::QColor *>(a1),sipType_QColor,a1State);

            return sipCpp;
        }
    }

    {
        const  ::QBrush* a0;
        int a0State = 0;
        const  ::QBrush* a1;
        int a1State = 0;
        const  ::QBrush* a2;
        int a2State = 0;
        const  ::QBrush* a3;
        int a3State = 0;
        const  ::QBrush* a4;
        int a4State = 0;
        const  ::QBrush* a5;
        int a5State = 0;
        const  ::QBrush* a6;
        int a6State = 0;
        const  ::QBrush* a7;
        int a7State = 0;
        const  ::QBrush* a8;
        int a8State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1J1J1J1J1J1J1J1J1", sipType_QBrush, &a0, &a0State, sipType_QBrush, &a1, &a1State, sipType_QBrush, &a2, &a2State, sipType_QBrush, &a3, &a3State, sipType_QBrush, &a4, &a4State, sipType_QBrush, &a5, &a5State, sipType_QBrush, &a6, &a6State, sipType_QBrush, &a7, &a7State, sipType_QBrush, &a8, &a8State))
        {
            sipCpp = new  ::QPalette(*a0,*a1,*a2,*a3,*a4,*a5,*a6,*a7,*a8);
            sipReleaseType(const_cast< ::QBrush *>(a0),sipType_QBrush,a0State);
            sipReleaseType(const_cast< ::QBrush *>(a1),sipType_QBrush,a1State);
            sipReleaseType(const_cast< ::QBrush *>(a2),sipType_QBrush,a2State);
            sipReleaseType(const_cast< ::QBrush *>(a3),sipType_QBrush,a3State);
            sipReleaseType(const_cast< ::QBrush *>(a4),sipType_QBrush,a4State);
            sipReleaseType(const_cast< ::QBrush *>(a5),sipType_QBrush,a5State);
            sipReleaseType(const_cast< ::QBrush *>(a6),sipType_QBrush,a6State);
            sipReleaseType(const_cast< ::QBrush *>(a7),sipType_QBrush,a7State);
            sipReleaseType(const_cast< ::QBrush *>(a8),sipType_QBrush,a8State);

            return sipCpp;
        }
    }

    {
        const  ::QPalette* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QPalette, &a0))
        {
            sipCpp = new  ::QPalette(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QVariant* a0;
        PyObject *a0Wrapper;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "@J1", &a0Wrapper, sipType_QVariant, &a0, &a0State))
        {
            sipErrorState sipError = sipErrorNone;

#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpalette.sip"
        if (a0->canConvert<QPalette>())
            sipCpp = new QPalette(a0->value<QPalette>());
        else
            sipError = sipBadCallableArg(0, a0Wrapper);
#line 81742 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            if (sipError == sipErrorNone)
                return sipCpp;

            if (sipUnused)
            {
                Py_XDECREF(*sipUnused);
            }

            sipAddException(sipError, sipParseErr);

            if (sipError == sipErrorFail)
                return SIP_NULLPTR;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QPalette[] = {
    {(void *)slot_QPalette___ne__, ne_slot},
    {(void *)slot_QPalette___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QPalette[] = {
    {SIP_MLNAME_CAST(sipName_alternateBase), meth_QPalette_alternateBase, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_alternateBase)},
    {SIP_MLNAME_CAST(sipName_base), meth_QPalette_base, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_base)},
    {SIP_MLNAME_CAST(sipName_brightText), meth_QPalette_brightText, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_brightText)},
    {SIP_MLNAME_CAST(sipName_brush), meth_QPalette_brush, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_brush)},
    {SIP_MLNAME_CAST(sipName_button), meth_QPalette_button, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_button)},
    {SIP_MLNAME_CAST(sipName_buttonText), meth_QPalette_buttonText, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_buttonText)},
    {SIP_MLNAME_CAST(sipName_cacheKey), meth_QPalette_cacheKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_cacheKey)},
    {SIP_MLNAME_CAST(sipName_color), meth_QPalette_color, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_color)},
    {SIP_MLNAME_CAST(sipName_currentColorGroup), meth_QPalette_currentColorGroup, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_currentColorGroup)},
    {SIP_MLNAME_CAST(sipName_dark), meth_QPalette_dark, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_dark)},
    {SIP_MLNAME_CAST(sipName_highlight), meth_QPalette_highlight, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_highlight)},
    {SIP_MLNAME_CAST(sipName_highlightedText), meth_QPalette_highlightedText, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_highlightedText)},
    {SIP_MLNAME_CAST(sipName_isBrushSet), meth_QPalette_isBrushSet, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_isBrushSet)},
    {SIP_MLNAME_CAST(sipName_isCopyOf), meth_QPalette_isCopyOf, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_isCopyOf)},
    {SIP_MLNAME_CAST(sipName_isEqual), meth_QPalette_isEqual, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_isEqual)},
    {SIP_MLNAME_CAST(sipName_light), meth_QPalette_light, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_light)},
    {SIP_MLNAME_CAST(sipName_link), meth_QPalette_link, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_link)},
    {SIP_MLNAME_CAST(sipName_linkVisited), meth_QPalette_linkVisited, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_linkVisited)},
    {SIP_MLNAME_CAST(sipName_mid), meth_QPalette_mid, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_mid)},
    {SIP_MLNAME_CAST(sipName_midlight), meth_QPalette_midlight, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_midlight)},
    {SIP_MLNAME_CAST(sipName_placeholderText), meth_QPalette_placeholderText, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_placeholderText)},
    {SIP_MLNAME_CAST(sipName_resolve), meth_QPalette_resolve, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_resolve)},
    {SIP_MLNAME_CAST(sipName_setBrush), meth_QPalette_setBrush, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_setBrush)},
    {SIP_MLNAME_CAST(sipName_setColor), meth_QPalette_setColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_setColor)},
    {SIP_MLNAME_CAST(sipName_setColorGroup), meth_QPalette_setColorGroup, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_setColorGroup)},
    {SIP_MLNAME_CAST(sipName_setCurrentColorGroup), meth_QPalette_setCurrentColorGroup, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_setCurrentColorGroup)},
    {SIP_MLNAME_CAST(sipName_shadow), meth_QPalette_shadow, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_shadow)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QPalette_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_swap)},
    {SIP_MLNAME_CAST(sipName_text), meth_QPalette_text, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_text)},
    {SIP_MLNAME_CAST(sipName_toolTipBase), meth_QPalette_toolTipBase, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_toolTipBase)},
    {SIP_MLNAME_CAST(sipName_toolTipText), meth_QPalette_toolTipText, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_toolTipText)},
    {SIP_MLNAME_CAST(sipName_window), meth_QPalette_window, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_window)},
    {SIP_MLNAME_CAST(sipName_windowText), meth_QPalette_windowText, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_windowText)}
};

static sipEnumMemberDef enummembers_QPalette[] = {
    {sipName_Active, static_cast<int>( ::QPalette::Active), 217},
    {sipName_All, static_cast<int>( ::QPalette::All), 217},
    {sipName_AlternateBase, static_cast<int>( ::QPalette::AlternateBase), 218},
    {sipName_Background, static_cast<int>( ::QPalette::Background), 218},
    {sipName_Base, static_cast<int>( ::QPalette::Base), 218},
    {sipName_BrightText, static_cast<int>( ::QPalette::BrightText), 218},
    {sipName_Button, static_cast<int>( ::QPalette::Button), 218},
    {sipName_ButtonText, static_cast<int>( ::QPalette::ButtonText), 218},
    {sipName_Current, static_cast<int>( ::QPalette::Current), 217},
    {sipName_Dark, static_cast<int>( ::QPalette::Dark), 218},
    {sipName_Disabled, static_cast<int>( ::QPalette::Disabled), 217},
    {sipName_Foreground, static_cast<int>( ::QPalette::Foreground), 218},
    {sipName_Highlight, static_cast<int>( ::QPalette::Highlight), 218},
    {sipName_HighlightedText, static_cast<int>( ::QPalette::HighlightedText), 218},
    {sipName_Inactive, static_cast<int>( ::QPalette::Inactive), 217},
    {sipName_Light, static_cast<int>( ::QPalette::Light), 218},
    {sipName_Link, static_cast<int>( ::QPalette::Link), 218},
    {sipName_LinkVisited, static_cast<int>( ::QPalette::LinkVisited), 218},
    {sipName_Mid, static_cast<int>( ::QPalette::Mid), 218},
    {sipName_Midlight, static_cast<int>( ::QPalette::Midlight), 218},
    {sipName_NColorGroups, static_cast<int>( ::QPalette::NColorGroups), 217},
    {sipName_NColorRoles, static_cast<int>( ::QPalette::NColorRoles), 218},
    {sipName_NoRole, static_cast<int>( ::QPalette::NoRole), 218},
    {sipName_Normal, static_cast<int>( ::QPalette::Normal), 217},
    {sipName_PlaceholderText, static_cast<int>( ::QPalette::PlaceholderText), 218},
    {sipName_Shadow, static_cast<int>( ::QPalette::Shadow), 218},
    {sipName_Text, static_cast<int>( ::QPalette::Text), 218},
    {sipName_ToolTipBase, static_cast<int>( ::QPalette::ToolTipBase), 218},
    {sipName_ToolTipText, static_cast<int>( ::QPalette::ToolTipText), 218},
    {sipName_Window, static_cast<int>( ::QPalette::Window), 218},
    {sipName_WindowText, static_cast<int>( ::QPalette::WindowText), 218},
};

PyDoc_STRVAR(doc_QPalette, "\1QPalette()\n"
"QPalette(Union[QColor, Qt.GlobalColor, QGradient])\n"
"QPalette(Qt.GlobalColor)\n"
"QPalette(Union[QColor, Qt.GlobalColor, QGradient], Union[QColor, Qt.GlobalColor, QGradient])\n"
"QPalette(Union[QBrush, QColor, Qt.GlobalColor, QGradient], Union[QBrush, QColor, Qt.GlobalColor, QGradient], Union[QBrush, QColor, Qt.GlobalColor, QGradient], Union[QBrush, QColor, Qt.GlobalColor, QGradient], Union[QBrush, QColor, Qt.GlobalColor, QGradient], Union[QBrush, QColor, Qt.GlobalColor, QGradient], Union[QBrush, QColor, Qt.GlobalColor, QGradient], Union[QBrush, QColor, Qt.GlobalColor, QGradient], Union[QBrush, QColor, Qt.GlobalColor, QGradient])\n"
"QPalette(QPalette)\n"
"QPalette(Any)");


static pyqt5ClassPluginDef plugin_QPalette = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QPalette = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPalette,
        {SIP_NULLPTR},
        &plugin_QPalette
    },
    {
        sipNameNr_QPalette,
        {0, 0, 1},
        33, methods_QPalette,
        31, enummembers_QPalette,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPalette,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QPalette,
    init_type_QPalette,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QPalette,
    assign_QPalette,
    array_QPalette,
    copy_QPalette,
    release_QPalette,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 151 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 81917 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpen.sip"
#include <qpen.h>
#line 81921 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 81924 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 241 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpygui_qvector.sip"
#include <qvector.h>
#line 81927 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81930 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QPainterPathStroker_setWidth, "setWidth(self, float)");

extern "C" {static PyObject *meth_QPainterPathStroker_setWidth(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_setWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPainterPathStroker, &sipCpp, &a0))
        {
            sipCpp->setWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_setWidth, doc_QPainterPathStroker_setWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPathStroker_width, "width(self) -> float");

extern "C" {static PyObject *meth_QPainterPathStroker_width(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPathStroker, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->width();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_width, doc_QPainterPathStroker_width);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPathStroker_setCapStyle, "setCapStyle(self, Qt.PenCapStyle)");

extern "C" {static PyObject *meth_QPainterPathStroker_setCapStyle(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_setCapStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::PenCapStyle a0;
         ::QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPainterPathStroker, &sipCpp, sipType_Qt_PenCapStyle, &a0))
        {
            sipCpp->setCapStyle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_setCapStyle, doc_QPainterPathStroker_setCapStyle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPathStroker_capStyle, "capStyle(self) -> Qt.PenCapStyle");

extern "C" {static PyObject *meth_QPainterPathStroker_capStyle(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_capStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPathStroker, &sipCpp))
        {
             ::Qt::PenCapStyle sipRes;

            sipRes = sipCpp->capStyle();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_PenCapStyle);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_capStyle, doc_QPainterPathStroker_capStyle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPathStroker_setJoinStyle, "setJoinStyle(self, Qt.PenJoinStyle)");

extern "C" {static PyObject *meth_QPainterPathStroker_setJoinStyle(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_setJoinStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::PenJoinStyle a0;
         ::QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPainterPathStroker, &sipCpp, sipType_Qt_PenJoinStyle, &a0))
        {
            sipCpp->setJoinStyle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_setJoinStyle, doc_QPainterPathStroker_setJoinStyle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPathStroker_joinStyle, "joinStyle(self) -> Qt.PenJoinStyle");

extern "C" {static PyObject *meth_QPainterPathStroker_joinStyle(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_joinStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPathStroker, &sipCpp))
        {
             ::Qt::PenJoinStyle sipRes;

            sipRes = sipCpp->joinStyle();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_PenJoinStyle);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_joinStyle, doc_QPainterPathStroker_joinStyle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPathStroker_setMiterLimit, "setMiterLimit(self, float)");

extern "C" {static PyObject *meth_QPainterPathStroker_setMiterLimit(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_setMiterLimit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPainterPathStroker, &sipCpp, &a0))
        {
            sipCpp->setMiterLimit(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_setMiterLimit, doc_QPainterPathStroker_setMiterLimit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPathStroker_miterLimit, "miterLimit(self) -> float");

extern "C" {static PyObject *meth_QPainterPathStroker_miterLimit(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_miterLimit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPathStroker, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->miterLimit();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_miterLimit, doc_QPainterPathStroker_miterLimit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPathStroker_setCurveThreshold, "setCurveThreshold(self, float)");

extern "C" {static PyObject *meth_QPainterPathStroker_setCurveThreshold(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_setCurveThreshold(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPainterPathStroker, &sipCpp, &a0))
        {
            sipCpp->setCurveThreshold(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_setCurveThreshold, doc_QPainterPathStroker_setCurveThreshold);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPathStroker_curveThreshold, "curveThreshold(self) -> float");

extern "C" {static PyObject *meth_QPainterPathStroker_curveThreshold(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_curveThreshold(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPathStroker, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->curveThreshold();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_curveThreshold, doc_QPainterPathStroker_curveThreshold);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPathStroker_setDashPattern, "setDashPattern(self, Qt.PenStyle)\n"
"setDashPattern(self, Iterable[float])");

extern "C" {static PyObject *meth_QPainterPathStroker_setDashPattern(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_setDashPattern(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::PenStyle a0;
         ::QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPainterPathStroker, &sipCpp, sipType_Qt_PenStyle, &a0))
        {
            sipCpp->setDashPattern(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QVector< ::qreal>* a0;
        int a0State = 0;
         ::QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainterPathStroker, &sipCpp, sipType_QVector_2400,&a0, &a0State))
        {
            sipCpp->setDashPattern(*a0);
            sipReleaseType(const_cast< ::QVector< ::qreal> *>(a0),sipType_QVector_2400,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_setDashPattern, doc_QPainterPathStroker_setDashPattern);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPathStroker_dashPattern, "dashPattern(self) -> List[float]");

extern "C" {static PyObject *meth_QPainterPathStroker_dashPattern(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_dashPattern(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPathStroker, &sipCpp))
        {
             ::QVector< ::qreal>*sipRes;

            sipRes = new  ::QVector< ::qreal>(sipCpp->dashPattern());

            return sipConvertFromNewType(sipRes,sipType_QVector_2400,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_dashPattern, doc_QPainterPathStroker_dashPattern);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPathStroker_createStroke, "createStroke(self, QPainterPath) -> QPainterPath");

extern "C" {static PyObject *meth_QPainterPathStroker_createStroke(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_createStroke(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPath* a0;
        const  ::QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainterPathStroker, &sipCpp, sipType_QPainterPath, &a0))
        {
             ::QPainterPath*sipRes;

            sipRes = new  ::QPainterPath(sipCpp->createStroke(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_createStroke, doc_QPainterPathStroker_createStroke);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPathStroker_setDashOffset, "setDashOffset(self, float)");

extern "C" {static PyObject *meth_QPainterPathStroker_setDashOffset(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_setDashOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPainterPathStroker, &sipCpp, &a0))
        {
            sipCpp->setDashOffset(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_setDashOffset, doc_QPainterPathStroker_setDashOffset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPathStroker_dashOffset, "dashOffset(self) -> float");

extern "C" {static PyObject *meth_QPainterPathStroker_dashOffset(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_dashOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPathStroker, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->dashOffset();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_dashOffset, doc_QPainterPathStroker_dashOffset);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPainterPathStroker(void *, int);}
static void release_QPainterPathStroker(void *sipCppV, int)
{
    delete reinterpret_cast< ::QPainterPathStroker *>(sipCppV);
}


extern "C" {static void dealloc_QPainterPathStroker(sipSimpleWrapper *);}
static void dealloc_QPainterPathStroker(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPainterPathStroker(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QPainterPathStroker(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPainterPathStroker(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QPainterPathStroker *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QPainterPathStroker();

            return sipCpp;
        }
    }

    {
        const  ::QPen* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QPen, &a0, &a0State))
        {
            sipCpp = new  ::QPainterPathStroker(*a0);
            sipReleaseType(const_cast< ::QPen *>(a0),sipType_QPen,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QPainterPathStroker[] = {
    {SIP_MLNAME_CAST(sipName_capStyle), meth_QPainterPathStroker_capStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPathStroker_capStyle)},
    {SIP_MLNAME_CAST(sipName_createStroke), meth_QPainterPathStroker_createStroke, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPathStroker_createStroke)},
    {SIP_MLNAME_CAST(sipName_curveThreshold), meth_QPainterPathStroker_curveThreshold, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPathStroker_curveThreshold)},
    {SIP_MLNAME_CAST(sipName_dashOffset), meth_QPainterPathStroker_dashOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPathStroker_dashOffset)},
    {SIP_MLNAME_CAST(sipName_dashPattern), meth_QPainterPathStroker_dashPattern, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPathStroker_dashPattern)},
    {SIP_MLNAME_CAST(sipName_joinStyle), meth_QPainterPathStroker_joinStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPathStroker_joinStyle)},
    {SIP_MLNAME_CAST(sipName_miterLimit), meth_QPainterPathStroker_miterLimit, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPathStroker_miterLimit)},
    {SIP_MLNAME_CAST(sipName_setCapStyle), meth_QPainterPathStroker_setCapStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPathStroker_setCapStyle)},
    {SIP_MLNAME_CAST(sipName_setCurveThreshold), meth_QPainterPathStroker_setCurveThreshold, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPathStroker_setCurveThreshold)},
    {SIP_MLNAME_CAST(sipName_setDashOffset), meth_QPainterPathStroker_setDashOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPathStroker_setDashOffset)},
    {SIP_MLNAME_CAST(sipName_setDashPattern), meth_QPainterPathStroker_setDashPattern, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPathStroker_setDashPattern)},
    {SIP_MLNAME_CAST(sipName_setJoinStyle), meth_QPainterPathStroker_setJoinStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPathStroker_setJoinStyle)},
    {SIP_MLNAME_CAST(sipName_setMiterLimit), meth_QPainterPathStroker_setMiterLimit, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPathStroker_setMiterLimit)},
    {SIP_MLNAME_CAST(sipName_setWidth), meth_QPainterPathStroker_setWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPathStroker_setWidth)},
    {SIP_MLNAME_CAST(sipName_width), meth_QPainterPathStroker_width, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPathStroker_width)}
};

PyDoc_STRVAR(doc_QPainterPathStroker, "\1QPainterPathStroker()\n"
"QPainterPathStroker(Union[QPen, QColor, Qt.GlobalColor, QGradient])");


static pyqt5ClassPluginDef plugin_QPainterPathStroker = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QPainterPathStroker = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPainterPathStroker,
        {SIP_NULLPTR},
        &plugin_QPainterPathStroker
    },
    {
        sipNameNr_QPainterPathStroker,
        {0, 0, 1},
        15, methods_QPainterPathStroker,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPainterPathStroker,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QPainterPathStroker,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QPainterPathStroker,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QPainterPathStroker,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 41 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 82505 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 82509 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QPainterPath_Element_isMoveTo, "isMoveTo(self) -> bool");

extern "C" {static PyObject *meth_QPainterPath_Element_isMoveTo(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_Element_isMoveTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPath::Element *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPath_Element, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isMoveTo();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Element, sipName_isMoveTo, doc_QPainterPath_Element_isMoveTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_Element_isLineTo, "isLineTo(self) -> bool");

extern "C" {static PyObject *meth_QPainterPath_Element_isLineTo(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_Element_isLineTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPath::Element *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPath_Element, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isLineTo();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Element, sipName_isLineTo, doc_QPainterPath_Element_isLineTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_Element_isCurveTo, "isCurveTo(self) -> bool");

extern "C" {static PyObject *meth_QPainterPath_Element_isCurveTo(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_Element_isCurveTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPath::Element *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPath_Element, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isCurveTo();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Element, sipName_isCurveTo, doc_QPainterPath_Element_isCurveTo);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QPainterPath_Element___ne__(PyObject *,PyObject *);}
static PyObject *slot_QPainterPath_Element___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPainterPath::Element *sipCpp = reinterpret_cast< ::QPainterPath::Element *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPainterPath_Element));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPath::Element* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPainterPath_Element, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QPainterPath::Element::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QPainterPath_Element, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QPainterPath_Element___eq__(PyObject *,PyObject *);}
static PyObject *slot_QPainterPath_Element___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPainterPath::Element *sipCpp = reinterpret_cast< ::QPainterPath::Element *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPainterPath_Element));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPath::Element* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPainterPath_Element, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QPainterPath::Element::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QPainterPath_Element, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QPainterPath_Element(void *, int);}
static void release_QPainterPath_Element(void *sipCppV, int)
{
    delete reinterpret_cast< ::QPainterPath::Element *>(sipCppV);
}


extern "C" {static void assign_QPainterPath_Element(void *, SIP_SSIZE_T, void *);}
static void assign_QPainterPath_Element(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QPainterPath::Element *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QPainterPath::Element *>(sipSrc);
}


extern "C" {static void *array_QPainterPath_Element(SIP_SSIZE_T);}
static void *array_QPainterPath_Element(SIP_SSIZE_T sipNrElem)
{
    return new  ::QPainterPath::Element[sipNrElem];
}


extern "C" {static void *copy_QPainterPath_Element(const void *, SIP_SSIZE_T);}
static void *copy_QPainterPath_Element(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QPainterPath::Element(reinterpret_cast<const  ::QPainterPath::Element *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPainterPath_Element(sipSimpleWrapper *);}
static void dealloc_QPainterPath_Element(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPainterPath_Element(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QPainterPath_Element(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPainterPath_Element(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QPainterPath::Element *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QPainterPath::Element();

            return sipCpp;
        }
    }

    {
        const  ::QPainterPath::Element* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QPainterPath_Element, &a0))
        {
            sipCpp = new  ::QPainterPath::Element(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QPainterPath_Element[] = {
    {(void *)slot_QPainterPath_Element___ne__, ne_slot},
    {(void *)slot_QPainterPath_Element___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QPainterPath_Element[] = {
    {SIP_MLNAME_CAST(sipName_isCurveTo), meth_QPainterPath_Element_isCurveTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_Element_isCurveTo)},
    {SIP_MLNAME_CAST(sipName_isLineTo), meth_QPainterPath_Element_isLineTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_Element_isLineTo)},
    {SIP_MLNAME_CAST(sipName_isMoveTo), meth_QPainterPath_Element_isMoveTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_Element_isMoveTo)}
};


extern "C" {static PyObject *varget_QPainterPath_Element_type(void *, PyObject *, PyObject *);}
static PyObject *varget_QPainterPath_Element_type(void *sipSelf, PyObject *, PyObject *)
{
     ::QPainterPath::ElementType sipVal;
     ::QPainterPath::Element *sipCpp = reinterpret_cast< ::QPainterPath::Element *>(sipSelf);

    sipVal = sipCpp->type;

    return sipConvertFromEnum(static_cast<int>(sipVal), sipType_QPainterPath_ElementType);
}


extern "C" {static int varset_QPainterPath_Element_type(void *, PyObject *, PyObject *);}
static int varset_QPainterPath_Element_type(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::QPainterPath::ElementType sipVal;
     ::QPainterPath::Element *sipCpp = reinterpret_cast< ::QPainterPath::Element *>(sipSelf);

    sipVal = ( ::QPainterPath::ElementType)sipConvertToEnum(sipPy, sipType_QPainterPath_ElementType);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->type = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QPainterPath_Element_x(void *, PyObject *, PyObject *);}
static PyObject *varget_QPainterPath_Element_x(void *sipSelf, PyObject *, PyObject *)
{
     ::qreal sipVal;
     ::QPainterPath::Element *sipCpp = reinterpret_cast< ::QPainterPath::Element *>(sipSelf);

    sipVal = sipCpp->x;

    return PyFloat_FromDouble(sipVal);
}


extern "C" {static int varset_QPainterPath_Element_x(void *, PyObject *, PyObject *);}
static int varset_QPainterPath_Element_x(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::qreal sipVal;
     ::QPainterPath::Element *sipCpp = reinterpret_cast< ::QPainterPath::Element *>(sipSelf);

    sipVal = PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->x = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QPainterPath_Element_y(void *, PyObject *, PyObject *);}
static PyObject *varget_QPainterPath_Element_y(void *sipSelf, PyObject *, PyObject *)
{
     ::qreal sipVal;
     ::QPainterPath::Element *sipCpp = reinterpret_cast< ::QPainterPath::Element *>(sipSelf);

    sipVal = sipCpp->y;

    return PyFloat_FromDouble(sipVal);
}


extern "C" {static int varset_QPainterPath_Element_y(void *, PyObject *, PyObject *);}
static int varset_QPainterPath_Element_y(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::qreal sipVal;
     ::QPainterPath::Element *sipCpp = reinterpret_cast< ::QPainterPath::Element *>(sipSelf);

    sipVal = PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->y = sipVal;

    return 0;
}

sipVariableDef variables_QPainterPath_Element[] = {
    {InstanceVariable, sipName_type, (PyMethodDef *)varget_QPainterPath_Element_type, (PyMethodDef *)varset_QPainterPath_Element_type, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_x, (PyMethodDef *)varget_QPainterPath_Element_x, (PyMethodDef *)varset_QPainterPath_Element_x, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_y, (PyMethodDef *)varget_QPainterPath_Element_y, (PyMethodDef *)varset_QPainterPath_Element_y, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_QPainterPath_Element, "\1QPainterPath.Element()\n"
"QPainterPath.Element(QPainterPath.Element)");


static pyqt5ClassPluginDef plugin_QPainterPath_Element = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QPainterPath_Element = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPainterPath__Element,
        {SIP_NULLPTR},
        &plugin_QPainterPath_Element
    },
    {
        sipNameNr_Element,
        {210, 255, 0},
        3, methods_QPainterPath_Element,
        0, SIP_NULLPTR,
        3, variables_QPainterPath_Element,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPainterPath_Element,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QPainterPath_Element,
    init_type_QPainterPath_Element,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QPainterPath_Element,
    assign_QPainterPath_Element,
    array_QPainterPath_Element,
    copy_QPainterPath_Element,
    release_QPainterPath_Element,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 82900 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 82904 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 82907 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 82910 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 82913 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 41 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 82918 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 315 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 82921 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 82924 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 82927 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 82930 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 82933 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QPainterPath_closeSubpath, "closeSubpath(self)");

extern "C" {static PyObject *meth_QPainterPath_closeSubpath(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_closeSubpath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPath, &sipCpp))
        {
            sipCpp->closeSubpath();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_closeSubpath, doc_QPainterPath_closeSubpath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_moveTo, "moveTo(self, Union[QPointF, QPoint])\n"
"moveTo(self, float, float)");

extern "C" {static PyObject *meth_QPainterPath_moveTo(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_moveTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->moveTo(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
         ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QPainterPath, &sipCpp, &a0, &a1))
        {
            sipCpp->moveTo(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_moveTo, doc_QPainterPath_moveTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_lineTo, "lineTo(self, Union[QPointF, QPoint])\n"
"lineTo(self, float, float)");

extern "C" {static PyObject *meth_QPainterPath_lineTo(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_lineTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->lineTo(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
         ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QPainterPath, &sipCpp, &a0, &a1))
        {
            sipCpp->lineTo(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_lineTo, doc_QPainterPath_lineTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_arcTo, "arcTo(self, QRectF, float, float)\n"
"arcTo(self, float, float, float, float, float, float)");

extern "C" {static PyObject *meth_QPainterPath_arcTo(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_arcTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
         ::qreal a1;
         ::qreal a2;
         ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9dd", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QRectF, &a0, &a1, &a2))
        {
            sipCpp->arcTo(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
         ::qreal a4;
         ::qreal a5;
         ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddddd", &sipSelf, sipType_QPainterPath, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            sipCpp->arcTo(a0,a1,a2,a3,a4,a5);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_arcTo, doc_QPainterPath_arcTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_cubicTo, "cubicTo(self, Union[QPointF, QPoint], Union[QPointF, QPoint], Union[QPointF, QPoint])\n"
"cubicTo(self, float, float, float, float, float, float)");

extern "C" {static PyObject *meth_QPainterPath_cubicTo(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_cubicTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QPointF* a1;
        int a1State = 0;
        const  ::QPointF* a2;
        int a2State = 0;
         ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QPointF, &a0, &a0State, sipType_QPointF, &a1, &a1State, sipType_QPointF, &a2, &a2State))
        {
            sipCpp->cubicTo(*a0,*a1,*a2);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);
            sipReleaseType(const_cast< ::QPointF *>(a2),sipType_QPointF,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
         ::qreal a4;
         ::qreal a5;
         ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddddd", &sipSelf, sipType_QPainterPath, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            sipCpp->cubicTo(a0,a1,a2,a3,a4,a5);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_cubicTo, doc_QPainterPath_cubicTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_quadTo, "quadTo(self, Union[QPointF, QPoint], Union[QPointF, QPoint])\n"
"quadTo(self, float, float, float, float)");

extern "C" {static PyObject *meth_QPainterPath_quadTo(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_quadTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QPointF* a1;
        int a1State = 0;
         ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QPointF, &a0, &a0State, sipType_QPointF, &a1, &a1State))
        {
            sipCpp->quadTo(*a0,*a1);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
         ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_QPainterPath, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->quadTo(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_quadTo, doc_QPainterPath_quadTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_currentPosition, "currentPosition(self) -> QPointF");

extern "C" {static PyObject *meth_QPainterPath_currentPosition(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_currentPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPath, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->currentPosition());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_currentPosition, doc_QPainterPath_currentPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_addRect, "addRect(self, QRectF)\n"
"addRect(self, float, float, float, float)");

extern "C" {static PyObject *meth_QPainterPath_addRect(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_addRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
         ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QRectF, &a0))
        {
            sipCpp->addRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
         ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_QPainterPath, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->addRect(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_addRect, doc_QPainterPath_addRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_addEllipse, "addEllipse(self, QRectF)\n"
"addEllipse(self, float, float, float, float)\n"
"addEllipse(self, Union[QPointF, QPoint], float, float)");

extern "C" {static PyObject *meth_QPainterPath_addEllipse(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_addEllipse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
         ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QRectF, &a0))
        {
            sipCpp->addEllipse(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
         ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_QPainterPath, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->addEllipse(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::qreal a1;
         ::qreal a2;
         ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1dd", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QPointF, &a0, &a0State, &a1, &a2))
        {
            sipCpp->addEllipse(*a0,a1,a2);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_addEllipse, doc_QPainterPath_addEllipse);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_addPolygon, "addPolygon(self, QPolygonF)");

extern "C" {static PyObject *meth_QPainterPath_addPolygon(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_addPolygon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPolygonF* a0;
         ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QPolygonF, &a0))
        {
            sipCpp->addPolygon(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_addPolygon, doc_QPainterPath_addPolygon);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_addText, "addText(self, Union[QPointF, QPoint], QFont, str)\n"
"addText(self, float, float, QFont, str)");

extern "C" {static PyObject *meth_QPainterPath_addText(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_addText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QFont* a1;
        const  ::QString* a2;
        int a2State = 0;
         ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9J1", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QPointF, &a0, &a0State, sipType_QFont, &a1, sipType_QString,&a2, &a2State))
        {
            sipCpp->addText(*a0,*a1,*a2);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
        const  ::QFont* a2;
        const  ::QString* a3;
        int a3State = 0;
         ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BddJ9J1", &sipSelf, sipType_QPainterPath, &sipCpp, &a0, &a1, sipType_QFont, &a2, sipType_QString,&a3, &a3State))
        {
            sipCpp->addText(a0,a1,*a2,*a3);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_addText, doc_QPainterPath_addText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_addPath, "addPath(self, QPainterPath)");

extern "C" {static PyObject *meth_QPainterPath_addPath(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_addPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPath* a0;
         ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QPainterPath, &a0))
        {
            sipCpp->addPath(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_addPath, doc_QPainterPath_addPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_addRegion, "addRegion(self, QRegion)");

extern "C" {static PyObject *meth_QPainterPath_addRegion(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_addRegion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegion* a0;
         ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QRegion, &a0))
        {
            sipCpp->addRegion(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_addRegion, doc_QPainterPath_addRegion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_connectPath, "connectPath(self, QPainterPath)");

extern "C" {static PyObject *meth_QPainterPath_connectPath(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_connectPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPath* a0;
         ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QPainterPath, &a0))
        {
            sipCpp->connectPath(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_connectPath, doc_QPainterPath_connectPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_contains, "contains(self, Union[QPointF, QPoint]) -> bool\n"
"contains(self, QRectF) -> bool\n"
"contains(self, QPainterPath) -> bool");

extern "C" {static PyObject *meth_QPainterPath_contains(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_contains(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->contains(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QRectF* a0;
        const  ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QRectF, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->contains(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QPainterPath* a0;
        const  ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QPainterPath, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->contains(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_contains, doc_QPainterPath_contains);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_intersects, "intersects(self, QRectF) -> bool\n"
"intersects(self, QPainterPath) -> bool");

extern "C" {static PyObject *meth_QPainterPath_intersects(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_intersects(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
        const  ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QRectF, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->intersects(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QPainterPath* a0;
        const  ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QPainterPath, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->intersects(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_intersects, doc_QPainterPath_intersects);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_boundingRect, "boundingRect(self) -> QRectF");

extern "C" {static PyObject *meth_QPainterPath_boundingRect(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_boundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPath, &sipCpp))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->boundingRect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_boundingRect, doc_QPainterPath_boundingRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_controlPointRect, "controlPointRect(self) -> QRectF");

extern "C" {static PyObject *meth_QPainterPath_controlPointRect(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_controlPointRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPath, &sipCpp))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->controlPointRect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_controlPointRect, doc_QPainterPath_controlPointRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_fillRule, "fillRule(self) -> Qt.FillRule");

extern "C" {static PyObject *meth_QPainterPath_fillRule(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_fillRule(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPath, &sipCpp))
        {
             ::Qt::FillRule sipRes;

            sipRes = sipCpp->fillRule();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_FillRule);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_fillRule, doc_QPainterPath_fillRule);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_setFillRule, "setFillRule(self, Qt.FillRule)");

extern "C" {static PyObject *meth_QPainterPath_setFillRule(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_setFillRule(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::FillRule a0;
         ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_Qt_FillRule, &a0))
        {
            sipCpp->setFillRule(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_setFillRule, doc_QPainterPath_setFillRule);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_toReversed, "toReversed(self) -> QPainterPath");

extern "C" {static PyObject *meth_QPainterPath_toReversed(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_toReversed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPath, &sipCpp))
        {
             ::QPainterPath*sipRes;

            sipRes = new  ::QPainterPath(sipCpp->toReversed());

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_toReversed, doc_QPainterPath_toReversed);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_toSubpathPolygons, "toSubpathPolygons(self) -> List[QPolygonF]\n"
"toSubpathPolygons(self, QTransform) -> List[QPolygonF]");

extern "C" {static PyObject *meth_QPainterPath_toSubpathPolygons(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_toSubpathPolygons(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPath, &sipCpp))
        {
            QList< ::QPolygonF>*sipRes = 0;

#line 84 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainterpath.sip"
        sipRes = new QList<QPolygonF>(sipCpp->toSubpathPolygons());
#line 83784 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipConvertFromNewType(sipRes,sipType_QList_0100QPolygonF,SIP_NULLPTR);
        }
    }

    {
        const  ::QTransform* a0;
        const  ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QTransform, &a0))
        {
            QList< ::QPolygonF>*sipRes;

            sipRes = new QList< ::QPolygonF>(sipCpp->toSubpathPolygons(*a0));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QPolygonF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_toSubpathPolygons, doc_QPainterPath_toSubpathPolygons);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_toFillPolygons, "toFillPolygons(self) -> List[QPolygonF]\n"
"toFillPolygons(self, QTransform) -> List[QPolygonF]");

extern "C" {static PyObject *meth_QPainterPath_toFillPolygons(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_toFillPolygons(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPath, &sipCpp))
        {
            QList< ::QPolygonF>*sipRes = 0;

#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainterpath.sip"
        sipRes = new QList<QPolygonF>(sipCpp->toFillPolygons());
#line 83830 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipConvertFromNewType(sipRes,sipType_QList_0100QPolygonF,SIP_NULLPTR);
        }
    }

    {
        const  ::QTransform* a0;
        const  ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QTransform, &a0))
        {
            QList< ::QPolygonF>*sipRes;

            sipRes = new QList< ::QPolygonF>(sipCpp->toFillPolygons(*a0));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QPolygonF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_toFillPolygons, doc_QPainterPath_toFillPolygons);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_toFillPolygon, "toFillPolygon(self) -> QPolygonF\n"
"toFillPolygon(self, QTransform) -> QPolygonF");

extern "C" {static PyObject *meth_QPainterPath_toFillPolygon(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_toFillPolygon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPath, &sipCpp))
        {
             ::QPolygonF*sipRes = 0;

#line 94 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainterpath.sip"
        sipRes = new QPolygonF(sipCpp->toFillPolygon());
#line 83876 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipConvertFromNewType(sipRes,sipType_QPolygonF,SIP_NULLPTR);
        }
    }

    {
        const  ::QTransform* a0;
        const  ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QTransform, &a0))
        {
             ::QPolygonF*sipRes;

            sipRes = new  ::QPolygonF(sipCpp->toFillPolygon(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPolygonF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_toFillPolygon, doc_QPainterPath_toFillPolygon);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_arcMoveTo, "arcMoveTo(self, QRectF, float)\n"
"arcMoveTo(self, float, float, float, float, float)");

extern "C" {static PyObject *meth_QPainterPath_arcMoveTo(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_arcMoveTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
         ::qreal a1;
         ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9d", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QRectF, &a0, &a1))
        {
            sipCpp->arcMoveTo(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
         ::qreal a4;
         ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bddddd", &sipSelf, sipType_QPainterPath, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->arcMoveTo(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_arcMoveTo, doc_QPainterPath_arcMoveTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QPainterPath_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPath, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_isEmpty, doc_QPainterPath_isEmpty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_elementCount, "elementCount(self) -> int");

extern "C" {static PyObject *meth_QPainterPath_elementCount(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_elementCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPath, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->elementCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_elementCount, doc_QPainterPath_elementCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_elementAt, "elementAt(self, int) -> QPainterPath.Element");

extern "C" {static PyObject *meth_QPainterPath_elementAt(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_elementAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPainterPath, &sipCpp, &a0))
        {
             ::QPainterPath::Element*sipRes;

            sipRes = new  ::QPainterPath::Element(sipCpp->elementAt(a0));

            return sipConvertFromNewType(sipRes,sipType_QPainterPath_Element,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_elementAt, doc_QPainterPath_elementAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_setElementPositionAt, "setElementPositionAt(self, int, float, float)");

extern "C" {static PyObject *meth_QPainterPath_setElementPositionAt(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_setElementPositionAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::qreal a1;
         ::qreal a2;
         ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bidd", &sipSelf, sipType_QPainterPath, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->setElementPositionAt(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_setElementPositionAt, doc_QPainterPath_setElementPositionAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_length, "length(self) -> float");

extern "C" {static PyObject *meth_QPainterPath_length(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_length(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPath, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->length();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_length, doc_QPainterPath_length);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_percentAtLength, "percentAtLength(self, float) -> float");

extern "C" {static PyObject *meth_QPainterPath_percentAtLength(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_percentAtLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
        const  ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPainterPath, &sipCpp, &a0))
        {
             ::qreal sipRes;

            sipRes = sipCpp->percentAtLength(a0);

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_percentAtLength, doc_QPainterPath_percentAtLength);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_pointAtPercent, "pointAtPercent(self, float) -> QPointF");

extern "C" {static PyObject *meth_QPainterPath_pointAtPercent(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_pointAtPercent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
        const  ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPainterPath, &sipCpp, &a0))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->pointAtPercent(a0));

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_pointAtPercent, doc_QPainterPath_pointAtPercent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_angleAtPercent, "angleAtPercent(self, float) -> float");

extern "C" {static PyObject *meth_QPainterPath_angleAtPercent(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_angleAtPercent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
        const  ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPainterPath, &sipCpp, &a0))
        {
             ::qreal sipRes;

            sipRes = sipCpp->angleAtPercent(a0);

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_angleAtPercent, doc_QPainterPath_angleAtPercent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_slopeAtPercent, "slopeAtPercent(self, float) -> float");

extern "C" {static PyObject *meth_QPainterPath_slopeAtPercent(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_slopeAtPercent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
        const  ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPainterPath, &sipCpp, &a0))
        {
             ::qreal sipRes;

            sipRes = sipCpp->slopeAtPercent(a0);

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_slopeAtPercent, doc_QPainterPath_slopeAtPercent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_united, "united(self, QPainterPath) -> QPainterPath");

extern "C" {static PyObject *meth_QPainterPath_united(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_united(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPath* a0;
        const  ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QPainterPath, &a0))
        {
             ::QPainterPath*sipRes;

            sipRes = new  ::QPainterPath(sipCpp->united(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_united, doc_QPainterPath_united);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_intersected, "intersected(self, QPainterPath) -> QPainterPath");

extern "C" {static PyObject *meth_QPainterPath_intersected(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_intersected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPath* a0;
        const  ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QPainterPath, &a0))
        {
             ::QPainterPath*sipRes;

            sipRes = new  ::QPainterPath(sipCpp->intersected(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_intersected, doc_QPainterPath_intersected);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_subtracted, "subtracted(self, QPainterPath) -> QPainterPath");

extern "C" {static PyObject *meth_QPainterPath_subtracted(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_subtracted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPath* a0;
        const  ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QPainterPath, &a0))
        {
             ::QPainterPath*sipRes;

            sipRes = new  ::QPainterPath(sipCpp->subtracted(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_subtracted, doc_QPainterPath_subtracted);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_addRoundedRect, "addRoundedRect(self, QRectF, float, float, mode: Qt.SizeMode = Qt.AbsoluteSize)\n"
"addRoundedRect(self, float, float, float, float, float, float, mode: Qt.SizeMode = Qt.AbsoluteSize)");

extern "C" {static PyObject *meth_QPainterPath_addRoundedRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_addRoundedRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
         ::qreal a1;
         ::qreal a2;
         ::Qt::SizeMode a3 = Qt::AbsoluteSize;
         ::QPainterPath *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9dd|E", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QRectF, &a0, &a1, &a2, sipType_Qt_SizeMode, &a3))
        {
            sipCpp->addRoundedRect(*a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
         ::qreal a4;
         ::qreal a5;
         ::Qt::SizeMode a6 = Qt::AbsoluteSize;
         ::QPainterPath *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bdddddd|E", &sipSelf, sipType_QPainterPath, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5, sipType_Qt_SizeMode, &a6))
        {
            sipCpp->addRoundedRect(a0,a1,a2,a3,a4,a5,a6);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_addRoundedRect, doc_QPainterPath_addRoundedRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_simplified, "simplified(self) -> QPainterPath");

extern "C" {static PyObject *meth_QPainterPath_simplified(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_simplified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPath, &sipCpp))
        {
             ::QPainterPath*sipRes;

            sipRes = new  ::QPainterPath(sipCpp->simplified());

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_simplified, doc_QPainterPath_simplified);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_translate, "translate(self, float, float)\n"
"translate(self, Union[QPointF, QPoint])");

extern "C" {static PyObject *meth_QPainterPath_translate(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_translate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QPainterPath, &sipCpp, &a0, &a1))
        {
            sipCpp->translate(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->translate(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_translate, doc_QPainterPath_translate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_translated, "translated(self, float, float) -> QPainterPath\n"
"translated(self, Union[QPointF, QPoint]) -> QPainterPath");

extern "C" {static PyObject *meth_QPainterPath_translated(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_translated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
        const  ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QPainterPath, &sipCpp, &a0, &a1))
        {
             ::QPainterPath*sipRes;

            sipRes = new  ::QPainterPath(sipCpp->translated(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,SIP_NULLPTR);
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
             ::QPainterPath*sipRes;

            sipRes = new  ::QPainterPath(sipCpp->translated(*a0));
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_translated, doc_QPainterPath_translated);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPainterPath_swap, "swap(self, QPainterPath)");

extern "C" {static PyObject *meth_QPainterPath_swap(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPainterPath* a0;
         ::QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QPainterPath, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_swap, doc_QPainterPath_swap);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QPainterPath___mul__(PyObject *,PyObject *);}
static PyObject *slot_QPainterPath___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPath* a0;
        const  ::QTransform* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QPainterPath, &a0, sipType_QTransform, &a1))
        {
             ::QPainterPath*sipRes;

            sipRes = new  ::QPainterPath((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, mul_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QPainterPath___isub__(PyObject *,PyObject *);}
static PyObject *slot_QPainterPath___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QPainterPath)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QPainterPath *sipCpp = reinterpret_cast< ::QPainterPath *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPainterPath));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPath* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPainterPath, &a0))
        {
            sipCpp-> ::QPainterPath::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QPainterPath___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QPainterPath___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QPainterPath)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QPainterPath *sipCpp = reinterpret_cast< ::QPainterPath *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPainterPath));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPath* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPainterPath, &a0))
        {
            sipCpp-> ::QPainterPath::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QPainterPath___ior__(PyObject *,PyObject *);}
static PyObject *slot_QPainterPath___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QPainterPath)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QPainterPath *sipCpp = reinterpret_cast< ::QPainterPath *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPainterPath));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPath* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPainterPath, &a0))
        {
            sipCpp-> ::QPainterPath::operator|=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QPainterPath___iand__(PyObject *,PyObject *);}
static PyObject *slot_QPainterPath___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QPainterPath)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QPainterPath *sipCpp = reinterpret_cast< ::QPainterPath *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPainterPath));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPath* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPainterPath, &a0))
        {
            sipCpp-> ::QPainterPath::operator&=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QPainterPath___sub__(PyObject *,PyObject *);}
static PyObject *slot_QPainterPath___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPainterPath* a0;
        const  ::QPainterPath* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QPainterPath, &a0, sipType_QPainterPath, &a1))
        {
             ::QPainterPath*sipRes;

            sipRes = new  ::QPainterPath((*a0 - *a1));

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, sub_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QPainterPath___add__(PyObject *,PyObject *);}
static PyObject *slot_QPainterPath___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPainterPath* a0;
        const  ::QPainterPath* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QPainterPath, &a0, sipType_QPainterPath, &a1))
        {
             ::QPainterPath*sipRes;

            sipRes = new  ::QPainterPath((*a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, add_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QPainterPath___or__(PyObject *,PyObject *);}
static PyObject *slot_QPainterPath___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPainterPath* a0;
        const  ::QPainterPath* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QPainterPath, &a0, sipType_QPainterPath, &a1))
        {
             ::QPainterPath*sipRes;

            sipRes = new  ::QPainterPath((*a0 | *a1));

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QPainterPath___and__(PyObject *,PyObject *);}
static PyObject *slot_QPainterPath___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPainterPath* a0;
        const  ::QPainterPath* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QPainterPath, &a0, sipType_QPainterPath, &a1))
        {
             ::QPainterPath*sipRes;

            sipRes = new  ::QPainterPath((*a0 & *a1));

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QPainterPath___ne__(PyObject *,PyObject *);}
static PyObject *slot_QPainterPath___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPainterPath *sipCpp = reinterpret_cast< ::QPainterPath *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPainterPath));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPath* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPainterPath, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QPainterPath::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QPainterPath, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QPainterPath___eq__(PyObject *,PyObject *);}
static PyObject *slot_QPainterPath___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPainterPath *sipCpp = reinterpret_cast< ::QPainterPath *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPainterPath));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainterPath* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPainterPath, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QPainterPath::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QPainterPath, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QPainterPath(void *, int);}
static void release_QPainterPath(void *sipCppV, int)
{
    delete reinterpret_cast< ::QPainterPath *>(sipCppV);
}


extern "C" {static void assign_QPainterPath(void *, SIP_SSIZE_T, void *);}
static void assign_QPainterPath(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QPainterPath *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QPainterPath *>(sipSrc);
}


extern "C" {static void *array_QPainterPath(SIP_SSIZE_T);}
static void *array_QPainterPath(SIP_SSIZE_T sipNrElem)
{
    return new  ::QPainterPath[sipNrElem];
}


extern "C" {static void *copy_QPainterPath(const void *, SIP_SSIZE_T);}
static void *copy_QPainterPath(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QPainterPath(reinterpret_cast<const  ::QPainterPath *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPainterPath(sipSimpleWrapper *);}
static void dealloc_QPainterPath(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPainterPath(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QPainterPath(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPainterPath(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QPainterPath *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QPainterPath();

            return sipCpp;
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QPointF, &a0, &a0State))
        {
            sipCpp = new  ::QPainterPath(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QPainterPath* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QPainterPath, &a0))
        {
            sipCpp = new  ::QPainterPath(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QPainterPath[] = {
    {(void *)slot_QPainterPath___mul__, mul_slot},
    {(void *)slot_QPainterPath___isub__, isub_slot},
    {(void *)slot_QPainterPath___iadd__, iadd_slot},
    {(void *)slot_QPainterPath___ior__, ior_slot},
    {(void *)slot_QPainterPath___iand__, iand_slot},
    {(void *)slot_QPainterPath___sub__, sub_slot},
    {(void *)slot_QPainterPath___add__, add_slot},
    {(void *)slot_QPainterPath___or__, or_slot},
    {(void *)slot_QPainterPath___and__, and_slot},
    {(void *)slot_QPainterPath___ne__, ne_slot},
    {(void *)slot_QPainterPath___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QPainterPath[] = {
    {SIP_MLNAME_CAST(sipName_addEllipse), meth_QPainterPath_addEllipse, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_addEllipse)},
    {SIP_MLNAME_CAST(sipName_addPath), meth_QPainterPath_addPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_addPath)},
    {SIP_MLNAME_CAST(sipName_addPolygon), meth_QPainterPath_addPolygon, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_addPolygon)},
    {SIP_MLNAME_CAST(sipName_addRect), meth_QPainterPath_addRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_addRect)},
    {SIP_MLNAME_CAST(sipName_addRegion), meth_QPainterPath_addRegion, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_addRegion)},
    {SIP_MLNAME_CAST(sipName_addRoundedRect), SIP_MLMETH_CAST(meth_QPainterPath_addRoundedRect), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPainterPath_addRoundedRect)},
    {SIP_MLNAME_CAST(sipName_addText), meth_QPainterPath_addText, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_addText)},
    {SIP_MLNAME_CAST(sipName_angleAtPercent), meth_QPainterPath_angleAtPercent, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_angleAtPercent)},
    {SIP_MLNAME_CAST(sipName_arcMoveTo), meth_QPainterPath_arcMoveTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_arcMoveTo)},
    {SIP_MLNAME_CAST(sipName_arcTo), meth_QPainterPath_arcTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_arcTo)},
    {SIP_MLNAME_CAST(sipName_boundingRect), meth_QPainterPath_boundingRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_boundingRect)},
    {SIP_MLNAME_CAST(sipName_closeSubpath), meth_QPainterPath_closeSubpath, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_closeSubpath)},
    {SIP_MLNAME_CAST(sipName_connectPath), meth_QPainterPath_connectPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_connectPath)},
    {SIP_MLNAME_CAST(sipName_contains), meth_QPainterPath_contains, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_contains)},
    {SIP_MLNAME_CAST(sipName_controlPointRect), meth_QPainterPath_controlPointRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_controlPointRect)},
    {SIP_MLNAME_CAST(sipName_cubicTo), meth_QPainterPath_cubicTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_cubicTo)},
    {SIP_MLNAME_CAST(sipName_currentPosition), meth_QPainterPath_currentPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_currentPosition)},
    {SIP_MLNAME_CAST(sipName_elementAt), meth_QPainterPath_elementAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_elementAt)},
    {SIP_MLNAME_CAST(sipName_elementCount), meth_QPainterPath_elementCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_elementCount)},
    {SIP_MLNAME_CAST(sipName_fillRule), meth_QPainterPath_fillRule, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_fillRule)},
    {SIP_MLNAME_CAST(sipName_intersected), meth_QPainterPath_intersected, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_intersected)},
    {SIP_MLNAME_CAST(sipName_intersects), meth_QPainterPath_intersects, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_intersects)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QPainterPath_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_isEmpty)},
    {SIP_MLNAME_CAST(sipName_length), meth_QPainterPath_length, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_length)},
    {SIP_MLNAME_CAST(sipName_lineTo), meth_QPainterPath_lineTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_lineTo)},
    {SIP_MLNAME_CAST(sipName_moveTo), meth_QPainterPath_moveTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_moveTo)},
    {SIP_MLNAME_CAST(sipName_percentAtLength), meth_QPainterPath_percentAtLength, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_percentAtLength)},
    {SIP_MLNAME_CAST(sipName_pointAtPercent), meth_QPainterPath_pointAtPercent, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_pointAtPercent)},
    {SIP_MLNAME_CAST(sipName_quadTo), meth_QPainterPath_quadTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_quadTo)},
    {SIP_MLNAME_CAST(sipName_setElementPositionAt), meth_QPainterPath_setElementPositionAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_setElementPositionAt)},
    {SIP_MLNAME_CAST(sipName_setFillRule), meth_QPainterPath_setFillRule, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_setFillRule)},
    {SIP_MLNAME_CAST(sipName_simplified), meth_QPainterPath_simplified, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_simplified)},
    {SIP_MLNAME_CAST(sipName_slopeAtPercent), meth_QPainterPath_slopeAtPercent, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_slopeAtPercent)},
    {SIP_MLNAME_CAST(sipName_subtracted), meth_QPainterPath_subtracted, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_subtracted)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QPainterPath_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_swap)},
    {SIP_MLNAME_CAST(sipName_toFillPolygon), meth_QPainterPath_toFillPolygon, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_toFillPolygon)},
    {SIP_MLNAME_CAST(sipName_toFillPolygons), meth_QPainterPath_toFillPolygons, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_toFillPolygons)},
    {SIP_MLNAME_CAST(sipName_toReversed), meth_QPainterPath_toReversed, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_toReversed)},
    {SIP_MLNAME_CAST(sipName_toSubpathPolygons), meth_QPainterPath_toSubpathPolygons, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_toSubpathPolygons)},
    {SIP_MLNAME_CAST(sipName_translate), meth_QPainterPath_translate, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_translate)},
    {SIP_MLNAME_CAST(sipName_translated), meth_QPainterPath_translated, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_translated)},
    {SIP_MLNAME_CAST(sipName_united), meth_QPainterPath_united, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_united)}
};

static sipEnumMemberDef enummembers_QPainterPath[] = {
    {sipName_CurveToDataElement, static_cast<int>( ::QPainterPath::CurveToDataElement), 212},
    {sipName_CurveToElement, static_cast<int>( ::QPainterPath::CurveToElement), 212},
    {sipName_LineToElement, static_cast<int>( ::QPainterPath::LineToElement), 212},
    {sipName_MoveToElement, static_cast<int>( ::QPainterPath::MoveToElement), 212},
};

PyDoc_STRVAR(doc_QPainterPath, "\1QPainterPath()\n"
"QPainterPath(Union[QPointF, QPoint])\n"
"QPainterPath(QPainterPath)");


static pyqt5ClassPluginDef plugin_QPainterPath = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QPainterPath = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPainterPath,
        {SIP_NULLPTR},
        &plugin_QPainterPath
    },
    {
        sipNameNr_QPainterPath,
        {0, 0, 1},
        42, methods_QPainterPath,
        4, enummembers_QPainterPath,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPainterPath,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QPainterPath,
    init_type_QPainterPath,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QPainterPath,
    assign_QPainterPath,
    array_QPainterPath,
    copy_QPainterPath,
    release_QPainterPath,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 174 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 85097 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 85101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 85104 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 85107 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 85110 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 85113 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 85116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 85119 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 85122 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 85125 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpen.sip"
#include <qpen.h>
#line 85128 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 52 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 85131 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QPaintEngineState_state, "state(self) -> QPaintEngine.DirtyFlags");

extern "C" {static PyObject *meth_QPaintEngineState_state(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngineState_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngineState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngineState, &sipCpp))
        {
             ::QPaintEngine::DirtyFlags*sipRes;

            sipRes = new  ::QPaintEngine::DirtyFlags(sipCpp->state());

            return sipConvertFromNewType(sipRes,sipType_QPaintEngine_DirtyFlags,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngineState, sipName_state, doc_QPaintEngineState_state);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngineState_pen, "pen(self) -> QPen");

extern "C" {static PyObject *meth_QPaintEngineState_pen(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngineState_pen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngineState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngineState, &sipCpp))
        {
             ::QPen*sipRes;

            sipRes = new  ::QPen(sipCpp->pen());

            return sipConvertFromNewType(sipRes,sipType_QPen,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngineState, sipName_pen, doc_QPaintEngineState_pen);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngineState_brush, "brush(self) -> QBrush");

extern "C" {static PyObject *meth_QPaintEngineState_brush(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngineState_brush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngineState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngineState, &sipCpp))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->brush());

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngineState, sipName_brush, doc_QPaintEngineState_brush);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngineState_brushOrigin, "brushOrigin(self) -> QPointF");

extern "C" {static PyObject *meth_QPaintEngineState_brushOrigin(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngineState_brushOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngineState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngineState, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->brushOrigin());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngineState, sipName_brushOrigin, doc_QPaintEngineState_brushOrigin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngineState_backgroundBrush, "backgroundBrush(self) -> QBrush");

extern "C" {static PyObject *meth_QPaintEngineState_backgroundBrush(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngineState_backgroundBrush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngineState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngineState, &sipCpp))
        {
             ::QBrush*sipRes;

            sipRes = new  ::QBrush(sipCpp->backgroundBrush());

            return sipConvertFromNewType(sipRes,sipType_QBrush,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngineState, sipName_backgroundBrush, doc_QPaintEngineState_backgroundBrush);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngineState_backgroundMode, "backgroundMode(self) -> Qt.BGMode");

extern "C" {static PyObject *meth_QPaintEngineState_backgroundMode(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngineState_backgroundMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngineState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngineState, &sipCpp))
        {
             ::Qt::BGMode sipRes;

            sipRes = sipCpp->backgroundMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_BGMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngineState, sipName_backgroundMode, doc_QPaintEngineState_backgroundMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngineState_font, "font(self) -> QFont");

extern "C" {static PyObject *meth_QPaintEngineState_font(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngineState_font(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngineState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngineState, &sipCpp))
        {
             ::QFont*sipRes;

            sipRes = new  ::QFont(sipCpp->font());

            return sipConvertFromNewType(sipRes,sipType_QFont,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngineState, sipName_font, doc_QPaintEngineState_font);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngineState_opacity, "opacity(self) -> float");

extern "C" {static PyObject *meth_QPaintEngineState_opacity(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngineState_opacity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngineState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngineState, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->opacity();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngineState, sipName_opacity, doc_QPaintEngineState_opacity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngineState_clipOperation, "clipOperation(self) -> Qt.ClipOperation");

extern "C" {static PyObject *meth_QPaintEngineState_clipOperation(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngineState_clipOperation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngineState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngineState, &sipCpp))
        {
             ::Qt::ClipOperation sipRes;

            sipRes = sipCpp->clipOperation();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_ClipOperation);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngineState, sipName_clipOperation, doc_QPaintEngineState_clipOperation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngineState_clipRegion, "clipRegion(self) -> QRegion");

extern "C" {static PyObject *meth_QPaintEngineState_clipRegion(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngineState_clipRegion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngineState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngineState, &sipCpp))
        {
             ::QRegion*sipRes;

            sipRes = new  ::QRegion(sipCpp->clipRegion());

            return sipConvertFromNewType(sipRes,sipType_QRegion,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngineState, sipName_clipRegion, doc_QPaintEngineState_clipRegion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngineState_clipPath, "clipPath(self) -> QPainterPath");

extern "C" {static PyObject *meth_QPaintEngineState_clipPath(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngineState_clipPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngineState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngineState, &sipCpp))
        {
             ::QPainterPath*sipRes;

            sipRes = new  ::QPainterPath(sipCpp->clipPath());

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngineState, sipName_clipPath, doc_QPaintEngineState_clipPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngineState_isClipEnabled, "isClipEnabled(self) -> bool");

extern "C" {static PyObject *meth_QPaintEngineState_isClipEnabled(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngineState_isClipEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngineState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngineState, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isClipEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngineState, sipName_isClipEnabled, doc_QPaintEngineState_isClipEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngineState_renderHints, "renderHints(self) -> QPainter.RenderHints");

extern "C" {static PyObject *meth_QPaintEngineState_renderHints(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngineState_renderHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngineState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngineState, &sipCpp))
        {
             ::QPainter::RenderHints*sipRes;

            sipRes = new  ::QPainter::RenderHints(sipCpp->renderHints());

            return sipConvertFromNewType(sipRes,sipType_QPainter_RenderHints,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngineState, sipName_renderHints, doc_QPaintEngineState_renderHints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngineState_compositionMode, "compositionMode(self) -> QPainter.CompositionMode");

extern "C" {static PyObject *meth_QPaintEngineState_compositionMode(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngineState_compositionMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngineState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngineState, &sipCpp))
        {
             ::QPainter::CompositionMode sipRes;

            sipRes = sipCpp->compositionMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QPainter_CompositionMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngineState, sipName_compositionMode, doc_QPaintEngineState_compositionMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngineState_painter, "painter(self) -> QPainter");

extern "C" {static PyObject *meth_QPaintEngineState_painter(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngineState_painter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngineState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngineState, &sipCpp))
        {
             ::QPainter*sipRes;

            sipRes = sipCpp->painter();

            return sipConvertFromType(sipRes,sipType_QPainter,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngineState, sipName_painter, doc_QPaintEngineState_painter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngineState_transform, "transform(self) -> QTransform");

extern "C" {static PyObject *meth_QPaintEngineState_transform(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngineState_transform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngineState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngineState, &sipCpp))
        {
             ::QTransform*sipRes;

            sipRes = new  ::QTransform(sipCpp->transform());

            return sipConvertFromNewType(sipRes,sipType_QTransform,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngineState, sipName_transform, doc_QPaintEngineState_transform);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngineState_brushNeedsResolving, "brushNeedsResolving(self) -> bool");

extern "C" {static PyObject *meth_QPaintEngineState_brushNeedsResolving(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngineState_brushNeedsResolving(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngineState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngineState, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->brushNeedsResolving();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngineState, sipName_brushNeedsResolving, doc_QPaintEngineState_brushNeedsResolving);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngineState_penNeedsResolving, "penNeedsResolving(self) -> bool");

extern "C" {static PyObject *meth_QPaintEngineState_penNeedsResolving(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngineState_penNeedsResolving(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngineState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngineState, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->penNeedsResolving();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngineState, sipName_penNeedsResolving, doc_QPaintEngineState_penNeedsResolving);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPaintEngineState(void *, int);}
static void release_QPaintEngineState(void *sipCppV, int)
{
    delete reinterpret_cast< ::QPaintEngineState *>(sipCppV);
}


extern "C" {static void assign_QPaintEngineState(void *, SIP_SSIZE_T, void *);}
static void assign_QPaintEngineState(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QPaintEngineState *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QPaintEngineState *>(sipSrc);
}


extern "C" {static void *array_QPaintEngineState(SIP_SSIZE_T);}
static void *array_QPaintEngineState(SIP_SSIZE_T sipNrElem)
{
    return new  ::QPaintEngineState[sipNrElem];
}


extern "C" {static void *copy_QPaintEngineState(const void *, SIP_SSIZE_T);}
static void *copy_QPaintEngineState(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QPaintEngineState(reinterpret_cast<const  ::QPaintEngineState *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPaintEngineState(sipSimpleWrapper *);}
static void dealloc_QPaintEngineState(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPaintEngineState(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QPaintEngineState(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPaintEngineState(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QPaintEngineState *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QPaintEngineState();

            return sipCpp;
        }
    }

    {
        const  ::QPaintEngineState* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QPaintEngineState, &a0))
        {
            sipCpp = new  ::QPaintEngineState(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QPaintEngineState[] = {
    {SIP_MLNAME_CAST(sipName_backgroundBrush), meth_QPaintEngineState_backgroundBrush, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngineState_backgroundBrush)},
    {SIP_MLNAME_CAST(sipName_backgroundMode), meth_QPaintEngineState_backgroundMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngineState_backgroundMode)},
    {SIP_MLNAME_CAST(sipName_brush), meth_QPaintEngineState_brush, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngineState_brush)},
    {SIP_MLNAME_CAST(sipName_brushNeedsResolving), meth_QPaintEngineState_brushNeedsResolving, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngineState_brushNeedsResolving)},
    {SIP_MLNAME_CAST(sipName_brushOrigin), meth_QPaintEngineState_brushOrigin, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngineState_brushOrigin)},
    {SIP_MLNAME_CAST(sipName_clipOperation), meth_QPaintEngineState_clipOperation, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngineState_clipOperation)},
    {SIP_MLNAME_CAST(sipName_clipPath), meth_QPaintEngineState_clipPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngineState_clipPath)},
    {SIP_MLNAME_CAST(sipName_clipRegion), meth_QPaintEngineState_clipRegion, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngineState_clipRegion)},
    {SIP_MLNAME_CAST(sipName_compositionMode), meth_QPaintEngineState_compositionMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngineState_compositionMode)},
    {SIP_MLNAME_CAST(sipName_font), meth_QPaintEngineState_font, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngineState_font)},
    {SIP_MLNAME_CAST(sipName_isClipEnabled), meth_QPaintEngineState_isClipEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngineState_isClipEnabled)},
    {SIP_MLNAME_CAST(sipName_opacity), meth_QPaintEngineState_opacity, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngineState_opacity)},
    {SIP_MLNAME_CAST(sipName_painter), meth_QPaintEngineState_painter, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngineState_painter)},
    {SIP_MLNAME_CAST(sipName_pen), meth_QPaintEngineState_pen, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngineState_pen)},
    {SIP_MLNAME_CAST(sipName_penNeedsResolving), meth_QPaintEngineState_penNeedsResolving, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngineState_penNeedsResolving)},
    {SIP_MLNAME_CAST(sipName_renderHints), meth_QPaintEngineState_renderHints, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngineState_renderHints)},
    {SIP_MLNAME_CAST(sipName_state), meth_QPaintEngineState_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngineState_state)},
    {SIP_MLNAME_CAST(sipName_transform), meth_QPaintEngineState_transform, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngineState_transform)}
};

PyDoc_STRVAR(doc_QPaintEngineState, "\1QPaintEngineState()\n"
"QPaintEngineState(QPaintEngineState)");


static pyqt5ClassPluginDef plugin_QPaintEngineState = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QPaintEngineState = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPaintEngineState,
        {SIP_NULLPTR},
        &plugin_QPaintEngineState
    },
    {
        sipNameNr_QPaintEngineState,
        {0, 0, 1},
        18, methods_QPaintEngineState,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPaintEngineState,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QPaintEngineState,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QPaintEngineState,
    assign_QPaintEngineState,
    array_QPaintEngineState,
    copy_QPaintEngineState,
    release_QPaintEngineState,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 52 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 85792 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 52 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 85796 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static long slot_QPaintEngine_DirtyFlags___hash__(PyObject *);}
static long slot_QPaintEngine_DirtyFlags___hash__(PyObject *sipSelf)
{
     ::QPaintEngine::DirtyFlags *sipCpp = reinterpret_cast< ::QPaintEngine::DirtyFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPaintEngine_DirtyFlags));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QPaintEngine::DirtyFlags::Int();
#line 85814 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QPaintEngine_DirtyFlags___bool__(PyObject *);}
static int slot_QPaintEngine_DirtyFlags___bool__(PyObject *sipSelf)
{
     ::QPaintEngine::DirtyFlags *sipCpp = reinterpret_cast< ::QPaintEngine::DirtyFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPaintEngine_DirtyFlags));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QPaintEngine::DirtyFlags::Int() != 0);
#line 85839 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QPaintEngine_DirtyFlags___ne__(PyObject *,PyObject *);}
static PyObject *slot_QPaintEngine_DirtyFlags___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPaintEngine::DirtyFlags *sipCpp = reinterpret_cast< ::QPaintEngine::DirtyFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPaintEngine_DirtyFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngine::DirtyFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QPaintEngine_DirtyFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QPaintEngine::DirtyFlags::Int() != a0->operator QPaintEngine::DirtyFlags::Int());
#line 85869 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
            sipReleaseType(const_cast< ::QPaintEngine::DirtyFlags *>(a0),sipType_QPaintEngine_DirtyFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QPaintEngine_DirtyFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QPaintEngine_DirtyFlags___eq__(PyObject *,PyObject *);}
static PyObject *slot_QPaintEngine_DirtyFlags___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPaintEngine::DirtyFlags *sipCpp = reinterpret_cast< ::QPaintEngine::DirtyFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPaintEngine_DirtyFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngine::DirtyFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QPaintEngine_DirtyFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QPaintEngine::DirtyFlags::Int() == a0->operator QPaintEngine::DirtyFlags::Int());
#line 85905 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
            sipReleaseType(const_cast< ::QPaintEngine::DirtyFlags *>(a0),sipType_QPaintEngine_DirtyFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QPaintEngine_DirtyFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QPaintEngine_DirtyFlags___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QPaintEngine_DirtyFlags___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QPaintEngine_DirtyFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QPaintEngine::DirtyFlags *sipCpp = reinterpret_cast< ::QPaintEngine::DirtyFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPaintEngine_DirtyFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QPaintEngine::DirtyFlags(*sipCpp ^ a0);
#line 85944 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QPaintEngine_DirtyFlags___xor__(PyObject *,PyObject *);}
static PyObject *slot_QPaintEngine_DirtyFlags___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPaintEngine::DirtyFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QPaintEngine_DirtyFlags, &a0, &a0State, &a1))
        {
             ::QPaintEngine::DirtyFlags*sipRes;

            sipRes = new  ::QPaintEngine::DirtyFlags((*a0 ^ a1));
            sipReleaseType(a0,sipType_QPaintEngine_DirtyFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPaintEngine_DirtyFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QPaintEngine_DirtyFlags___ior__(PyObject *,PyObject *);}
static PyObject *slot_QPaintEngine_DirtyFlags___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QPaintEngine_DirtyFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QPaintEngine::DirtyFlags *sipCpp = reinterpret_cast< ::QPaintEngine::DirtyFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPaintEngine_DirtyFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QPaintEngine::DirtyFlags(*sipCpp | a0);
#line 86016 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QPaintEngine_DirtyFlags___or__(PyObject *,PyObject *);}
static PyObject *slot_QPaintEngine_DirtyFlags___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPaintEngine::DirtyFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QPaintEngine_DirtyFlags, &a0, &a0State, &a1))
        {
             ::QPaintEngine::DirtyFlags*sipRes;

            sipRes = new  ::QPaintEngine::DirtyFlags((*a0 | a1));
            sipReleaseType(a0,sipType_QPaintEngine_DirtyFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPaintEngine_DirtyFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QPaintEngine_DirtyFlags___iand__(PyObject *,PyObject *);}
static PyObject *slot_QPaintEngine_DirtyFlags___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QPaintEngine_DirtyFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QPaintEngine::DirtyFlags *sipCpp = reinterpret_cast< ::QPaintEngine::DirtyFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPaintEngine_DirtyFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QPaintEngine::DirtyFlags::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QPaintEngine_DirtyFlags___and__(PyObject *,PyObject *);}
static PyObject *slot_QPaintEngine_DirtyFlags___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPaintEngine::DirtyFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QPaintEngine_DirtyFlags, &a0, &a0State, &a1))
        {
             ::QPaintEngine::DirtyFlags*sipRes;

            sipRes = new  ::QPaintEngine::DirtyFlags((*a0 & a1));
            sipReleaseType(a0,sipType_QPaintEngine_DirtyFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPaintEngine_DirtyFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QPaintEngine_DirtyFlags___invert__(PyObject *);}
static PyObject *slot_QPaintEngine_DirtyFlags___invert__(PyObject *sipSelf)
{
     ::QPaintEngine::DirtyFlags *sipCpp = reinterpret_cast< ::QPaintEngine::DirtyFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPaintEngine_DirtyFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QPaintEngine::DirtyFlags*sipRes;

            sipRes = new  ::QPaintEngine::DirtyFlags(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QPaintEngine_DirtyFlags,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QPaintEngine_DirtyFlags___int__(PyObject *);}
static PyObject *slot_QPaintEngine_DirtyFlags___int__(PyObject *sipSelf)
{
     ::QPaintEngine::DirtyFlags *sipCpp = reinterpret_cast< ::QPaintEngine::DirtyFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPaintEngine_DirtyFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPaintEngine_DirtyFlags(void *, int);}
static void release_QPaintEngine_DirtyFlags(void *sipCppV, int)
{
    delete reinterpret_cast< ::QPaintEngine::DirtyFlags *>(sipCppV);
}


extern "C" {static void assign_QPaintEngine_DirtyFlags(void *, SIP_SSIZE_T, void *);}
static void assign_QPaintEngine_DirtyFlags(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QPaintEngine::DirtyFlags *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QPaintEngine::DirtyFlags *>(sipSrc);
}


extern "C" {static void *array_QPaintEngine_DirtyFlags(SIP_SSIZE_T);}
static void *array_QPaintEngine_DirtyFlags(SIP_SSIZE_T sipNrElem)
{
    return new  ::QPaintEngine::DirtyFlags[sipNrElem];
}


extern "C" {static void *copy_QPaintEngine_DirtyFlags(const void *, SIP_SSIZE_T);}
static void *copy_QPaintEngine_DirtyFlags(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QPaintEngine::DirtyFlags(reinterpret_cast<const  ::QPaintEngine::DirtyFlags *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPaintEngine_DirtyFlags(sipSimpleWrapper *);}
static void dealloc_QPaintEngine_DirtyFlags(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPaintEngine_DirtyFlags(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QPaintEngine_DirtyFlags(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPaintEngine_DirtyFlags(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QPaintEngine::DirtyFlags *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QPaintEngine::DirtyFlags();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QPaintEngine::DirtyFlags(a0);

            return sipCpp;
        }
    }

    {
        const  ::QPaintEngine::DirtyFlags* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QPaintEngine_DirtyFlags, &a0, &a0State))
        {
            sipCpp = new  ::QPaintEngine::DirtyFlags(*a0);
            sipReleaseType(const_cast< ::QPaintEngine::DirtyFlags *>(a0),sipType_QPaintEngine_DirtyFlags,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QPaintEngine_DirtyFlags(PyObject *, void **, int *, PyObject *);}
static int convertTo_QPaintEngine_DirtyFlags(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QPaintEngine::DirtyFlags **sipCppPtr = reinterpret_cast< ::QPaintEngine::DirtyFlags **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QPaintEngine::DirtyFlags is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QPaintEngine_DirtyFlag)) ||
            sipCanConvertToType(sipPy, sipType_QPaintEngine_DirtyFlags, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QPaintEngine_DirtyFlag)))
{
    *sipCppPtr = new QPaintEngine::DirtyFlags(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QPaintEngine::DirtyFlags *>(sipConvertToType(sipPy, sipType_QPaintEngine_DirtyFlags, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 86284 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QPaintEngine_DirtyFlags[] = {
    {(void *)slot_QPaintEngine_DirtyFlags___hash__, hash_slot},
    {(void *)slot_QPaintEngine_DirtyFlags___bool__, bool_slot},
    {(void *)slot_QPaintEngine_DirtyFlags___ne__, ne_slot},
    {(void *)slot_QPaintEngine_DirtyFlags___eq__, eq_slot},
    {(void *)slot_QPaintEngine_DirtyFlags___ixor__, ixor_slot},
    {(void *)slot_QPaintEngine_DirtyFlags___xor__, xor_slot},
    {(void *)slot_QPaintEngine_DirtyFlags___ior__, ior_slot},
    {(void *)slot_QPaintEngine_DirtyFlags___or__, or_slot},
    {(void *)slot_QPaintEngine_DirtyFlags___iand__, iand_slot},
    {(void *)slot_QPaintEngine_DirtyFlags___and__, and_slot},
    {(void *)slot_QPaintEngine_DirtyFlags___invert__, invert_slot},
    {(void *)slot_QPaintEngine_DirtyFlags___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QPaintEngine_DirtyFlags, "\1QPaintEngine.DirtyFlags()\n"
"QPaintEngine.DirtyFlags(Union[QPaintEngine.DirtyFlags, QPaintEngine.DirtyFlag])\n"
"QPaintEngine.DirtyFlags(QPaintEngine.DirtyFlags)");


static pyqt5ClassPluginDef plugin_QPaintEngine_DirtyFlags = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QPaintEngine_DirtyFlags = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPaintEngine__DirtyFlags,
        {SIP_NULLPTR},
        &plugin_QPaintEngine_DirtyFlags
    },
    {
        sipNameNr_DirtyFlags,
        {194, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPaintEngine_DirtyFlags,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QPaintEngine_DirtyFlags,
    init_type_QPaintEngine_DirtyFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QPaintEngine_DirtyFlags,
    assign_QPaintEngine_DirtyFlags,
    array_QPaintEngine_DirtyFlags,
    copy_QPaintEngine_DirtyFlags,
    release_QPaintEngine_DirtyFlags,
    SIP_NULLPTR,
    convertTo_QPaintEngine_DirtyFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 52 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 86372 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 52 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 86376 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static long slot_QPaintEngine_PaintEngineFeatures___hash__(PyObject *);}
static long slot_QPaintEngine_PaintEngineFeatures___hash__(PyObject *sipSelf)
{
     ::QPaintEngine::PaintEngineFeatures *sipCpp = reinterpret_cast< ::QPaintEngine::PaintEngineFeatures *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPaintEngine_PaintEngineFeatures));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QPaintEngine::PaintEngineFeatures::Int();
#line 86394 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QPaintEngine_PaintEngineFeatures___bool__(PyObject *);}
static int slot_QPaintEngine_PaintEngineFeatures___bool__(PyObject *sipSelf)
{
     ::QPaintEngine::PaintEngineFeatures *sipCpp = reinterpret_cast< ::QPaintEngine::PaintEngineFeatures *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPaintEngine_PaintEngineFeatures));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QPaintEngine::PaintEngineFeatures::Int() != 0);
#line 86419 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QPaintEngine_PaintEngineFeatures___ne__(PyObject *,PyObject *);}
static PyObject *slot_QPaintEngine_PaintEngineFeatures___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPaintEngine::PaintEngineFeatures *sipCpp = reinterpret_cast< ::QPaintEngine::PaintEngineFeatures *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPaintEngine_PaintEngineFeatures));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngine::PaintEngineFeatures* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QPaintEngine_PaintEngineFeatures, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QPaintEngine::PaintEngineFeatures::Int() != a0->operator QPaintEngine::PaintEngineFeatures::Int());
#line 86449 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
            sipReleaseType(const_cast< ::QPaintEngine::PaintEngineFeatures *>(a0),sipType_QPaintEngine_PaintEngineFeatures,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QPaintEngine_PaintEngineFeatures, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QPaintEngine_PaintEngineFeatures___eq__(PyObject *,PyObject *);}
static PyObject *slot_QPaintEngine_PaintEngineFeatures___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPaintEngine::PaintEngineFeatures *sipCpp = reinterpret_cast< ::QPaintEngine::PaintEngineFeatures *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPaintEngine_PaintEngineFeatures));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngine::PaintEngineFeatures* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QPaintEngine_PaintEngineFeatures, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QPaintEngine::PaintEngineFeatures::Int() == a0->operator QPaintEngine::PaintEngineFeatures::Int());
#line 86485 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
            sipReleaseType(const_cast< ::QPaintEngine::PaintEngineFeatures *>(a0),sipType_QPaintEngine_PaintEngineFeatures,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QPaintEngine_PaintEngineFeatures, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QPaintEngine_PaintEngineFeatures___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QPaintEngine_PaintEngineFeatures___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QPaintEngine_PaintEngineFeatures)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QPaintEngine::PaintEngineFeatures *sipCpp = reinterpret_cast< ::QPaintEngine::PaintEngineFeatures *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPaintEngine_PaintEngineFeatures));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QPaintEngine::PaintEngineFeatures(*sipCpp ^ a0);
#line 86524 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QPaintEngine_PaintEngineFeatures___xor__(PyObject *,PyObject *);}
static PyObject *slot_QPaintEngine_PaintEngineFeatures___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPaintEngine::PaintEngineFeatures* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QPaintEngine_PaintEngineFeatures, &a0, &a0State, &a1))
        {
             ::QPaintEngine::PaintEngineFeatures*sipRes;

            sipRes = new  ::QPaintEngine::PaintEngineFeatures((*a0 ^ a1));
            sipReleaseType(a0,sipType_QPaintEngine_PaintEngineFeatures,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPaintEngine_PaintEngineFeatures,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QPaintEngine_PaintEngineFeatures___ior__(PyObject *,PyObject *);}
static PyObject *slot_QPaintEngine_PaintEngineFeatures___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QPaintEngine_PaintEngineFeatures)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QPaintEngine::PaintEngineFeatures *sipCpp = reinterpret_cast< ::QPaintEngine::PaintEngineFeatures *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPaintEngine_PaintEngineFeatures));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QPaintEngine::PaintEngineFeatures(*sipCpp | a0);
#line 86596 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QPaintEngine_PaintEngineFeatures___or__(PyObject *,PyObject *);}
static PyObject *slot_QPaintEngine_PaintEngineFeatures___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPaintEngine::PaintEngineFeatures* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QPaintEngine_PaintEngineFeatures, &a0, &a0State, &a1))
        {
             ::QPaintEngine::PaintEngineFeatures*sipRes;

            sipRes = new  ::QPaintEngine::PaintEngineFeatures((*a0 | a1));
            sipReleaseType(a0,sipType_QPaintEngine_PaintEngineFeatures,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPaintEngine_PaintEngineFeatures,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QPaintEngine_PaintEngineFeatures___iand__(PyObject *,PyObject *);}
static PyObject *slot_QPaintEngine_PaintEngineFeatures___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QPaintEngine_PaintEngineFeatures)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QPaintEngine::PaintEngineFeatures *sipCpp = reinterpret_cast< ::QPaintEngine::PaintEngineFeatures *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPaintEngine_PaintEngineFeatures));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QPaintEngine::PaintEngineFeatures::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QPaintEngine_PaintEngineFeatures___and__(PyObject *,PyObject *);}
static PyObject *slot_QPaintEngine_PaintEngineFeatures___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPaintEngine::PaintEngineFeatures* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QPaintEngine_PaintEngineFeatures, &a0, &a0State, &a1))
        {
             ::QPaintEngine::PaintEngineFeatures*sipRes;

            sipRes = new  ::QPaintEngine::PaintEngineFeatures((*a0 & a1));
            sipReleaseType(a0,sipType_QPaintEngine_PaintEngineFeatures,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPaintEngine_PaintEngineFeatures,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QPaintEngine_PaintEngineFeatures___invert__(PyObject *);}
static PyObject *slot_QPaintEngine_PaintEngineFeatures___invert__(PyObject *sipSelf)
{
     ::QPaintEngine::PaintEngineFeatures *sipCpp = reinterpret_cast< ::QPaintEngine::PaintEngineFeatures *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPaintEngine_PaintEngineFeatures));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QPaintEngine::PaintEngineFeatures*sipRes;

            sipRes = new  ::QPaintEngine::PaintEngineFeatures(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QPaintEngine_PaintEngineFeatures,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QPaintEngine_PaintEngineFeatures___int__(PyObject *);}
static PyObject *slot_QPaintEngine_PaintEngineFeatures___int__(PyObject *sipSelf)
{
     ::QPaintEngine::PaintEngineFeatures *sipCpp = reinterpret_cast< ::QPaintEngine::PaintEngineFeatures *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPaintEngine_PaintEngineFeatures));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPaintEngine_PaintEngineFeatures(void *, int);}
static void release_QPaintEngine_PaintEngineFeatures(void *sipCppV, int)
{
    delete reinterpret_cast< ::QPaintEngine::PaintEngineFeatures *>(sipCppV);
}


extern "C" {static void assign_QPaintEngine_PaintEngineFeatures(void *, SIP_SSIZE_T, void *);}
static void assign_QPaintEngine_PaintEngineFeatures(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QPaintEngine::PaintEngineFeatures *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QPaintEngine::PaintEngineFeatures *>(sipSrc);
}


extern "C" {static void *array_QPaintEngine_PaintEngineFeatures(SIP_SSIZE_T);}
static void *array_QPaintEngine_PaintEngineFeatures(SIP_SSIZE_T sipNrElem)
{
    return new  ::QPaintEngine::PaintEngineFeatures[sipNrElem];
}


extern "C" {static void *copy_QPaintEngine_PaintEngineFeatures(const void *, SIP_SSIZE_T);}
static void *copy_QPaintEngine_PaintEngineFeatures(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QPaintEngine::PaintEngineFeatures(reinterpret_cast<const  ::QPaintEngine::PaintEngineFeatures *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPaintEngine_PaintEngineFeatures(sipSimpleWrapper *);}
static void dealloc_QPaintEngine_PaintEngineFeatures(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPaintEngine_PaintEngineFeatures(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QPaintEngine_PaintEngineFeatures(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPaintEngine_PaintEngineFeatures(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QPaintEngine::PaintEngineFeatures *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QPaintEngine::PaintEngineFeatures();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QPaintEngine::PaintEngineFeatures(a0);

            return sipCpp;
        }
    }

    {
        const  ::QPaintEngine::PaintEngineFeatures* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QPaintEngine_PaintEngineFeatures, &a0, &a0State))
        {
            sipCpp = new  ::QPaintEngine::PaintEngineFeatures(*a0);
            sipReleaseType(const_cast< ::QPaintEngine::PaintEngineFeatures *>(a0),sipType_QPaintEngine_PaintEngineFeatures,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QPaintEngine_PaintEngineFeatures(PyObject *, void **, int *, PyObject *);}
static int convertTo_QPaintEngine_PaintEngineFeatures(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QPaintEngine::PaintEngineFeatures **sipCppPtr = reinterpret_cast< ::QPaintEngine::PaintEngineFeatures **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QPaintEngine::PaintEngineFeatures is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QPaintEngine_PaintEngineFeature)) ||
            sipCanConvertToType(sipPy, sipType_QPaintEngine_PaintEngineFeatures, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QPaintEngine_PaintEngineFeature)))
{
    *sipCppPtr = new QPaintEngine::PaintEngineFeatures(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QPaintEngine::PaintEngineFeatures *>(sipConvertToType(sipPy, sipType_QPaintEngine_PaintEngineFeatures, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 86864 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QPaintEngine_PaintEngineFeatures[] = {
    {(void *)slot_QPaintEngine_PaintEngineFeatures___hash__, hash_slot},
    {(void *)slot_QPaintEngine_PaintEngineFeatures___bool__, bool_slot},
    {(void *)slot_QPaintEngine_PaintEngineFeatures___ne__, ne_slot},
    {(void *)slot_QPaintEngine_PaintEngineFeatures___eq__, eq_slot},
    {(void *)slot_QPaintEngine_PaintEngineFeatures___ixor__, ixor_slot},
    {(void *)slot_QPaintEngine_PaintEngineFeatures___xor__, xor_slot},
    {(void *)slot_QPaintEngine_PaintEngineFeatures___ior__, ior_slot},
    {(void *)slot_QPaintEngine_PaintEngineFeatures___or__, or_slot},
    {(void *)slot_QPaintEngine_PaintEngineFeatures___iand__, iand_slot},
    {(void *)slot_QPaintEngine_PaintEngineFeatures___and__, and_slot},
    {(void *)slot_QPaintEngine_PaintEngineFeatures___invert__, invert_slot},
    {(void *)slot_QPaintEngine_PaintEngineFeatures___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QPaintEngine_PaintEngineFeatures, "\1QPaintEngine.PaintEngineFeatures()\n"
"QPaintEngine.PaintEngineFeatures(Union[QPaintEngine.PaintEngineFeatures, QPaintEngine.PaintEngineFeature])\n"
"QPaintEngine.PaintEngineFeatures(QPaintEngine.PaintEngineFeatures)");


static pyqt5ClassPluginDef plugin_QPaintEngine_PaintEngineFeatures = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QPaintEngine_PaintEngineFeatures = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPaintEngine__PaintEngineFeatures,
        {SIP_NULLPTR},
        &plugin_QPaintEngine_PaintEngineFeatures
    },
    {
        sipNameNr_PaintEngineFeatures,
        {194, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPaintEngine_PaintEngineFeatures,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QPaintEngine_PaintEngineFeatures,
    init_type_QPaintEngine_PaintEngineFeatures,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QPaintEngine_PaintEngineFeatures,
    assign_QPaintEngine_PaintEngineFeatures,
    array_QPaintEngine_PaintEngineFeatures,
    copy_QPaintEngine_PaintEngineFeatures,
    release_QPaintEngine_PaintEngineFeatures,
    SIP_NULLPTR,
    convertTo_QPaintEngine_PaintEngineFeatures,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 52 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 86952 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 52 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 86956 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 86959 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 86962 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 86965 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qimage.sip"
#include <qimage.h>
#line 86968 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 86971 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 86974 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 86977 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 86980 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 86983 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 86986 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 86989 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qline.sip"
#include <qline.h>
#line 86992 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 95 "sip/QtCore/qline.sip"
#include <qline.h>
#line 86995 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 174 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 86998 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


class sipQPaintEngine : public  ::QPaintEngine
{
public:
    sipQPaintEngine( ::QPaintEngine::PaintEngineFeatures);
    virtual ~sipQPaintEngine();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QPaintEngine::Type type() const SIP_OVERRIDE;
    void drawImage(const  ::QRectF&,const  ::QImage&,const  ::QRectF&, ::Qt::ImageConversionFlags) SIP_OVERRIDE;
    void drawTiledPixmap(const  ::QRectF&,const  ::QPixmap&,const  ::QPointF&) SIP_OVERRIDE;
    void drawTextItem(const  ::QPointF&,const  ::QTextItem&) SIP_OVERRIDE;
    void drawPixmap(const  ::QRectF&,const  ::QPixmap&,const  ::QRectF&) SIP_OVERRIDE;
    void drawPolygon(const  ::QPoint*,int, ::QPaintEngine::PolygonDrawMode) SIP_OVERRIDE;
    void drawPolygon(const  ::QPointF*,int, ::QPaintEngine::PolygonDrawMode) SIP_OVERRIDE;
    void drawPoints(const  ::QPoint*,int) SIP_OVERRIDE;
    void drawPoints(const  ::QPointF*,int) SIP_OVERRIDE;
    void drawPath(const  ::QPainterPath&) SIP_OVERRIDE;
    void drawEllipse(const  ::QRect&) SIP_OVERRIDE;
    void drawEllipse(const  ::QRectF&) SIP_OVERRIDE;
    void drawLines(const  ::QLineF*,int) SIP_OVERRIDE;
    void drawLines(const  ::QLine*,int) SIP_OVERRIDE;
    void drawRects(const  ::QRectF*,int) SIP_OVERRIDE;
    void drawRects(const  ::QRect*,int) SIP_OVERRIDE;
    void updateState(const  ::QPaintEngineState&) SIP_OVERRIDE;
    bool end() SIP_OVERRIDE;
    bool begin( ::QPaintDevice*) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPaintEngine(const sipQPaintEngine &);
    sipQPaintEngine &operator = (const sipQPaintEngine &);

    char sipPyMethods[19];
};

sipQPaintEngine::sipQPaintEngine( ::QPaintEngine::PaintEngineFeatures a0):  ::QPaintEngine(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPaintEngine::~sipQPaintEngine()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::QPaintEngine::Type sipQPaintEngine::type() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,sipName_QPaintEngine,sipName_type);

    if (!sipMeth)
        return  ::QPaintEngine::X11;

    extern  ::QPaintEngine::Type sipVH_QtGui_74(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_74(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQPaintEngine::drawImage(const  ::QRectF& a0,const  ::QImage& a1,const  ::QRectF& a2, ::Qt::ImageConversionFlags a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_drawImage);

    if (!sipMeth)
    {
         ::QPaintEngine::drawImage(a0,a1,a2,a3);
        return;
    }

    extern void sipVH_QtGui_73(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QRectF&,const  ::QImage&,const  ::QRectF&, ::Qt::ImageConversionFlags);

    sipVH_QtGui_73(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2, a3);
}

void sipQPaintEngine::drawTiledPixmap(const  ::QRectF& a0,const  ::QPixmap& a1,const  ::QPointF& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_drawTiledPixmap);

    if (!sipMeth)
    {
         ::QPaintEngine::drawTiledPixmap(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_72(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QRectF&,const  ::QPixmap&,const  ::QPointF&);

    sipVH_QtGui_72(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQPaintEngine::drawTextItem(const  ::QPointF& a0,const  ::QTextItem& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_drawTextItem);

    if (!sipMeth)
    {
         ::QPaintEngine::drawTextItem(a0,a1);
        return;
    }

    extern void sipVH_QtGui_71(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QPointF&,const  ::QTextItem&);

    sipVH_QtGui_71(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQPaintEngine::drawPixmap(const  ::QRectF& a0,const  ::QPixmap& a1,const  ::QRectF& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,sipName_QPaintEngine,sipName_drawPixmap);

    if (!sipMeth)
        return;

    extern void sipVH_QtGui_70(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QRectF&,const  ::QPixmap&,const  ::QRectF&);

    sipVH_QtGui_70(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQPaintEngine::drawPolygon(const  ::QPoint*a0,int a1, ::QPaintEngine::PolygonDrawMode a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_drawPolygon);

    if (!sipMeth)
    {
         ::QPaintEngine::drawPolygon(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_69(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QPoint*,int, ::QPaintEngine::PolygonDrawMode);

    sipVH_QtGui_69(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQPaintEngine::drawPolygon(const  ::QPointF*a0,int a1, ::QPaintEngine::PolygonDrawMode a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_drawPolygon);

    if (!sipMeth)
    {
         ::QPaintEngine::drawPolygon(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_68(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QPointF*,int, ::QPaintEngine::PolygonDrawMode);

    sipVH_QtGui_68(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQPaintEngine::drawPoints(const  ::QPoint*a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_drawPoints);

    if (!sipMeth)
    {
         ::QPaintEngine::drawPoints(a0,a1);
        return;
    }

    extern void sipVH_QtGui_67(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QPoint*,int);

    sipVH_QtGui_67(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQPaintEngine::drawPoints(const  ::QPointF*a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_drawPoints);

    if (!sipMeth)
    {
         ::QPaintEngine::drawPoints(a0,a1);
        return;
    }

    extern void sipVH_QtGui_66(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QPointF*,int);

    sipVH_QtGui_66(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQPaintEngine::drawPath(const  ::QPainterPath& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_drawPath);

    if (!sipMeth)
    {
         ::QPaintEngine::drawPath(a0);
        return;
    }

    extern void sipVH_QtGui_65(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QPainterPath&);

    sipVH_QtGui_65(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPaintEngine::drawEllipse(const  ::QRect& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_drawEllipse);

    if (!sipMeth)
    {
         ::QPaintEngine::drawEllipse(a0);
        return;
    }

    extern void sipVH_QtGui_64(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QRect&);

    sipVH_QtGui_64(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPaintEngine::drawEllipse(const  ::QRectF& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,SIP_NULLPTR,sipName_drawEllipse);

    if (!sipMeth)
    {
         ::QPaintEngine::drawEllipse(a0);
        return;
    }

    extern void sipVH_QtGui_63(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QRectF&);

    sipVH_QtGui_63(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQPaintEngine::drawLines(const  ::QLineF*a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,SIP_NULLPTR,sipName_drawLines);

    if (!sipMeth)
    {
         ::QPaintEngine::drawLines(a0,a1);
        return;
    }

    extern void sipVH_QtGui_62(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QLineF*,int);

    sipVH_QtGui_62(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQPaintEngine::drawLines(const  ::QLine*a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,SIP_NULLPTR,sipName_drawLines);

    if (!sipMeth)
    {
         ::QPaintEngine::drawLines(a0,a1);
        return;
    }

    extern void sipVH_QtGui_61(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QLine*,int);

    sipVH_QtGui_61(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQPaintEngine::drawRects(const  ::QRectF*a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_drawRects);

    if (!sipMeth)
    {
         ::QPaintEngine::drawRects(a0,a1);
        return;
    }

    extern void sipVH_QtGui_60(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QRectF*,int);

    sipVH_QtGui_60(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQPaintEngine::drawRects(const  ::QRect*a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,SIP_NULLPTR,sipName_drawRects);

    if (!sipMeth)
    {
         ::QPaintEngine::drawRects(a0,a1);
        return;
    }

    extern void sipVH_QtGui_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QRect*,int);

    sipVH_QtGui_59(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQPaintEngine::updateState(const  ::QPaintEngineState& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,sipName_QPaintEngine,sipName_updateState);

    if (!sipMeth)
        return;

    extern void sipVH_QtGui_58(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QPaintEngineState&);

    sipVH_QtGui_58(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQPaintEngine::end()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,sipName_QPaintEngine,sipName_end);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtGui_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_28(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQPaintEngine::begin( ::QPaintDevice*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,sipName_QPaintEngine,sipName_begin);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtGui_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice*);

    return sipVH_QtGui_57(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QPaintEngine_isActive, "isActive(self) -> bool");

extern "C" {static PyObject *meth_QPaintEngine_isActive(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_isActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngine, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isActive();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_isActive, doc_QPaintEngine_isActive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngine_setActive, "setActive(self, bool)");

extern "C" {static PyObject *meth_QPaintEngine_setActive(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_setActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPaintEngine, &sipCpp, &a0))
        {
            sipCpp->setActive(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_setActive, doc_QPaintEngine_setActive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngine_begin, "begin(self, QPaintDevice) -> bool");

extern "C" {static PyObject *meth_QPaintEngine_begin(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_begin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QPaintDevice* a0;
         ::QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QPaintEngine, &sipCpp, sipType_QPaintDevice, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QPaintEngine, sipName_begin);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->begin(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_begin, doc_QPaintEngine_begin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngine_end, "end(self) -> bool");

extern "C" {static PyObject *meth_QPaintEngine_end(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_end(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngine, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QPaintEngine, sipName_end);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->end();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_end, doc_QPaintEngine_end);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngine_updateState, "updateState(self, QPaintEngineState)");

extern "C" {static PyObject *meth_QPaintEngine_updateState(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_updateState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QPaintEngineState* a0;
         ::QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPaintEngine, &sipCpp, sipType_QPaintEngineState, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QPaintEngine, sipName_updateState);
                return SIP_NULLPTR;
            }

            sipCpp->updateState(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_updateState, doc_QPaintEngine_updateState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngine_drawRects, "drawRects(self, QRect)\n"
"drawRects(self, QRectF)");

extern "C" {static PyObject *meth_QPaintEngine_drawRects(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_drawRects(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QRect* a0;
        SIP_SSIZE_T a1;
         ::QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Br", &sipSelf, sipType_QPaintEngine, &sipCpp, sipType_QRect, &a0, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QPaintEngine::drawRects(a0,(int)a1) : sipCpp->drawRects(a0,(int)a1));
            delete[] a0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QRectF* a0;
        SIP_SSIZE_T a1;
         ::QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Br", &sipSelf, sipType_QPaintEngine, &sipCpp, sipType_QRectF, &a0, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QPaintEngine::drawRects(a0,(int)a1) : sipCpp->drawRects(a0,(int)a1));
            delete[] a0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_drawRects, doc_QPaintEngine_drawRects);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngine_drawLines, "drawLines(self, QLine)\n"
"drawLines(self, QLineF)");

extern "C" {static PyObject *meth_QPaintEngine_drawLines(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_drawLines(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QLine* a0;
        SIP_SSIZE_T a1;
         ::QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Br", &sipSelf, sipType_QPaintEngine, &sipCpp, sipType_QLine, &a0, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QPaintEngine::drawLines(a0,(int)a1) : sipCpp->drawLines(a0,(int)a1));
            delete[] a0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QLineF* a0;
        SIP_SSIZE_T a1;
         ::QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Br", &sipSelf, sipType_QPaintEngine, &sipCpp, sipType_QLineF, &a0, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QPaintEngine::drawLines(a0,(int)a1) : sipCpp->drawLines(a0,(int)a1));
            delete[] a0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_drawLines, doc_QPaintEngine_drawLines);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngine_drawEllipse, "drawEllipse(self, QRectF)\n"
"drawEllipse(self, QRect)");

extern "C" {static PyObject *meth_QPaintEngine_drawEllipse(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_drawEllipse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QRectF* a0;
         ::QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPaintEngine, &sipCpp, sipType_QRectF, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QPaintEngine::drawEllipse(*a0) : sipCpp->drawEllipse(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QRect* a0;
         ::QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPaintEngine, &sipCpp, sipType_QRect, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QPaintEngine::drawEllipse(*a0) : sipCpp->drawEllipse(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_drawEllipse, doc_QPaintEngine_drawEllipse);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngine_drawPath, "drawPath(self, QPainterPath)");

extern "C" {static PyObject *meth_QPaintEngine_drawPath(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_drawPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QPainterPath* a0;
         ::QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPaintEngine, &sipCpp, sipType_QPainterPath, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QPaintEngine::drawPath(*a0) : sipCpp->drawPath(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_drawPath, doc_QPaintEngine_drawPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngine_drawPoints, "drawPoints(self, Union[QPointF, QPoint])\n"
"drawPoints(self, QPoint)");

extern "C" {static PyObject *meth_QPaintEngine_drawPoints(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_drawPoints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QPointF* a0;
        SIP_SSIZE_T a1;
         ::QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Br", &sipSelf, sipType_QPaintEngine, &sipCpp, sipType_QPointF, &a0, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QPaintEngine::drawPoints(a0,(int)a1) : sipCpp->drawPoints(a0,(int)a1));
            delete[] a0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPoint* a0;
        SIP_SSIZE_T a1;
         ::QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Br", &sipSelf, sipType_QPaintEngine, &sipCpp, sipType_QPoint, &a0, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QPaintEngine::drawPoints(a0,(int)a1) : sipCpp->drawPoints(a0,(int)a1));
            delete[] a0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_drawPoints, doc_QPaintEngine_drawPoints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngine_drawPolygon, "drawPolygon(self, Union[QPointF, QPoint], QPaintEngine.PolygonDrawMode)\n"
"drawPolygon(self, QPoint, QPaintEngine.PolygonDrawMode)");

extern "C" {static PyObject *meth_QPaintEngine_drawPolygon(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_drawPolygon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QPointF* a0;
        SIP_SSIZE_T a1;
         ::QPaintEngine::PolygonDrawMode a2;
         ::QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BrE", &sipSelf, sipType_QPaintEngine, &sipCpp, sipType_QPointF, &a0, &a1, sipType_QPaintEngine_PolygonDrawMode, &a2))
        {
            (sipSelfWasArg ? sipCpp-> ::QPaintEngine::drawPolygon(a0,(int)a1,a2) : sipCpp->drawPolygon(a0,(int)a1,a2));
            delete[] a0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPoint* a0;
        SIP_SSIZE_T a1;
         ::QPaintEngine::PolygonDrawMode a2;
         ::QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BrE", &sipSelf, sipType_QPaintEngine, &sipCpp, sipType_QPoint, &a0, &a1, sipType_QPaintEngine_PolygonDrawMode, &a2))
        {
            (sipSelfWasArg ? sipCpp-> ::QPaintEngine::drawPolygon(a0,(int)a1,a2) : sipCpp->drawPolygon(a0,(int)a1,a2));
            delete[] a0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_drawPolygon, doc_QPaintEngine_drawPolygon);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngine_drawPixmap, "drawPixmap(self, QRectF, QPixmap, QRectF)");

extern "C" {static PyObject *meth_QPaintEngine_drawPixmap(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_drawPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QRectF* a0;
        const  ::QPixmap* a1;
        const  ::QRectF* a2;
         ::QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J9", &sipSelf, sipType_QPaintEngine, &sipCpp, sipType_QRectF, &a0, sipType_QPixmap, &a1, sipType_QRectF, &a2))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QPaintEngine, sipName_drawPixmap);
                return SIP_NULLPTR;
            }

            sipCpp->drawPixmap(*a0,*a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_drawPixmap, doc_QPaintEngine_drawPixmap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngine_drawTextItem, "drawTextItem(self, Union[QPointF, QPoint], QTextItem)");

extern "C" {static PyObject *meth_QPaintEngine_drawTextItem(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_drawTextItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QTextItem* a1;
         ::QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9", &sipSelf, sipType_QPaintEngine, &sipCpp, sipType_QPointF, &a0, &a0State, sipType_QTextItem, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QPaintEngine::drawTextItem(*a0,*a1) : sipCpp->drawTextItem(*a0,*a1));
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_drawTextItem, doc_QPaintEngine_drawTextItem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngine_drawTiledPixmap, "drawTiledPixmap(self, QRectF, QPixmap, Union[QPointF, QPoint])");

extern "C" {static PyObject *meth_QPaintEngine_drawTiledPixmap(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_drawTiledPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QRectF* a0;
        const  ::QPixmap* a1;
        const  ::QPointF* a2;
        int a2State = 0;
         ::QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J1", &sipSelf, sipType_QPaintEngine, &sipCpp, sipType_QRectF, &a0, sipType_QPixmap, &a1, sipType_QPointF, &a2, &a2State))
        {
            (sipSelfWasArg ? sipCpp-> ::QPaintEngine::drawTiledPixmap(*a0,*a1,*a2) : sipCpp->drawTiledPixmap(*a0,*a1,*a2));
            sipReleaseType(const_cast< ::QPointF *>(a2),sipType_QPointF,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_drawTiledPixmap, doc_QPaintEngine_drawTiledPixmap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngine_drawImage, "drawImage(self, QRectF, QImage, QRectF, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.AutoColor)");

extern "C" {static PyObject *meth_QPaintEngine_drawImage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_drawImage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QRectF* a0;
        const  ::QImage* a1;
        const  ::QRectF* a2;
         ::Qt::ImageConversionFlags a3def = Qt::AutoColor;
         ::Qt::ImageConversionFlags* a3 = &a3def;
        int a3State = 0;
         ::QPaintEngine *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J9J9|J1", &sipSelf, sipType_QPaintEngine, &sipCpp, sipType_QRectF, &a0, sipType_QImage, &a1, sipType_QRectF, &a2, sipType_Qt_ImageConversionFlags, &a3, &a3State))
        {
            (sipSelfWasArg ? sipCpp-> ::QPaintEngine::drawImage(*a0,*a1,*a2,*a3) : sipCpp->drawImage(*a0,*a1,*a2,*a3));
            sipReleaseType(a3,sipType_Qt_ImageConversionFlags,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_drawImage, doc_QPaintEngine_drawImage);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngine_setPaintDevice, "setPaintDevice(self, QPaintDevice)");

extern "C" {static PyObject *meth_QPaintEngine_setPaintDevice(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_setPaintDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPaintDevice* a0;
         ::QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QPaintEngine, &sipCpp, sipType_QPaintDevice, &a0))
        {
            sipCpp->setPaintDevice(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_setPaintDevice, doc_QPaintEngine_setPaintDevice);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngine_paintDevice, "paintDevice(self) -> QPaintDevice");

extern "C" {static PyObject *meth_QPaintEngine_paintDevice(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_paintDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngine, &sipCpp))
        {
             ::QPaintDevice*sipRes;

            sipRes = sipCpp->paintDevice();

            return sipConvertFromType(sipRes,sipType_QPaintDevice,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_paintDevice, doc_QPaintEngine_paintDevice);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngine_type, "type(self) -> QPaintEngine.Type");

extern "C" {static PyObject *meth_QPaintEngine_type(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngine, &sipCpp))
        {
             ::QPaintEngine::Type sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QPaintEngine, sipName_type);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->type();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QPaintEngine_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_type, doc_QPaintEngine_type);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngine_painter, "painter(self) -> QPainter");

extern "C" {static PyObject *meth_QPaintEngine_painter(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_painter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngine, &sipCpp))
        {
             ::QPainter*sipRes;

            sipRes = sipCpp->painter();

            return sipConvertFromType(sipRes,sipType_QPainter,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_painter, doc_QPaintEngine_painter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPaintEngine_hasFeature, "hasFeature(self, Union[QPaintEngine.PaintEngineFeatures, QPaintEngine.PaintEngineFeature]) -> bool");

extern "C" {static PyObject *meth_QPaintEngine_hasFeature(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_hasFeature(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPaintEngine::PaintEngineFeatures* a0;
        int a0State = 0;
        const  ::QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPaintEngine, &sipCpp, sipType_QPaintEngine_PaintEngineFeatures, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->hasFeature(*a0);
            sipReleaseType(a0,sipType_QPaintEngine_PaintEngineFeatures,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_hasFeature, doc_QPaintEngine_hasFeature);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPaintEngine(void *, int);}
static void release_QPaintEngine(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQPaintEngine *>(sipCppV);
    else
        delete reinterpret_cast< ::QPaintEngine *>(sipCppV);
}


extern "C" {static void dealloc_QPaintEngine(sipSimpleWrapper *);}
static void dealloc_QPaintEngine(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQPaintEngine *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPaintEngine(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QPaintEngine(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPaintEngine(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQPaintEngine *sipCpp = SIP_NULLPTR;

    {
         ::QPaintEngine::PaintEngineFeatures a0def = QPaintEngine::PaintEngineFeatures();
         ::QPaintEngine::PaintEngineFeatures* a0 = &a0def;
        int a0State = 0;

        static const char *sipKwdList[] = {
            sipName_features,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J1", sipType_QPaintEngine_PaintEngineFeatures, &a0, &a0State))
        {
            sipCpp = new sipQPaintEngine(*a0);
            sipReleaseType(a0,sipType_QPaintEngine_PaintEngineFeatures,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QPaintEngine[] = {
    {SIP_MLNAME_CAST(sipName_begin), meth_QPaintEngine_begin, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngine_begin)},
    {SIP_MLNAME_CAST(sipName_drawEllipse), meth_QPaintEngine_drawEllipse, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngine_drawEllipse)},
    {SIP_MLNAME_CAST(sipName_drawImage), SIP_MLMETH_CAST(meth_QPaintEngine_drawImage), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPaintEngine_drawImage)},
    {SIP_MLNAME_CAST(sipName_drawLines), meth_QPaintEngine_drawLines, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngine_drawLines)},
    {SIP_MLNAME_CAST(sipName_drawPath), meth_QPaintEngine_drawPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngine_drawPath)},
    {SIP_MLNAME_CAST(sipName_drawPixmap), meth_QPaintEngine_drawPixmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngine_drawPixmap)},
    {SIP_MLNAME_CAST(sipName_drawPoints), meth_QPaintEngine_drawPoints, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngine_drawPoints)},
    {SIP_MLNAME_CAST(sipName_drawPolygon), meth_QPaintEngine_drawPolygon, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngine_drawPolygon)},
    {SIP_MLNAME_CAST(sipName_drawRects), meth_QPaintEngine_drawRects, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngine_drawRects)},
    {SIP_MLNAME_CAST(sipName_drawTextItem), meth_QPaintEngine_drawTextItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngine_drawTextItem)},
    {SIP_MLNAME_CAST(sipName_drawTiledPixmap), meth_QPaintEngine_drawTiledPixmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngine_drawTiledPixmap)},
    {SIP_MLNAME_CAST(sipName_end), meth_QPaintEngine_end, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngine_end)},
    {SIP_MLNAME_CAST(sipName_hasFeature), meth_QPaintEngine_hasFeature, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngine_hasFeature)},
    {SIP_MLNAME_CAST(sipName_isActive), meth_QPaintEngine_isActive, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngine_isActive)},
    {SIP_MLNAME_CAST(sipName_paintDevice), meth_QPaintEngine_paintDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngine_paintDevice)},
    {SIP_MLNAME_CAST(sipName_painter), meth_QPaintEngine_painter, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngine_painter)},
    {SIP_MLNAME_CAST(sipName_setActive), meth_QPaintEngine_setActive, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngine_setActive)},
    {SIP_MLNAME_CAST(sipName_setPaintDevice), meth_QPaintEngine_setPaintDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngine_setPaintDevice)},
    {SIP_MLNAME_CAST(sipName_type), meth_QPaintEngine_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngine_type)},
    {SIP_MLNAME_CAST(sipName_updateState), meth_QPaintEngine_updateState, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngine_updateState)}
};

static sipEnumMemberDef enummembers_QPaintEngine[] = {
    {sipName_AllDirty, static_cast<int>( ::QPaintEngine::AllDirty), 195},
    {sipName_AllFeatures, static_cast<int>( ::QPaintEngine::AllFeatures), 197},
    {sipName_AlphaBlend, static_cast<int>( ::QPaintEngine::AlphaBlend), 197},
    {sipName_Antialiasing, static_cast<int>( ::QPaintEngine::Antialiasing), 197},
    {sipName_BlendModes, static_cast<int>( ::QPaintEngine::BlendModes), 197},
    {sipName_Blitter, static_cast<int>( ::QPaintEngine::Blitter), 200},
    {sipName_BrushStroke, static_cast<int>( ::QPaintEngine::BrushStroke), 197},
    {sipName_ConicalGradientFill, static_cast<int>( ::QPaintEngine::ConicalGradientFill), 197},
    {sipName_ConstantOpacity, static_cast<int>( ::QPaintEngine::ConstantOpacity), 197},
    {sipName_ConvexMode, static_cast<int>( ::QPaintEngine::ConvexMode), 199},
    {sipName_CoreGraphics, static_cast<int>( ::QPaintEngine::CoreGraphics), 200},
    {sipName_Direct2D, static_cast<int>( ::QPaintEngine::Direct2D), 200},
    {sipName_Direct3D, static_cast<int>( ::QPaintEngine::Direct3D), 200},
    {sipName_DirtyBackground, static_cast<int>( ::QPaintEngine::DirtyBackground), 195},
    {sipName_DirtyBackgroundMode, static_cast<int>( ::QPaintEngine::DirtyBackgroundMode), 195},
    {sipName_DirtyBrush, static_cast<int>( ::QPaintEngine::DirtyBrush), 195},
    {sipName_DirtyBrushOrigin, static_cast<int>( ::QPaintEngine::DirtyBrushOrigin), 195},
    {sipName_DirtyClipEnabled, static_cast<int>( ::QPaintEngine::DirtyClipEnabled), 195},
    {sipName_DirtyClipPath, static_cast<int>( ::QPaintEngine::DirtyClipPath), 195},
    {sipName_DirtyClipRegion, static_cast<int>( ::QPaintEngine::DirtyClipRegion), 195},
    {sipName_DirtyCompositionMode, static_cast<int>( ::QPaintEngine::DirtyCompositionMode), 195},
    {sipName_DirtyFont, static_cast<int>( ::QPaintEngine::DirtyFont), 195},
    {sipName_DirtyHints, static_cast<int>( ::QPaintEngine::DirtyHints), 195},
    {sipName_DirtyOpacity, static_cast<int>( ::QPaintEngine::DirtyOpacity), 195},
    {sipName_DirtyPen, static_cast<int>( ::QPaintEngine::DirtyPen), 195},
    {sipName_DirtyTransform, static_cast<int>( ::QPaintEngine::DirtyTransform), 195},
    {sipName_LinearGradientFill, static_cast<int>( ::QPaintEngine::LinearGradientFill), 197},
    {sipName_MacPrinter, static_cast<int>( ::QPaintEngine::MacPrinter), 200},
    {sipName_MaskedBrush, static_cast<int>( ::QPaintEngine::MaskedBrush), 197},
    {sipName_MaxUser, static_cast<int>( ::QPaintEngine::MaxUser), 200},
    {sipName_ObjectBoundingModeGradients, static_cast<int>( ::QPaintEngine::ObjectBoundingModeGradients), 197},
    {sipName_OddEvenMode, static_cast<int>( ::QPaintEngine::OddEvenMode), 199},
    {sipName_OpenGL, static_cast<int>( ::QPaintEngine::OpenGL), 200},
    {sipName_OpenGL2, static_cast<int>( ::QPaintEngine::OpenGL2), 200},
    {sipName_OpenVG, static_cast<int>( ::QPaintEngine::OpenVG), 200},
    {sipName_PaintBuffer, static_cast<int>( ::QPaintEngine::PaintBuffer), 200},
    {sipName_PaintOutsidePaintEvent, static_cast<int>( ::QPaintEngine::PaintOutsidePaintEvent), 197},
    {sipName_PainterPaths, static_cast<int>( ::QPaintEngine::PainterPaths), 197},
    {sipName_PatternBrush, static_cast<int>( ::QPaintEngine::PatternBrush), 197},
    {sipName_PatternTransform, static_cast<int>( ::QPaintEngine::PatternTransform), 197},
    {sipName_Pdf, static_cast<int>( ::QPaintEngine::Pdf), 200},
    {sipName_PerspectiveTransform, static_cast<int>( ::QPaintEngine::PerspectiveTransform), 197},
    {sipName_Picture, static_cast<int>( ::QPaintEngine::Picture), 200},
    {sipName_PixmapTransform, static_cast<int>( ::QPaintEngine::PixmapTransform), 197},
    {sipName_PolylineMode, static_cast<int>( ::QPaintEngine::PolylineMode), 199},
    {sipName_PorterDuff, static_cast<int>( ::QPaintEngine::PorterDuff), 197},
    {sipName_PostScript, static_cast<int>( ::QPaintEngine::PostScript), 200},
    {sipName_PrimitiveTransform, static_cast<int>( ::QPaintEngine::PrimitiveTransform), 197},
    {sipName_QWindowSystem, static_cast<int>( ::QPaintEngine::QWindowSystem), 200},
    {sipName_QuickDraw, static_cast<int>( ::QPaintEngine::QuickDraw), 200},
    {sipName_RadialGradientFill, static_cast<int>( ::QPaintEngine::RadialGradientFill), 197},
    {sipName_Raster, static_cast<int>( ::QPaintEngine::Raster), 200},
    {sipName_RasterOpModes, static_cast<int>( ::QPaintEngine::RasterOpModes), 197},
    {sipName_SVG, static_cast<int>( ::QPaintEngine::SVG), 200},
    {sipName_User, static_cast<int>( ::QPaintEngine::User), 200},
    {sipName_WindingMode, static_cast<int>( ::QPaintEngine::WindingMode), 199},
    {sipName_Windows, static_cast<int>( ::QPaintEngine::Windows), 200},
    {sipName_X11, static_cast<int>( ::QPaintEngine::X11), 200},
};

PyDoc_STRVAR(doc_QPaintEngine, "\1QPaintEngine(features: Union[QPaintEngine.PaintEngineFeatures, QPaintEngine.PaintEngineFeature] = QPaintEngine.PaintEngineFeatures())");


static pyqt5ClassPluginDef plugin_QPaintEngine = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QPaintEngine = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPaintEngine,
        {SIP_NULLPTR},
        &plugin_QPaintEngine
    },
    {
        sipNameNr_QPaintEngine,
        {0, 0, 1},
        20, methods_QPaintEngine,
        58, enummembers_QPaintEngine,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPaintEngine,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QPaintEngine,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QPaintEngine,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QPaintEngine,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 88303 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 88307 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static long slot_QTextItem_RenderFlags___hash__(PyObject *);}
static long slot_QTextItem_RenderFlags___hash__(PyObject *sipSelf)
{
     ::QTextItem::RenderFlags *sipCpp = reinterpret_cast< ::QTextItem::RenderFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextItem_RenderFlags));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QTextItem::RenderFlags::Int();
#line 88325 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QTextItem_RenderFlags___bool__(PyObject *);}
static int slot_QTextItem_RenderFlags___bool__(PyObject *sipSelf)
{
     ::QTextItem::RenderFlags *sipCpp = reinterpret_cast< ::QTextItem::RenderFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextItem_RenderFlags));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QTextItem::RenderFlags::Int() != 0);
#line 88350 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QTextItem_RenderFlags___ne__(PyObject *,PyObject *);}
static PyObject *slot_QTextItem_RenderFlags___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextItem::RenderFlags *sipCpp = reinterpret_cast< ::QTextItem::RenderFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextItem_RenderFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextItem::RenderFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QTextItem_RenderFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QTextItem::RenderFlags::Int() != a0->operator QTextItem::RenderFlags::Int());
#line 88380 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
            sipReleaseType(const_cast< ::QTextItem::RenderFlags *>(a0),sipType_QTextItem_RenderFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QTextItem_RenderFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTextItem_RenderFlags___eq__(PyObject *,PyObject *);}
static PyObject *slot_QTextItem_RenderFlags___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextItem::RenderFlags *sipCpp = reinterpret_cast< ::QTextItem::RenderFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextItem_RenderFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextItem::RenderFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QTextItem_RenderFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QTextItem::RenderFlags::Int() == a0->operator QTextItem::RenderFlags::Int());
#line 88416 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
            sipReleaseType(const_cast< ::QTextItem::RenderFlags *>(a0),sipType_QTextItem_RenderFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QTextItem_RenderFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTextItem_RenderFlags___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QTextItem_RenderFlags___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTextItem_RenderFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTextItem::RenderFlags *sipCpp = reinterpret_cast< ::QTextItem::RenderFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextItem_RenderFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QTextItem::RenderFlags(*sipCpp ^ a0);
#line 88455 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTextItem_RenderFlags___xor__(PyObject *,PyObject *);}
static PyObject *slot_QTextItem_RenderFlags___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextItem::RenderFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QTextItem_RenderFlags, &a0, &a0State, &a1))
        {
             ::QTextItem::RenderFlags*sipRes;

            sipRes = new  ::QTextItem::RenderFlags((*a0 ^ a1));
            sipReleaseType(a0,sipType_QTextItem_RenderFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTextItem_RenderFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QTextItem_RenderFlags___ior__(PyObject *,PyObject *);}
static PyObject *slot_QTextItem_RenderFlags___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTextItem_RenderFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTextItem::RenderFlags *sipCpp = reinterpret_cast< ::QTextItem::RenderFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextItem_RenderFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QTextItem::RenderFlags(*sipCpp | a0);
#line 88527 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTextItem_RenderFlags___or__(PyObject *,PyObject *);}
static PyObject *slot_QTextItem_RenderFlags___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextItem::RenderFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QTextItem_RenderFlags, &a0, &a0State, &a1))
        {
             ::QTextItem::RenderFlags*sipRes;

            sipRes = new  ::QTextItem::RenderFlags((*a0 | a1));
            sipReleaseType(a0,sipType_QTextItem_RenderFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTextItem_RenderFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QTextItem_RenderFlags___iand__(PyObject *,PyObject *);}
static PyObject *slot_QTextItem_RenderFlags___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTextItem_RenderFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTextItem::RenderFlags *sipCpp = reinterpret_cast< ::QTextItem::RenderFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextItem_RenderFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QTextItem::RenderFlags::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTextItem_RenderFlags___and__(PyObject *,PyObject *);}
static PyObject *slot_QTextItem_RenderFlags___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextItem::RenderFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QTextItem_RenderFlags, &a0, &a0State, &a1))
        {
             ::QTextItem::RenderFlags*sipRes;

            sipRes = new  ::QTextItem::RenderFlags((*a0 & a1));
            sipReleaseType(a0,sipType_QTextItem_RenderFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTextItem_RenderFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QTextItem_RenderFlags___invert__(PyObject *);}
static PyObject *slot_QTextItem_RenderFlags___invert__(PyObject *sipSelf)
{
     ::QTextItem::RenderFlags *sipCpp = reinterpret_cast< ::QTextItem::RenderFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextItem_RenderFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QTextItem::RenderFlags*sipRes;

            sipRes = new  ::QTextItem::RenderFlags(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QTextItem_RenderFlags,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QTextItem_RenderFlags___int__(PyObject *);}
static PyObject *slot_QTextItem_RenderFlags___int__(PyObject *sipSelf)
{
     ::QTextItem::RenderFlags *sipCpp = reinterpret_cast< ::QTextItem::RenderFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextItem_RenderFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextItem_RenderFlags(void *, int);}
static void release_QTextItem_RenderFlags(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextItem::RenderFlags *>(sipCppV);
}


extern "C" {static void assign_QTextItem_RenderFlags(void *, SIP_SSIZE_T, void *);}
static void assign_QTextItem_RenderFlags(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTextItem::RenderFlags *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTextItem::RenderFlags *>(sipSrc);
}


extern "C" {static void *array_QTextItem_RenderFlags(SIP_SSIZE_T);}
static void *array_QTextItem_RenderFlags(SIP_SSIZE_T sipNrElem)
{
    return new  ::QTextItem::RenderFlags[sipNrElem];
}


extern "C" {static void *copy_QTextItem_RenderFlags(const void *, SIP_SSIZE_T);}
static void *copy_QTextItem_RenderFlags(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QTextItem::RenderFlags(reinterpret_cast<const  ::QTextItem::RenderFlags *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextItem_RenderFlags(sipSimpleWrapper *);}
static void dealloc_QTextItem_RenderFlags(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextItem_RenderFlags(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextItem_RenderFlags(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextItem_RenderFlags(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextItem::RenderFlags *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTextItem::RenderFlags();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QTextItem::RenderFlags(a0);

            return sipCpp;
        }
    }

    {
        const  ::QTextItem::RenderFlags* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QTextItem_RenderFlags, &a0, &a0State))
        {
            sipCpp = new  ::QTextItem::RenderFlags(*a0);
            sipReleaseType(const_cast< ::QTextItem::RenderFlags *>(a0),sipType_QTextItem_RenderFlags,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QTextItem_RenderFlags(PyObject *, void **, int *, PyObject *);}
static int convertTo_QTextItem_RenderFlags(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QTextItem::RenderFlags **sipCppPtr = reinterpret_cast< ::QTextItem::RenderFlags **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QTextItem::RenderFlags is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QTextItem_RenderFlag)) ||
            sipCanConvertToType(sipPy, sipType_QTextItem_RenderFlags, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QTextItem_RenderFlag)))
{
    *sipCppPtr = new QTextItem::RenderFlags(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QTextItem::RenderFlags *>(sipConvertToType(sipPy, sipType_QTextItem_RenderFlags, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 88795 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QTextItem_RenderFlags[] = {
    {(void *)slot_QTextItem_RenderFlags___hash__, hash_slot},
    {(void *)slot_QTextItem_RenderFlags___bool__, bool_slot},
    {(void *)slot_QTextItem_RenderFlags___ne__, ne_slot},
    {(void *)slot_QTextItem_RenderFlags___eq__, eq_slot},
    {(void *)slot_QTextItem_RenderFlags___ixor__, ixor_slot},
    {(void *)slot_QTextItem_RenderFlags___xor__, xor_slot},
    {(void *)slot_QTextItem_RenderFlags___ior__, ior_slot},
    {(void *)slot_QTextItem_RenderFlags___or__, or_slot},
    {(void *)slot_QTextItem_RenderFlags___iand__, iand_slot},
    {(void *)slot_QTextItem_RenderFlags___and__, and_slot},
    {(void *)slot_QTextItem_RenderFlags___invert__, invert_slot},
    {(void *)slot_QTextItem_RenderFlags___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QTextItem_RenderFlags, "\1QTextItem.RenderFlags()\n"
"QTextItem.RenderFlags(Union[QTextItem.RenderFlags, QTextItem.RenderFlag])\n"
"QTextItem.RenderFlags(QTextItem.RenderFlags)");


static pyqt5ClassPluginDef plugin_QTextItem_RenderFlags = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextItem_RenderFlags = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextItem__RenderFlags,
        {SIP_NULLPTR},
        &plugin_QTextItem_RenderFlags
    },
    {
        sipNameNr_RenderFlags,
        {318, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextItem_RenderFlags,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QTextItem_RenderFlags,
    init_type_QTextItem_RenderFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextItem_RenderFlags,
    assign_QTextItem_RenderFlags,
    array_QTextItem_RenderFlags,
    copy_QTextItem_RenderFlags,
    release_QTextItem_RenderFlags,
    SIP_NULLPTR,
    convertTo_QTextItem_RenderFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 88883 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 88887 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 88890 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 88893 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QTextItem_descent, "descent(self) -> float");

extern "C" {static PyObject *meth_QTextItem_descent(PyObject *, PyObject *);}
static PyObject *meth_QTextItem_descent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextItem, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->descent();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextItem, sipName_descent, doc_QTextItem_descent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextItem_ascent, "ascent(self) -> float");

extern "C" {static PyObject *meth_QTextItem_ascent(PyObject *, PyObject *);}
static PyObject *meth_QTextItem_ascent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextItem, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->ascent();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextItem, sipName_ascent, doc_QTextItem_ascent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextItem_width, "width(self) -> float");

extern "C" {static PyObject *meth_QTextItem_width(PyObject *, PyObject *);}
static PyObject *meth_QTextItem_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextItem, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->width();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextItem, sipName_width, doc_QTextItem_width);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextItem_renderFlags, "renderFlags(self) -> QTextItem.RenderFlags");

extern "C" {static PyObject *meth_QTextItem_renderFlags(PyObject *, PyObject *);}
static PyObject *meth_QTextItem_renderFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextItem, &sipCpp))
        {
             ::QTextItem::RenderFlags*sipRes;

            sipRes = new  ::QTextItem::RenderFlags(sipCpp->renderFlags());

            return sipConvertFromNewType(sipRes,sipType_QTextItem_RenderFlags,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextItem, sipName_renderFlags, doc_QTextItem_renderFlags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextItem_text, "text(self) -> str");

extern "C" {static PyObject *meth_QTextItem_text(PyObject *, PyObject *);}
static PyObject *meth_QTextItem_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextItem, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->text());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextItem, sipName_text, doc_QTextItem_text);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextItem_font, "font(self) -> QFont");

extern "C" {static PyObject *meth_QTextItem_font(PyObject *, PyObject *);}
static PyObject *meth_QTextItem_font(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextItem, &sipCpp))
        {
             ::QFont*sipRes;

            sipRes = new  ::QFont(sipCpp->font());

            return sipConvertFromNewType(sipRes,sipType_QFont,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextItem, sipName_font, doc_QTextItem_font);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextItem(void *, int);}
static void release_QTextItem(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextItem *>(sipCppV);
}


extern "C" {static void assign_QTextItem(void *, SIP_SSIZE_T, void *);}
static void assign_QTextItem(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTextItem *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTextItem *>(sipSrc);
}


extern "C" {static void *array_QTextItem(SIP_SSIZE_T);}
static void *array_QTextItem(SIP_SSIZE_T sipNrElem)
{
    return new  ::QTextItem[sipNrElem];
}


extern "C" {static void *copy_QTextItem(const void *, SIP_SSIZE_T);}
static void *copy_QTextItem(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QTextItem(reinterpret_cast<const  ::QTextItem *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextItem(sipSimpleWrapper *);}
static void dealloc_QTextItem(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextItem(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextItem(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextItem(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextItem *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTextItem();

            return sipCpp;
        }
    }

    {
        const  ::QTextItem* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTextItem, &a0))
        {
            sipCpp = new  ::QTextItem(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QTextItem[] = {
    {SIP_MLNAME_CAST(sipName_ascent), meth_QTextItem_ascent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextItem_ascent)},
    {SIP_MLNAME_CAST(sipName_descent), meth_QTextItem_descent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextItem_descent)},
    {SIP_MLNAME_CAST(sipName_font), meth_QTextItem_font, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextItem_font)},
    {SIP_MLNAME_CAST(sipName_renderFlags), meth_QTextItem_renderFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextItem_renderFlags)},
    {SIP_MLNAME_CAST(sipName_text), meth_QTextItem_text, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextItem_text)},
    {SIP_MLNAME_CAST(sipName_width), meth_QTextItem_width, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextItem_width)}
};

static sipEnumMemberDef enummembers_QTextItem[] = {
    {sipName_Overline, static_cast<int>( ::QTextItem::Overline), 319},
    {sipName_RightToLeft, static_cast<int>( ::QTextItem::RightToLeft), 319},
    {sipName_StrikeOut, static_cast<int>( ::QTextItem::StrikeOut), 319},
    {sipName_Underline, static_cast<int>( ::QTextItem::Underline), 319},
};

PyDoc_STRVAR(doc_QTextItem, "\1QTextItem()\n"
"QTextItem(QTextItem)");


static pyqt5ClassPluginDef plugin_QTextItem = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QTextItem = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextItem,
        {SIP_NULLPTR},
        &plugin_QTextItem
    },
    {
        sipNameNr_QTextItem,
        {0, 0, 1},
        6, methods_QTextItem,
        4, enummembers_QTextItem,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextItem,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QTextItem,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextItem,
    assign_QTextItem,
    array_QTextItem,
    copy_QTextItem,
    release_QTextItem,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 89213 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qscreen.sip"
#include <qscreen.h>
#line 89217 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 89220 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 89223 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 189 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 89226 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 89229 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 296 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 89232 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 717 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 89235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 253 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 89238 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 205 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 89241 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 354 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 89244 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 89247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 462 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 89250 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 451 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 89253 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 375 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 89256 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 403 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 89259 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 416 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 89262 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 786 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 89265 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 89268 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 89271 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 89274 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 89277 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 89280 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 89283 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 89286 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 89289 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 89292 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qsurfaceformat.sip"
#include <qsurfaceformat.h>
#line 89295 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qsurface.sip"
#include <qsurface.h>
#line 89298 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 89301 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 89304 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 89307 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 89310 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 89313 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 89316 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 89319 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 89322 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 89325 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 89328 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 89331 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 89334 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


class sipQWindow : public  ::QWindow
{
public:
    sipQWindow( ::QScreen*);
    sipQWindow( ::QWindow*);
    virtual ~sipQWindow();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void tabletEvent( ::QTabletEvent*) SIP_OVERRIDE;
    void touchEvent( ::QTouchEvent*) SIP_OVERRIDE;
    void wheelEvent( ::QWheelEvent*) SIP_OVERRIDE;
    void mouseMoveEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseDoubleClickEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseReleaseEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mousePressEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void keyReleaseEvent( ::QKeyEvent*) SIP_OVERRIDE;
    void keyPressEvent( ::QKeyEvent*) SIP_OVERRIDE;
    void hideEvent( ::QHideEvent*) SIP_OVERRIDE;
    void showEvent( ::QShowEvent*) SIP_OVERRIDE;
    void focusOutEvent( ::QFocusEvent*) SIP_OVERRIDE;
    void focusInEvent( ::QFocusEvent*) SIP_OVERRIDE;
    void moveEvent( ::QMoveEvent*) SIP_OVERRIDE;
    void resizeEvent( ::QResizeEvent*) SIP_OVERRIDE;
    void exposeEvent( ::QExposeEvent*) SIP_OVERRIDE;
     ::QObject* focusObject() const SIP_OVERRIDE;
     ::QSurfaceFormat format() const SIP_OVERRIDE;
     ::QSurface::SurfaceType surfaceType() const SIP_OVERRIDE;
     ::QSize size() const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQWindow(const sipQWindow &);
    sipQWindow &operator = (const sipQWindow &);

    char sipPyMethods[27];
};

sipQWindow::sipQWindow( ::QScreen*a0):  ::QWindow(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQWindow::sipQWindow( ::QWindow*a0):  ::QWindow(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQWindow::~sipQWindow()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQWindow::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QWindow);

    return  ::QWindow::metaObject();
}

int sipQWindow::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QWindow::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QWindow,_c,_id,_a);

    return _id;
}

void *sipQWindow::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QWindow, _clname, &sipCpp) ? sipCpp :  ::QWindow::qt_metacast(_clname));
}

void sipQWindow::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_tabletEvent);

    if (!sipMeth)
    {
         ::QWindow::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_51(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_QtGui_51(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWindow::touchEvent( ::QTouchEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_touchEvent);

    if (!sipMeth)
    {
         ::QWindow::touchEvent(a0);
        return;
    }

    extern void sipVH_QtGui_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTouchEvent*);

    sipVH_QtGui_50(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWindow::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_wheelEvent);

    if (!sipMeth)
    {
         ::QWindow::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtGui_49(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWindow::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
         ::QWindow::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_48(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWindow::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
         ::QWindow::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_48(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWindow::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
         ::QWindow::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_48(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWindow::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_mousePressEvent);

    if (!sipMeth)
    {
         ::QWindow::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_48(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWindow::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
         ::QWindow::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtGui_47(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWindow::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_keyPressEvent);

    if (!sipMeth)
    {
         ::QWindow::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtGui_47(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWindow::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_hideEvent);

    if (!sipMeth)
    {
         ::QWindow::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_QtGui_46(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWindow::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_showEvent);

    if (!sipMeth)
    {
         ::QWindow::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_QtGui_45(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWindow::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,SIP_NULLPTR,sipName_focusOutEvent);

    if (!sipMeth)
    {
         ::QWindow::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtGui_44(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWindow::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,SIP_NULLPTR,sipName_focusInEvent);

    if (!sipMeth)
    {
         ::QWindow::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtGui_44(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWindow::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,SIP_NULLPTR,sipName_moveEvent);

    if (!sipMeth)
    {
         ::QWindow::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_QtGui_43(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWindow::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_resizeEvent);

    if (!sipMeth)
    {
         ::QWindow::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_42(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_QtGui_42(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWindow::exposeEvent( ::QExposeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,SIP_NULLPTR,sipName_exposeEvent);

    if (!sipMeth)
    {
         ::QWindow::exposeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QExposeEvent*);

    sipVH_QtGui_41(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QObject* sipQWindow::focusObject() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,SIP_NULLPTR,sipName_focusObject);

    if (!sipMeth)
        return  ::QWindow::focusObject();

    extern  ::QObject* sipVH_QtGui_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_40(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSurfaceFormat sipQWindow::format() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,SIP_NULLPTR,sipName_format);

    if (!sipMeth)
        return  ::QWindow::format();

    extern  ::QSurfaceFormat sipVH_QtGui_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_36(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSurface::SurfaceType sipQWindow::surfaceType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,SIP_NULLPTR,sipName_surfaceType);

    if (!sipMeth)
        return  ::QWindow::surfaceType();

    extern  ::QSurface::SurfaceType sipVH_QtGui_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_37(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQWindow::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,SIP_NULLPTR,sipName_size);

    if (!sipMeth)
        return  ::QWindow::size();

    extern  ::QSize sipVH_QtGui_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_38(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQWindow::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QWindow::event(a0);

    extern bool sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_5(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQWindow::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QWindow::eventFilter(a0,a1);

    extern bool sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_4(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQWindow::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QWindow::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_3(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWindow::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QWindow::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_2(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWindow::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QWindow::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_1(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWindow::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QWindow::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQWindow::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QWindow::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QWindow_setSurfaceType, "setSurfaceType(self, QSurface.SurfaceType)");

extern "C" {static PyObject *meth_QWindow_setSurfaceType(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setSurfaceType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSurface::SurfaceType a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWindow, &sipCpp, sipType_QSurface_SurfaceType, &a0))
        {
            sipCpp->setSurfaceType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setSurfaceType, doc_QWindow_setSurfaceType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_surfaceType, "surfaceType(self) -> QSurface.SurfaceType");

extern "C" {static PyObject *meth_QWindow_surfaceType(PyObject *, PyObject *);}
static PyObject *meth_QWindow_surfaceType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QSurface::SurfaceType sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QWindow::surfaceType() : sipCpp->surfaceType());

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSurface_SurfaceType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_surfaceType, doc_QWindow_surfaceType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_isVisible, "isVisible(self) -> bool");

extern "C" {static PyObject *meth_QWindow_isVisible(PyObject *, PyObject *);}
static PyObject *meth_QWindow_isVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isVisible();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_isVisible, doc_QWindow_isVisible);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_create, "create(self)");

extern "C" {static PyObject *meth_QWindow_create(PyObject *, PyObject *);}
static PyObject *meth_QWindow_create(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            sipCpp->create();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_create, doc_QWindow_create);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_winId, "winId(self) -> sip.voidptr");

extern "C" {static PyObject *meth_QWindow_winId(PyObject *, PyObject *);}
static PyObject *meth_QWindow_winId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::WId*sipRes;

            sipRes = new  ::WId(sipCpp->winId());

            return sipConvertFromNewType(sipRes,sipType_quintptr,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_winId, doc_QWindow_winId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_parent, "parent(self) -> QWindow\n"
"parent(self, QWindow.AncestorMode) -> QWindow");

extern "C" {static PyObject *meth_QWindow_parent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_parent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QWindow*sipRes;

            sipRes = sipCpp->parent();

            return sipConvertFromType(sipRes,sipType_QWindow,SIP_NULLPTR);
        }
    }

    {
         ::QWindow::AncestorMode a0;
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWindow, &sipCpp, sipType_QWindow_AncestorMode, &a0))
        {
             ::QWindow*sipRes;

            sipRes = sipCpp->parent(a0);

            return sipConvertFromType(sipRes,sipType_QWindow,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_parent, doc_QWindow_parent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setParent, "setParent(self, QWindow)");

extern "C" {static PyObject *meth_QWindow_setParent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setParent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWindow* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QWindow, &sipCpp, sipType_QWindow, &a0))
        {
            sipCpp->setParent(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setParent, doc_QWindow_setParent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_isTopLevel, "isTopLevel(self) -> bool");

extern "C" {static PyObject *meth_QWindow_isTopLevel(PyObject *, PyObject *);}
static PyObject *meth_QWindow_isTopLevel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isTopLevel();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_isTopLevel, doc_QWindow_isTopLevel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_isModal, "isModal(self) -> bool");

extern "C" {static PyObject *meth_QWindow_isModal(PyObject *, PyObject *);}
static PyObject *meth_QWindow_isModal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isModal();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_isModal, doc_QWindow_isModal);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_modality, "modality(self) -> Qt.WindowModality");

extern "C" {static PyObject *meth_QWindow_modality(PyObject *, PyObject *);}
static PyObject *meth_QWindow_modality(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::Qt::WindowModality sipRes;

            sipRes = sipCpp->modality();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_WindowModality);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_modality, doc_QWindow_modality);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setModality, "setModality(self, Qt.WindowModality)");

extern "C" {static PyObject *meth_QWindow_setModality(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setModality(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::WindowModality a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWindow, &sipCpp, sipType_Qt_WindowModality, &a0))
        {
            sipCpp->setModality(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setModality, doc_QWindow_setModality);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setFormat, "setFormat(self, QSurfaceFormat)");

extern "C" {static PyObject *meth_QWindow_setFormat(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QSurfaceFormat, &a0))
        {
            sipCpp->setFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setFormat, doc_QWindow_setFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_format, "format(self) -> QSurfaceFormat");

extern "C" {static PyObject *meth_QWindow_format(PyObject *, PyObject *);}
static PyObject *meth_QWindow_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QSurfaceFormat*sipRes;

            sipRes = new  ::QSurfaceFormat((sipSelfWasArg ? sipCpp-> ::QWindow::format() : sipCpp->format()));

            return sipConvertFromNewType(sipRes,sipType_QSurfaceFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_format, doc_QWindow_format);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_requestedFormat, "requestedFormat(self) -> QSurfaceFormat");

extern "C" {static PyObject *meth_QWindow_requestedFormat(PyObject *, PyObject *);}
static PyObject *meth_QWindow_requestedFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QSurfaceFormat*sipRes;

            sipRes = new  ::QSurfaceFormat(sipCpp->requestedFormat());

            return sipConvertFromNewType(sipRes,sipType_QSurfaceFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_requestedFormat, doc_QWindow_requestedFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setFlags, "setFlags(self, Union[Qt.WindowFlags, Qt.WindowType])");

extern "C" {static PyObject *meth_QWindow_setFlags(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::WindowFlags* a0;
        int a0State = 0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWindow, &sipCpp, sipType_Qt_WindowFlags, &a0, &a0State))
        {
            sipCpp->setFlags(*a0);
            sipReleaseType(a0,sipType_Qt_WindowFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setFlags, doc_QWindow_setFlags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_flags, "flags(self) -> Qt.WindowFlags");

extern "C" {static PyObject *meth_QWindow_flags(PyObject *, PyObject *);}
static PyObject *meth_QWindow_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::Qt::WindowFlags*sipRes;

            sipRes = new  ::Qt::WindowFlags(sipCpp->flags());

            return sipConvertFromNewType(sipRes,sipType_Qt_WindowFlags,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_flags, doc_QWindow_flags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_type, "type(self) -> Qt.WindowType");

extern "C" {static PyObject *meth_QWindow_type(PyObject *, PyObject *);}
static PyObject *meth_QWindow_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::Qt::WindowType sipRes;

            sipRes = sipCpp->type();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_WindowType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_type, doc_QWindow_type);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_title, "title(self) -> str");

extern "C" {static PyObject *meth_QWindow_title(PyObject *, PyObject *);}
static PyObject *meth_QWindow_title(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->title());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_title, doc_QWindow_title);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setOpacity, "setOpacity(self, float)");

extern "C" {static PyObject *meth_QWindow_setOpacity(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setOpacity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            sipCpp->setOpacity(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setOpacity, doc_QWindow_setOpacity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_requestActivate, "requestActivate(self)");

extern "C" {static PyObject *meth_QWindow_requestActivate(PyObject *, PyObject *);}
static PyObject *meth_QWindow_requestActivate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            sipCpp->requestActivate();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_requestActivate, doc_QWindow_requestActivate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_isActive, "isActive(self) -> bool");

extern "C" {static PyObject *meth_QWindow_isActive(PyObject *, PyObject *);}
static PyObject *meth_QWindow_isActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isActive();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_isActive, doc_QWindow_isActive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_reportContentOrientationChange, "reportContentOrientationChange(self, Qt.ScreenOrientation)");

extern "C" {static PyObject *meth_QWindow_reportContentOrientationChange(PyObject *, PyObject *);}
static PyObject *meth_QWindow_reportContentOrientationChange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ScreenOrientation a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWindow, &sipCpp, sipType_Qt_ScreenOrientation, &a0))
        {
            sipCpp->reportContentOrientationChange(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_reportContentOrientationChange, doc_QWindow_reportContentOrientationChange);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_contentOrientation, "contentOrientation(self) -> Qt.ScreenOrientation");

extern "C" {static PyObject *meth_QWindow_contentOrientation(PyObject *, PyObject *);}
static PyObject *meth_QWindow_contentOrientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::Qt::ScreenOrientation sipRes;

            sipRes = sipCpp->contentOrientation();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_ScreenOrientation);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_contentOrientation, doc_QWindow_contentOrientation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_devicePixelRatio, "devicePixelRatio(self) -> float");

extern "C" {static PyObject *meth_QWindow_devicePixelRatio(PyObject *, PyObject *);}
static PyObject *meth_QWindow_devicePixelRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->devicePixelRatio();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_devicePixelRatio, doc_QWindow_devicePixelRatio);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_windowState, "windowState(self) -> Qt.WindowState");

extern "C" {static PyObject *meth_QWindow_windowState(PyObject *, PyObject *);}
static PyObject *meth_QWindow_windowState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::Qt::WindowState sipRes;

            sipRes = sipCpp->windowState();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_WindowState);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_windowState, doc_QWindow_windowState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setWindowState, "setWindowState(self, Qt.WindowState)");

extern "C" {static PyObject *meth_QWindow_setWindowState(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setWindowState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::WindowState a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWindow, &sipCpp, sipType_Qt_WindowState, &a0))
        {
            sipCpp->setWindowState(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setWindowState, doc_QWindow_setWindowState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setTransientParent, "setTransientParent(self, QWindow)");

extern "C" {static PyObject *meth_QWindow_setTransientParent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setTransientParent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWindow* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QWindow, &a0))
        {
            sipCpp->setTransientParent(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setTransientParent, doc_QWindow_setTransientParent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_transientParent, "transientParent(self) -> QWindow");

extern "C" {static PyObject *meth_QWindow_transientParent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_transientParent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QWindow*sipRes;

            sipRes = sipCpp->transientParent();

            return sipConvertFromType(sipRes,sipType_QWindow,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_transientParent, doc_QWindow_transientParent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_isAncestorOf, "isAncestorOf(self, QWindow, mode: QWindow.AncestorMode = QWindow.IncludeTransients) -> bool");

extern "C" {static PyObject *meth_QWindow_isAncestorOf(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWindow_isAncestorOf(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow* a0;
         ::QWindow::AncestorMode a1 = QWindow::IncludeTransients;
        const  ::QWindow *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8|E", &sipSelf, sipType_QWindow, &sipCpp, sipType_QWindow, &a0, sipType_QWindow_AncestorMode, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->isAncestorOf(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_isAncestorOf, doc_QWindow_isAncestorOf);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_isExposed, "isExposed(self) -> bool");

extern "C" {static PyObject *meth_QWindow_isExposed(PyObject *, PyObject *);}
static PyObject *meth_QWindow_isExposed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isExposed();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_isExposed, doc_QWindow_isExposed);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_minimumWidth, "minimumWidth(self) -> int");

extern "C" {static PyObject *meth_QWindow_minimumWidth(PyObject *, PyObject *);}
static PyObject *meth_QWindow_minimumWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->minimumWidth();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_minimumWidth, doc_QWindow_minimumWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_minimumHeight, "minimumHeight(self) -> int");

extern "C" {static PyObject *meth_QWindow_minimumHeight(PyObject *, PyObject *);}
static PyObject *meth_QWindow_minimumHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->minimumHeight();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_minimumHeight, doc_QWindow_minimumHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_maximumWidth, "maximumWidth(self) -> int");

extern "C" {static PyObject *meth_QWindow_maximumWidth(PyObject *, PyObject *);}
static PyObject *meth_QWindow_maximumWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maximumWidth();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_maximumWidth, doc_QWindow_maximumWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_maximumHeight, "maximumHeight(self) -> int");

extern "C" {static PyObject *meth_QWindow_maximumHeight(PyObject *, PyObject *);}
static PyObject *meth_QWindow_maximumHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maximumHeight();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_maximumHeight, doc_QWindow_maximumHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_minimumSize, "minimumSize(self) -> QSize");

extern "C" {static PyObject *meth_QWindow_minimumSize(PyObject *, PyObject *);}
static PyObject *meth_QWindow_minimumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->minimumSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_minimumSize, doc_QWindow_minimumSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_maximumSize, "maximumSize(self) -> QSize");

extern "C" {static PyObject *meth_QWindow_maximumSize(PyObject *, PyObject *);}
static PyObject *meth_QWindow_maximumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->maximumSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_maximumSize, doc_QWindow_maximumSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_baseSize, "baseSize(self) -> QSize");

extern "C" {static PyObject *meth_QWindow_baseSize(PyObject *, PyObject *);}
static PyObject *meth_QWindow_baseSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->baseSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_baseSize, doc_QWindow_baseSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_sizeIncrement, "sizeIncrement(self) -> QSize");

extern "C" {static PyObject *meth_QWindow_sizeIncrement(PyObject *, PyObject *);}
static PyObject *meth_QWindow_sizeIncrement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->sizeIncrement());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_sizeIncrement, doc_QWindow_sizeIncrement);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setMinimumSize, "setMinimumSize(self, QSize)");

extern "C" {static PyObject *meth_QWindow_setMinimumSize(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setMinimumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setMinimumSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setMinimumSize, doc_QWindow_setMinimumSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setMaximumSize, "setMaximumSize(self, QSize)");

extern "C" {static PyObject *meth_QWindow_setMaximumSize(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setMaximumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setMaximumSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setMaximumSize, doc_QWindow_setMaximumSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setBaseSize, "setBaseSize(self, QSize)");

extern "C" {static PyObject *meth_QWindow_setBaseSize(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setBaseSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setBaseSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setBaseSize, doc_QWindow_setBaseSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setSizeIncrement, "setSizeIncrement(self, QSize)");

extern "C" {static PyObject *meth_QWindow_setSizeIncrement(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setSizeIncrement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setSizeIncrement(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setSizeIncrement, doc_QWindow_setSizeIncrement);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setGeometry, "setGeometry(self, int, int, int, int)\n"
"setGeometry(self, QRect)");

extern "C" {static PyObject *meth_QWindow_setGeometry(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QWindow, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setGeometry(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QRect* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->setGeometry(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setGeometry, doc_QWindow_setGeometry);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_geometry, "geometry(self) -> QRect");

extern "C" {static PyObject *meth_QWindow_geometry(PyObject *, PyObject *);}
static PyObject *meth_QWindow_geometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->geometry());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_geometry, doc_QWindow_geometry);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_frameMargins, "frameMargins(self) -> QMargins");

extern "C" {static PyObject *meth_QWindow_frameMargins(PyObject *, PyObject *);}
static PyObject *meth_QWindow_frameMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QMargins*sipRes;

            sipRes = new  ::QMargins(sipCpp->frameMargins());

            return sipConvertFromNewType(sipRes,sipType_QMargins,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_frameMargins, doc_QWindow_frameMargins);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_frameGeometry, "frameGeometry(self) -> QRect");

extern "C" {static PyObject *meth_QWindow_frameGeometry(PyObject *, PyObject *);}
static PyObject *meth_QWindow_frameGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->frameGeometry());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_frameGeometry, doc_QWindow_frameGeometry);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_framePosition, "framePosition(self) -> QPoint");

extern "C" {static PyObject *meth_QWindow_framePosition(PyObject *, PyObject *);}
static PyObject *meth_QWindow_framePosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->framePosition());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_framePosition, doc_QWindow_framePosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setFramePosition, "setFramePosition(self, QPoint)");

extern "C" {static PyObject *meth_QWindow_setFramePosition(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setFramePosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->setFramePosition(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setFramePosition, doc_QWindow_setFramePosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_width, "width(self) -> int");

extern "C" {static PyObject *meth_QWindow_width(PyObject *, PyObject *);}
static PyObject *meth_QWindow_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->width();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_width, doc_QWindow_width);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_height, "height(self) -> int");

extern "C" {static PyObject *meth_QWindow_height(PyObject *, PyObject *);}
static PyObject *meth_QWindow_height(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->height();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_height, doc_QWindow_height);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_x, "x(self) -> int");

extern "C" {static PyObject *meth_QWindow_x(PyObject *, PyObject *);}
static PyObject *meth_QWindow_x(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->x();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_x, doc_QWindow_x);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_y, "y(self) -> int");

extern "C" {static PyObject *meth_QWindow_y(PyObject *, PyObject *);}
static PyObject *meth_QWindow_y(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->y();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_y, doc_QWindow_y);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_size, "size(self) -> QSize");

extern "C" {static PyObject *meth_QWindow_size(PyObject *, PyObject *);}
static PyObject *meth_QWindow_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QWindow::size() : sipCpp->size()));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_size, doc_QWindow_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_position, "position(self) -> QPoint");

extern "C" {static PyObject *meth_QWindow_position(PyObject *, PyObject *);}
static PyObject *meth_QWindow_position(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->position());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_position, doc_QWindow_position);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setPosition, "setPosition(self, QPoint)\n"
"setPosition(self, int, int)");

extern "C" {static PyObject *meth_QWindow_setPosition(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->setPosition(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QWindow, &sipCpp, &a0, &a1))
        {
            sipCpp->setPosition(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setPosition, doc_QWindow_setPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_resize, "resize(self, QSize)\n"
"resize(self, int, int)");

extern "C" {static PyObject *meth_QWindow_resize(PyObject *, PyObject *);}
static PyObject *meth_QWindow_resize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->resize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QWindow, &sipCpp, &a0, &a1))
        {
            sipCpp->resize(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_resize, doc_QWindow_resize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setFilePath, "setFilePath(self, str)");

extern "C" {static PyObject *meth_QWindow_setFilePath(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setFilePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWindow, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setFilePath(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setFilePath, doc_QWindow_setFilePath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_filePath, "filePath(self) -> str");

extern "C" {static PyObject *meth_QWindow_filePath(PyObject *, PyObject *);}
static PyObject *meth_QWindow_filePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->filePath());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_filePath, doc_QWindow_filePath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setIcon, "setIcon(self, QIcon)");

extern "C" {static PyObject *meth_QWindow_setIcon(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QIcon* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QIcon, &a0))
        {
            sipCpp->setIcon(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setIcon, doc_QWindow_setIcon);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_icon, "icon(self) -> QIcon");

extern "C" {static PyObject *meth_QWindow_icon(PyObject *, PyObject *);}
static PyObject *meth_QWindow_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QIcon*sipRes;

            sipRes = new  ::QIcon(sipCpp->icon());

            return sipConvertFromNewType(sipRes,sipType_QIcon,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_icon, doc_QWindow_icon);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_destroy, "destroy(self)");

extern "C" {static PyObject *meth_QWindow_destroy(PyObject *, PyObject *);}
static PyObject *meth_QWindow_destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            sipCpp->destroy();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_destroy, doc_QWindow_destroy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setKeyboardGrabEnabled, "setKeyboardGrabEnabled(self, bool) -> bool");

extern "C" {static PyObject *meth_QWindow_setKeyboardGrabEnabled(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setKeyboardGrabEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setKeyboardGrabEnabled(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setKeyboardGrabEnabled, doc_QWindow_setKeyboardGrabEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setMouseGrabEnabled, "setMouseGrabEnabled(self, bool) -> bool");

extern "C" {static PyObject *meth_QWindow_setMouseGrabEnabled(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setMouseGrabEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setMouseGrabEnabled(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setMouseGrabEnabled, doc_QWindow_setMouseGrabEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_screen, "screen(self) -> QScreen");

extern "C" {static PyObject *meth_QWindow_screen(PyObject *, PyObject *);}
static PyObject *meth_QWindow_screen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QScreen*sipRes;

            sipRes = sipCpp->screen();

            return sipConvertFromType(sipRes,sipType_QScreen,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_screen, doc_QWindow_screen);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setScreen, "setScreen(self, QScreen)");

extern "C" {static PyObject *meth_QWindow_setScreen(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setScreen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QScreen* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QScreen, &a0))
        {
            sipCpp->setScreen(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setScreen, doc_QWindow_setScreen);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_focusObject, "focusObject(self) -> QObject");

extern "C" {static PyObject *meth_QWindow_focusObject(PyObject *, PyObject *);}
static PyObject *meth_QWindow_focusObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QObject*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QWindow::focusObject() : sipCpp->focusObject());

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_focusObject, doc_QWindow_focusObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_mapToGlobal, "mapToGlobal(self, QPoint) -> QPoint");

extern "C" {static PyObject *meth_QWindow_mapToGlobal(PyObject *, PyObject *);}
static PyObject *meth_QWindow_mapToGlobal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QPoint, &a0))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->mapToGlobal(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_mapToGlobal, doc_QWindow_mapToGlobal);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_mapFromGlobal, "mapFromGlobal(self, QPoint) -> QPoint");

extern "C" {static PyObject *meth_QWindow_mapFromGlobal(PyObject *, PyObject *);}
static PyObject *meth_QWindow_mapFromGlobal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QPoint, &a0))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->mapFromGlobal(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_mapFromGlobal, doc_QWindow_mapFromGlobal);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_cursor, "cursor(self) -> QCursor");

extern "C" {static PyObject *meth_QWindow_cursor(PyObject *, PyObject *);}
static PyObject *meth_QWindow_cursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QCursor*sipRes;

            sipRes = new  ::QCursor(sipCpp->cursor());

            return sipConvertFromNewType(sipRes,sipType_QCursor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_cursor, doc_QWindow_cursor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setCursor, "setCursor(self, Union[QCursor, Qt.CursorShape])");

extern "C" {static PyObject *meth_QWindow_setCursor(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCursor* a0;
        int a0State = 0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWindow, &sipCpp, sipType_QCursor, &a0, &a0State))
        {
            sipCpp->setCursor(*a0);
            sipReleaseType(const_cast< ::QCursor *>(a0),sipType_QCursor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setCursor, doc_QWindow_setCursor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_unsetCursor, "unsetCursor(self)");

extern "C" {static PyObject *meth_QWindow_unsetCursor(PyObject *, PyObject *);}
static PyObject *meth_QWindow_unsetCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            sipCpp->unsetCursor();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_unsetCursor, doc_QWindow_unsetCursor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setVisible, "setVisible(self, bool)");

extern "C" {static PyObject *meth_QWindow_setVisible(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            sipCpp->setVisible(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setVisible, doc_QWindow_setVisible);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_show, "show(self)");

extern "C" {static PyObject *meth_QWindow_show(PyObject *, PyObject *);}
static PyObject *meth_QWindow_show(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->show();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_show, doc_QWindow_show);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_hide, "hide(self)");

extern "C" {static PyObject *meth_QWindow_hide(PyObject *, PyObject *);}
static PyObject *meth_QWindow_hide(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            sipCpp->hide();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_hide, doc_QWindow_hide);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_showMinimized, "showMinimized(self)");

extern "C" {static PyObject *meth_QWindow_showMinimized(PyObject *, PyObject *);}
static PyObject *meth_QWindow_showMinimized(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->showMinimized();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_showMinimized, doc_QWindow_showMinimized);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_showMaximized, "showMaximized(self)");

extern "C" {static PyObject *meth_QWindow_showMaximized(PyObject *, PyObject *);}
static PyObject *meth_QWindow_showMaximized(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->showMaximized();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_showMaximized, doc_QWindow_showMaximized);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_showFullScreen, "showFullScreen(self)");

extern "C" {static PyObject *meth_QWindow_showFullScreen(PyObject *, PyObject *);}
static PyObject *meth_QWindow_showFullScreen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->showFullScreen();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_showFullScreen, doc_QWindow_showFullScreen);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_showNormal, "showNormal(self)");

extern "C" {static PyObject *meth_QWindow_showNormal(PyObject *, PyObject *);}
static PyObject *meth_QWindow_showNormal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->showNormal();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_showNormal, doc_QWindow_showNormal);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_close, "close(self) -> bool");

extern "C" {static PyObject *meth_QWindow_close(PyObject *, PyObject *);}
static PyObject *meth_QWindow_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->close();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_close, doc_QWindow_close);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_raise_, "raise_(self)");

extern "C" {static PyObject *meth_QWindow_raise_(PyObject *, PyObject *);}
static PyObject *meth_QWindow_raise_(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            sipCpp->raise();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_raise_, doc_QWindow_raise_);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_lower, "lower(self)");

extern "C" {static PyObject *meth_QWindow_lower(PyObject *, PyObject *);}
static PyObject *meth_QWindow_lower(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            sipCpp->lower();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_lower, doc_QWindow_lower);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setTitle, "setTitle(self, str)");

extern "C" {static PyObject *meth_QWindow_setTitle(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWindow, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setTitle(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setTitle, doc_QWindow_setTitle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setX, "setX(self, int)");

extern "C" {static PyObject *meth_QWindow_setX(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            sipCpp->setX(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setX, doc_QWindow_setX);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setY, "setY(self, int)");

extern "C" {static PyObject *meth_QWindow_setY(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            sipCpp->setY(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setY, doc_QWindow_setY);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setWidth, "setWidth(self, int)");

extern "C" {static PyObject *meth_QWindow_setWidth(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            sipCpp->setWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setWidth, doc_QWindow_setWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setHeight, "setHeight(self, int)");

extern "C" {static PyObject *meth_QWindow_setHeight(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            sipCpp->setHeight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setHeight, doc_QWindow_setHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setMinimumWidth, "setMinimumWidth(self, int)");

extern "C" {static PyObject *meth_QWindow_setMinimumWidth(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setMinimumWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            sipCpp->setMinimumWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setMinimumWidth, doc_QWindow_setMinimumWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setMinimumHeight, "setMinimumHeight(self, int)");

extern "C" {static PyObject *meth_QWindow_setMinimumHeight(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setMinimumHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            sipCpp->setMinimumHeight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setMinimumHeight, doc_QWindow_setMinimumHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setMaximumWidth, "setMaximumWidth(self, int)");

extern "C" {static PyObject *meth_QWindow_setMaximumWidth(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setMaximumWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            sipCpp->setMaximumWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setMaximumWidth, doc_QWindow_setMaximumWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setMaximumHeight, "setMaximumHeight(self, int)");

extern "C" {static PyObject *meth_QWindow_setMaximumHeight(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setMaximumHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            sipCpp->setMaximumHeight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setMaximumHeight, doc_QWindow_setMaximumHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_alert, "alert(self, int)");

extern "C" {static PyObject *meth_QWindow_alert(PyObject *, PyObject *);}
static PyObject *meth_QWindow_alert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            sipCpp->alert(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_alert, doc_QWindow_alert);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_requestUpdate, "requestUpdate(self)");

extern "C" {static PyObject *meth_QWindow_requestUpdate(PyObject *, PyObject *);}
static PyObject *meth_QWindow_requestUpdate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            sipCpp->requestUpdate();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_requestUpdate, doc_QWindow_requestUpdate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_exposeEvent, "exposeEvent(self, QExposeEvent)");

extern "C" {static PyObject *meth_QWindow_exposeEvent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_exposeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QExposeEvent* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QExposeEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QWindow::exposeEvent(a0) : sipCpp->exposeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_exposeEvent, doc_QWindow_exposeEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_resizeEvent, "resizeEvent(self, QResizeEvent)");

extern "C" {static PyObject *meth_QWindow_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QResizeEvent* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QResizeEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QWindow::resizeEvent(a0) : sipCpp->resizeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_resizeEvent, doc_QWindow_resizeEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_moveEvent, "moveEvent(self, QMoveEvent)");

extern "C" {static PyObject *meth_QWindow_moveEvent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_moveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMoveEvent* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QMoveEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QWindow::moveEvent(a0) : sipCpp->moveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_moveEvent, doc_QWindow_moveEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_focusInEvent, "focusInEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QWindow_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_focusInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFocusEvent* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QFocusEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QWindow::focusInEvent(a0) : sipCpp->focusInEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_focusInEvent, doc_QWindow_focusInEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_focusOutEvent, "focusOutEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QWindow_focusOutEvent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFocusEvent* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QFocusEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QWindow::focusOutEvent(a0) : sipCpp->focusOutEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_focusOutEvent, doc_QWindow_focusOutEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_showEvent, "showEvent(self, QShowEvent)");

extern "C" {static PyObject *meth_QWindow_showEvent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_showEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QShowEvent* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QShowEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QWindow::showEvent(a0) : sipCpp->showEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_showEvent, doc_QWindow_showEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_hideEvent, "hideEvent(self, QHideEvent)");

extern "C" {static PyObject *meth_QWindow_hideEvent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_hideEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QHideEvent* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QHideEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QWindow::hideEvent(a0) : sipCpp->hideEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_hideEvent, doc_QWindow_hideEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QWindow_event(PyObject *, PyObject *);}
static PyObject *meth_QWindow_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QWindow::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_event, doc_QWindow_event);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_keyPressEvent, "keyPressEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QWindow_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QKeyEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QWindow::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_keyPressEvent, doc_QWindow_keyPressEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_keyReleaseEvent, "keyReleaseEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QWindow_keyReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QKeyEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QWindow::keyReleaseEvent(a0) : sipCpp->keyReleaseEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_keyReleaseEvent, doc_QWindow_keyReleaseEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_mousePressEvent, "mousePressEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QWindow_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QWindow::mousePressEvent(a0) : sipCpp->mousePressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_mousePressEvent, doc_QWindow_mousePressEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_mouseReleaseEvent, "mouseReleaseEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QWindow_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QWindow::mouseReleaseEvent(a0) : sipCpp->mouseReleaseEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_mouseReleaseEvent, doc_QWindow_mouseReleaseEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_mouseDoubleClickEvent, "mouseDoubleClickEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QWindow_mouseDoubleClickEvent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QWindow::mouseDoubleClickEvent(a0) : sipCpp->mouseDoubleClickEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_mouseDoubleClickEvent, doc_QWindow_mouseDoubleClickEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_mouseMoveEvent, "mouseMoveEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QWindow_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QWindow::mouseMoveEvent(a0) : sipCpp->mouseMoveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_mouseMoveEvent, doc_QWindow_mouseMoveEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_wheelEvent, "wheelEvent(self, QWheelEvent)");

extern "C" {static PyObject *meth_QWindow_wheelEvent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_wheelEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWheelEvent* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QWheelEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QWindow::wheelEvent(a0) : sipCpp->wheelEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_wheelEvent, doc_QWindow_wheelEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_touchEvent, "touchEvent(self, QTouchEvent)");

extern "C" {static PyObject *meth_QWindow_touchEvent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_touchEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTouchEvent* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QTouchEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QWindow::touchEvent(a0) : sipCpp->touchEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_touchEvent, doc_QWindow_touchEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_tabletEvent, "tabletEvent(self, QTabletEvent)");

extern "C" {static PyObject *meth_QWindow_tabletEvent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_tabletEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTabletEvent* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QTabletEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QWindow::tabletEvent(a0) : sipCpp->tabletEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_tabletEvent, doc_QWindow_tabletEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_visibility, "visibility(self) -> QWindow.Visibility");

extern "C" {static PyObject *meth_QWindow_visibility(PyObject *, PyObject *);}
static PyObject *meth_QWindow_visibility(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QWindow::Visibility sipRes;

            sipRes = sipCpp->visibility();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QWindow_Visibility);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_visibility, doc_QWindow_visibility);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setVisibility, "setVisibility(self, QWindow.Visibility)");

extern "C" {static PyObject *meth_QWindow_setVisibility(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setVisibility(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWindow::Visibility a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWindow, &sipCpp, sipType_QWindow_Visibility, &a0))
        {
            sipCpp->setVisibility(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setVisibility, doc_QWindow_setVisibility);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_opacity, "opacity(self) -> float");

extern "C" {static PyObject *meth_QWindow_opacity(PyObject *, PyObject *);}
static PyObject *meth_QWindow_opacity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->opacity();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_opacity, doc_QWindow_opacity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setMask, "setMask(self, QRegion)");

extern "C" {static PyObject *meth_QWindow_setMask(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegion* a0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QRegion, &a0))
        {
            sipCpp->setMask(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setMask, doc_QWindow_setMask);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_mask, "mask(self) -> QRegion");

extern "C" {static PyObject *meth_QWindow_mask(PyObject *, PyObject *);}
static PyObject *meth_QWindow_mask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::QRegion*sipRes;

            sipRes = new  ::QRegion(sipCpp->mask());

            return sipConvertFromNewType(sipRes,sipType_QRegion,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_mask, doc_QWindow_mask);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_fromWinId, "fromWinId(sip.voidptr) -> QWindow");

extern "C" {static PyObject *meth_QWindow_fromWinId(PyObject *, PyObject *);}
static PyObject *meth_QWindow_fromWinId(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::WId* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_quintptr,&a0, &a0State))
        {
             ::QWindow*sipRes;

            sipRes =  ::QWindow::fromWinId(*a0);
            sipReleaseType(a0,sipType_quintptr,a0State);

            return sipConvertFromType(sipRes,sipType_QWindow,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_fromWinId, doc_QWindow_fromWinId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setFlag, "setFlag(self, Qt.WindowType, on: bool = True)");

extern "C" {static PyObject *meth_QWindow_setFlag(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWindow_setFlag(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::WindowType a0;
        bool a1 = 1;
         ::QWindow *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_on,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE|b", &sipSelf, sipType_QWindow, &sipCpp, sipType_Qt_WindowType, &a0, &a1))
        {
            sipCpp->setFlag(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setFlag, doc_QWindow_setFlag);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_windowStates, "windowStates(self) -> Qt.WindowStates");

extern "C" {static PyObject *meth_QWindow_windowStates(PyObject *, PyObject *);}
static PyObject *meth_QWindow_windowStates(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
             ::Qt::WindowStates*sipRes;

            sipRes = new  ::Qt::WindowStates(sipCpp->windowStates());

            return sipConvertFromNewType(sipRes,sipType_Qt_WindowStates,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_windowStates, doc_QWindow_windowStates);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWindow_setWindowStates, "setWindowStates(self, Union[Qt.WindowStates, Qt.WindowState])");

extern "C" {static PyObject *meth_QWindow_setWindowStates(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setWindowStates(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::WindowStates* a0;
        int a0State = 0;
         ::QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWindow, &sipCpp, sipType_Qt_WindowStates, &a0, &a0State))
        {
            sipCpp->setWindowStates(*a0);
            sipReleaseType(a0,sipType_Qt_WindowStates,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setWindowStates, doc_QWindow_setWindowStates);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QWindow(void *, const sipTypeDef *);}
static void *cast_QWindow(void *sipCppV, const sipTypeDef *targetType)
{
     ::QWindow *sipCpp = reinterpret_cast< ::QWindow *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QSurface)
        return static_cast< ::QSurface *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWindow(void *, int);}
static void release_QWindow(void *sipCppV, int)
{
     ::QWindow *sipCpp = reinterpret_cast< ::QWindow *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QWindow(sipSimpleWrapper *);}
static void dealloc_QWindow(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQWindow *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QWindow(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QWindow(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWindow(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQWindow *sipCpp = SIP_NULLPTR;

    {
         ::QScreen* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_screen,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J8", sipType_QScreen, &a0))
        {
            sipCpp = new sipQWindow(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QWindow* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "JH", sipType_QWindow, &a0, sipOwner))
        {
            sipCpp = new sipQWindow(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWindow[] = {{25, 0, 0}, {268, 255, 1}};


static PyMethodDef methods_QWindow[] = {
    {SIP_MLNAME_CAST(sipName_alert), meth_QWindow_alert, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_alert)},
    {SIP_MLNAME_CAST(sipName_baseSize), meth_QWindow_baseSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_baseSize)},
    {SIP_MLNAME_CAST(sipName_close), meth_QWindow_close, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_close)},
    {SIP_MLNAME_CAST(sipName_contentOrientation), meth_QWindow_contentOrientation, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_contentOrientation)},
    {SIP_MLNAME_CAST(sipName_create), meth_QWindow_create, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_create)},
    {SIP_MLNAME_CAST(sipName_cursor), meth_QWindow_cursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_cursor)},
    {SIP_MLNAME_CAST(sipName_destroy), meth_QWindow_destroy, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_destroy)},
    {SIP_MLNAME_CAST(sipName_devicePixelRatio), meth_QWindow_devicePixelRatio, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_devicePixelRatio)},
    {SIP_MLNAME_CAST(sipName_event), meth_QWindow_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_event)},
    {SIP_MLNAME_CAST(sipName_exposeEvent), meth_QWindow_exposeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_exposeEvent)},
    {SIP_MLNAME_CAST(sipName_filePath), meth_QWindow_filePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_filePath)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QWindow_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_flags)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), meth_QWindow_focusInEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_focusInEvent)},
    {SIP_MLNAME_CAST(sipName_focusObject), meth_QWindow_focusObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_focusObject)},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), meth_QWindow_focusOutEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_focusOutEvent)},
    {SIP_MLNAME_CAST(sipName_format), meth_QWindow_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_format)},
    {SIP_MLNAME_CAST(sipName_frameGeometry), meth_QWindow_frameGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_frameGeometry)},
    {SIP_MLNAME_CAST(sipName_frameMargins), meth_QWindow_frameMargins, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_frameMargins)},
    {SIP_MLNAME_CAST(sipName_framePosition), meth_QWindow_framePosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_framePosition)},
    {SIP_MLNAME_CAST(sipName_fromWinId), meth_QWindow_fromWinId, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_fromWinId)},
    {SIP_MLNAME_CAST(sipName_geometry), meth_QWindow_geometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_geometry)},
    {SIP_MLNAME_CAST(sipName_height), meth_QWindow_height, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_height)},
    {SIP_MLNAME_CAST(sipName_hide), meth_QWindow_hide, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_hide)},
    {SIP_MLNAME_CAST(sipName_hideEvent), meth_QWindow_hideEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_hideEvent)},
    {SIP_MLNAME_CAST(sipName_icon), meth_QWindow_icon, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_icon)},
    {SIP_MLNAME_CAST(sipName_isActive), meth_QWindow_isActive, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_isActive)},
    {SIP_MLNAME_CAST(sipName_isAncestorOf), SIP_MLMETH_CAST(meth_QWindow_isAncestorOf), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWindow_isAncestorOf)},
    {SIP_MLNAME_CAST(sipName_isExposed), meth_QWindow_isExposed, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_isExposed)},
    {SIP_MLNAME_CAST(sipName_isModal), meth_QWindow_isModal, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_isModal)},
    {SIP_MLNAME_CAST(sipName_isTopLevel), meth_QWindow_isTopLevel, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_isTopLevel)},
    {SIP_MLNAME_CAST(sipName_isVisible), meth_QWindow_isVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_isVisible)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QWindow_keyPressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), meth_QWindow_keyReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_keyReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_lower), meth_QWindow_lower, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_lower)},
    {SIP_MLNAME_CAST(sipName_mapFromGlobal), meth_QWindow_mapFromGlobal, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_mapFromGlobal)},
    {SIP_MLNAME_CAST(sipName_mapToGlobal), meth_QWindow_mapToGlobal, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_mapToGlobal)},
    {SIP_MLNAME_CAST(sipName_mask), meth_QWindow_mask, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_mask)},
    {SIP_MLNAME_CAST(sipName_maximumHeight), meth_QWindow_maximumHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_maximumHeight)},
    {SIP_MLNAME_CAST(sipName_maximumSize), meth_QWindow_maximumSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_maximumSize)},
    {SIP_MLNAME_CAST(sipName_maximumWidth), meth_QWindow_maximumWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_maximumWidth)},
    {SIP_MLNAME_CAST(sipName_minimumHeight), meth_QWindow_minimumHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_minimumHeight)},
    {SIP_MLNAME_CAST(sipName_minimumSize), meth_QWindow_minimumSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_minimumSize)},
    {SIP_MLNAME_CAST(sipName_minimumWidth), meth_QWindow_minimumWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_minimumWidth)},
    {SIP_MLNAME_CAST(sipName_modality), meth_QWindow_modality, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_modality)},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), meth_QWindow_mouseDoubleClickEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_mouseDoubleClickEvent)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_QWindow_mouseMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QWindow_mousePressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QWindow_mouseReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_moveEvent), meth_QWindow_moveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_moveEvent)},
    {SIP_MLNAME_CAST(sipName_opacity), meth_QWindow_opacity, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_opacity)},
    {SIP_MLNAME_CAST(sipName_parent), meth_QWindow_parent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_parent)},
    {SIP_MLNAME_CAST(sipName_position), meth_QWindow_position, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_position)},
    {SIP_MLNAME_CAST(sipName_raise_), meth_QWindow_raise_, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_raise_)},
    {SIP_MLNAME_CAST(sipName_reportContentOrientationChange), meth_QWindow_reportContentOrientationChange, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_reportContentOrientationChange)},
    {SIP_MLNAME_CAST(sipName_requestActivate), meth_QWindow_requestActivate, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_requestActivate)},
    {SIP_MLNAME_CAST(sipName_requestUpdate), meth_QWindow_requestUpdate, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_requestUpdate)},
    {SIP_MLNAME_CAST(sipName_requestedFormat), meth_QWindow_requestedFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_requestedFormat)},
    {SIP_MLNAME_CAST(sipName_resize), meth_QWindow_resize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_resize)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QWindow_resizeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_screen), meth_QWindow_screen, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_screen)},
    {SIP_MLNAME_CAST(sipName_setBaseSize), meth_QWindow_setBaseSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setBaseSize)},
    {SIP_MLNAME_CAST(sipName_setCursor), meth_QWindow_setCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setCursor)},
    {SIP_MLNAME_CAST(sipName_setFilePath), meth_QWindow_setFilePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setFilePath)},
    {SIP_MLNAME_CAST(sipName_setFlag), SIP_MLMETH_CAST(meth_QWindow_setFlag), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWindow_setFlag)},
    {SIP_MLNAME_CAST(sipName_setFlags), meth_QWindow_setFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setFlags)},
    {SIP_MLNAME_CAST(sipName_setFormat), meth_QWindow_setFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setFormat)},
    {SIP_MLNAME_CAST(sipName_setFramePosition), meth_QWindow_setFramePosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setFramePosition)},
    {SIP_MLNAME_CAST(sipName_setGeometry), meth_QWindow_setGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setGeometry)},
    {SIP_MLNAME_CAST(sipName_setHeight), meth_QWindow_setHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setHeight)},
    {SIP_MLNAME_CAST(sipName_setIcon), meth_QWindow_setIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setIcon)},
    {SIP_MLNAME_CAST(sipName_setKeyboardGrabEnabled), meth_QWindow_setKeyboardGrabEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setKeyboardGrabEnabled)},
    {SIP_MLNAME_CAST(sipName_setMask), meth_QWindow_setMask, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setMask)},
    {SIP_MLNAME_CAST(sipName_setMaximumHeight), meth_QWindow_setMaximumHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setMaximumHeight)},
    {SIP_MLNAME_CAST(sipName_setMaximumSize), meth_QWindow_setMaximumSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setMaximumSize)},
    {SIP_MLNAME_CAST(sipName_setMaximumWidth), meth_QWindow_setMaximumWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setMaximumWidth)},
    {SIP_MLNAME_CAST(sipName_setMinimumHeight), meth_QWindow_setMinimumHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setMinimumHeight)},
    {SIP_MLNAME_CAST(sipName_setMinimumSize), meth_QWindow_setMinimumSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setMinimumSize)},
    {SIP_MLNAME_CAST(sipName_setMinimumWidth), meth_QWindow_setMinimumWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setMinimumWidth)},
    {SIP_MLNAME_CAST(sipName_setModality), meth_QWindow_setModality, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setModality)},
    {SIP_MLNAME_CAST(sipName_setMouseGrabEnabled), meth_QWindow_setMouseGrabEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setMouseGrabEnabled)},
    {SIP_MLNAME_CAST(sipName_setOpacity), meth_QWindow_setOpacity, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setOpacity)},
    {SIP_MLNAME_CAST(sipName_setParent), meth_QWindow_setParent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setParent)},
    {SIP_MLNAME_CAST(sipName_setPosition), meth_QWindow_setPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setPosition)},
    {SIP_MLNAME_CAST(sipName_setScreen), meth_QWindow_setScreen, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setScreen)},
    {SIP_MLNAME_CAST(sipName_setSizeIncrement), meth_QWindow_setSizeIncrement, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setSizeIncrement)},
    {SIP_MLNAME_CAST(sipName_setSurfaceType), meth_QWindow_setSurfaceType, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setSurfaceType)},
    {SIP_MLNAME_CAST(sipName_setTitle), meth_QWindow_setTitle, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setTitle)},
    {SIP_MLNAME_CAST(sipName_setTransientParent), meth_QWindow_setTransientParent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setTransientParent)},
    {SIP_MLNAME_CAST(sipName_setVisibility), meth_QWindow_setVisibility, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setVisibility)},
    {SIP_MLNAME_CAST(sipName_setVisible), meth_QWindow_setVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setVisible)},
    {SIP_MLNAME_CAST(sipName_setWidth), meth_QWindow_setWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setWidth)},
    {SIP_MLNAME_CAST(sipName_setWindowState), meth_QWindow_setWindowState, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setWindowState)},
    {SIP_MLNAME_CAST(sipName_setWindowStates), meth_QWindow_setWindowStates, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setWindowStates)},
    {SIP_MLNAME_CAST(sipName_setX), meth_QWindow_setX, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setX)},
    {SIP_MLNAME_CAST(sipName_setY), meth_QWindow_setY, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setY)},
    {SIP_MLNAME_CAST(sipName_show), meth_QWindow_show, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_show)},
    {SIP_MLNAME_CAST(sipName_showEvent), meth_QWindow_showEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_showEvent)},
    {SIP_MLNAME_CAST(sipName_showFullScreen), meth_QWindow_showFullScreen, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_showFullScreen)},
    {SIP_MLNAME_CAST(sipName_showMaximized), meth_QWindow_showMaximized, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_showMaximized)},
    {SIP_MLNAME_CAST(sipName_showMinimized), meth_QWindow_showMinimized, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_showMinimized)},
    {SIP_MLNAME_CAST(sipName_showNormal), meth_QWindow_showNormal, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_showNormal)},
    {SIP_MLNAME_CAST(sipName_size), meth_QWindow_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_size)},
    {SIP_MLNAME_CAST(sipName_sizeIncrement), meth_QWindow_sizeIncrement, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_sizeIncrement)},
    {SIP_MLNAME_CAST(sipName_surfaceType), meth_QWindow_surfaceType, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_surfaceType)},
    {SIP_MLNAME_CAST(sipName_tabletEvent), meth_QWindow_tabletEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_tabletEvent)},
    {SIP_MLNAME_CAST(sipName_title), meth_QWindow_title, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_title)},
    {SIP_MLNAME_CAST(sipName_touchEvent), meth_QWindow_touchEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_touchEvent)},
    {SIP_MLNAME_CAST(sipName_transientParent), meth_QWindow_transientParent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_transientParent)},
    {SIP_MLNAME_CAST(sipName_type), meth_QWindow_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_type)},
    {SIP_MLNAME_CAST(sipName_unsetCursor), meth_QWindow_unsetCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_unsetCursor)},
    {SIP_MLNAME_CAST(sipName_visibility), meth_QWindow_visibility, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_visibility)},
    {SIP_MLNAME_CAST(sipName_wheelEvent), meth_QWindow_wheelEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_wheelEvent)},
    {SIP_MLNAME_CAST(sipName_width), meth_QWindow_width, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_width)},
    {SIP_MLNAME_CAST(sipName_winId), meth_QWindow_winId, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_winId)},
    {SIP_MLNAME_CAST(sipName_windowState), meth_QWindow_windowState, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_windowState)},
    {SIP_MLNAME_CAST(sipName_windowStates), meth_QWindow_windowStates, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_windowStates)},
    {SIP_MLNAME_CAST(sipName_x), meth_QWindow_x, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_x)},
    {SIP_MLNAME_CAST(sipName_y), meth_QWindow_y, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_y)}
};

static sipEnumMemberDef enummembers_QWindow[] = {
    {sipName_AutomaticVisibility, static_cast<int>( ::QWindow::AutomaticVisibility), 377},
    {sipName_ExcludeTransients, static_cast<int>( ::QWindow::ExcludeTransients), 376},
    {sipName_FullScreen, static_cast<int>( ::QWindow::FullScreen), 377},
    {sipName_Hidden, static_cast<int>( ::QWindow::Hidden), 377},
    {sipName_IncludeTransients, static_cast<int>( ::QWindow::IncludeTransients), 376},
    {sipName_Maximized, static_cast<int>( ::QWindow::Maximized), 377},
    {sipName_Minimized, static_cast<int>( ::QWindow::Minimized), 377},
    {sipName_Windowed, static_cast<int>( ::QWindow::Windowed), 377},
};

PyDoc_STRVAR(doc_QWindow, "\1QWindow(screen: QScreen = None)\n"
"QWindow(QWindow)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QWindow[] = {
    {"opacityChanged(qreal)", "\1opacityChanged(self, float)", SIP_NULLPTR, SIP_NULLPTR},
    {"activeChanged()", "\1activeChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"visibilityChanged(QWindow::Visibility)", "\1visibilityChanged(self, QWindow.Visibility)", SIP_NULLPTR, SIP_NULLPTR},
    {"windowTitleChanged(QString)", "\1windowTitleChanged(self, str)", SIP_NULLPTR, SIP_NULLPTR},
    {"focusObjectChanged(QObject*)", "\1focusObjectChanged(self, QObject)", SIP_NULLPTR, SIP_NULLPTR},
    {"contentOrientationChanged(Qt::ScreenOrientation)", "\1contentOrientationChanged(self, Qt.ScreenOrientation)", SIP_NULLPTR, SIP_NULLPTR},
    {"visibleChanged(bool)", "\1visibleChanged(self, bool)", SIP_NULLPTR, SIP_NULLPTR},
    {"maximumHeightChanged(int)", "\1maximumHeightChanged(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"maximumWidthChanged(int)", "\1maximumWidthChanged(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"minimumHeightChanged(int)", "\1minimumHeightChanged(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"minimumWidthChanged(int)", "\1minimumWidthChanged(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"heightChanged(int)", "\1heightChanged(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"widthChanged(int)", "\1widthChanged(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"yChanged(int)", "\1yChanged(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"xChanged(int)", "\1xChanged(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"windowStateChanged(Qt::WindowState)", "\1windowStateChanged(self, Qt.WindowState)", SIP_NULLPTR, SIP_NULLPTR},
    {"modalityChanged(Qt::WindowModality)", "\1modalityChanged(self, Qt.WindowModality)", SIP_NULLPTR, SIP_NULLPTR},
    {"screenChanged(QScreen*)", "\1screenChanged(self, QScreen)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QWindow = {
    & ::QWindow::staticMetaObject,
    0,
    signals_QWindow,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QWindow = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QWindow,
        {SIP_NULLPTR},
        &plugin_QWindow
    },
    {
        sipNameNr_QWindow,
        {0, 0, 1},
        118, methods_QWindow,
        8, enummembers_QWindow,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QWindow,
    -1,
    -1,
    supers_QWindow,
    SIP_NULLPTR,
    init_type_QWindow,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QWindow,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QWindow,
    cast_QWindow,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 93624 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 93628 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static long slot_QPainter_PixmapFragmentHints___hash__(PyObject *);}
static long slot_QPainter_PixmapFragmentHints___hash__(PyObject *sipSelf)
{
     ::QPainter::PixmapFragmentHints *sipCpp = reinterpret_cast< ::QPainter::PixmapFragmentHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPainter_PixmapFragmentHints));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QPainter::PixmapFragmentHints::Int();
#line 93646 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QPainter_PixmapFragmentHints___bool__(PyObject *);}
static int slot_QPainter_PixmapFragmentHints___bool__(PyObject *sipSelf)
{
     ::QPainter::PixmapFragmentHints *sipCpp = reinterpret_cast< ::QPainter::PixmapFragmentHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPainter_PixmapFragmentHints));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QPainter::PixmapFragmentHints::Int() != 0);
#line 93671 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QPainter_PixmapFragmentHints___ne__(PyObject *,PyObject *);}
static PyObject *slot_QPainter_PixmapFragmentHints___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPainter::PixmapFragmentHints *sipCpp = reinterpret_cast< ::QPainter::PixmapFragmentHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPainter_PixmapFragmentHints));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainter::PixmapFragmentHints* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QPainter_PixmapFragmentHints, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QPainter::PixmapFragmentHints::Int() != a0->operator QPainter::PixmapFragmentHints::Int());
#line 93701 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
            sipReleaseType(const_cast< ::QPainter::PixmapFragmentHints *>(a0),sipType_QPainter_PixmapFragmentHints,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QPainter_PixmapFragmentHints, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QPainter_PixmapFragmentHints___eq__(PyObject *,PyObject *);}
static PyObject *slot_QPainter_PixmapFragmentHints___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPainter::PixmapFragmentHints *sipCpp = reinterpret_cast< ::QPainter::PixmapFragmentHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPainter_PixmapFragmentHints));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainter::PixmapFragmentHints* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QPainter_PixmapFragmentHints, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QPainter::PixmapFragmentHints::Int() == a0->operator QPainter::PixmapFragmentHints::Int());
#line 93737 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
            sipReleaseType(const_cast< ::QPainter::PixmapFragmentHints *>(a0),sipType_QPainter_PixmapFragmentHints,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QPainter_PixmapFragmentHints, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QPainter_PixmapFragmentHints___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QPainter_PixmapFragmentHints___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QPainter_PixmapFragmentHints)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QPainter::PixmapFragmentHints *sipCpp = reinterpret_cast< ::QPainter::PixmapFragmentHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPainter_PixmapFragmentHints));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QPainter::PixmapFragmentHints(*sipCpp ^ a0);
#line 93776 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QPainter_PixmapFragmentHints___xor__(PyObject *,PyObject *);}
static PyObject *slot_QPainter_PixmapFragmentHints___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPainter::PixmapFragmentHints* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QPainter_PixmapFragmentHints, &a0, &a0State, &a1))
        {
             ::QPainter::PixmapFragmentHints*sipRes;

            sipRes = new  ::QPainter::PixmapFragmentHints((*a0 ^ a1));
            sipReleaseType(a0,sipType_QPainter_PixmapFragmentHints,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPainter_PixmapFragmentHints,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QPainter_PixmapFragmentHints___ior__(PyObject *,PyObject *);}
static PyObject *slot_QPainter_PixmapFragmentHints___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QPainter_PixmapFragmentHints)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QPainter::PixmapFragmentHints *sipCpp = reinterpret_cast< ::QPainter::PixmapFragmentHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPainter_PixmapFragmentHints));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QPainter::PixmapFragmentHints(*sipCpp | a0);
#line 93848 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QPainter_PixmapFragmentHints___or__(PyObject *,PyObject *);}
static PyObject *slot_QPainter_PixmapFragmentHints___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPainter::PixmapFragmentHints* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QPainter_PixmapFragmentHints, &a0, &a0State, &a1))
        {
             ::QPainter::PixmapFragmentHints*sipRes;

            sipRes = new  ::QPainter::PixmapFragmentHints((*a0 | a1));
            sipReleaseType(a0,sipType_QPainter_PixmapFragmentHints,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPainter_PixmapFragmentHints,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QPainter_PixmapFragmentHints___iand__(PyObject *,PyObject *);}
static PyObject *slot_QPainter_PixmapFragmentHints___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QPainter_PixmapFragmentHints)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QPainter::PixmapFragmentHints *sipCpp = reinterpret_cast< ::QPainter::PixmapFragmentHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPainter_PixmapFragmentHints));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QPainter::PixmapFragmentHints::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QPainter_PixmapFragmentHints___and__(PyObject *,PyObject *);}
static PyObject *slot_QPainter_PixmapFragmentHints___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPainter::PixmapFragmentHints* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QPainter_PixmapFragmentHints, &a0, &a0State, &a1))
        {
             ::QPainter::PixmapFragmentHints*sipRes;

            sipRes = new  ::QPainter::PixmapFragmentHints((*a0 & a1));
            sipReleaseType(a0,sipType_QPainter_PixmapFragmentHints,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPainter_PixmapFragmentHints,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QPainter_PixmapFragmentHints___invert__(PyObject *);}
static PyObject *slot_QPainter_PixmapFragmentHints___invert__(PyObject *sipSelf)
{
     ::QPainter::PixmapFragmentHints *sipCpp = reinterpret_cast< ::QPainter::PixmapFragmentHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPainter_PixmapFragmentHints));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QPainter::PixmapFragmentHints*sipRes;

            sipRes = new  ::QPainter::PixmapFragmentHints(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QPainter_PixmapFragmentHints,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QPainter_PixmapFragmentHints___int__(PyObject *);}
static PyObject *slot_QPainter_PixmapFragmentHints___int__(PyObject *sipSelf)
{
     ::QPainter::PixmapFragmentHints *sipCpp = reinterpret_cast< ::QPainter::PixmapFragmentHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPainter_PixmapFragmentHints));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPainter_PixmapFragmentHints(void *, int);}
static void release_QPainter_PixmapFragmentHints(void *sipCppV, int)
{
    delete reinterpret_cast< ::QPainter::PixmapFragmentHints *>(sipCppV);
}


extern "C" {static void assign_QPainter_PixmapFragmentHints(void *, SIP_SSIZE_T, void *);}
static void assign_QPainter_PixmapFragmentHints(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QPainter::PixmapFragmentHints *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QPainter::PixmapFragmentHints *>(sipSrc);
}


extern "C" {static void *array_QPainter_PixmapFragmentHints(SIP_SSIZE_T);}
static void *array_QPainter_PixmapFragmentHints(SIP_SSIZE_T sipNrElem)
{
    return new  ::QPainter::PixmapFragmentHints[sipNrElem];
}


extern "C" {static void *copy_QPainter_PixmapFragmentHints(const void *, SIP_SSIZE_T);}
static void *copy_QPainter_PixmapFragmentHints(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QPainter::PixmapFragmentHints(reinterpret_cast<const  ::QPainter::PixmapFragmentHints *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPainter_PixmapFragmentHints(sipSimpleWrapper *);}
static void dealloc_QPainter_PixmapFragmentHints(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPainter_PixmapFragmentHints(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QPainter_PixmapFragmentHints(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPainter_PixmapFragmentHints(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QPainter::PixmapFragmentHints *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QPainter::PixmapFragmentHints();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QPainter::PixmapFragmentHints(a0);

            return sipCpp;
        }
    }

    {
        const  ::QPainter::PixmapFragmentHints* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QPainter_PixmapFragmentHints, &a0, &a0State))
        {
            sipCpp = new  ::QPainter::PixmapFragmentHints(*a0);
            sipReleaseType(const_cast< ::QPainter::PixmapFragmentHints *>(a0),sipType_QPainter_PixmapFragmentHints,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QPainter_PixmapFragmentHints(PyObject *, void **, int *, PyObject *);}
static int convertTo_QPainter_PixmapFragmentHints(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QPainter::PixmapFragmentHints **sipCppPtr = reinterpret_cast< ::QPainter::PixmapFragmentHints **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QPainter::PixmapFragmentHints is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QPainter_PixmapFragmentHint)) ||
            sipCanConvertToType(sipPy, sipType_QPainter_PixmapFragmentHints, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QPainter_PixmapFragmentHint)))
{
    *sipCppPtr = new QPainter::PixmapFragmentHints(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QPainter::PixmapFragmentHints *>(sipConvertToType(sipPy, sipType_QPainter_PixmapFragmentHints, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 94116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QPainter_PixmapFragmentHints[] = {
    {(void *)slot_QPainter_PixmapFragmentHints___hash__, hash_slot},
    {(void *)slot_QPainter_PixmapFragmentHints___bool__, bool_slot},
    {(void *)slot_QPainter_PixmapFragmentHints___ne__, ne_slot},
    {(void *)slot_QPainter_PixmapFragmentHints___eq__, eq_slot},
    {(void *)slot_QPainter_PixmapFragmentHints___ixor__, ixor_slot},
    {(void *)slot_QPainter_PixmapFragmentHints___xor__, xor_slot},
    {(void *)slot_QPainter_PixmapFragmentHints___ior__, ior_slot},
    {(void *)slot_QPainter_PixmapFragmentHints___or__, or_slot},
    {(void *)slot_QPainter_PixmapFragmentHints___iand__, iand_slot},
    {(void *)slot_QPainter_PixmapFragmentHints___and__, and_slot},
    {(void *)slot_QPainter_PixmapFragmentHints___invert__, invert_slot},
    {(void *)slot_QPainter_PixmapFragmentHints___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QPainter_PixmapFragmentHints, "\1QPainter.PixmapFragmentHints()\n"
"QPainter.PixmapFragmentHints(Union[QPainter.PixmapFragmentHints, QPainter.PixmapFragmentHint])\n"
"QPainter.PixmapFragmentHints(QPainter.PixmapFragmentHints)");


static pyqt5ClassPluginDef plugin_QPainter_PixmapFragmentHints = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QPainter_PixmapFragmentHints = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPainter__PixmapFragmentHints,
        {SIP_NULLPTR},
        &plugin_QPainter_PixmapFragmentHints
    },
    {
        sipNameNr_PixmapFragmentHints,
        {203, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPainter_PixmapFragmentHints,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QPainter_PixmapFragmentHints,
    init_type_QPainter_PixmapFragmentHints,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QPainter_PixmapFragmentHints,
    assign_QPainter_PixmapFragmentHints,
    array_QPainter_PixmapFragmentHints,
    copy_QPainter_PixmapFragmentHints,
    release_QPainter_PixmapFragmentHints,
    SIP_NULLPTR,
    convertTo_QPainter_PixmapFragmentHints,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 497 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 94206 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 94210 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 94213 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


PyDoc_STRVAR(doc_QPainter_PixmapFragment_create, "create(Union[QPointF, QPoint], QRectF, scaleX: float = 1, scaleY: float = 1, rotation: float = 0, opacity: float = 1) -> QPainter.PixmapFragment");

extern "C" {static PyObject *meth_QPainter_PixmapFragment_create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_PixmapFragment_create(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QRectF* a1;
         ::qreal a2 = 1;
         ::qreal a3 = 1;
         ::qreal a4 = 0;
         ::qreal a5 = 1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_scaleX,
            sipName_scaleY,
            sipName_rotation,
            sipName_opacity,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1J9|dddd", sipType_QPointF, &a0, &a0State, sipType_QRectF, &a1, &a2, &a3, &a4, &a5))
        {
             ::QPainter::PixmapFragment*sipRes;

            sipRes = new  ::QPainter::PixmapFragment( ::QPainter::PixmapFragment::create(*a0,*a1,a2,a3,a4,a5));
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPainter_PixmapFragment,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PixmapFragment, sipName_create, doc_QPainter_PixmapFragment_create);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPainter_PixmapFragment(void *, int);}
static void release_QPainter_PixmapFragment(void *sipCppV, int)
{
    delete reinterpret_cast< ::QPainter::PixmapFragment *>(sipCppV);
}


extern "C" {static void assign_QPainter_PixmapFragment(void *, SIP_SSIZE_T, void *);}
static void assign_QPainter_PixmapFragment(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QPainter::PixmapFragment *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QPainter::PixmapFragment *>(sipSrc);
}


extern "C" {static void *array_QPainter_PixmapFragment(SIP_SSIZE_T);}
static void *array_QPainter_PixmapFragment(SIP_SSIZE_T sipNrElem)
{
    return new  ::QPainter::PixmapFragment[sipNrElem];
}


extern "C" {static void *copy_QPainter_PixmapFragment(const void *, SIP_SSIZE_T);}
static void *copy_QPainter_PixmapFragment(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QPainter::PixmapFragment(reinterpret_cast<const  ::QPainter::PixmapFragment *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPainter_PixmapFragment(sipSimpleWrapper *);}
static void dealloc_QPainter_PixmapFragment(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPainter_PixmapFragment(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QPainter_PixmapFragment(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPainter_PixmapFragment(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QPainter::PixmapFragment *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QPainter::PixmapFragment();

            return sipCpp;
        }
    }

    {
        const  ::QPainter::PixmapFragment* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QPainter_PixmapFragment, &a0))
        {
            sipCpp = new  ::QPainter::PixmapFragment(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QPainter_PixmapFragment[] = {
    {SIP_MLNAME_CAST(sipName_create), SIP_MLMETH_CAST(meth_QPainter_PixmapFragment_create), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPainter_PixmapFragment_create)}
};


extern "C" {static PyObject *varget_QPainter_PixmapFragment_height(void *, PyObject *, PyObject *);}
static PyObject *varget_QPainter_PixmapFragment_height(void *sipSelf, PyObject *, PyObject *)
{
     ::qreal sipVal;
     ::QPainter::PixmapFragment *sipCpp = reinterpret_cast< ::QPainter::PixmapFragment *>(sipSelf);

    sipVal = sipCpp->height;

    return PyFloat_FromDouble(sipVal);
}


extern "C" {static int varset_QPainter_PixmapFragment_height(void *, PyObject *, PyObject *);}
static int varset_QPainter_PixmapFragment_height(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::qreal sipVal;
     ::QPainter::PixmapFragment *sipCpp = reinterpret_cast< ::QPainter::PixmapFragment *>(sipSelf);

    sipVal = PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->height = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QPainter_PixmapFragment_opacity(void *, PyObject *, PyObject *);}
static PyObject *varget_QPainter_PixmapFragment_opacity(void *sipSelf, PyObject *, PyObject *)
{
     ::qreal sipVal;
     ::QPainter::PixmapFragment *sipCpp = reinterpret_cast< ::QPainter::PixmapFragment *>(sipSelf);

    sipVal = sipCpp->opacity;

    return PyFloat_FromDouble(sipVal);
}


extern "C" {static int varset_QPainter_PixmapFragment_opacity(void *, PyObject *, PyObject *);}
static int varset_QPainter_PixmapFragment_opacity(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::qreal sipVal;
     ::QPainter::PixmapFragment *sipCpp = reinterpret_cast< ::QPainter::PixmapFragment *>(sipSelf);

    sipVal = PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->opacity = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QPainter_PixmapFragment_rotation(void *, PyObject *, PyObject *);}
static PyObject *varget_QPainter_PixmapFragment_rotation(void *sipSelf, PyObject *, PyObject *)
{
     ::qreal sipVal;
     ::QPainter::PixmapFragment *sipCpp = reinterpret_cast< ::QPainter::PixmapFragment *>(sipSelf);

    sipVal = sipCpp->rotation;

    return PyFloat_FromDouble(sipVal);
}


extern "C" {static int varset_QPainter_PixmapFragment_rotation(void *, PyObject *, PyObject *);}
static int varset_QPainter_PixmapFragment_rotation(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::qreal sipVal;
     ::QPainter::PixmapFragment *sipCpp = reinterpret_cast< ::QPainter::PixmapFragment *>(sipSelf);

    sipVal = PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->rotation = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QPainter_PixmapFragment_scaleX(void *, PyObject *, PyObject *);}
static PyObject *varget_QPainter_PixmapFragment_scaleX(void *sipSelf, PyObject *, PyObject *)
{
     ::qreal sipVal;
     ::QPainter::PixmapFragment *sipCpp = reinterpret_cast< ::QPainter::PixmapFragment *>(sipSelf);

    sipVal = sipCpp->scaleX;

    return PyFloat_FromDouble(sipVal);
}


extern "C" {static int varset_QPainter_PixmapFragment_scaleX(void *, PyObject *, PyObject *);}
static int varset_QPainter_PixmapFragment_scaleX(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::qreal sipVal;
     ::QPainter::PixmapFragment *sipCpp = reinterpret_cast< ::QPainter::PixmapFragment *>(sipSelf);

    sipVal = PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->scaleX = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QPainter_PixmapFragment_scaleY(void *, PyObject *, PyObject *);}
static PyObject *varget_QPainter_PixmapFragment_scaleY(void *sipSelf, PyObject *, PyObject *)
{
     ::qreal sipVal;
     ::QPainter::PixmapFragment *sipCpp = reinterpret_cast< ::QPainter::PixmapFragment *>(sipSelf);

    sipVal = sipCpp->scaleY;

    return PyFloat_FromDouble(sipVal);
}


extern "C" {static int varset_QPainter_PixmapFragment_scaleY(void *, PyObject *, PyObject *);}
static int varset_QPainter_PixmapFragment_scaleY(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::qreal sipVal;
     ::QPainter::PixmapFragment *sipCpp = reinterpret_cast< ::QPainter::PixmapFragment *>(sipSelf);

    sipVal = PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->scaleY = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QPainter_PixmapFragment_sourceLeft(void *, PyObject *, PyObject *);}
static PyObject *varget_QPainter_PixmapFragment_sourceLeft(void *sipSelf, PyObject *, PyObject *)
{
     ::qreal sipVal;
     ::QPainter::PixmapFragment *sipCpp = reinterpret_cast< ::QPainter::PixmapFragment *>(sipSelf);

    sipVal = sipCpp->sourceLeft;

    return PyFloat_FromDouble(sipVal);
}


extern "C" {static int varset_QPainter_PixmapFragment_sourceLeft(void *, PyObject *, PyObject *);}
static int varset_QPainter_PixmapFragment_sourceLeft(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::qreal sipVal;
     ::QPainter::PixmapFragment *sipCpp = reinterpret_cast< ::QPainter::PixmapFragment *>(sipSelf);

    sipVal = PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->sourceLeft = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QPainter_PixmapFragment_sourceTop(void *, PyObject *, PyObject *);}
static PyObject *varget_QPainter_PixmapFragment_sourceTop(void *sipSelf, PyObject *, PyObject *)
{
     ::qreal sipVal;
     ::QPainter::PixmapFragment *sipCpp = reinterpret_cast< ::QPainter::PixmapFragment *>(sipSelf);

    sipVal = sipCpp->sourceTop;

    return PyFloat_FromDouble(sipVal);
}


extern "C" {static int varset_QPainter_PixmapFragment_sourceTop(void *, PyObject *, PyObject *);}
static int varset_QPainter_PixmapFragment_sourceTop(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::qreal sipVal;
     ::QPainter::PixmapFragment *sipCpp = reinterpret_cast< ::QPainter::PixmapFragment *>(sipSelf);

    sipVal = PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->sourceTop = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QPainter_PixmapFragment_width(void *, PyObject *, PyObject *);}
static PyObject *varget_QPainter_PixmapFragment_width(void *sipSelf, PyObject *, PyObject *)
{
     ::qreal sipVal;
     ::QPainter::PixmapFragment *sipCpp = reinterpret_cast< ::QPainter::PixmapFragment *>(sipSelf);

    sipVal = sipCpp->width;

    return PyFloat_FromDouble(sipVal);
}


extern "C" {static int varset_QPainter_PixmapFragment_width(void *, PyObject *, PyObject *);}
static int varset_QPainter_PixmapFragment_width(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::qreal sipVal;
     ::QPainter::PixmapFragment *sipCpp = reinterpret_cast< ::QPainter::PixmapFragment *>(sipSelf);

    sipVal = PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->width = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QPainter_PixmapFragment_x(void *, PyObject *, PyObject *);}
static PyObject *varget_QPainter_PixmapFragment_x(void *sipSelf, PyObject *, PyObject *)
{
     ::qreal sipVal;
     ::QPainter::PixmapFragment *sipCpp = reinterpret_cast< ::QPainter::PixmapFragment *>(sipSelf);

    sipVal = sipCpp->x;

    return PyFloat_FromDouble(sipVal);
}


extern "C" {static int varset_QPainter_PixmapFragment_x(void *, PyObject *, PyObject *);}
static int varset_QPainter_PixmapFragment_x(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::qreal sipVal;
     ::QPainter::PixmapFragment *sipCpp = reinterpret_cast< ::QPainter::PixmapFragment *>(sipSelf);

    sipVal = PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->x = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QPainter_PixmapFragment_y(void *, PyObject *, PyObject *);}
static PyObject *varget_QPainter_PixmapFragment_y(void *sipSelf, PyObject *, PyObject *)
{
     ::qreal sipVal;
     ::QPainter::PixmapFragment *sipCpp = reinterpret_cast< ::QPainter::PixmapFragment *>(sipSelf);

    sipVal = sipCpp->y;

    return PyFloat_FromDouble(sipVal);
}


extern "C" {static int varset_QPainter_PixmapFragment_y(void *, PyObject *, PyObject *);}
static int varset_QPainter_PixmapFragment_y(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::qreal sipVal;
     ::QPainter::PixmapFragment *sipCpp = reinterpret_cast< ::QPainter::PixmapFragment *>(sipSelf);

    sipVal = PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->y = sipVal;

    return 0;
}

sipVariableDef variables_QPainter_PixmapFragment[] = {
    {InstanceVariable, sipName_height, (PyMethodDef *)varget_QPainter_PixmapFragment_height, (PyMethodDef *)varset_QPainter_PixmapFragment_height, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_opacity, (PyMethodDef *)varget_QPainter_PixmapFragment_opacity, (PyMethodDef *)varset_QPainter_PixmapFragment_opacity, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_rotation, (PyMethodDef *)varget_QPainter_PixmapFragment_rotation, (PyMethodDef *)varset_QPainter_PixmapFragment_rotation, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_scaleX, (PyMethodDef *)varget_QPainter_PixmapFragment_scaleX, (PyMethodDef *)varset_QPainter_PixmapFragment_scaleX, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_scaleY, (PyMethodDef *)varget_QPainter_PixmapFragment_scaleY, (PyMethodDef *)varset_QPainter_PixmapFragment_scaleY, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_sourceLeft, (PyMethodDef *)varget_QPainter_PixmapFragment_sourceLeft, (PyMethodDef *)varset_QPainter_PixmapFragment_sourceLeft, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_sourceTop, (PyMethodDef *)varget_QPainter_PixmapFragment_sourceTop, (PyMethodDef *)varset_QPainter_PixmapFragment_sourceTop, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_width, (PyMethodDef *)varget_QPainter_PixmapFragment_width, (PyMethodDef *)varset_QPainter_PixmapFragment_width, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_x, (PyMethodDef *)varget_QPainter_PixmapFragment_x, (PyMethodDef *)varset_QPainter_PixmapFragment_x, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_y, (PyMethodDef *)varget_QPainter_PixmapFragment_y, (PyMethodDef *)varset_QPainter_PixmapFragment_y, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_QPainter_PixmapFragment, "\1QPainter.PixmapFragment()\n"
"QPainter.PixmapFragment(QPainter.PixmapFragment)");


static pyqt5ClassPluginDef plugin_QPainter_PixmapFragment = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QPainter_PixmapFragment = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPainter__PixmapFragment,
        {SIP_NULLPTR},
        &plugin_QPainter_PixmapFragment
    },
    {
        sipNameNr_PixmapFragment,
        {203, 255, 0},
        1, methods_QPainter_PixmapFragment,
        0, SIP_NULLPTR,
        10, variables_QPainter_PixmapFragment,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPainter_PixmapFragment,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QPainter_PixmapFragment,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QPainter_PixmapFragment,
    assign_QPainter_PixmapFragment,
    array_QPainter_PixmapFragment,
    copy_QPainter_PixmapFragment,
    release_QPainter_PixmapFragment,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 94700 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 94704 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"


extern "C" {static long slot_QPainter_RenderHints___hash__(PyObject *);}
static long slot_QPainter_RenderHints___hash__(PyObject *sipSelf)
{
     ::QPainter::RenderHints *sipCpp = reinterpret_cast< ::QPainter::RenderHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPainter_RenderHints));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QPainter::RenderHints::Int();
#line 94722 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QPainter_RenderHints___bool__(PyObject *);}
static int slot_QPainter_RenderHints___bool__(PyObject *sipSelf)
{
     ::QPainter::RenderHints *sipCpp = reinterpret_cast< ::QPainter::RenderHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPainter_RenderHints));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QPainter::RenderHints::Int() != 0);
#line 94747 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QPainter_RenderHints___ne__(PyObject *,PyObject *);}
static PyObject *slot_QPainter_RenderHints___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPainter::RenderHints *sipCpp = reinterpret_cast< ::QPainter::RenderHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPainter_RenderHints));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainter::RenderHints* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QPainter_RenderHints, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QPainter::RenderHints::Int() != a0->operator QPainter::RenderHints::Int());
#line 94777 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
            sipReleaseType(const_cast< ::QPainter::RenderHints *>(a0),sipType_QPainter_RenderHints,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QPainter_RenderHints, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QPainter_RenderHints___eq__(PyObject *,PyObject *);}
static PyObject *slot_QPainter_RenderHints___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPainter::RenderHints *sipCpp = reinterpret_cast< ::QPainter::RenderHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPainter_RenderHints));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPainter::RenderHints* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QPainter_RenderHints, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QPainter::RenderHints::Int() == a0->operator QPainter::RenderHints::Int());
#line 94813 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
            sipReleaseType(const_cast< ::QPainter::RenderHints *>(a0),sipType_QPainter_RenderHints,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QPainter_RenderHints, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QPainter_RenderHints___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QPainter_RenderHints___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QPainter_RenderHints)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QPainter::RenderHints *sipCpp = reinterpret_cast< ::QPainter::RenderHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPainter_RenderHints));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QPainter::RenderHints(*sipCpp ^ a0);
#line 94852 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QPainter_RenderHints___xor__(PyObject *,PyObject *);}
static PyObject *slot_QPainter_RenderHints___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPainter::RenderHints* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QPainter_RenderHints, &a0, &a0State, &a1))
        {
             ::QPainter::RenderHints*sipRes;

            sipRes = new  ::QPainter::RenderHints((*a0 ^ a1));
            sipReleaseType(a0,sipType_QPainter_RenderHints,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPainter_RenderHints,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QPainter_RenderHints___ior__(PyObject *,PyObject *);}
static PyObject *slot_QPainter_RenderHints___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QPainter_RenderHints)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QPainter::RenderHints *sipCpp = reinterpret_cast< ::QPainter::RenderHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPainter_RenderHints));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QPainter::RenderHints(*sipCpp | a0);
#line 94924 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QPainter_RenderHints___or__(PyObject *,PyObject *);}
static PyObject *slot_QPainter_RenderHints___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPainter::RenderHints* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QPainter_RenderHints, &a0, &a0State, &a1))
        {
             ::QPainter::RenderHints*sipRes;

            sipRes = new  ::QPainter::RenderHints((*a0 | a1));
            sipReleaseType(a0,sipType_QPainter_RenderHints,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPainter_RenderHints,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QPainter_RenderHints___iand__(PyObject *,PyObject *);}
static PyObject *slot_QPainter_RenderHints___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QPainter_RenderHints)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QPainter::RenderHints *sipCpp = reinterpret_cast< ::QPainter::RenderHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPainter_RenderHints));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QPainter::RenderHints::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QPainter_RenderHints___and__(PyObject *,PyObject *);}
static PyObject *slot_QPainter_RenderHints___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPainter::RenderHints* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QPainter_RenderHints, &a0, &a0State, &a1))
        {
             ::QPainter::RenderHints*sipRes;

            sipRes = new  ::QPainter::RenderHints((*a0 & a1));
            sipReleaseType(a0,sipType_QPainter_RenderHints,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPainter_RenderHints,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtGui, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QPainter_RenderHints___invert__(PyObject *);}
static PyObject *slot_QPainter_RenderHints___invert__(PyObject *sipSelf)
{
     ::QPainter::RenderHints *sipCpp = reinterpret_cast< ::QPainter::RenderHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPainter_RenderHints));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QPainter::RenderHints*sipRes;

            sipRes = new  ::QPainter::RenderHints(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QPainter_RenderHints,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QPainter_RenderHints___int__(PyObject *);}
static PyObject *slot_QPainter_RenderHints___int__(PyObject *sipSelf)
{
     ::QPainter::RenderHints *sipCpp = reinterpret_cast< ::QPainter::RenderHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPainter_RenderHints));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPainter_RenderHints(void *, int);}
static void release_QPainter_RenderHints(void *sipCppV, int)
{
    delete reinterpret_cast< ::QPainter::RenderHints *>(sipCppV);
}


extern "C" {static void assign_QPainter_RenderHints(void *, SIP_SSIZE_T, void *);}
static void assign_QPainter_RenderHints(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QPainter::RenderHints *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QPainter::RenderHints *>(sipSrc);
}


extern "C" {static void *array_QPainter_RenderHints(SIP_SSIZE_T);}
static void *array_QPainter_RenderHints(SIP_SSIZE_T sipNrElem)
{
    return new  ::QPainter::RenderHints[sipNrElem];
}


extern "C" {static void *copy_QPainter_RenderHints(const void *, SIP_SSIZE_T);}
static void *copy_QPainter_RenderHints(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QPainter::RenderHints(reinterpret_cast<const  ::QPainter::RenderHints *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPainter_RenderHints(sipSimpleWrapper *);}
static void dealloc_QPainter_RenderHints(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPainter_RenderHints(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QPainter_RenderHints(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPainter_RenderHints(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QPainter::RenderHints *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QPainter::RenderHints();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QPainter::RenderHints(a0);

            return sipCpp;
        }
    }

    {
        const  ::QPainter::RenderHints* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QPainter_RenderHints, &a0, &a0State))
        {
            sipCpp = new  ::QPainter::RenderHints(*a0);
            sipReleaseType(const_cast< ::QPainter::RenderHints *>(a0),sipType_QPainter_RenderHints,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QPainter_RenderHints(PyObject *, void **, int *, PyObject *);}
static int convertTo_QPainter_RenderHints(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QPainter::RenderHints **sipCppPtr = reinterpret_cast< ::QPainter::RenderHints **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QPainter::RenderHints is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QPainter_RenderHint)) ||
            sipCanConvertToType(sipPy, sipType_QPainter_RenderHints, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QPainter_RenderHint)))
{
    *sipCppPtr = new QPainter::RenderHints(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QPainter::RenderHints *>(sipConvertToType(sipPy, sipType_QPainter_RenderHints, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 95192 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtGui/sipQtGuipart0.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QPainter_RenderHints[] = {
    {(void *)slot_QPainter_RenderHints___hash__, hash_slot},
    {(void *)slot_QPainter_RenderHints___bool__, bool_slot},
    {(void *)slot_QPainter_RenderHints___ne__, ne_slot},
    {(void *)slot_QPainter_RenderHints___eq__, eq_slot},
    {(void *)slot_QPainter_RenderHints___ixor__, ixor_slot},
    {(void *)slot_QPainter_RenderHints___xor__, xor_slot},
    {(void *)slot_QPainter_RenderHints___ior__, ior_slot},
    {(void *)slot_QPainter_RenderHints___or__, or_slot},
    {(void *)slot_QPainter_RenderHints___iand__, iand_slot},
    {(void *)slot_QPainter_RenderHints___and__, and_slot},
    {(void *)slot_QPainter_RenderHints___invert__, invert_slot},
    {(void *)slot_QPainter_RenderHints___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QPainter_RenderHints, "\1QPainter.RenderHints()\n"
"QPainter.RenderHints(Union[QPainter.RenderHints, QPainter.RenderHint])\n"
"QPainter.RenderHints(QPainter.RenderHints)");


static pyqt5ClassPluginDef plugin_QPainter_RenderHints = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtGui_QPainter_RenderHints = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPainter__RenderHints,
        {SIP_NULLPTR},
        &plugin_QPainter_RenderHints
    },
    {
        sipNameNr_RenderHints,
        {203, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPainter_RenderHints,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QPainter_RenderHints,
    init_type_QPainter_RenderHints,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QPainter_RenderHints,
    assign_QPainter_RenderHints,
    array_QPainter_RenderHints,
    copy_QPainter_RenderHints,
    release_QPainter_RenderHints,
    SIP_NULLPTR,
    convertTo_QPainter_RenderHints,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
