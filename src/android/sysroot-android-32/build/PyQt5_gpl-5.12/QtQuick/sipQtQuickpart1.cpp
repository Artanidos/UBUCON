/*
 * Module code.
 *
 * Generated by SIP 4.19.15
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtQuick.h"

#line 267 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

#line 165 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 33 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
#include <qsggeometry.h>
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 39 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 42 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 45 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"


class sipQSGGeometryNode : public  ::QSGGeometryNode
{
public:
    sipQSGGeometryNode();
    virtual ~sipQSGGeometryNode();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void preprocess() SIP_OVERRIDE;
    bool isSubtreeBlocked() const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSGGeometryNode(const sipQSGGeometryNode &);
    sipQSGGeometryNode &operator = (const sipQSGGeometryNode &);

    char sipPyMethods[2];
};

sipQSGGeometryNode::sipQSGGeometryNode():  ::QSGGeometryNode(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSGGeometryNode::~sipQSGGeometryNode()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

void sipQSGGeometryNode::preprocess()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_preprocess);

    if (!sipMeth)
    {
         ::QSGGeometryNode::preprocess();
        return;
    }

    extern void sipVH_QtQuick_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtQuick_6(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQSGGeometryNode::isSubtreeBlocked() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_isSubtreeBlocked);

    if (!sipMeth)
        return  ::QSGGeometryNode::isSubtreeBlocked();

    extern bool sipVH_QtQuick_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_9(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QSGGeometryNode_setMaterial, "setMaterial(self, QSGMaterial)");

extern "C" {static PyObject *meth_QSGGeometryNode_setMaterial(PyObject *, PyObject *);}
static PyObject *meth_QSGGeometryNode_setMaterial(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGMaterial* a0;
        PyObject *a0Wrapper;
         ::QSGGeometryNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QSGGeometryNode, &sipCpp, &a0Wrapper, sipType_QSGMaterial, &a0))
        {
#line 275 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
        sipCpp->setMaterial(a0);
        
        if (sipCpp->flags() & QSGNode::OwnsMaterial)
            sipTransferTo(a0Wrapper, sipSelf);
#line 136 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGGeometryNode, sipName_setMaterial, doc_QSGGeometryNode_setMaterial);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGGeometryNode_material, "material(self) -> QSGMaterial");

extern "C" {static PyObject *meth_QSGGeometryNode_material(PyObject *, PyObject *);}
static PyObject *meth_QSGGeometryNode_material(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGGeometryNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGGeometryNode, &sipCpp))
        {
             ::QSGMaterial*sipRes;

            sipRes = sipCpp->material();

            return sipConvertFromType(sipRes,sipType_QSGMaterial,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGGeometryNode, sipName_material, doc_QSGGeometryNode_material);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGGeometryNode_setOpaqueMaterial, "setOpaqueMaterial(self, QSGMaterial)");

extern "C" {static PyObject *meth_QSGGeometryNode_setOpaqueMaterial(PyObject *, PyObject *);}
static PyObject *meth_QSGGeometryNode_setOpaqueMaterial(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGMaterial* a0;
        PyObject *a0Wrapper;
         ::QSGGeometryNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QSGGeometryNode, &sipCpp, &a0Wrapper, sipType_QSGMaterial, &a0))
        {
#line 284 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
        sipCpp->setOpaqueMaterial(a0);
        
        if (sipCpp->flags() & QSGNode::OwnsOpaqueMaterial)
            sipTransferTo(a0Wrapper, sipSelf);
#line 198 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGGeometryNode, sipName_setOpaqueMaterial, doc_QSGGeometryNode_setOpaqueMaterial);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGGeometryNode_opaqueMaterial, "opaqueMaterial(self) -> QSGMaterial");

extern "C" {static PyObject *meth_QSGGeometryNode_opaqueMaterial(PyObject *, PyObject *);}
static PyObject *meth_QSGGeometryNode_opaqueMaterial(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGGeometryNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGGeometryNode, &sipCpp))
        {
             ::QSGMaterial*sipRes;

            sipRes = sipCpp->opaqueMaterial();

            return sipConvertFromType(sipRes,sipType_QSGMaterial,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGGeometryNode, sipName_opaqueMaterial, doc_QSGGeometryNode_opaqueMaterial);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSGGeometryNode(void *, const sipTypeDef *);}
static void *cast_QSGGeometryNode(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSGGeometryNode *sipCpp = reinterpret_cast< ::QSGGeometryNode *>(sipCppV);

    if (targetType == sipType_QSGBasicGeometryNode)
        return static_cast< ::QSGBasicGeometryNode *>(sipCpp);

    if (targetType == sipType_QSGNode)
        return static_cast< ::QSGNode *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGGeometryNode(void *, int);}
static void release_QSGGeometryNode(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQSGGeometryNode *>(sipCppV);
    else
        delete reinterpret_cast< ::QSGGeometryNode *>(sipCppV);
}


extern "C" {static void dealloc_QSGGeometryNode(sipSimpleWrapper *);}
static void dealloc_QSGGeometryNode(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSGGeometryNode *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGGeometryNode(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSGGeometryNode(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGGeometryNode(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQSGGeometryNode *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQSGGeometryNode();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSGGeometryNode[] = {{34, 255, 1}};


static PyMethodDef methods_QSGGeometryNode[] = {
    {SIP_MLNAME_CAST(sipName_material), meth_QSGGeometryNode_material, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGGeometryNode_material)},
    {SIP_MLNAME_CAST(sipName_opaqueMaterial), meth_QSGGeometryNode_opaqueMaterial, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGGeometryNode_opaqueMaterial)},
    {SIP_MLNAME_CAST(sipName_setMaterial), meth_QSGGeometryNode_setMaterial, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGGeometryNode_setMaterial)},
    {SIP_MLNAME_CAST(sipName_setOpaqueMaterial), meth_QSGGeometryNode_setOpaqueMaterial, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGGeometryNode_setOpaqueMaterial)}
};

PyDoc_STRVAR(doc_QSGGeometryNode, "\1QSGGeometryNode()");


static pyqt5ClassPluginDef plugin_QSGGeometryNode = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGGeometryNode = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGGeometryNode,
        {SIP_NULLPTR},
        &plugin_QSGGeometryNode
    },
    {
        sipNameNr_QSGGeometryNode,
        {0, 0, 1},
        4, methods_QSGGeometryNode,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSGGeometryNode,
    -1,
    -1,
    supers_QSGGeometryNode,
    SIP_NULLPTR,
    init_type_QSGGeometryNode,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGGeometryNode,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSGGeometryNode,
    cast_QSGGeometryNode,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
#include <qsggeometry.h>
#line 261 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
#include <qsggeometry.h>
#line 376 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"



PyDoc_STRVAR(doc_QSGGeometry_ColoredPoint2D_set, "set(self, float, float, int, int, int, int)");

extern "C" {static PyObject *meth_QSGGeometry_ColoredPoint2D_set(PyObject *, PyObject *);}
static PyObject *meth_QSGGeometry_ColoredPoint2D_set(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
        float a1;
         ::uchar a2;
         ::uchar a3;
         ::uchar a4;
         ::uchar a5;
         ::QSGGeometry::ColoredPoint2D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BffMMMM", &sipSelf, sipType_QSGGeometry_ColoredPoint2D, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            sipCpp->set(a0,a1,a2,a3,a4,a5);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ColoredPoint2D, sipName_set, doc_QSGGeometry_ColoredPoint2D_set);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGGeometry_ColoredPoint2D(void *, int);}
static void release_QSGGeometry_ColoredPoint2D(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSGGeometry::ColoredPoint2D *>(sipCppV);
}


extern "C" {static void assign_QSGGeometry_ColoredPoint2D(void *, SIP_SSIZE_T, void *);}
static void assign_QSGGeometry_ColoredPoint2D(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QSGGeometry::ColoredPoint2D *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QSGGeometry::ColoredPoint2D *>(sipSrc);
}


extern "C" {static void *array_QSGGeometry_ColoredPoint2D(SIP_SSIZE_T);}
static void *array_QSGGeometry_ColoredPoint2D(SIP_SSIZE_T sipNrElem)
{
    return new  ::QSGGeometry::ColoredPoint2D[sipNrElem];
}


extern "C" {static void *copy_QSGGeometry_ColoredPoint2D(const void *, SIP_SSIZE_T);}
static void *copy_QSGGeometry_ColoredPoint2D(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QSGGeometry::ColoredPoint2D(reinterpret_cast<const  ::QSGGeometry::ColoredPoint2D *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSGGeometry_ColoredPoint2D(sipSimpleWrapper *);}
static void dealloc_QSGGeometry_ColoredPoint2D(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGGeometry_ColoredPoint2D(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QSGGeometry_ColoredPoint2D(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGGeometry_ColoredPoint2D(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QSGGeometry::ColoredPoint2D *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QSGGeometry::ColoredPoint2D();

            return sipCpp;
        }
    }

    {
        const  ::QSGGeometry::ColoredPoint2D* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QSGGeometry_ColoredPoint2D, &a0))
        {
            sipCpp = new  ::QSGGeometry::ColoredPoint2D(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QSGGeometry_ColoredPoint2D[] = {
    {SIP_MLNAME_CAST(sipName_set), meth_QSGGeometry_ColoredPoint2D_set, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGGeometry_ColoredPoint2D_set)}
};


extern "C" {static PyObject *varget_QSGGeometry_ColoredPoint2D_a(void *, PyObject *, PyObject *);}
static PyObject *varget_QSGGeometry_ColoredPoint2D_a(void *sipSelf, PyObject *, PyObject *)
{
    unsigned char sipVal;
     ::QSGGeometry::ColoredPoint2D *sipCpp = reinterpret_cast< ::QSGGeometry::ColoredPoint2D *>(sipSelf);

    sipVal = sipCpp->a;

#if PY_MAJOR_VERSION >= 3
    return PyLong_FromUnsignedLong(sipVal);
#else
    return PyInt_FromLong(sipVal);
#endif
}


extern "C" {static int varset_QSGGeometry_ColoredPoint2D_a(void *, PyObject *, PyObject *);}
static int varset_QSGGeometry_ColoredPoint2D_a(void *sipSelf, PyObject *sipPy, PyObject *)
{
    unsigned char sipVal;
     ::QSGGeometry::ColoredPoint2D *sipCpp = reinterpret_cast< ::QSGGeometry::ColoredPoint2D *>(sipSelf);

    sipVal = sipLong_AsUnsignedChar(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->a = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QSGGeometry_ColoredPoint2D_b(void *, PyObject *, PyObject *);}
static PyObject *varget_QSGGeometry_ColoredPoint2D_b(void *sipSelf, PyObject *, PyObject *)
{
    unsigned char sipVal;
     ::QSGGeometry::ColoredPoint2D *sipCpp = reinterpret_cast< ::QSGGeometry::ColoredPoint2D *>(sipSelf);

    sipVal = sipCpp->b;

#if PY_MAJOR_VERSION >= 3
    return PyLong_FromUnsignedLong(sipVal);
#else
    return PyInt_FromLong(sipVal);
#endif
}


extern "C" {static int varset_QSGGeometry_ColoredPoint2D_b(void *, PyObject *, PyObject *);}
static int varset_QSGGeometry_ColoredPoint2D_b(void *sipSelf, PyObject *sipPy, PyObject *)
{
    unsigned char sipVal;
     ::QSGGeometry::ColoredPoint2D *sipCpp = reinterpret_cast< ::QSGGeometry::ColoredPoint2D *>(sipSelf);

    sipVal = sipLong_AsUnsignedChar(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->b = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QSGGeometry_ColoredPoint2D_g(void *, PyObject *, PyObject *);}
static PyObject *varget_QSGGeometry_ColoredPoint2D_g(void *sipSelf, PyObject *, PyObject *)
{
    unsigned char sipVal;
     ::QSGGeometry::ColoredPoint2D *sipCpp = reinterpret_cast< ::QSGGeometry::ColoredPoint2D *>(sipSelf);

    sipVal = sipCpp->g;

#if PY_MAJOR_VERSION >= 3
    return PyLong_FromUnsignedLong(sipVal);
#else
    return PyInt_FromLong(sipVal);
#endif
}


extern "C" {static int varset_QSGGeometry_ColoredPoint2D_g(void *, PyObject *, PyObject *);}
static int varset_QSGGeometry_ColoredPoint2D_g(void *sipSelf, PyObject *sipPy, PyObject *)
{
    unsigned char sipVal;
     ::QSGGeometry::ColoredPoint2D *sipCpp = reinterpret_cast< ::QSGGeometry::ColoredPoint2D *>(sipSelf);

    sipVal = sipLong_AsUnsignedChar(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->g = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QSGGeometry_ColoredPoint2D_r(void *, PyObject *, PyObject *);}
static PyObject *varget_QSGGeometry_ColoredPoint2D_r(void *sipSelf, PyObject *, PyObject *)
{
    unsigned char sipVal;
     ::QSGGeometry::ColoredPoint2D *sipCpp = reinterpret_cast< ::QSGGeometry::ColoredPoint2D *>(sipSelf);

    sipVal = sipCpp->r;

#if PY_MAJOR_VERSION >= 3
    return PyLong_FromUnsignedLong(sipVal);
#else
    return PyInt_FromLong(sipVal);
#endif
}


extern "C" {static int varset_QSGGeometry_ColoredPoint2D_r(void *, PyObject *, PyObject *);}
static int varset_QSGGeometry_ColoredPoint2D_r(void *sipSelf, PyObject *sipPy, PyObject *)
{
    unsigned char sipVal;
     ::QSGGeometry::ColoredPoint2D *sipCpp = reinterpret_cast< ::QSGGeometry::ColoredPoint2D *>(sipSelf);

    sipVal = sipLong_AsUnsignedChar(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->r = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QSGGeometry_ColoredPoint2D_x(void *, PyObject *, PyObject *);}
static PyObject *varget_QSGGeometry_ColoredPoint2D_x(void *sipSelf, PyObject *, PyObject *)
{
    float sipVal;
     ::QSGGeometry::ColoredPoint2D *sipCpp = reinterpret_cast< ::QSGGeometry::ColoredPoint2D *>(sipSelf);

    sipVal = sipCpp->x;

    return PyFloat_FromDouble((double)sipVal);
}


extern "C" {static int varset_QSGGeometry_ColoredPoint2D_x(void *, PyObject *, PyObject *);}
static int varset_QSGGeometry_ColoredPoint2D_x(void *sipSelf, PyObject *sipPy, PyObject *)
{
    float sipVal;
     ::QSGGeometry::ColoredPoint2D *sipCpp = reinterpret_cast< ::QSGGeometry::ColoredPoint2D *>(sipSelf);

    sipVal = (float)PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->x = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QSGGeometry_ColoredPoint2D_y(void *, PyObject *, PyObject *);}
static PyObject *varget_QSGGeometry_ColoredPoint2D_y(void *sipSelf, PyObject *, PyObject *)
{
    float sipVal;
     ::QSGGeometry::ColoredPoint2D *sipCpp = reinterpret_cast< ::QSGGeometry::ColoredPoint2D *>(sipSelf);

    sipVal = sipCpp->y;

    return PyFloat_FromDouble((double)sipVal);
}


extern "C" {static int varset_QSGGeometry_ColoredPoint2D_y(void *, PyObject *, PyObject *);}
static int varset_QSGGeometry_ColoredPoint2D_y(void *sipSelf, PyObject *sipPy, PyObject *)
{
    float sipVal;
     ::QSGGeometry::ColoredPoint2D *sipCpp = reinterpret_cast< ::QSGGeometry::ColoredPoint2D *>(sipSelf);

    sipVal = (float)PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->y = sipVal;

    return 0;
}

sipVariableDef variables_QSGGeometry_ColoredPoint2D[] = {
    {InstanceVariable, sipName_a, (PyMethodDef *)varget_QSGGeometry_ColoredPoint2D_a, (PyMethodDef *)varset_QSGGeometry_ColoredPoint2D_a, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_b, (PyMethodDef *)varget_QSGGeometry_ColoredPoint2D_b, (PyMethodDef *)varset_QSGGeometry_ColoredPoint2D_b, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_g, (PyMethodDef *)varget_QSGGeometry_ColoredPoint2D_g, (PyMethodDef *)varset_QSGGeometry_ColoredPoint2D_g, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_r, (PyMethodDef *)varget_QSGGeometry_ColoredPoint2D_r, (PyMethodDef *)varset_QSGGeometry_ColoredPoint2D_r, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_x, (PyMethodDef *)varget_QSGGeometry_ColoredPoint2D_x, (PyMethodDef *)varset_QSGGeometry_ColoredPoint2D_x, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_y, (PyMethodDef *)varget_QSGGeometry_ColoredPoint2D_y, (PyMethodDef *)varset_QSGGeometry_ColoredPoint2D_y, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_QSGGeometry_ColoredPoint2D, "\1QSGGeometry.ColoredPoint2D()\n"
"QSGGeometry.ColoredPoint2D(QSGGeometry.ColoredPoint2D)");


static pyqt5ClassPluginDef plugin_QSGGeometry_ColoredPoint2D = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGGeometry_ColoredPoint2D = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGGeometry__ColoredPoint2D,
        {SIP_NULLPTR},
        &plugin_QSGGeometry_ColoredPoint2D
    },
    {
        sipNameNr_ColoredPoint2D,
        {41, 255, 0},
        1, methods_QSGGeometry_ColoredPoint2D,
        0, SIP_NULLPTR,
        6, variables_QSGGeometry_ColoredPoint2D,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSGGeometry_ColoredPoint2D,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QSGGeometry_ColoredPoint2D,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGGeometry_ColoredPoint2D,
    assign_QSGGeometry_ColoredPoint2D,
    array_QSGGeometry_ColoredPoint2D,
    copy_QSGGeometry_ColoredPoint2D,
    release_QSGGeometry_ColoredPoint2D,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
#include <qsggeometry.h>
#line 248 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
#include <qsggeometry.h>
#line 751 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"



PyDoc_STRVAR(doc_QSGGeometry_TexturedPoint2D_set, "set(self, float, float, float, float)");

extern "C" {static PyObject *meth_QSGGeometry_TexturedPoint2D_set(PyObject *, PyObject *);}
static PyObject *meth_QSGGeometry_TexturedPoint2D_set(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
        float a1;
        float a2;
        float a3;
         ::QSGGeometry::TexturedPoint2D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bffff", &sipSelf, sipType_QSGGeometry_TexturedPoint2D, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->set(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TexturedPoint2D, sipName_set, doc_QSGGeometry_TexturedPoint2D_set);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGGeometry_TexturedPoint2D(void *, int);}
static void release_QSGGeometry_TexturedPoint2D(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSGGeometry::TexturedPoint2D *>(sipCppV);
}


extern "C" {static void assign_QSGGeometry_TexturedPoint2D(void *, SIP_SSIZE_T, void *);}
static void assign_QSGGeometry_TexturedPoint2D(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QSGGeometry::TexturedPoint2D *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QSGGeometry::TexturedPoint2D *>(sipSrc);
}


extern "C" {static void *array_QSGGeometry_TexturedPoint2D(SIP_SSIZE_T);}
static void *array_QSGGeometry_TexturedPoint2D(SIP_SSIZE_T sipNrElem)
{
    return new  ::QSGGeometry::TexturedPoint2D[sipNrElem];
}


extern "C" {static void *copy_QSGGeometry_TexturedPoint2D(const void *, SIP_SSIZE_T);}
static void *copy_QSGGeometry_TexturedPoint2D(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QSGGeometry::TexturedPoint2D(reinterpret_cast<const  ::QSGGeometry::TexturedPoint2D *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSGGeometry_TexturedPoint2D(sipSimpleWrapper *);}
static void dealloc_QSGGeometry_TexturedPoint2D(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGGeometry_TexturedPoint2D(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QSGGeometry_TexturedPoint2D(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGGeometry_TexturedPoint2D(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QSGGeometry::TexturedPoint2D *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QSGGeometry::TexturedPoint2D();

            return sipCpp;
        }
    }

    {
        const  ::QSGGeometry::TexturedPoint2D* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QSGGeometry_TexturedPoint2D, &a0))
        {
            sipCpp = new  ::QSGGeometry::TexturedPoint2D(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QSGGeometry_TexturedPoint2D[] = {
    {SIP_MLNAME_CAST(sipName_set), meth_QSGGeometry_TexturedPoint2D_set, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGGeometry_TexturedPoint2D_set)}
};


extern "C" {static PyObject *varget_QSGGeometry_TexturedPoint2D_tx(void *, PyObject *, PyObject *);}
static PyObject *varget_QSGGeometry_TexturedPoint2D_tx(void *sipSelf, PyObject *, PyObject *)
{
    float sipVal;
     ::QSGGeometry::TexturedPoint2D *sipCpp = reinterpret_cast< ::QSGGeometry::TexturedPoint2D *>(sipSelf);

    sipVal = sipCpp->tx;

    return PyFloat_FromDouble((double)sipVal);
}


extern "C" {static int varset_QSGGeometry_TexturedPoint2D_tx(void *, PyObject *, PyObject *);}
static int varset_QSGGeometry_TexturedPoint2D_tx(void *sipSelf, PyObject *sipPy, PyObject *)
{
    float sipVal;
     ::QSGGeometry::TexturedPoint2D *sipCpp = reinterpret_cast< ::QSGGeometry::TexturedPoint2D *>(sipSelf);

    sipVal = (float)PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->tx = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QSGGeometry_TexturedPoint2D_ty(void *, PyObject *, PyObject *);}
static PyObject *varget_QSGGeometry_TexturedPoint2D_ty(void *sipSelf, PyObject *, PyObject *)
{
    float sipVal;
     ::QSGGeometry::TexturedPoint2D *sipCpp = reinterpret_cast< ::QSGGeometry::TexturedPoint2D *>(sipSelf);

    sipVal = sipCpp->ty;

    return PyFloat_FromDouble((double)sipVal);
}


extern "C" {static int varset_QSGGeometry_TexturedPoint2D_ty(void *, PyObject *, PyObject *);}
static int varset_QSGGeometry_TexturedPoint2D_ty(void *sipSelf, PyObject *sipPy, PyObject *)
{
    float sipVal;
     ::QSGGeometry::TexturedPoint2D *sipCpp = reinterpret_cast< ::QSGGeometry::TexturedPoint2D *>(sipSelf);

    sipVal = (float)PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->ty = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QSGGeometry_TexturedPoint2D_x(void *, PyObject *, PyObject *);}
static PyObject *varget_QSGGeometry_TexturedPoint2D_x(void *sipSelf, PyObject *, PyObject *)
{
    float sipVal;
     ::QSGGeometry::TexturedPoint2D *sipCpp = reinterpret_cast< ::QSGGeometry::TexturedPoint2D *>(sipSelf);

    sipVal = sipCpp->x;

    return PyFloat_FromDouble((double)sipVal);
}


extern "C" {static int varset_QSGGeometry_TexturedPoint2D_x(void *, PyObject *, PyObject *);}
static int varset_QSGGeometry_TexturedPoint2D_x(void *sipSelf, PyObject *sipPy, PyObject *)
{
    float sipVal;
     ::QSGGeometry::TexturedPoint2D *sipCpp = reinterpret_cast< ::QSGGeometry::TexturedPoint2D *>(sipSelf);

    sipVal = (float)PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->x = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QSGGeometry_TexturedPoint2D_y(void *, PyObject *, PyObject *);}
static PyObject *varget_QSGGeometry_TexturedPoint2D_y(void *sipSelf, PyObject *, PyObject *)
{
    float sipVal;
     ::QSGGeometry::TexturedPoint2D *sipCpp = reinterpret_cast< ::QSGGeometry::TexturedPoint2D *>(sipSelf);

    sipVal = sipCpp->y;

    return PyFloat_FromDouble((double)sipVal);
}


extern "C" {static int varset_QSGGeometry_TexturedPoint2D_y(void *, PyObject *, PyObject *);}
static int varset_QSGGeometry_TexturedPoint2D_y(void *sipSelf, PyObject *sipPy, PyObject *)
{
    float sipVal;
     ::QSGGeometry::TexturedPoint2D *sipCpp = reinterpret_cast< ::QSGGeometry::TexturedPoint2D *>(sipSelf);

    sipVal = (float)PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->y = sipVal;

    return 0;
}

sipVariableDef variables_QSGGeometry_TexturedPoint2D[] = {
    {InstanceVariable, sipName_tx, (PyMethodDef *)varget_QSGGeometry_TexturedPoint2D_tx, (PyMethodDef *)varset_QSGGeometry_TexturedPoint2D_tx, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_ty, (PyMethodDef *)varget_QSGGeometry_TexturedPoint2D_ty, (PyMethodDef *)varset_QSGGeometry_TexturedPoint2D_ty, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_x, (PyMethodDef *)varget_QSGGeometry_TexturedPoint2D_x, (PyMethodDef *)varset_QSGGeometry_TexturedPoint2D_x, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_y, (PyMethodDef *)varget_QSGGeometry_TexturedPoint2D_y, (PyMethodDef *)varset_QSGGeometry_TexturedPoint2D_y, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_QSGGeometry_TexturedPoint2D, "\1QSGGeometry.TexturedPoint2D()\n"
"QSGGeometry.TexturedPoint2D(QSGGeometry.TexturedPoint2D)");


static pyqt5ClassPluginDef plugin_QSGGeometry_TexturedPoint2D = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGGeometry_TexturedPoint2D = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGGeometry__TexturedPoint2D,
        {SIP_NULLPTR},
        &plugin_QSGGeometry_TexturedPoint2D
    },
    {
        sipNameNr_TexturedPoint2D,
        {41, 255, 0},
        1, methods_QSGGeometry_TexturedPoint2D,
        0, SIP_NULLPTR,
        4, variables_QSGGeometry_TexturedPoint2D,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSGGeometry_TexturedPoint2D,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QSGGeometry_TexturedPoint2D,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGGeometry_TexturedPoint2D,
    assign_QSGGeometry_TexturedPoint2D,
    array_QSGGeometry_TexturedPoint2D,
    copy_QSGGeometry_TexturedPoint2D,
    release_QSGGeometry_TexturedPoint2D,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
#include <qsggeometry.h>
#line 237 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
#include <qsggeometry.h>
#line 1048 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"



PyDoc_STRVAR(doc_QSGGeometry_Point2D_set, "set(self, float, float)");

extern "C" {static PyObject *meth_QSGGeometry_Point2D_set(PyObject *, PyObject *);}
static PyObject *meth_QSGGeometry_Point2D_set(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
        float a1;
         ::QSGGeometry::Point2D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bff", &sipSelf, sipType_QSGGeometry_Point2D, &sipCpp, &a0, &a1))
        {
            sipCpp->set(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Point2D, sipName_set, doc_QSGGeometry_Point2D_set);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGGeometry_Point2D(void *, int);}
static void release_QSGGeometry_Point2D(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSGGeometry::Point2D *>(sipCppV);
}


extern "C" {static void assign_QSGGeometry_Point2D(void *, SIP_SSIZE_T, void *);}
static void assign_QSGGeometry_Point2D(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QSGGeometry::Point2D *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QSGGeometry::Point2D *>(sipSrc);
}


extern "C" {static void *array_QSGGeometry_Point2D(SIP_SSIZE_T);}
static void *array_QSGGeometry_Point2D(SIP_SSIZE_T sipNrElem)
{
    return new  ::QSGGeometry::Point2D[sipNrElem];
}


extern "C" {static void *copy_QSGGeometry_Point2D(const void *, SIP_SSIZE_T);}
static void *copy_QSGGeometry_Point2D(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QSGGeometry::Point2D(reinterpret_cast<const  ::QSGGeometry::Point2D *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSGGeometry_Point2D(sipSimpleWrapper *);}
static void dealloc_QSGGeometry_Point2D(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGGeometry_Point2D(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QSGGeometry_Point2D(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGGeometry_Point2D(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QSGGeometry::Point2D *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QSGGeometry::Point2D();

            return sipCpp;
        }
    }

    {
        const  ::QSGGeometry::Point2D* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QSGGeometry_Point2D, &a0))
        {
            sipCpp = new  ::QSGGeometry::Point2D(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QSGGeometry_Point2D[] = {
    {SIP_MLNAME_CAST(sipName_set), meth_QSGGeometry_Point2D_set, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGGeometry_Point2D_set)}
};


extern "C" {static PyObject *varget_QSGGeometry_Point2D_x(void *, PyObject *, PyObject *);}
static PyObject *varget_QSGGeometry_Point2D_x(void *sipSelf, PyObject *, PyObject *)
{
    float sipVal;
     ::QSGGeometry::Point2D *sipCpp = reinterpret_cast< ::QSGGeometry::Point2D *>(sipSelf);

    sipVal = sipCpp->x;

    return PyFloat_FromDouble((double)sipVal);
}


extern "C" {static int varset_QSGGeometry_Point2D_x(void *, PyObject *, PyObject *);}
static int varset_QSGGeometry_Point2D_x(void *sipSelf, PyObject *sipPy, PyObject *)
{
    float sipVal;
     ::QSGGeometry::Point2D *sipCpp = reinterpret_cast< ::QSGGeometry::Point2D *>(sipSelf);

    sipVal = (float)PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->x = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QSGGeometry_Point2D_y(void *, PyObject *, PyObject *);}
static PyObject *varget_QSGGeometry_Point2D_y(void *sipSelf, PyObject *, PyObject *)
{
    float sipVal;
     ::QSGGeometry::Point2D *sipCpp = reinterpret_cast< ::QSGGeometry::Point2D *>(sipSelf);

    sipVal = sipCpp->y;

    return PyFloat_FromDouble((double)sipVal);
}


extern "C" {static int varset_QSGGeometry_Point2D_y(void *, PyObject *, PyObject *);}
static int varset_QSGGeometry_Point2D_y(void *sipSelf, PyObject *sipPy, PyObject *)
{
    float sipVal;
     ::QSGGeometry::Point2D *sipCpp = reinterpret_cast< ::QSGGeometry::Point2D *>(sipSelf);

    sipVal = (float)PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->y = sipVal;

    return 0;
}

sipVariableDef variables_QSGGeometry_Point2D[] = {
    {InstanceVariable, sipName_x, (PyMethodDef *)varget_QSGGeometry_Point2D_x, (PyMethodDef *)varset_QSGGeometry_Point2D_x, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_y, (PyMethodDef *)varget_QSGGeometry_Point2D_y, (PyMethodDef *)varset_QSGGeometry_Point2D_y, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_QSGGeometry_Point2D, "\1QSGGeometry.Point2D()\n"
"QSGGeometry.Point2D(QSGGeometry.Point2D)");


static pyqt5ClassPluginDef plugin_QSGGeometry_Point2D = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGGeometry_Point2D = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGGeometry__Point2D,
        {SIP_NULLPTR},
        &plugin_QSGGeometry_Point2D
    },
    {
        sipNameNr_Point2D,
        {41, 255, 0},
        1, methods_QSGGeometry_Point2D,
        0, SIP_NULLPTR,
        2, variables_QSGGeometry_Point2D,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSGGeometry_Point2D,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QSGGeometry_Point2D,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGGeometry_Point2D,
    assign_QSGGeometry_Point2D,
    array_QSGGeometry_Point2D,
    copy_QSGGeometry_Point2D,
    release_QSGGeometry_Point2D,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
#include <qsggeometry.h>
#line 74 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
#include <qsggeometry.h>
#include <QVector>
#line 1284 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
#include <qsggeometry.h>
#line 55 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
#include <qsggeometry.h>
#line 1290 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"


/* Call the instance's destructor. */
extern "C" {static void release_QSGGeometry_AttributeSet(void *, int);}
static void release_QSGGeometry_AttributeSet(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSGGeometry::AttributeSet *>(sipCppV);
}


extern "C" {static void dealloc_QSGGeometry_AttributeSet(sipSimpleWrapper *);}
static void dealloc_QSGGeometry_AttributeSet(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGGeometry_AttributeSet(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QSGGeometry_AttributeSet(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGGeometry_AttributeSet(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QSGGeometry::AttributeSet *sipCpp = SIP_NULLPTR;

    {
        PyObject * a0;
        int a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_stride,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "P0|i", &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 80 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
            PyObject *iter = PyObject_GetIter(a0);
            
            if (!iter
            #if PY_MAJOR_VERSION < 3
                || PyString_Check(a0)
            #endif
                || PyUnicode_Check(a0))
            {
                Py_XDECREF(iter);
                PyErr_SetString(PyExc_TypeError, "iterable object expected");
                sipError = sipErrorContinue;
            }
            else
            {
                QVector<QSGGeometry::Attribute> attrs;
                int stride = 0;
            
                for (Py_ssize_t i = 0; ; ++i)
                {
                    PyErr_Clear();
                    PyObject *itm = PyIter_Next(iter);
            
                    if (!itm)
                    {
                        if (PyErr_Occurred())
                            sipError = sipErrorFail;
            
                        break;
                    }
            
                    int state, is_err = 0;
                    QSGGeometry::Attribute *attr;
            
                    attr = reinterpret_cast<QSGGeometry::Attribute *>(
                            sipForceConvertToType(itm, sipType_QSGGeometry_Attribute, 0,
                            SIP_NOT_NONE, &state, &is_err));
            
                    if (is_err)
                    {
                        PyErr_Format(PyExc_TypeError,
                                "index %zd has type '%s' but 'QSGGeometry.Attribute' is expected",
                                i, sipPyTypeName(Py_TYPE(itm)));
            
                        Py_DECREF(itm);
                        sipError = sipErrorFail;
            
                        break;
                    }
            
                    // Calculate the stride if there no explicit one.
                    if (a1 <= 0)
                    {
                        int size;
            
                        switch (attr->type)
                        {
                        case GL_BYTE:
                            size = sizeof (qint8);
                            break;
            
            #if defined(SIPFeature_PyQt_Desktop_OpenGL)
            #if GL_DOUBLE != GL_FLOAT
                        case GL_DOUBLE:
                            size = sizeof (double);
                            break;
            #endif
            #endif
            
                        case GL_FLOAT:
                            size = sizeof (float);
                            break;
            
                        case GL_INT:
                            size = sizeof (qint32);
                            break;
            
                        default:
                            size = 0;
                        }
            
                        if (!size)
                        {
                            PyErr_Format(PyExc_TypeError,
                                    "index %zd has an unsupported primitive type",
                                    i);
            
                            sipReleaseType(attr, sipType_QSGGeometry_Attribute, state);
                            Py_DECREF(itm);
                            sipError = sipErrorFail;
            
                            break;
                        }
            
                        stride += attr->tupleSize * size;
                    }
            
                    attrs.append(*attr);
            
                    sipReleaseType(attr, sipType_QSGGeometry_Attribute, state);
                    Py_DECREF(itm);
                }
            
                Py_DECREF(iter);
            
                if (sipError == sipErrorNone)
                {
                    if (attrs.isEmpty())
                    {
                        PyErr_SetString(PyExc_TypeError, "no attributes defined");
                        sipError = sipErrorFail;
                    }
                    else
                    {
                        PyObject *bytes = SIPBytes_FromStringAndSize(
                                reinterpret_cast<char *>(attrs.data()),
                                sizeof (QSGGeometry::Attribute) * attrs.size());
            
                        if (!bytes)
                        {
                            sipError = sipErrorFail;
                        }
                        else
                        {
                            sipCpp = new QSGGeometry::AttributeSet;
            
                            sipCpp->count = attrs.size();
                            sipCpp->stride = (a1 > 0 ? a1 : stride);
                            sipCpp->attributes = reinterpret_cast<QSGGeometry::Attribute *>(
                                    SIPBytes_AsString(bytes));
            
                            sipSetUserObject(sipSelf, bytes);
                        }
                    }
                }
            }
#line 1465 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

            if (sipError == sipErrorNone)
                return sipCpp;

            if (sipUnused)
            {
                Py_XDECREF(*sipUnused);
            }

            sipAddException(sipError, sipParseErr);

            if (sipError == sipErrorFail)
                return SIP_NULLPTR;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static PyObject *varget_QSGGeometry_AttributeSet_attributes(void *, PyObject *, PyObject *);}
static PyObject *varget_QSGGeometry_AttributeSet_attributes(void *sipSelf, PyObject *, PyObject *)
{
    PyObject *sipPy;
     ::QSGGeometry::AttributeSet *sipCpp = reinterpret_cast< ::QSGGeometry::AttributeSet *>(sipSelf);

#line 221 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
            sipPy = sipConvertToTypedArray((void *)sipCpp->attributes,
                    sipType_QSGGeometry_Attribute, "iiiI", sizeof (QSGGeometry::Attribute),
                    sipCpp->count, SIP_READ_ONLY);
#line 1496 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

    return sipPy;
}


extern "C" {static int varset_QSGGeometry_AttributeSet_attributes(void *, PyObject *, PyObject *);}
static int varset_QSGGeometry_AttributeSet_attributes(void *, PyObject *, PyObject *)
{
   int sipErr = 0;

#line 227 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
            sipErr = 1;
            PyErr_SetString(PyExc_ValueError, "array is read-only");
#line 1510 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

    return (sipErr ? -1 : 0);
}


extern "C" {static PyObject *varget_QSGGeometry_AttributeSet_count(void *, PyObject *, PyObject *);}
static PyObject *varget_QSGGeometry_AttributeSet_count(void *sipSelf, PyObject *, PyObject *)
{
    int sipVal;
     ::QSGGeometry::AttributeSet *sipCpp = reinterpret_cast< ::QSGGeometry::AttributeSet *>(sipSelf);

    sipVal = sipCpp->count;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_QSGGeometry_AttributeSet_count(void *, PyObject *, PyObject *);}
static int varset_QSGGeometry_AttributeSet_count(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
     ::QSGGeometry::AttributeSet *sipCpp = reinterpret_cast< ::QSGGeometry::AttributeSet *>(sipSelf);

    sipVal = sipLong_AsInt(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->count = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QSGGeometry_AttributeSet_stride(void *, PyObject *, PyObject *);}
static PyObject *varget_QSGGeometry_AttributeSet_stride(void *sipSelf, PyObject *, PyObject *)
{
    int sipVal;
     ::QSGGeometry::AttributeSet *sipCpp = reinterpret_cast< ::QSGGeometry::AttributeSet *>(sipSelf);

    sipVal = sipCpp->stride;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_QSGGeometry_AttributeSet_stride(void *, PyObject *, PyObject *);}
static int varset_QSGGeometry_AttributeSet_stride(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
     ::QSGGeometry::AttributeSet *sipCpp = reinterpret_cast< ::QSGGeometry::AttributeSet *>(sipSelf);

    sipVal = sipLong_AsInt(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->stride = sipVal;

    return 0;
}

sipVariableDef variables_QSGGeometry_AttributeSet[] = {
    {InstanceVariable, sipName_attributes, (PyMethodDef *)varget_QSGGeometry_AttributeSet_attributes, (PyMethodDef *)varset_QSGGeometry_AttributeSet_attributes, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_count, (PyMethodDef *)varget_QSGGeometry_AttributeSet_count, (PyMethodDef *)varset_QSGGeometry_AttributeSet_count, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_stride, (PyMethodDef *)varget_QSGGeometry_AttributeSet_stride, (PyMethodDef *)varset_QSGGeometry_AttributeSet_stride, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_QSGGeometry_AttributeSet, "\1QSGGeometry.AttributeSet(Iterable[QSGGeometry.Attribute], stride: int = 0)");


static pyqt5ClassPluginDef plugin_QSGGeometry_AttributeSet = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGGeometry_AttributeSet = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGGeometry__AttributeSet,
        {SIP_NULLPTR},
        &plugin_QSGGeometry_AttributeSet
    },
    {
        sipNameNr_AttributeSet,
        {41, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        3, variables_QSGGeometry_AttributeSet,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSGGeometry_AttributeSet,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QSGGeometry_AttributeSet,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGGeometry_AttributeSet,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSGGeometry_AttributeSet,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
#include <qsggeometry.h>
#line 55 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
#include <qsggeometry.h>
#line 1644 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
#include <qsggeometry.h>
#line 1648 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"


PyDoc_STRVAR(doc_QSGGeometry_Attribute_create, "create(int, int, int, isPosition: bool = False) -> QSGGeometry.Attribute");

extern "C" {static PyObject *meth_QSGGeometry_Attribute_create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSGGeometry_Attribute_create(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        bool a3 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_isPosition,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "iii|b", &a0, &a1, &a2, &a3))
        {
             ::QSGGeometry::Attribute*sipRes;

            sipRes = new  ::QSGGeometry::Attribute( ::QSGGeometry::Attribute::create(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QSGGeometry_Attribute,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Attribute, sipName_create, doc_QSGGeometry_Attribute_create);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGGeometry_Attribute_createWithAttributeType, "createWithAttributeType(int, int, int, QSGGeometry.AttributeType) -> QSGGeometry.Attribute");

extern "C" {static PyObject *meth_QSGGeometry_Attribute_createWithAttributeType(PyObject *, PyObject *);}
static PyObject *meth_QSGGeometry_Attribute_createWithAttributeType(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
         ::QSGGeometry::AttributeType a3;

        if (sipParseArgs(&sipParseErr, sipArgs, "iiiE", &a0, &a1, &a2, sipType_QSGGeometry_AttributeType, &a3))
        {
             ::QSGGeometry::Attribute*sipRes;

            sipRes = new  ::QSGGeometry::Attribute( ::QSGGeometry::Attribute::createWithAttributeType(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QSGGeometry_Attribute,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Attribute, sipName_createWithAttributeType, doc_QSGGeometry_Attribute_createWithAttributeType);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGGeometry_Attribute(void *, int);}
static void release_QSGGeometry_Attribute(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSGGeometry::Attribute *>(sipCppV);
}


extern "C" {static void assign_QSGGeometry_Attribute(void *, SIP_SSIZE_T, void *);}
static void assign_QSGGeometry_Attribute(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QSGGeometry::Attribute *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QSGGeometry::Attribute *>(sipSrc);
}


extern "C" {static void *array_QSGGeometry_Attribute(SIP_SSIZE_T);}
static void *array_QSGGeometry_Attribute(SIP_SSIZE_T sipNrElem)
{
    return new  ::QSGGeometry::Attribute[sipNrElem];
}


extern "C" {static void *copy_QSGGeometry_Attribute(const void *, SIP_SSIZE_T);}
static void *copy_QSGGeometry_Attribute(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QSGGeometry::Attribute(reinterpret_cast<const  ::QSGGeometry::Attribute *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSGGeometry_Attribute(sipSimpleWrapper *);}
static void dealloc_QSGGeometry_Attribute(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGGeometry_Attribute(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QSGGeometry_Attribute(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGGeometry_Attribute(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QSGGeometry::Attribute *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QSGGeometry::Attribute();

            return sipCpp;
        }
    }

    {
        const  ::QSGGeometry::Attribute* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QSGGeometry_Attribute, &a0))
        {
            sipCpp = new  ::QSGGeometry::Attribute(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QSGGeometry_Attribute[] = {
    {SIP_MLNAME_CAST(sipName_create), SIP_MLMETH_CAST(meth_QSGGeometry_Attribute_create), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSGGeometry_Attribute_create)},
    {SIP_MLNAME_CAST(sipName_createWithAttributeType), meth_QSGGeometry_Attribute_createWithAttributeType, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGGeometry_Attribute_createWithAttributeType)}
};


extern "C" {static PyObject *varget_QSGGeometry_Attribute_attributeType(void *, PyObject *, PyObject *);}
static PyObject *varget_QSGGeometry_Attribute_attributeType(void *sipSelf, PyObject *, PyObject *)
{
     ::QSGGeometry::AttributeType sipVal;
     ::QSGGeometry::Attribute *sipCpp = reinterpret_cast< ::QSGGeometry::Attribute *>(sipSelf);

    sipVal = sipCpp->attributeType;

    return sipConvertFromEnum(static_cast<int>(sipVal), sipType_QSGGeometry_AttributeType);
}


extern "C" {static int varset_QSGGeometry_Attribute_attributeType(void *, PyObject *, PyObject *);}
static int varset_QSGGeometry_Attribute_attributeType(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::QSGGeometry::AttributeType sipVal;
     ::QSGGeometry::Attribute *sipCpp = reinterpret_cast< ::QSGGeometry::Attribute *>(sipSelf);

    sipVal = ( ::QSGGeometry::AttributeType)sipConvertToEnum(sipPy, sipType_QSGGeometry_AttributeType);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->attributeType = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QSGGeometry_Attribute_isVertexCoordinate(void *, PyObject *, PyObject *);}
static PyObject *varget_QSGGeometry_Attribute_isVertexCoordinate(void *sipSelf, PyObject *, PyObject *)
{
     ::uint sipVal;
     ::QSGGeometry::Attribute *sipCpp = reinterpret_cast< ::QSGGeometry::Attribute *>(sipSelf);

    sipVal = sipCpp->isVertexCoordinate;

    return PyLong_FromUnsignedLong(sipVal);
}


extern "C" {static int varset_QSGGeometry_Attribute_isVertexCoordinate(void *, PyObject *, PyObject *);}
static int varset_QSGGeometry_Attribute_isVertexCoordinate(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::uint sipVal;
     ::QSGGeometry::Attribute *sipCpp = reinterpret_cast< ::QSGGeometry::Attribute *>(sipSelf);

    sipVal = sipLong_AsUnsignedInt(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->isVertexCoordinate = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QSGGeometry_Attribute_position(void *, PyObject *, PyObject *);}
static PyObject *varget_QSGGeometry_Attribute_position(void *sipSelf, PyObject *, PyObject *)
{
    int sipVal;
     ::QSGGeometry::Attribute *sipCpp = reinterpret_cast< ::QSGGeometry::Attribute *>(sipSelf);

    sipVal = sipCpp->position;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_QSGGeometry_Attribute_position(void *, PyObject *, PyObject *);}
static int varset_QSGGeometry_Attribute_position(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
     ::QSGGeometry::Attribute *sipCpp = reinterpret_cast< ::QSGGeometry::Attribute *>(sipSelf);

    sipVal = sipLong_AsInt(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->position = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QSGGeometry_Attribute_tupleSize(void *, PyObject *, PyObject *);}
static PyObject *varget_QSGGeometry_Attribute_tupleSize(void *sipSelf, PyObject *, PyObject *)
{
    int sipVal;
     ::QSGGeometry::Attribute *sipCpp = reinterpret_cast< ::QSGGeometry::Attribute *>(sipSelf);

    sipVal = sipCpp->tupleSize;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_QSGGeometry_Attribute_tupleSize(void *, PyObject *, PyObject *);}
static int varset_QSGGeometry_Attribute_tupleSize(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
     ::QSGGeometry::Attribute *sipCpp = reinterpret_cast< ::QSGGeometry::Attribute *>(sipSelf);

    sipVal = sipLong_AsInt(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->tupleSize = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QSGGeometry_Attribute_type(void *, PyObject *, PyObject *);}
static PyObject *varget_QSGGeometry_Attribute_type(void *sipSelf, PyObject *, PyObject *)
{
    int sipVal;
     ::QSGGeometry::Attribute *sipCpp = reinterpret_cast< ::QSGGeometry::Attribute *>(sipSelf);

    sipVal = sipCpp->type;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_QSGGeometry_Attribute_type(void *, PyObject *, PyObject *);}
static int varset_QSGGeometry_Attribute_type(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
     ::QSGGeometry::Attribute *sipCpp = reinterpret_cast< ::QSGGeometry::Attribute *>(sipSelf);

    sipVal = sipLong_AsInt(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->type = sipVal;

    return 0;
}

sipVariableDef variables_QSGGeometry_Attribute[] = {
    {InstanceVariable, sipName_attributeType, (PyMethodDef *)varget_QSGGeometry_Attribute_attributeType, (PyMethodDef *)varset_QSGGeometry_Attribute_attributeType, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_isVertexCoordinate, (PyMethodDef *)varget_QSGGeometry_Attribute_isVertexCoordinate, (PyMethodDef *)varset_QSGGeometry_Attribute_isVertexCoordinate, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_position, (PyMethodDef *)varget_QSGGeometry_Attribute_position, (PyMethodDef *)varset_QSGGeometry_Attribute_position, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_tupleSize, (PyMethodDef *)varget_QSGGeometry_Attribute_tupleSize, (PyMethodDef *)varset_QSGGeometry_Attribute_tupleSize, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_type, (PyMethodDef *)varget_QSGGeometry_Attribute_type, (PyMethodDef *)varset_QSGGeometry_Attribute_type, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_QSGGeometry_Attribute, "\1QSGGeometry.Attribute()\n"
"QSGGeometry.Attribute(QSGGeometry.Attribute)");


static pyqt5ClassPluginDef plugin_QSGGeometry_Attribute = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGGeometry_Attribute = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGGeometry__Attribute,
        {SIP_NULLPTR},
        &plugin_QSGGeometry_Attribute
    },
    {
        sipNameNr_Attribute,
        {41, 255, 0},
        2, methods_QSGGeometry_Attribute,
        0, SIP_NULLPTR,
        5, variables_QSGGeometry_Attribute,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSGGeometry_Attribute,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QSGGeometry_Attribute,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGGeometry_Attribute,
    assign_QSGGeometry_Attribute,
    array_QSGGeometry_Attribute,
    copy_QSGGeometry_Attribute,
    release_QSGGeometry_Attribute,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
#include <qsggeometry.h>
#line 2011 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
#include <qsggeometry.h>
#line 74 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
#include <qsggeometry.h>
#include <QVector>
#line 2018 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 2021 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"


class sipQSGGeometry : public  ::QSGGeometry
{
public:
    sipQSGGeometry(const  ::QSGGeometry::AttributeSet&,int,int,int);
    sipQSGGeometry(const  ::QSGGeometry&);
    ~sipQSGGeometry();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSGGeometry(const sipQSGGeometry &);
    sipQSGGeometry &operator = (const sipQSGGeometry &);
};

sipQSGGeometry::sipQSGGeometry(const  ::QSGGeometry::AttributeSet& a0,int a1,int a2,int a3):  ::QSGGeometry(a0,a1,a2,a3), sipPySelf(SIP_NULLPTR)
{
}

sipQSGGeometry::sipQSGGeometry(const  ::QSGGeometry& a0):  ::QSGGeometry(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQSGGeometry::~sipQSGGeometry()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QSGGeometry_defaultAttributes_Point2D, "defaultAttributes_Point2D() -> QSGGeometry.AttributeSet");

extern "C" {static PyObject *meth_QSGGeometry_defaultAttributes_Point2D(PyObject *, PyObject *);}
static PyObject *meth_QSGGeometry_defaultAttributes_Point2D(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            const  ::QSGGeometry::AttributeSet*sipRes;

            sipRes = & ::QSGGeometry::defaultAttributes_Point2D();

            return sipConvertFromType(const_cast< ::QSGGeometry::AttributeSet *>(sipRes),sipType_QSGGeometry_AttributeSet,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGGeometry, sipName_defaultAttributes_Point2D, doc_QSGGeometry_defaultAttributes_Point2D);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGGeometry_defaultAttributes_TexturedPoint2D, "defaultAttributes_TexturedPoint2D() -> QSGGeometry.AttributeSet");

extern "C" {static PyObject *meth_QSGGeometry_defaultAttributes_TexturedPoint2D(PyObject *, PyObject *);}
static PyObject *meth_QSGGeometry_defaultAttributes_TexturedPoint2D(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            const  ::QSGGeometry::AttributeSet*sipRes;

            sipRes = & ::QSGGeometry::defaultAttributes_TexturedPoint2D();

            return sipConvertFromType(const_cast< ::QSGGeometry::AttributeSet *>(sipRes),sipType_QSGGeometry_AttributeSet,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGGeometry, sipName_defaultAttributes_TexturedPoint2D, doc_QSGGeometry_defaultAttributes_TexturedPoint2D);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGGeometry_defaultAttributes_ColoredPoint2D, "defaultAttributes_ColoredPoint2D() -> QSGGeometry.AttributeSet");

extern "C" {static PyObject *meth_QSGGeometry_defaultAttributes_ColoredPoint2D(PyObject *, PyObject *);}
static PyObject *meth_QSGGeometry_defaultAttributes_ColoredPoint2D(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            const  ::QSGGeometry::AttributeSet*sipRes;

            sipRes = & ::QSGGeometry::defaultAttributes_ColoredPoint2D();

            return sipConvertFromType(const_cast< ::QSGGeometry::AttributeSet *>(sipRes),sipType_QSGGeometry_AttributeSet,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGGeometry, sipName_defaultAttributes_ColoredPoint2D, doc_QSGGeometry_defaultAttributes_ColoredPoint2D);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGGeometry_setDrawingMode, "setDrawingMode(self, int)");

extern "C" {static PyObject *meth_QSGGeometry_setDrawingMode(PyObject *, PyObject *);}
static PyObject *meth_QSGGeometry_setDrawingMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::GLenum a0;
         ::QSGGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QSGGeometry, &sipCpp, &a0))
        {
            sipCpp->setDrawingMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGGeometry, sipName_setDrawingMode, doc_QSGGeometry_setDrawingMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGGeometry_drawingMode, "drawingMode(self) -> int");

extern "C" {static PyObject *meth_QSGGeometry_drawingMode(PyObject *, PyObject *);}
static PyObject *meth_QSGGeometry_drawingMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGGeometry, &sipCpp))
        {
             ::GLenum sipRes;

            sipRes = sipCpp->drawingMode();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGGeometry, sipName_drawingMode, doc_QSGGeometry_drawingMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGGeometry_allocate, "allocate(self, int, indexCount: int = 0)");

extern "C" {static PyObject *meth_QSGGeometry_allocate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSGGeometry_allocate(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1 = 0;
         ::QSGGeometry *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_indexCount,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|i", &sipSelf, sipType_QSGGeometry, &sipCpp, &a0, &a1))
        {
            sipCpp->allocate(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGGeometry, sipName_allocate, doc_QSGGeometry_allocate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGGeometry_vertexCount, "vertexCount(self) -> int");

extern "C" {static PyObject *meth_QSGGeometry_vertexCount(PyObject *, PyObject *);}
static PyObject *meth_QSGGeometry_vertexCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGGeometry, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->vertexCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGGeometry, sipName_vertexCount, doc_QSGGeometry_vertexCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGGeometry_vertexData, "vertexData(self) -> sip.voidptr");

extern "C" {static PyObject *meth_QSGGeometry_vertexData(PyObject *, PyObject *);}
static PyObject *meth_QSGGeometry_vertexData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGGeometry, &sipCpp))
        {
            void*sipRes;

            sipRes = sipCpp->vertexData();

            return sipConvertFromVoidPtr(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGGeometry, sipName_vertexData, doc_QSGGeometry_vertexData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGGeometry_indexType, "indexType(self) -> int");

extern "C" {static PyObject *meth_QSGGeometry_indexType(PyObject *, PyObject *);}
static PyObject *meth_QSGGeometry_indexType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGGeometry, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->indexType();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGGeometry, sipName_indexType, doc_QSGGeometry_indexType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGGeometry_indexCount, "indexCount(self) -> int");

extern "C" {static PyObject *meth_QSGGeometry_indexCount(PyObject *, PyObject *);}
static PyObject *meth_QSGGeometry_indexCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGGeometry, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->indexCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGGeometry, sipName_indexCount, doc_QSGGeometry_indexCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGGeometry_indexData, "indexData(self) -> sip.voidptr");

extern "C" {static PyObject *meth_QSGGeometry_indexData(PyObject *, PyObject *);}
static PyObject *meth_QSGGeometry_indexData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGGeometry, &sipCpp))
        {
            void*sipRes;

            sipRes = sipCpp->indexData();

            return sipConvertFromVoidPtr(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGGeometry, sipName_indexData, doc_QSGGeometry_indexData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGGeometry_attributeCount, "attributeCount(self) -> int");

extern "C" {static PyObject *meth_QSGGeometry_attributeCount(PyObject *, PyObject *);}
static PyObject *meth_QSGGeometry_attributeCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGGeometry, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->attributeCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGGeometry, sipName_attributeCount, doc_QSGGeometry_attributeCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGGeometry_attributes, "attributes(self) -> sip.array[QSGGeometry.Attribute]");

extern "C" {static PyObject *meth_QSGGeometry_attributes(PyObject *, PyObject *);}
static PyObject *meth_QSGGeometry_attributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGGeometry, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 298 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
        sipRes = sipConvertToTypedArray((void *)sipCpp->attributes(),
                sipType_QSGGeometry_Attribute, "iiiI", sizeof (QSGGeometry::Attribute),
                sipCpp->attributeCount(), SIP_READ_ONLY);
#line 2408 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGGeometry, sipName_attributes, doc_QSGGeometry_attributes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGGeometry_sizeOfVertex, "sizeOfVertex(self) -> int");

extern "C" {static PyObject *meth_QSGGeometry_sizeOfVertex(PyObject *, PyObject *);}
static PyObject *meth_QSGGeometry_sizeOfVertex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGGeometry, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sizeOfVertex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGGeometry, sipName_sizeOfVertex, doc_QSGGeometry_sizeOfVertex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGGeometry_updateRectGeometry, "updateRectGeometry(QSGGeometry, QRectF)");

extern "C" {static PyObject *meth_QSGGeometry_updateRectGeometry(PyObject *, PyObject *);}
static PyObject *meth_QSGGeometry_updateRectGeometry(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGGeometry* a0;
        const  ::QRectF* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J9", sipType_QSGGeometry, &a0, sipType_QRectF, &a1))
        {
             ::QSGGeometry::updateRectGeometry(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGGeometry, sipName_updateRectGeometry, doc_QSGGeometry_updateRectGeometry);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGGeometry_updateTexturedRectGeometry, "updateTexturedRectGeometry(QSGGeometry, QRectF, QRectF)");

extern "C" {static PyObject *meth_QSGGeometry_updateTexturedRectGeometry(PyObject *, PyObject *);}
static PyObject *meth_QSGGeometry_updateTexturedRectGeometry(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGGeometry* a0;
        const  ::QRectF* a1;
        const  ::QRectF* a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J9J9", sipType_QSGGeometry, &a0, sipType_QRectF, &a1, sipType_QRectF, &a2))
        {
             ::QSGGeometry::updateTexturedRectGeometry(a0,*a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGGeometry, sipName_updateTexturedRectGeometry, doc_QSGGeometry_updateTexturedRectGeometry);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGGeometry_setIndexDataPattern, "setIndexDataPattern(self, QSGGeometry.DataPattern)");

extern "C" {static PyObject *meth_QSGGeometry_setIndexDataPattern(PyObject *, PyObject *);}
static PyObject *meth_QSGGeometry_setIndexDataPattern(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGGeometry::DataPattern a0;
         ::QSGGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSGGeometry, &sipCpp, sipType_QSGGeometry_DataPattern, &a0))
        {
            sipCpp->setIndexDataPattern(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGGeometry, sipName_setIndexDataPattern, doc_QSGGeometry_setIndexDataPattern);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGGeometry_indexDataPattern, "indexDataPattern(self) -> QSGGeometry.DataPattern");

extern "C" {static PyObject *meth_QSGGeometry_indexDataPattern(PyObject *, PyObject *);}
static PyObject *meth_QSGGeometry_indexDataPattern(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGGeometry, &sipCpp))
        {
             ::QSGGeometry::DataPattern sipRes;

            sipRes = sipCpp->indexDataPattern();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSGGeometry_DataPattern);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGGeometry, sipName_indexDataPattern, doc_QSGGeometry_indexDataPattern);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGGeometry_setVertexDataPattern, "setVertexDataPattern(self, QSGGeometry.DataPattern)");

extern "C" {static PyObject *meth_QSGGeometry_setVertexDataPattern(PyObject *, PyObject *);}
static PyObject *meth_QSGGeometry_setVertexDataPattern(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGGeometry::DataPattern a0;
         ::QSGGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSGGeometry, &sipCpp, sipType_QSGGeometry_DataPattern, &a0))
        {
            sipCpp->setVertexDataPattern(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGGeometry, sipName_setVertexDataPattern, doc_QSGGeometry_setVertexDataPattern);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGGeometry_vertexDataPattern, "vertexDataPattern(self) -> QSGGeometry.DataPattern");

extern "C" {static PyObject *meth_QSGGeometry_vertexDataPattern(PyObject *, PyObject *);}
static PyObject *meth_QSGGeometry_vertexDataPattern(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGGeometry, &sipCpp))
        {
             ::QSGGeometry::DataPattern sipRes;

            sipRes = sipCpp->vertexDataPattern();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSGGeometry_DataPattern);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGGeometry, sipName_vertexDataPattern, doc_QSGGeometry_vertexDataPattern);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGGeometry_markIndexDataDirty, "markIndexDataDirty(self)");

extern "C" {static PyObject *meth_QSGGeometry_markIndexDataDirty(PyObject *, PyObject *);}
static PyObject *meth_QSGGeometry_markIndexDataDirty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGGeometry, &sipCpp))
        {
            sipCpp->markIndexDataDirty();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGGeometry, sipName_markIndexDataDirty, doc_QSGGeometry_markIndexDataDirty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGGeometry_markVertexDataDirty, "markVertexDataDirty(self)");

extern "C" {static PyObject *meth_QSGGeometry_markVertexDataDirty(PyObject *, PyObject *);}
static PyObject *meth_QSGGeometry_markVertexDataDirty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGGeometry, &sipCpp))
        {
            sipCpp->markVertexDataDirty();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGGeometry, sipName_markVertexDataDirty, doc_QSGGeometry_markVertexDataDirty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGGeometry_lineWidth, "lineWidth(self) -> float");

extern "C" {static PyObject *meth_QSGGeometry_lineWidth(PyObject *, PyObject *);}
static PyObject *meth_QSGGeometry_lineWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGGeometry, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->lineWidth();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGGeometry, sipName_lineWidth, doc_QSGGeometry_lineWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGGeometry_setLineWidth, "setLineWidth(self, float)");

extern "C" {static PyObject *meth_QSGGeometry_setLineWidth(PyObject *, PyObject *);}
static PyObject *meth_QSGGeometry_setLineWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
         ::QSGGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QSGGeometry, &sipCpp, &a0))
        {
            sipCpp->setLineWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGGeometry, sipName_setLineWidth, doc_QSGGeometry_setLineWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGGeometry_indexDataAsUInt, "indexDataAsUInt(self) -> sip.array[int]");

extern "C" {static PyObject *meth_QSGGeometry_indexDataAsUInt(PyObject *, PyObject *);}
static PyObject *meth_QSGGeometry_indexDataAsUInt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGGeometry, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 316 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
        sipRes = sipConvertToArray(sipCpp->indexDataAsUInt(), "I",
                sipCpp->indexCount(), 0);
#line 2746 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGGeometry, sipName_indexDataAsUInt, doc_QSGGeometry_indexDataAsUInt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGGeometry_indexDataAsUShort, "indexDataAsUShort(self) -> sip.array[int]");

extern "C" {static PyObject *meth_QSGGeometry_indexDataAsUShort(PyObject *, PyObject *);}
static PyObject *meth_QSGGeometry_indexDataAsUShort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGGeometry, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 322 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
        sipRes = sipConvertToArray(sipCpp->indexDataAsUShort(), "H",
                sipCpp->indexCount(), 0);
#line 2777 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGGeometry, sipName_indexDataAsUShort, doc_QSGGeometry_indexDataAsUShort);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGGeometry_vertexDataAsPoint2D, "vertexDataAsPoint2D(self) -> sip.array[QSGGeometry.Point2D]");

extern "C" {static PyObject *meth_QSGGeometry_vertexDataAsPoint2D(PyObject *, PyObject *);}
static PyObject *meth_QSGGeometry_vertexDataAsPoint2D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGGeometry, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 328 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
        sipRes = sipConvertToTypedArray(sipCpp->vertexDataAsPoint2D(),
                sipType_QSGGeometry_Point2D, "ff", sizeof (QSGGeometry::Point2D),
                sipCpp->vertexCount(), 0);
#line 2809 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGGeometry, sipName_vertexDataAsPoint2D, doc_QSGGeometry_vertexDataAsPoint2D);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGGeometry_vertexDataAsTexturedPoint2D, "vertexDataAsTexturedPoint2D(self) -> sip.array[QSGGeometry.TexturedPoint2D]");

extern "C" {static PyObject *meth_QSGGeometry_vertexDataAsTexturedPoint2D(PyObject *, PyObject *);}
static PyObject *meth_QSGGeometry_vertexDataAsTexturedPoint2D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGGeometry, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 335 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
        sipRes = sipConvertToTypedArray(sipCpp->vertexDataAsTexturedPoint2D(),
                sipType_QSGGeometry_TexturedPoint2D, "ffff",
                sizeof (QSGGeometry::TexturedPoint2D), sipCpp->vertexCount(), 0);
#line 2841 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGGeometry, sipName_vertexDataAsTexturedPoint2D, doc_QSGGeometry_vertexDataAsTexturedPoint2D);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGGeometry_vertexDataAsColoredPoint2D, "vertexDataAsColoredPoint2D(self) -> sip.array[QSGGeometry.ColoredPoint2D]");

extern "C" {static PyObject *meth_QSGGeometry_vertexDataAsColoredPoint2D(PyObject *, PyObject *);}
static PyObject *meth_QSGGeometry_vertexDataAsColoredPoint2D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGGeometry, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 342 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
        sipRes = sipConvertToTypedArray(sipCpp->vertexDataAsColoredPoint2D(),
                sipType_QSGGeometry_ColoredPoint2D, "ffbbbb",
                sizeof (QSGGeometry::ColoredPoint2D), sipCpp->vertexCount(), 0);
#line 2873 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGGeometry, sipName_vertexDataAsColoredPoint2D, doc_QSGGeometry_vertexDataAsColoredPoint2D);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGGeometry_sizeOfIndex, "sizeOfIndex(self) -> int");

extern "C" {static PyObject *meth_QSGGeometry_sizeOfIndex(PyObject *, PyObject *);}
static PyObject *meth_QSGGeometry_sizeOfIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGGeometry, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sizeOfIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGGeometry, sipName_sizeOfIndex, doc_QSGGeometry_sizeOfIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGGeometry_updateColoredRectGeometry, "updateColoredRectGeometry(QSGGeometry, QRectF)");

extern "C" {static PyObject *meth_QSGGeometry_updateColoredRectGeometry(PyObject *, PyObject *);}
static PyObject *meth_QSGGeometry_updateColoredRectGeometry(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGGeometry* a0;
        const  ::QRectF* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J9", sipType_QSGGeometry, &a0, sipType_QRectF, &a1))
        {
             ::QSGGeometry::updateColoredRectGeometry(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGGeometry, sipName_updateColoredRectGeometry, doc_QSGGeometry_updateColoredRectGeometry);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGGeometry(void *, int);}
static void release_QSGGeometry(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQSGGeometry *>(sipCppV);
    else
        delete reinterpret_cast< ::QSGGeometry *>(sipCppV);
}


extern "C" {static void dealloc_QSGGeometry(sipSimpleWrapper *);}
static void dealloc_QSGGeometry(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSGGeometry *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGGeometry(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSGGeometry(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGGeometry(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQSGGeometry *sipCpp = SIP_NULLPTR;

    {
        const  ::QSGGeometry::AttributeSet* a0;
        PyObject *a0Keep;
        int a1;
        int a2 = 0;
        int a3 = GL_UNSIGNED_SHORT;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_indexCount,
            sipName_indexType,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "@J9i|ii", &a0Keep, sipType_QSGGeometry_AttributeSet, &a0, &a1, &a2, &a3))
        {
            sipCpp = new sipQSGGeometry(*a0,a1,a2,a3);

            sipKeepReference((PyObject *)sipSelf, -2, a0Keep);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QSGGeometry* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QSGGeometry, &a0))
        {
            sipCpp = new sipQSGGeometry(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QSGGeometry[] = {
    {SIP_MLNAME_CAST(sipName_allocate), SIP_MLMETH_CAST(meth_QSGGeometry_allocate), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSGGeometry_allocate)},
    {SIP_MLNAME_CAST(sipName_attributeCount), meth_QSGGeometry_attributeCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGGeometry_attributeCount)},
    {SIP_MLNAME_CAST(sipName_attributes), meth_QSGGeometry_attributes, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGGeometry_attributes)},
    {SIP_MLNAME_CAST(sipName_defaultAttributes_ColoredPoint2D), meth_QSGGeometry_defaultAttributes_ColoredPoint2D, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGGeometry_defaultAttributes_ColoredPoint2D)},
    {SIP_MLNAME_CAST(sipName_defaultAttributes_Point2D), meth_QSGGeometry_defaultAttributes_Point2D, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGGeometry_defaultAttributes_Point2D)},
    {SIP_MLNAME_CAST(sipName_defaultAttributes_TexturedPoint2D), meth_QSGGeometry_defaultAttributes_TexturedPoint2D, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGGeometry_defaultAttributes_TexturedPoint2D)},
    {SIP_MLNAME_CAST(sipName_drawingMode), meth_QSGGeometry_drawingMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGGeometry_drawingMode)},
    {SIP_MLNAME_CAST(sipName_indexCount), meth_QSGGeometry_indexCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGGeometry_indexCount)},
    {SIP_MLNAME_CAST(sipName_indexData), meth_QSGGeometry_indexData, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGGeometry_indexData)},
    {SIP_MLNAME_CAST(sipName_indexDataAsUInt), meth_QSGGeometry_indexDataAsUInt, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGGeometry_indexDataAsUInt)},
    {SIP_MLNAME_CAST(sipName_indexDataAsUShort), meth_QSGGeometry_indexDataAsUShort, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGGeometry_indexDataAsUShort)},
    {SIP_MLNAME_CAST(sipName_indexDataPattern), meth_QSGGeometry_indexDataPattern, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGGeometry_indexDataPattern)},
    {SIP_MLNAME_CAST(sipName_indexType), meth_QSGGeometry_indexType, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGGeometry_indexType)},
    {SIP_MLNAME_CAST(sipName_lineWidth), meth_QSGGeometry_lineWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGGeometry_lineWidth)},
    {SIP_MLNAME_CAST(sipName_markIndexDataDirty), meth_QSGGeometry_markIndexDataDirty, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGGeometry_markIndexDataDirty)},
    {SIP_MLNAME_CAST(sipName_markVertexDataDirty), meth_QSGGeometry_markVertexDataDirty, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGGeometry_markVertexDataDirty)},
    {SIP_MLNAME_CAST(sipName_setDrawingMode), meth_QSGGeometry_setDrawingMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGGeometry_setDrawingMode)},
    {SIP_MLNAME_CAST(sipName_setIndexDataPattern), meth_QSGGeometry_setIndexDataPattern, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGGeometry_setIndexDataPattern)},
    {SIP_MLNAME_CAST(sipName_setLineWidth), meth_QSGGeometry_setLineWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGGeometry_setLineWidth)},
    {SIP_MLNAME_CAST(sipName_setVertexDataPattern), meth_QSGGeometry_setVertexDataPattern, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGGeometry_setVertexDataPattern)},
    {SIP_MLNAME_CAST(sipName_sizeOfIndex), meth_QSGGeometry_sizeOfIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGGeometry_sizeOfIndex)},
    {SIP_MLNAME_CAST(sipName_sizeOfVertex), meth_QSGGeometry_sizeOfVertex, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGGeometry_sizeOfVertex)},
    {SIP_MLNAME_CAST(sipName_updateColoredRectGeometry), meth_QSGGeometry_updateColoredRectGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGGeometry_updateColoredRectGeometry)},
    {SIP_MLNAME_CAST(sipName_updateRectGeometry), meth_QSGGeometry_updateRectGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGGeometry_updateRectGeometry)},
    {SIP_MLNAME_CAST(sipName_updateTexturedRectGeometry), meth_QSGGeometry_updateTexturedRectGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGGeometry_updateTexturedRectGeometry)},
    {SIP_MLNAME_CAST(sipName_vertexCount), meth_QSGGeometry_vertexCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGGeometry_vertexCount)},
    {SIP_MLNAME_CAST(sipName_vertexData), meth_QSGGeometry_vertexData, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGGeometry_vertexData)},
    {SIP_MLNAME_CAST(sipName_vertexDataAsColoredPoint2D), meth_QSGGeometry_vertexDataAsColoredPoint2D, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGGeometry_vertexDataAsColoredPoint2D)},
    {SIP_MLNAME_CAST(sipName_vertexDataAsPoint2D), meth_QSGGeometry_vertexDataAsPoint2D, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGGeometry_vertexDataAsPoint2D)},
    {SIP_MLNAME_CAST(sipName_vertexDataAsTexturedPoint2D), meth_QSGGeometry_vertexDataAsTexturedPoint2D, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGGeometry_vertexDataAsTexturedPoint2D)},
    {SIP_MLNAME_CAST(sipName_vertexDataPattern), meth_QSGGeometry_vertexDataPattern, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGGeometry_vertexDataPattern)}
};

static sipEnumMemberDef enummembers_QSGGeometry[] = {
    {sipName_AlwaysUploadPattern, static_cast<int>( ::QSGGeometry::AlwaysUploadPattern), 46},
    {sipName_ByteType, static_cast<int>( ::QSGGeometry::ByteType), 50},
    {sipName_ColorAttribute, static_cast<int>( ::QSGGeometry::ColorAttribute), 44},
    {sipName_DrawLineLoop, static_cast<int>( ::QSGGeometry::DrawLineLoop), 47},
    {sipName_DrawLineStrip, static_cast<int>( ::QSGGeometry::DrawLineStrip), 47},
    {sipName_DrawLines, static_cast<int>( ::QSGGeometry::DrawLines), 47},
    {sipName_DrawPoints, static_cast<int>( ::QSGGeometry::DrawPoints), 47},
    {sipName_DrawTriangleFan, static_cast<int>( ::QSGGeometry::DrawTriangleFan), 47},
    {sipName_DrawTriangleStrip, static_cast<int>( ::QSGGeometry::DrawTriangleStrip), 47},
    {sipName_DrawTriangles, static_cast<int>( ::QSGGeometry::DrawTriangles), 47},
    {sipName_DynamicPattern, static_cast<int>( ::QSGGeometry::DynamicPattern), 46},
    {sipName_FloatType, static_cast<int>( ::QSGGeometry::FloatType), 50},
    {sipName_GL_BYTE, static_cast<int>(GL_BYTE), -1},
    {sipName_GL_FLOAT, static_cast<int>(GL_FLOAT), -1},
    {sipName_GL_INT, static_cast<int>(GL_INT), -1},
    {sipName_GL_LINES, static_cast<int>(GL_LINES), -1},
    {sipName_GL_LINE_LOOP, static_cast<int>(GL_LINE_LOOP), -1},
    {sipName_GL_LINE_STRIP, static_cast<int>(GL_LINE_STRIP), -1},
    {sipName_GL_POINTS, static_cast<int>(GL_POINTS), -1},
    {sipName_GL_TRIANGLES, static_cast<int>(GL_TRIANGLES), -1},
    {sipName_GL_TRIANGLE_FAN, static_cast<int>(GL_TRIANGLE_FAN), -1},
    {sipName_GL_TRIANGLE_STRIP, static_cast<int>(GL_TRIANGLE_STRIP), -1},
    {sipName_IntType, static_cast<int>( ::QSGGeometry::IntType), 50},
    {sipName_PositionAttribute, static_cast<int>( ::QSGGeometry::PositionAttribute), 44},
    {sipName_ShortType, static_cast<int>( ::QSGGeometry::ShortType), 50},
    {sipName_StaticPattern, static_cast<int>( ::QSGGeometry::StaticPattern), 46},
    {sipName_StreamPattern, static_cast<int>( ::QSGGeometry::StreamPattern), 46},
    {sipName_TexCoord1Attribute, static_cast<int>( ::QSGGeometry::TexCoord1Attribute), 44},
    {sipName_TexCoord2Attribute, static_cast<int>( ::QSGGeometry::TexCoord2Attribute), 44},
    {sipName_TexCoordAttribute, static_cast<int>( ::QSGGeometry::TexCoordAttribute), 44},
    {sipName_UnknownAttribute, static_cast<int>( ::QSGGeometry::UnknownAttribute), 44},
    {sipName_UnsignedByteType, static_cast<int>( ::QSGGeometry::UnsignedByteType), 50},
    {sipName_UnsignedIntType, static_cast<int>( ::QSGGeometry::UnsignedIntType), 50},
    {sipName_UnsignedShortType, static_cast<int>( ::QSGGeometry::UnsignedShortType), 50},
};

PyDoc_STRVAR(doc_QSGGeometry, "\1QSGGeometry(QSGGeometry.AttributeSet, int, indexCount: int = 0, indexType: int = GL_UNSIGNED_SHORT)\n"
"QSGGeometry(QSGGeometry)");


static pyqt5ClassPluginDef plugin_QSGGeometry = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGGeometry = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGGeometry,
        {SIP_NULLPTR},
        &plugin_QSGGeometry
    },
    {
        sipNameNr_QSGGeometry,
        {0, 0, 1},
        31, methods_QSGGeometry,
        34, enummembers_QSGGeometry,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSGGeometry,
    -1,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QSGGeometry,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGGeometry,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSGGeometry,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgflatcolormaterial.sip"
#include <qsgflatcolormaterial.h>
#line 3150 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

#line 165 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 3154 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 3157 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 3160 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 158 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 3163 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 165 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 3166 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"


class sipQSGFlatColorMaterial : public  ::QSGFlatColorMaterial
{
public:
    sipQSGFlatColorMaterial();
    virtual ~sipQSGFlatColorMaterial();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QSGMaterialType* type() const SIP_OVERRIDE;
     ::QSGMaterialShader* createShader() const SIP_OVERRIDE;
    int compare(const  ::QSGMaterial*) const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSGFlatColorMaterial(const sipQSGFlatColorMaterial &);
    sipQSGFlatColorMaterial &operator = (const sipQSGFlatColorMaterial &);

    char sipPyMethods[3];
};

sipQSGFlatColorMaterial::sipQSGFlatColorMaterial():  ::QSGFlatColorMaterial(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSGFlatColorMaterial::~sipQSGFlatColorMaterial()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::QSGMaterialType* sipQSGFlatColorMaterial::type() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_type);

    if (!sipMeth)
        return  ::QSGFlatColorMaterial::type();

    extern  ::QSGMaterialType* sipVH_QtQuick_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_53(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSGMaterialShader* sipQSGFlatColorMaterial::createShader() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_createShader);

    if (!sipMeth)
        return  ::QSGFlatColorMaterial::createShader();

    extern  ::QSGMaterialShader* sipVH_QtQuick_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_54(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQSGFlatColorMaterial::compare(const  ::QSGMaterial*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,SIP_NULLPTR,sipName_compare);

    if (!sipMeth)
        return  ::QSGFlatColorMaterial::compare(a0);

    extern int sipVH_QtQuick_55(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QSGMaterial*);

    return sipVH_QtQuick_55(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QSGFlatColorMaterial_type, "type(self) -> QSGMaterialType");

extern "C" {static PyObject *meth_QSGFlatColorMaterial_type(PyObject *, PyObject *);}
static PyObject *meth_QSGFlatColorMaterial_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSGFlatColorMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGFlatColorMaterial, &sipCpp))
        {
             ::QSGMaterialType*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSGFlatColorMaterial::type() : sipCpp->type());

            return sipConvertFromType(sipRes,sipType_QSGMaterialType,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGFlatColorMaterial, sipName_type, doc_QSGFlatColorMaterial_type);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGFlatColorMaterial_createShader, "createShader(self) -> QSGMaterialShader");

extern "C" {static PyObject *meth_QSGFlatColorMaterial_createShader(PyObject *, PyObject *);}
static PyObject *meth_QSGFlatColorMaterial_createShader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSGFlatColorMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGFlatColorMaterial, &sipCpp))
        {
             ::QSGMaterialShader*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSGFlatColorMaterial::createShader() : sipCpp->createShader());

            return sipConvertFromNewType(sipRes,sipType_QSGMaterialShader,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGFlatColorMaterial, sipName_createShader, doc_QSGFlatColorMaterial_createShader);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGFlatColorMaterial_setColor, "setColor(self, Union[QColor, Qt.GlobalColor])");

extern "C" {static PyObject *meth_QSGFlatColorMaterial_setColor(PyObject *, PyObject *);}
static PyObject *meth_QSGFlatColorMaterial_setColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor* a0;
        int a0State = 0;
         ::QSGFlatColorMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSGFlatColorMaterial, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->setColor(*a0);
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGFlatColorMaterial, sipName_setColor, doc_QSGFlatColorMaterial_setColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGFlatColorMaterial_color, "color(self) -> QColor");

extern "C" {static PyObject *meth_QSGFlatColorMaterial_color(PyObject *, PyObject *);}
static PyObject *meth_QSGFlatColorMaterial_color(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGFlatColorMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGFlatColorMaterial, &sipCpp))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor(sipCpp->color());

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGFlatColorMaterial, sipName_color, doc_QSGFlatColorMaterial_color);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGFlatColorMaterial_compare, "compare(self, QSGMaterial) -> int");

extern "C" {static PyObject *meth_QSGFlatColorMaterial_compare(PyObject *, PyObject *);}
static PyObject *meth_QSGFlatColorMaterial_compare(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSGMaterial* a0;
        const  ::QSGFlatColorMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QSGFlatColorMaterial, &sipCpp, sipType_QSGMaterial, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSGFlatColorMaterial::compare(a0) : sipCpp->compare(a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGFlatColorMaterial, sipName_compare, doc_QSGFlatColorMaterial_compare);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSGFlatColorMaterial(void *, const sipTypeDef *);}
static void *cast_QSGFlatColorMaterial(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSGFlatColorMaterial *sipCpp = reinterpret_cast< ::QSGFlatColorMaterial *>(sipCppV);

    if (targetType == sipType_QSGMaterial)
        return static_cast< ::QSGMaterial *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGFlatColorMaterial(void *, int);}
static void release_QSGFlatColorMaterial(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQSGFlatColorMaterial *>(sipCppV);
    else
        delete reinterpret_cast< ::QSGFlatColorMaterial *>(sipCppV);
}


extern "C" {static void dealloc_QSGFlatColorMaterial(sipSimpleWrapper *);}
static void dealloc_QSGFlatColorMaterial(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSGFlatColorMaterial *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGFlatColorMaterial(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSGFlatColorMaterial(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGFlatColorMaterial(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQSGFlatColorMaterial *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQSGFlatColorMaterial();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSGFlatColorMaterial[] = {{55, 255, 1}};


static PyMethodDef methods_QSGFlatColorMaterial[] = {
    {SIP_MLNAME_CAST(sipName_color), meth_QSGFlatColorMaterial_color, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGFlatColorMaterial_color)},
    {SIP_MLNAME_CAST(sipName_compare), meth_QSGFlatColorMaterial_compare, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGFlatColorMaterial_compare)},
    {SIP_MLNAME_CAST(sipName_createShader), meth_QSGFlatColorMaterial_createShader, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGFlatColorMaterial_createShader)},
    {SIP_MLNAME_CAST(sipName_setColor), meth_QSGFlatColorMaterial_setColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGFlatColorMaterial_setColor)},
    {SIP_MLNAME_CAST(sipName_type), meth_QSGFlatColorMaterial_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGFlatColorMaterial_type)}
};

PyDoc_STRVAR(doc_QSGFlatColorMaterial, "\1QSGFlatColorMaterial()");


static pyqt5ClassPluginDef plugin_QSGFlatColorMaterial = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGFlatColorMaterial = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGFlatColorMaterial,
        {SIP_NULLPTR},
        &plugin_QSGFlatColorMaterial
    },
    {
        sipNameNr_QSGFlatColorMaterial,
        {0, 0, 1},
        5, methods_QSGFlatColorMaterial,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSGFlatColorMaterial,
    -1,
    -1,
    supers_QSGFlatColorMaterial,
    SIP_NULLPTR,
    init_type_QSGFlatColorMaterial,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGFlatColorMaterial,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSGFlatColorMaterial,
    cast_QSGFlatColorMaterial,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 165 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 3528 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

#line 165 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 3532 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 3535 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 158 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 3538 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"


class sipQSGMaterial : public  ::QSGMaterial
{
public:
    sipQSGMaterial();
    virtual ~sipQSGMaterial();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    int compare(const  ::QSGMaterial*) const SIP_OVERRIDE;
     ::QSGMaterialShader* createShader() const SIP_OVERRIDE;
     ::QSGMaterialType* type() const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSGMaterial(const sipQSGMaterial &);
    sipQSGMaterial &operator = (const sipQSGMaterial &);

    char sipPyMethods[3];
};

sipQSGMaterial::sipQSGMaterial():  ::QSGMaterial(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSGMaterial::~sipQSGMaterial()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

int sipQSGMaterial::compare(const  ::QSGMaterial*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_compare);

    if (!sipMeth)
        return  ::QSGMaterial::compare(a0);

    extern int sipVH_QtQuick_55(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QSGMaterial*);

    return sipVH_QtQuick_55(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSGMaterialShader* sipQSGMaterial::createShader() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,sipName_QSGMaterial,sipName_createShader);

    if (!sipMeth)
        return 0;

    extern  ::QSGMaterialShader* sipVH_QtQuick_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_54(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSGMaterialType* sipQSGMaterial::type() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,sipName_QSGMaterial,sipName_type);

    if (!sipMeth)
        return 0;

    extern  ::QSGMaterialType* sipVH_QtQuick_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_53(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QSGMaterial_type, "type(self) -> QSGMaterialType");

extern "C" {static PyObject *meth_QSGMaterial_type(PyObject *, PyObject *);}
static PyObject *meth_QSGMaterial_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QSGMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGMaterial, &sipCpp))
        {
             ::QSGMaterialType*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSGMaterial, sipName_type);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->type();

            return sipConvertFromType(sipRes,sipType_QSGMaterialType,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGMaterial, sipName_type, doc_QSGMaterial_type);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGMaterial_createShader, "createShader(self) -> QSGMaterialShader");

extern "C" {static PyObject *meth_QSGMaterial_createShader(PyObject *, PyObject *);}
static PyObject *meth_QSGMaterial_createShader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QSGMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGMaterial, &sipCpp))
        {
             ::QSGMaterialShader*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSGMaterial, sipName_createShader);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->createShader();

            return sipConvertFromNewType(sipRes,sipType_QSGMaterialShader,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGMaterial, sipName_createShader, doc_QSGMaterial_createShader);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGMaterial_compare, "compare(self, QSGMaterial) -> int");

extern "C" {static PyObject *meth_QSGMaterial_compare(PyObject *, PyObject *);}
static PyObject *meth_QSGMaterial_compare(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSGMaterial* a0;
        const  ::QSGMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QSGMaterial, &sipCpp, sipType_QSGMaterial, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSGMaterial::compare(a0) : sipCpp->compare(a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGMaterial, sipName_compare, doc_QSGMaterial_compare);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGMaterial_flags, "flags(self) -> QSGMaterial.Flags");

extern "C" {static PyObject *meth_QSGMaterial_flags(PyObject *, PyObject *);}
static PyObject *meth_QSGMaterial_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGMaterial, &sipCpp))
        {
             ::QSGMaterial::Flags*sipRes;

            sipRes = new  ::QSGMaterial::Flags(sipCpp->flags());

            return sipConvertFromNewType(sipRes,sipType_QSGMaterial_Flags,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGMaterial, sipName_flags, doc_QSGMaterial_flags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGMaterial_setFlag, "setFlag(self, Union[QSGMaterial.Flags, QSGMaterial.Flag], enabled: bool = True)");

extern "C" {static PyObject *meth_QSGMaterial_setFlag(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSGMaterial_setFlag(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGMaterial::Flags* a0;
        int a0State = 0;
        bool a1 = 1;
         ::QSGMaterial *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|b", &sipSelf, sipType_QSGMaterial, &sipCpp, sipType_QSGMaterial_Flags, &a0, &a0State, &a1))
        {
            sipCpp->setFlag(*a0,a1);
            sipReleaseType(a0,sipType_QSGMaterial_Flags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGMaterial, sipName_setFlag, doc_QSGMaterial_setFlag);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGMaterial(void *, int);}
static void release_QSGMaterial(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQSGMaterial *>(sipCppV);
    else
        delete reinterpret_cast< ::QSGMaterial *>(sipCppV);
}


extern "C" {static void dealloc_QSGMaterial(sipSimpleWrapper *);}
static void dealloc_QSGMaterial(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSGMaterial *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGMaterial(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSGMaterial(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGMaterial(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQSGMaterial *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQSGMaterial();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QSGMaterial[] = {
    {SIP_MLNAME_CAST(sipName_compare), meth_QSGMaterial_compare, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGMaterial_compare)},
    {SIP_MLNAME_CAST(sipName_createShader), meth_QSGMaterial_createShader, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGMaterial_createShader)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QSGMaterial_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGMaterial_flags)},
    {SIP_MLNAME_CAST(sipName_setFlag), SIP_MLMETH_CAST(meth_QSGMaterial_setFlag), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSGMaterial_setFlag)},
    {SIP_MLNAME_CAST(sipName_type), meth_QSGMaterial_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGMaterial_type)}
};

static sipEnumMemberDef enummembers_QSGMaterial[] = {
    {sipName_Blending, static_cast<int>( ::QSGMaterial::Blending), 56},
    {sipName_CustomCompileStep, static_cast<int>( ::QSGMaterial::CustomCompileStep), 56},
    {sipName_RequiresDeterminant, static_cast<int>( ::QSGMaterial::RequiresDeterminant), 56},
    {sipName_RequiresFullMatrix, static_cast<int>( ::QSGMaterial::RequiresFullMatrix), 56},
    {sipName_RequiresFullMatrixExceptTranslate, static_cast<int>( ::QSGMaterial::RequiresFullMatrixExceptTranslate), 56},
};

PyDoc_STRVAR(doc_QSGMaterial, "\1QSGMaterial()");


static pyqt5ClassPluginDef plugin_QSGMaterial = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGMaterial = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGMaterial,
        {SIP_NULLPTR},
        &plugin_QSGMaterial
    },
    {
        sipNameNr_QSGMaterial,
        {0, 0, 1},
        5, methods_QSGMaterial,
        5, enummembers_QSGMaterial,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSGMaterial,
    -1,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QSGMaterial,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGMaterial,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSGMaterial,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgengine.sip"
#include <qsgengine.h>
#line 3909 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgengine.sip"
#include <qsgengine.h>
#line 3913 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"


extern "C" {static long slot_QSGEngine_CreateTextureOptions___hash__(PyObject *);}
static long slot_QSGEngine_CreateTextureOptions___hash__(PyObject *sipSelf)
{
     ::QSGEngine::CreateTextureOptions *sipCpp = reinterpret_cast< ::QSGEngine::CreateTextureOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGEngine_CreateTextureOptions));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QSGEngine::CreateTextureOptions::Int();
#line 3931 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QSGEngine_CreateTextureOptions___bool__(PyObject *);}
static int slot_QSGEngine_CreateTextureOptions___bool__(PyObject *sipSelf)
{
     ::QSGEngine::CreateTextureOptions *sipCpp = reinterpret_cast< ::QSGEngine::CreateTextureOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGEngine_CreateTextureOptions));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QSGEngine::CreateTextureOptions::Int() != 0);
#line 3956 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QSGEngine_CreateTextureOptions___ne__(PyObject *,PyObject *);}
static PyObject *slot_QSGEngine_CreateTextureOptions___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSGEngine::CreateTextureOptions *sipCpp = reinterpret_cast< ::QSGEngine::CreateTextureOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGEngine_CreateTextureOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGEngine::CreateTextureOptions* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QSGEngine_CreateTextureOptions, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QSGEngine::CreateTextureOptions::Int() != a0->operator QSGEngine::CreateTextureOptions::Int());
#line 3986 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
            sipReleaseType(const_cast< ::QSGEngine::CreateTextureOptions *>(a0),sipType_QSGEngine_CreateTextureOptions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, ne_slot, sipType_QSGEngine_CreateTextureOptions, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QSGEngine_CreateTextureOptions___eq__(PyObject *,PyObject *);}
static PyObject *slot_QSGEngine_CreateTextureOptions___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSGEngine::CreateTextureOptions *sipCpp = reinterpret_cast< ::QSGEngine::CreateTextureOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGEngine_CreateTextureOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGEngine::CreateTextureOptions* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QSGEngine_CreateTextureOptions, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QSGEngine::CreateTextureOptions::Int() == a0->operator QSGEngine::CreateTextureOptions::Int());
#line 4022 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
            sipReleaseType(const_cast< ::QSGEngine::CreateTextureOptions *>(a0),sipType_QSGEngine_CreateTextureOptions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, eq_slot, sipType_QSGEngine_CreateTextureOptions, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QSGEngine_CreateTextureOptions___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QSGEngine_CreateTextureOptions___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSGEngine_CreateTextureOptions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSGEngine::CreateTextureOptions *sipCpp = reinterpret_cast< ::QSGEngine::CreateTextureOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGEngine_CreateTextureOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QSGEngine::CreateTextureOptions(*sipCpp ^ a0);
#line 4061 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSGEngine_CreateTextureOptions___xor__(PyObject *,PyObject *);}
static PyObject *slot_QSGEngine_CreateTextureOptions___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGEngine::CreateTextureOptions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QSGEngine_CreateTextureOptions, &a0, &a0State, &a1))
        {
             ::QSGEngine::CreateTextureOptions*sipRes;

            sipRes = new  ::QSGEngine::CreateTextureOptions((*a0 ^ a1));
            sipReleaseType(a0,sipType_QSGEngine_CreateTextureOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSGEngine_CreateTextureOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSGEngine_CreateTextureOptions___ior__(PyObject *,PyObject *);}
static PyObject *slot_QSGEngine_CreateTextureOptions___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSGEngine_CreateTextureOptions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSGEngine::CreateTextureOptions *sipCpp = reinterpret_cast< ::QSGEngine::CreateTextureOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGEngine_CreateTextureOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QSGEngine::CreateTextureOptions(*sipCpp | a0);
#line 4133 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSGEngine_CreateTextureOptions___or__(PyObject *,PyObject *);}
static PyObject *slot_QSGEngine_CreateTextureOptions___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGEngine::CreateTextureOptions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QSGEngine_CreateTextureOptions, &a0, &a0State, &a1))
        {
             ::QSGEngine::CreateTextureOptions*sipRes;

            sipRes = new  ::QSGEngine::CreateTextureOptions((*a0 | a1));
            sipReleaseType(a0,sipType_QSGEngine_CreateTextureOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSGEngine_CreateTextureOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSGEngine_CreateTextureOptions___iand__(PyObject *,PyObject *);}
static PyObject *slot_QSGEngine_CreateTextureOptions___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSGEngine_CreateTextureOptions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSGEngine::CreateTextureOptions *sipCpp = reinterpret_cast< ::QSGEngine::CreateTextureOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGEngine_CreateTextureOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QSGEngine::CreateTextureOptions::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSGEngine_CreateTextureOptions___and__(PyObject *,PyObject *);}
static PyObject *slot_QSGEngine_CreateTextureOptions___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGEngine::CreateTextureOptions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QSGEngine_CreateTextureOptions, &a0, &a0State, &a1))
        {
             ::QSGEngine::CreateTextureOptions*sipRes;

            sipRes = new  ::QSGEngine::CreateTextureOptions((*a0 & a1));
            sipReleaseType(a0,sipType_QSGEngine_CreateTextureOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSGEngine_CreateTextureOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSGEngine_CreateTextureOptions___invert__(PyObject *);}
static PyObject *slot_QSGEngine_CreateTextureOptions___invert__(PyObject *sipSelf)
{
     ::QSGEngine::CreateTextureOptions *sipCpp = reinterpret_cast< ::QSGEngine::CreateTextureOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGEngine_CreateTextureOptions));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QSGEngine::CreateTextureOptions*sipRes;

            sipRes = new  ::QSGEngine::CreateTextureOptions(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QSGEngine_CreateTextureOptions,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QSGEngine_CreateTextureOptions___int__(PyObject *);}
static PyObject *slot_QSGEngine_CreateTextureOptions___int__(PyObject *sipSelf)
{
     ::QSGEngine::CreateTextureOptions *sipCpp = reinterpret_cast< ::QSGEngine::CreateTextureOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGEngine_CreateTextureOptions));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGEngine_CreateTextureOptions(void *, int);}
static void release_QSGEngine_CreateTextureOptions(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSGEngine::CreateTextureOptions *>(sipCppV);
}


extern "C" {static void assign_QSGEngine_CreateTextureOptions(void *, SIP_SSIZE_T, void *);}
static void assign_QSGEngine_CreateTextureOptions(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QSGEngine::CreateTextureOptions *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QSGEngine::CreateTextureOptions *>(sipSrc);
}


extern "C" {static void *array_QSGEngine_CreateTextureOptions(SIP_SSIZE_T);}
static void *array_QSGEngine_CreateTextureOptions(SIP_SSIZE_T sipNrElem)
{
    return new  ::QSGEngine::CreateTextureOptions[sipNrElem];
}


extern "C" {static void *copy_QSGEngine_CreateTextureOptions(const void *, SIP_SSIZE_T);}
static void *copy_QSGEngine_CreateTextureOptions(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QSGEngine::CreateTextureOptions(reinterpret_cast<const  ::QSGEngine::CreateTextureOptions *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSGEngine_CreateTextureOptions(sipSimpleWrapper *);}
static void dealloc_QSGEngine_CreateTextureOptions(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGEngine_CreateTextureOptions(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QSGEngine_CreateTextureOptions(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGEngine_CreateTextureOptions(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QSGEngine::CreateTextureOptions *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QSGEngine::CreateTextureOptions();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QSGEngine::CreateTextureOptions(a0);

            return sipCpp;
        }
    }

    {
        const  ::QSGEngine::CreateTextureOptions* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QSGEngine_CreateTextureOptions, &a0, &a0State))
        {
            sipCpp = new  ::QSGEngine::CreateTextureOptions(*a0);
            sipReleaseType(const_cast< ::QSGEngine::CreateTextureOptions *>(a0),sipType_QSGEngine_CreateTextureOptions,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QSGEngine_CreateTextureOptions(PyObject *, void **, int *, PyObject *);}
static int convertTo_QSGEngine_CreateTextureOptions(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QSGEngine::CreateTextureOptions **sipCppPtr = reinterpret_cast< ::QSGEngine::CreateTextureOptions **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QSGEngine::CreateTextureOptions is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QSGEngine_CreateTextureOption)) ||
            sipCanConvertToType(sipPy, sipType_QSGEngine_CreateTextureOptions, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QSGEngine_CreateTextureOption)))
{
    *sipCppPtr = new QSGEngine::CreateTextureOptions(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QSGEngine::CreateTextureOptions *>(sipConvertToType(sipPy, sipType_QSGEngine_CreateTextureOptions, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 4401 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QSGEngine_CreateTextureOptions[] = {
    {(void *)slot_QSGEngine_CreateTextureOptions___hash__, hash_slot},
    {(void *)slot_QSGEngine_CreateTextureOptions___bool__, bool_slot},
    {(void *)slot_QSGEngine_CreateTextureOptions___ne__, ne_slot},
    {(void *)slot_QSGEngine_CreateTextureOptions___eq__, eq_slot},
    {(void *)slot_QSGEngine_CreateTextureOptions___ixor__, ixor_slot},
    {(void *)slot_QSGEngine_CreateTextureOptions___xor__, xor_slot},
    {(void *)slot_QSGEngine_CreateTextureOptions___ior__, ior_slot},
    {(void *)slot_QSGEngine_CreateTextureOptions___or__, or_slot},
    {(void *)slot_QSGEngine_CreateTextureOptions___iand__, iand_slot},
    {(void *)slot_QSGEngine_CreateTextureOptions___and__, and_slot},
    {(void *)slot_QSGEngine_CreateTextureOptions___invert__, invert_slot},
    {(void *)slot_QSGEngine_CreateTextureOptions___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QSGEngine_CreateTextureOptions, "\1QSGEngine.CreateTextureOptions()\n"
"QSGEngine.CreateTextureOptions(Union[QSGEngine.CreateTextureOptions, QSGEngine.CreateTextureOption])\n"
"QSGEngine.CreateTextureOptions(QSGEngine.CreateTextureOptions)");


static pyqt5ClassPluginDef plugin_QSGEngine_CreateTextureOptions = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGEngine_CreateTextureOptions = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGEngine__CreateTextureOptions,
        {SIP_NULLPTR},
        &plugin_QSGEngine_CreateTextureOptions
    },
    {
        sipNameNr_CreateTextureOptions,
        {37, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSGEngine_CreateTextureOptions,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QSGEngine_CreateTextureOptions,
    init_type_QSGEngine_CreateTextureOptions,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGEngine_CreateTextureOptions,
    assign_QSGEngine_CreateTextureOptions,
    array_QSGEngine_CreateTextureOptions,
    copy_QSGEngine_CreateTextureOptions,
    release_QSGEngine_CreateTextureOptions,
    SIP_NULLPTR,
    convertTo_QSGEngine_CreateTextureOptions,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgengine.sip"
#include <qsgengine.h>
#line 4489 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 4493 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgimagenode.sip"
#include <qsgimagenode.h>
#line 4496 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgrectanglenode.sip"
#include <qsgrectanglenode.h>
#line 4499 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgrendererinterface.sip"
#include <qsgrendererinterface.h>
#line 4502 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgtexture.sip"
#include <qsgtexture.h>
#line 4505 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 4508 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgengine.sip"
#include <qsgengine.h>
#line 4511 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtGui/qimage.sip"
#include <qimage.h>
#line 4514 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgabstractrenderer.sip"
#include <qsgabstractrenderer.h>
#line 4517 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 46 "sip/QtGui/qopenglcontext.sip"
#include <qopenglcontext.h>
#line 4520 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 4523 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 4526 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 4529 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 4532 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 4535 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 4538 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 4541 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 4544 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 4547 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 4550 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 4553 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 4556 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 4559 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 4562 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 4565 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"


class sipQSGEngine : public  ::QSGEngine
{
public:
    sipQSGEngine( ::QObject*);
    virtual ~sipQSGEngine();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSGEngine(const sipQSGEngine &);
    sipQSGEngine &operator = (const sipQSGEngine &);

    char sipPyMethods[7];
};

sipQSGEngine::sipQSGEngine( ::QObject*a0):  ::QSGEngine(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSGEngine::~sipQSGEngine()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQSGEngine::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtQuick_qt_metaobject(sipPySelf,sipType_QSGEngine);

    return  ::QSGEngine::metaObject();
}

int sipQSGEngine::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QSGEngine::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtQuick_qt_metacall(sipPySelf,sipType_QSGEngine,_c,_id,_a);

    return _id;
}

void *sipQSGEngine::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtQuick_qt_metacast(sipPySelf, sipType_QSGEngine, _clname, &sipCpp) ? sipCpp :  ::QSGEngine::qt_metacast(_clname));
}

bool sipQSGEngine::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QSGEngine::event(a0);

    extern bool sipVH_QtQuick_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtQuick_5(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQSGEngine::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QSGEngine::eventFilter(a0,a1);

    extern bool sipVH_QtQuick_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtQuick_4(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQSGEngine::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QSGEngine::timerEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtQuick_3(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSGEngine::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QSGEngine::childEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtQuick_2(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSGEngine::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QSGEngine::customEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtQuick_1(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSGEngine::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QSGEngine::connectNotify(a0);
        return;
    }

    extern void sipVH_QtQuick_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQuick_0(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSGEngine::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QSGEngine::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtQuick_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQuick_0(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QSGEngine_initialize, "initialize(self, QOpenGLContext)");

extern "C" {static PyObject *meth_QSGEngine_initialize(PyObject *, PyObject *);}
static PyObject *meth_QSGEngine_initialize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLContext* a0;
         ::QSGEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QSGEngine, &sipCpp, sipType_QOpenGLContext, &a0))
        {
            sipCpp->initialize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGEngine, sipName_initialize, doc_QSGEngine_initialize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGEngine_invalidate, "invalidate(self)");

extern "C" {static PyObject *meth_QSGEngine_invalidate(PyObject *, PyObject *);}
static PyObject *meth_QSGEngine_invalidate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGEngine, &sipCpp))
        {
            sipCpp->invalidate();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGEngine, sipName_invalidate, doc_QSGEngine_invalidate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGEngine_createRenderer, "createRenderer(self) -> QSGAbstractRenderer");

extern "C" {static PyObject *meth_QSGEngine_createRenderer(PyObject *, PyObject *);}
static PyObject *meth_QSGEngine_createRenderer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGEngine, &sipCpp))
        {
             ::QSGAbstractRenderer*sipRes;

            sipRes = sipCpp->createRenderer();

            return sipConvertFromType(sipRes,sipType_QSGAbstractRenderer,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGEngine, sipName_createRenderer, doc_QSGEngine_createRenderer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGEngine_createTextureFromImage, "createTextureFromImage(self, QImage, options: Union[QSGEngine.CreateTextureOptions, QSGEngine.CreateTextureOption] = QSGEngine.CreateTextureOption()) -> QSGTexture");

extern "C" {static PyObject *meth_QSGEngine_createTextureFromImage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSGEngine_createTextureFromImage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage* a0;
         ::QSGEngine::CreateTextureOptions a1def = QSGEngine::CreateTextureOption();
         ::QSGEngine::CreateTextureOptions* a1 = &a1def;
        int a1State = 0;
        const  ::QSGEngine *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|J1", &sipSelf, sipType_QSGEngine, &sipCpp, sipType_QImage, &a0, sipType_QSGEngine_CreateTextureOptions, &a1, &a1State))
        {
             ::QSGTexture*sipRes;

            sipRes = sipCpp->createTextureFromImage(*a0,*a1);
            sipReleaseType(a1,sipType_QSGEngine_CreateTextureOptions,a1State);

            return sipConvertFromType(sipRes,sipType_QSGTexture,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGEngine, sipName_createTextureFromImage, doc_QSGEngine_createTextureFromImage);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGEngine_createTextureFromId, "createTextureFromId(self, int, QSize, options: Union[QSGEngine.CreateTextureOptions, QSGEngine.CreateTextureOption] = QSGEngine.CreateTextureOption()) -> QSGTexture");

extern "C" {static PyObject *meth_QSGEngine_createTextureFromId(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSGEngine_createTextureFromId(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::uint a0;
        const  ::QSize* a1;
         ::QSGEngine::CreateTextureOptions a2def = QSGEngine::CreateTextureOption();
         ::QSGEngine::CreateTextureOptions* a2 = &a2def;
        int a2State = 0;
        const  ::QSGEngine *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BuJ9|J1", &sipSelf, sipType_QSGEngine, &sipCpp, &a0, sipType_QSize, &a1, sipType_QSGEngine_CreateTextureOptions, &a2, &a2State))
        {
             ::QSGTexture*sipRes;

            sipRes = sipCpp->createTextureFromId(a0,*a1,*a2);
            sipReleaseType(a2,sipType_QSGEngine_CreateTextureOptions,a2State);

            return sipConvertFromType(sipRes,sipType_QSGTexture,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGEngine, sipName_createTextureFromId, doc_QSGEngine_createTextureFromId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGEngine_rendererInterface, "rendererInterface(self) -> QSGRendererInterface");

extern "C" {static PyObject *meth_QSGEngine_rendererInterface(PyObject *, PyObject *);}
static PyObject *meth_QSGEngine_rendererInterface(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGEngine, &sipCpp))
        {
             ::QSGRendererInterface*sipRes;

            sipRes = sipCpp->rendererInterface();

            return sipConvertFromType(sipRes,sipType_QSGRendererInterface,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGEngine, sipName_rendererInterface, doc_QSGEngine_rendererInterface);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGEngine_createRectangleNode, "createRectangleNode(self) -> QSGRectangleNode");

extern "C" {static PyObject *meth_QSGEngine_createRectangleNode(PyObject *, PyObject *);}
static PyObject *meth_QSGEngine_createRectangleNode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGEngine, &sipCpp))
        {
             ::QSGRectangleNode*sipRes;

            sipRes = sipCpp->createRectangleNode();

            return sipConvertFromNewType(sipRes,sipType_QSGRectangleNode,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGEngine, sipName_createRectangleNode, doc_QSGEngine_createRectangleNode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGEngine_createImageNode, "createImageNode(self) -> QSGImageNode");

extern "C" {static PyObject *meth_QSGEngine_createImageNode(PyObject *, PyObject *);}
static PyObject *meth_QSGEngine_createImageNode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGEngine, &sipCpp))
        {
             ::QSGImageNode*sipRes;

            sipRes = sipCpp->createImageNode();

            return sipConvertFromNewType(sipRes,sipType_QSGImageNode,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGEngine, sipName_createImageNode, doc_QSGEngine_createImageNode);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSGEngine(void *, const sipTypeDef *);}
static void *cast_QSGEngine(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSGEngine *sipCpp = reinterpret_cast< ::QSGEngine *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGEngine(void *, int);}
static void release_QSGEngine(void *sipCppV, int)
{
     ::QSGEngine *sipCpp = reinterpret_cast< ::QSGEngine *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QSGEngine(sipSimpleWrapper *);}
static void dealloc_QSGEngine(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSGEngine *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGEngine(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSGEngine(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGEngine(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQSGEngine *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQSGEngine(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSGEngine[] = {{3, 0, 1}};


static PyMethodDef methods_QSGEngine[] = {
    {SIP_MLNAME_CAST(sipName_createImageNode), meth_QSGEngine_createImageNode, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGEngine_createImageNode)},
    {SIP_MLNAME_CAST(sipName_createRectangleNode), meth_QSGEngine_createRectangleNode, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGEngine_createRectangleNode)},
    {SIP_MLNAME_CAST(sipName_createRenderer), meth_QSGEngine_createRenderer, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGEngine_createRenderer)},
    {SIP_MLNAME_CAST(sipName_createTextureFromId), SIP_MLMETH_CAST(meth_QSGEngine_createTextureFromId), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSGEngine_createTextureFromId)},
    {SIP_MLNAME_CAST(sipName_createTextureFromImage), SIP_MLMETH_CAST(meth_QSGEngine_createTextureFromImage), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSGEngine_createTextureFromImage)},
    {SIP_MLNAME_CAST(sipName_initialize), meth_QSGEngine_initialize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGEngine_initialize)},
    {SIP_MLNAME_CAST(sipName_invalidate), meth_QSGEngine_invalidate, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGEngine_invalidate)},
    {SIP_MLNAME_CAST(sipName_rendererInterface), meth_QSGEngine_rendererInterface, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGEngine_rendererInterface)}
};

static sipEnumMemberDef enummembers_QSGEngine[] = {
    {sipName_TextureCanUseAtlas, static_cast<int>( ::QSGEngine::TextureCanUseAtlas), 38},
    {sipName_TextureHasAlphaChannel, static_cast<int>( ::QSGEngine::TextureHasAlphaChannel), 38},
    {sipName_TextureIsOpaque, static_cast<int>( ::QSGEngine::TextureIsOpaque), 38},
    {sipName_TextureOwnsGLTexture, static_cast<int>( ::QSGEngine::TextureOwnsGLTexture), 38},
};

PyDoc_STRVAR(doc_QSGEngine, "\1QSGEngine(parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QSGEngine = {
    & ::QSGEngine::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGEngine = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGEngine,
        {SIP_NULLPTR},
        &plugin_QSGEngine
    },
    {
        sipNameNr_QSGEngine,
        {0, 0, 1},
        8, methods_QSGEngine,
        4, enummembers_QSGEngine,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSGEngine,
    -1,
    -1,
    supers_QSGEngine,
    SIP_NULLPTR,
    init_type_QSGEngine,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGEngine,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSGEngine,
    cast_QSGEngine,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgabstractrenderer.sip"
#include <qsgabstractrenderer.h>
#line 5152 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgabstractrenderer.sip"
#include <qsgabstractrenderer.h>
#line 5156 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"


extern "C" {static long slot_QSGAbstractRenderer_ClearMode___hash__(PyObject *);}
static long slot_QSGAbstractRenderer_ClearMode___hash__(PyObject *sipSelf)
{
     ::QSGAbstractRenderer::ClearMode *sipCpp = reinterpret_cast< ::QSGAbstractRenderer::ClearMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGAbstractRenderer_ClearMode));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QSGAbstractRenderer::ClearMode::Int();
#line 5174 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QSGAbstractRenderer_ClearMode___bool__(PyObject *);}
static int slot_QSGAbstractRenderer_ClearMode___bool__(PyObject *sipSelf)
{
     ::QSGAbstractRenderer::ClearMode *sipCpp = reinterpret_cast< ::QSGAbstractRenderer::ClearMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGAbstractRenderer_ClearMode));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QSGAbstractRenderer::ClearMode::Int() != 0);
#line 5199 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QSGAbstractRenderer_ClearMode___ne__(PyObject *,PyObject *);}
static PyObject *slot_QSGAbstractRenderer_ClearMode___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSGAbstractRenderer::ClearMode *sipCpp = reinterpret_cast< ::QSGAbstractRenderer::ClearMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGAbstractRenderer_ClearMode));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGAbstractRenderer::ClearMode* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QSGAbstractRenderer_ClearMode, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QSGAbstractRenderer::ClearMode::Int() != a0->operator QSGAbstractRenderer::ClearMode::Int());
#line 5229 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
            sipReleaseType(const_cast< ::QSGAbstractRenderer::ClearMode *>(a0),sipType_QSGAbstractRenderer_ClearMode,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, ne_slot, sipType_QSGAbstractRenderer_ClearMode, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QSGAbstractRenderer_ClearMode___eq__(PyObject *,PyObject *);}
static PyObject *slot_QSGAbstractRenderer_ClearMode___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSGAbstractRenderer::ClearMode *sipCpp = reinterpret_cast< ::QSGAbstractRenderer::ClearMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGAbstractRenderer_ClearMode));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGAbstractRenderer::ClearMode* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QSGAbstractRenderer_ClearMode, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QSGAbstractRenderer::ClearMode::Int() == a0->operator QSGAbstractRenderer::ClearMode::Int());
#line 5265 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
            sipReleaseType(const_cast< ::QSGAbstractRenderer::ClearMode *>(a0),sipType_QSGAbstractRenderer_ClearMode,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, eq_slot, sipType_QSGAbstractRenderer_ClearMode, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QSGAbstractRenderer_ClearMode___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QSGAbstractRenderer_ClearMode___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSGAbstractRenderer_ClearMode)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSGAbstractRenderer::ClearMode *sipCpp = reinterpret_cast< ::QSGAbstractRenderer::ClearMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGAbstractRenderer_ClearMode));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QSGAbstractRenderer::ClearMode(*sipCpp ^ a0);
#line 5304 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSGAbstractRenderer_ClearMode___xor__(PyObject *,PyObject *);}
static PyObject *slot_QSGAbstractRenderer_ClearMode___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGAbstractRenderer::ClearMode* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QSGAbstractRenderer_ClearMode, &a0, &a0State, &a1))
        {
             ::QSGAbstractRenderer::ClearMode*sipRes;

            sipRes = new  ::QSGAbstractRenderer::ClearMode((*a0 ^ a1));
            sipReleaseType(a0,sipType_QSGAbstractRenderer_ClearMode,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSGAbstractRenderer_ClearMode,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSGAbstractRenderer_ClearMode___ior__(PyObject *,PyObject *);}
static PyObject *slot_QSGAbstractRenderer_ClearMode___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSGAbstractRenderer_ClearMode)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSGAbstractRenderer::ClearMode *sipCpp = reinterpret_cast< ::QSGAbstractRenderer::ClearMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGAbstractRenderer_ClearMode));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QSGAbstractRenderer::ClearMode(*sipCpp | a0);
#line 5376 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSGAbstractRenderer_ClearMode___or__(PyObject *,PyObject *);}
static PyObject *slot_QSGAbstractRenderer_ClearMode___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGAbstractRenderer::ClearMode* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QSGAbstractRenderer_ClearMode, &a0, &a0State, &a1))
        {
             ::QSGAbstractRenderer::ClearMode*sipRes;

            sipRes = new  ::QSGAbstractRenderer::ClearMode((*a0 | a1));
            sipReleaseType(a0,sipType_QSGAbstractRenderer_ClearMode,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSGAbstractRenderer_ClearMode,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSGAbstractRenderer_ClearMode___iand__(PyObject *,PyObject *);}
static PyObject *slot_QSGAbstractRenderer_ClearMode___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSGAbstractRenderer_ClearMode)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSGAbstractRenderer::ClearMode *sipCpp = reinterpret_cast< ::QSGAbstractRenderer::ClearMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGAbstractRenderer_ClearMode));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QSGAbstractRenderer::ClearMode::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSGAbstractRenderer_ClearMode___and__(PyObject *,PyObject *);}
static PyObject *slot_QSGAbstractRenderer_ClearMode___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGAbstractRenderer::ClearMode* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QSGAbstractRenderer_ClearMode, &a0, &a0State, &a1))
        {
             ::QSGAbstractRenderer::ClearMode*sipRes;

            sipRes = new  ::QSGAbstractRenderer::ClearMode((*a0 & a1));
            sipReleaseType(a0,sipType_QSGAbstractRenderer_ClearMode,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSGAbstractRenderer_ClearMode,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSGAbstractRenderer_ClearMode___invert__(PyObject *);}
static PyObject *slot_QSGAbstractRenderer_ClearMode___invert__(PyObject *sipSelf)
{
     ::QSGAbstractRenderer::ClearMode *sipCpp = reinterpret_cast< ::QSGAbstractRenderer::ClearMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGAbstractRenderer_ClearMode));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QSGAbstractRenderer::ClearMode*sipRes;

            sipRes = new  ::QSGAbstractRenderer::ClearMode(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QSGAbstractRenderer_ClearMode,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QSGAbstractRenderer_ClearMode___int__(PyObject *);}
static PyObject *slot_QSGAbstractRenderer_ClearMode___int__(PyObject *sipSelf)
{
     ::QSGAbstractRenderer::ClearMode *sipCpp = reinterpret_cast< ::QSGAbstractRenderer::ClearMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGAbstractRenderer_ClearMode));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGAbstractRenderer_ClearMode(void *, int);}
static void release_QSGAbstractRenderer_ClearMode(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSGAbstractRenderer::ClearMode *>(sipCppV);
}


extern "C" {static void assign_QSGAbstractRenderer_ClearMode(void *, SIP_SSIZE_T, void *);}
static void assign_QSGAbstractRenderer_ClearMode(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QSGAbstractRenderer::ClearMode *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QSGAbstractRenderer::ClearMode *>(sipSrc);
}


extern "C" {static void *array_QSGAbstractRenderer_ClearMode(SIP_SSIZE_T);}
static void *array_QSGAbstractRenderer_ClearMode(SIP_SSIZE_T sipNrElem)
{
    return new  ::QSGAbstractRenderer::ClearMode[sipNrElem];
}


extern "C" {static void *copy_QSGAbstractRenderer_ClearMode(const void *, SIP_SSIZE_T);}
static void *copy_QSGAbstractRenderer_ClearMode(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QSGAbstractRenderer::ClearMode(reinterpret_cast<const  ::QSGAbstractRenderer::ClearMode *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSGAbstractRenderer_ClearMode(sipSimpleWrapper *);}
static void dealloc_QSGAbstractRenderer_ClearMode(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGAbstractRenderer_ClearMode(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QSGAbstractRenderer_ClearMode(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGAbstractRenderer_ClearMode(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QSGAbstractRenderer::ClearMode *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QSGAbstractRenderer::ClearMode();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QSGAbstractRenderer::ClearMode(a0);

            return sipCpp;
        }
    }

    {
        const  ::QSGAbstractRenderer::ClearMode* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QSGAbstractRenderer_ClearMode, &a0, &a0State))
        {
            sipCpp = new  ::QSGAbstractRenderer::ClearMode(*a0);
            sipReleaseType(const_cast< ::QSGAbstractRenderer::ClearMode *>(a0),sipType_QSGAbstractRenderer_ClearMode,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QSGAbstractRenderer_ClearMode(PyObject *, void **, int *, PyObject *);}
static int convertTo_QSGAbstractRenderer_ClearMode(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QSGAbstractRenderer::ClearMode **sipCppPtr = reinterpret_cast< ::QSGAbstractRenderer::ClearMode **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QSGAbstractRenderer::ClearMode is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QSGAbstractRenderer_ClearModeBit)) ||
            sipCanConvertToType(sipPy, sipType_QSGAbstractRenderer_ClearMode, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QSGAbstractRenderer_ClearModeBit)))
{
    *sipCppPtr = new QSGAbstractRenderer::ClearMode(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QSGAbstractRenderer::ClearMode *>(sipConvertToType(sipPy, sipType_QSGAbstractRenderer_ClearMode, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 5644 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QSGAbstractRenderer_ClearMode[] = {
    {(void *)slot_QSGAbstractRenderer_ClearMode___hash__, hash_slot},
    {(void *)slot_QSGAbstractRenderer_ClearMode___bool__, bool_slot},
    {(void *)slot_QSGAbstractRenderer_ClearMode___ne__, ne_slot},
    {(void *)slot_QSGAbstractRenderer_ClearMode___eq__, eq_slot},
    {(void *)slot_QSGAbstractRenderer_ClearMode___ixor__, ixor_slot},
    {(void *)slot_QSGAbstractRenderer_ClearMode___xor__, xor_slot},
    {(void *)slot_QSGAbstractRenderer_ClearMode___ior__, ior_slot},
    {(void *)slot_QSGAbstractRenderer_ClearMode___or__, or_slot},
    {(void *)slot_QSGAbstractRenderer_ClearMode___iand__, iand_slot},
    {(void *)slot_QSGAbstractRenderer_ClearMode___and__, and_slot},
    {(void *)slot_QSGAbstractRenderer_ClearMode___invert__, invert_slot},
    {(void *)slot_QSGAbstractRenderer_ClearMode___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QSGAbstractRenderer_ClearMode, "\1QSGAbstractRenderer.ClearMode()\n"
"QSGAbstractRenderer.ClearMode(Union[QSGAbstractRenderer.ClearMode, QSGAbstractRenderer.ClearModeBit])\n"
"QSGAbstractRenderer.ClearMode(QSGAbstractRenderer.ClearMode)");


static pyqt5ClassPluginDef plugin_QSGAbstractRenderer_ClearMode = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGAbstractRenderer_ClearMode = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGAbstractRenderer__ClearMode,
        {SIP_NULLPTR},
        &plugin_QSGAbstractRenderer_ClearMode
    },
    {
        sipNameNr_ClearMode,
        {31, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSGAbstractRenderer_ClearMode,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QSGAbstractRenderer_ClearMode,
    init_type_QSGAbstractRenderer_ClearMode,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGAbstractRenderer_ClearMode,
    assign_QSGAbstractRenderer_ClearMode,
    array_QSGAbstractRenderer_ClearMode,
    copy_QSGAbstractRenderer_ClearMode,
    release_QSGAbstractRenderer_ClearMode,
    SIP_NULLPTR,
    convertTo_QSGAbstractRenderer_ClearMode,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgabstractrenderer.sip"
#include <qsgabstractrenderer.h>
#line 5732 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgabstractrenderer.sip"
#include <qsgabstractrenderer.h>
#line 5736 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 5739 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 30 "sip/QtGui/qmatrix4x4.sip"
#include <qmatrix4x4.h>
#line 5742 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 5745 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 5748 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 5751 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 5754 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 5757 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 5760 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 5763 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 5766 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 5769 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 5772 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 5775 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 5778 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 5781 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 5784 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 5787 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 5790 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 5793 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 5796 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 5799 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"


PyDoc_STRVAR(doc_QSGAbstractRenderer_setDeviceRect, "setDeviceRect(self, QRect)\n"
"setDeviceRect(self, QSize)");

extern "C" {static PyObject *meth_QSGAbstractRenderer_setDeviceRect(PyObject *, PyObject *);}
static PyObject *meth_QSGAbstractRenderer_setDeviceRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect* a0;
         ::QSGAbstractRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSGAbstractRenderer, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->setDeviceRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QSize* a0;
         ::QSGAbstractRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSGAbstractRenderer, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setDeviceRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGAbstractRenderer, sipName_setDeviceRect, doc_QSGAbstractRenderer_setDeviceRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGAbstractRenderer_deviceRect, "deviceRect(self) -> QRect");

extern "C" {static PyObject *meth_QSGAbstractRenderer_deviceRect(PyObject *, PyObject *);}
static PyObject *meth_QSGAbstractRenderer_deviceRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGAbstractRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGAbstractRenderer, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->deviceRect());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGAbstractRenderer, sipName_deviceRect, doc_QSGAbstractRenderer_deviceRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGAbstractRenderer_setViewportRect, "setViewportRect(self, QRect)\n"
"setViewportRect(self, QSize)");

extern "C" {static PyObject *meth_QSGAbstractRenderer_setViewportRect(PyObject *, PyObject *);}
static PyObject *meth_QSGAbstractRenderer_setViewportRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect* a0;
         ::QSGAbstractRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSGAbstractRenderer, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->setViewportRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QSize* a0;
         ::QSGAbstractRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSGAbstractRenderer, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setViewportRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGAbstractRenderer, sipName_setViewportRect, doc_QSGAbstractRenderer_setViewportRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGAbstractRenderer_viewportRect, "viewportRect(self) -> QRect");

extern "C" {static PyObject *meth_QSGAbstractRenderer_viewportRect(PyObject *, PyObject *);}
static PyObject *meth_QSGAbstractRenderer_viewportRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGAbstractRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGAbstractRenderer, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->viewportRect());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGAbstractRenderer, sipName_viewportRect, doc_QSGAbstractRenderer_viewportRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGAbstractRenderer_setProjectionMatrixToRect, "setProjectionMatrixToRect(self, QRectF)");

extern "C" {static PyObject *meth_QSGAbstractRenderer_setProjectionMatrixToRect(PyObject *, PyObject *);}
static PyObject *meth_QSGAbstractRenderer_setProjectionMatrixToRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
         ::QSGAbstractRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSGAbstractRenderer, &sipCpp, sipType_QRectF, &a0))
        {
            sipCpp->setProjectionMatrixToRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGAbstractRenderer, sipName_setProjectionMatrixToRect, doc_QSGAbstractRenderer_setProjectionMatrixToRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGAbstractRenderer_setProjectionMatrix, "setProjectionMatrix(self, QMatrix4x4)");

extern "C" {static PyObject *meth_QSGAbstractRenderer_setProjectionMatrix(PyObject *, PyObject *);}
static PyObject *meth_QSGAbstractRenderer_setProjectionMatrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix4x4* a0;
         ::QSGAbstractRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSGAbstractRenderer, &sipCpp, sipType_QMatrix4x4, &a0))
        {
            sipCpp->setProjectionMatrix(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGAbstractRenderer, sipName_setProjectionMatrix, doc_QSGAbstractRenderer_setProjectionMatrix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGAbstractRenderer_projectionMatrix, "projectionMatrix(self) -> QMatrix4x4");

extern "C" {static PyObject *meth_QSGAbstractRenderer_projectionMatrix(PyObject *, PyObject *);}
static PyObject *meth_QSGAbstractRenderer_projectionMatrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGAbstractRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGAbstractRenderer, &sipCpp))
        {
             ::QMatrix4x4*sipRes;

            sipRes = new  ::QMatrix4x4(sipCpp->projectionMatrix());

            return sipConvertFromNewType(sipRes,sipType_QMatrix4x4,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGAbstractRenderer, sipName_projectionMatrix, doc_QSGAbstractRenderer_projectionMatrix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGAbstractRenderer_setClearColor, "setClearColor(self, Union[QColor, Qt.GlobalColor])");

extern "C" {static PyObject *meth_QSGAbstractRenderer_setClearColor(PyObject *, PyObject *);}
static PyObject *meth_QSGAbstractRenderer_setClearColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor* a0;
        int a0State = 0;
         ::QSGAbstractRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSGAbstractRenderer, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->setClearColor(*a0);
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGAbstractRenderer, sipName_setClearColor, doc_QSGAbstractRenderer_setClearColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGAbstractRenderer_clearColor, "clearColor(self) -> QColor");

extern "C" {static PyObject *meth_QSGAbstractRenderer_clearColor(PyObject *, PyObject *);}
static PyObject *meth_QSGAbstractRenderer_clearColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGAbstractRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGAbstractRenderer, &sipCpp))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor(sipCpp->clearColor());

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGAbstractRenderer, sipName_clearColor, doc_QSGAbstractRenderer_clearColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGAbstractRenderer_setClearMode, "setClearMode(self, Union[QSGAbstractRenderer.ClearMode, QSGAbstractRenderer.ClearModeBit])");

extern "C" {static PyObject *meth_QSGAbstractRenderer_setClearMode(PyObject *, PyObject *);}
static PyObject *meth_QSGAbstractRenderer_setClearMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGAbstractRenderer::ClearMode* a0;
        int a0State = 0;
         ::QSGAbstractRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSGAbstractRenderer, &sipCpp, sipType_QSGAbstractRenderer_ClearMode, &a0, &a0State))
        {
            sipCpp->setClearMode(*a0);
            sipReleaseType(a0,sipType_QSGAbstractRenderer_ClearMode,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGAbstractRenderer, sipName_setClearMode, doc_QSGAbstractRenderer_setClearMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGAbstractRenderer_clearMode, "clearMode(self) -> QSGAbstractRenderer.ClearMode");

extern "C" {static PyObject *meth_QSGAbstractRenderer_clearMode(PyObject *, PyObject *);}
static PyObject *meth_QSGAbstractRenderer_clearMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGAbstractRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGAbstractRenderer, &sipCpp))
        {
             ::QSGAbstractRenderer::ClearMode*sipRes;

            sipRes = new  ::QSGAbstractRenderer::ClearMode(sipCpp->clearMode());

            return sipConvertFromNewType(sipRes,sipType_QSGAbstractRenderer_ClearMode,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGAbstractRenderer, sipName_clearMode, doc_QSGAbstractRenderer_clearMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGAbstractRenderer_renderScene, "renderScene(self, fboId: int = 0)");

extern "C" {static PyObject *meth_QSGAbstractRenderer_renderScene(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSGAbstractRenderer_renderScene(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::GLuint a0 = 0;
         ::QSGAbstractRenderer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_fboId,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|u", &sipSelf, sipType_QSGAbstractRenderer, &sipCpp, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSGAbstractRenderer, sipName_renderScene);
                return SIP_NULLPTR;
            }

            sipCpp->renderScene(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGAbstractRenderer, sipName_renderScene, doc_QSGAbstractRenderer_renderScene);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSGAbstractRenderer(void *, const sipTypeDef *);}
static void *cast_QSGAbstractRenderer(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSGAbstractRenderer *sipCpp = reinterpret_cast< ::QSGAbstractRenderer *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGAbstractRenderer(void *, int);}
static void release_QSGAbstractRenderer(void *sipCppV, int)
{
     ::QSGAbstractRenderer *sipCpp = reinterpret_cast< ::QSGAbstractRenderer *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QSGAbstractRenderer(sipSimpleWrapper *);}
static void dealloc_QSGAbstractRenderer(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGAbstractRenderer(sipGetAddress(sipSelf), 0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSGAbstractRenderer[] = {{3, 0, 1}};


static PyMethodDef methods_QSGAbstractRenderer[] = {
    {SIP_MLNAME_CAST(sipName_clearColor), meth_QSGAbstractRenderer_clearColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGAbstractRenderer_clearColor)},
    {SIP_MLNAME_CAST(sipName_clearMode), meth_QSGAbstractRenderer_clearMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGAbstractRenderer_clearMode)},
    {SIP_MLNAME_CAST(sipName_deviceRect), meth_QSGAbstractRenderer_deviceRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGAbstractRenderer_deviceRect)},
    {SIP_MLNAME_CAST(sipName_projectionMatrix), meth_QSGAbstractRenderer_projectionMatrix, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGAbstractRenderer_projectionMatrix)},
    {SIP_MLNAME_CAST(sipName_renderScene), SIP_MLMETH_CAST(meth_QSGAbstractRenderer_renderScene), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSGAbstractRenderer_renderScene)},
    {SIP_MLNAME_CAST(sipName_setClearColor), meth_QSGAbstractRenderer_setClearColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGAbstractRenderer_setClearColor)},
    {SIP_MLNAME_CAST(sipName_setClearMode), meth_QSGAbstractRenderer_setClearMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGAbstractRenderer_setClearMode)},
    {SIP_MLNAME_CAST(sipName_setDeviceRect), meth_QSGAbstractRenderer_setDeviceRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGAbstractRenderer_setDeviceRect)},
    {SIP_MLNAME_CAST(sipName_setProjectionMatrix), meth_QSGAbstractRenderer_setProjectionMatrix, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGAbstractRenderer_setProjectionMatrix)},
    {SIP_MLNAME_CAST(sipName_setProjectionMatrixToRect), meth_QSGAbstractRenderer_setProjectionMatrixToRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGAbstractRenderer_setProjectionMatrixToRect)},
    {SIP_MLNAME_CAST(sipName_setViewportRect), meth_QSGAbstractRenderer_setViewportRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGAbstractRenderer_setViewportRect)},
    {SIP_MLNAME_CAST(sipName_viewportRect), meth_QSGAbstractRenderer_viewportRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGAbstractRenderer_viewportRect)}
};

static sipEnumMemberDef enummembers_QSGAbstractRenderer[] = {
    {sipName_ClearColorBuffer, static_cast<int>( ::QSGAbstractRenderer::ClearColorBuffer), 33},
    {sipName_ClearDepthBuffer, static_cast<int>( ::QSGAbstractRenderer::ClearDepthBuffer), 33},
    {sipName_ClearStencilBuffer, static_cast<int>( ::QSGAbstractRenderer::ClearStencilBuffer), 33},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QSGAbstractRenderer[] = {
    {"sceneGraphChanged()", "\1sceneGraphChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QSGAbstractRenderer = {
    & ::QSGAbstractRenderer::staticMetaObject,
    0,
    signals_QSGAbstractRenderer,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGAbstractRenderer = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGAbstractRenderer,
        {SIP_NULLPTR},
        &plugin_QSGAbstractRenderer
    },
    {
        sipNameNr_QSGAbstractRenderer,
        {0, 0, 1},
        12, methods_QSGAbstractRenderer,
        3, enummembers_QSGAbstractRenderer,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_QSGAbstractRenderer,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGAbstractRenderer,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSGAbstractRenderer,
    cast_QSGAbstractRenderer,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};




/* Call the instance's destructor. */
extern "C" {static void release_QQuickCloseEvent(void *, int);}
static void release_QQuickCloseEvent(void *, int)
{
}


static pyqt5ClassPluginDef plugin_QQuickCloseEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QQuickCloseEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQuickCloseEvent,
        {SIP_NULLPTR},
        &plugin_QQuickCloseEvent
    },
    {
        sipNameNr_QQuickCloseEvent,
        {0, 0, 1},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QQuickCloseEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickwindow.sip"
#include <qquickwindow.h>
#line 6378 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickwindow.sip"
#include <qquickwindow.h>
#line 6382 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"


extern "C" {static long slot_QQuickWindow_CreateTextureOptions___hash__(PyObject *);}
static long slot_QQuickWindow_CreateTextureOptions___hash__(PyObject *sipSelf)
{
     ::QQuickWindow::CreateTextureOptions *sipCpp = reinterpret_cast< ::QQuickWindow::CreateTextureOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuickWindow_CreateTextureOptions));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QQuickWindow::CreateTextureOptions::Int();
#line 6400 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QQuickWindow_CreateTextureOptions___bool__(PyObject *);}
static int slot_QQuickWindow_CreateTextureOptions___bool__(PyObject *sipSelf)
{
     ::QQuickWindow::CreateTextureOptions *sipCpp = reinterpret_cast< ::QQuickWindow::CreateTextureOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuickWindow_CreateTextureOptions));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QQuickWindow::CreateTextureOptions::Int() != 0);
#line 6425 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QQuickWindow_CreateTextureOptions___ne__(PyObject *,PyObject *);}
static PyObject *slot_QQuickWindow_CreateTextureOptions___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QQuickWindow::CreateTextureOptions *sipCpp = reinterpret_cast< ::QQuickWindow::CreateTextureOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuickWindow_CreateTextureOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickWindow::CreateTextureOptions* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QQuickWindow_CreateTextureOptions, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QQuickWindow::CreateTextureOptions::Int() != a0->operator QQuickWindow::CreateTextureOptions::Int());
#line 6455 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
            sipReleaseType(const_cast< ::QQuickWindow::CreateTextureOptions *>(a0),sipType_QQuickWindow_CreateTextureOptions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, ne_slot, sipType_QQuickWindow_CreateTextureOptions, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QQuickWindow_CreateTextureOptions___eq__(PyObject *,PyObject *);}
static PyObject *slot_QQuickWindow_CreateTextureOptions___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QQuickWindow::CreateTextureOptions *sipCpp = reinterpret_cast< ::QQuickWindow::CreateTextureOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuickWindow_CreateTextureOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickWindow::CreateTextureOptions* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QQuickWindow_CreateTextureOptions, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QQuickWindow::CreateTextureOptions::Int() == a0->operator QQuickWindow::CreateTextureOptions::Int());
#line 6491 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
            sipReleaseType(const_cast< ::QQuickWindow::CreateTextureOptions *>(a0),sipType_QQuickWindow_CreateTextureOptions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, eq_slot, sipType_QQuickWindow_CreateTextureOptions, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QQuickWindow_CreateTextureOptions___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QQuickWindow_CreateTextureOptions___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QQuickWindow_CreateTextureOptions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QQuickWindow::CreateTextureOptions *sipCpp = reinterpret_cast< ::QQuickWindow::CreateTextureOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuickWindow_CreateTextureOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QQuickWindow::CreateTextureOptions(*sipCpp ^ a0);
#line 6530 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QQuickWindow_CreateTextureOptions___xor__(PyObject *,PyObject *);}
static PyObject *slot_QQuickWindow_CreateTextureOptions___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickWindow::CreateTextureOptions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QQuickWindow_CreateTextureOptions, &a0, &a0State, &a1))
        {
             ::QQuickWindow::CreateTextureOptions*sipRes;

            sipRes = new  ::QQuickWindow::CreateTextureOptions((*a0 ^ a1));
            sipReleaseType(a0,sipType_QQuickWindow_CreateTextureOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QQuickWindow_CreateTextureOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QQuickWindow_CreateTextureOptions___ior__(PyObject *,PyObject *);}
static PyObject *slot_QQuickWindow_CreateTextureOptions___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QQuickWindow_CreateTextureOptions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QQuickWindow::CreateTextureOptions *sipCpp = reinterpret_cast< ::QQuickWindow::CreateTextureOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuickWindow_CreateTextureOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QQuickWindow::CreateTextureOptions(*sipCpp | a0);
#line 6602 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QQuickWindow_CreateTextureOptions___or__(PyObject *,PyObject *);}
static PyObject *slot_QQuickWindow_CreateTextureOptions___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickWindow::CreateTextureOptions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QQuickWindow_CreateTextureOptions, &a0, &a0State, &a1))
        {
             ::QQuickWindow::CreateTextureOptions*sipRes;

            sipRes = new  ::QQuickWindow::CreateTextureOptions((*a0 | a1));
            sipReleaseType(a0,sipType_QQuickWindow_CreateTextureOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QQuickWindow_CreateTextureOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QQuickWindow_CreateTextureOptions___iand__(PyObject *,PyObject *);}
static PyObject *slot_QQuickWindow_CreateTextureOptions___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QQuickWindow_CreateTextureOptions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QQuickWindow::CreateTextureOptions *sipCpp = reinterpret_cast< ::QQuickWindow::CreateTextureOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuickWindow_CreateTextureOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QQuickWindow::CreateTextureOptions::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QQuickWindow_CreateTextureOptions___and__(PyObject *,PyObject *);}
static PyObject *slot_QQuickWindow_CreateTextureOptions___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickWindow::CreateTextureOptions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QQuickWindow_CreateTextureOptions, &a0, &a0State, &a1))
        {
             ::QQuickWindow::CreateTextureOptions*sipRes;

            sipRes = new  ::QQuickWindow::CreateTextureOptions((*a0 & a1));
            sipReleaseType(a0,sipType_QQuickWindow_CreateTextureOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QQuickWindow_CreateTextureOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QQuickWindow_CreateTextureOptions___invert__(PyObject *);}
static PyObject *slot_QQuickWindow_CreateTextureOptions___invert__(PyObject *sipSelf)
{
     ::QQuickWindow::CreateTextureOptions *sipCpp = reinterpret_cast< ::QQuickWindow::CreateTextureOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuickWindow_CreateTextureOptions));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QQuickWindow::CreateTextureOptions*sipRes;

            sipRes = new  ::QQuickWindow::CreateTextureOptions(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QQuickWindow_CreateTextureOptions,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QQuickWindow_CreateTextureOptions___int__(PyObject *);}
static PyObject *slot_QQuickWindow_CreateTextureOptions___int__(PyObject *sipSelf)
{
     ::QQuickWindow::CreateTextureOptions *sipCpp = reinterpret_cast< ::QQuickWindow::CreateTextureOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuickWindow_CreateTextureOptions));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQuickWindow_CreateTextureOptions(void *, int);}
static void release_QQuickWindow_CreateTextureOptions(void *sipCppV, int)
{
    delete reinterpret_cast< ::QQuickWindow::CreateTextureOptions *>(sipCppV);
}


extern "C" {static void assign_QQuickWindow_CreateTextureOptions(void *, SIP_SSIZE_T, void *);}
static void assign_QQuickWindow_CreateTextureOptions(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QQuickWindow::CreateTextureOptions *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QQuickWindow::CreateTextureOptions *>(sipSrc);
}


extern "C" {static void *array_QQuickWindow_CreateTextureOptions(SIP_SSIZE_T);}
static void *array_QQuickWindow_CreateTextureOptions(SIP_SSIZE_T sipNrElem)
{
    return new  ::QQuickWindow::CreateTextureOptions[sipNrElem];
}


extern "C" {static void *copy_QQuickWindow_CreateTextureOptions(const void *, SIP_SSIZE_T);}
static void *copy_QQuickWindow_CreateTextureOptions(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QQuickWindow::CreateTextureOptions(reinterpret_cast<const  ::QQuickWindow::CreateTextureOptions *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QQuickWindow_CreateTextureOptions(sipSimpleWrapper *);}
static void dealloc_QQuickWindow_CreateTextureOptions(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQuickWindow_CreateTextureOptions(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QQuickWindow_CreateTextureOptions(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQuickWindow_CreateTextureOptions(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QQuickWindow::CreateTextureOptions *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QQuickWindow::CreateTextureOptions();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QQuickWindow::CreateTextureOptions(a0);

            return sipCpp;
        }
    }

    {
        const  ::QQuickWindow::CreateTextureOptions* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QQuickWindow_CreateTextureOptions, &a0, &a0State))
        {
            sipCpp = new  ::QQuickWindow::CreateTextureOptions(*a0);
            sipReleaseType(const_cast< ::QQuickWindow::CreateTextureOptions *>(a0),sipType_QQuickWindow_CreateTextureOptions,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QQuickWindow_CreateTextureOptions(PyObject *, void **, int *, PyObject *);}
static int convertTo_QQuickWindow_CreateTextureOptions(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QQuickWindow::CreateTextureOptions **sipCppPtr = reinterpret_cast< ::QQuickWindow::CreateTextureOptions **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QQuickWindow::CreateTextureOptions is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QQuickWindow_CreateTextureOption)) ||
            sipCanConvertToType(sipPy, sipType_QQuickWindow_CreateTextureOptions, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QQuickWindow_CreateTextureOption)))
{
    *sipCppPtr = new QQuickWindow::CreateTextureOptions(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QQuickWindow::CreateTextureOptions *>(sipConvertToType(sipPy, sipType_QQuickWindow_CreateTextureOptions, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 6870 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QQuickWindow_CreateTextureOptions[] = {
    {(void *)slot_QQuickWindow_CreateTextureOptions___hash__, hash_slot},
    {(void *)slot_QQuickWindow_CreateTextureOptions___bool__, bool_slot},
    {(void *)slot_QQuickWindow_CreateTextureOptions___ne__, ne_slot},
    {(void *)slot_QQuickWindow_CreateTextureOptions___eq__, eq_slot},
    {(void *)slot_QQuickWindow_CreateTextureOptions___ixor__, ixor_slot},
    {(void *)slot_QQuickWindow_CreateTextureOptions___xor__, xor_slot},
    {(void *)slot_QQuickWindow_CreateTextureOptions___ior__, ior_slot},
    {(void *)slot_QQuickWindow_CreateTextureOptions___or__, or_slot},
    {(void *)slot_QQuickWindow_CreateTextureOptions___iand__, iand_slot},
    {(void *)slot_QQuickWindow_CreateTextureOptions___and__, and_slot},
    {(void *)slot_QQuickWindow_CreateTextureOptions___invert__, invert_slot},
    {(void *)slot_QQuickWindow_CreateTextureOptions___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QQuickWindow_CreateTextureOptions, "\1QQuickWindow.CreateTextureOptions()\n"
"QQuickWindow.CreateTextureOptions(Union[QQuickWindow.CreateTextureOptions, QQuickWindow.CreateTextureOption])\n"
"QQuickWindow.CreateTextureOptions(QQuickWindow.CreateTextureOptions)");


static pyqt5ClassPluginDef plugin_QQuickWindow_CreateTextureOptions = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QQuickWindow_CreateTextureOptions = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQuickWindow__CreateTextureOptions,
        {SIP_NULLPTR},
        &plugin_QQuickWindow_CreateTextureOptions
    },
    {
        sipNameNr_CreateTextureOptions,
        {25, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QQuickWindow_CreateTextureOptions,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QQuickWindow_CreateTextureOptions,
    init_type_QQuickWindow_CreateTextureOptions,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQuickWindow_CreateTextureOptions,
    assign_QQuickWindow_CreateTextureOptions,
    array_QQuickWindow_CreateTextureOptions,
    copy_QQuickWindow_CreateTextureOptions,
    release_QQuickWindow_CreateTextureOptions,
    SIP_NULLPTR,
    convertTo_QQuickWindow_CreateTextureOptions,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickview.sip"
#include <qquickview.h>
#line 6958 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 6962 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 59 "sip/QtQml/qqmlengine.sip"
#include <qqmlengine.h>
#line 6965 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 6968 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 205 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 6971 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 6974 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 6977 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 416 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 6980 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 6983 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 6986 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtQml/qqmlerror.sip"
#include <qqmlerror.h>
#line 6989 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 6992 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtQml/qqmlcontext.sip"
#include <qqmlcontext.h>
#line 6995 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickwindow.sip"
#include <qquickwindow.h>
#line 6998 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 7001 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgimagenode.sip"
#include <qsgimagenode.h>
#line 7004 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgrectanglenode.sip"
#include <qsgrectanglenode.h>
#line 7007 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgrendererinterface.sip"
#include <qsgrendererinterface.h>
#line 7010 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qrunnable.sip"
#include <qrunnable.h>
#line 7013 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 46 "sip/QtGui/qopenglcontext.sip"
#include <qopenglcontext.h>
#line 7016 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 253 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 7019 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 7022 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 375 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 7025 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 462 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 7028 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 451 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 7031 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 786 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 7034 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 7037 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgtexture.sip"
#include <qsgtexture.h>
#line 7040 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickwindow.sip"
#include <qquickwindow.h>
#line 7043 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtGui/qimage.sip"
#include <qimage.h>
#line 7046 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 69 "sip/QtQml/qqmlincubator.sip"
#include <qqmlincubator.h>
#line 7049 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 28 "sip/QtGui/qopenglframebufferobject.sip"
#include <qopenglframebufferobject.h>
#line 7052 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 7055 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 7058 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 7061 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 189 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 7064 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 7067 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 296 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 7070 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 717 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 7073 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 403 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 7076 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtGui/qscreen.sip"
#include <qscreen.h>
#line 7079 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 7082 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 7085 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 7088 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 7091 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 7094 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 7097 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtGui/qsurfaceformat.sip"
#include <qsurfaceformat.h>
#line 7100 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtGui/qsurface.sip"
#include <qsurface.h>
#line 7103 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 7106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 7109 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 7112 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 7115 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 7118 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 7121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 7124 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 7127 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 7130 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 7133 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 7136 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

sipQQuickView::sipQQuickView( ::QWindow*a0):  ::QQuickView(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQuickView::sipQQuickView( ::QQmlEngine*a0, ::QWindow*a1):  ::QQuickView(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQuickView::sipQQuickView(const  ::QUrl& a0, ::QWindow*a1):  ::QQuickView(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQuickView::~sipQQuickView()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQQuickView::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtQuick_qt_metaobject(sipPySelf,sipType_QQuickView);

    return  ::QQuickView::metaObject();
}

int sipQQuickView::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QQuickView::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtQuick_qt_metacall(sipPySelf,sipType_QQuickView,_c,_id,_a);

    return _id;
}

void *sipQQuickView::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtQuick_qt_metacast(sipPySelf, sipType_QQuickView, _clname, &sipCpp) ? sipCpp :  ::QQuickView::qt_metacast(_clname));
}

void sipQQuickView::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_tabletEvent);

    if (!sipMeth)
    {
         ::QQuickView::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_QtQuick_43(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickView::touchEvent( ::QTouchEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_touchEvent);

    if (!sipMeth)
    {
         ::QQuickView::touchEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTouchEvent*);

    sipVH_QtQuick_17(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickView::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_wheelEvent);

    if (!sipMeth)
    {
         ::QQuickView::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtQuick_16(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickView::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
         ::QQuickView::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtQuick_15(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickView::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
         ::QQuickView::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtQuick_15(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickView::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
         ::QQuickView::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtQuick_15(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickView::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_mousePressEvent);

    if (!sipMeth)
    {
         ::QQuickView::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtQuick_15(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickView::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
         ::QQuickView::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtQuick_12(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickView::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_keyPressEvent);

    if (!sipMeth)
    {
         ::QQuickView::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtQuick_12(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickView::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_hideEvent);

    if (!sipMeth)
    {
         ::QQuickView::hideEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_QtQuick_44(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickView::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_showEvent);

    if (!sipMeth)
    {
         ::QQuickView::showEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_QtQuick_45(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickView::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,SIP_NULLPTR,sipName_focusOutEvent);

    if (!sipMeth)
    {
         ::QQuickView::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtQuick_14(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickView::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,SIP_NULLPTR,sipName_focusInEvent);

    if (!sipMeth)
    {
         ::QQuickView::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtQuick_14(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickView::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,SIP_NULLPTR,sipName_moveEvent);

    if (!sipMeth)
    {
         ::QQuickView::moveEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_QtQuick_46(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickView::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_resizeEvent);

    if (!sipMeth)
    {
         ::QQuickView::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_QtQuick_47(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickView::exposeEvent( ::QExposeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,SIP_NULLPTR,sipName_exposeEvent);

    if (!sipMeth)
    {
         ::QQuickView::exposeEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QExposeEvent*);

    sipVH_QtQuick_48(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QObject* sipQQuickView::focusObject() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,SIP_NULLPTR,sipName_focusObject);

    if (!sipMeth)
        return  ::QQuickView::focusObject();

    extern  ::QObject* sipVH_QtQuick_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_49(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSurfaceFormat sipQQuickView::format() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,SIP_NULLPTR,sipName_format);

    if (!sipMeth)
        return  ::QQuickView::format();

    extern  ::QSurfaceFormat sipVH_QtQuick_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_50(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSurface::SurfaceType sipQQuickView::surfaceType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,SIP_NULLPTR,sipName_surfaceType);

    if (!sipMeth)
        return  ::QQuickView::surfaceType();

    extern  ::QSurface::SurfaceType sipVH_QtQuick_51(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_51(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQQuickView::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,SIP_NULLPTR,sipName_size);

    if (!sipMeth)
        return  ::QQuickView::size();

    extern  ::QSize sipVH_QtQuick_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_30(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQQuickView::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QQuickView::event(a0);

    extern bool sipVH_QtQuick_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtQuick_5(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQQuickView::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QQuickView::eventFilter(a0,a1);

    extern bool sipVH_QtQuick_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtQuick_4(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQQuickView::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QQuickView::timerEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtQuick_3(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickView::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QQuickView::childEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtQuick_2(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickView::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QQuickView::customEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtQuick_1(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickView::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QQuickView::connectNotify(a0);
        return;
    }

    extern void sipVH_QtQuick_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQuick_0(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickView::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QQuickView::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtQuick_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQuick_0(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QQuickView_source, "source(self) -> QUrl");

extern "C" {static PyObject *meth_QQuickView_source(PyObject *, PyObject *);}
static PyObject *meth_QQuickView_source(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickView, &sipCpp))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl(sipCpp->source());

            return sipConvertFromNewType(sipRes,sipType_QUrl,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickView, sipName_source, doc_QQuickView_source);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickView_engine, "engine(self) -> QQmlEngine");

extern "C" {static PyObject *meth_QQuickView_engine(PyObject *, PyObject *);}
static PyObject *meth_QQuickView_engine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickView, &sipCpp))
        {
             ::QQmlEngine*sipRes;

            sipRes = sipCpp->engine();

            return sipConvertFromType(sipRes,sipType_QQmlEngine,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickView, sipName_engine, doc_QQuickView_engine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickView_rootContext, "rootContext(self) -> QQmlContext");

extern "C" {static PyObject *meth_QQuickView_rootContext(PyObject *, PyObject *);}
static PyObject *meth_QQuickView_rootContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickView, &sipCpp))
        {
             ::QQmlContext*sipRes;

            sipRes = sipCpp->rootContext();

            return sipConvertFromType(sipRes,sipType_QQmlContext,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickView, sipName_rootContext, doc_QQuickView_rootContext);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickView_rootObject, "rootObject(self) -> QQuickItem");

extern "C" {static PyObject *meth_QQuickView_rootObject(PyObject *, PyObject *);}
static PyObject *meth_QQuickView_rootObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickView, &sipCpp))
        {
             ::QQuickItem*sipRes;

            sipRes = sipCpp->rootObject();

            return sipConvertFromType(sipRes,sipType_QQuickItem,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickView, sipName_rootObject, doc_QQuickView_rootObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickView_resizeMode, "resizeMode(self) -> QQuickView.ResizeMode");

extern "C" {static PyObject *meth_QQuickView_resizeMode(PyObject *, PyObject *);}
static PyObject *meth_QQuickView_resizeMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickView, &sipCpp))
        {
             ::QQuickView::ResizeMode sipRes;

            sipRes = sipCpp->resizeMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QQuickView_ResizeMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickView, sipName_resizeMode, doc_QQuickView_resizeMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickView_setResizeMode, "setResizeMode(self, QQuickView.ResizeMode)");

extern "C" {static PyObject *meth_QQuickView_setResizeMode(PyObject *, PyObject *);}
static PyObject *meth_QQuickView_setResizeMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickView::ResizeMode a0;
         ::QQuickView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QQuickView, &sipCpp, sipType_QQuickView_ResizeMode, &a0))
        {
            sipCpp->setResizeMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickView, sipName_setResizeMode, doc_QQuickView_setResizeMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickView_status, "status(self) -> QQuickView.Status");

extern "C" {static PyObject *meth_QQuickView_status(PyObject *, PyObject *);}
static PyObject *meth_QQuickView_status(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickView, &sipCpp))
        {
             ::QQuickView::Status sipRes;

            sipRes = sipCpp->status();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QQuickView_Status);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickView, sipName_status, doc_QQuickView_status);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickView_errors, "errors(self) -> List[QQmlError]");

extern "C" {static PyObject *meth_QQuickView_errors(PyObject *, PyObject *);}
static PyObject *meth_QQuickView_errors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickView, &sipCpp))
        {
            QList< ::QQmlError>*sipRes;

            sipRes = new QList< ::QQmlError>(sipCpp->errors());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QQmlError,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickView, sipName_errors, doc_QQuickView_errors);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickView_initialSize, "initialSize(self) -> QSize");

extern "C" {static PyObject *meth_QQuickView_initialSize(PyObject *, PyObject *);}
static PyObject *meth_QQuickView_initialSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickView, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->initialSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickView, sipName_initialSize, doc_QQuickView_initialSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickView_setSource, "setSource(self, QUrl)");

extern "C" {static PyObject *meth_QQuickView_setSource(PyObject *, PyObject *);}
static PyObject *meth_QQuickView_setSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl* a0;
         ::QQuickView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QQuickView, &sipCpp, sipType_QUrl, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSource(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickView, sipName_setSource, doc_QQuickView_setSource);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickView_resizeEvent, "resizeEvent(self, QResizeEvent)");

extern "C" {static PyObject *meth_QQuickView_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickView_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QResizeEvent* a0;
         ::QQuickView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickView, &sipCpp, sipType_QResizeEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickView::resizeEvent(a0) : sipCpp->resizeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickView, sipName_resizeEvent, doc_QQuickView_resizeEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickView_timerEvent, "timerEvent(self, QTimerEvent)");

extern "C" {static PyObject *meth_QQuickView_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickView_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTimerEvent* a0;
         ::QQuickView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickView, &sipCpp, sipType_QTimerEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickView::timerEvent(a0) : sipCpp->timerEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickView, sipName_timerEvent, doc_QQuickView_timerEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickView_keyPressEvent, "keyPressEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QQuickView_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickView_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
         ::QQuickView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickView, &sipCpp, sipType_QKeyEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickView::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickView, sipName_keyPressEvent, doc_QQuickView_keyPressEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickView_keyReleaseEvent, "keyReleaseEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QQuickView_keyReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickView_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
         ::QQuickView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickView, &sipCpp, sipType_QKeyEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickView::keyReleaseEvent(a0) : sipCpp->keyReleaseEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickView, sipName_keyReleaseEvent, doc_QQuickView_keyReleaseEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickView_mousePressEvent, "mousePressEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QQuickView_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickView_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QQuickView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickView::mousePressEvent(a0) : sipCpp->mousePressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickView, sipName_mousePressEvent, doc_QQuickView_mousePressEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickView_mouseReleaseEvent, "mouseReleaseEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QQuickView_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickView_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QQuickView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickView::mouseReleaseEvent(a0) : sipCpp->mouseReleaseEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickView, sipName_mouseReleaseEvent, doc_QQuickView_mouseReleaseEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickView_mouseMoveEvent, "mouseMoveEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QQuickView_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickView_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QQuickView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickView::mouseMoveEvent(a0) : sipCpp->mouseMoveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickView, sipName_mouseMoveEvent, doc_QQuickView_mouseMoveEvent);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QQuickView(void *, const sipTypeDef *);}
static void *cast_QQuickView(void *sipCppV, const sipTypeDef *targetType)
{
     ::QQuickView *sipCpp = reinterpret_cast< ::QQuickView *>(sipCppV);

    if (targetType == sipType_QQuickWindow)
        return static_cast< ::QQuickWindow *>(sipCpp);

    if (targetType == sipType_QWindow)
        return static_cast< ::QWindow *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QSurface)
        return static_cast< ::QSurface *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQuickView(void *, int);}
static void release_QQuickView(void *sipCppV, int)
{
     ::QQuickView *sipCpp = reinterpret_cast< ::QQuickView *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QQuickView(sipSimpleWrapper *);}
static void dealloc_QQuickView(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQQuickView *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQuickView(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QQuickView(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQuickView(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQQuickView *sipCpp = SIP_NULLPTR;

    {
         ::QWindow* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWindow, &a0, sipOwner))
        {
            sipCpp = new sipQQuickView(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QQmlEngine* a0;
         ::QWindow* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8JH", sipType_QQmlEngine, &a0, sipType_QWindow, &a1, sipOwner))
        {
            sipCpp = new sipQQuickView(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QUrl* a0;
         ::QWindow* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|JH", sipType_QUrl, &a0, sipType_QWindow, &a1, sipOwner))
        {
            sipCpp = new sipQQuickView(*a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QQuickView[] = {{25, 255, 1}};


static PyMethodDef methods_QQuickView[] = {
    {SIP_MLNAME_CAST(sipName_engine), meth_QQuickView_engine, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickView_engine)},
    {SIP_MLNAME_CAST(sipName_errors), meth_QQuickView_errors, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickView_errors)},
    {SIP_MLNAME_CAST(sipName_initialSize), meth_QQuickView_initialSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickView_initialSize)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QQuickView_keyPressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickView_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), meth_QQuickView_keyReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickView_keyReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_QQuickView_mouseMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickView_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QQuickView_mousePressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickView_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QQuickView_mouseReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickView_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QQuickView_resizeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickView_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_resizeMode), meth_QQuickView_resizeMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickView_resizeMode)},
    {SIP_MLNAME_CAST(sipName_rootContext), meth_QQuickView_rootContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickView_rootContext)},
    {SIP_MLNAME_CAST(sipName_rootObject), meth_QQuickView_rootObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickView_rootObject)},
    {SIP_MLNAME_CAST(sipName_setResizeMode), meth_QQuickView_setResizeMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickView_setResizeMode)},
    {SIP_MLNAME_CAST(sipName_setSource), meth_QQuickView_setSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickView_setSource)},
    {SIP_MLNAME_CAST(sipName_source), meth_QQuickView_source, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickView_source)},
    {SIP_MLNAME_CAST(sipName_status), meth_QQuickView_status, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickView_status)},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QQuickView_timerEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickView_timerEvent)}
};

static sipEnumMemberDef enummembers_QQuickView[] = {
    {sipName_Error, static_cast<int>( ::QQuickView::Error), 24},
    {sipName_Loading, static_cast<int>( ::QQuickView::Loading), 24},
    {sipName_Null, static_cast<int>( ::QQuickView::Null), 24},
    {sipName_Ready, static_cast<int>( ::QQuickView::Ready), 24},
    {sipName_SizeRootObjectToView, static_cast<int>( ::QQuickView::SizeRootObjectToView), 23},
    {sipName_SizeViewToRootObject, static_cast<int>( ::QQuickView::SizeViewToRootObject), 23},
};

PyDoc_STRVAR(doc_QQuickView, "\1QQuickView(parent: QWindow = None)\n"
"QQuickView(QQmlEngine, QWindow)\n"
"QQuickView(QUrl, parent: QWindow = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QQuickView[] = {
    {"statusChanged(QQuickView::Status)", "\1statusChanged(self, QQuickView.Status)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QQuickView = {
    & ::QQuickView::staticMetaObject,
    0,
    signals_QQuickView,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QQuickView = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQuickView,
        {SIP_NULLPTR},
        &plugin_QQuickView
    },
    {
        sipNameNr_QQuickView,
        {0, 0, 1},
        17, methods_QQuickView,
        6, enummembers_QQuickView,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QQuickView,
    -1,
    -1,
    supers_QQuickView,
    SIP_NULLPTR,
    init_type_QQuickView,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQuickView,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QQuickView,
    cast_QQuickView,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickwindow.sip"
#include <qquickwindow.h>
#line 8355 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 8359 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 8362 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgimagenode.sip"
#include <qsgimagenode.h>
#line 8365 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgrectanglenode.sip"
#include <qsgrectanglenode.h>
#line 8368 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgrendererinterface.sip"
#include <qsgrendererinterface.h>
#line 8371 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qrunnable.sip"
#include <qrunnable.h>
#line 8374 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 46 "sip/QtGui/qopenglcontext.sip"
#include <qopenglcontext.h>
#line 8377 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 253 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 8380 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 205 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 8383 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 8386 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 8389 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 375 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 8392 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 462 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 8395 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 451 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 8398 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 416 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 8401 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 786 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 8404 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 8407 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgtexture.sip"
#include <qsgtexture.h>
#line 8410 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 8413 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickwindow.sip"
#include <qquickwindow.h>
#line 8416 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtGui/qimage.sip"
#include <qimage.h>
#line 8419 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 69 "sip/QtQml/qqmlincubator.sip"
#include <qqmlincubator.h>
#line 8422 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 28 "sip/QtGui/qopenglframebufferobject.sip"
#include <qopenglframebufferobject.h>
#line 8425 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 8428 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 8431 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 8434 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 8437 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 189 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 8440 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 8443 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 296 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 8446 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 717 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 8449 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 403 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 8452 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtGui/qscreen.sip"
#include <qscreen.h>
#line 8455 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 8458 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 8461 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 8464 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 8467 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 8470 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 8473 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtGui/qsurfaceformat.sip"
#include <qsurfaceformat.h>
#line 8476 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtGui/qsurface.sip"
#include <qsurface.h>
#line 8479 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 8482 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 8485 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 8488 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 8491 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 8494 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 8497 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 8500 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 8503 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 8506 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 8509 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 8512 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 8515 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

sipQQuickWindow::sipQQuickWindow( ::QWindow*a0):  ::QQuickWindow(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQuickWindow::~sipQQuickWindow()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQQuickWindow::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtQuick_qt_metaobject(sipPySelf,sipType_QQuickWindow);

    return  ::QQuickWindow::metaObject();
}

int sipQQuickWindow::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QQuickWindow::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtQuick_qt_metacall(sipPySelf,sipType_QQuickWindow,_c,_id,_a);

    return _id;
}

void *sipQQuickWindow::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtQuick_qt_metacast(sipPySelf, sipType_QQuickWindow, _clname, &sipCpp) ? sipCpp :  ::QQuickWindow::qt_metacast(_clname));
}

void sipQQuickWindow::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QQuickWindow::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtQuick_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQuick_0(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QQuickWindow::connectNotify(a0);
        return;
    }

    extern void sipVH_QtQuick_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQuick_0(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QQuickWindow::customEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtQuick_1(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QQuickWindow::childEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtQuick_2(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QQuickWindow::timerEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtQuick_3(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQQuickWindow::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QQuickWindow::eventFilter(a0,a1);

    extern bool sipVH_QtQuick_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtQuick_4(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQQuickWindow::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QQuickWindow::event(a0);

    extern bool sipVH_QtQuick_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtQuick_5(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSize sipQQuickWindow::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,SIP_NULLPTR,sipName_size);

    if (!sipMeth)
        return  ::QQuickWindow::size();

    extern  ::QSize sipVH_QtQuick_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_30(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSurface::SurfaceType sipQQuickWindow::surfaceType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,SIP_NULLPTR,sipName_surfaceType);

    if (!sipMeth)
        return  ::QQuickWindow::surfaceType();

    extern  ::QSurface::SurfaceType sipVH_QtQuick_51(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_51(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSurfaceFormat sipQQuickWindow::format() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,SIP_NULLPTR,sipName_format);

    if (!sipMeth)
        return  ::QQuickWindow::format();

    extern  ::QSurfaceFormat sipVH_QtQuick_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_50(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QObject* sipQQuickWindow::focusObject() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,SIP_NULLPTR,sipName_focusObject);

    if (!sipMeth)
        return  ::QQuickWindow::focusObject();

    extern  ::QObject* sipVH_QtQuick_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_49(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQQuickWindow::exposeEvent( ::QExposeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,SIP_NULLPTR,sipName_exposeEvent);

    if (!sipMeth)
    {
         ::QQuickWindow::exposeEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QExposeEvent*);

    sipVH_QtQuick_48(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,SIP_NULLPTR,sipName_resizeEvent);

    if (!sipMeth)
    {
         ::QQuickWindow::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_QtQuick_47(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,SIP_NULLPTR,sipName_moveEvent);

    if (!sipMeth)
    {
         ::QQuickWindow::moveEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_QtQuick_46(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_focusInEvent);

    if (!sipMeth)
    {
         ::QQuickWindow::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtQuick_14(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,SIP_NULLPTR,sipName_focusOutEvent);

    if (!sipMeth)
    {
         ::QQuickWindow::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtQuick_14(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,SIP_NULLPTR,sipName_showEvent);

    if (!sipMeth)
    {
         ::QQuickWindow::showEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_QtQuick_45(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,SIP_NULLPTR,sipName_hideEvent);

    if (!sipMeth)
    {
         ::QQuickWindow::hideEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_QtQuick_44(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,SIP_NULLPTR,sipName_keyPressEvent);

    if (!sipMeth)
    {
         ::QQuickWindow::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtQuick_12(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,SIP_NULLPTR,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
         ::QQuickWindow::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtQuick_12(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_mousePressEvent);

    if (!sipMeth)
    {
         ::QQuickWindow::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtQuick_15(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,SIP_NULLPTR,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
         ::QQuickWindow::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtQuick_15(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,SIP_NULLPTR,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
         ::QQuickWindow::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtQuick_15(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,SIP_NULLPTR,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
         ::QQuickWindow::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtQuick_15(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,SIP_NULLPTR,sipName_wheelEvent);

    if (!sipMeth)
    {
         ::QQuickWindow::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtQuick_16(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::touchEvent( ::QTouchEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,SIP_NULLPTR,sipName_touchEvent);

    if (!sipMeth)
    {
         ::QQuickWindow::touchEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTouchEvent*);

    sipVH_QtQuick_17(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,SIP_NULLPTR,sipName_tabletEvent);

    if (!sipMeth)
    {
         ::QQuickWindow::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_QtQuick_43(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QQuickWindow_contentItem, "contentItem(self) -> QQuickItem");

extern "C" {static PyObject *meth_QQuickWindow_contentItem(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_contentItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
             ::QQuickItem*sipRes;

            sipRes = sipCpp->contentItem();

            return sipConvertFromType(sipRes,sipType_QQuickItem,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_contentItem, doc_QQuickWindow_contentItem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_activeFocusItem, "activeFocusItem(self) -> QQuickItem");

extern "C" {static PyObject *meth_QQuickWindow_activeFocusItem(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_activeFocusItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
             ::QQuickItem*sipRes;

            sipRes = sipCpp->activeFocusItem();

            return sipConvertFromType(sipRes,sipType_QQuickItem,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_activeFocusItem, doc_QQuickWindow_activeFocusItem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_focusObject, "focusObject(self) -> QObject");

extern "C" {static PyObject *meth_QQuickWindow_focusObject(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_focusObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
             ::QObject*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QQuickWindow::focusObject() : sipCpp->focusObject());

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_focusObject, doc_QQuickWindow_focusObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_mouseGrabberItem, "mouseGrabberItem(self) -> QQuickItem");

extern "C" {static PyObject *meth_QQuickWindow_mouseGrabberItem(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_mouseGrabberItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
             ::QQuickItem*sipRes;

            sipRes = sipCpp->mouseGrabberItem();

            return sipConvertFromType(sipRes,sipType_QQuickItem,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_mouseGrabberItem, doc_QQuickWindow_mouseGrabberItem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_sendEvent, "sendEvent(self, QQuickItem, QEvent) -> bool");

extern "C" {static PyObject *meth_QQuickWindow_sendEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_sendEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickItem* a0;
         ::QEvent* a1;
         ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QQuickItem, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->sendEvent(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_sendEvent, doc_QQuickWindow_sendEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_grabWindow, "grabWindow(self) -> QImage");

extern "C" {static PyObject *meth_QQuickWindow_grabWindow(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_grabWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
             ::QImage*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QImage(sipCpp->grabWindow());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QImage,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_grabWindow, doc_QQuickWindow_grabWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_setRenderTarget, "setRenderTarget(self, QOpenGLFramebufferObject)\n"
"setRenderTarget(self, int, QSize)");

extern "C" {static PyObject *meth_QQuickWindow_setRenderTarget(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_setRenderTarget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLFramebufferObject* a0;
         ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QOpenGLFramebufferObject, &a0))
        {
            sipCpp->setRenderTarget(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::uint a0;
        const  ::QSize* a1;
         ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuJ9", &sipSelf, sipType_QQuickWindow, &sipCpp, &a0, sipType_QSize, &a1))
        {
            sipCpp->setRenderTarget(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_setRenderTarget, doc_QQuickWindow_setRenderTarget);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_renderTarget, "renderTarget(self) -> QOpenGLFramebufferObject");

extern "C" {static PyObject *meth_QQuickWindow_renderTarget(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_renderTarget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
             ::QOpenGLFramebufferObject*sipRes;

            sipRes = sipCpp->renderTarget();

            return sipConvertFromType(sipRes,sipType_QOpenGLFramebufferObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_renderTarget, doc_QQuickWindow_renderTarget);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_renderTargetId, "renderTargetId(self) -> int");

extern "C" {static PyObject *meth_QQuickWindow_renderTargetId(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_renderTargetId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
             ::uint sipRes;

            sipRes = sipCpp->renderTargetId();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_renderTargetId, doc_QQuickWindow_renderTargetId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_renderTargetSize, "renderTargetSize(self) -> QSize");

extern "C" {static PyObject *meth_QQuickWindow_renderTargetSize(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_renderTargetSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->renderTargetSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_renderTargetSize, doc_QQuickWindow_renderTargetSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_incubationController, "incubationController(self) -> QQmlIncubationController");

extern "C" {static PyObject *meth_QQuickWindow_incubationController(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_incubationController(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
             ::QQmlIncubationController*sipRes;

            sipRes = sipCpp->incubationController();

            return sipConvertFromType(sipRes,sipType_QQmlIncubationController,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_incubationController, doc_QQuickWindow_incubationController);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_createTextureFromImage, "createTextureFromImage(self, QImage) -> QSGTexture\n"
"createTextureFromImage(self, QImage, Union[QQuickWindow.CreateTextureOptions, QQuickWindow.CreateTextureOption]) -> QSGTexture");

extern "C" {static PyObject *meth_QQuickWindow_createTextureFromImage(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_createTextureFromImage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage* a0;
        const  ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QImage, &a0))
        {
             ::QSGTexture*sipRes;

            sipRes = sipCpp->createTextureFromImage(*a0);

            return sipConvertFromNewType(sipRes,sipType_QSGTexture,SIP_NULLPTR);
        }
    }

    {
        const  ::QImage* a0;
         ::QQuickWindow::CreateTextureOptions* a1;
        int a1State = 0;
        const  ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QImage, &a0, sipType_QQuickWindow_CreateTextureOptions, &a1, &a1State))
        {
             ::QSGTexture*sipRes;

            sipRes = sipCpp->createTextureFromImage(*a0,*a1);
            sipReleaseType(a1,sipType_QQuickWindow_CreateTextureOptions,a1State);

            return sipConvertFromNewType(sipRes,sipType_QSGTexture,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_createTextureFromImage, doc_QQuickWindow_createTextureFromImage);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_createTextureFromId, "createTextureFromId(self, int, QSize, options: Union[QQuickWindow.CreateTextureOptions, QQuickWindow.CreateTextureOption] = QQuickWindow.CreateTextureOption()) -> QSGTexture");

extern "C" {static PyObject *meth_QQuickWindow_createTextureFromId(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_createTextureFromId(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::uint a0;
        const  ::QSize* a1;
         ::QQuickWindow::CreateTextureOptions a2def = QQuickWindow::CreateTextureOption();
         ::QQuickWindow::CreateTextureOptions* a2 = &a2def;
        int a2State = 0;
        const  ::QQuickWindow *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BuJ9|J1", &sipSelf, sipType_QQuickWindow, &sipCpp, &a0, sipType_QSize, &a1, sipType_QQuickWindow_CreateTextureOptions, &a2, &a2State))
        {
             ::QSGTexture*sipRes;

            sipRes = sipCpp->createTextureFromId(a0,*a1,*a2);
            sipReleaseType(a2,sipType_QQuickWindow_CreateTextureOptions,a2State);

            return sipConvertFromType(sipRes,sipType_QSGTexture,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_createTextureFromId, doc_QQuickWindow_createTextureFromId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_setClearBeforeRendering, "setClearBeforeRendering(self, bool)");

extern "C" {static PyObject *meth_QQuickWindow_setClearBeforeRendering(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_setClearBeforeRendering(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickWindow, &sipCpp, &a0))
        {
            sipCpp->setClearBeforeRendering(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_setClearBeforeRendering, doc_QQuickWindow_setClearBeforeRendering);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_clearBeforeRendering, "clearBeforeRendering(self) -> bool");

extern "C" {static PyObject *meth_QQuickWindow_clearBeforeRendering(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_clearBeforeRendering(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->clearBeforeRendering();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_clearBeforeRendering, doc_QQuickWindow_clearBeforeRendering);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_setColor, "setColor(self, Union[QColor, Qt.GlobalColor])");

extern "C" {static PyObject *meth_QQuickWindow_setColor(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_setColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor* a0;
        int a0State = 0;
         ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->setColor(*a0);
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_setColor, doc_QQuickWindow_setColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_color, "color(self) -> QColor");

extern "C" {static PyObject *meth_QQuickWindow_color(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_color(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor(sipCpp->color());

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_color, doc_QQuickWindow_color);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_setPersistentOpenGLContext, "setPersistentOpenGLContext(self, bool)");

extern "C" {static PyObject *meth_QQuickWindow_setPersistentOpenGLContext(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_setPersistentOpenGLContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickWindow, &sipCpp, &a0))
        {
            sipCpp->setPersistentOpenGLContext(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_setPersistentOpenGLContext, doc_QQuickWindow_setPersistentOpenGLContext);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_isPersistentOpenGLContext, "isPersistentOpenGLContext(self) -> bool");

extern "C" {static PyObject *meth_QQuickWindow_isPersistentOpenGLContext(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_isPersistentOpenGLContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isPersistentOpenGLContext();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_isPersistentOpenGLContext, doc_QQuickWindow_isPersistentOpenGLContext);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_setPersistentSceneGraph, "setPersistentSceneGraph(self, bool)");

extern "C" {static PyObject *meth_QQuickWindow_setPersistentSceneGraph(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_setPersistentSceneGraph(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickWindow, &sipCpp, &a0))
        {
            sipCpp->setPersistentSceneGraph(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_setPersistentSceneGraph, doc_QQuickWindow_setPersistentSceneGraph);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_isPersistentSceneGraph, "isPersistentSceneGraph(self) -> bool");

extern "C" {static PyObject *meth_QQuickWindow_isPersistentSceneGraph(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_isPersistentSceneGraph(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isPersistentSceneGraph();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_isPersistentSceneGraph, doc_QQuickWindow_isPersistentSceneGraph);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_openglContext, "openglContext(self) -> QOpenGLContext");

extern "C" {static PyObject *meth_QQuickWindow_openglContext(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_openglContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
             ::QOpenGLContext*sipRes;

            sipRes = sipCpp->openglContext();

            return sipConvertFromType(sipRes,sipType_QOpenGLContext,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_openglContext, doc_QQuickWindow_openglContext);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_update, "update(self)");

extern "C" {static PyObject *meth_QQuickWindow_update(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_update(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            sipCpp->update();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_update, doc_QQuickWindow_update);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_releaseResources, "releaseResources(self)");

extern "C" {static PyObject *meth_QQuickWindow_releaseResources(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_releaseResources(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            sipCpp->releaseResources();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_releaseResources, doc_QQuickWindow_releaseResources);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_exposeEvent, "exposeEvent(self, QExposeEvent)");

extern "C" {static PyObject *meth_QQuickWindow_exposeEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_exposeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QExposeEvent* a0;
         ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QExposeEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickWindow::exposeEvent(a0) : sipCpp->exposeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_exposeEvent, doc_QQuickWindow_exposeEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_resizeEvent, "resizeEvent(self, QResizeEvent)");

extern "C" {static PyObject *meth_QQuickWindow_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QResizeEvent* a0;
         ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QResizeEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickWindow::resizeEvent(a0) : sipCpp->resizeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_resizeEvent, doc_QQuickWindow_resizeEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_showEvent, "showEvent(self, QShowEvent)");

extern "C" {static PyObject *meth_QQuickWindow_showEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_showEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QShowEvent* a0;
         ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QShowEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickWindow::showEvent(a0) : sipCpp->showEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_showEvent, doc_QQuickWindow_showEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_hideEvent, "hideEvent(self, QHideEvent)");

extern "C" {static PyObject *meth_QQuickWindow_hideEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_hideEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QHideEvent* a0;
         ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QHideEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickWindow::hideEvent(a0) : sipCpp->hideEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_hideEvent, doc_QQuickWindow_hideEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_focusInEvent, "focusInEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QQuickWindow_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_focusInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFocusEvent* a0;
         ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QFocusEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickWindow::focusInEvent(a0) : sipCpp->focusInEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_focusInEvent, doc_QQuickWindow_focusInEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_focusOutEvent, "focusOutEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QQuickWindow_focusOutEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFocusEvent* a0;
         ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QFocusEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickWindow::focusOutEvent(a0) : sipCpp->focusOutEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_focusOutEvent, doc_QQuickWindow_focusOutEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QQuickWindow_event(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QQuickWindow::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_event, doc_QQuickWindow_event);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_keyPressEvent, "keyPressEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QQuickWindow_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
         ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QKeyEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickWindow::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_keyPressEvent, doc_QQuickWindow_keyPressEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_keyReleaseEvent, "keyReleaseEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QQuickWindow_keyReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
         ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QKeyEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickWindow::keyReleaseEvent(a0) : sipCpp->keyReleaseEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_keyReleaseEvent, doc_QQuickWindow_keyReleaseEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_mousePressEvent, "mousePressEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QQuickWindow_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickWindow::mousePressEvent(a0) : sipCpp->mousePressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_mousePressEvent, doc_QQuickWindow_mousePressEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_mouseReleaseEvent, "mouseReleaseEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QQuickWindow_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickWindow::mouseReleaseEvent(a0) : sipCpp->mouseReleaseEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_mouseReleaseEvent, doc_QQuickWindow_mouseReleaseEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_mouseDoubleClickEvent, "mouseDoubleClickEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QQuickWindow_mouseDoubleClickEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickWindow::mouseDoubleClickEvent(a0) : sipCpp->mouseDoubleClickEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_mouseDoubleClickEvent, doc_QQuickWindow_mouseDoubleClickEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_mouseMoveEvent, "mouseMoveEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QQuickWindow_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickWindow::mouseMoveEvent(a0) : sipCpp->mouseMoveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_mouseMoveEvent, doc_QQuickWindow_mouseMoveEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_wheelEvent, "wheelEvent(self, QWheelEvent)");

extern "C" {static PyObject *meth_QQuickWindow_wheelEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_wheelEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWheelEvent* a0;
         ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QWheelEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickWindow::wheelEvent(a0) : sipCpp->wheelEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_wheelEvent, doc_QQuickWindow_wheelEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_hasDefaultAlphaBuffer, "hasDefaultAlphaBuffer() -> bool");

extern "C" {static PyObject *meth_QQuickWindow_hasDefaultAlphaBuffer(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_hasDefaultAlphaBuffer(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes =  ::QQuickWindow::hasDefaultAlphaBuffer();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_hasDefaultAlphaBuffer, doc_QQuickWindow_hasDefaultAlphaBuffer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_setDefaultAlphaBuffer, "setDefaultAlphaBuffer(bool)");

extern "C" {static PyObject *meth_QQuickWindow_setDefaultAlphaBuffer(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_setDefaultAlphaBuffer(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "b", &a0))
        {
             ::QQuickWindow::setDefaultAlphaBuffer(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_setDefaultAlphaBuffer, doc_QQuickWindow_setDefaultAlphaBuffer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_resetOpenGLState, "resetOpenGLState(self)");

extern "C" {static PyObject *meth_QQuickWindow_resetOpenGLState(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_resetOpenGLState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            sipCpp->resetOpenGLState();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_resetOpenGLState, doc_QQuickWindow_resetOpenGLState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_scheduleRenderJob, "scheduleRenderJob(self, QRunnable, QQuickWindow.RenderStage)");

extern "C" {static PyObject *meth_QQuickWindow_scheduleRenderJob(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_scheduleRenderJob(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRunnable* a0;
         ::QQuickWindow::RenderStage a1;
         ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:E", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QRunnable, &a0, sipType_QQuickWindow_RenderStage, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->scheduleRenderJob(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_scheduleRenderJob, doc_QQuickWindow_scheduleRenderJob);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_effectiveDevicePixelRatio, "effectiveDevicePixelRatio(self) -> float");

extern "C" {static PyObject *meth_QQuickWindow_effectiveDevicePixelRatio(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_effectiveDevicePixelRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->effectiveDevicePixelRatio();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_effectiveDevicePixelRatio, doc_QQuickWindow_effectiveDevicePixelRatio);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_isSceneGraphInitialized, "isSceneGraphInitialized(self) -> bool");

extern "C" {static PyObject *meth_QQuickWindow_isSceneGraphInitialized(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_isSceneGraphInitialized(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSceneGraphInitialized();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_isSceneGraphInitialized, doc_QQuickWindow_isSceneGraphInitialized);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_rendererInterface, "rendererInterface(self) -> QSGRendererInterface");

extern "C" {static PyObject *meth_QQuickWindow_rendererInterface(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_rendererInterface(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
             ::QSGRendererInterface*sipRes;

            sipRes = sipCpp->rendererInterface();

            return sipConvertFromType(sipRes,sipType_QSGRendererInterface,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_rendererInterface, doc_QQuickWindow_rendererInterface);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_setSceneGraphBackend, "setSceneGraphBackend(QSGRendererInterface.GraphicsApi)\n"
"setSceneGraphBackend(str)");

extern "C" {static PyObject *meth_QQuickWindow_setSceneGraphBackend(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_setSceneGraphBackend(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGRendererInterface::GraphicsApi a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QSGRendererInterface_GraphicsApi, &a0))
        {
             ::QQuickWindow::setSceneGraphBackend(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QQuickWindow::setSceneGraphBackend(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_setSceneGraphBackend, doc_QQuickWindow_setSceneGraphBackend);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_createRectangleNode, "createRectangleNode(self) -> QSGRectangleNode");

extern "C" {static PyObject *meth_QQuickWindow_createRectangleNode(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_createRectangleNode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
             ::QSGRectangleNode*sipRes;

            sipRes = sipCpp->createRectangleNode();

            return sipConvertFromNewType(sipRes,sipType_QSGRectangleNode,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_createRectangleNode, doc_QQuickWindow_createRectangleNode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_createImageNode, "createImageNode(self) -> QSGImageNode");

extern "C" {static PyObject *meth_QQuickWindow_createImageNode(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_createImageNode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
             ::QSGImageNode*sipRes;

            sipRes = sipCpp->createImageNode();

            return sipConvertFromNewType(sipRes,sipType_QSGImageNode,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_createImageNode, doc_QQuickWindow_createImageNode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_sceneGraphBackend, "sceneGraphBackend() -> str");

extern "C" {static PyObject *meth_QQuickWindow_sceneGraphBackend(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_sceneGraphBackend(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QQuickWindow::sceneGraphBackend());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_sceneGraphBackend, doc_QQuickWindow_sceneGraphBackend);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_textRenderType, "textRenderType() -> QQuickWindow.TextRenderType");

extern "C" {static PyObject *meth_QQuickWindow_textRenderType(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_textRenderType(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QQuickWindow::TextRenderType sipRes;

            sipRes =  ::QQuickWindow::textRenderType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QQuickWindow_TextRenderType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_textRenderType, doc_QQuickWindow_textRenderType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWindow_setTextRenderType, "setTextRenderType(QQuickWindow.TextRenderType)");

extern "C" {static PyObject *meth_QQuickWindow_setTextRenderType(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_setTextRenderType(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickWindow::TextRenderType a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QQuickWindow_TextRenderType, &a0))
        {
             ::QQuickWindow::setTextRenderType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_setTextRenderType, doc_QQuickWindow_setTextRenderType);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QQuickWindow(void *, const sipTypeDef *);}
static void *cast_QQuickWindow(void *sipCppV, const sipTypeDef *targetType)
{
     ::QQuickWindow *sipCpp = reinterpret_cast< ::QQuickWindow *>(sipCppV);

    if (targetType == sipType_QWindow)
        return static_cast< ::QWindow *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QSurface)
        return static_cast< ::QSurface *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQuickWindow(void *, int);}
static void release_QQuickWindow(void *sipCppV, int)
{
     ::QQuickWindow *sipCpp = reinterpret_cast< ::QQuickWindow *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QQuickWindow(sipSimpleWrapper *);}
static void dealloc_QQuickWindow(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQQuickWindow *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQuickWindow(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QQuickWindow(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQuickWindow(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQQuickWindow *sipCpp = SIP_NULLPTR;

    {
         ::QWindow* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWindow, &a0, sipOwner))
        {
            sipCpp = new sipQQuickWindow(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QQuickWindow[] = {{32, 3, 1}};


static PyMethodDef methods_QQuickWindow[] = {
    {SIP_MLNAME_CAST(sipName_activeFocusItem), meth_QQuickWindow_activeFocusItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_activeFocusItem)},
    {SIP_MLNAME_CAST(sipName_clearBeforeRendering), meth_QQuickWindow_clearBeforeRendering, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_clearBeforeRendering)},
    {SIP_MLNAME_CAST(sipName_color), meth_QQuickWindow_color, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_color)},
    {SIP_MLNAME_CAST(sipName_contentItem), meth_QQuickWindow_contentItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_contentItem)},
    {SIP_MLNAME_CAST(sipName_createImageNode), meth_QQuickWindow_createImageNode, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_createImageNode)},
    {SIP_MLNAME_CAST(sipName_createRectangleNode), meth_QQuickWindow_createRectangleNode, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_createRectangleNode)},
    {SIP_MLNAME_CAST(sipName_createTextureFromId), SIP_MLMETH_CAST(meth_QQuickWindow_createTextureFromId), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickWindow_createTextureFromId)},
    {SIP_MLNAME_CAST(sipName_createTextureFromImage), meth_QQuickWindow_createTextureFromImage, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_createTextureFromImage)},
    {SIP_MLNAME_CAST(sipName_effectiveDevicePixelRatio), meth_QQuickWindow_effectiveDevicePixelRatio, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_effectiveDevicePixelRatio)},
    {SIP_MLNAME_CAST(sipName_event), meth_QQuickWindow_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_event)},
    {SIP_MLNAME_CAST(sipName_exposeEvent), meth_QQuickWindow_exposeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_exposeEvent)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), meth_QQuickWindow_focusInEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_focusInEvent)},
    {SIP_MLNAME_CAST(sipName_focusObject), meth_QQuickWindow_focusObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_focusObject)},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), meth_QQuickWindow_focusOutEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_focusOutEvent)},
    {SIP_MLNAME_CAST(sipName_grabWindow), meth_QQuickWindow_grabWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_grabWindow)},
    {SIP_MLNAME_CAST(sipName_hasDefaultAlphaBuffer), meth_QQuickWindow_hasDefaultAlphaBuffer, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_hasDefaultAlphaBuffer)},
    {SIP_MLNAME_CAST(sipName_hideEvent), meth_QQuickWindow_hideEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_hideEvent)},
    {SIP_MLNAME_CAST(sipName_incubationController), meth_QQuickWindow_incubationController, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_incubationController)},
    {SIP_MLNAME_CAST(sipName_isPersistentOpenGLContext), meth_QQuickWindow_isPersistentOpenGLContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_isPersistentOpenGLContext)},
    {SIP_MLNAME_CAST(sipName_isPersistentSceneGraph), meth_QQuickWindow_isPersistentSceneGraph, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_isPersistentSceneGraph)},
    {SIP_MLNAME_CAST(sipName_isSceneGraphInitialized), meth_QQuickWindow_isSceneGraphInitialized, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_isSceneGraphInitialized)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QQuickWindow_keyPressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), meth_QQuickWindow_keyReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_keyReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), meth_QQuickWindow_mouseDoubleClickEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_mouseDoubleClickEvent)},
    {SIP_MLNAME_CAST(sipName_mouseGrabberItem), meth_QQuickWindow_mouseGrabberItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_mouseGrabberItem)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_QQuickWindow_mouseMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QQuickWindow_mousePressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QQuickWindow_mouseReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_openglContext), meth_QQuickWindow_openglContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_openglContext)},
    {SIP_MLNAME_CAST(sipName_releaseResources), meth_QQuickWindow_releaseResources, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_releaseResources)},
    {SIP_MLNAME_CAST(sipName_renderTarget), meth_QQuickWindow_renderTarget, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_renderTarget)},
    {SIP_MLNAME_CAST(sipName_renderTargetId), meth_QQuickWindow_renderTargetId, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_renderTargetId)},
    {SIP_MLNAME_CAST(sipName_renderTargetSize), meth_QQuickWindow_renderTargetSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_renderTargetSize)},
    {SIP_MLNAME_CAST(sipName_rendererInterface), meth_QQuickWindow_rendererInterface, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_rendererInterface)},
    {SIP_MLNAME_CAST(sipName_resetOpenGLState), meth_QQuickWindow_resetOpenGLState, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_resetOpenGLState)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QQuickWindow_resizeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_sceneGraphBackend), meth_QQuickWindow_sceneGraphBackend, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_sceneGraphBackend)},
    {SIP_MLNAME_CAST(sipName_scheduleRenderJob), meth_QQuickWindow_scheduleRenderJob, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_scheduleRenderJob)},
    {SIP_MLNAME_CAST(sipName_sendEvent), meth_QQuickWindow_sendEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_sendEvent)},
    {SIP_MLNAME_CAST(sipName_setClearBeforeRendering), meth_QQuickWindow_setClearBeforeRendering, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_setClearBeforeRendering)},
    {SIP_MLNAME_CAST(sipName_setColor), meth_QQuickWindow_setColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_setColor)},
    {SIP_MLNAME_CAST(sipName_setDefaultAlphaBuffer), meth_QQuickWindow_setDefaultAlphaBuffer, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_setDefaultAlphaBuffer)},
    {SIP_MLNAME_CAST(sipName_setPersistentOpenGLContext), meth_QQuickWindow_setPersistentOpenGLContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_setPersistentOpenGLContext)},
    {SIP_MLNAME_CAST(sipName_setPersistentSceneGraph), meth_QQuickWindow_setPersistentSceneGraph, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_setPersistentSceneGraph)},
    {SIP_MLNAME_CAST(sipName_setRenderTarget), meth_QQuickWindow_setRenderTarget, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_setRenderTarget)},
    {SIP_MLNAME_CAST(sipName_setSceneGraphBackend), meth_QQuickWindow_setSceneGraphBackend, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_setSceneGraphBackend)},
    {SIP_MLNAME_CAST(sipName_setTextRenderType), meth_QQuickWindow_setTextRenderType, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_setTextRenderType)},
    {SIP_MLNAME_CAST(sipName_showEvent), meth_QQuickWindow_showEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_showEvent)},
    {SIP_MLNAME_CAST(sipName_textRenderType), meth_QQuickWindow_textRenderType, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_textRenderType)},
    {SIP_MLNAME_CAST(sipName_update), meth_QQuickWindow_update, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_update)},
    {SIP_MLNAME_CAST(sipName_wheelEvent), meth_QQuickWindow_wheelEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_wheelEvent)}
};

static sipEnumMemberDef enummembers_QQuickWindow[] = {
    {sipName_AfterRenderingStage, static_cast<int>( ::QQuickWindow::AfterRenderingStage), 28},
    {sipName_AfterSwapStage, static_cast<int>( ::QQuickWindow::AfterSwapStage), 28},
    {sipName_AfterSynchronizingStage, static_cast<int>( ::QQuickWindow::AfterSynchronizingStage), 28},
    {sipName_BeforeRenderingStage, static_cast<int>( ::QQuickWindow::BeforeRenderingStage), 28},
    {sipName_BeforeSynchronizingStage, static_cast<int>( ::QQuickWindow::BeforeSynchronizingStage), 28},
    {sipName_ContextNotAvailable, static_cast<int>( ::QQuickWindow::ContextNotAvailable), 29},
    {sipName_NativeTextRendering, static_cast<int>( ::QQuickWindow::NativeTextRendering), 30},
    {sipName_NoStage, static_cast<int>( ::QQuickWindow::NoStage), 28},
    {sipName_QtTextRendering, static_cast<int>( ::QQuickWindow::QtTextRendering), 30},
    {sipName_TextureCanUseAtlas, static_cast<int>( ::QQuickWindow::TextureCanUseAtlas), 26},
    {sipName_TextureHasAlphaChannel, static_cast<int>( ::QQuickWindow::TextureHasAlphaChannel), 26},
    {sipName_TextureHasMipmaps, static_cast<int>( ::QQuickWindow::TextureHasMipmaps), 26},
    {sipName_TextureIsOpaque, static_cast<int>( ::QQuickWindow::TextureIsOpaque), 26},
    {sipName_TextureOwnsGLTexture, static_cast<int>( ::QQuickWindow::TextureOwnsGLTexture), 26},
};

PyDoc_STRVAR(doc_QQuickWindow, "\1QQuickWindow(parent: QWindow = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QQuickWindow[] = {
    {"sceneGraphError(QQuickWindow::SceneGraphError,QString)", "\1sceneGraphError(self, QQuickWindow.SceneGraphError, str)", SIP_NULLPTR, SIP_NULLPTR},
    {"sceneGraphAboutToStop()", "\1sceneGraphAboutToStop(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"afterAnimating()", "\1afterAnimating(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"afterSynchronizing()", "\1afterSynchronizing(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"openglContextCreated(QOpenGLContext*)", "\1openglContextCreated(self, QOpenGLContext)", SIP_NULLPTR, SIP_NULLPTR},
    {"activeFocusItemChanged()", "\1activeFocusItemChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"closing(QQuickCloseEvent*)", "\1closing(self, QQuickCloseEvent)", SIP_NULLPTR, SIP_NULLPTR},
    {"colorChanged(QColor)", "\1colorChanged(self, Union[QColor, Qt.GlobalColor])", SIP_NULLPTR, SIP_NULLPTR},
    {"afterRendering()", "\1afterRendering(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"beforeRendering()", "\1beforeRendering(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"beforeSynchronizing()", "\1beforeSynchronizing(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"sceneGraphInvalidated()", "\1sceneGraphInvalidated(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"sceneGraphInitialized()", "\1sceneGraphInitialized(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"frameSwapped()", "\1frameSwapped(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QQuickWindow = {
    & ::QQuickWindow::staticMetaObject,
    0,
    signals_QQuickWindow,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QQuickWindow = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQuickWindow,
        {SIP_NULLPTR},
        &plugin_QQuickWindow
    },
    {
        sipNameNr_QQuickWindow,
        {0, 0, 1},
        51, methods_QQuickWindow,
        14, enummembers_QQuickWindow,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QQuickWindow,
    -1,
    -1,
    supers_QQuickWindow,
    SIP_NULLPTR,
    init_type_QQuickWindow,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQuickWindow,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QQuickWindow,
    cast_QQuickWindow,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquicktextdocument.sip"
#include <qquicktextdocument.h>
#line 10759 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 10763 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 36 "sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 10766 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 10769 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 10772 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 10775 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 10778 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 10781 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 10784 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 10787 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 10790 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 10793 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 10796 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 10799 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 10802 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 10805 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 10808 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 10811 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 10814 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"


class sipQQuickTextDocument : public  ::QQuickTextDocument
{
public:
    sipQQuickTextDocument( ::QQuickItem*);
    virtual ~sipQQuickTextDocument();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQQuickTextDocument(const sipQQuickTextDocument &);
    sipQQuickTextDocument &operator = (const sipQQuickTextDocument &);

    char sipPyMethods[7];
};

sipQQuickTextDocument::sipQQuickTextDocument( ::QQuickItem*a0):  ::QQuickTextDocument(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQuickTextDocument::~sipQQuickTextDocument()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQQuickTextDocument::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtQuick_qt_metaobject(sipPySelf,sipType_QQuickTextDocument);

    return  ::QQuickTextDocument::metaObject();
}

int sipQQuickTextDocument::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QQuickTextDocument::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtQuick_qt_metacall(sipPySelf,sipType_QQuickTextDocument,_c,_id,_a);

    return _id;
}

void *sipQQuickTextDocument::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtQuick_qt_metacast(sipPySelf, sipType_QQuickTextDocument, _clname, &sipCpp) ? sipCpp :  ::QQuickTextDocument::qt_metacast(_clname));
}

bool sipQQuickTextDocument::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QQuickTextDocument::event(a0);

    extern bool sipVH_QtQuick_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtQuick_5(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQQuickTextDocument::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QQuickTextDocument::eventFilter(a0,a1);

    extern bool sipVH_QtQuick_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtQuick_4(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQQuickTextDocument::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QQuickTextDocument::timerEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtQuick_3(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickTextDocument::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QQuickTextDocument::childEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtQuick_2(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickTextDocument::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QQuickTextDocument::customEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtQuick_1(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickTextDocument::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QQuickTextDocument::connectNotify(a0);
        return;
    }

    extern void sipVH_QtQuick_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQuick_0(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickTextDocument::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QQuickTextDocument::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtQuick_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQuick_0(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QQuickTextDocument_textDocument, "textDocument(self) -> QTextDocument");

extern "C" {static PyObject *meth_QQuickTextDocument_textDocument(PyObject *, PyObject *);}
static PyObject *meth_QQuickTextDocument_textDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickTextDocument, &sipCpp))
        {
             ::QTextDocument*sipRes;

            sipRes = sipCpp->textDocument();

            return sipConvertFromType(sipRes,sipType_QTextDocument,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickTextDocument, sipName_textDocument, doc_QQuickTextDocument_textDocument);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QQuickTextDocument(void *, const sipTypeDef *);}
static void *cast_QQuickTextDocument(void *sipCppV, const sipTypeDef *targetType)
{
     ::QQuickTextDocument *sipCpp = reinterpret_cast< ::QQuickTextDocument *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQuickTextDocument(void *, int);}
static void release_QQuickTextDocument(void *sipCppV, int)
{
     ::QQuickTextDocument *sipCpp = reinterpret_cast< ::QQuickTextDocument *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QQuickTextDocument(sipSimpleWrapper *);}
static void dealloc_QQuickTextDocument(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQQuickTextDocument *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQuickTextDocument(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QQuickTextDocument(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQuickTextDocument(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQQuickTextDocument *sipCpp = SIP_NULLPTR;

    {
         ::QQuickItem* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "JH", sipType_QQuickItem, &a0, sipOwner))
        {
            sipCpp = new sipQQuickTextDocument(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QQuickTextDocument[] = {{3, 0, 1}};


static PyMethodDef methods_QQuickTextDocument[] = {
    {SIP_MLNAME_CAST(sipName_textDocument), meth_QQuickTextDocument_textDocument, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickTextDocument_textDocument)}
};

PyDoc_STRVAR(doc_QQuickTextDocument, "\1QQuickTextDocument(QQuickItem)");


static pyqt5ClassPluginDef plugin_QQuickTextDocument = {
    & ::QQuickTextDocument::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QQuickTextDocument = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQuickTextDocument,
        {SIP_NULLPTR},
        &plugin_QQuickTextDocument
    },
    {
        sipNameNr_QQuickTextDocument,
        {0, 0, 1},
        1, methods_QQuickTextDocument,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QQuickTextDocument,
    -1,
    -1,
    supers_QQuickTextDocument,
    SIP_NULLPTR,
    init_type_QQuickTextDocument,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQuickTextDocument,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QQuickTextDocument,
    cast_QQuickTextDocument,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickrendercontrol.sip"
#include <qquickrendercontrol.h>
#line 11166 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 11170 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 11173 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 11176 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 11179 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickwindow.sip"
#include <qquickwindow.h>
#line 11182 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtGui/qimage.sip"
#include <qimage.h>
#line 11185 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 46 "sip/QtGui/qopenglcontext.sip"
#include <qopenglcontext.h>
#line 11188 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 11191 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 11194 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 11197 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 11200 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 11203 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 11206 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 11209 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 11212 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 11215 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 11218 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 11221 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 11224 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 11227 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 11230 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"


class sipQQuickRenderControl : public  ::QQuickRenderControl
{
public:
    sipQQuickRenderControl( ::QObject*);
    virtual ~sipQQuickRenderControl();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QWindow* renderWindow( ::QPoint*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQQuickRenderControl(const sipQQuickRenderControl &);
    sipQQuickRenderControl &operator = (const sipQQuickRenderControl &);

    char sipPyMethods[8];
};

sipQQuickRenderControl::sipQQuickRenderControl( ::QObject*a0):  ::QQuickRenderControl(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQuickRenderControl::~sipQQuickRenderControl()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQQuickRenderControl::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtQuick_qt_metaobject(sipPySelf,sipType_QQuickRenderControl);

    return  ::QQuickRenderControl::metaObject();
}

int sipQQuickRenderControl::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QQuickRenderControl::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtQuick_qt_metacall(sipPySelf,sipType_QQuickRenderControl,_c,_id,_a);

    return _id;
}

void *sipQQuickRenderControl::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtQuick_qt_metacast(sipPySelf, sipType_QQuickRenderControl, _clname, &sipCpp) ? sipCpp :  ::QQuickRenderControl::qt_metacast(_clname));
}

 ::QWindow* sipQQuickRenderControl::renderWindow( ::QPoint*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_renderWindow);

    if (!sipMeth)
        return  ::QQuickRenderControl::renderWindow(a0);

    extern  ::QWindow* sipVH_QtQuick_42(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPoint*);

    return sipVH_QtQuick_42(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQQuickRenderControl::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QQuickRenderControl::event(a0);

    extern bool sipVH_QtQuick_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtQuick_5(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQQuickRenderControl::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QQuickRenderControl::eventFilter(a0,a1);

    extern bool sipVH_QtQuick_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtQuick_4(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQQuickRenderControl::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QQuickRenderControl::timerEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtQuick_3(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickRenderControl::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QQuickRenderControl::childEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtQuick_2(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickRenderControl::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QQuickRenderControl::customEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtQuick_1(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickRenderControl::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QQuickRenderControl::connectNotify(a0);
        return;
    }

    extern void sipVH_QtQuick_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQuick_0(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickRenderControl::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QQuickRenderControl::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtQuick_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQuick_0(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QQuickRenderControl_initialize, "initialize(self, QOpenGLContext)");

extern "C" {static PyObject *meth_QQuickRenderControl_initialize(PyObject *, PyObject *);}
static PyObject *meth_QQuickRenderControl_initialize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLContext* a0;
         ::QQuickRenderControl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QQuickRenderControl, &sipCpp, sipType_QOpenGLContext, &a0))
        {
            sipCpp->initialize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickRenderControl, sipName_initialize, doc_QQuickRenderControl_initialize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickRenderControl_invalidate, "invalidate(self)");

extern "C" {static PyObject *meth_QQuickRenderControl_invalidate(PyObject *, PyObject *);}
static PyObject *meth_QQuickRenderControl_invalidate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickRenderControl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickRenderControl, &sipCpp))
        {
            sipCpp->invalidate();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickRenderControl, sipName_invalidate, doc_QQuickRenderControl_invalidate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickRenderControl_polishItems, "polishItems(self)");

extern "C" {static PyObject *meth_QQuickRenderControl_polishItems(PyObject *, PyObject *);}
static PyObject *meth_QQuickRenderControl_polishItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickRenderControl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickRenderControl, &sipCpp))
        {
            sipCpp->polishItems();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickRenderControl, sipName_polishItems, doc_QQuickRenderControl_polishItems);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickRenderControl_render, "render(self)");

extern "C" {static PyObject *meth_QQuickRenderControl_render(PyObject *, PyObject *);}
static PyObject *meth_QQuickRenderControl_render(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickRenderControl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickRenderControl, &sipCpp))
        {
            sipCpp->render();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickRenderControl, sipName_render, doc_QQuickRenderControl_render);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickRenderControl_sync, "sync(self) -> bool");

extern "C" {static PyObject *meth_QQuickRenderControl_sync(PyObject *, PyObject *);}
static PyObject *meth_QQuickRenderControl_sync(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickRenderControl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickRenderControl, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sync();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickRenderControl, sipName_sync, doc_QQuickRenderControl_sync);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickRenderControl_grab, "grab(self) -> QImage");

extern "C" {static PyObject *meth_QQuickRenderControl_grab(PyObject *, PyObject *);}
static PyObject *meth_QQuickRenderControl_grab(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickRenderControl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickRenderControl, &sipCpp))
        {
             ::QImage*sipRes;

            sipRes = new  ::QImage(sipCpp->grab());

            return sipConvertFromNewType(sipRes,sipType_QImage,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickRenderControl, sipName_grab, doc_QQuickRenderControl_grab);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickRenderControl_renderWindowFor, "renderWindowFor(QQuickWindow, offset: QPoint = None) -> QWindow");

extern "C" {static PyObject *meth_QQuickRenderControl_renderWindowFor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickRenderControl_renderWindowFor(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickWindow* a0;
         ::QPoint* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_offset,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8|J8", sipType_QQuickWindow, &a0, sipType_QPoint, &a1))
        {
             ::QWindow*sipRes;

            sipRes =  ::QQuickRenderControl::renderWindowFor(a0,a1);

            return sipConvertFromType(sipRes,sipType_QWindow,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickRenderControl, sipName_renderWindowFor, doc_QQuickRenderControl_renderWindowFor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickRenderControl_renderWindow, "renderWindow(self, QPoint) -> QWindow");

extern "C" {static PyObject *meth_QQuickRenderControl_renderWindow(PyObject *, PyObject *);}
static PyObject *meth_QQuickRenderControl_renderWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPoint* a0;
         ::QQuickRenderControl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QQuickRenderControl, &sipCpp, sipType_QPoint, &a0))
        {
             ::QWindow*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QQuickRenderControl::renderWindow(a0) : sipCpp->renderWindow(a0));

            return sipConvertFromType(sipRes,sipType_QWindow,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickRenderControl, sipName_renderWindow, doc_QQuickRenderControl_renderWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickRenderControl_prepareThread, "prepareThread(self, QThread)");

extern "C" {static PyObject *meth_QQuickRenderControl_prepareThread(PyObject *, PyObject *);}
static PyObject *meth_QQuickRenderControl_prepareThread(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QThread* a0;
         ::QQuickRenderControl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QQuickRenderControl, &sipCpp, sipType_QThread, &a0))
        {
            sipCpp->prepareThread(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickRenderControl, sipName_prepareThread, doc_QQuickRenderControl_prepareThread);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QQuickRenderControl(void *, const sipTypeDef *);}
static void *cast_QQuickRenderControl(void *sipCppV, const sipTypeDef *targetType)
{
     ::QQuickRenderControl *sipCpp = reinterpret_cast< ::QQuickRenderControl *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQuickRenderControl(void *, int);}
static void release_QQuickRenderControl(void *sipCppV, int)
{
     ::QQuickRenderControl *sipCpp = reinterpret_cast< ::QQuickRenderControl *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QQuickRenderControl(sipSimpleWrapper *);}
static void dealloc_QQuickRenderControl(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQQuickRenderControl *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQuickRenderControl(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QQuickRenderControl(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQuickRenderControl(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQQuickRenderControl *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQQuickRenderControl(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QQuickRenderControl[] = {{3, 0, 1}};


static PyMethodDef methods_QQuickRenderControl[] = {
    {SIP_MLNAME_CAST(sipName_grab), meth_QQuickRenderControl_grab, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickRenderControl_grab)},
    {SIP_MLNAME_CAST(sipName_initialize), meth_QQuickRenderControl_initialize, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickRenderControl_initialize)},
    {SIP_MLNAME_CAST(sipName_invalidate), meth_QQuickRenderControl_invalidate, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickRenderControl_invalidate)},
    {SIP_MLNAME_CAST(sipName_polishItems), meth_QQuickRenderControl_polishItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickRenderControl_polishItems)},
    {SIP_MLNAME_CAST(sipName_prepareThread), meth_QQuickRenderControl_prepareThread, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickRenderControl_prepareThread)},
    {SIP_MLNAME_CAST(sipName_render), meth_QQuickRenderControl_render, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickRenderControl_render)},
    {SIP_MLNAME_CAST(sipName_renderWindow), meth_QQuickRenderControl_renderWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickRenderControl_renderWindow)},
    {SIP_MLNAME_CAST(sipName_renderWindowFor), SIP_MLMETH_CAST(meth_QQuickRenderControl_renderWindowFor), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickRenderControl_renderWindowFor)},
    {SIP_MLNAME_CAST(sipName_sync), meth_QQuickRenderControl_sync, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickRenderControl_sync)}
};

PyDoc_STRVAR(doc_QQuickRenderControl, "\1QQuickRenderControl(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QQuickRenderControl[] = {
    {"sceneChanged()", "\1sceneChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"renderRequested()", "\1renderRequested(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QQuickRenderControl = {
    & ::QQuickRenderControl::staticMetaObject,
    0,
    signals_QQuickRenderControl,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QQuickRenderControl = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQuickRenderControl,
        {SIP_NULLPTR},
        &plugin_QQuickRenderControl
    },
    {
        sipNameNr_QQuickRenderControl,
        {0, 0, 1},
        9, methods_QQuickRenderControl,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QQuickRenderControl,
    -1,
    -1,
    supers_QQuickRenderControl,
    SIP_NULLPTR,
    init_type_QQuickRenderControl,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQuickRenderControl,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QQuickRenderControl,
    cast_QQuickRenderControl,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickpainteditem.sip"
#include <qquickpainteditem.h>
#line 11847 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickpainteditem.sip"
#include <qquickpainteditem.h>
#line 11851 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"


extern "C" {static long slot_QQuickPaintedItem_PerformanceHints___hash__(PyObject *);}
static long slot_QQuickPaintedItem_PerformanceHints___hash__(PyObject *sipSelf)
{
     ::QQuickPaintedItem::PerformanceHints *sipCpp = reinterpret_cast< ::QQuickPaintedItem::PerformanceHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuickPaintedItem_PerformanceHints));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QQuickPaintedItem::PerformanceHints::Int();
#line 11869 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QQuickPaintedItem_PerformanceHints___bool__(PyObject *);}
static int slot_QQuickPaintedItem_PerformanceHints___bool__(PyObject *sipSelf)
{
     ::QQuickPaintedItem::PerformanceHints *sipCpp = reinterpret_cast< ::QQuickPaintedItem::PerformanceHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuickPaintedItem_PerformanceHints));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QQuickPaintedItem::PerformanceHints::Int() != 0);
#line 11894 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QQuickPaintedItem_PerformanceHints___ne__(PyObject *,PyObject *);}
static PyObject *slot_QQuickPaintedItem_PerformanceHints___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QQuickPaintedItem::PerformanceHints *sipCpp = reinterpret_cast< ::QQuickPaintedItem::PerformanceHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuickPaintedItem_PerformanceHints));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickPaintedItem::PerformanceHints* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QQuickPaintedItem_PerformanceHints, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QQuickPaintedItem::PerformanceHints::Int() != a0->operator QQuickPaintedItem::PerformanceHints::Int());
#line 11924 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
            sipReleaseType(const_cast< ::QQuickPaintedItem::PerformanceHints *>(a0),sipType_QQuickPaintedItem_PerformanceHints,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, ne_slot, sipType_QQuickPaintedItem_PerformanceHints, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QQuickPaintedItem_PerformanceHints___eq__(PyObject *,PyObject *);}
static PyObject *slot_QQuickPaintedItem_PerformanceHints___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QQuickPaintedItem::PerformanceHints *sipCpp = reinterpret_cast< ::QQuickPaintedItem::PerformanceHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuickPaintedItem_PerformanceHints));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickPaintedItem::PerformanceHints* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QQuickPaintedItem_PerformanceHints, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QQuickPaintedItem::PerformanceHints::Int() == a0->operator QQuickPaintedItem::PerformanceHints::Int());
#line 11960 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
            sipReleaseType(const_cast< ::QQuickPaintedItem::PerformanceHints *>(a0),sipType_QQuickPaintedItem_PerformanceHints,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, eq_slot, sipType_QQuickPaintedItem_PerformanceHints, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QQuickPaintedItem_PerformanceHints___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QQuickPaintedItem_PerformanceHints___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QQuickPaintedItem_PerformanceHints)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QQuickPaintedItem::PerformanceHints *sipCpp = reinterpret_cast< ::QQuickPaintedItem::PerformanceHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuickPaintedItem_PerformanceHints));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QQuickPaintedItem::PerformanceHints(*sipCpp ^ a0);
#line 11999 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QQuickPaintedItem_PerformanceHints___xor__(PyObject *,PyObject *);}
static PyObject *slot_QQuickPaintedItem_PerformanceHints___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickPaintedItem::PerformanceHints* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QQuickPaintedItem_PerformanceHints, &a0, &a0State, &a1))
        {
             ::QQuickPaintedItem::PerformanceHints*sipRes;

            sipRes = new  ::QQuickPaintedItem::PerformanceHints((*a0 ^ a1));
            sipReleaseType(a0,sipType_QQuickPaintedItem_PerformanceHints,a0State);

            return sipConvertFromNewType(sipRes,sipType_QQuickPaintedItem_PerformanceHints,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QQuickPaintedItem_PerformanceHints___ior__(PyObject *,PyObject *);}
static PyObject *slot_QQuickPaintedItem_PerformanceHints___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QQuickPaintedItem_PerformanceHints)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QQuickPaintedItem::PerformanceHints *sipCpp = reinterpret_cast< ::QQuickPaintedItem::PerformanceHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuickPaintedItem_PerformanceHints));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QQuickPaintedItem::PerformanceHints(*sipCpp | a0);
#line 12071 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QQuickPaintedItem_PerformanceHints___or__(PyObject *,PyObject *);}
static PyObject *slot_QQuickPaintedItem_PerformanceHints___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickPaintedItem::PerformanceHints* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QQuickPaintedItem_PerformanceHints, &a0, &a0State, &a1))
        {
             ::QQuickPaintedItem::PerformanceHints*sipRes;

            sipRes = new  ::QQuickPaintedItem::PerformanceHints((*a0 | a1));
            sipReleaseType(a0,sipType_QQuickPaintedItem_PerformanceHints,a0State);

            return sipConvertFromNewType(sipRes,sipType_QQuickPaintedItem_PerformanceHints,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QQuickPaintedItem_PerformanceHints___iand__(PyObject *,PyObject *);}
static PyObject *slot_QQuickPaintedItem_PerformanceHints___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QQuickPaintedItem_PerformanceHints)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QQuickPaintedItem::PerformanceHints *sipCpp = reinterpret_cast< ::QQuickPaintedItem::PerformanceHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuickPaintedItem_PerformanceHints));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QQuickPaintedItem::PerformanceHints::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QQuickPaintedItem_PerformanceHints___and__(PyObject *,PyObject *);}
static PyObject *slot_QQuickPaintedItem_PerformanceHints___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickPaintedItem::PerformanceHints* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QQuickPaintedItem_PerformanceHints, &a0, &a0State, &a1))
        {
             ::QQuickPaintedItem::PerformanceHints*sipRes;

            sipRes = new  ::QQuickPaintedItem::PerformanceHints((*a0 & a1));
            sipReleaseType(a0,sipType_QQuickPaintedItem_PerformanceHints,a0State);

            return sipConvertFromNewType(sipRes,sipType_QQuickPaintedItem_PerformanceHints,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QQuickPaintedItem_PerformanceHints___invert__(PyObject *);}
static PyObject *slot_QQuickPaintedItem_PerformanceHints___invert__(PyObject *sipSelf)
{
     ::QQuickPaintedItem::PerformanceHints *sipCpp = reinterpret_cast< ::QQuickPaintedItem::PerformanceHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuickPaintedItem_PerformanceHints));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QQuickPaintedItem::PerformanceHints*sipRes;

            sipRes = new  ::QQuickPaintedItem::PerformanceHints(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QQuickPaintedItem_PerformanceHints,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QQuickPaintedItem_PerformanceHints___int__(PyObject *);}
static PyObject *slot_QQuickPaintedItem_PerformanceHints___int__(PyObject *sipSelf)
{
     ::QQuickPaintedItem::PerformanceHints *sipCpp = reinterpret_cast< ::QQuickPaintedItem::PerformanceHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuickPaintedItem_PerformanceHints));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQuickPaintedItem_PerformanceHints(void *, int);}
static void release_QQuickPaintedItem_PerformanceHints(void *sipCppV, int)
{
    delete reinterpret_cast< ::QQuickPaintedItem::PerformanceHints *>(sipCppV);
}


extern "C" {static void assign_QQuickPaintedItem_PerformanceHints(void *, SIP_SSIZE_T, void *);}
static void assign_QQuickPaintedItem_PerformanceHints(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QQuickPaintedItem::PerformanceHints *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QQuickPaintedItem::PerformanceHints *>(sipSrc);
}


extern "C" {static void *array_QQuickPaintedItem_PerformanceHints(SIP_SSIZE_T);}
static void *array_QQuickPaintedItem_PerformanceHints(SIP_SSIZE_T sipNrElem)
{
    return new  ::QQuickPaintedItem::PerformanceHints[sipNrElem];
}


extern "C" {static void *copy_QQuickPaintedItem_PerformanceHints(const void *, SIP_SSIZE_T);}
static void *copy_QQuickPaintedItem_PerformanceHints(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QQuickPaintedItem::PerformanceHints(reinterpret_cast<const  ::QQuickPaintedItem::PerformanceHints *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QQuickPaintedItem_PerformanceHints(sipSimpleWrapper *);}
static void dealloc_QQuickPaintedItem_PerformanceHints(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQuickPaintedItem_PerformanceHints(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QQuickPaintedItem_PerformanceHints(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQuickPaintedItem_PerformanceHints(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QQuickPaintedItem::PerformanceHints *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QQuickPaintedItem::PerformanceHints();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QQuickPaintedItem::PerformanceHints(a0);

            return sipCpp;
        }
    }

    {
        const  ::QQuickPaintedItem::PerformanceHints* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QQuickPaintedItem_PerformanceHints, &a0, &a0State))
        {
            sipCpp = new  ::QQuickPaintedItem::PerformanceHints(*a0);
            sipReleaseType(const_cast< ::QQuickPaintedItem::PerformanceHints *>(a0),sipType_QQuickPaintedItem_PerformanceHints,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QQuickPaintedItem_PerformanceHints(PyObject *, void **, int *, PyObject *);}
static int convertTo_QQuickPaintedItem_PerformanceHints(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QQuickPaintedItem::PerformanceHints **sipCppPtr = reinterpret_cast< ::QQuickPaintedItem::PerformanceHints **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QQuickPaintedItem::PerformanceHints is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QQuickPaintedItem_PerformanceHint)) ||
            sipCanConvertToType(sipPy, sipType_QQuickPaintedItem_PerformanceHints, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QQuickPaintedItem_PerformanceHint)))
{
    *sipCppPtr = new QQuickPaintedItem::PerformanceHints(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QQuickPaintedItem::PerformanceHints *>(sipConvertToType(sipPy, sipType_QQuickPaintedItem_PerformanceHints, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 12339 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QQuickPaintedItem_PerformanceHints[] = {
    {(void *)slot_QQuickPaintedItem_PerformanceHints___hash__, hash_slot},
    {(void *)slot_QQuickPaintedItem_PerformanceHints___bool__, bool_slot},
    {(void *)slot_QQuickPaintedItem_PerformanceHints___ne__, ne_slot},
    {(void *)slot_QQuickPaintedItem_PerformanceHints___eq__, eq_slot},
    {(void *)slot_QQuickPaintedItem_PerformanceHints___ixor__, ixor_slot},
    {(void *)slot_QQuickPaintedItem_PerformanceHints___xor__, xor_slot},
    {(void *)slot_QQuickPaintedItem_PerformanceHints___ior__, ior_slot},
    {(void *)slot_QQuickPaintedItem_PerformanceHints___or__, or_slot},
    {(void *)slot_QQuickPaintedItem_PerformanceHints___iand__, iand_slot},
    {(void *)slot_QQuickPaintedItem_PerformanceHints___and__, and_slot},
    {(void *)slot_QQuickPaintedItem_PerformanceHints___invert__, invert_slot},
    {(void *)slot_QQuickPaintedItem_PerformanceHints___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QQuickPaintedItem_PerformanceHints, "\1QQuickPaintedItem.PerformanceHints()\n"
"QQuickPaintedItem.PerformanceHints(Union[QQuickPaintedItem.PerformanceHints, QQuickPaintedItem.PerformanceHint])\n"
"QQuickPaintedItem.PerformanceHints(QQuickPaintedItem.PerformanceHints)");


static pyqt5ClassPluginDef plugin_QQuickPaintedItem_PerformanceHints = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QQuickPaintedItem_PerformanceHints = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQuickPaintedItem__PerformanceHints,
        {SIP_NULLPTR},
        &plugin_QQuickPaintedItem_PerformanceHints
    },
    {
        sipNameNr_PerformanceHints,
        {15, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QQuickPaintedItem_PerformanceHints,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QQuickPaintedItem_PerformanceHints,
    init_type_QQuickPaintedItem_PerformanceHints,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQuickPaintedItem_PerformanceHints,
    assign_QQuickPaintedItem_PerformanceHints,
    array_QQuickPaintedItem_PerformanceHints,
    copy_QQuickPaintedItem_PerformanceHints,
    release_QQuickPaintedItem_PerformanceHints,
    SIP_NULLPTR,
    convertTo_QQuickPaintedItem_PerformanceHints,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickpainteditem.sip"
#include <qquickpainteditem.h>
#line 12427 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 12431 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 12434 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 65 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 12439 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgtextureprovider.sip"
#include <qsgtextureprovider.h>
#line 12442 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 12445 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 185 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 12450 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 12453 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 12456 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 12459 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickpainteditem.sip"
#include <qquickpainteditem.h>
#line 12462 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 12465 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 12468 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 97 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 12471 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 12474 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitemgrabresult.sip"
#include <qquickitemgrabresult.h>
#line 12477 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickwindow.sip"
#include <qquickwindow.h>
#line 12480 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 12483 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 561 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 12486 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 610 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 12489 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 583 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 12492 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 599 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 12495 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 238 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 12498 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 717 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 12501 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 253 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 12504 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 205 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 12507 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 375 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 12510 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 500 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 12513 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 12516 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 12519 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 12522 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 12525 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 328 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 12528 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 12531 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 12534 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 12537 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 12540 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 12543 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 12546 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 12549 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 12552 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 12555 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 12558 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 12561 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 12564 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 12567 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 12570 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 12573 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 12576 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

sipQQuickPaintedItem::sipQQuickPaintedItem( ::QQuickItem*a0):  ::QQuickPaintedItem(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQuickPaintedItem::~sipQQuickPaintedItem()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQQuickPaintedItem::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtQuick_qt_metaobject(sipPySelf,sipType_QQuickPaintedItem);

    return  ::QQuickPaintedItem::metaObject();
}

int sipQQuickPaintedItem::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QQuickPaintedItem::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtQuick_qt_metacall(sipPySelf,sipType_QQuickPaintedItem,_c,_id,_a);

    return _id;
}

void *sipQQuickPaintedItem::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtQuick_qt_metacast(sipPySelf, sipType_QQuickPaintedItem, _clname, &sipCpp) ? sipCpp :  ::QQuickPaintedItem::qt_metacast(_clname));
}

void sipQQuickPaintedItem::paint( ::QPainter*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QQuickPaintedItem,sipName_paint);

    if (!sipMeth)
        return;

    extern void sipVH_QtQuick_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*);

    sipVH_QtQuick_41(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QQuickPaintedItem::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtQuick_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQuick_0(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QQuickPaintedItem::connectNotify(a0);
        return;
    }

    extern void sipVH_QtQuick_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQuick_0(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QQuickPaintedItem::customEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtQuick_1(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QQuickPaintedItem::childEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtQuick_2(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QQuickPaintedItem::timerEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtQuick_3(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQQuickPaintedItem::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QQuickPaintedItem::eventFilter(a0,a1);

    extern bool sipVH_QtQuick_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtQuick_4(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQQuickPaintedItem::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QQuickPaintedItem::event(a0);

    extern bool sipVH_QtQuick_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtQuick_5(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::componentComplete()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_componentComplete);

    if (!sipMeth)
    {
         ::QQuickPaintedItem::componentComplete();
        return;
    }

    extern void sipVH_QtQuick_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtQuick_6(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQQuickPaintedItem::classBegin()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_classBegin);

    if (!sipMeth)
    {
         ::QQuickPaintedItem::classBegin();
        return;
    }

    extern void sipVH_QtQuick_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtQuick_6(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQQuickPaintedItem::contains(const  ::QPointF& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,SIP_NULLPTR,sipName_contains);

    if (!sipMeth)
        return  ::QQuickPaintedItem::contains(a0);

    extern bool sipVH_QtQuick_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QPointF&);

    return sipVH_QtQuick_7(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQQuickPaintedItem::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,SIP_NULLPTR,sipName_inputMethodQuery);

    if (!sipMeth)
        return  ::QQuickPaintedItem::inputMethodQuery(a0);

    extern  ::QVariant sipVH_QtQuick_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_QtQuick_8(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQQuickPaintedItem::isTextureProvider() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,SIP_NULLPTR,sipName_isTextureProvider);

    if (!sipMeth)
        return  ::QQuickPaintedItem::isTextureProvider();

    extern bool sipVH_QtQuick_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_9(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSGTextureProvider* sipQQuickPaintedItem::textureProvider() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,SIP_NULLPTR,sipName_textureProvider);

    if (!sipMeth)
        return  ::QQuickPaintedItem::textureProvider();

    extern  ::QSGTextureProvider* sipVH_QtQuick_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_10(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQQuickPaintedItem::itemChange( ::QQuickItem::ItemChange a0,const  ::QQuickItem::ItemChangeData& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_itemChange);

    if (!sipMeth)
    {
         ::QQuickPaintedItem::itemChange(a0,a1);
        return;
    }

    extern void sipVH_QtQuick_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QQuickItem::ItemChange,const  ::QQuickItem::ItemChangeData&);

    sipVH_QtQuick_11(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQQuickPaintedItem::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,SIP_NULLPTR,sipName_keyPressEvent);

    if (!sipMeth)
    {
         ::QQuickPaintedItem::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtQuick_12(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,SIP_NULLPTR,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
         ::QQuickPaintedItem::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtQuick_12(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,SIP_NULLPTR,sipName_inputMethodEvent);

    if (!sipMeth)
    {
         ::QQuickPaintedItem::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_QtQuick_13(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,SIP_NULLPTR,sipName_focusInEvent);

    if (!sipMeth)
    {
         ::QQuickPaintedItem::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtQuick_14(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,SIP_NULLPTR,sipName_focusOutEvent);

    if (!sipMeth)
    {
         ::QQuickPaintedItem::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtQuick_14(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_mousePressEvent);

    if (!sipMeth)
    {
         ::QQuickPaintedItem::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtQuick_15(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,SIP_NULLPTR,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
         ::QQuickPaintedItem::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtQuick_15(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,SIP_NULLPTR,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
         ::QQuickPaintedItem::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtQuick_15(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,SIP_NULLPTR,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
         ::QQuickPaintedItem::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtQuick_15(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::mouseUngrabEvent()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,SIP_NULLPTR,sipName_mouseUngrabEvent);

    if (!sipMeth)
    {
         ::QQuickPaintedItem::mouseUngrabEvent();
        return;
    }

    extern void sipVH_QtQuick_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtQuick_6(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQQuickPaintedItem::touchUngrabEvent()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,SIP_NULLPTR,sipName_touchUngrabEvent);

    if (!sipMeth)
    {
         ::QQuickPaintedItem::touchUngrabEvent();
        return;
    }

    extern void sipVH_QtQuick_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtQuick_6(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQQuickPaintedItem::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,SIP_NULLPTR,sipName_wheelEvent);

    if (!sipMeth)
    {
         ::QQuickPaintedItem::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtQuick_16(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::touchEvent( ::QTouchEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,SIP_NULLPTR,sipName_touchEvent);

    if (!sipMeth)
    {
         ::QQuickPaintedItem::touchEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTouchEvent*);

    sipVH_QtQuick_17(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::hoverEnterEvent( ::QHoverEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,SIP_NULLPTR,sipName_hoverEnterEvent);

    if (!sipMeth)
    {
         ::QQuickPaintedItem::hoverEnterEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHoverEvent*);

    sipVH_QtQuick_18(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::hoverMoveEvent( ::QHoverEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,SIP_NULLPTR,sipName_hoverMoveEvent);

    if (!sipMeth)
    {
         ::QQuickPaintedItem::hoverMoveEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHoverEvent*);

    sipVH_QtQuick_18(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::hoverLeaveEvent( ::QHoverEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,SIP_NULLPTR,sipName_hoverLeaveEvent);

    if (!sipMeth)
    {
         ::QQuickPaintedItem::hoverLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHoverEvent*);

    sipVH_QtQuick_18(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::dragEnterEvent( ::QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,SIP_NULLPTR,sipName_dragEnterEvent);

    if (!sipMeth)
    {
         ::QQuickPaintedItem::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragEnterEvent*);

    sipVH_QtQuick_19(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::dragMoveEvent( ::QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,SIP_NULLPTR,sipName_dragMoveEvent);

    if (!sipMeth)
    {
         ::QQuickPaintedItem::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragMoveEvent*);

    sipVH_QtQuick_20(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::dragLeaveEvent( ::QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,SIP_NULLPTR,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
         ::QQuickPaintedItem::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragLeaveEvent*);

    sipVH_QtQuick_21(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::dropEvent( ::QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,SIP_NULLPTR,sipName_dropEvent);

    if (!sipMeth)
    {
         ::QQuickPaintedItem::dropEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDropEvent*);

    sipVH_QtQuick_22(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQQuickPaintedItem::childMouseEventFilter( ::QQuickItem*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,SIP_NULLPTR,sipName_childMouseEventFilter);

    if (!sipMeth)
        return  ::QQuickPaintedItem::childMouseEventFilter(a0,a1);

    extern bool sipVH_QtQuick_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QQuickItem*, ::QEvent*);

    return sipVH_QtQuick_23(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQQuickPaintedItem::geometryChanged(const  ::QRectF& a0,const  ::QRectF& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,SIP_NULLPTR,sipName_geometryChanged);

    if (!sipMeth)
    {
         ::QQuickPaintedItem::geometryChanged(a0,a1);
        return;
    }

    extern void sipVH_QtQuick_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QRectF&,const  ::QRectF&);

    sipVH_QtQuick_24(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QSGNode* sipQQuickPaintedItem::updatePaintNode( ::QSGNode*a0, ::QQuickItem::UpdatePaintNodeData*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,SIP_NULLPTR,sipName_updatePaintNode);

    if (!sipMeth)
        return  ::QQuickPaintedItem::updatePaintNode(a0,a1);

    extern  ::QSGNode* sipVH_QtQuick_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QSGNode*, ::QQuickItem::UpdatePaintNodeData*);

    return sipVH_QtQuick_25(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQQuickPaintedItem::releaseResources()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,SIP_NULLPTR,sipName_releaseResources);

    if (!sipMeth)
    {
         ::QQuickPaintedItem::releaseResources();
        return;
    }

    extern void sipVH_QtQuick_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtQuick_6(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQQuickPaintedItem::updatePolish()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,SIP_NULLPTR,sipName_updatePolish);

    if (!sipMeth)
    {
         ::QQuickPaintedItem::updatePolish();
        return;
    }

    extern void sipVH_QtQuick_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtQuick_6(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QQuickPaintedItem_update, "update(self, rect: QRect = QRect())");

extern "C" {static PyObject *meth_QQuickPaintedItem_update(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_update(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect& a0def = QRect();
        const  ::QRect* a0 = &a0def;
         ::QQuickPaintedItem *sipCpp;

        static const char *sipKwdList[] = {
            sipName_rect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J9", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->update(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_update, doc_QQuickPaintedItem_update);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_opaquePainting, "opaquePainting(self) -> bool");

extern "C" {static PyObject *meth_QQuickPaintedItem_opaquePainting(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_opaquePainting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->opaquePainting();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_opaquePainting, doc_QQuickPaintedItem_opaquePainting);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_setOpaquePainting, "setOpaquePainting(self, bool)");

extern "C" {static PyObject *meth_QQuickPaintedItem_setOpaquePainting(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_setOpaquePainting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, &a0))
        {
            sipCpp->setOpaquePainting(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_setOpaquePainting, doc_QQuickPaintedItem_setOpaquePainting);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_antialiasing, "antialiasing(self) -> bool");

extern "C" {static PyObject *meth_QQuickPaintedItem_antialiasing(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_antialiasing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->antialiasing();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_antialiasing, doc_QQuickPaintedItem_antialiasing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_setAntialiasing, "setAntialiasing(self, bool)");

extern "C" {static PyObject *meth_QQuickPaintedItem_setAntialiasing(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_setAntialiasing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, &a0))
        {
            sipCpp->setAntialiasing(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_setAntialiasing, doc_QQuickPaintedItem_setAntialiasing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_mipmap, "mipmap(self) -> bool");

extern "C" {static PyObject *meth_QQuickPaintedItem_mipmap(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_mipmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->mipmap();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_mipmap, doc_QQuickPaintedItem_mipmap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_setMipmap, "setMipmap(self, bool)");

extern "C" {static PyObject *meth_QQuickPaintedItem_setMipmap(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_setMipmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, &a0))
        {
            sipCpp->setMipmap(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_setMipmap, doc_QQuickPaintedItem_setMipmap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_performanceHints, "performanceHints(self) -> QQuickPaintedItem.PerformanceHints");

extern "C" {static PyObject *meth_QQuickPaintedItem_performanceHints(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_performanceHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
             ::QQuickPaintedItem::PerformanceHints*sipRes;

            sipRes = new  ::QQuickPaintedItem::PerformanceHints(sipCpp->performanceHints());

            return sipConvertFromNewType(sipRes,sipType_QQuickPaintedItem_PerformanceHints,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_performanceHints, doc_QQuickPaintedItem_performanceHints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_setPerformanceHint, "setPerformanceHint(self, QQuickPaintedItem.PerformanceHint, enabled: bool = True)");

extern "C" {static PyObject *meth_QQuickPaintedItem_setPerformanceHint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_setPerformanceHint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickPaintedItem::PerformanceHint a0;
        bool a1 = 1;
         ::QQuickPaintedItem *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE|b", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QQuickPaintedItem_PerformanceHint, &a0, &a1))
        {
            sipCpp->setPerformanceHint(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_setPerformanceHint, doc_QQuickPaintedItem_setPerformanceHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_setPerformanceHints, "setPerformanceHints(self, Union[QQuickPaintedItem.PerformanceHints, QQuickPaintedItem.PerformanceHint])");

extern "C" {static PyObject *meth_QQuickPaintedItem_setPerformanceHints(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_setPerformanceHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickPaintedItem::PerformanceHints* a0;
        int a0State = 0;
         ::QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QQuickPaintedItem_PerformanceHints, &a0, &a0State))
        {
            sipCpp->setPerformanceHints(*a0);
            sipReleaseType(a0,sipType_QQuickPaintedItem_PerformanceHints,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_setPerformanceHints, doc_QQuickPaintedItem_setPerformanceHints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_contentsBoundingRect, "contentsBoundingRect(self) -> QRectF");

extern "C" {static PyObject *meth_QQuickPaintedItem_contentsBoundingRect(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_contentsBoundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->contentsBoundingRect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_contentsBoundingRect, doc_QQuickPaintedItem_contentsBoundingRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_contentsSize, "contentsSize(self) -> QSize");

extern "C" {static PyObject *meth_QQuickPaintedItem_contentsSize(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_contentsSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->contentsSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_contentsSize, doc_QQuickPaintedItem_contentsSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_setContentsSize, "setContentsSize(self, QSize)");

extern "C" {static PyObject *meth_QQuickPaintedItem_setContentsSize(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_setContentsSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
         ::QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setContentsSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_setContentsSize, doc_QQuickPaintedItem_setContentsSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_resetContentsSize, "resetContentsSize(self)");

extern "C" {static PyObject *meth_QQuickPaintedItem_resetContentsSize(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_resetContentsSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            sipCpp->resetContentsSize();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_resetContentsSize, doc_QQuickPaintedItem_resetContentsSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_contentsScale, "contentsScale(self) -> float");

extern "C" {static PyObject *meth_QQuickPaintedItem_contentsScale(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_contentsScale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->contentsScale();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_contentsScale, doc_QQuickPaintedItem_contentsScale);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_setContentsScale, "setContentsScale(self, float)");

extern "C" {static PyObject *meth_QQuickPaintedItem_setContentsScale(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_setContentsScale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, &a0))
        {
            sipCpp->setContentsScale(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_setContentsScale, doc_QQuickPaintedItem_setContentsScale);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_fillColor, "fillColor(self) -> QColor");

extern "C" {static PyObject *meth_QQuickPaintedItem_fillColor(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_fillColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor(sipCpp->fillColor());

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_fillColor, doc_QQuickPaintedItem_fillColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_setFillColor, "setFillColor(self, Union[QColor, Qt.GlobalColor])");

extern "C" {static PyObject *meth_QQuickPaintedItem_setFillColor(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_setFillColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor* a0;
        int a0State = 0;
         ::QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->setFillColor(*a0);
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_setFillColor, doc_QQuickPaintedItem_setFillColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_renderTarget, "renderTarget(self) -> QQuickPaintedItem.RenderTarget");

extern "C" {static PyObject *meth_QQuickPaintedItem_renderTarget(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_renderTarget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
             ::QQuickPaintedItem::RenderTarget sipRes;

            sipRes = sipCpp->renderTarget();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QQuickPaintedItem_RenderTarget);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_renderTarget, doc_QQuickPaintedItem_renderTarget);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_setRenderTarget, "setRenderTarget(self, QQuickPaintedItem.RenderTarget)");

extern "C" {static PyObject *meth_QQuickPaintedItem_setRenderTarget(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_setRenderTarget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickPaintedItem::RenderTarget a0;
         ::QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QQuickPaintedItem_RenderTarget, &a0))
        {
            sipCpp->setRenderTarget(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_setRenderTarget, doc_QQuickPaintedItem_setRenderTarget);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_paint, "paint(self, QPainter)");

extern "C" {static PyObject *meth_QQuickPaintedItem_paint(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_paint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QPainter* a0;
         ::QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QPainter, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QQuickPaintedItem, sipName_paint);
                return SIP_NULLPTR;
            }

            sipCpp->paint(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_paint, doc_QQuickPaintedItem_paint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_updatePaintNode, "updatePaintNode(self, QSGNode, QQuickItem.UpdatePaintNodeData) -> QSGNode");

extern "C" {static PyObject *meth_QQuickPaintedItem_updatePaintNode(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_updatePaintNode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QSGNode* a0;
         ::QQuickItem::UpdatePaintNodeData* a1;
         ::QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J8", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QSGNode, &a0, sipType_QQuickItem_UpdatePaintNodeData, &a1))
        {
             ::QSGNode*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QQuickPaintedItem::updatePaintNode(a0,a1) : sipCpp->updatePaintNode(a0,a1));

            return sipConvertFromType(sipRes,sipType_QSGNode,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_updatePaintNode, doc_QQuickPaintedItem_updatePaintNode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_isTextureProvider, "isTextureProvider(self) -> bool");

extern "C" {static PyObject *meth_QQuickPaintedItem_isTextureProvider(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_isTextureProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QQuickPaintedItem::isTextureProvider() : sipCpp->isTextureProvider());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_isTextureProvider, doc_QQuickPaintedItem_isTextureProvider);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_textureProvider, "textureProvider(self) -> QSGTextureProvider");

extern "C" {static PyObject *meth_QQuickPaintedItem_textureProvider(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_textureProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
             ::QSGTextureProvider*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QQuickPaintedItem::textureProvider() : sipCpp->textureProvider());

            return sipConvertFromType(sipRes,sipType_QSGTextureProvider,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_textureProvider, doc_QQuickPaintedItem_textureProvider);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_releaseResources, "releaseResources(self)");

extern "C" {static PyObject *meth_QQuickPaintedItem_releaseResources(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_releaseResources(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickPaintedItem::releaseResources() : sipCpp->releaseResources());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_releaseResources, doc_QQuickPaintedItem_releaseResources);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_itemChange, "itemChange(self, QQuickItem.ItemChange, QQuickItem.ItemChangeData)");

extern "C" {static PyObject *meth_QQuickPaintedItem_itemChange(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_itemChange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QQuickItem::ItemChange a0;
        const  ::QQuickItem::ItemChangeData* a1;
         ::QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pEJ9", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QQuickItem_ItemChange, &a0, sipType_QQuickItem_ItemChangeData, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickPaintedItem::itemChange(a0,*a1) : sipCpp->itemChange(a0,*a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_itemChange, doc_QQuickPaintedItem_itemChange);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_textureSize, "textureSize(self) -> QSize");

extern "C" {static PyObject *meth_QQuickPaintedItem_textureSize(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_textureSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->textureSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_textureSize, doc_QQuickPaintedItem_textureSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_setTextureSize, "setTextureSize(self, QSize)");

extern "C" {static PyObject *meth_QQuickPaintedItem_setTextureSize(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_setTextureSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
         ::QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setTextureSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_setTextureSize, doc_QQuickPaintedItem_setTextureSize);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QQuickPaintedItem(void *, const sipTypeDef *);}
static void *cast_QQuickPaintedItem(void *sipCppV, const sipTypeDef *targetType)
{
     ::QQuickPaintedItem *sipCpp = reinterpret_cast< ::QQuickPaintedItem *>(sipCppV);

    if (targetType == sipType_QQuickItem)
        return static_cast< ::QQuickItem *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QQmlParserStatus)
        return static_cast< ::QQmlParserStatus *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQuickPaintedItem(void *, int);}
static void release_QQuickPaintedItem(void *sipCppV, int)
{
     ::QQuickPaintedItem *sipCpp = reinterpret_cast< ::QQuickPaintedItem *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QQuickPaintedItem(sipSimpleWrapper *);}
static void dealloc_QQuickPaintedItem(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQQuickPaintedItem *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQuickPaintedItem(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QQuickPaintedItem(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQuickPaintedItem(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQQuickPaintedItem *sipCpp = SIP_NULLPTR;

    {
         ::QQuickItem* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QQuickItem, &a0, sipOwner))
        {
            sipCpp = new sipQQuickPaintedItem(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QQuickPaintedItem[] = {{7, 255, 1}};


static PyMethodDef methods_QQuickPaintedItem[] = {
    {SIP_MLNAME_CAST(sipName_antialiasing), meth_QQuickPaintedItem_antialiasing, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_antialiasing)},
    {SIP_MLNAME_CAST(sipName_contentsBoundingRect), meth_QQuickPaintedItem_contentsBoundingRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_contentsBoundingRect)},
    {SIP_MLNAME_CAST(sipName_contentsScale), meth_QQuickPaintedItem_contentsScale, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_contentsScale)},
    {SIP_MLNAME_CAST(sipName_contentsSize), meth_QQuickPaintedItem_contentsSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_contentsSize)},
    {SIP_MLNAME_CAST(sipName_fillColor), meth_QQuickPaintedItem_fillColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_fillColor)},
    {SIP_MLNAME_CAST(sipName_isTextureProvider), meth_QQuickPaintedItem_isTextureProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_isTextureProvider)},
    {SIP_MLNAME_CAST(sipName_itemChange), meth_QQuickPaintedItem_itemChange, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_itemChange)},
    {SIP_MLNAME_CAST(sipName_mipmap), meth_QQuickPaintedItem_mipmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_mipmap)},
    {SIP_MLNAME_CAST(sipName_opaquePainting), meth_QQuickPaintedItem_opaquePainting, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_opaquePainting)},
    {SIP_MLNAME_CAST(sipName_paint), meth_QQuickPaintedItem_paint, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_paint)},
    {SIP_MLNAME_CAST(sipName_performanceHints), meth_QQuickPaintedItem_performanceHints, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_performanceHints)},
    {SIP_MLNAME_CAST(sipName_releaseResources), meth_QQuickPaintedItem_releaseResources, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_releaseResources)},
    {SIP_MLNAME_CAST(sipName_renderTarget), meth_QQuickPaintedItem_renderTarget, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_renderTarget)},
    {SIP_MLNAME_CAST(sipName_resetContentsSize), meth_QQuickPaintedItem_resetContentsSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_resetContentsSize)},
    {SIP_MLNAME_CAST(sipName_setAntialiasing), meth_QQuickPaintedItem_setAntialiasing, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_setAntialiasing)},
    {SIP_MLNAME_CAST(sipName_setContentsScale), meth_QQuickPaintedItem_setContentsScale, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_setContentsScale)},
    {SIP_MLNAME_CAST(sipName_setContentsSize), meth_QQuickPaintedItem_setContentsSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_setContentsSize)},
    {SIP_MLNAME_CAST(sipName_setFillColor), meth_QQuickPaintedItem_setFillColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_setFillColor)},
    {SIP_MLNAME_CAST(sipName_setMipmap), meth_QQuickPaintedItem_setMipmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_setMipmap)},
    {SIP_MLNAME_CAST(sipName_setOpaquePainting), meth_QQuickPaintedItem_setOpaquePainting, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_setOpaquePainting)},
    {SIP_MLNAME_CAST(sipName_setPerformanceHint), SIP_MLMETH_CAST(meth_QQuickPaintedItem_setPerformanceHint), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_setPerformanceHint)},
    {SIP_MLNAME_CAST(sipName_setPerformanceHints), meth_QQuickPaintedItem_setPerformanceHints, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_setPerformanceHints)},
    {SIP_MLNAME_CAST(sipName_setRenderTarget), meth_QQuickPaintedItem_setRenderTarget, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_setRenderTarget)},
    {SIP_MLNAME_CAST(sipName_setTextureSize), meth_QQuickPaintedItem_setTextureSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_setTextureSize)},
    {SIP_MLNAME_CAST(sipName_textureProvider), meth_QQuickPaintedItem_textureProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_textureProvider)},
    {SIP_MLNAME_CAST(sipName_textureSize), meth_QQuickPaintedItem_textureSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_textureSize)},
    {SIP_MLNAME_CAST(sipName_update), SIP_MLMETH_CAST(meth_QQuickPaintedItem_update), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_update)},
    {SIP_MLNAME_CAST(sipName_updatePaintNode), meth_QQuickPaintedItem_updatePaintNode, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_updatePaintNode)}
};

static sipEnumMemberDef enummembers_QQuickPaintedItem[] = {
    {sipName_FastFBOResizing, static_cast<int>( ::QQuickPaintedItem::FastFBOResizing), 16},
    {sipName_FramebufferObject, static_cast<int>( ::QQuickPaintedItem::FramebufferObject), 18},
    {sipName_Image, static_cast<int>( ::QQuickPaintedItem::Image), 18},
    {sipName_InvertedYFramebufferObject, static_cast<int>( ::QQuickPaintedItem::InvertedYFramebufferObject), 18},
};

PyDoc_STRVAR(doc_QQuickPaintedItem, "\1QQuickPaintedItem(parent: QQuickItem = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QQuickPaintedItem[] = {
    {"textureSizeChanged()", "\1textureSizeChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"renderTargetChanged()", "\1renderTargetChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"contentsScaleChanged()", "\1contentsScaleChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"contentsSizeChanged()", "\1contentsSizeChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"fillColorChanged()", "\1fillColorChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QQuickPaintedItem = {
    & ::QQuickPaintedItem::staticMetaObject,
    0,
    signals_QQuickPaintedItem,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QQuickPaintedItem = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQuickPaintedItem,
        {SIP_NULLPTR},
        &plugin_QQuickPaintedItem
    },
    {
        sipNameNr_QQuickPaintedItem,
        {0, 0, 1},
        28, methods_QQuickPaintedItem,
        4, enummembers_QQuickPaintedItem,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QQuickPaintedItem,
    -1,
    -1,
    supers_QQuickPaintedItem,
    SIP_NULLPTR,
    init_type_QQuickPaintedItem,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQuickPaintedItem,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QQuickPaintedItem,
    cast_QQuickPaintedItem,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitemgrabresult.sip"
#include <qquickitemgrabresult.h>
#line 14306 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 14310 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 14313 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 14316 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 14319 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtGui/qimage.sip"
#include <qimage.h>
#line 14322 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 14325 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 14328 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 14331 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 14334 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 14337 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 14340 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 14343 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 14346 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 14349 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 14352 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 14355 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 14358 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 14361 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"


PyDoc_STRVAR(doc_QQuickItemGrabResult_image, "image(self) -> QImage");

extern "C" {static PyObject *meth_QQuickItemGrabResult_image(PyObject *, PyObject *);}
static PyObject *meth_QQuickItemGrabResult_image(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItemGrabResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItemGrabResult, &sipCpp))
        {
             ::QImage*sipRes;

            sipRes = new  ::QImage(sipCpp->image());

            return sipConvertFromNewType(sipRes,sipType_QImage,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItemGrabResult, sipName_image, doc_QQuickItemGrabResult_image);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItemGrabResult_url, "url(self) -> QUrl");

extern "C" {static PyObject *meth_QQuickItemGrabResult_url(PyObject *, PyObject *);}
static PyObject *meth_QQuickItemGrabResult_url(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItemGrabResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItemGrabResult, &sipCpp))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl(sipCpp->url());

            return sipConvertFromNewType(sipRes,sipType_QUrl,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItemGrabResult, sipName_url, doc_QQuickItemGrabResult_url);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItemGrabResult_saveToFile, "saveToFile(self, str) -> bool");

extern "C" {static PyObject *meth_QQuickItemGrabResult_saveToFile(PyObject *, PyObject *);}
static PyObject *meth_QQuickItemGrabResult_saveToFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QQuickItemGrabResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickItemGrabResult, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->saveToFile(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItemGrabResult, sipName_saveToFile, doc_QQuickItemGrabResult_saveToFile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItemGrabResult_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QQuickItemGrabResult_event(PyObject *, PyObject *);}
static PyObject *meth_QQuickItemGrabResult_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QQuickItemGrabResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickItemGrabResult, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QQuickItemGrabResult::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItemGrabResult, sipName_event, doc_QQuickItemGrabResult_event);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QQuickItemGrabResult(void *, const sipTypeDef *);}
static void *cast_QQuickItemGrabResult(void *sipCppV, const sipTypeDef *targetType)
{
     ::QQuickItemGrabResult *sipCpp = reinterpret_cast< ::QQuickItemGrabResult *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQuickItemGrabResult(void *, int);}
static void release_QQuickItemGrabResult(void *sipCppV, int)
{
     ::QQuickItemGrabResult *sipCpp = reinterpret_cast< ::QQuickItemGrabResult *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QQuickItemGrabResult(sipSimpleWrapper *);}
static void dealloc_QQuickItemGrabResult(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQuickItemGrabResult(sipGetAddress(sipSelf), 0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QQuickItemGrabResult[] = {{3, 0, 1}};


static PyMethodDef methods_QQuickItemGrabResult[] = {
    {SIP_MLNAME_CAST(sipName_event), meth_QQuickItemGrabResult_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItemGrabResult_event)},
    {SIP_MLNAME_CAST(sipName_image), meth_QQuickItemGrabResult_image, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItemGrabResult_image)},
    {SIP_MLNAME_CAST(sipName_saveToFile), meth_QQuickItemGrabResult_saveToFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItemGrabResult_saveToFile)},
    {SIP_MLNAME_CAST(sipName_url), meth_QQuickItemGrabResult_url, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItemGrabResult_url)}
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QQuickItemGrabResult[] = {
    {"ready()", "\1ready(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QQuickItemGrabResult = {
    & ::QQuickItemGrabResult::staticMetaObject,
    0,
    signals_QQuickItemGrabResult,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QQuickItemGrabResult = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQuickItemGrabResult,
        {SIP_NULLPTR},
        &plugin_QQuickItemGrabResult
    },
    {
        sipNameNr_QQuickItemGrabResult,
        {0, 0, 1},
        4, methods_QQuickItemGrabResult,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_QQuickItemGrabResult,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQuickItemGrabResult,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QQuickItemGrabResult,
    cast_QQuickItemGrabResult,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 185 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 14597 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

#line 311 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 14601 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"


/* Call the instance's destructor. */
extern "C" {static void release_QQuickItem_UpdatePaintNodeData(void *, int);}
static void release_QQuickItem_UpdatePaintNodeData(void *sipCppV, int)
{
    delete reinterpret_cast< ::QQuickItem::UpdatePaintNodeData *>(sipCppV);
}


extern "C" {static void dealloc_QQuickItem_UpdatePaintNodeData(sipSimpleWrapper *);}
static void dealloc_QQuickItem_UpdatePaintNodeData(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQuickItem_UpdatePaintNodeData(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QQuickItem_UpdatePaintNodeData(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQuickItem_UpdatePaintNodeData(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QQuickItem::UpdatePaintNodeData *sipCpp = SIP_NULLPTR;

    {
        const  ::QQuickItem::UpdatePaintNodeData* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QQuickItem_UpdatePaintNodeData, &a0))
        {
            sipCpp = new  ::QQuickItem::UpdatePaintNodeData(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static PyObject *varget_QQuickItem_UpdatePaintNodeData_transformNode(void *, PyObject *, PyObject *);}
static PyObject *varget_QQuickItem_UpdatePaintNodeData_transformNode(void *sipSelf, PyObject *, PyObject *)
{
     ::QSGTransformNode*sipVal;
     ::QQuickItem::UpdatePaintNodeData *sipCpp = reinterpret_cast< ::QQuickItem::UpdatePaintNodeData *>(sipSelf);

    sipVal = sipCpp->transformNode;

    return sipConvertFromType(sipVal, sipType_QSGTransformNode, SIP_NULLPTR);
}


extern "C" {static int varset_QQuickItem_UpdatePaintNodeData_transformNode(void *, PyObject *, PyObject *);}
static int varset_QQuickItem_UpdatePaintNodeData_transformNode(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::QSGTransformNode*sipVal;
     ::QQuickItem::UpdatePaintNodeData *sipCpp = reinterpret_cast< ::QQuickItem::UpdatePaintNodeData *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::QSGTransformNode *>(sipForceConvertToType(sipPy, sipType_QSGTransformNode, SIP_NULLPTR, 0, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->transformNode = sipVal;

    return 0;
}

sipVariableDef variables_QQuickItem_UpdatePaintNodeData[] = {
    {InstanceVariable, sipName_transformNode, (PyMethodDef *)varget_QQuickItem_UpdatePaintNodeData_transformNode, (PyMethodDef *)varset_QQuickItem_UpdatePaintNodeData_transformNode, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_QQuickItem_UpdatePaintNodeData, "\1QQuickItem.UpdatePaintNodeData(QQuickItem.UpdatePaintNodeData)");


static pyqt5ClassPluginDef plugin_QQuickItem_UpdatePaintNodeData = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QQuickItem_UpdatePaintNodeData = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQuickItem__UpdatePaintNodeData,
        {SIP_NULLPTR},
        &plugin_QQuickItem_UpdatePaintNodeData
    },
    {
        sipNameNr_UpdatePaintNodeData,
        {7, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        1, variables_QQuickItem_UpdatePaintNodeData,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QQuickItem_UpdatePaintNodeData,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QQuickItem_UpdatePaintNodeData,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQuickItem_UpdatePaintNodeData,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QQuickItem_UpdatePaintNodeData,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 65 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 14741 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 14745 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickwindow.sip"
#include <qquickwindow.h>
#line 14748 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"


/* Call the instance's destructor. */
extern "C" {static void release_QQuickItem_ItemChangeData(void *, int);}
static void release_QQuickItem_ItemChangeData(void *sipCppV, int)
{
    delete reinterpret_cast< ::QQuickItem::ItemChangeData *>(sipCppV);
}


extern "C" {static void dealloc_QQuickItem_ItemChangeData(sipSimpleWrapper *);}
static void dealloc_QQuickItem_ItemChangeData(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQuickItem_ItemChangeData(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QQuickItem_ItemChangeData(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQuickItem_ItemChangeData(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QQuickItem::ItemChangeData *sipCpp = SIP_NULLPTR;

    {
         ::QQuickItem* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8", sipType_QQuickItem, &a0))
        {
            sipCpp = new  ::QQuickItem::ItemChangeData(a0);

            return sipCpp;
        }
    }

    {
         ::QQuickWindow* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8", sipType_QQuickWindow, &a0))
        {
            sipCpp = new  ::QQuickItem::ItemChangeData(a0);

            return sipCpp;
        }
    }

    {
         ::qreal a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "Xd", &a0))
        {
            sipCpp = new  ::QQuickItem::ItemChangeData(a0);

            return sipCpp;
        }
    }

    {
        bool a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "Xb", &a0))
        {
            sipCpp = new  ::QQuickItem::ItemChangeData(a0);

            return sipCpp;
        }
    }

    {
        const  ::QQuickItem::ItemChangeData* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QQuickItem_ItemChangeData, &a0))
        {
            sipCpp = new  ::QQuickItem::ItemChangeData(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static PyObject *varget_QQuickItem_ItemChangeData_boolValue(void *, PyObject *, PyObject *);}
static PyObject *varget_QQuickItem_ItemChangeData_boolValue(void *sipSelf, PyObject *, PyObject *)
{
    bool sipVal;
     ::QQuickItem::ItemChangeData *sipCpp = reinterpret_cast< ::QQuickItem::ItemChangeData *>(sipSelf);

    sipVal = sipCpp->boolValue;

    return PyBool_FromLong(sipVal);
}


extern "C" {static int varset_QQuickItem_ItemChangeData_boolValue(void *, PyObject *, PyObject *);}
static int varset_QQuickItem_ItemChangeData_boolValue(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
     ::QQuickItem::ItemChangeData *sipCpp = reinterpret_cast< ::QQuickItem::ItemChangeData *>(sipSelf);

    sipVal = sipConvertToBool(sipPy);

    if (sipVal < 0)
        return -1;

    sipCpp->boolValue = static_cast<bool>(sipVal);

    return 0;
}


extern "C" {static PyObject *varget_QQuickItem_ItemChangeData_item(void *, PyObject *, PyObject *);}
static PyObject *varget_QQuickItem_ItemChangeData_item(void *sipSelf, PyObject *, PyObject *)
{
     ::QQuickItem*sipVal;
     ::QQuickItem::ItemChangeData *sipCpp = reinterpret_cast< ::QQuickItem::ItemChangeData *>(sipSelf);

    sipVal = sipCpp->item;

    return sipConvertFromType(sipVal, sipType_QQuickItem, SIP_NULLPTR);
}


extern "C" {static int varset_QQuickItem_ItemChangeData_item(void *, PyObject *, PyObject *);}
static int varset_QQuickItem_ItemChangeData_item(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::QQuickItem*sipVal;
     ::QQuickItem::ItemChangeData *sipCpp = reinterpret_cast< ::QQuickItem::ItemChangeData *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::QQuickItem *>(sipForceConvertToType(sipPy, sipType_QQuickItem, SIP_NULLPTR, 0, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->item = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QQuickItem_ItemChangeData_realValue(void *, PyObject *, PyObject *);}
static PyObject *varget_QQuickItem_ItemChangeData_realValue(void *sipSelf, PyObject *, PyObject *)
{
     ::qreal sipVal;
     ::QQuickItem::ItemChangeData *sipCpp = reinterpret_cast< ::QQuickItem::ItemChangeData *>(sipSelf);

    sipVal = sipCpp->realValue;

    return PyFloat_FromDouble(sipVal);
}


extern "C" {static int varset_QQuickItem_ItemChangeData_realValue(void *, PyObject *, PyObject *);}
static int varset_QQuickItem_ItemChangeData_realValue(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::qreal sipVal;
     ::QQuickItem::ItemChangeData *sipCpp = reinterpret_cast< ::QQuickItem::ItemChangeData *>(sipSelf);

    sipVal = PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->realValue = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QQuickItem_ItemChangeData_window(void *, PyObject *, PyObject *);}
static PyObject *varget_QQuickItem_ItemChangeData_window(void *sipSelf, PyObject *, PyObject *)
{
     ::QQuickWindow*sipVal;
     ::QQuickItem::ItemChangeData *sipCpp = reinterpret_cast< ::QQuickItem::ItemChangeData *>(sipSelf);

    sipVal = sipCpp->window;

    return sipConvertFromType(sipVal, sipType_QQuickWindow, SIP_NULLPTR);
}


extern "C" {static int varset_QQuickItem_ItemChangeData_window(void *, PyObject *, PyObject *);}
static int varset_QQuickItem_ItemChangeData_window(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::QQuickWindow*sipVal;
     ::QQuickItem::ItemChangeData *sipCpp = reinterpret_cast< ::QQuickItem::ItemChangeData *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::QQuickWindow *>(sipForceConvertToType(sipPy, sipType_QQuickWindow, SIP_NULLPTR, 0, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->window = sipVal;

    return 0;
}

sipVariableDef variables_QQuickItem_ItemChangeData[] = {
    {InstanceVariable, sipName_boolValue, (PyMethodDef *)varget_QQuickItem_ItemChangeData_boolValue, (PyMethodDef *)varset_QQuickItem_ItemChangeData_boolValue, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_item, (PyMethodDef *)varget_QQuickItem_ItemChangeData_item, (PyMethodDef *)varset_QQuickItem_ItemChangeData_item, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_realValue, (PyMethodDef *)varget_QQuickItem_ItemChangeData_realValue, (PyMethodDef *)varset_QQuickItem_ItemChangeData_realValue, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_window, (PyMethodDef *)varget_QQuickItem_ItemChangeData_window, (PyMethodDef *)varset_QQuickItem_ItemChangeData_window, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_QQuickItem_ItemChangeData, "\1QQuickItem.ItemChangeData(QQuickItem)\n"
"QQuickItem.ItemChangeData(QQuickWindow)\n"
"QQuickItem.ItemChangeData(float)\n"
"QQuickItem.ItemChangeData(bool)\n"
"QQuickItem.ItemChangeData(QQuickItem.ItemChangeData)");


static pyqt5ClassPluginDef plugin_QQuickItem_ItemChangeData = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QQuickItem_ItemChangeData = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQuickItem__ItemChangeData,
        {SIP_NULLPTR},
        &plugin_QQuickItem_ItemChangeData
    },
    {
        sipNameNr_ItemChangeData,
        {7, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        4, variables_QQuickItem_ItemChangeData,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QQuickItem_ItemChangeData,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QQuickItem_ItemChangeData,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQuickItem_ItemChangeData,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QQuickItem_ItemChangeData,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 15030 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 15034 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"


extern "C" {static long slot_QQuickItem_Flags___hash__(PyObject *);}
static long slot_QQuickItem_Flags___hash__(PyObject *sipSelf)
{
     ::QQuickItem::Flags *sipCpp = reinterpret_cast< ::QQuickItem::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuickItem_Flags));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QQuickItem::Flags::Int();
#line 15052 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QQuickItem_Flags___bool__(PyObject *);}
static int slot_QQuickItem_Flags___bool__(PyObject *sipSelf)
{
     ::QQuickItem::Flags *sipCpp = reinterpret_cast< ::QQuickItem::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuickItem_Flags));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QQuickItem::Flags::Int() != 0);
#line 15077 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QQuickItem_Flags___ne__(PyObject *,PyObject *);}
static PyObject *slot_QQuickItem_Flags___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QQuickItem::Flags *sipCpp = reinterpret_cast< ::QQuickItem::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuickItem_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem::Flags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QQuickItem_Flags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QQuickItem::Flags::Int() != a0->operator QQuickItem::Flags::Int());
#line 15107 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
            sipReleaseType(const_cast< ::QQuickItem::Flags *>(a0),sipType_QQuickItem_Flags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, ne_slot, sipType_QQuickItem_Flags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QQuickItem_Flags___eq__(PyObject *,PyObject *);}
static PyObject *slot_QQuickItem_Flags___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QQuickItem::Flags *sipCpp = reinterpret_cast< ::QQuickItem::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuickItem_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem::Flags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QQuickItem_Flags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QQuickItem::Flags::Int() == a0->operator QQuickItem::Flags::Int());
#line 15143 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
            sipReleaseType(const_cast< ::QQuickItem::Flags *>(a0),sipType_QQuickItem_Flags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, eq_slot, sipType_QQuickItem_Flags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QQuickItem_Flags___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QQuickItem_Flags___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QQuickItem_Flags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QQuickItem::Flags *sipCpp = reinterpret_cast< ::QQuickItem::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuickItem_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QQuickItem::Flags(*sipCpp ^ a0);
#line 15182 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QQuickItem_Flags___xor__(PyObject *,PyObject *);}
static PyObject *slot_QQuickItem_Flags___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickItem::Flags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QQuickItem_Flags, &a0, &a0State, &a1))
        {
             ::QQuickItem::Flags*sipRes;

            sipRes = new  ::QQuickItem::Flags((*a0 ^ a1));
            sipReleaseType(a0,sipType_QQuickItem_Flags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QQuickItem_Flags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QQuickItem_Flags___ior__(PyObject *,PyObject *);}
static PyObject *slot_QQuickItem_Flags___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QQuickItem_Flags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QQuickItem::Flags *sipCpp = reinterpret_cast< ::QQuickItem::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuickItem_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QQuickItem::Flags(*sipCpp | a0);
#line 15254 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QQuickItem_Flags___or__(PyObject *,PyObject *);}
static PyObject *slot_QQuickItem_Flags___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickItem::Flags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QQuickItem_Flags, &a0, &a0State, &a1))
        {
             ::QQuickItem::Flags*sipRes;

            sipRes = new  ::QQuickItem::Flags((*a0 | a1));
            sipReleaseType(a0,sipType_QQuickItem_Flags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QQuickItem_Flags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QQuickItem_Flags___iand__(PyObject *,PyObject *);}
static PyObject *slot_QQuickItem_Flags___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QQuickItem_Flags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QQuickItem::Flags *sipCpp = reinterpret_cast< ::QQuickItem::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuickItem_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QQuickItem::Flags::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QQuickItem_Flags___and__(PyObject *,PyObject *);}
static PyObject *slot_QQuickItem_Flags___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickItem::Flags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QQuickItem_Flags, &a0, &a0State, &a1))
        {
             ::QQuickItem::Flags*sipRes;

            sipRes = new  ::QQuickItem::Flags((*a0 & a1));
            sipReleaseType(a0,sipType_QQuickItem_Flags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QQuickItem_Flags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QQuickItem_Flags___invert__(PyObject *);}
static PyObject *slot_QQuickItem_Flags___invert__(PyObject *sipSelf)
{
     ::QQuickItem::Flags *sipCpp = reinterpret_cast< ::QQuickItem::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuickItem_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QQuickItem::Flags*sipRes;

            sipRes = new  ::QQuickItem::Flags(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QQuickItem_Flags,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QQuickItem_Flags___int__(PyObject *);}
static PyObject *slot_QQuickItem_Flags___int__(PyObject *sipSelf)
{
     ::QQuickItem::Flags *sipCpp = reinterpret_cast< ::QQuickItem::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuickItem_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQuickItem_Flags(void *, int);}
static void release_QQuickItem_Flags(void *sipCppV, int)
{
    delete reinterpret_cast< ::QQuickItem::Flags *>(sipCppV);
}


extern "C" {static void assign_QQuickItem_Flags(void *, SIP_SSIZE_T, void *);}
static void assign_QQuickItem_Flags(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QQuickItem::Flags *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QQuickItem::Flags *>(sipSrc);
}


extern "C" {static void *array_QQuickItem_Flags(SIP_SSIZE_T);}
static void *array_QQuickItem_Flags(SIP_SSIZE_T sipNrElem)
{
    return new  ::QQuickItem::Flags[sipNrElem];
}


extern "C" {static void *copy_QQuickItem_Flags(const void *, SIP_SSIZE_T);}
static void *copy_QQuickItem_Flags(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QQuickItem::Flags(reinterpret_cast<const  ::QQuickItem::Flags *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QQuickItem_Flags(sipSimpleWrapper *);}
static void dealloc_QQuickItem_Flags(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQuickItem_Flags(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QQuickItem_Flags(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQuickItem_Flags(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QQuickItem::Flags *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QQuickItem::Flags();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QQuickItem::Flags(a0);

            return sipCpp;
        }
    }

    {
        const  ::QQuickItem::Flags* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QQuickItem_Flags, &a0, &a0State))
        {
            sipCpp = new  ::QQuickItem::Flags(*a0);
            sipReleaseType(const_cast< ::QQuickItem::Flags *>(a0),sipType_QQuickItem_Flags,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QQuickItem_Flags(PyObject *, void **, int *, PyObject *);}
static int convertTo_QQuickItem_Flags(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QQuickItem::Flags **sipCppPtr = reinterpret_cast< ::QQuickItem::Flags **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QQuickItem::Flags is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QQuickItem_Flag)) ||
            sipCanConvertToType(sipPy, sipType_QQuickItem_Flags, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QQuickItem_Flag)))
{
    *sipCppPtr = new QQuickItem::Flags(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QQuickItem::Flags *>(sipConvertToType(sipPy, sipType_QQuickItem_Flags, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 15522 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QQuickItem_Flags[] = {
    {(void *)slot_QQuickItem_Flags___hash__, hash_slot},
    {(void *)slot_QQuickItem_Flags___bool__, bool_slot},
    {(void *)slot_QQuickItem_Flags___ne__, ne_slot},
    {(void *)slot_QQuickItem_Flags___eq__, eq_slot},
    {(void *)slot_QQuickItem_Flags___ixor__, ixor_slot},
    {(void *)slot_QQuickItem_Flags___xor__, xor_slot},
    {(void *)slot_QQuickItem_Flags___ior__, ior_slot},
    {(void *)slot_QQuickItem_Flags___or__, or_slot},
    {(void *)slot_QQuickItem_Flags___iand__, iand_slot},
    {(void *)slot_QQuickItem_Flags___and__, and_slot},
    {(void *)slot_QQuickItem_Flags___invert__, invert_slot},
    {(void *)slot_QQuickItem_Flags___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QQuickItem_Flags, "\1QQuickItem.Flags()\n"
"QQuickItem.Flags(Union[QQuickItem.Flags, QQuickItem.Flag])\n"
"QQuickItem.Flags(QQuickItem.Flags)");


static pyqt5ClassPluginDef plugin_QQuickItem_Flags = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QQuickItem_Flags = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQuickItem__Flags,
        {SIP_NULLPTR},
        &plugin_QQuickItem_Flags
    },
    {
        sipNameNr_Flags,
        {7, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QQuickItem_Flags,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QQuickItem_Flags,
    init_type_QQuickItem_Flags,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQuickItem_Flags,
    assign_QQuickItem_Flags,
    array_QQuickItem_Flags,
    copy_QQuickItem_Flags,
    release_QQuickItem_Flags,
    SIP_NULLPTR,
    convertTo_QQuickItem_Flags,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 84 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickimageprovider.sip"
#include <qquickimageprovider.h>
#line 15610 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

#line 62 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickimageprovider.sip"
#include <qquickimageprovider.h>
#line 15614 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 15617 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 15620 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickimageprovider.sip"
#include <qquickimageprovider.h>
#line 15623 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 15626 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtGui/qimage.sip"
#include <qimage.h>
#line 15629 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtQml/qqmlengine.sip"
#include <qqmlengine.h>
#line 15632 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtQml/qqmlengine.sip"
#include <qqmlengine.h>
#line 15635 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"


class sipQQuickAsyncImageProvider : public  ::QQuickAsyncImageProvider
{
public:
    sipQQuickAsyncImageProvider();
    sipQQuickAsyncImageProvider(const  ::QQuickAsyncImageProvider&);
    virtual ~sipQQuickAsyncImageProvider();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QQuickImageResponse* requestImageResponse(const  ::QString&,const  ::QSize&) SIP_OVERRIDE;
     ::QQmlImageProviderBase::Flags flags() const SIP_OVERRIDE;
     ::QQmlImageProviderBase::ImageType imageType() const SIP_OVERRIDE;
     ::QImage requestImage(const  ::QString&, ::QSize*,const  ::QSize&) SIP_OVERRIDE;
     ::QPixmap requestPixmap(const  ::QString&, ::QSize*,const  ::QSize&) SIP_OVERRIDE;
     ::QQuickTextureFactory* requestTexture(const  ::QString&, ::QSize*,const  ::QSize&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQQuickAsyncImageProvider(const sipQQuickAsyncImageProvider &);
    sipQQuickAsyncImageProvider &operator = (const sipQQuickAsyncImageProvider &);

    char sipPyMethods[6];
};

sipQQuickAsyncImageProvider::sipQQuickAsyncImageProvider():  ::QQuickAsyncImageProvider(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQuickAsyncImageProvider::sipQQuickAsyncImageProvider(const  ::QQuickAsyncImageProvider& a0):  ::QQuickAsyncImageProvider(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQuickAsyncImageProvider::~sipQQuickAsyncImageProvider()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::QQuickImageResponse* sipQQuickAsyncImageProvider::requestImageResponse(const  ::QString& a0,const  ::QSize& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QQuickAsyncImageProvider,sipName_requestImageResponse);

    if (!sipMeth)
        return 0;

    extern  ::QQuickImageResponse* sipVH_QtQuick_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&,const  ::QSize&);

    return sipVH_QtQuick_40(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QQmlImageProviderBase::Flags sipQQuickAsyncImageProvider::flags() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_flags);

    if (!sipMeth)
        return  ::QQuickAsyncImageProvider::flags();

    extern  ::QQmlImageProviderBase::Flags sipVH_QtQuick_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_33(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QQmlImageProviderBase::ImageType sipQQuickAsyncImageProvider::imageType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,SIP_NULLPTR,sipName_imageType);

    if (!sipMeth)
        return  ::QQuickAsyncImageProvider::imageType();

    extern  ::QQmlImageProviderBase::ImageType sipVH_QtQuick_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_34(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QImage sipQQuickAsyncImageProvider::requestImage(const  ::QString& a0, ::QSize*a1,const  ::QSize& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_requestImage);

    if (!sipMeth)
        return  ::QQuickAsyncImageProvider::requestImage(a0,a1,a2);

    extern  ::QImage sipVH_QtQuick_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&, ::QSize*,const  ::QSize&);

    return sipVH_QtQuick_35(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QPixmap sipQQuickAsyncImageProvider::requestPixmap(const  ::QString& a0, ::QSize*a1,const  ::QSize& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_requestPixmap);

    if (!sipMeth)
        return  ::QQuickAsyncImageProvider::requestPixmap(a0,a1,a2);

    extern  ::QPixmap sipVH_QtQuick_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&, ::QSize*,const  ::QSize&);

    return sipVH_QtQuick_36(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QQuickTextureFactory* sipQQuickAsyncImageProvider::requestTexture(const  ::QString& a0, ::QSize*a1,const  ::QSize& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_requestTexture);

    if (!sipMeth)
        return  ::QQuickAsyncImageProvider::requestTexture(a0,a1,a2);

    extern  ::QQuickTextureFactory* sipVH_QtQuick_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&, ::QSize*,const  ::QSize&);

    return sipVH_QtQuick_37(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}


PyDoc_STRVAR(doc_QQuickAsyncImageProvider_requestImageResponse, "requestImageResponse(self, str, QSize) -> QQuickImageResponse");

extern "C" {static PyObject *meth_QQuickAsyncImageProvider_requestImageResponse(PyObject *, PyObject *);}
static PyObject *meth_QQuickAsyncImageProvider_requestImageResponse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QSize* a1;
         ::QQuickAsyncImageProvider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9", &sipSelf, sipType_QQuickAsyncImageProvider, &sipCpp, sipType_QString,&a0, &a0State, sipType_QSize, &a1))
        {
             ::QQuickImageResponse*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QQuickAsyncImageProvider, sipName_requestImageResponse);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->requestImageResponse(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QQuickImageResponse,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickAsyncImageProvider, sipName_requestImageResponse, doc_QQuickAsyncImageProvider_requestImageResponse);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QQuickAsyncImageProvider(void *, const sipTypeDef *);}
static void *cast_QQuickAsyncImageProvider(void *sipCppV, const sipTypeDef *targetType)
{
     ::QQuickAsyncImageProvider *sipCpp = reinterpret_cast< ::QQuickAsyncImageProvider *>(sipCppV);

    if (targetType == sipType_QQuickImageProvider)
        return static_cast< ::QQuickImageProvider *>(sipCpp);

    if (targetType == sipType_QQmlImageProviderBase)
        return static_cast< ::QQmlImageProviderBase *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQuickAsyncImageProvider(void *, int);}
static void release_QQuickAsyncImageProvider(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQQuickAsyncImageProvider *>(sipCppV);
    else
        delete reinterpret_cast< ::QQuickAsyncImageProvider *>(sipCppV);
}


extern "C" {static void dealloc_QQuickAsyncImageProvider(sipSimpleWrapper *);}
static void dealloc_QQuickAsyncImageProvider(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQQuickAsyncImageProvider *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQuickAsyncImageProvider(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QQuickAsyncImageProvider(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQuickAsyncImageProvider(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQQuickAsyncImageProvider *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQQuickAsyncImageProvider();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QQuickAsyncImageProvider* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QQuickAsyncImageProvider, &a0))
        {
            sipCpp = new sipQQuickAsyncImageProvider(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QQuickAsyncImageProvider[] = {{5, 255, 1}};


static PyMethodDef methods_QQuickAsyncImageProvider[] = {
    {SIP_MLNAME_CAST(sipName_requestImageResponse), meth_QQuickAsyncImageProvider_requestImageResponse, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickAsyncImageProvider_requestImageResponse)}
};

PyDoc_STRVAR(doc_QQuickAsyncImageProvider, "\1QQuickAsyncImageProvider()\n"
"QQuickAsyncImageProvider(QQuickAsyncImageProvider)");


static pyqt5ClassPluginDef plugin_QQuickAsyncImageProvider = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QQuickAsyncImageProvider = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQuickAsyncImageProvider,
        {SIP_NULLPTR},
        &plugin_QQuickAsyncImageProvider
    },
    {
        sipNameNr_QQuickAsyncImageProvider,
        {0, 0, 1},
        1, methods_QQuickAsyncImageProvider,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QQuickAsyncImageProvider,
    -1,
    -1,
    supers_QQuickAsyncImageProvider,
    SIP_NULLPTR,
    init_type_QQuickAsyncImageProvider,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQuickAsyncImageProvider,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QQuickAsyncImageProvider,
    cast_QQuickAsyncImageProvider,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 62 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickimageprovider.sip"
#include <qquickimageprovider.h>
#line 15958 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 15962 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickimageprovider.sip"
#include <qquickimageprovider.h>
#line 15965 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 15968 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 15971 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 15974 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 15977 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 15980 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 15983 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 15986 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 15989 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 15992 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 15995 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 15998 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 16001 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 16004 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 16007 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 16010 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"


class sipQQuickImageResponse : public  ::QQuickImageResponse
{
public:
    sipQQuickImageResponse();
    virtual ~sipQQuickImageResponse();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void cancel() SIP_OVERRIDE;
     ::QString errorString() const SIP_OVERRIDE;
     ::QQuickTextureFactory* textureFactory() const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQQuickImageResponse(const sipQQuickImageResponse &);
    sipQQuickImageResponse &operator = (const sipQQuickImageResponse &);

    char sipPyMethods[10];
};

sipQQuickImageResponse::sipQQuickImageResponse():  ::QQuickImageResponse(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQuickImageResponse::~sipQQuickImageResponse()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQQuickImageResponse::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtQuick_qt_metaobject(sipPySelf,sipType_QQuickImageResponse);

    return  ::QQuickImageResponse::metaObject();
}

int sipQQuickImageResponse::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QQuickImageResponse::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtQuick_qt_metacall(sipPySelf,sipType_QQuickImageResponse,_c,_id,_a);

    return _id;
}

void *sipQQuickImageResponse::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtQuick_qt_metacast(sipPySelf, sipType_QQuickImageResponse, _clname, &sipCpp) ? sipCpp :  ::QQuickImageResponse::qt_metacast(_clname));
}

void sipQQuickImageResponse::cancel()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_cancel);

    if (!sipMeth)
    {
         ::QQuickImageResponse::cancel();
        return;
    }

    extern void sipVH_QtQuick_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtQuick_6(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QString sipQQuickImageResponse::errorString() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_errorString);

    if (!sipMeth)
        return  ::QQuickImageResponse::errorString();

    extern  ::QString sipVH_QtQuick_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_39(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QQuickTextureFactory* sipQQuickImageResponse::textureFactory() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,sipName_QQuickImageResponse,sipName_textureFactory);

    if (!sipMeth)
        return 0;

    extern  ::QQuickTextureFactory* sipVH_QtQuick_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_38(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQQuickImageResponse::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QQuickImageResponse::event(a0);

    extern bool sipVH_QtQuick_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtQuick_5(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQQuickImageResponse::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QQuickImageResponse::eventFilter(a0,a1);

    extern bool sipVH_QtQuick_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtQuick_4(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQQuickImageResponse::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QQuickImageResponse::timerEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtQuick_3(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickImageResponse::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QQuickImageResponse::childEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtQuick_2(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickImageResponse::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QQuickImageResponse::customEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtQuick_1(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickImageResponse::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QQuickImageResponse::connectNotify(a0);
        return;
    }

    extern void sipVH_QtQuick_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQuick_0(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickImageResponse::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QQuickImageResponse::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtQuick_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQuick_0(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QQuickImageResponse_textureFactory, "textureFactory(self) -> QQuickTextureFactory");

extern "C" {static PyObject *meth_QQuickImageResponse_textureFactory(PyObject *, PyObject *);}
static PyObject *meth_QQuickImageResponse_textureFactory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QQuickImageResponse *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickImageResponse, &sipCpp))
        {
             ::QQuickTextureFactory*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QQuickImageResponse, sipName_textureFactory);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->textureFactory();

            return sipConvertFromNewType(sipRes,sipType_QQuickTextureFactory,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickImageResponse, sipName_textureFactory, doc_QQuickImageResponse_textureFactory);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickImageResponse_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QQuickImageResponse_errorString(PyObject *, PyObject *);}
static PyObject *meth_QQuickImageResponse_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QQuickImageResponse *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickImageResponse, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString((sipSelfWasArg ? sipCpp-> ::QQuickImageResponse::errorString() : sipCpp->errorString()));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickImageResponse, sipName_errorString, doc_QQuickImageResponse_errorString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickImageResponse_cancel, "cancel(self)");

extern "C" {static PyObject *meth_QQuickImageResponse_cancel(PyObject *, PyObject *);}
static PyObject *meth_QQuickImageResponse_cancel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QQuickImageResponse *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickImageResponse, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickImageResponse::cancel() : sipCpp->cancel());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickImageResponse, sipName_cancel, doc_QQuickImageResponse_cancel);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QQuickImageResponse(void *, const sipTypeDef *);}
static void *cast_QQuickImageResponse(void *sipCppV, const sipTypeDef *targetType)
{
     ::QQuickImageResponse *sipCpp = reinterpret_cast< ::QQuickImageResponse *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQuickImageResponse(void *, int);}
static void release_QQuickImageResponse(void *sipCppV, int)
{
     ::QQuickImageResponse *sipCpp = reinterpret_cast< ::QQuickImageResponse *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QQuickImageResponse(sipSimpleWrapper *);}
static void dealloc_QQuickImageResponse(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQQuickImageResponse *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQuickImageResponse(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QQuickImageResponse(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQuickImageResponse(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQQuickImageResponse *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQQuickImageResponse();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QQuickImageResponse[] = {{3, 0, 1}};


static PyMethodDef methods_QQuickImageResponse[] = {
    {SIP_MLNAME_CAST(sipName_cancel), meth_QQuickImageResponse_cancel, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickImageResponse_cancel)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QQuickImageResponse_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickImageResponse_errorString)},
    {SIP_MLNAME_CAST(sipName_textureFactory), meth_QQuickImageResponse_textureFactory, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickImageResponse_textureFactory)}
};

PyDoc_STRVAR(doc_QQuickImageResponse, "\1QQuickImageResponse()");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QQuickImageResponse[] = {
    {"finished()", "\1finished(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QQuickImageResponse = {
    & ::QQuickImageResponse::staticMetaObject,
    0,
    signals_QQuickImageResponse,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QQuickImageResponse = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQuickImageResponse,
        {SIP_NULLPTR},
        &plugin_QQuickImageResponse
    },
    {
        sipNameNr_QQuickImageResponse,
        {0, 0, 1},
        3, methods_QQuickImageResponse,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QQuickImageResponse,
    -1,
    -1,
    supers_QQuickImageResponse,
    SIP_NULLPTR,
    init_type_QQuickImageResponse,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQuickImageResponse,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QQuickImageResponse,
    cast_QQuickImageResponse,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 44 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickimageprovider.sip"
#include <qquickimageprovider.h>
#line 16484 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

#line 26 "sip/QtQml/qqmlengine.sip"
#include <qqmlengine.h>
#line 16488 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtQml/qqmlengine.sip"
#include <qqmlengine.h>
#line 16491 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickimageprovider.sip"
#include <qquickimageprovider.h>
#line 16494 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 16497 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 16500 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 16503 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtGui/qimage.sip"
#include <qimage.h>
#line 16506 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"


class sipQQuickImageProvider : public  ::QQuickImageProvider
{
public:
    sipQQuickImageProvider( ::QQmlImageProviderBase::ImageType, ::QQmlImageProviderBase::Flags);
    sipQQuickImageProvider(const  ::QQuickImageProvider&);
    virtual ~sipQQuickImageProvider();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QQuickTextureFactory* requestTexture(const  ::QString&, ::QSize*,const  ::QSize&) SIP_OVERRIDE;
     ::QPixmap requestPixmap(const  ::QString&, ::QSize*,const  ::QSize&) SIP_OVERRIDE;
     ::QImage requestImage(const  ::QString&, ::QSize*,const  ::QSize&) SIP_OVERRIDE;
     ::QQmlImageProviderBase::ImageType imageType() const SIP_OVERRIDE;
     ::QQmlImageProviderBase::Flags flags() const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQQuickImageProvider(const sipQQuickImageProvider &);
    sipQQuickImageProvider &operator = (const sipQQuickImageProvider &);

    char sipPyMethods[5];
};

sipQQuickImageProvider::sipQQuickImageProvider( ::QQmlImageProviderBase::ImageType a0, ::QQmlImageProviderBase::Flags a1):  ::QQuickImageProvider(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQuickImageProvider::sipQQuickImageProvider(const  ::QQuickImageProvider& a0):  ::QQuickImageProvider(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQuickImageProvider::~sipQQuickImageProvider()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::QQuickTextureFactory* sipQQuickImageProvider::requestTexture(const  ::QString& a0, ::QSize*a1,const  ::QSize& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_requestTexture);

    if (!sipMeth)
        return  ::QQuickImageProvider::requestTexture(a0,a1,a2);

    extern  ::QQuickTextureFactory* sipVH_QtQuick_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&, ::QSize*,const  ::QSize&);

    return sipVH_QtQuick_37(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QPixmap sipQQuickImageProvider::requestPixmap(const  ::QString& a0, ::QSize*a1,const  ::QSize& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_requestPixmap);

    if (!sipMeth)
        return  ::QQuickImageProvider::requestPixmap(a0,a1,a2);

    extern  ::QPixmap sipVH_QtQuick_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&, ::QSize*,const  ::QSize&);

    return sipVH_QtQuick_36(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QImage sipQQuickImageProvider::requestImage(const  ::QString& a0, ::QSize*a1,const  ::QSize& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_requestImage);

    if (!sipMeth)
        return  ::QQuickImageProvider::requestImage(a0,a1,a2);

    extern  ::QImage sipVH_QtQuick_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&, ::QSize*,const  ::QSize&);

    return sipVH_QtQuick_35(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QQmlImageProviderBase::ImageType sipQQuickImageProvider::imageType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,SIP_NULLPTR,sipName_imageType);

    if (!sipMeth)
        return  ::QQuickImageProvider::imageType();

    extern  ::QQmlImageProviderBase::ImageType sipVH_QtQuick_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_34(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QQmlImageProviderBase::Flags sipQQuickImageProvider::flags() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,SIP_NULLPTR,sipName_flags);

    if (!sipMeth)
        return  ::QQuickImageProvider::flags();

    extern  ::QQmlImageProviderBase::Flags sipVH_QtQuick_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_33(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QQuickImageProvider_imageType, "imageType(self) -> QQmlImageProviderBase.ImageType");

extern "C" {static PyObject *meth_QQuickImageProvider_imageType(PyObject *, PyObject *);}
static PyObject *meth_QQuickImageProvider_imageType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QQuickImageProvider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickImageProvider, &sipCpp))
        {
             ::QQmlImageProviderBase::ImageType sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QQuickImageProvider::imageType() : sipCpp->imageType());

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QQmlImageProviderBase_ImageType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickImageProvider, sipName_imageType, doc_QQuickImageProvider_imageType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickImageProvider_flags, "flags(self) -> QQmlImageProviderBase.Flags");

extern "C" {static PyObject *meth_QQuickImageProvider_flags(PyObject *, PyObject *);}
static PyObject *meth_QQuickImageProvider_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QQuickImageProvider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickImageProvider, &sipCpp))
        {
             ::QQmlImageProviderBase::Flags*sipRes;

            sipRes = new  ::QQmlImageProviderBase::Flags((sipSelfWasArg ? sipCpp-> ::QQuickImageProvider::flags() : sipCpp->flags()));

            return sipConvertFromNewType(sipRes,sipType_QQmlImageProviderBase_Flags,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickImageProvider, sipName_flags, doc_QQuickImageProvider_flags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickImageProvider_requestImage, "requestImage(self, str, QSize) -> Tuple[QImage, QSize]");

extern "C" {static PyObject *meth_QQuickImageProvider_requestImage(PyObject *, PyObject *);}
static PyObject *meth_QQuickImageProvider_requestImage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSize* a1;
        const  ::QSize* a2;
         ::QQuickImageProvider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9", &sipSelf, sipType_QQuickImageProvider, &sipCpp, sipType_QString,&a0, &a0State, sipType_QSize, &a2))
        {
             ::QImage*sipRes;
            a1 = new  ::QSize();

            sipRes = new  ::QImage((sipSelfWasArg ? sipCpp-> ::QQuickImageProvider::requestImage(*a0,a1,*a2) : sipCpp->requestImage(*a0,a1,*a2)));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            PyObject *sipResObj = sipConvertFromNewType(sipRes,sipType_QImage,SIP_NULLPTR);
            return sipBuildResult(0,"(RN)",sipResObj,a1,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickImageProvider, sipName_requestImage, doc_QQuickImageProvider_requestImage);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickImageProvider_requestPixmap, "requestPixmap(self, str, QSize) -> Tuple[QPixmap, QSize]");

extern "C" {static PyObject *meth_QQuickImageProvider_requestPixmap(PyObject *, PyObject *);}
static PyObject *meth_QQuickImageProvider_requestPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSize* a1;
        const  ::QSize* a2;
         ::QQuickImageProvider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9", &sipSelf, sipType_QQuickImageProvider, &sipCpp, sipType_QString,&a0, &a0State, sipType_QSize, &a2))
        {
             ::QPixmap*sipRes;
            a1 = new  ::QSize();

            sipRes = new  ::QPixmap((sipSelfWasArg ? sipCpp-> ::QQuickImageProvider::requestPixmap(*a0,a1,*a2) : sipCpp->requestPixmap(*a0,a1,*a2)));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            PyObject *sipResObj = sipConvertFromNewType(sipRes,sipType_QPixmap,SIP_NULLPTR);
            return sipBuildResult(0,"(RN)",sipResObj,a1,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickImageProvider, sipName_requestPixmap, doc_QQuickImageProvider_requestPixmap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickImageProvider_requestTexture, "requestTexture(self, str, QSize) -> Tuple[QQuickTextureFactory, QSize]");

extern "C" {static PyObject *meth_QQuickImageProvider_requestTexture(PyObject *, PyObject *);}
static PyObject *meth_QQuickImageProvider_requestTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSize* a1;
        const  ::QSize* a2;
         ::QQuickImageProvider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9", &sipSelf, sipType_QQuickImageProvider, &sipCpp, sipType_QString,&a0, &a0State, sipType_QSize, &a2))
        {
             ::QQuickTextureFactory*sipRes;
            a1 = new  ::QSize();

            sipRes = (sipSelfWasArg ? sipCpp-> ::QQuickImageProvider::requestTexture(*a0,a1,*a2) : sipCpp->requestTexture(*a0,a1,*a2));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            PyObject *sipResObj = sipConvertFromNewType(sipRes,sipType_QQuickTextureFactory,SIP_NULLPTR);
            return sipBuildResult(0,"(RN)",sipResObj,a1,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickImageProvider, sipName_requestTexture, doc_QQuickImageProvider_requestTexture);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QQuickImageProvider(void *, const sipTypeDef *);}
static void *cast_QQuickImageProvider(void *sipCppV, const sipTypeDef *targetType)
{
     ::QQuickImageProvider *sipCpp = reinterpret_cast< ::QQuickImageProvider *>(sipCppV);

    if (targetType == sipType_QQmlImageProviderBase)
        return static_cast< ::QQmlImageProviderBase *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQuickImageProvider(void *, int);}
static void release_QQuickImageProvider(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQQuickImageProvider *>(sipCppV);
    else
        delete reinterpret_cast< ::QQuickImageProvider *>(sipCppV);
}


extern "C" {static void dealloc_QQuickImageProvider(sipSimpleWrapper *);}
static void dealloc_QQuickImageProvider(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQQuickImageProvider *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQuickImageProvider(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QQuickImageProvider(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQuickImageProvider(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQQuickImageProvider *sipCpp = SIP_NULLPTR;

    {
         ::QQmlImageProviderBase::ImageType a0;
         ::QQmlImageProviderBase::Flags a1def = QQmlImageProviderBase::Flags();
         ::QQmlImageProviderBase::Flags* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "E|J1", sipType_QQmlImageProviderBase_ImageType, &a0, sipType_QQmlImageProviderBase_Flags, &a1, &a1State))
        {
            sipCpp = new sipQQuickImageProvider(a0,*a1);
            sipReleaseType(a1,sipType_QQmlImageProviderBase_Flags,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QQuickImageProvider* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QQuickImageProvider, &a0))
        {
            sipCpp = new sipQQuickImageProvider(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QQuickImageProvider[] = {{3, 2, 1}};


static PyMethodDef methods_QQuickImageProvider[] = {
    {SIP_MLNAME_CAST(sipName_flags), meth_QQuickImageProvider_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickImageProvider_flags)},
    {SIP_MLNAME_CAST(sipName_imageType), meth_QQuickImageProvider_imageType, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickImageProvider_imageType)},
    {SIP_MLNAME_CAST(sipName_requestImage), meth_QQuickImageProvider_requestImage, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickImageProvider_requestImage)},
    {SIP_MLNAME_CAST(sipName_requestPixmap), meth_QQuickImageProvider_requestPixmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickImageProvider_requestPixmap)},
    {SIP_MLNAME_CAST(sipName_requestTexture), meth_QQuickImageProvider_requestTexture, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickImageProvider_requestTexture)}
};

PyDoc_STRVAR(doc_QQuickImageProvider, "\1QQuickImageProvider(QQmlImageProviderBase.ImageType, flags: Union[QQmlImageProviderBase.Flags, QQmlImageProviderBase.Flag] = QQmlImageProviderBase.Flags())\n"
"QQuickImageProvider(QQuickImageProvider)");


static pyqt5ClassPluginDef plugin_QQuickImageProvider = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QQuickImageProvider = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQuickImageProvider,
        {SIP_NULLPTR},
        &plugin_QQuickImageProvider
    },
    {
        sipNameNr_QQuickImageProvider,
        {0, 0, 1},
        5, methods_QQuickImageProvider,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QQuickImageProvider,
    -1,
    -1,
    supers_QQuickImageProvider,
    SIP_NULLPTR,
    init_type_QQuickImageProvider,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQuickImageProvider,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QQuickImageProvider,
    cast_QQuickImageProvider,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickimageprovider.sip"
#include <qquickimageprovider.h>
#line 16952 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

#line 26 "sip/QtGui/qimage.sip"
#include <qimage.h>
#line 16956 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 16959 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgtexture.sip"
#include <qsgtexture.h>
#line 16962 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickwindow.sip"
#include <qquickwindow.h>
#line 16965 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 16968 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 16971 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 16974 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 16977 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 16980 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 16983 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 16986 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 16989 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 16992 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 16995 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 16998 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 17001 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 17004 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 17007 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 17010 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 17013 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"


class sipQQuickTextureFactory : public  ::QQuickTextureFactory
{
public:
    sipQQuickTextureFactory();
    virtual ~sipQQuickTextureFactory();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QImage image() const SIP_OVERRIDE;
    int textureByteCount() const SIP_OVERRIDE;
     ::QSize textureSize() const SIP_OVERRIDE;
     ::QSGTexture* createTexture( ::QQuickWindow*) const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQQuickTextureFactory(const sipQQuickTextureFactory &);
    sipQQuickTextureFactory &operator = (const sipQQuickTextureFactory &);

    char sipPyMethods[11];
};

sipQQuickTextureFactory::sipQQuickTextureFactory():  ::QQuickTextureFactory(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQuickTextureFactory::~sipQQuickTextureFactory()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQQuickTextureFactory::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtQuick_qt_metaobject(sipPySelf,sipType_QQuickTextureFactory);

    return  ::QQuickTextureFactory::metaObject();
}

int sipQQuickTextureFactory::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QQuickTextureFactory::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtQuick_qt_metacall(sipPySelf,sipType_QQuickTextureFactory,_c,_id,_a);

    return _id;
}

void *sipQQuickTextureFactory::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtQuick_qt_metacast(sipPySelf, sipType_QQuickTextureFactory, _clname, &sipCpp) ? sipCpp :  ::QQuickTextureFactory::qt_metacast(_clname));
}

 ::QImage sipQQuickTextureFactory::image() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_image);

    if (!sipMeth)
        return  ::QQuickTextureFactory::image();

    extern  ::QImage sipVH_QtQuick_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_32(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQQuickTextureFactory::textureByteCount() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,sipName_QQuickTextureFactory,sipName_textureByteCount);

    if (!sipMeth)
        return 0;

    extern int sipVH_QtQuick_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_31(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQQuickTextureFactory::textureSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,sipName_QQuickTextureFactory,sipName_textureSize);

    if (!sipMeth)
        return  ::QSize();

    extern  ::QSize sipVH_QtQuick_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_30(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSGTexture* sipQQuickTextureFactory::createTexture( ::QQuickWindow*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,sipName_QQuickTextureFactory,sipName_createTexture);

    if (!sipMeth)
        return 0;

    extern  ::QSGTexture* sipVH_QtQuick_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QQuickWindow*);

    return sipVH_QtQuick_29(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQQuickTextureFactory::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QQuickTextureFactory::event(a0);

    extern bool sipVH_QtQuick_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtQuick_5(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQQuickTextureFactory::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QQuickTextureFactory::eventFilter(a0,a1);

    extern bool sipVH_QtQuick_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtQuick_4(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQQuickTextureFactory::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QQuickTextureFactory::timerEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtQuick_3(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickTextureFactory::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QQuickTextureFactory::childEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtQuick_2(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickTextureFactory::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QQuickTextureFactory::customEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtQuick_1(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickTextureFactory::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QQuickTextureFactory::connectNotify(a0);
        return;
    }

    extern void sipVH_QtQuick_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQuick_0(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickTextureFactory::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QQuickTextureFactory::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtQuick_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQuick_0(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QQuickTextureFactory_createTexture, "createTexture(self, QQuickWindow) -> QSGTexture");

extern "C" {static PyObject *meth_QQuickTextureFactory_createTexture(PyObject *, PyObject *);}
static PyObject *meth_QQuickTextureFactory_createTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QQuickWindow* a0;
        const  ::QQuickTextureFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QQuickTextureFactory, &sipCpp, sipType_QQuickWindow, &a0))
        {
             ::QSGTexture*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QQuickTextureFactory, sipName_createTexture);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->createTexture(a0);

            return sipConvertFromNewType(sipRes,sipType_QSGTexture,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickTextureFactory, sipName_createTexture, doc_QQuickTextureFactory_createTexture);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickTextureFactory_textureSize, "textureSize(self) -> QSize");

extern "C" {static PyObject *meth_QQuickTextureFactory_textureSize(PyObject *, PyObject *);}
static PyObject *meth_QQuickTextureFactory_textureSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QQuickTextureFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickTextureFactory, &sipCpp))
        {
             ::QSize*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QQuickTextureFactory, sipName_textureSize);
                return SIP_NULLPTR;
            }

            sipRes = new  ::QSize(sipCpp->textureSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickTextureFactory, sipName_textureSize, doc_QQuickTextureFactory_textureSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickTextureFactory_textureByteCount, "textureByteCount(self) -> int");

extern "C" {static PyObject *meth_QQuickTextureFactory_textureByteCount(PyObject *, PyObject *);}
static PyObject *meth_QQuickTextureFactory_textureByteCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QQuickTextureFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickTextureFactory, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QQuickTextureFactory, sipName_textureByteCount);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->textureByteCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickTextureFactory, sipName_textureByteCount, doc_QQuickTextureFactory_textureByteCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickTextureFactory_image, "image(self) -> QImage");

extern "C" {static PyObject *meth_QQuickTextureFactory_image(PyObject *, PyObject *);}
static PyObject *meth_QQuickTextureFactory_image(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QQuickTextureFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickTextureFactory, &sipCpp))
        {
             ::QImage*sipRes;

            sipRes = new  ::QImage((sipSelfWasArg ? sipCpp-> ::QQuickTextureFactory::image() : sipCpp->image()));

            return sipConvertFromNewType(sipRes,sipType_QImage,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickTextureFactory, sipName_image, doc_QQuickTextureFactory_image);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickTextureFactory_textureFactoryForImage, "textureFactoryForImage(QImage) -> QQuickTextureFactory");

extern "C" {static PyObject *meth_QQuickTextureFactory_textureFactoryForImage(PyObject *, PyObject *);}
static PyObject *meth_QQuickTextureFactory_textureFactoryForImage(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QImage* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QImage, &a0))
        {
             ::QQuickTextureFactory*sipRes;

            sipRes =  ::QQuickTextureFactory::textureFactoryForImage(*a0);

            return sipConvertFromNewType(sipRes,sipType_QQuickTextureFactory,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickTextureFactory, sipName_textureFactoryForImage, doc_QQuickTextureFactory_textureFactoryForImage);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QQuickTextureFactory(void *, const sipTypeDef *);}
static void *cast_QQuickTextureFactory(void *sipCppV, const sipTypeDef *targetType)
{
     ::QQuickTextureFactory *sipCpp = reinterpret_cast< ::QQuickTextureFactory *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQuickTextureFactory(void *, int);}
static void release_QQuickTextureFactory(void *sipCppV, int)
{
     ::QQuickTextureFactory *sipCpp = reinterpret_cast< ::QQuickTextureFactory *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QQuickTextureFactory(sipSimpleWrapper *);}
static void dealloc_QQuickTextureFactory(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQQuickTextureFactory *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQuickTextureFactory(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QQuickTextureFactory(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQuickTextureFactory(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQQuickTextureFactory *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQQuickTextureFactory();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QQuickTextureFactory[] = {{3, 0, 1}};


static PyMethodDef methods_QQuickTextureFactory[] = {
    {SIP_MLNAME_CAST(sipName_createTexture), meth_QQuickTextureFactory_createTexture, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickTextureFactory_createTexture)},
    {SIP_MLNAME_CAST(sipName_image), meth_QQuickTextureFactory_image, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickTextureFactory_image)},
    {SIP_MLNAME_CAST(sipName_textureByteCount), meth_QQuickTextureFactory_textureByteCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickTextureFactory_textureByteCount)},
    {SIP_MLNAME_CAST(sipName_textureFactoryForImage), meth_QQuickTextureFactory_textureFactoryForImage, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickTextureFactory_textureFactoryForImage)},
    {SIP_MLNAME_CAST(sipName_textureSize), meth_QQuickTextureFactory_textureSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickTextureFactory_textureSize)}
};

PyDoc_STRVAR(doc_QQuickTextureFactory, "\1QQuickTextureFactory()");


static pyqt5ClassPluginDef plugin_QQuickTextureFactory = {
    & ::QQuickTextureFactory::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QQuickTextureFactory = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQuickTextureFactory,
        {SIP_NULLPTR},
        &plugin_QQuickTextureFactory
    },
    {
        sipNameNr_QQuickTextureFactory,
        {0, 0, 1},
        5, methods_QQuickTextureFactory,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QQuickTextureFactory,
    -1,
    -1,
    supers_QQuickTextureFactory,
    SIP_NULLPTR,
    init_type_QQuickTextureFactory,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQuickTextureFactory,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QQuickTextureFactory,
    cast_QQuickTextureFactory,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickframebufferobject.sip"
#include <qquickframebufferobject.h>
#line 35 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickframebufferobject.sip"
#include <qquickframebufferobject.h>
#line 17568 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

#line 28 "sip/QtGui/qopenglframebufferobject.sip"
#include <qopenglframebufferobject.h>
#line 17572 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickframebufferobject.sip"
#include <qquickframebufferobject.h>
#line 17575 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 17578 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"


class sipQQuickFramebufferObject_Renderer : public  ::QQuickFramebufferObject::Renderer
{
public:
    sipQQuickFramebufferObject_Renderer();
    sipQQuickFramebufferObject_Renderer(const  ::QQuickFramebufferObject::Renderer&);
    virtual ~sipQQuickFramebufferObject_Renderer();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void synchronize( ::QQuickFramebufferObject*) SIP_OVERRIDE;
     ::QOpenGLFramebufferObject* createFramebufferObject(const  ::QSize&) SIP_OVERRIDE;
    void render() SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQQuickFramebufferObject_Renderer(const sipQQuickFramebufferObject_Renderer &);
    sipQQuickFramebufferObject_Renderer &operator = (const sipQQuickFramebufferObject_Renderer &);

    char sipPyMethods[3];
};

sipQQuickFramebufferObject_Renderer::sipQQuickFramebufferObject_Renderer():  ::QQuickFramebufferObject::Renderer(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQuickFramebufferObject_Renderer::sipQQuickFramebufferObject_Renderer(const  ::QQuickFramebufferObject::Renderer& a0):  ::QQuickFramebufferObject::Renderer(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQuickFramebufferObject_Renderer::~sipQQuickFramebufferObject_Renderer()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

void sipQQuickFramebufferObject_Renderer::synchronize( ::QQuickFramebufferObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_synchronize);

    if (!sipMeth)
    {
         ::QQuickFramebufferObject::Renderer::synchronize(a0);
        return;
    }

    extern void sipVH_QtQuick_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QQuickFramebufferObject*);

    sipVH_QtQuick_28(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QOpenGLFramebufferObject* sipQQuickFramebufferObject_Renderer::createFramebufferObject(const  ::QSize& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_createFramebufferObject);

    if (!sipMeth)
        return  ::QQuickFramebufferObject::Renderer::createFramebufferObject(a0);

    extern  ::QOpenGLFramebufferObject* sipVH_QtQuick_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QSize&);

    return sipVH_QtQuick_27(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject_Renderer::render()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,sipName_Renderer,sipName_render);

    if (!sipMeth)
        return;

    extern void sipVH_QtQuick_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtQuick_6(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_Renderer_render, "render(self)");

extern "C" {static PyObject *meth_QQuickFramebufferObject_Renderer_render(PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_Renderer_render(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QQuickFramebufferObject::Renderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QQuickFramebufferObject_Renderer, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_Renderer, sipName_render);
                return SIP_NULLPTR;
            }

            sipCpp->render();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Renderer, sipName_render, doc_QQuickFramebufferObject_Renderer_render);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_Renderer_createFramebufferObject, "createFramebufferObject(self, QSize) -> QOpenGLFramebufferObject");

extern "C" {static PyObject *meth_QQuickFramebufferObject_Renderer_createFramebufferObject(PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_Renderer_createFramebufferObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSize* a0;
         ::QQuickFramebufferObject::Renderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QQuickFramebufferObject_Renderer, &sipCpp, sipType_QSize, &a0))
        {
             ::QOpenGLFramebufferObject*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QQuickFramebufferObject::Renderer::createFramebufferObject(*a0) : sipCpp->createFramebufferObject(*a0));

            return sipConvertFromType(sipRes,sipType_QOpenGLFramebufferObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Renderer, sipName_createFramebufferObject, doc_QQuickFramebufferObject_Renderer_createFramebufferObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_Renderer_synchronize, "synchronize(self, QQuickFramebufferObject)");

extern "C" {static PyObject *meth_QQuickFramebufferObject_Renderer_synchronize(PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_Renderer_synchronize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QQuickFramebufferObject* a0;
         ::QQuickFramebufferObject::Renderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickFramebufferObject_Renderer, &sipCpp, sipType_QQuickFramebufferObject, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickFramebufferObject::Renderer::synchronize(a0) : sipCpp->synchronize(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Renderer, sipName_synchronize, doc_QQuickFramebufferObject_Renderer_synchronize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_Renderer_framebufferObject, "framebufferObject(self) -> QOpenGLFramebufferObject");

extern "C" {static PyObject *meth_QQuickFramebufferObject_Renderer_framebufferObject(PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_Renderer_framebufferObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickFramebufferObject::Renderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QQuickFramebufferObject_Renderer, &sipCpp))
        {
             ::QOpenGLFramebufferObject*sipRes;

            sipRes = sipCpp->framebufferObject();

            return sipConvertFromType(sipRes,sipType_QOpenGLFramebufferObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Renderer, sipName_framebufferObject, doc_QQuickFramebufferObject_Renderer_framebufferObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_Renderer_update, "update(self)");

extern "C" {static PyObject *meth_QQuickFramebufferObject_Renderer_update(PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_Renderer_update(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickFramebufferObject::Renderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QQuickFramebufferObject_Renderer, &sipCpp))
        {
            sipCpp->update();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Renderer, sipName_update, doc_QQuickFramebufferObject_Renderer_update);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_Renderer_invalidateFramebufferObject, "invalidateFramebufferObject(self)");

extern "C" {static PyObject *meth_QQuickFramebufferObject_Renderer_invalidateFramebufferObject(PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_Renderer_invalidateFramebufferObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickFramebufferObject::Renderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QQuickFramebufferObject_Renderer, &sipCpp))
        {
            sipCpp->invalidateFramebufferObject();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Renderer, sipName_invalidateFramebufferObject, doc_QQuickFramebufferObject_Renderer_invalidateFramebufferObject);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQuickFramebufferObject_Renderer(void *, int);}
static void release_QQuickFramebufferObject_Renderer(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQQuickFramebufferObject_Renderer *>(sipCppV);
}


extern "C" {static void dealloc_QQuickFramebufferObject_Renderer(sipSimpleWrapper *);}
static void dealloc_QQuickFramebufferObject_Renderer(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQQuickFramebufferObject_Renderer *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQuickFramebufferObject_Renderer(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QQuickFramebufferObject_Renderer(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQuickFramebufferObject_Renderer(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQQuickFramebufferObject_Renderer *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQQuickFramebufferObject_Renderer();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QQuickFramebufferObject::Renderer* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QQuickFramebufferObject_Renderer, &a0))
        {
            sipCpp = new sipQQuickFramebufferObject_Renderer(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QQuickFramebufferObject_Renderer[] = {
    {SIP_MLNAME_CAST(sipName_createFramebufferObject), meth_QQuickFramebufferObject_Renderer_createFramebufferObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickFramebufferObject_Renderer_createFramebufferObject)},
    {SIP_MLNAME_CAST(sipName_framebufferObject), meth_QQuickFramebufferObject_Renderer_framebufferObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickFramebufferObject_Renderer_framebufferObject)},
    {SIP_MLNAME_CAST(sipName_invalidateFramebufferObject), meth_QQuickFramebufferObject_Renderer_invalidateFramebufferObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickFramebufferObject_Renderer_invalidateFramebufferObject)},
    {SIP_MLNAME_CAST(sipName_render), meth_QQuickFramebufferObject_Renderer_render, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickFramebufferObject_Renderer_render)},
    {SIP_MLNAME_CAST(sipName_synchronize), meth_QQuickFramebufferObject_Renderer_synchronize, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickFramebufferObject_Renderer_synchronize)},
    {SIP_MLNAME_CAST(sipName_update), meth_QQuickFramebufferObject_Renderer_update, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickFramebufferObject_Renderer_update)}
};

PyDoc_STRVAR(doc_QQuickFramebufferObject_Renderer, "\1QQuickFramebufferObject.Renderer()\n"
"QQuickFramebufferObject.Renderer(QQuickFramebufferObject.Renderer)");


static pyqt5ClassPluginDef plugin_QQuickFramebufferObject_Renderer = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QQuickFramebufferObject_Renderer = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQuickFramebufferObject__Renderer,
        {SIP_NULLPTR},
        &plugin_QQuickFramebufferObject_Renderer
    },
    {
        sipNameNr_Renderer,
        {3, 255, 0},
        6, methods_QQuickFramebufferObject_Renderer,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QQuickFramebufferObject_Renderer,
    -1,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QQuickFramebufferObject_Renderer,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQuickFramebufferObject_Renderer,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QQuickFramebufferObject_Renderer,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickframebufferobject.sip"
#include <qquickframebufferobject.h>
#line 17975 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 17979 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgtextureprovider.sip"
#include <qsgtextureprovider.h>
#line 17982 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 17985 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 185 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 17990 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 17993 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickframebufferobject.sip"
#include <qquickframebufferobject.h>
#line 35 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickframebufferobject.sip"
#include <qquickframebufferobject.h>
#line 17998 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 18001 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 97 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 18004 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 18007 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitemgrabresult.sip"
#include <qquickitemgrabresult.h>
#line 18010 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 18013 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickwindow.sip"
#include <qquickwindow.h>
#line 18016 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 18019 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 561 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 18022 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 610 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 18025 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 583 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 18028 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 599 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 18031 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 238 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 18034 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 717 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 18037 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 253 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 18040 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 205 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 18043 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 375 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 18046 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 500 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 18049 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 18052 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 18055 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 65 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 18060 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 18063 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 18066 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 328 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 18069 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 18072 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 18075 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 18078 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 18081 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 18084 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 18087 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 18090 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 18093 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 18096 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 18099 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 18102 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 18105 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 18108 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 18111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 18114 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 18117 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

sipQQuickFramebufferObject::sipQQuickFramebufferObject( ::QQuickItem*a0):  ::QQuickFramebufferObject(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQuickFramebufferObject::~sipQQuickFramebufferObject()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQQuickFramebufferObject::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtQuick_qt_metaobject(sipPySelf,sipType_QQuickFramebufferObject);

    return  ::QQuickFramebufferObject::metaObject();
}

int sipQQuickFramebufferObject::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QQuickFramebufferObject::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtQuick_qt_metacall(sipPySelf,sipType_QQuickFramebufferObject,_c,_id,_a);

    return _id;
}

void *sipQQuickFramebufferObject::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtQuick_qt_metacast(sipPySelf, sipType_QQuickFramebufferObject, _clname, &sipCpp) ? sipCpp :  ::QQuickFramebufferObject::qt_metacast(_clname));
}

 ::QQuickFramebufferObject::Renderer* sipQQuickFramebufferObject::createRenderer() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,sipName_QQuickFramebufferObject,sipName_createRenderer);

    if (!sipMeth)
        return 0;

    extern  ::QQuickFramebufferObject::Renderer* sipVH_QtQuick_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_26(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQQuickFramebufferObject::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QQuickFramebufferObject::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtQuick_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQuick_0(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QQuickFramebufferObject::connectNotify(a0);
        return;
    }

    extern void sipVH_QtQuick_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQuick_0(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QQuickFramebufferObject::customEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtQuick_1(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QQuickFramebufferObject::childEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtQuick_2(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QQuickFramebufferObject::timerEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtQuick_3(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQQuickFramebufferObject::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QQuickFramebufferObject::eventFilter(a0,a1);

    extern bool sipVH_QtQuick_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtQuick_4(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQQuickFramebufferObject::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QQuickFramebufferObject::event(a0);

    extern bool sipVH_QtQuick_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtQuick_5(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::componentComplete()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_componentComplete);

    if (!sipMeth)
    {
         ::QQuickFramebufferObject::componentComplete();
        return;
    }

    extern void sipVH_QtQuick_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtQuick_6(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQQuickFramebufferObject::classBegin()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_classBegin);

    if (!sipMeth)
    {
         ::QQuickFramebufferObject::classBegin();
        return;
    }

    extern void sipVH_QtQuick_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtQuick_6(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQQuickFramebufferObject::contains(const  ::QPointF& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,SIP_NULLPTR,sipName_contains);

    if (!sipMeth)
        return  ::QQuickFramebufferObject::contains(a0);

    extern bool sipVH_QtQuick_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QPointF&);

    return sipVH_QtQuick_7(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQQuickFramebufferObject::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,SIP_NULLPTR,sipName_inputMethodQuery);

    if (!sipMeth)
        return  ::QQuickFramebufferObject::inputMethodQuery(a0);

    extern  ::QVariant sipVH_QtQuick_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_QtQuick_8(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQQuickFramebufferObject::isTextureProvider() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,SIP_NULLPTR,sipName_isTextureProvider);

    if (!sipMeth)
        return  ::QQuickFramebufferObject::isTextureProvider();

    extern bool sipVH_QtQuick_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_9(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSGTextureProvider* sipQQuickFramebufferObject::textureProvider() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,SIP_NULLPTR,sipName_textureProvider);

    if (!sipMeth)
        return  ::QQuickFramebufferObject::textureProvider();

    extern  ::QSGTextureProvider* sipVH_QtQuick_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_10(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQQuickFramebufferObject::itemChange( ::QQuickItem::ItemChange a0,const  ::QQuickItem::ItemChangeData& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_itemChange);

    if (!sipMeth)
    {
         ::QQuickFramebufferObject::itemChange(a0,a1);
        return;
    }

    extern void sipVH_QtQuick_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QQuickItem::ItemChange,const  ::QQuickItem::ItemChangeData&);

    sipVH_QtQuick_11(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQQuickFramebufferObject::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,SIP_NULLPTR,sipName_keyPressEvent);

    if (!sipMeth)
    {
         ::QQuickFramebufferObject::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtQuick_12(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,SIP_NULLPTR,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
         ::QQuickFramebufferObject::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtQuick_12(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,SIP_NULLPTR,sipName_inputMethodEvent);

    if (!sipMeth)
    {
         ::QQuickFramebufferObject::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_QtQuick_13(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,SIP_NULLPTR,sipName_focusInEvent);

    if (!sipMeth)
    {
         ::QQuickFramebufferObject::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtQuick_14(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,SIP_NULLPTR,sipName_focusOutEvent);

    if (!sipMeth)
    {
         ::QQuickFramebufferObject::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtQuick_14(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_mousePressEvent);

    if (!sipMeth)
    {
         ::QQuickFramebufferObject::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtQuick_15(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,SIP_NULLPTR,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
         ::QQuickFramebufferObject::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtQuick_15(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,SIP_NULLPTR,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
         ::QQuickFramebufferObject::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtQuick_15(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,SIP_NULLPTR,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
         ::QQuickFramebufferObject::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtQuick_15(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::mouseUngrabEvent()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,SIP_NULLPTR,sipName_mouseUngrabEvent);

    if (!sipMeth)
    {
         ::QQuickFramebufferObject::mouseUngrabEvent();
        return;
    }

    extern void sipVH_QtQuick_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtQuick_6(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQQuickFramebufferObject::touchUngrabEvent()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,SIP_NULLPTR,sipName_touchUngrabEvent);

    if (!sipMeth)
    {
         ::QQuickFramebufferObject::touchUngrabEvent();
        return;
    }

    extern void sipVH_QtQuick_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtQuick_6(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQQuickFramebufferObject::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,SIP_NULLPTR,sipName_wheelEvent);

    if (!sipMeth)
    {
         ::QQuickFramebufferObject::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtQuick_16(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::touchEvent( ::QTouchEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,SIP_NULLPTR,sipName_touchEvent);

    if (!sipMeth)
    {
         ::QQuickFramebufferObject::touchEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTouchEvent*);

    sipVH_QtQuick_17(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::hoverEnterEvent( ::QHoverEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,SIP_NULLPTR,sipName_hoverEnterEvent);

    if (!sipMeth)
    {
         ::QQuickFramebufferObject::hoverEnterEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHoverEvent*);

    sipVH_QtQuick_18(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::hoverMoveEvent( ::QHoverEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,SIP_NULLPTR,sipName_hoverMoveEvent);

    if (!sipMeth)
    {
         ::QQuickFramebufferObject::hoverMoveEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHoverEvent*);

    sipVH_QtQuick_18(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::hoverLeaveEvent( ::QHoverEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,SIP_NULLPTR,sipName_hoverLeaveEvent);

    if (!sipMeth)
    {
         ::QQuickFramebufferObject::hoverLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHoverEvent*);

    sipVH_QtQuick_18(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::dragEnterEvent( ::QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,SIP_NULLPTR,sipName_dragEnterEvent);

    if (!sipMeth)
    {
         ::QQuickFramebufferObject::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragEnterEvent*);

    sipVH_QtQuick_19(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::dragMoveEvent( ::QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,SIP_NULLPTR,sipName_dragMoveEvent);

    if (!sipMeth)
    {
         ::QQuickFramebufferObject::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragMoveEvent*);

    sipVH_QtQuick_20(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::dragLeaveEvent( ::QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,SIP_NULLPTR,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
         ::QQuickFramebufferObject::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragLeaveEvent*);

    sipVH_QtQuick_21(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::dropEvent( ::QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,SIP_NULLPTR,sipName_dropEvent);

    if (!sipMeth)
    {
         ::QQuickFramebufferObject::dropEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDropEvent*);

    sipVH_QtQuick_22(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQQuickFramebufferObject::childMouseEventFilter( ::QQuickItem*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,SIP_NULLPTR,sipName_childMouseEventFilter);

    if (!sipMeth)
        return  ::QQuickFramebufferObject::childMouseEventFilter(a0,a1);

    extern bool sipVH_QtQuick_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QQuickItem*, ::QEvent*);

    return sipVH_QtQuick_23(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQQuickFramebufferObject::geometryChanged(const  ::QRectF& a0,const  ::QRectF& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,SIP_NULLPTR,sipName_geometryChanged);

    if (!sipMeth)
    {
         ::QQuickFramebufferObject::geometryChanged(a0,a1);
        return;
    }

    extern void sipVH_QtQuick_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QRectF&,const  ::QRectF&);

    sipVH_QtQuick_24(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QSGNode* sipQQuickFramebufferObject::updatePaintNode( ::QSGNode*a0, ::QQuickItem::UpdatePaintNodeData*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,SIP_NULLPTR,sipName_updatePaintNode);

    if (!sipMeth)
        return  ::QQuickFramebufferObject::updatePaintNode(a0,a1);

    extern  ::QSGNode* sipVH_QtQuick_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QSGNode*, ::QQuickItem::UpdatePaintNodeData*);

    return sipVH_QtQuick_25(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQQuickFramebufferObject::releaseResources()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,SIP_NULLPTR,sipName_releaseResources);

    if (!sipMeth)
    {
         ::QQuickFramebufferObject::releaseResources();
        return;
    }

    extern void sipVH_QtQuick_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtQuick_6(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQQuickFramebufferObject::updatePolish()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,SIP_NULLPTR,sipName_updatePolish);

    if (!sipMeth)
    {
         ::QQuickFramebufferObject::updatePolish();
        return;
    }

    extern void sipVH_QtQuick_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtQuick_6(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_textureFollowsItemSize, "textureFollowsItemSize(self) -> bool");

extern "C" {static PyObject *meth_QQuickFramebufferObject_textureFollowsItemSize(PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_textureFollowsItemSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickFramebufferObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->textureFollowsItemSize();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_textureFollowsItemSize, doc_QQuickFramebufferObject_textureFollowsItemSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_setTextureFollowsItemSize, "setTextureFollowsItemSize(self, bool)");

extern "C" {static PyObject *meth_QQuickFramebufferObject_setTextureFollowsItemSize(PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_setTextureFollowsItemSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QQuickFramebufferObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp, &a0))
        {
            sipCpp->setTextureFollowsItemSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_setTextureFollowsItemSize, doc_QQuickFramebufferObject_setTextureFollowsItemSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_createRenderer, "createRenderer(self) -> QQuickFramebufferObject.Renderer");

extern "C" {static PyObject *meth_QQuickFramebufferObject_createRenderer(PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_createRenderer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QQuickFramebufferObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp))
        {
             ::QQuickFramebufferObject::Renderer*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QQuickFramebufferObject, sipName_createRenderer);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->createRenderer();

            return sipConvertFromNewType(sipRes,sipType_QQuickFramebufferObject_Renderer,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_createRenderer, doc_QQuickFramebufferObject_createRenderer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_geometryChanged, "geometryChanged(self, QRectF, QRectF)");

extern "C" {static PyObject *meth_QQuickFramebufferObject_geometryChanged(PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_geometryChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QRectF* a0;
        const  ::QRectF* a1;
         ::QQuickFramebufferObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J9", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp, sipType_QRectF, &a0, sipType_QRectF, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickFramebufferObject::geometryChanged(*a0,*a1) : sipCpp->geometryChanged(*a0,*a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_geometryChanged, doc_QQuickFramebufferObject_geometryChanged);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_updatePaintNode, "updatePaintNode(self, QSGNode, QQuickItem.UpdatePaintNodeData) -> QSGNode");

extern "C" {static PyObject *meth_QQuickFramebufferObject_updatePaintNode(PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_updatePaintNode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QSGNode* a0;
         ::QQuickItem::UpdatePaintNodeData* a1;
         ::QQuickFramebufferObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J8", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp, sipType_QSGNode, &a0, sipType_QQuickItem_UpdatePaintNodeData, &a1))
        {
             ::QSGNode*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QQuickFramebufferObject::updatePaintNode(a0,a1) : sipCpp->updatePaintNode(a0,a1));

            return sipConvertFromType(sipRes,sipType_QSGNode,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_updatePaintNode, doc_QQuickFramebufferObject_updatePaintNode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_isTextureProvider, "isTextureProvider(self) -> bool");

extern "C" {static PyObject *meth_QQuickFramebufferObject_isTextureProvider(PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_isTextureProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QQuickFramebufferObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QQuickFramebufferObject::isTextureProvider() : sipCpp->isTextureProvider());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_isTextureProvider, doc_QQuickFramebufferObject_isTextureProvider);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_textureProvider, "textureProvider(self) -> QSGTextureProvider");

extern "C" {static PyObject *meth_QQuickFramebufferObject_textureProvider(PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_textureProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QQuickFramebufferObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp))
        {
             ::QSGTextureProvider*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QQuickFramebufferObject::textureProvider() : sipCpp->textureProvider());

            return sipConvertFromType(sipRes,sipType_QSGTextureProvider,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_textureProvider, doc_QQuickFramebufferObject_textureProvider);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_releaseResources, "releaseResources(self)");

extern "C" {static PyObject *meth_QQuickFramebufferObject_releaseResources(PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_releaseResources(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QQuickFramebufferObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickFramebufferObject::releaseResources() : sipCpp->releaseResources());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_releaseResources, doc_QQuickFramebufferObject_releaseResources);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_mirrorVertically, "mirrorVertically(self) -> bool");

extern "C" {static PyObject *meth_QQuickFramebufferObject_mirrorVertically(PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_mirrorVertically(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickFramebufferObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->mirrorVertically();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_mirrorVertically, doc_QQuickFramebufferObject_mirrorVertically);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_setMirrorVertically, "setMirrorVertically(self, bool)");

extern "C" {static PyObject *meth_QQuickFramebufferObject_setMirrorVertically(PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_setMirrorVertically(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QQuickFramebufferObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp, &a0))
        {
            sipCpp->setMirrorVertically(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_setMirrorVertically, doc_QQuickFramebufferObject_setMirrorVertically);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QQuickFramebufferObject(void *, const sipTypeDef *);}
static void *cast_QQuickFramebufferObject(void *sipCppV, const sipTypeDef *targetType)
{
     ::QQuickFramebufferObject *sipCpp = reinterpret_cast< ::QQuickFramebufferObject *>(sipCppV);

    if (targetType == sipType_QQuickItem)
        return static_cast< ::QQuickItem *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QQmlParserStatus)
        return static_cast< ::QQmlParserStatus *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQuickFramebufferObject(void *, int);}
static void release_QQuickFramebufferObject(void *sipCppV, int)
{
     ::QQuickFramebufferObject *sipCpp = reinterpret_cast< ::QQuickFramebufferObject *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QQuickFramebufferObject(sipSimpleWrapper *);}
static void dealloc_QQuickFramebufferObject(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQQuickFramebufferObject *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQuickFramebufferObject(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QQuickFramebufferObject(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQuickFramebufferObject(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQQuickFramebufferObject *sipCpp = SIP_NULLPTR;

    {
         ::QQuickItem* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QQuickItem, &a0, sipOwner))
        {
            sipCpp = new sipQQuickFramebufferObject(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QQuickFramebufferObject[] = {{7, 255, 1}};


static PyMethodDef methods_QQuickFramebufferObject[] = {
    {SIP_MLNAME_CAST(sipName_createRenderer), meth_QQuickFramebufferObject_createRenderer, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickFramebufferObject_createRenderer)},
    {SIP_MLNAME_CAST(sipName_geometryChanged), meth_QQuickFramebufferObject_geometryChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickFramebufferObject_geometryChanged)},
    {SIP_MLNAME_CAST(sipName_isTextureProvider), meth_QQuickFramebufferObject_isTextureProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickFramebufferObject_isTextureProvider)},
    {SIP_MLNAME_CAST(sipName_mirrorVertically), meth_QQuickFramebufferObject_mirrorVertically, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickFramebufferObject_mirrorVertically)},
    {SIP_MLNAME_CAST(sipName_releaseResources), meth_QQuickFramebufferObject_releaseResources, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickFramebufferObject_releaseResources)},
    {SIP_MLNAME_CAST(sipName_setMirrorVertically), meth_QQuickFramebufferObject_setMirrorVertically, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickFramebufferObject_setMirrorVertically)},
    {SIP_MLNAME_CAST(sipName_setTextureFollowsItemSize), meth_QQuickFramebufferObject_setTextureFollowsItemSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickFramebufferObject_setTextureFollowsItemSize)},
    {SIP_MLNAME_CAST(sipName_textureFollowsItemSize), meth_QQuickFramebufferObject_textureFollowsItemSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickFramebufferObject_textureFollowsItemSize)},
    {SIP_MLNAME_CAST(sipName_textureProvider), meth_QQuickFramebufferObject_textureProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickFramebufferObject_textureProvider)},
    {SIP_MLNAME_CAST(sipName_updatePaintNode), meth_QQuickFramebufferObject_updatePaintNode, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickFramebufferObject_updatePaintNode)}
};

PyDoc_STRVAR(doc_QQuickFramebufferObject, "\1QQuickFramebufferObject(parent: QQuickItem = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QQuickFramebufferObject[] = {
    {"mirrorVerticallyChanged(bool)", "\1mirrorVerticallyChanged(self, bool)", SIP_NULLPTR, SIP_NULLPTR},
    {"textureFollowsItemSizeChanged(bool)", "\1textureFollowsItemSizeChanged(self, bool)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QQuickFramebufferObject = {
    & ::QQuickFramebufferObject::staticMetaObject,
    0,
    signals_QQuickFramebufferObject,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QQuickFramebufferObject = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQuickFramebufferObject,
        {SIP_NULLPTR},
        &plugin_QQuickFramebufferObject
    },
    {
        sipNameNr_QQuickFramebufferObject,
        {0, 0, 1},
        10, methods_QQuickFramebufferObject,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QQuickFramebufferObject,
    -1,
    -1,
    supers_QQuickFramebufferObject,
    SIP_NULLPTR,
    init_type_QQuickFramebufferObject,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQuickFramebufferObject,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QQuickFramebufferObject,
    cast_QQuickFramebufferObject,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 19301 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 19305 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 97 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 19308 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 19311 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitemgrabresult.sip"
#include <qquickitemgrabresult.h>
#line 19314 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 19317 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickwindow.sip"
#include <qquickwindow.h>
#line 19320 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 19323 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 185 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 19328 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 19331 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 19334 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 561 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 19337 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 610 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 19340 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 583 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 19343 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 599 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 19346 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 238 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 19349 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 717 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 19352 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 253 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 19355 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 205 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 19358 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 375 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 19361 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 500 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 19364 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 19367 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 19370 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 65 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 19375 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgtextureprovider.sip"
#include <qsgtextureprovider.h>
#line 19378 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 19381 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 19384 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 328 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 19387 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 19390 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 19393 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 19396 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 19399 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 19402 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 19405 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 19408 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 19411 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 19414 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 19417 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 19420 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 19423 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 19426 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 19429 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 19432 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 19435 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

sipQQuickItem::sipQQuickItem( ::QQuickItem*a0):  ::QQuickItem(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQuickItem::~sipQQuickItem()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQQuickItem::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtQuick_qt_metaobject(sipPySelf,sipType_QQuickItem);

    return  ::QQuickItem::metaObject();
}

int sipQQuickItem::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QQuickItem::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtQuick_qt_metacall(sipPySelf,sipType_QQuickItem,_c,_id,_a);

    return _id;
}

void *sipQQuickItem::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtQuick_qt_metacast(sipPySelf, sipType_QQuickItem, _clname, &sipCpp) ? sipCpp :  ::QQuickItem::qt_metacast(_clname));
}

void sipQQuickItem::updatePolish()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_updatePolish);

    if (!sipMeth)
    {
         ::QQuickItem::updatePolish();
        return;
    }

    extern void sipVH_QtQuick_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtQuick_6(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQQuickItem::releaseResources()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_releaseResources);

    if (!sipMeth)
    {
         ::QQuickItem::releaseResources();
        return;
    }

    extern void sipVH_QtQuick_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtQuick_6(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSGNode* sipQQuickItem::updatePaintNode( ::QSGNode*a0, ::QQuickItem::UpdatePaintNodeData*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_updatePaintNode);

    if (!sipMeth)
        return  ::QQuickItem::updatePaintNode(a0,a1);

    extern  ::QSGNode* sipVH_QtQuick_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QSGNode*, ::QQuickItem::UpdatePaintNodeData*);

    return sipVH_QtQuick_25(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQQuickItem::geometryChanged(const  ::QRectF& a0,const  ::QRectF& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_geometryChanged);

    if (!sipMeth)
    {
         ::QQuickItem::geometryChanged(a0,a1);
        return;
    }

    extern void sipVH_QtQuick_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QRectF&,const  ::QRectF&);

    sipVH_QtQuick_24(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQQuickItem::childMouseEventFilter( ::QQuickItem*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_childMouseEventFilter);

    if (!sipMeth)
        return  ::QQuickItem::childMouseEventFilter(a0,a1);

    extern bool sipVH_QtQuick_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QQuickItem*, ::QEvent*);

    return sipVH_QtQuick_23(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQQuickItem::dropEvent( ::QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_dropEvent);

    if (!sipMeth)
    {
         ::QQuickItem::dropEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDropEvent*);

    sipVH_QtQuick_22(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickItem::dragLeaveEvent( ::QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
         ::QQuickItem::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragLeaveEvent*);

    sipVH_QtQuick_21(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickItem::dragMoveEvent( ::QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_dragMoveEvent);

    if (!sipMeth)
    {
         ::QQuickItem::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragMoveEvent*);

    sipVH_QtQuick_20(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickItem::dragEnterEvent( ::QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_dragEnterEvent);

    if (!sipMeth)
    {
         ::QQuickItem::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragEnterEvent*);

    sipVH_QtQuick_19(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickItem::hoverLeaveEvent( ::QHoverEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_hoverLeaveEvent);

    if (!sipMeth)
    {
         ::QQuickItem::hoverLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHoverEvent*);

    sipVH_QtQuick_18(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickItem::hoverMoveEvent( ::QHoverEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_hoverMoveEvent);

    if (!sipMeth)
    {
         ::QQuickItem::hoverMoveEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHoverEvent*);

    sipVH_QtQuick_18(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickItem::hoverEnterEvent( ::QHoverEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,SIP_NULLPTR,sipName_hoverEnterEvent);

    if (!sipMeth)
    {
         ::QQuickItem::hoverEnterEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHoverEvent*);

    sipVH_QtQuick_18(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickItem::touchEvent( ::QTouchEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,SIP_NULLPTR,sipName_touchEvent);

    if (!sipMeth)
    {
         ::QQuickItem::touchEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTouchEvent*);

    sipVH_QtQuick_17(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickItem::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,SIP_NULLPTR,sipName_wheelEvent);

    if (!sipMeth)
    {
         ::QQuickItem::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtQuick_16(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickItem::touchUngrabEvent()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_touchUngrabEvent);

    if (!sipMeth)
    {
         ::QQuickItem::touchUngrabEvent();
        return;
    }

    extern void sipVH_QtQuick_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtQuick_6(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQQuickItem::mouseUngrabEvent()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,SIP_NULLPTR,sipName_mouseUngrabEvent);

    if (!sipMeth)
    {
         ::QQuickItem::mouseUngrabEvent();
        return;
    }

    extern void sipVH_QtQuick_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtQuick_6(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQQuickItem::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,SIP_NULLPTR,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
         ::QQuickItem::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtQuick_15(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickItem::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,SIP_NULLPTR,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
         ::QQuickItem::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtQuick_15(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickItem::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,SIP_NULLPTR,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
         ::QQuickItem::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtQuick_15(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickItem::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,SIP_NULLPTR,sipName_mousePressEvent);

    if (!sipMeth)
    {
         ::QQuickItem::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtQuick_15(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickItem::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_focusOutEvent);

    if (!sipMeth)
    {
         ::QQuickItem::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtQuick_14(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickItem::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,SIP_NULLPTR,sipName_focusInEvent);

    if (!sipMeth)
    {
         ::QQuickItem::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtQuick_14(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickItem::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,SIP_NULLPTR,sipName_inputMethodEvent);

    if (!sipMeth)
    {
         ::QQuickItem::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_QtQuick_13(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickItem::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,SIP_NULLPTR,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
         ::QQuickItem::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtQuick_12(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickItem::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,SIP_NULLPTR,sipName_keyPressEvent);

    if (!sipMeth)
    {
         ::QQuickItem::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtQuick_12(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickItem::itemChange( ::QQuickItem::ItemChange a0,const  ::QQuickItem::ItemChangeData& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,SIP_NULLPTR,sipName_itemChange);

    if (!sipMeth)
    {
         ::QQuickItem::itemChange(a0,a1);
        return;
    }

    extern void sipVH_QtQuick_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QQuickItem::ItemChange,const  ::QQuickItem::ItemChangeData&);

    sipVH_QtQuick_11(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QSGTextureProvider* sipQQuickItem::textureProvider() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,SIP_NULLPTR,sipName_textureProvider);

    if (!sipMeth)
        return  ::QQuickItem::textureProvider();

    extern  ::QSGTextureProvider* sipVH_QtQuick_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_10(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQQuickItem::isTextureProvider() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,SIP_NULLPTR,sipName_isTextureProvider);

    if (!sipMeth)
        return  ::QQuickItem::isTextureProvider();

    extern bool sipVH_QtQuick_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_9(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QVariant sipQQuickItem::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,SIP_NULLPTR,sipName_inputMethodQuery);

    if (!sipMeth)
        return  ::QQuickItem::inputMethodQuery(a0);

    extern  ::QVariant sipVH_QtQuick_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_QtQuick_8(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQQuickItem::contains(const  ::QPointF& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,SIP_NULLPTR,sipName_contains);

    if (!sipMeth)
        return  ::QQuickItem::contains(a0);

    extern bool sipVH_QtQuick_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QPointF&);

    return sipVH_QtQuick_7(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickItem::classBegin()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,SIP_NULLPTR,sipName_classBegin);

    if (!sipMeth)
    {
         ::QQuickItem::classBegin();
        return;
    }

    extern void sipVH_QtQuick_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtQuick_6(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQQuickItem::componentComplete()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,SIP_NULLPTR,sipName_componentComplete);

    if (!sipMeth)
    {
         ::QQuickItem::componentComplete();
        return;
    }

    extern void sipVH_QtQuick_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtQuick_6(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQQuickItem::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QQuickItem::event(a0);

    extern bool sipVH_QtQuick_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtQuick_5(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQQuickItem::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QQuickItem::eventFilter(a0,a1);

    extern bool sipVH_QtQuick_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtQuick_4(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQQuickItem::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QQuickItem::timerEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtQuick_3(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickItem::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QQuickItem::childEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtQuick_2(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickItem::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QQuickItem::customEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtQuick_1(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickItem::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QQuickItem::connectNotify(a0);
        return;
    }

    extern void sipVH_QtQuick_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQuick_0(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickItem::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QQuickItem::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtQuick_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQuick_0(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QQuickItem_window, "window(self) -> QQuickWindow");

extern "C" {static PyObject *meth_QQuickItem_window(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_window(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
             ::QQuickWindow*sipRes;

            sipRes = sipCpp->window();

            return sipConvertFromType(sipRes,sipType_QQuickWindow,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_window, doc_QQuickItem_window);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_parentItem, "parentItem(self) -> QQuickItem");

extern "C" {static PyObject *meth_QQuickItem_parentItem(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_parentItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
             ::QQuickItem*sipRes;

            sipRes = sipCpp->parentItem();

            return sipConvertFromType(sipRes,sipType_QQuickItem,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_parentItem, doc_QQuickItem_parentItem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_setParentItem, "setParentItem(self, QQuickItem)");

extern "C" {static PyObject *meth_QQuickItem_setParentItem(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setParentItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickItem* a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QQuickItem, &a0))
        {
            sipCpp->setParentItem(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setParentItem, doc_QQuickItem_setParentItem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_stackBefore, "stackBefore(self, QQuickItem)");

extern "C" {static PyObject *meth_QQuickItem_stackBefore(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_stackBefore(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem* a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QQuickItem, &a0))
        {
            sipCpp->stackBefore(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_stackBefore, doc_QQuickItem_stackBefore);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_stackAfter, "stackAfter(self, QQuickItem)");

extern "C" {static PyObject *meth_QQuickItem_stackAfter(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_stackAfter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem* a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QQuickItem, &a0))
        {
            sipCpp->stackAfter(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_stackAfter, doc_QQuickItem_stackAfter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_childrenRect, "childrenRect(self) -> QRectF");

extern "C" {static PyObject *meth_QQuickItem_childrenRect(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_childrenRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->childrenRect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_childrenRect, doc_QQuickItem_childrenRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_childItems, "childItems(self) -> List[QQuickItem]");

extern "C" {static PyObject *meth_QQuickItem_childItems(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_childItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            QList< ::QQuickItem*>*sipRes;

            sipRes = new QList< ::QQuickItem*>(sipCpp->childItems());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QQuickItem,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_childItems, doc_QQuickItem_childItems);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_clip, "clip(self) -> bool");

extern "C" {static PyObject *meth_QQuickItem_clip(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_clip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->clip();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_clip, doc_QQuickItem_clip);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_setClip, "setClip(self, bool)");

extern "C" {static PyObject *meth_QQuickItem_setClip(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setClip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setClip(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setClip, doc_QQuickItem_setClip);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_state, "state(self) -> str");

extern "C" {static PyObject *meth_QQuickItem_state(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->state());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_state, doc_QQuickItem_state);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_setState, "setState(self, str)");

extern "C" {static PyObject *meth_QQuickItem_setState(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setState(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setState, doc_QQuickItem_setState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_baselineOffset, "baselineOffset(self) -> float");

extern "C" {static PyObject *meth_QQuickItem_baselineOffset(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_baselineOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->baselineOffset();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_baselineOffset, doc_QQuickItem_baselineOffset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_setBaselineOffset, "setBaselineOffset(self, float)");

extern "C" {static PyObject *meth_QQuickItem_setBaselineOffset(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setBaselineOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setBaselineOffset(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setBaselineOffset, doc_QQuickItem_setBaselineOffset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_x, "x(self) -> float");

extern "C" {static PyObject *meth_QQuickItem_x(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_x(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->x();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_x, doc_QQuickItem_x);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_y, "y(self) -> float");

extern "C" {static PyObject *meth_QQuickItem_y(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_y(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->y();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_y, doc_QQuickItem_y);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_setX, "setX(self, float)");

extern "C" {static PyObject *meth_QQuickItem_setX(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setX(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setX, doc_QQuickItem_setX);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_setY, "setY(self, float)");

extern "C" {static PyObject *meth_QQuickItem_setY(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setY(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setY, doc_QQuickItem_setY);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_width, "width(self) -> float");

extern "C" {static PyObject *meth_QQuickItem_width(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->width();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_width, doc_QQuickItem_width);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_setWidth, "setWidth(self, float)");

extern "C" {static PyObject *meth_QQuickItem_setWidth(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setWidth, doc_QQuickItem_setWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_resetWidth, "resetWidth(self)");

extern "C" {static PyObject *meth_QQuickItem_resetWidth(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_resetWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            sipCpp->resetWidth();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_resetWidth, doc_QQuickItem_resetWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_setImplicitWidth, "setImplicitWidth(self, float)");

extern "C" {static PyObject *meth_QQuickItem_setImplicitWidth(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setImplicitWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setImplicitWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setImplicitWidth, doc_QQuickItem_setImplicitWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_implicitWidth, "implicitWidth(self) -> float");

extern "C" {static PyObject *meth_QQuickItem_implicitWidth(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_implicitWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->implicitWidth();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_implicitWidth, doc_QQuickItem_implicitWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_height, "height(self) -> float");

extern "C" {static PyObject *meth_QQuickItem_height(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_height(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->height();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_height, doc_QQuickItem_height);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_setHeight, "setHeight(self, float)");

extern "C" {static PyObject *meth_QQuickItem_setHeight(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setHeight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setHeight, doc_QQuickItem_setHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_resetHeight, "resetHeight(self)");

extern "C" {static PyObject *meth_QQuickItem_resetHeight(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_resetHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            sipCpp->resetHeight();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_resetHeight, doc_QQuickItem_resetHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_setImplicitHeight, "setImplicitHeight(self, float)");

extern "C" {static PyObject *meth_QQuickItem_setImplicitHeight(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setImplicitHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setImplicitHeight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setImplicitHeight, doc_QQuickItem_setImplicitHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_implicitHeight, "implicitHeight(self) -> float");

extern "C" {static PyObject *meth_QQuickItem_implicitHeight(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_implicitHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->implicitHeight();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_implicitHeight, doc_QQuickItem_implicitHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_transformOrigin, "transformOrigin(self) -> QQuickItem.TransformOrigin");

extern "C" {static PyObject *meth_QQuickItem_transformOrigin(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_transformOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
             ::QQuickItem::TransformOrigin sipRes;

            sipRes = sipCpp->transformOrigin();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QQuickItem_TransformOrigin);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_transformOrigin, doc_QQuickItem_transformOrigin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_setTransformOrigin, "setTransformOrigin(self, QQuickItem.TransformOrigin)");

extern "C" {static PyObject *meth_QQuickItem_setTransformOrigin(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setTransformOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickItem::TransformOrigin a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QQuickItem_TransformOrigin, &a0))
        {
            sipCpp->setTransformOrigin(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setTransformOrigin, doc_QQuickItem_setTransformOrigin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_z, "z(self) -> float");

extern "C" {static PyObject *meth_QQuickItem_z(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_z(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->z();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_z, doc_QQuickItem_z);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_setZ, "setZ(self, float)");

extern "C" {static PyObject *meth_QQuickItem_setZ(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setZ(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setZ(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setZ, doc_QQuickItem_setZ);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_rotation, "rotation(self) -> float");

extern "C" {static PyObject *meth_QQuickItem_rotation(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_rotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->rotation();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_rotation, doc_QQuickItem_rotation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_setRotation, "setRotation(self, float)");

extern "C" {static PyObject *meth_QQuickItem_setRotation(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setRotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setRotation(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setRotation, doc_QQuickItem_setRotation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_scale, "scale(self) -> float");

extern "C" {static PyObject *meth_QQuickItem_scale(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_scale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->scale();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_scale, doc_QQuickItem_scale);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_setScale, "setScale(self, float)");

extern "C" {static PyObject *meth_QQuickItem_setScale(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setScale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setScale(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setScale, doc_QQuickItem_setScale);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_opacity, "opacity(self) -> float");

extern "C" {static PyObject *meth_QQuickItem_opacity(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_opacity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->opacity();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_opacity, doc_QQuickItem_opacity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_setOpacity, "setOpacity(self, float)");

extern "C" {static PyObject *meth_QQuickItem_setOpacity(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setOpacity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setOpacity(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setOpacity, doc_QQuickItem_setOpacity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_isVisible, "isVisible(self) -> bool");

extern "C" {static PyObject *meth_QQuickItem_isVisible(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_isVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isVisible();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_isVisible, doc_QQuickItem_isVisible);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_setVisible, "setVisible(self, bool)");

extern "C" {static PyObject *meth_QQuickItem_setVisible(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setVisible(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setVisible, doc_QQuickItem_setVisible);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_isEnabled, "isEnabled(self) -> bool");

extern "C" {static PyObject *meth_QQuickItem_isEnabled(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_isEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_isEnabled, doc_QQuickItem_isEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_setEnabled, "setEnabled(self, bool)");

extern "C" {static PyObject *meth_QQuickItem_setEnabled(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setEnabled, doc_QQuickItem_setEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_smooth, "smooth(self) -> bool");

extern "C" {static PyObject *meth_QQuickItem_smooth(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_smooth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->smooth();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_smooth, doc_QQuickItem_smooth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_setSmooth, "setSmooth(self, bool)");

extern "C" {static PyObject *meth_QQuickItem_setSmooth(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setSmooth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setSmooth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setSmooth, doc_QQuickItem_setSmooth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_antialiasing, "antialiasing(self) -> bool");

extern "C" {static PyObject *meth_QQuickItem_antialiasing(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_antialiasing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->antialiasing();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_antialiasing, doc_QQuickItem_antialiasing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_setAntialiasing, "setAntialiasing(self, bool)");

extern "C" {static PyObject *meth_QQuickItem_setAntialiasing(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setAntialiasing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setAntialiasing(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setAntialiasing, doc_QQuickItem_setAntialiasing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_flags, "flags(self) -> QQuickItem.Flags");

extern "C" {static PyObject *meth_QQuickItem_flags(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
             ::QQuickItem::Flags*sipRes;

            sipRes = new  ::QQuickItem::Flags(sipCpp->flags());

            return sipConvertFromNewType(sipRes,sipType_QQuickItem_Flags,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_flags, doc_QQuickItem_flags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_setFlag, "setFlag(self, QQuickItem.Flag, enabled: bool = True)");

extern "C" {static PyObject *meth_QQuickItem_setFlag(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setFlag(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickItem::Flag a0;
        bool a1 = 1;
         ::QQuickItem *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE|b", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QQuickItem_Flag, &a0, &a1))
        {
            sipCpp->setFlag(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setFlag, doc_QQuickItem_setFlag);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_setFlags, "setFlags(self, Union[QQuickItem.Flags, QQuickItem.Flag])");

extern "C" {static PyObject *meth_QQuickItem_setFlags(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickItem::Flags* a0;
        int a0State = 0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QQuickItem_Flags, &a0, &a0State))
        {
            sipCpp->setFlags(*a0);
            sipReleaseType(a0,sipType_QQuickItem_Flags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setFlags, doc_QQuickItem_setFlags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_hasActiveFocus, "hasActiveFocus(self) -> bool");

extern "C" {static PyObject *meth_QQuickItem_hasActiveFocus(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_hasActiveFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasActiveFocus();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_hasActiveFocus, doc_QQuickItem_hasActiveFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_hasFocus, "hasFocus(self) -> bool");

extern "C" {static PyObject *meth_QQuickItem_hasFocus(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_hasFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasFocus();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_hasFocus, doc_QQuickItem_hasFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_setFocus, "setFocus(self, bool)\n"
"setFocus(self, bool, Qt.FocusReason)");

extern "C" {static PyObject *meth_QQuickItem_setFocus(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setFocus(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        bool a0;
         ::Qt::FocusReason a1;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BbE", &sipSelf, sipType_QQuickItem, &sipCpp, &a0, sipType_Qt_FocusReason, &a1))
        {
            sipCpp->setFocus(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setFocus, doc_QQuickItem_setFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_isFocusScope, "isFocusScope(self) -> bool");

extern "C" {static PyObject *meth_QQuickItem_isFocusScope(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_isFocusScope(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isFocusScope();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_isFocusScope, doc_QQuickItem_isFocusScope);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_scopedFocusItem, "scopedFocusItem(self) -> QQuickItem");

extern "C" {static PyObject *meth_QQuickItem_scopedFocusItem(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_scopedFocusItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
             ::QQuickItem*sipRes;

            sipRes = sipCpp->scopedFocusItem();

            return sipConvertFromType(sipRes,sipType_QQuickItem,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_scopedFocusItem, doc_QQuickItem_scopedFocusItem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_acceptedMouseButtons, "acceptedMouseButtons(self) -> Qt.MouseButtons");

extern "C" {static PyObject *meth_QQuickItem_acceptedMouseButtons(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_acceptedMouseButtons(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
             ::Qt::MouseButtons*sipRes;

            sipRes = new  ::Qt::MouseButtons(sipCpp->acceptedMouseButtons());

            return sipConvertFromNewType(sipRes,sipType_Qt_MouseButtons,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_acceptedMouseButtons, doc_QQuickItem_acceptedMouseButtons);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_setAcceptedMouseButtons, "setAcceptedMouseButtons(self, Union[Qt.MouseButtons, Qt.MouseButton])");

extern "C" {static PyObject *meth_QQuickItem_setAcceptedMouseButtons(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setAcceptedMouseButtons(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::MouseButtons* a0;
        int a0State = 0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_Qt_MouseButtons, &a0, &a0State))
        {
            sipCpp->setAcceptedMouseButtons(*a0);
            sipReleaseType(a0,sipType_Qt_MouseButtons,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setAcceptedMouseButtons, doc_QQuickItem_setAcceptedMouseButtons);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_acceptHoverEvents, "acceptHoverEvents(self) -> bool");

extern "C" {static PyObject *meth_QQuickItem_acceptHoverEvents(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_acceptHoverEvents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->acceptHoverEvents();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_acceptHoverEvents, doc_QQuickItem_acceptHoverEvents);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_setAcceptHoverEvents, "setAcceptHoverEvents(self, bool)");

extern "C" {static PyObject *meth_QQuickItem_setAcceptHoverEvents(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setAcceptHoverEvents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setAcceptHoverEvents(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setAcceptHoverEvents, doc_QQuickItem_setAcceptHoverEvents);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_cursor, "cursor(self) -> QCursor");

extern "C" {static PyObject *meth_QQuickItem_cursor(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_cursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
             ::QCursor*sipRes;

            sipRes = new  ::QCursor(sipCpp->cursor());

            return sipConvertFromNewType(sipRes,sipType_QCursor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_cursor, doc_QQuickItem_cursor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_setCursor, "setCursor(self, Union[QCursor, Qt.CursorShape])");

extern "C" {static PyObject *meth_QQuickItem_setCursor(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCursor* a0;
        int a0State = 0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QCursor, &a0, &a0State))
        {
            sipCpp->setCursor(*a0);
            sipReleaseType(const_cast< ::QCursor *>(a0),sipType_QCursor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setCursor, doc_QQuickItem_setCursor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_unsetCursor, "unsetCursor(self)");

extern "C" {static PyObject *meth_QQuickItem_unsetCursor(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_unsetCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            sipCpp->unsetCursor();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_unsetCursor, doc_QQuickItem_unsetCursor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_grabMouse, "grabMouse(self)");

extern "C" {static PyObject *meth_QQuickItem_grabMouse(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_grabMouse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            sipCpp->grabMouse();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_grabMouse, doc_QQuickItem_grabMouse);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_ungrabMouse, "ungrabMouse(self)");

extern "C" {static PyObject *meth_QQuickItem_ungrabMouse(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_ungrabMouse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            sipCpp->ungrabMouse();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_ungrabMouse, doc_QQuickItem_ungrabMouse);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_keepMouseGrab, "keepMouseGrab(self) -> bool");

extern "C" {static PyObject *meth_QQuickItem_keepMouseGrab(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_keepMouseGrab(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->keepMouseGrab();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_keepMouseGrab, doc_QQuickItem_keepMouseGrab);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_setKeepMouseGrab, "setKeepMouseGrab(self, bool)");

extern "C" {static PyObject *meth_QQuickItem_setKeepMouseGrab(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setKeepMouseGrab(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setKeepMouseGrab(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setKeepMouseGrab, doc_QQuickItem_setKeepMouseGrab);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_filtersChildMouseEvents, "filtersChildMouseEvents(self) -> bool");

extern "C" {static PyObject *meth_QQuickItem_filtersChildMouseEvents(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_filtersChildMouseEvents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->filtersChildMouseEvents();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_filtersChildMouseEvents, doc_QQuickItem_filtersChildMouseEvents);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_setFiltersChildMouseEvents, "setFiltersChildMouseEvents(self, bool)");

extern "C" {static PyObject *meth_QQuickItem_setFiltersChildMouseEvents(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setFiltersChildMouseEvents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setFiltersChildMouseEvents(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setFiltersChildMouseEvents, doc_QQuickItem_setFiltersChildMouseEvents);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_grabTouchPoints, "grabTouchPoints(self, Iterable[int])");

extern "C" {static PyObject *meth_QQuickItem_grabTouchPoints(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_grabTouchPoints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVector<int>* a0;
        int a0State = 0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QVector_1800,&a0, &a0State))
        {
            sipCpp->grabTouchPoints(*a0);
            sipReleaseType(const_cast< ::QVector<int> *>(a0),sipType_QVector_1800,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_grabTouchPoints, doc_QQuickItem_grabTouchPoints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_ungrabTouchPoints, "ungrabTouchPoints(self)");

extern "C" {static PyObject *meth_QQuickItem_ungrabTouchPoints(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_ungrabTouchPoints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            sipCpp->ungrabTouchPoints();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_ungrabTouchPoints, doc_QQuickItem_ungrabTouchPoints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_keepTouchGrab, "keepTouchGrab(self) -> bool");

extern "C" {static PyObject *meth_QQuickItem_keepTouchGrab(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_keepTouchGrab(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->keepTouchGrab();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_keepTouchGrab, doc_QQuickItem_keepTouchGrab);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_setKeepTouchGrab, "setKeepTouchGrab(self, bool)");

extern "C" {static PyObject *meth_QQuickItem_setKeepTouchGrab(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setKeepTouchGrab(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setKeepTouchGrab(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setKeepTouchGrab, doc_QQuickItem_setKeepTouchGrab);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_contains, "contains(self, Union[QPointF, QPoint]) -> bool");

extern "C" {static PyObject *meth_QQuickItem_contains(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_contains(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QQuickItem::contains(*a0) : sipCpp->contains(*a0));
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_contains, doc_QQuickItem_contains);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_mapToItem, "mapToItem(self, QQuickItem, Union[QPointF, QPoint]) -> QPointF");

extern "C" {static PyObject *meth_QQuickItem_mapToItem(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_mapToItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem* a0;
        const  ::QPointF* a1;
        int a1State = 0;
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J1", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QQuickItem, &a0, sipType_QPointF, &a1, &a1State))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->mapToItem(a0,*a1));
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_mapToItem, doc_QQuickItem_mapToItem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_mapToScene, "mapToScene(self, Union[QPointF, QPoint]) -> QPointF");

extern "C" {static PyObject *meth_QQuickItem_mapToScene(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_mapToScene(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->mapToScene(*a0));
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_mapToScene, doc_QQuickItem_mapToScene);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_mapRectToItem, "mapRectToItem(self, QQuickItem, QRectF) -> QRectF");

extern "C" {static PyObject *meth_QQuickItem_mapRectToItem(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_mapRectToItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem* a0;
        const  ::QRectF* a1;
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J9", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QQuickItem, &a0, sipType_QRectF, &a1))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->mapRectToItem(a0,*a1));

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_mapRectToItem, doc_QQuickItem_mapRectToItem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_mapRectToScene, "mapRectToScene(self, QRectF) -> QRectF");

extern "C" {static PyObject *meth_QQuickItem_mapRectToScene(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_mapRectToScene(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QRectF, &a0))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->mapRectToScene(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_mapRectToScene, doc_QQuickItem_mapRectToScene);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_mapFromItem, "mapFromItem(self, QQuickItem, Union[QPointF, QPoint]) -> QPointF");

extern "C" {static PyObject *meth_QQuickItem_mapFromItem(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_mapFromItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem* a0;
        const  ::QPointF* a1;
        int a1State = 0;
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J1", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QQuickItem, &a0, sipType_QPointF, &a1, &a1State))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->mapFromItem(a0,*a1));
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_mapFromItem, doc_QQuickItem_mapFromItem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_mapFromScene, "mapFromScene(self, Union[QPointF, QPoint]) -> QPointF");

extern "C" {static PyObject *meth_QQuickItem_mapFromScene(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_mapFromScene(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->mapFromScene(*a0));
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_mapFromScene, doc_QQuickItem_mapFromScene);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_mapRectFromItem, "mapRectFromItem(self, QQuickItem, QRectF) -> QRectF");

extern "C" {static PyObject *meth_QQuickItem_mapRectFromItem(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_mapRectFromItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem* a0;
        const  ::QRectF* a1;
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J9", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QQuickItem, &a0, sipType_QRectF, &a1))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->mapRectFromItem(a0,*a1));

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_mapRectFromItem, doc_QQuickItem_mapRectFromItem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_mapRectFromScene, "mapRectFromScene(self, QRectF) -> QRectF");

extern "C" {static PyObject *meth_QQuickItem_mapRectFromScene(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_mapRectFromScene(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QRectF, &a0))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->mapRectFromScene(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_mapRectFromScene, doc_QQuickItem_mapRectFromScene);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_polish, "polish(self)");

extern "C" {static PyObject *meth_QQuickItem_polish(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_polish(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            sipCpp->polish();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_polish, doc_QQuickItem_polish);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_forceActiveFocus, "forceActiveFocus(self)\n"
"forceActiveFocus(self, Qt.FocusReason)");

extern "C" {static PyObject *meth_QQuickItem_forceActiveFocus(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_forceActiveFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            sipCpp->forceActiveFocus();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::Qt::FocusReason a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_Qt_FocusReason, &a0))
        {
            sipCpp->forceActiveFocus(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_forceActiveFocus, doc_QQuickItem_forceActiveFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_childAt, "childAt(self, float, float) -> QQuickItem");

extern "C" {static PyObject *meth_QQuickItem_childAt(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_childAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QQuickItem, &sipCpp, &a0, &a1))
        {
             ::QQuickItem*sipRes;

            sipRes = sipCpp->childAt(a0,a1);

            return sipConvertFromType(sipRes,sipType_QQuickItem,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_childAt, doc_QQuickItem_childAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_inputMethodQuery, "inputMethodQuery(self, Qt.InputMethodQuery) -> Any");

extern "C" {static PyObject *meth_QQuickItem_inputMethodQuery(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_inputMethodQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::Qt::InputMethodQuery a0;
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_Qt_InputMethodQuery, &a0))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QQuickItem::inputMethodQuery(a0) : sipCpp->inputMethodQuery(a0)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_inputMethodQuery, doc_QQuickItem_inputMethodQuery);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_isTextureProvider, "isTextureProvider(self) -> bool");

extern "C" {static PyObject *meth_QQuickItem_isTextureProvider(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_isTextureProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QQuickItem::isTextureProvider() : sipCpp->isTextureProvider());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_isTextureProvider, doc_QQuickItem_isTextureProvider);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_textureProvider, "textureProvider(self) -> QSGTextureProvider");

extern "C" {static PyObject *meth_QQuickItem_textureProvider(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_textureProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
             ::QSGTextureProvider*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QQuickItem::textureProvider() : sipCpp->textureProvider());

            return sipConvertFromType(sipRes,sipType_QSGTextureProvider,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_textureProvider, doc_QQuickItem_textureProvider);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_update, "update(self)");

extern "C" {static PyObject *meth_QQuickItem_update(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_update(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->update();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_update, doc_QQuickItem_update);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QQuickItem_event(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QQuickItem::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_event, doc_QQuickItem_event);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_isComponentComplete, "isComponentComplete(self) -> bool");

extern "C" {static PyObject *meth_QQuickItem_isComponentComplete(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_isComponentComplete(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isComponentComplete();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_isComponentComplete, doc_QQuickItem_isComponentComplete);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_itemChange, "itemChange(self, QQuickItem.ItemChange, QQuickItem.ItemChangeData)");

extern "C" {static PyObject *meth_QQuickItem_itemChange(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_itemChange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QQuickItem::ItemChange a0;
        const  ::QQuickItem::ItemChangeData* a1;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pEJ9", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QQuickItem_ItemChange, &a0, sipType_QQuickItem_ItemChangeData, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickItem::itemChange(a0,*a1) : sipCpp->itemChange(a0,*a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_itemChange, doc_QQuickItem_itemChange);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_updateInputMethod, "updateInputMethod(self, queries: Union[Qt.InputMethodQueries, Qt.InputMethodQuery] = Qt.ImQueryInput)");

extern "C" {static PyObject *meth_QQuickItem_updateInputMethod(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_updateInputMethod(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::InputMethodQueries a0def = Qt::ImQueryInput;
         ::Qt::InputMethodQueries* a0 = &a0def;
        int a0State = 0;
         ::QQuickItem *sipCpp;

        static const char *sipKwdList[] = {
            sipName_queries,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "p|J1", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_Qt_InputMethodQueries, &a0, &a0State))
        {
            sipCpp->updateInputMethod(*a0);
            sipReleaseType(a0,sipType_Qt_InputMethodQueries,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_updateInputMethod, doc_QQuickItem_updateInputMethod);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_widthValid, "widthValid(self) -> bool");

extern "C" {static PyObject *meth_QQuickItem_widthValid(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_widthValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->widthValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_widthValid, doc_QQuickItem_widthValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_heightValid, "heightValid(self) -> bool");

extern "C" {static PyObject *meth_QQuickItem_heightValid(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_heightValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->heightValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_heightValid, doc_QQuickItem_heightValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_classBegin, "classBegin(self)");

extern "C" {static PyObject *meth_QQuickItem_classBegin(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_classBegin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickItem::classBegin() : sipCpp->classBegin());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_classBegin, doc_QQuickItem_classBegin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_componentComplete, "componentComplete(self)");

extern "C" {static PyObject *meth_QQuickItem_componentComplete(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_componentComplete(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickItem::componentComplete() : sipCpp->componentComplete());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_componentComplete, doc_QQuickItem_componentComplete);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_keyPressEvent, "keyPressEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QQuickItem_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QKeyEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickItem::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_keyPressEvent, doc_QQuickItem_keyPressEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_keyReleaseEvent, "keyReleaseEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QQuickItem_keyReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QKeyEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickItem::keyReleaseEvent(a0) : sipCpp->keyReleaseEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_keyReleaseEvent, doc_QQuickItem_keyReleaseEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_inputMethodEvent, "inputMethodEvent(self, QInputMethodEvent)");

extern "C" {static PyObject *meth_QQuickItem_inputMethodEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QInputMethodEvent* a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickItem::inputMethodEvent(a0) : sipCpp->inputMethodEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_inputMethodEvent, doc_QQuickItem_inputMethodEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_focusInEvent, "focusInEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QQuickItem_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_focusInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFocusEvent* a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QFocusEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickItem::focusInEvent(a0) : sipCpp->focusInEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_focusInEvent, doc_QQuickItem_focusInEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_focusOutEvent, "focusOutEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QQuickItem_focusOutEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFocusEvent* a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QFocusEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickItem::focusOutEvent(a0) : sipCpp->focusOutEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_focusOutEvent, doc_QQuickItem_focusOutEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_mousePressEvent, "mousePressEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QQuickItem_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickItem::mousePressEvent(a0) : sipCpp->mousePressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_mousePressEvent, doc_QQuickItem_mousePressEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_mouseMoveEvent, "mouseMoveEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QQuickItem_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickItem::mouseMoveEvent(a0) : sipCpp->mouseMoveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_mouseMoveEvent, doc_QQuickItem_mouseMoveEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_mouseReleaseEvent, "mouseReleaseEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QQuickItem_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickItem::mouseReleaseEvent(a0) : sipCpp->mouseReleaseEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_mouseReleaseEvent, doc_QQuickItem_mouseReleaseEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_mouseDoubleClickEvent, "mouseDoubleClickEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QQuickItem_mouseDoubleClickEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickItem::mouseDoubleClickEvent(a0) : sipCpp->mouseDoubleClickEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_mouseDoubleClickEvent, doc_QQuickItem_mouseDoubleClickEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_mouseUngrabEvent, "mouseUngrabEvent(self)");

extern "C" {static PyObject *meth_QQuickItem_mouseUngrabEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_mouseUngrabEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickItem::mouseUngrabEvent() : sipCpp->mouseUngrabEvent());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_mouseUngrabEvent, doc_QQuickItem_mouseUngrabEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_touchUngrabEvent, "touchUngrabEvent(self)");

extern "C" {static PyObject *meth_QQuickItem_touchUngrabEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_touchUngrabEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickItem::touchUngrabEvent() : sipCpp->touchUngrabEvent());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_touchUngrabEvent, doc_QQuickItem_touchUngrabEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_wheelEvent, "wheelEvent(self, QWheelEvent)");

extern "C" {static PyObject *meth_QQuickItem_wheelEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_wheelEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWheelEvent* a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QWheelEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickItem::wheelEvent(a0) : sipCpp->wheelEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_wheelEvent, doc_QQuickItem_wheelEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_touchEvent, "touchEvent(self, QTouchEvent)");

extern "C" {static PyObject *meth_QQuickItem_touchEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_touchEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTouchEvent* a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QTouchEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickItem::touchEvent(a0) : sipCpp->touchEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_touchEvent, doc_QQuickItem_touchEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_hoverEnterEvent, "hoverEnterEvent(self, QHoverEvent)");

extern "C" {static PyObject *meth_QQuickItem_hoverEnterEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_hoverEnterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QHoverEvent* a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QHoverEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickItem::hoverEnterEvent(a0) : sipCpp->hoverEnterEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_hoverEnterEvent, doc_QQuickItem_hoverEnterEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_hoverMoveEvent, "hoverMoveEvent(self, QHoverEvent)");

extern "C" {static PyObject *meth_QQuickItem_hoverMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_hoverMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QHoverEvent* a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QHoverEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickItem::hoverMoveEvent(a0) : sipCpp->hoverMoveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_hoverMoveEvent, doc_QQuickItem_hoverMoveEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_hoverLeaveEvent, "hoverLeaveEvent(self, QHoverEvent)");

extern "C" {static PyObject *meth_QQuickItem_hoverLeaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_hoverLeaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QHoverEvent* a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QHoverEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickItem::hoverLeaveEvent(a0) : sipCpp->hoverLeaveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_hoverLeaveEvent, doc_QQuickItem_hoverLeaveEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_dragEnterEvent, "dragEnterEvent(self, QDragEnterEvent)");

extern "C" {static PyObject *meth_QQuickItem_dragEnterEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragEnterEvent* a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QDragEnterEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickItem::dragEnterEvent(a0) : sipCpp->dragEnterEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_dragEnterEvent, doc_QQuickItem_dragEnterEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_dragMoveEvent, "dragMoveEvent(self, QDragMoveEvent)");

extern "C" {static PyObject *meth_QQuickItem_dragMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragMoveEvent* a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickItem::dragMoveEvent(a0) : sipCpp->dragMoveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_dragMoveEvent, doc_QQuickItem_dragMoveEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_dragLeaveEvent, "dragLeaveEvent(self, QDragLeaveEvent)");

extern "C" {static PyObject *meth_QQuickItem_dragLeaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragLeaveEvent* a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickItem::dragLeaveEvent(a0) : sipCpp->dragLeaveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_dragLeaveEvent, doc_QQuickItem_dragLeaveEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_dropEvent, "dropEvent(self, QDropEvent)");

extern "C" {static PyObject *meth_QQuickItem_dropEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_dropEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDropEvent* a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QDropEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickItem::dropEvent(a0) : sipCpp->dropEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_dropEvent, doc_QQuickItem_dropEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_childMouseEventFilter, "childMouseEventFilter(self, QQuickItem, QEvent) -> bool");

extern "C" {static PyObject *meth_QQuickItem_childMouseEventFilter(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_childMouseEventFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QQuickItem* a0;
         ::QEvent* a1;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QQuickItem, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QQuickItem::childMouseEventFilter(a0,a1) : sipCpp->childMouseEventFilter(a0,a1));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_childMouseEventFilter, doc_QQuickItem_childMouseEventFilter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_geometryChanged, "geometryChanged(self, QRectF, QRectF)");

extern "C" {static PyObject *meth_QQuickItem_geometryChanged(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_geometryChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QRectF* a0;
        const  ::QRectF* a1;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J9", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QRectF, &a0, sipType_QRectF, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickItem::geometryChanged(*a0,*a1) : sipCpp->geometryChanged(*a0,*a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_geometryChanged, doc_QQuickItem_geometryChanged);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_updatePaintNode, "updatePaintNode(self, QSGNode, QQuickItem.UpdatePaintNodeData) -> QSGNode");

extern "C" {static PyObject *meth_QQuickItem_updatePaintNode(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_updatePaintNode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QSGNode* a0;
         ::QQuickItem::UpdatePaintNodeData* a1;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QSGNode, &a0, sipType_QQuickItem_UpdatePaintNodeData, &a1))
        {
             ::QSGNode*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QQuickItem::updatePaintNode(a0,a1) : sipCpp->updatePaintNode(a0,a1));

            return sipConvertFromType(sipRes,sipType_QSGNode,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_updatePaintNode, doc_QQuickItem_updatePaintNode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_releaseResources, "releaseResources(self)");

extern "C" {static PyObject *meth_QQuickItem_releaseResources(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_releaseResources(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickItem::releaseResources() : sipCpp->releaseResources());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_releaseResources, doc_QQuickItem_releaseResources);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_updatePolish, "updatePolish(self)");

extern "C" {static PyObject *meth_QQuickItem_updatePolish(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_updatePolish(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickItem::updatePolish() : sipCpp->updatePolish());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_updatePolish, doc_QQuickItem_updatePolish);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_activeFocusOnTab, "activeFocusOnTab(self) -> bool");

extern "C" {static PyObject *meth_QQuickItem_activeFocusOnTab(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_activeFocusOnTab(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->activeFocusOnTab();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_activeFocusOnTab, doc_QQuickItem_activeFocusOnTab);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_setActiveFocusOnTab, "setActiveFocusOnTab(self, bool)");

extern "C" {static PyObject *meth_QQuickItem_setActiveFocusOnTab(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setActiveFocusOnTab(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setActiveFocusOnTab(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setActiveFocusOnTab, doc_QQuickItem_setActiveFocusOnTab);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_nextItemInFocusChain, "nextItemInFocusChain(self, forward: bool = True) -> QQuickItem");

extern "C" {static PyObject *meth_QQuickItem_nextItemInFocusChain(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_nextItemInFocusChain(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0 = 1;
         ::QQuickItem *sipCpp;

        static const char *sipKwdList[] = {
            sipName_forward,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
             ::QQuickItem*sipRes;

            sipRes = sipCpp->nextItemInFocusChain(a0);

            return sipConvertFromType(sipRes,sipType_QQuickItem,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_nextItemInFocusChain, doc_QQuickItem_nextItemInFocusChain);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_resetAntialiasing, "resetAntialiasing(self)");

extern "C" {static PyObject *meth_QQuickItem_resetAntialiasing(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_resetAntialiasing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            sipCpp->resetAntialiasing();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_resetAntialiasing, doc_QQuickItem_resetAntialiasing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_grabToImage, "grabToImage(self, targetSize: QSize = QSize()) -> QQuickItemGrabResult");

extern "C" {static PyObject *meth_QQuickItem_grabToImage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_grabToImage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize& a0def = QSize();
        const  ::QSize* a0 = &a0def;
         ::QQuickItem *sipCpp;

        static const char *sipKwdList[] = {
            sipName_targetSize,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J9", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QSize, &a0))
        {
             ::QQuickItemGrabResult*sipRes = 0;

#line 282 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitem.sip"
        QSharedPointer<QQuickItemGrabResult> *grab;
        
        Py_BEGIN_ALLOW_THREADS
        // This will leak but there seems to be no way to detach the object.
        grab = new QSharedPointer<QQuickItemGrabResult>(sipCpp->grabToImage(*a0));
        Py_END_ALLOW_THREADS
        
        sipRes = grab->data();
#line 23736 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart1.cpp"

            return sipConvertFromNewType(sipRes,sipType_QQuickItemGrabResult,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_grabToImage, doc_QQuickItem_grabToImage);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_isAncestorOf, "isAncestorOf(self, QQuickItem) -> bool");

extern "C" {static PyObject *meth_QQuickItem_isAncestorOf(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_isAncestorOf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem* a0;
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QQuickItem, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isAncestorOf(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_isAncestorOf, doc_QQuickItem_isAncestorOf);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_mapToGlobal, "mapToGlobal(self, Union[QPointF, QPoint]) -> QPointF");

extern "C" {static PyObject *meth_QQuickItem_mapToGlobal(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_mapToGlobal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->mapToGlobal(*a0));
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_mapToGlobal, doc_QQuickItem_mapToGlobal);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_mapFromGlobal, "mapFromGlobal(self, Union[QPointF, QPoint]) -> QPointF");

extern "C" {static PyObject *meth_QQuickItem_mapFromGlobal(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_mapFromGlobal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->mapFromGlobal(*a0));
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_mapFromGlobal, doc_QQuickItem_mapFromGlobal);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_size, "size(self) -> QSizeF");

extern "C" {static PyObject *meth_QQuickItem_size(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
             ::QSizeF*sipRes;

            sipRes = new  ::QSizeF(sipCpp->size());

            return sipConvertFromNewType(sipRes,sipType_QSizeF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_size, doc_QQuickItem_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_acceptTouchEvents, "acceptTouchEvents(self) -> bool");

extern "C" {static PyObject *meth_QQuickItem_acceptTouchEvents(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_acceptTouchEvents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->acceptTouchEvents();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_acceptTouchEvents, doc_QQuickItem_acceptTouchEvents);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_setAcceptTouchEvents, "setAcceptTouchEvents(self, bool)");

extern "C" {static PyObject *meth_QQuickItem_setAcceptTouchEvents(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setAcceptTouchEvents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setAcceptTouchEvents(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setAcceptTouchEvents, doc_QQuickItem_setAcceptTouchEvents);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_containmentMask, "containmentMask(self) -> QObject");

extern "C" {static PyObject *meth_QQuickItem_containmentMask(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_containmentMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
             ::QObject*sipRes;

            sipRes = sipCpp->containmentMask();

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_containmentMask, doc_QQuickItem_containmentMask);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickItem_setContainmentMask, "setContainmentMask(self, QObject)");

extern "C" {static PyObject *meth_QQuickItem_setContainmentMask(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setContainmentMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObject* a0;
        PyObject *a0Keep;
         ::QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QQuickItem, &sipCpp, &a0Keep, sipType_QObject, &a0))
        {
            sipCpp->setContainmentMask(a0);

            sipKeepReference(sipSelf, -1, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setContainmentMask, doc_QQuickItem_setContainmentMask);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QQuickItem(void *, const sipTypeDef *);}
static void *cast_QQuickItem(void *sipCppV, const sipTypeDef *targetType)
{
     ::QQuickItem *sipCpp = reinterpret_cast< ::QQuickItem *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QQmlParserStatus)
        return static_cast< ::QQmlParserStatus *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQuickItem(void *, int);}
static void release_QQuickItem(void *sipCppV, int)
{
     ::QQuickItem *sipCpp = reinterpret_cast< ::QQuickItem *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QQuickItem(sipSimpleWrapper *);}
static void dealloc_QQuickItem(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQQuickItem *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQuickItem(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QQuickItem(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQuickItem(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQQuickItem *sipCpp = SIP_NULLPTR;

    {
         ::QQuickItem* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QQuickItem, &a0, sipOwner))
        {
            sipCpp = new sipQQuickItem(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QQuickItem[] = {{3, 0, 0}, {7, 2, 1}};


static PyMethodDef methods_QQuickItem[] = {
    {SIP_MLNAME_CAST(sipName_acceptHoverEvents), meth_QQuickItem_acceptHoverEvents, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_acceptHoverEvents)},
    {SIP_MLNAME_CAST(sipName_acceptTouchEvents), meth_QQuickItem_acceptTouchEvents, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_acceptTouchEvents)},
    {SIP_MLNAME_CAST(sipName_acceptedMouseButtons), meth_QQuickItem_acceptedMouseButtons, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_acceptedMouseButtons)},
    {SIP_MLNAME_CAST(sipName_activeFocusOnTab), meth_QQuickItem_activeFocusOnTab, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_activeFocusOnTab)},
    {SIP_MLNAME_CAST(sipName_antialiasing), meth_QQuickItem_antialiasing, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_antialiasing)},
    {SIP_MLNAME_CAST(sipName_baselineOffset), meth_QQuickItem_baselineOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_baselineOffset)},
    {SIP_MLNAME_CAST(sipName_childAt), meth_QQuickItem_childAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_childAt)},
    {SIP_MLNAME_CAST(sipName_childItems), meth_QQuickItem_childItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_childItems)},
    {SIP_MLNAME_CAST(sipName_childMouseEventFilter), meth_QQuickItem_childMouseEventFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_childMouseEventFilter)},
    {SIP_MLNAME_CAST(sipName_childrenRect), meth_QQuickItem_childrenRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_childrenRect)},
    {SIP_MLNAME_CAST(sipName_classBegin), meth_QQuickItem_classBegin, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_classBegin)},
    {SIP_MLNAME_CAST(sipName_clip), meth_QQuickItem_clip, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_clip)},
    {SIP_MLNAME_CAST(sipName_componentComplete), meth_QQuickItem_componentComplete, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_componentComplete)},
    {SIP_MLNAME_CAST(sipName_containmentMask), meth_QQuickItem_containmentMask, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_containmentMask)},
    {SIP_MLNAME_CAST(sipName_contains), meth_QQuickItem_contains, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_contains)},
    {SIP_MLNAME_CAST(sipName_cursor), meth_QQuickItem_cursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_cursor)},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), meth_QQuickItem_dragEnterEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_dragEnterEvent)},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), meth_QQuickItem_dragLeaveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_dragLeaveEvent)},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), meth_QQuickItem_dragMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_dragMoveEvent)},
    {SIP_MLNAME_CAST(sipName_dropEvent), meth_QQuickItem_dropEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_dropEvent)},
    {SIP_MLNAME_CAST(sipName_event), meth_QQuickItem_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_event)},
    {SIP_MLNAME_CAST(sipName_filtersChildMouseEvents), meth_QQuickItem_filtersChildMouseEvents, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_filtersChildMouseEvents)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QQuickItem_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_flags)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), meth_QQuickItem_focusInEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_focusInEvent)},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), meth_QQuickItem_focusOutEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_focusOutEvent)},
    {SIP_MLNAME_CAST(sipName_forceActiveFocus), meth_QQuickItem_forceActiveFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_forceActiveFocus)},
    {SIP_MLNAME_CAST(sipName_geometryChanged), meth_QQuickItem_geometryChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_geometryChanged)},
    {SIP_MLNAME_CAST(sipName_grabMouse), meth_QQuickItem_grabMouse, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_grabMouse)},
    {SIP_MLNAME_CAST(sipName_grabToImage), SIP_MLMETH_CAST(meth_QQuickItem_grabToImage), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_grabToImage)},
    {SIP_MLNAME_CAST(sipName_grabTouchPoints), meth_QQuickItem_grabTouchPoints, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_grabTouchPoints)},
    {SIP_MLNAME_CAST(sipName_hasActiveFocus), meth_QQuickItem_hasActiveFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_hasActiveFocus)},
    {SIP_MLNAME_CAST(sipName_hasFocus), meth_QQuickItem_hasFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_hasFocus)},
    {SIP_MLNAME_CAST(sipName_height), meth_QQuickItem_height, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_height)},
    {SIP_MLNAME_CAST(sipName_heightValid), meth_QQuickItem_heightValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_heightValid)},
    {SIP_MLNAME_CAST(sipName_hoverEnterEvent), meth_QQuickItem_hoverEnterEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_hoverEnterEvent)},
    {SIP_MLNAME_CAST(sipName_hoverLeaveEvent), meth_QQuickItem_hoverLeaveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_hoverLeaveEvent)},
    {SIP_MLNAME_CAST(sipName_hoverMoveEvent), meth_QQuickItem_hoverMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_hoverMoveEvent)},
    {SIP_MLNAME_CAST(sipName_implicitHeight), meth_QQuickItem_implicitHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_implicitHeight)},
    {SIP_MLNAME_CAST(sipName_implicitWidth), meth_QQuickItem_implicitWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_implicitWidth)},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), meth_QQuickItem_inputMethodEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_inputMethodEvent)},
    {SIP_MLNAME_CAST(sipName_inputMethodQuery), meth_QQuickItem_inputMethodQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_inputMethodQuery)},
    {SIP_MLNAME_CAST(sipName_isAncestorOf), meth_QQuickItem_isAncestorOf, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_isAncestorOf)},
    {SIP_MLNAME_CAST(sipName_isComponentComplete), meth_QQuickItem_isComponentComplete, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_isComponentComplete)},
    {SIP_MLNAME_CAST(sipName_isEnabled), meth_QQuickItem_isEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_isEnabled)},
    {SIP_MLNAME_CAST(sipName_isFocusScope), meth_QQuickItem_isFocusScope, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_isFocusScope)},
    {SIP_MLNAME_CAST(sipName_isTextureProvider), meth_QQuickItem_isTextureProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_isTextureProvider)},
    {SIP_MLNAME_CAST(sipName_isVisible), meth_QQuickItem_isVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_isVisible)},
    {SIP_MLNAME_CAST(sipName_itemChange), meth_QQuickItem_itemChange, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_itemChange)},
    {SIP_MLNAME_CAST(sipName_keepMouseGrab), meth_QQuickItem_keepMouseGrab, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_keepMouseGrab)},
    {SIP_MLNAME_CAST(sipName_keepTouchGrab), meth_QQuickItem_keepTouchGrab, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_keepTouchGrab)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QQuickItem_keyPressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), meth_QQuickItem_keyReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_keyReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_mapFromGlobal), meth_QQuickItem_mapFromGlobal, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_mapFromGlobal)},
    {SIP_MLNAME_CAST(sipName_mapFromItem), meth_QQuickItem_mapFromItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_mapFromItem)},
    {SIP_MLNAME_CAST(sipName_mapFromScene), meth_QQuickItem_mapFromScene, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_mapFromScene)},
    {SIP_MLNAME_CAST(sipName_mapRectFromItem), meth_QQuickItem_mapRectFromItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_mapRectFromItem)},
    {SIP_MLNAME_CAST(sipName_mapRectFromScene), meth_QQuickItem_mapRectFromScene, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_mapRectFromScene)},
    {SIP_MLNAME_CAST(sipName_mapRectToItem), meth_QQuickItem_mapRectToItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_mapRectToItem)},
    {SIP_MLNAME_CAST(sipName_mapRectToScene), meth_QQuickItem_mapRectToScene, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_mapRectToScene)},
    {SIP_MLNAME_CAST(sipName_mapToGlobal), meth_QQuickItem_mapToGlobal, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_mapToGlobal)},
    {SIP_MLNAME_CAST(sipName_mapToItem), meth_QQuickItem_mapToItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_mapToItem)},
    {SIP_MLNAME_CAST(sipName_mapToScene), meth_QQuickItem_mapToScene, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_mapToScene)},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), meth_QQuickItem_mouseDoubleClickEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_mouseDoubleClickEvent)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_QQuickItem_mouseMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QQuickItem_mousePressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QQuickItem_mouseReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_mouseUngrabEvent), meth_QQuickItem_mouseUngrabEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_mouseUngrabEvent)},
    {SIP_MLNAME_CAST(sipName_nextItemInFocusChain), SIP_MLMETH_CAST(meth_QQuickItem_nextItemInFocusChain), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_nextItemInFocusChain)},
    {SIP_MLNAME_CAST(sipName_opacity), meth_QQuickItem_opacity, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_opacity)},
    {SIP_MLNAME_CAST(sipName_parentItem), meth_QQuickItem_parentItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_parentItem)},
    {SIP_MLNAME_CAST(sipName_polish), meth_QQuickItem_polish, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_polish)},
    {SIP_MLNAME_CAST(sipName_releaseResources), meth_QQuickItem_releaseResources, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_releaseResources)},
    {SIP_MLNAME_CAST(sipName_resetAntialiasing), meth_QQuickItem_resetAntialiasing, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_resetAntialiasing)},
    {SIP_MLNAME_CAST(sipName_resetHeight), meth_QQuickItem_resetHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_resetHeight)},
    {SIP_MLNAME_CAST(sipName_resetWidth), meth_QQuickItem_resetWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_resetWidth)},
    {SIP_MLNAME_CAST(sipName_rotation), meth_QQuickItem_rotation, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_rotation)},
    {SIP_MLNAME_CAST(sipName_scale), meth_QQuickItem_scale, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_scale)},
    {SIP_MLNAME_CAST(sipName_scopedFocusItem), meth_QQuickItem_scopedFocusItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_scopedFocusItem)},
    {SIP_MLNAME_CAST(sipName_setAcceptHoverEvents), meth_QQuickItem_setAcceptHoverEvents, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setAcceptHoverEvents)},
    {SIP_MLNAME_CAST(sipName_setAcceptTouchEvents), meth_QQuickItem_setAcceptTouchEvents, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setAcceptTouchEvents)},
    {SIP_MLNAME_CAST(sipName_setAcceptedMouseButtons), meth_QQuickItem_setAcceptedMouseButtons, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setAcceptedMouseButtons)},
    {SIP_MLNAME_CAST(sipName_setActiveFocusOnTab), meth_QQuickItem_setActiveFocusOnTab, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setActiveFocusOnTab)},
    {SIP_MLNAME_CAST(sipName_setAntialiasing), meth_QQuickItem_setAntialiasing, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setAntialiasing)},
    {SIP_MLNAME_CAST(sipName_setBaselineOffset), meth_QQuickItem_setBaselineOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setBaselineOffset)},
    {SIP_MLNAME_CAST(sipName_setClip), meth_QQuickItem_setClip, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setClip)},
    {SIP_MLNAME_CAST(sipName_setContainmentMask), meth_QQuickItem_setContainmentMask, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setContainmentMask)},
    {SIP_MLNAME_CAST(sipName_setCursor), meth_QQuickItem_setCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setCursor)},
    {SIP_MLNAME_CAST(sipName_setEnabled), meth_QQuickItem_setEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setEnabled)},
    {SIP_MLNAME_CAST(sipName_setFiltersChildMouseEvents), meth_QQuickItem_setFiltersChildMouseEvents, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setFiltersChildMouseEvents)},
    {SIP_MLNAME_CAST(sipName_setFlag), SIP_MLMETH_CAST(meth_QQuickItem_setFlag), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_setFlag)},
    {SIP_MLNAME_CAST(sipName_setFlags), meth_QQuickItem_setFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setFlags)},
    {SIP_MLNAME_CAST(sipName_setFocus), meth_QQuickItem_setFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setFocus)},
    {SIP_MLNAME_CAST(sipName_setHeight), meth_QQuickItem_setHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setHeight)},
    {SIP_MLNAME_CAST(sipName_setImplicitHeight), meth_QQuickItem_setImplicitHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setImplicitHeight)},
    {SIP_MLNAME_CAST(sipName_setImplicitWidth), meth_QQuickItem_setImplicitWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setImplicitWidth)},
    {SIP_MLNAME_CAST(sipName_setKeepMouseGrab), meth_QQuickItem_setKeepMouseGrab, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setKeepMouseGrab)},
    {SIP_MLNAME_CAST(sipName_setKeepTouchGrab), meth_QQuickItem_setKeepTouchGrab, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setKeepTouchGrab)},
    {SIP_MLNAME_CAST(sipName_setOpacity), meth_QQuickItem_setOpacity, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setOpacity)},
    {SIP_MLNAME_CAST(sipName_setParentItem), meth_QQuickItem_setParentItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setParentItem)},
    {SIP_MLNAME_CAST(sipName_setRotation), meth_QQuickItem_setRotation, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setRotation)},
    {SIP_MLNAME_CAST(sipName_setScale), meth_QQuickItem_setScale, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setScale)},
    {SIP_MLNAME_CAST(sipName_setSmooth), meth_QQuickItem_setSmooth, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setSmooth)},
    {SIP_MLNAME_CAST(sipName_setState), meth_QQuickItem_setState, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setState)},
    {SIP_MLNAME_CAST(sipName_setTransformOrigin), meth_QQuickItem_setTransformOrigin, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setTransformOrigin)},
    {SIP_MLNAME_CAST(sipName_setVisible), meth_QQuickItem_setVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setVisible)},
    {SIP_MLNAME_CAST(sipName_setWidth), meth_QQuickItem_setWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setWidth)},
    {SIP_MLNAME_CAST(sipName_setX), meth_QQuickItem_setX, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setX)},
    {SIP_MLNAME_CAST(sipName_setY), meth_QQuickItem_setY, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setY)},
    {SIP_MLNAME_CAST(sipName_setZ), meth_QQuickItem_setZ, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setZ)},
    {SIP_MLNAME_CAST(sipName_size), meth_QQuickItem_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_size)},
    {SIP_MLNAME_CAST(sipName_smooth), meth_QQuickItem_smooth, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_smooth)},
    {SIP_MLNAME_CAST(sipName_stackAfter), meth_QQuickItem_stackAfter, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_stackAfter)},
    {SIP_MLNAME_CAST(sipName_stackBefore), meth_QQuickItem_stackBefore, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_stackBefore)},
    {SIP_MLNAME_CAST(sipName_state), meth_QQuickItem_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_state)},
    {SIP_MLNAME_CAST(sipName_textureProvider), meth_QQuickItem_textureProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_textureProvider)},
    {SIP_MLNAME_CAST(sipName_touchEvent), meth_QQuickItem_touchEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_touchEvent)},
    {SIP_MLNAME_CAST(sipName_touchUngrabEvent), meth_QQuickItem_touchUngrabEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_touchUngrabEvent)},
    {SIP_MLNAME_CAST(sipName_transformOrigin), meth_QQuickItem_transformOrigin, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_transformOrigin)},
    {SIP_MLNAME_CAST(sipName_ungrabMouse), meth_QQuickItem_ungrabMouse, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_ungrabMouse)},
    {SIP_MLNAME_CAST(sipName_ungrabTouchPoints), meth_QQuickItem_ungrabTouchPoints, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_ungrabTouchPoints)},
    {SIP_MLNAME_CAST(sipName_unsetCursor), meth_QQuickItem_unsetCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_unsetCursor)},
    {SIP_MLNAME_CAST(sipName_update), meth_QQuickItem_update, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_update)},
    {SIP_MLNAME_CAST(sipName_updateInputMethod), SIP_MLMETH_CAST(meth_QQuickItem_updateInputMethod), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_updateInputMethod)},
    {SIP_MLNAME_CAST(sipName_updatePaintNode), meth_QQuickItem_updatePaintNode, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_updatePaintNode)},
    {SIP_MLNAME_CAST(sipName_updatePolish), meth_QQuickItem_updatePolish, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_updatePolish)},
    {SIP_MLNAME_CAST(sipName_wheelEvent), meth_QQuickItem_wheelEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_wheelEvent)},
    {SIP_MLNAME_CAST(sipName_width), meth_QQuickItem_width, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_width)},
    {SIP_MLNAME_CAST(sipName_widthValid), meth_QQuickItem_widthValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_widthValid)},
    {SIP_MLNAME_CAST(sipName_window), meth_QQuickItem_window, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_window)},
    {SIP_MLNAME_CAST(sipName_x), meth_QQuickItem_x, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_x)},
    {SIP_MLNAME_CAST(sipName_y), meth_QQuickItem_y, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_y)},
    {SIP_MLNAME_CAST(sipName_z), meth_QQuickItem_z, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_z)}
};

static sipEnumMemberDef enummembers_QQuickItem[] = {
    {sipName_Bottom, static_cast<int>( ::QQuickItem::Bottom), 12},
    {sipName_BottomLeft, static_cast<int>( ::QQuickItem::BottomLeft), 12},
    {sipName_BottomRight, static_cast<int>( ::QQuickItem::BottomRight), 12},
    {sipName_Center, static_cast<int>( ::QQuickItem::Center), 12},
    {sipName_ItemAcceptsDrops, static_cast<int>( ::QQuickItem::ItemAcceptsDrops), 8},
    {sipName_ItemAcceptsInputMethod, static_cast<int>( ::QQuickItem::ItemAcceptsInputMethod), 8},
    {sipName_ItemActiveFocusHasChanged, static_cast<int>( ::QQuickItem::ItemActiveFocusHasChanged), 10},
    {sipName_ItemAntialiasingHasChanged, static_cast<int>( ::QQuickItem::ItemAntialiasingHasChanged), 10},
    {sipName_ItemChildAddedChange, static_cast<int>( ::QQuickItem::ItemChildAddedChange), 10},
    {sipName_ItemChildRemovedChange, static_cast<int>( ::QQuickItem::ItemChildRemovedChange), 10},
    {sipName_ItemClipsChildrenToShape, static_cast<int>( ::QQuickItem::ItemClipsChildrenToShape), 8},
    {sipName_ItemDevicePixelRatioHasChanged, static_cast<int>( ::QQuickItem::ItemDevicePixelRatioHasChanged), 10},
    {sipName_ItemEnabledHasChanged, static_cast<int>( ::QQuickItem::ItemEnabledHasChanged), 10},
    {sipName_ItemHasContents, static_cast<int>( ::QQuickItem::ItemHasContents), 8},
    {sipName_ItemIsFocusScope, static_cast<int>( ::QQuickItem::ItemIsFocusScope), 8},
    {sipName_ItemOpacityHasChanged, static_cast<int>( ::QQuickItem::ItemOpacityHasChanged), 10},
    {sipName_ItemParentHasChanged, static_cast<int>( ::QQuickItem::ItemParentHasChanged), 10},
    {sipName_ItemRotationHasChanged, static_cast<int>( ::QQuickItem::ItemRotationHasChanged), 10},
    {sipName_ItemSceneChange, static_cast<int>( ::QQuickItem::ItemSceneChange), 10},
    {sipName_ItemVisibleHasChanged, static_cast<int>( ::QQuickItem::ItemVisibleHasChanged), 10},
    {sipName_Left, static_cast<int>( ::QQuickItem::Left), 12},
    {sipName_Right, static_cast<int>( ::QQuickItem::Right), 12},
    {sipName_Top, static_cast<int>( ::QQuickItem::Top), 12},
    {sipName_TopLeft, static_cast<int>( ::QQuickItem::TopLeft), 12},
    {sipName_TopRight, static_cast<int>( ::QQuickItem::TopRight), 12},
};

PyDoc_STRVAR(doc_QQuickItem, "\1QQuickItem(parent: QQuickItem = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QQuickItem[] = {
    {"containmentMaskChanged()", "\1containmentMaskChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"windowChanged(QQuickWindow*)", "\1windowChanged(self, QQuickWindow)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QQuickItem = {
    & ::QQuickItem::staticMetaObject,
    0,
    signals_QQuickItem,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QQuickItem = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQuickItem,
        {SIP_NULLPTR},
        &plugin_QQuickItem
    },
    {
        sipNameNr_QQuickItem,
        {0, 0, 1},
        132, methods_QQuickItem,
        25, enummembers_QQuickItem,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QQuickItem,
    -1,
    -1,
    supers_QQuickItem,
    SIP_NULLPTR,
    init_type_QQuickItem,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQuickItem,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QQuickItem,
    cast_QQuickItem,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
