/*
 * Module code.
 *
 * Generated by SIP 4.19.15
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtQuick.h"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 32 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 35 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickpainteditem.sip"
#include <qquickpainteditem.h>
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgabstractrenderer.sip"
#include <qsgabstractrenderer.h>
#line 41 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgimagenode.sip"
#include <qsgimagenode.h>
#line 44 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 165 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 47 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 33 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 52 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgrendererinterface.sip"
#include <qsgrendererinterface.h>
#line 55 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgrendernode.sip"
#include <qsgrendernode.h>
#line 58 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgsimpletexturenode.sip"
#include <qsgsimpletexturenode.h>
#line 61 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 64 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 67 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 70 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 73 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 76 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 79 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 82 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgtextureprovider.sip"
#include <qsgtextureprovider.h>
#line 85 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 65 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 90 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 93 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 500 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 96 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 375 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 99 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 205 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 102 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 253 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 105 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 717 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 108 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 238 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 599 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 114 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 583 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 117 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 610 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 120 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 561 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 123 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 126 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 185 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 131 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickframebufferobject.sip"
#include <qquickframebufferobject.h>
#line 35 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickframebufferobject.sip"
#include <qquickframebufferobject.h>
#line 136 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 28 "sip/QtGui/qopenglframebufferobject.sip"
#include <qopenglframebufferobject.h>
#line 139 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 142 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickframebufferobject.sip"
#include <qquickframebufferobject.h>
#line 145 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgtexture.sip"
#include <qsgtexture.h>
#line 148 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickwindow.sip"
#include <qquickwindow.h>
#line 151 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtGui/qimage.sip"
#include <qimage.h>
#line 154 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtQml/qqmlengine.sip"
#include <qqmlengine.h>
#line 157 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtQml/qqmlengine.sip"
#include <qqmlengine.h>
#line 160 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 163 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 166 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickimageprovider.sip"
#include <qquickimageprovider.h>
#line 169 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 62 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickimageprovider.sip"
#include <qquickimageprovider.h>
#line 172 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 175 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 178 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 181 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 296 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 184 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 462 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 187 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 451 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 190 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 403 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 193 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 416 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 196 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 786 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 199 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtGui/qsurfaceformat.sip"
#include <qsurfaceformat.h>
#line 202 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtGui/qsurface.sip"
#include <qsurface.h>
#line 205 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 158 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 208 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 211 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgimagenode.sip"
#include <qsgimagenode.h>
#line 214 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 217 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgrendererinterface.sip"
#include <qsgrendererinterface.h>
#line 220 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgrendererinterface.sip"
#include <qsgrendererinterface.h>
#line 223 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgrendernode.sip"
#include <qsgrendernode.h>
#line 226 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgrendernode.sip"
#include <qsgrendernode.h>
#line 58 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgrendernode.sip"
#include <qsgrendernode.h>
#line 231 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgrendernode.sip"
#include <qsgrendernode.h>
#line 234 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 30 "sip/QtGui/qmatrix4x4.sip"
#include <qmatrix4x4.h>
#line 237 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 240 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 243 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 246 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickpainteditem.sip"
#include <qquickpainteditem.h>
#line 249 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickwindow.sip"
#include <qquickwindow.h>
#line 252 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgabstractrenderer.sip"
#include <qsgabstractrenderer.h>
#line 255 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgengine.sip"
#include <qsgengine.h>
#line 258 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
#include <qsggeometry.h>
#line 55 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
#include <qsggeometry.h>
#line 263 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
#include <qsggeometry.h>
#line 237 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
#include <qsggeometry.h>
#line 268 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
#include <qsggeometry.h>
#line 248 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
#include <qsggeometry.h>
#line 273 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
#include <qsggeometry.h>
#line 261 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
#include <qsggeometry.h>
#line 278 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 33 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 283 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 165 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 286 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 289 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 292 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgsimpletexturenode.sip"
#include <qsgsimpletexturenode.h>
#line 295 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

/* Define the strings used by this module. */
const char sipStrings_QtQuick[] = {
    'Q', 'S', 'G', 'S', 'i', 'm', 'p', 'l', 'e', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'N', 'o', 'd', 'e', ':', ':', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'C', 'o', 'o', 'r', 'd', 'i', 'n', 'a', 't', 'e', 's', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'M', 'o', 'd', 'e', 0,
    'Q', 'S', 'G', 'S', 'i', 'm', 'p', 'l', 'e', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'N', 'o', 'd', 'e', ':', ':', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'C', 'o', 'o', 'r', 'd', 'i', 'n', 'a', 't', 'e', 's', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'F', 'l', 'a', 'g', 0,
    'Q', 'S', 'G', 'I', 'm', 'a', 'g', 'e', 'N', 'o', 'd', 'e', ':', ':', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'C', 'o', 'o', 'r', 'd', 'i', 'n', 'a', 't', 'e', 's', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'M', 'o', 'd', 'e', 0,
    'Q', 'S', 'G', 'I', 'm', 'a', 'g', 'e', 'N', 'o', 'd', 'e', ':', ':', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'C', 'o', 'o', 'r', 'd', 'i', 'n', 'a', 't', 'e', 's', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'F', 'l', 'a', 'g', 0,
    'Q', 'S', 'G', 'R', 'e', 'n', 'd', 'e', 'r', 'e', 'r', 'I', 'n', 't', 'e', 'r', 'f', 'a', 'c', 'e', ':', ':', 'S', 'h', 'a', 'd', 'e', 'r', 'C', 'o', 'm', 'p', 'i', 'l', 'a', 't', 'i', 'o', 'n', 'T', 'y', 'p', 'e', 's', 0,
    'Q', 'S', 'G', 'R', 'e', 'n', 'd', 'e', 'r', 'e', 'r', 'I', 'n', 't', 'e', 'r', 'f', 'a', 'c', 'e', ':', ':', 'S', 'h', 'a', 'd', 'e', 'r', 'C', 'o', 'm', 'p', 'i', 'l', 'a', 't', 'i', 'o', 'n', 'T', 'y', 'p', 'e', 0,
    'Q', 'S', 'G', 'M', 'a', 't', 'e', 'r', 'i', 'a', 'l', 'S', 'h', 'a', 'd', 'e', 'r', ':', ':', 'R', 'e', 'n', 'd', 'e', 'r', 'S', 't', 'a', 't', 'e', ':', ':', 'D', 'i', 'r', 't', 'y', 'S', 't', 'a', 't', 'e', 's', 0,
    'Q', 'S', 'G', 'M', 'a', 't', 'e', 'r', 'i', 'a', 'l', 'S', 'h', 'a', 'd', 'e', 'r', ':', ':', 'R', 'e', 'n', 'd', 'e', 'r', 'S', 't', 'a', 't', 'e', ':', ':', 'D', 'i', 'r', 't', 'y', 'S', 't', 'a', 't', 'e', 0,
    'Q', 'S', 'G', 'R', 'e', 'n', 'd', 'e', 'r', 'e', 'r', 'I', 'n', 't', 'e', 'r', 'f', 'a', 'c', 'e', ':', ':', 'S', 'h', 'a', 'd', 'e', 'r', 'S', 'o', 'u', 'r', 'c', 'e', 'T', 'y', 'p', 'e', 's', 0,
    'Q', 'S', 'G', 'R', 'e', 'n', 'd', 'e', 'r', 'e', 'r', 'I', 'n', 't', 'e', 'r', 'f', 'a', 'c', 'e', ':', ':', 'S', 'h', 'a', 'd', 'e', 'r', 'S', 'o', 'u', 'r', 'c', 'e', 'T', 'y', 'p', 'e', 0,
    'Q', 'Q', 'u', 'i', 'c', 'k', 'P', 'a', 'i', 'n', 't', 'e', 'd', 'I', 't', 'e', 'm', ':', ':', 'P', 'e', 'r', 'f', 'o', 'r', 'm', 'a', 'n', 'c', 'e', 'H', 'i', 'n', 't', 's', 0,
    'Q', 'Q', 'u', 'i', 'c', 'k', 'W', 'i', 'n', 'd', 'o', 'w', ':', ':', 'C', 'r', 'e', 'a', 't', 'e', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'O', 'p', 't', 'i', 'o', 'n', 's', 0,
    'Q', 'Q', 'u', 'i', 'c', 'k', 'P', 'a', 'i', 'n', 't', 'e', 'd', 'I', 't', 'e', 'm', ':', ':', 'P', 'e', 'r', 'f', 'o', 'r', 'm', 'a', 'n', 'c', 'e', 'H', 'i', 'n', 't', 0,
    'Q', 'S', 'G', 'R', 'e', 'n', 'd', 'e', 'r', 'e', 'r', 'I', 'n', 't', 'e', 'r', 'f', 'a', 'c', 'e', ':', ':', 'G', 'r', 'a', 'p', 'h', 'i', 'c', 's', 'A', 'p', 'i', 0,
    'R', 'e', 'q', 'u', 'i', 'r', 'e', 's', 'F', 'u', 'l', 'l', 'M', 'a', 't', 'r', 'i', 'x', 'E', 'x', 'c', 'e', 'p', 't', 'T', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 's', '_', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'd', 'P', 'o', 'i', 'n', 't', '2', 'D', 0,
    'Q', 'S', 'G', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'R', 'e', 'n', 'd', 'e', 'r', 'e', 'r', ':', ':', 'C', 'l', 'e', 'a', 'r', 'M', 'o', 'd', 'e', 'B', 'i', 't', 0,
    'Q', 'Q', 'u', 'i', 'c', 'k', 'W', 'i', 'n', 'd', 'o', 'w', ':', ':', 'C', 'r', 'e', 'a', 't', 'e', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'O', 'p', 't', 'i', 'o', 'n', 0,
    'Q', 'Q', 'u', 'i', 'c', 'k', 'F', 'r', 'a', 'm', 'e', 'b', 'u', 'f', 'f', 'e', 'r', 'O', 'b', 'j', 'e', 'c', 't', ':', ':', 'R', 'e', 'n', 'd', 'e', 'r', 'e', 'r', 0,
    'Q', 'S', 'G', 'R', 'e', 'n', 'd', 'e', 'r', 'e', 'r', 'I', 'n', 't', 'e', 'r', 'f', 'a', 'c', 'e', ':', ':', 'S', 'h', 'a', 'd', 'e', 'r', 'T', 'y', 'p', 'e', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 's', '_', 'C', 'o', 'l', 'o', 'r', 'e', 'd', 'P', 'o', 'i', 'n', 't', '2', 'D', 0,
    'Q', 'S', 'G', 'E', 'n', 'g', 'i', 'n', 'e', ':', ':', 'C', 'r', 'e', 'a', 't', 'e', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'O', 'p', 't', 'i', 'o', 'n', 's', 0,
    'Q', 'Q', 'u', 'i', 'c', 'k', 'P', 'a', 'i', 'n', 't', 'e', 'd', 'I', 't', 'e', 'm', ':', ':', 'R', 'e', 'n', 'd', 'e', 'r', 'T', 'a', 'r', 'g', 'e', 't', 0,
    'Q', 'Q', 'u', 'i', 'c', 'k', 'I', 't', 'e', 'm', ':', ':', 'U', 'p', 'd', 'a', 't', 'e', 'P', 'a', 'i', 'n', 't', 'N', 'o', 'd', 'e', 'D', 'a', 't', 'a', 0,
    'Q', 'S', 'G', 'R', 'e', 'n', 'd', 'e', 'r', 'e', 'r', 'I', 'n', 't', 'e', 'r', 'f', 'a', 'c', 'e', ':', ':', 'R', 'e', 's', 'o', 'u', 'r', 'c', 'e', 0,
    'Q', 'S', 'G', 'M', 'a', 't', 'e', 'r', 'i', 'a', 'l', 'S', 'h', 'a', 'd', 'e', 'r', ':', ':', 'R', 'e', 'n', 'd', 'e', 'r', 'S', 't', 'a', 't', 'e', 0,
    's', 'e', 't', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'C', 'o', 'o', 'r', 'd', 'i', 'n', 'a', 't', 'e', 's', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 0,
    'Q', 'S', 'G', 'E', 'n', 'g', 'i', 'n', 'e', ':', ':', 'C', 'r', 'e', 'a', 't', 'e', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'O', 'p', 't', 'i', 'o', 'n', 0,
    'Q', 'S', 'G', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'R', 'e', 'n', 'd', 'e', 'r', 'e', 'r', ':', ':', 'C', 'l', 'e', 'a', 'r', 'M', 'o', 'd', 'e', 0,
    'I', 't', 'e', 'm', 'D', 'e', 'v', 'i', 'c', 'e', 'P', 'i', 'x', 'e', 'l', 'R', 'a', 't', 'i', 'o', 'H', 'a', 's', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'c', 'o', 'n', 'v', 'e', 'r', 't', 'T', 'o', 'N', 'o', 'r', 'm', 'a', 'l', 'i', 'z', 'e', 'd', 'S', 'o', 'u', 'r', 'c', 'e', 'R', 'e', 'c', 't', 0,
    'Q', 'S', 'G', 'R', 'e', 'n', 'd', 'e', 'r', 'N', 'o', 'd', 'e', ':', ':', 'R', 'e', 'n', 'd', 'e', 'r', 'i', 'n', 'g', 'F', 'l', 'a', 'g', 's', 0,
    'Q', 'Q', 'u', 'i', 'c', 'k', 'W', 'i', 'n', 'd', 'o', 'w', ':', ':', 'S', 'c', 'e', 'n', 'e', 'G', 'r', 'a', 'p', 'h', 'E', 'r', 'r', 'o', 'r', 0,
    't', 'e', 'x', 't', 'u', 'r', 'e', 'F', 'o', 'l', 'l', 'o', 'w', 's', 'I', 't', 'e', 'm', 'S', 'i', 'z', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'Q', 'S', 'G', 'R', 'e', 'n', 'd', 'e', 'r', 'N', 'o', 'd', 'e', ':', ':', 'R', 'e', 'n', 'd', 'e', 'r', 'i', 'n', 'g', 'F', 'l', 'a', 'g', 0,
    'Q', 'S', 'G', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', ':', ':', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'd', 'P', 'o', 'i', 'n', 't', '2', 'D', 0,
    'Q', 'Q', 'u', 'i', 'c', 'k', 'W', 'i', 'n', 'd', 'o', 'w', ':', ':', 'T', 'e', 'x', 't', 'R', 'e', 'n', 'd', 'e', 'r', 'T', 'y', 'p', 'e', 0,
    'Q', 'S', 'G', 'T', 'e', 'x', 't', 'u', 'r', 'e', ':', ':', 'A', 'n', 'i', 's', 'o', 't', 'r', 'o', 'p', 'y', 'L', 'e', 'v', 'e', 'l', 0,
    't', 'e', 'x', 't', 'u', 'r', 'e', 'C', 'o', 'o', 'r', 'd', 'i', 'n', 'a', 't', 'e', 's', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 0,
    'v', 'e', 'r', 't', 'e', 'x', 'D', 'a', 't', 'a', 'A', 's', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'd', 'P', 'o', 'i', 'n', 't', '2', 'D', 0,
    'Q', 'S', 'G', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', ':', ':', 'C', 'o', 'l', 'o', 'r', 'e', 'd', 'P', 'o', 'i', 'n', 't', '2', 'D', 0,
    'Q', 'Q', 'u', 'i', 'c', 'k', 'I', 't', 'e', 'm', ':', ':', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'O', 'r', 'i', 'g', 'i', 'n', 0,
    'i', 'n', 'v', 'a', 'l', 'i', 'd', 'a', 't', 'e', 'F', 'r', 'a', 'm', 'e', 'b', 'u', 'f', 'f', 'e', 'r', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'Q', 'S', 'G', 'R', 'e', 'n', 'd', 'e', 'r', 'N', 'o', 'd', 'e', ':', ':', 'R', 'e', 'n', 'd', 'e', 'r', 'S', 't', 'a', 't', 'e', 0,
    'Q', 'S', 'G', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', ':', ':', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 'T', 'y', 'p', 'e', 0,
    'v', 'e', 'r', 't', 'e', 'x', 'D', 'a', 't', 'a', 'A', 's', 'C', 'o', 'l', 'o', 'r', 'e', 'd', 'P', 'o', 'i', 'n', 't', '2', 'D', 0,
    'u', 'p', 'd', 'a', 't', 'e', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'd', 'R', 'e', 'c', 't', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 0,
    's', 'e', 't', 'P', 'e', 'r', 's', 'i', 's', 't', 'e', 'n', 't', 'O', 'p', 'e', 'n', 'G', 'L', 'C', 'o', 'n', 't', 'e', 'x', 't', 0,
    'I', 'n', 'v', 'e', 'r', 't', 'e', 'd', 'Y', 'F', 'r', 'a', 'm', 'e', 'b', 'u', 'f', 'f', 'e', 'r', 'O', 'b', 'j', 'e', 'c', 't', 0,
    's', 'e', 't', 'F', 'i', 'l', 't', 'e', 'r', 's', 'C', 'h', 'i', 'l', 'd', 'M', 'o', 'u', 's', 'e', 'E', 'v', 'e', 'n', 't', 's', 0,
    'Q', 'Q', 'u', 'i', 'c', 'k', 'I', 't', 'e', 'm', ':', ':', 'I', 't', 'e', 'm', 'C', 'h', 'a', 'n', 'g', 'e', 'D', 'a', 't', 'a', 0,
    'I', 't', 'e', 'm', 'A', 'n', 't', 'i', 'a', 'l', 'i', 'a', 's', 'i', 'n', 'g', 'H', 'a', 's', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'Q', 'S', 'G', 'R', 'e', 'n', 'd', 'e', 'r', 'N', 'o', 'd', 'e', ':', ':', 'S', 't', 'a', 't', 'e', 'F', 'l', 'a', 'g', 's', 0,
    'i', 's', 'C', 'a', 'c', 'h', 'e', 'd', 'M', 'a', 't', 'e', 'r', 'i', 'a', 'l', 'D', 'a', 't', 'a', 'D', 'i', 'r', 't', 'y', 0,
    'u', 'p', 'd', 'a', 't', 'e', 'C', 'o', 'l', 'o', 'r', 'e', 'd', 'R', 'e', 'c', 't', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 's', '_', 'P', 'o', 'i', 'n', 't', '2', 'D', 0,
    'Q', 'S', 'G', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', ':', ':', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 'S', 'e', 't', 0,
    's', 'e', 't', 'P', 'r', 'o', 'j', 'e', 'c', 't', 'i', 'o', 'n', 'M', 'a', 't', 'r', 'i', 'x', 'T', 'o', 'R', 'e', 'c', 't', 0,
    'e', 'f', 'f', 'e', 'c', 't', 'i', 'v', 'e', 'D', 'e', 'v', 'i', 'c', 'e', 'P', 'i', 'x', 'e', 'l', 'R', 'a', 't', 'i', 'o', 0,
    'Q', 'Q', 'u', 'i', 'c', 'k', 'W', 'i', 'n', 'd', 'o', 'w', ':', ':', 'R', 'e', 'n', 'd', 'e', 'r', 'S', 't', 'a', 'g', 'e', 0,
    'i', 's', 'P', 'e', 'r', 's', 'i', 's', 't', 'e', 'n', 't', 'O', 'p', 'e', 'n', 'G', 'L', 'C', 'o', 'n', 't', 'e', 'x', 't', 0,
    'I', 't', 'e', 'm', 'A', 'c', 't', 'i', 'v', 'e', 'F', 'o', 'c', 'u', 's', 'H', 'a', 's', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    's', 'e', 't', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'F', 'o', 'l', 'l', 'o', 'w', 's', 'I', 't', 'e', 'm', 'S', 'i', 'z', 'e', 0,
    'Q', 'S', 'G', 'O', 'p', 'a', 'q', 'u', 'e', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'M', 'a', 't', 'e', 'r', 'i', 'a', 'l', 0,
    'n', 'o', 'r', 'm', 'a', 'l', 'i', 'z', 'e', 'd', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'S', 'u', 'b', 'R', 'e', 'c', 't', 0,
    'Q', 'S', 'G', 'R', 'e', 'n', 'd', 'e', 'r', 'N', 'o', 'd', 'e', ':', ':', 'S', 't', 'a', 't', 'e', 'F', 'l', 'a', 'g', 0,
    'Q', 'S', 'G', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', ':', ':', 'D', 'r', 'a', 'w', 'i', 'n', 'g', 'M', 'o', 'd', 'e', 0,
    'Q', 'S', 'G', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', ':', ':', 'D', 'a', 't', 'a', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'B', 'e', 'f', 'o', 'r', 'e', 'S', 'y', 'n', 'c', 'h', 'r', 'o', 'n', 'i', 'z', 'i', 'n', 'g', 'S', 't', 'a', 'g', 'e', 0,
    'I', 't', 'e', 'm', 'C', 'l', 'i', 'p', 's', 'C', 'h', 'i', 'l', 'd', 'r', 'e', 'n', 'T', 'o', 'S', 'h', 'a', 'p', 'e', 0,
    'Q', 'Q', 'u', 'i', 'c', 'k', 'A', 's', 'y', 'n', 'c', 'I', 'm', 'a', 'g', 'e', 'P', 'r', 'o', 'v', 'i', 'd', 'e', 'r', 0,
    'D', 'i', 'r', 't', 'y', 'C', 'a', 'c', 'h', 'e', 'd', 'M', 'a', 't', 'e', 'r', 'i', 'a', 'l', 'D', 'a', 't', 'a', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'W', 'i', 't', 'h', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 'T', 'y', 'p', 'e', 0,
    'i', 's', 'S', 'c', 'e', 'n', 'e', 'G', 'r', 'a', 'p', 'h', 'I', 'n', 'i', 't', 'i', 'a', 'l', 'i', 'z', 'e', 'd', 0,
    'A', 'f', 't', 'e', 'r', 'S', 'y', 'n', 'c', 'h', 'r', 'o', 'n', 'i', 'z', 'i', 'n', 'g', 'S', 't', 'a', 'g', 'e', 0,
    's', 'e', 't', 'P', 'e', 'r', 's', 'i', 's', 't', 'e', 'n', 't', 'S', 'c', 'e', 'n', 'e', 'G', 'r', 'a', 'p', 'h', 0,
    's', 'e', 't', 'C', 'l', 'e', 'a', 'r', 'B', 'e', 'f', 'o', 'r', 'e', 'R', 'e', 'n', 'd', 'e', 'r', 'i', 'n', 'g', 0,
    'f', 'i', 'l', 't', 'e', 'r', 's', 'C', 'h', 'i', 'l', 'd', 'M', 'o', 'u', 's', 'e', 'E', 'v', 'e', 'n', 't', 's', 0,
    's', 'e', 't', 'A', 'c', 'c', 'e', 'p', 't', 'e', 'd', 'M', 'o', 'u', 's', 'e', 'B', 'u', 't', 't', 'o', 'n', 's', 0,
    'm', 'i', 'r', 'r', 'o', 'r', 'V', 'e', 'r', 't', 'i', 'c', 'a', 'l', 'l', 'y', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'F', 'r', 'a', 'm', 'e', 'b', 'u', 'f', 'f', 'e', 'r', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'Q', 'Q', 'u', 'i', 'c', 'k', 'F', 'r', 'a', 'm', 'e', 'b', 'u', 'f', 'f', 'e', 'r', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'Q', 'S', 'G', 'V', 'e', 'r', 't', 'e', 'x', 'C', 'o', 'l', 'o', 'r', 'M', 'a', 't', 'e', 'r', 'i', 'a', 'l', 0,
    'U', 'n', 'k', 'n', 'o', 'w', 'n', 'S', 'h', 'a', 'd', 'i', 'n', 'g', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 0,
    'Q', 'S', 'G', 'N', 'o', 'd', 'e', ':', ':', 'D', 'i', 'r', 't', 'y', 'S', 't', 'a', 't', 'e', 'B', 'i', 't', 0,
    'Q', 'S', 'G', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', ':', ':', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    'a', 'c', 't', 'i', 'v', 'e', 'F', 'o', 'c', 'u', 's', 'I', 't', 'e', 'm', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'i', 's', 'P', 'e', 'r', 's', 'i', 's', 't', 'e', 'n', 't', 'S', 'c', 'e', 'n', 'e', 'G', 'r', 'a', 'p', 'h', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'F', 'r', 'o', 'm', 'I', 'm', 'a', 'g', 'e', 0,
    'T', 'e', 'x', 't', 'u', 'r', 'e', 'H', 'a', 's', 'A', 'l', 'p', 'h', 'a', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 0,
    'Q', 'Q', 'u', 'i', 'c', 'k', 'V', 'i', 'e', 'w', ':', ':', 'R', 'e', 's', 'i', 'z', 'e', 'M', 'o', 'd', 'e', 0,
    'c', 'o', 'n', 't', 'a', 'i', 'n', 'm', 'e', 'n', 't', 'M', 'a', 's', 'k', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'I', 't', 'e', 'm', 'R', 'o', 't', 'a', 't', 'i', 'o', 'n', 'H', 'a', 's', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'I', 't', 'e', 'm', 'C', 'h', 'i', 'l', 'd', 'R', 'e', 'm', 'o', 'v', 'e', 'd', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'Q', 'Q', 'u', 'i', 'c', 'k', 'I', 't', 'e', 'm', ':', ':', 'I', 't', 'e', 'm', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'I', 't', 'e', 'm', 'A', 'c', 'c', 'e', 'p', 't', 's', 'I', 'n', 'p', 'u', 't', 'M', 'e', 't', 'h', 'o', 'd', 0,
    't', 'e', 'x', 't', 'u', 'r', 'e', 'F', 'a', 'c', 't', 'o', 'r', 'y', 'F', 'o', 'r', 'I', 'm', 'a', 'g', 'e', 0,
    't', 'e', 'x', 't', 'u', 'r', 'e', 'F', 'o', 'l', 'l', 'o', 'w', 's', 'I', 't', 'e', 'm', 'S', 'i', 'z', 'e', 0,
    's', 'e', 't', 'H', 'o', 'r', 'i', 'z', 'o', 'n', 't', 'a', 'l', 'W', 'r', 'a', 'p', 'M', 'o', 'd', 'e', 0,
    'Q', 'S', 'G', 'T', 'e', 'x', 't', 'u', 'r', 'e', ':', ':', 'F', 'i', 'l', 't', 'e', 'r', 'i', 'n', 'g', 0,
    's', 'h', 'a', 'd', 'e', 'r', 'C', 'o', 'm', 'p', 'i', 'l', 'a', 't', 'i', 'o', 'n', 'T', 'y', 'p', 'e', 0,
    'i', 'n', 's', 'e', 'r', 't', 'C', 'h', 'i', 'l', 'd', 'N', 'o', 'd', 'e', 'B', 'e', 'f', 'o', 'r', 'e', 0,
    's', 'c', 'e', 'n', 'e', 'G', 'r', 'a', 'p', 'h', 'A', 'b', 'o', 'u', 't', 'T', 'o', 'S', 't', 'o', 'p', 0,
    's', 'e', 't', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'A', 'l', 'p', 'h', 'a', 'B', 'u', 'f', 'f', 'e', 'r', 0,
    'h', 'a', 's', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'A', 'l', 'p', 'h', 'a', 'B', 'u', 'f', 'f', 'e', 'r', 0,
    's', 'c', 'e', 'n', 'e', 'G', 'r', 'a', 'p', 'h', 'I', 'n', 'v', 'a', 'l', 'i', 'd', 'a', 't', 'e', 'd', 0,
    's', 'c', 'e', 'n', 'e', 'G', 'r', 'a', 'p', 'h', 'I', 'n', 'i', 't', 'i', 'a', 'l', 'i', 'z', 'e', 'd', 0,
    'c', 'h', 'i', 'l', 'd', 'M', 'o', 'u', 's', 'e', 'E', 'v', 'e', 'n', 't', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'I', 't', 'e', 'm', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 'H', 'a', 's', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'I', 't', 'e', 'm', 'O', 'p', 'a', 'c', 'i', 't', 'y', 'H', 'a', 's', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'I', 't', 'e', 'm', 'V', 'i', 's', 'i', 'b', 'l', 'e', 'H', 'a', 's', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'm', 'o', 'u', 's', 'e', 'D', 'o', 'u', 'b', 'l', 'e', 'C', 'l', 'i', 'c', 'k', 'E', 'v', 'e', 'n', 't', 0,
    'Q', 'S', 'G', 'T', 'e', 'x', 't', 'u', 'r', 'e', ':', ':', 'W', 'r', 'a', 'p', 'M', 'o', 'd', 'e', 0,
    'Q', 'S', 'G', 'S', 'i', 'm', 'p', 'l', 'e', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'N', 'o', 'd', 'e', 0,
    'B', 'o', 'u', 'n', 'd', 'e', 'd', 'R', 'e', 'c', 't', 'R', 'e', 'n', 'd', 'e', 'r', 'i', 'n', 'g', 0,
    'C', 'o', 'm', 'm', 'a', 'n', 'd', 'Q', 'u', 'e', 'u', 'e', 'R', 'e', 's', 'o', 'u', 'r', 'c', 'e', 0,
    'Q', 'S', 'G', 'R', 'e', 'n', 'd', 'e', 'r', 'e', 'r', 'I', 'n', 't', 'e', 'r', 'f', 'a', 'c', 'e', 0,
    'Q', 'S', 'G', 'B', 'a', 's', 'i', 'c', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'N', 'o', 'd', 'e', 0,
    'i', 'n', 's', 'e', 'r', 't', 'C', 'h', 'i', 'l', 'd', 'N', 'o', 'd', 'e', 'A', 'f', 't', 'e', 'r', 0,
    's', 'e', 't', 'S', 'h', 'a', 'd', 'e', 'r', 'S', 'o', 'u', 'r', 'c', 'e', 'F', 'i', 'l', 'e', 's', 0,
    's', 'e', 't', 'V', 'e', 'r', 't', 'e', 'x', 'D', 'a', 't', 'a', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'Q', 'S', 'G', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', ':', ':', 'P', 'o', 'i', 'n', 't', '2', 'D', 0,
    'Q', 'S', 'G', 'F', 'l', 'a', 't', 'C', 'o', 'l', 'o', 'r', 'M', 'a', 't', 'e', 'r', 'i', 'a', 'l', 0,
    's', 'e', 't', 'S', 'c', 'e', 'n', 'e', 'G', 'r', 'a', 'p', 'h', 'B', 'a', 'c', 'k', 'e', 'n', 'd', 0,
    'B', 'e', 'f', 'o', 'r', 'e', 'R', 'e', 'n', 'd', 'e', 'r', 'i', 'n', 'g', 'S', 't', 'a', 'g', 'e', 0,
    'o', 'p', 'e', 'n', 'g', 'l', 'C', 'o', 'n', 't', 'e', 'x', 't', 'C', 'r', 'e', 'a', 't', 'e', 'd', 0,
    'c', 'l', 'e', 'a', 'r', 'B', 'e', 'f', 'o', 'r', 'e', 'R', 'e', 'n', 'd', 'e', 'r', 'i', 'n', 'g', 0,
    'T', 'e', 'x', 't', 'u', 'r', 'e', 'O', 'w', 'n', 's', 'G', 'L', 'T', 'e', 'x', 't', 'u', 'r', 'e', 0,
    'S', 'i', 'z', 'e', 'R', 'o', 'o', 't', 'O', 'b', 'j', 'e', 'c', 't', 'T', 'o', 'V', 'i', 'e', 'w', 0,
    'S', 'i', 'z', 'e', 'V', 'i', 'e', 'w', 'T', 'o', 'R', 'o', 'o', 't', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'c', 'o', 'n', 't', 'e', 'n', 't', 's', 'S', 'c', 'a', 'l', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'c', 'o', 'n', 't', 'e', 'n', 't', 's', 'B', 'o', 'u', 'n', 'd', 'i', 'n', 'g', 'R', 'e', 'c', 't', 0,
    'Q', 'Q', 'u', 'i', 'c', 'k', 'I', 't', 'e', 'm', 'G', 'r', 'a', 'b', 'R', 'e', 's', 'u', 'l', 't', 0,
    's', 'e', 't', 'A', 'c', 'c', 'e', 'p', 't', 'T', 'o', 'u', 'c', 'h', 'E', 'v', 'e', 'n', 't', 's', 0,
    'n', 'e', 'x', 't', 'I', 't', 'e', 'm', 'I', 'n', 'F', 'o', 'c', 'u', 's', 'C', 'h', 'a', 'i', 'n', 0,
    's', 'e', 't', 'A', 'c', 'c', 'e', 'p', 't', 'H', 'o', 'v', 'e', 'r', 'E', 'v', 'e', 'n', 't', 's', 0,
    'a', 'c', 'c', 'e', 'p', 't', 'e', 'd', 'M', 'o', 'u', 's', 'e', 'B', 'u', 't', 't', 'o', 'n', 's', 0,
    'I', 't', 'e', 'm', 'P', 'a', 'r', 'e', 'n', 't', 'H', 'a', 's', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'I', 't', 'e', 'm', 'C', 'h', 'i', 'l', 'd', 'A', 'd', 'd', 'e', 'd', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'r', 'e', 'q', 'u', 'e', 's', 't', 'I', 'm', 'a', 'g', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', 0,
    'Q', 'Q', 'u', 'i', 'c', 'k', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'F', 'a', 'c', 't', 'o', 'r', 'y', 0,
    'i', 'n', 'c', 'u', 'b', 'a', 't', 'i', 'o', 'n', 'C', 'o', 'n', 't', 'r', 'o', 'l', 'l', 'e', 'r', 0,
    's', 'e', 't', 'V', 'e', 'r', 't', 'i', 'c', 'a', 'l', 'W', 'r', 'a', 'p', 'M', 'o', 'd', 'e', 0,
    'D', 'e', 'p', 't', 'h', 'A', 'w', 'a', 'r', 'e', 'R', 'e', 'n', 'd', 'e', 'r', 'i', 'n', 'g', 0,
    'C', 'o', 'm', 'm', 'a', 'n', 'd', 'L', 'i', 's', 't', 'R', 'e', 's', 'o', 'u', 'r', 'c', 'e', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'A', 'l', 'l', 'C', 'h', 'i', 'l', 'd', 'N', 'o', 'd', 'e', 's', 0,
    'Q', 'S', 'G', 'N', 'o', 'd', 'e', ':', ':', 'D', 'i', 'r', 't', 'y', 'S', 't', 'a', 't', 'e', 0,
    'R', 'e', 'q', 'u', 'i', 'r', 'e', 's', 'D', 'e', 't', 'e', 'r', 'm', 'i', 'n', 'a', 'n', 't', 0,
    's', 'e', 't', 'S', 'h', 'a', 'd', 'e', 'r', 'S', 'o', 'u', 'r', 'c', 'e', 'F', 'i', 'l', 'e', 0,
    'v', 'e', 'r', 't', 'e', 'x', 'D', 'a', 't', 'a', 'A', 's', 'P', 'o', 'i', 'n', 't', '2', 'D', 0,
    'm', 'a', 'r', 'k', 'V', 'e', 'r', 't', 'e', 'x', 'D', 'a', 't', 'a', 'D', 'i', 'r', 't', 'y', 0,
    's', 'e', 't', 'I', 'n', 'd', 'e', 'x', 'D', 'a', 't', 'a', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'A', 'l', 'w', 'a', 'y', 's', 'U', 'p', 'l', 'o', 'a', 'd', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    's', 'e', 't', 'P', 'r', 'o', 'j', 'e', 'c', 't', 'i', 'o', 'n', 'M', 'a', 't', 'r', 'i', 'x', 0,
    'Q', 'S', 'G', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'R', 'e', 'n', 'd', 'e', 'r', 'e', 'r', 0,
    'N', 'a', 't', 'i', 'v', 'e', 'T', 'e', 'x', 't', 'R', 'e', 'n', 'd', 'e', 'r', 'i', 'n', 'g', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'R', 'e', 'c', 't', 'a', 'n', 'g', 'l', 'e', 'N', 'o', 'd', 'e', 0,
    'A', 'f', 't', 'e', 'r', 'R', 'e', 'n', 'd', 'e', 'r', 'i', 'n', 'g', 'S', 't', 'a', 'g', 'e', 0,
    'C', 'o', 'n', 't', 'e', 'x', 't', 'N', 'o', 't', 'A', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 0,
    'b', 'e', 'f', 'o', 'r', 'e', 'S', 'y', 'n', 'c', 'h', 'r', 'o', 'n', 'i', 'z', 'i', 'n', 'g', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'F', 'r', 'o', 'm', 'I', 'd', 0,
    'Q', 'Q', 'u', 'i', 'c', 'k', 'R', 'e', 'n', 'd', 'e', 'r', 'C', 'o', 'n', 't', 'r', 'o', 'l', 0,
    'r', 'e', 'n', 'd', 'e', 'r', 'T', 'a', 'r', 'g', 'e', 't', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'c', 'o', 'n', 't', 'e', 'n', 't', 's', 'S', 'i', 'z', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    's', 'e', 't', 'P', 'e', 'r', 'f', 'o', 'r', 'm', 'a', 'n', 'c', 'e', 'H', 'i', 'n', 't', 's', 0,
    's', 'e', 't', 'A', 'c', 't', 'i', 'v', 'e', 'F', 'o', 'c', 'u', 's', 'O', 'n', 'T', 'a', 'b', 0,
    'i', 's', 'C', 'o', 'm', 'p', 'o', 'n', 'e', 'n', 't', 'C', 'o', 'm', 'p', 'l', 'e', 't', 'e', 0,
    'Q', 'Q', 'u', 'i', 'c', 'k', 'I', 'm', 'a', 'g', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', 0,
    'Q', 'Q', 'u', 'i', 'c', 'k', 'I', 'm', 'a', 'g', 'e', 'P', 'r', 'o', 'v', 'i', 'd', 'e', 'r', 0,
    's', 'e', 't', 'M', 'i', 'r', 'r', 'o', 'r', 'V', 'e', 'r', 't', 'i', 'c', 'a', 'l', 'l', 'y', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'Q', 'u', 'i', 'c', 'k', 'I', 't', 'e', 'm', '*', '>', 0,
    'Q', 'S', 'G', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'P', 'r', 'o', 'v', 'i', 'd', 'e', 'r', 0,
    'Q', 'S', 'G', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'M', 'a', 't', 'e', 'r', 'i', 'a', 'l', 0,
    's', 'e', 't', 'A', 'n', 'i', 's', 'o', 't', 'r', 'o', 'p', 'y', 'L', 'e', 'v', 'e', 'l', 0,
    'h', 'o', 'r', 'i', 'z', 'o', 'n', 't', 'a', 'l', 'W', 'r', 'a', 'p', 'M', 'o', 'd', 'e', 0,
    'S', 'h', 'a', 'd', 'e', 'r', 'S', 'o', 'u', 'r', 'c', 'e', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'O', 'f', 'f', 'l', 'i', 'n', 'e', 'C', 'o', 'm', 'p', 'i', 'l', 'a', 't', 'i', 'o', 'n', 0,
    'R', 'u', 'n', 't', 'i', 'm', 'e', 'C', 'o', 'm', 'p', 'i', 'l', 'a', 't', 'i', 'o', 'n', 0,
    'O', 'w', 'n', 's', 'O', 'p', 'a', 'q', 'u', 'e', 'M', 'a', 't', 'e', 'r', 'i', 'a', 'l', 0,
    'Q', 'S', 'G', 'M', 'a', 't', 'e', 'r', 'i', 'a', 'l', ':', ':', 'F', 'l', 'a', 'g', 's', 0,
    'R', 'e', 'q', 'u', 'i', 'r', 'e', 's', 'F', 'u', 'l', 'l', 'M', 'a', 't', 'r', 'i', 'x', 0,
    'M', 'i', 'r', 'r', 'o', 'r', 'H', 'o', 'r', 'i', 'z', 'o', 'n', 't', 'a', 'l', 'l', 'y', 0,
    's', 'e', 't', 'M', 'i', 'p', 'm', 'a', 'p', 'F', 'i', 'l', 't', 'e', 'r', 'i', 'n', 'g', 0,
    'T', 'e', 'x', 'C', 'o', 'o', 'r', 'd', '2', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    'T', 'e', 'x', 'C', 'o', 'o', 'r', 'd', '1', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    'm', 'a', 'r', 'k', 'I', 'n', 'd', 'e', 'x', 'D', 'a', 't', 'a', 'D', 'i', 'r', 't', 'y', 0,
    'u', 'p', 'd', 'a', 't', 'e', 'R', 'e', 'c', 't', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 0,
    'i', 's', 'V', 'e', 'r', 't', 'e', 'x', 'C', 'o', 'o', 'r', 'd', 'i', 'n', 'a', 't', 'e', 0,
    'C', 'l', 'e', 'a', 'r', 'S', 't', 'e', 'n', 'c', 'i', 'l', 'B', 'u', 'f', 'f', 'e', 'r', 0,
    'a', 'f', 't', 'e', 'r', 'S', 'y', 'n', 'c', 'h', 'r', 'o', 'n', 'i', 'z', 'i', 'n', 'g', 0,
    'T', 'e', 'x', 't', 'u', 'r', 'e', 'C', 'a', 'n', 'U', 's', 'e', 'A', 't', 'l', 'a', 's', 0,
    'Q', 'Q', 'u', 'i', 'c', 'k', 'V', 'i', 'e', 'w', ':', ':', 'S', 't', 'a', 't', 'u', 's', 0,
    'Q', 'Q', 'u', 'i', 'c', 'k', 'T', 'e', 'x', 't', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 0,
    't', 'e', 'x', 't', 'u', 'r', 'e', 'S', 'i', 'z', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    's', 'e', 't', 'C', 'o', 'n', 't', 'a', 'i', 'n', 'm', 'e', 'n', 't', 'M', 'a', 's', 'k', 0,
    's', 'e', 't', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'O', 'r', 'i', 'g', 'i', 'n', 0,
    's', 'e', 't', 'P', 'e', 'r', 'f', 'o', 'r', 'm', 'a', 'n', 'c', 'e', 'H', 'i', 'n', 't', 0,
    'Q', 'S', 'G', 'D', 'y', 'n', 'a', 'm', 'i', 'c', 'T', 'e', 'x', 't', 'u', 'r', 'e', 0,
    'u', 'p', 'd', 'a', 't', 'e', 'B', 'i', 'n', 'd', 'O', 'p', 't', 'i', 'o', 'n', 's', 0,
    'Q', 'S', 'G', 'S', 'i', 'm', 'p', 'l', 'e', 'R', 'e', 'c', 't', 'N', 'o', 'd', 'e', 0,
    'R', 'e', 'n', 'd', 'e', 'r', 'T', 'a', 'r', 'g', 'e', 't', 'S', 't', 'a', 't', 'e', 0,
    's', 'e', 't', 'O', 'p', 'a', 'q', 'u', 'e', 'M', 'a', 't', 'e', 'r', 'i', 'a', 'l', 0,
    'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'N', 'o', 'd', 'e', 'T', 'y', 'p', 'e', 0,
    'Q', 'S', 'G', 'N', 'o', 'd', 'e', ':', ':', 'N', 'o', 'd', 'e', 'T', 'y', 'p', 'e', 0,
    'C', 'u', 's', 't', 'o', 'm', 'C', 'o', 'm', 'p', 'i', 'l', 'e', 'S', 't', 'e', 'p', 0,
    'Q', 'S', 'G', 'M', 'a', 't', 'e', 'r', 'i', 'a', 'l', ':', ':', 'F', 'l', 'a', 'g', 0,
    'Q', 'S', 'G', 'M', 'a', 't', 'e', 'r', 'i', 'a', 'l', 'S', 'h', 'a', 'd', 'e', 'r', 0,
    'U', 'n', 's', 'i', 'g', 'n', 'e', 'd', 'S', 'h', 'o', 'r', 't', 'T', 'y', 'p', 'e', 0,
    'Q', 'S', 'G', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', ':', ':', 'T', 'y', 'p', 'e', 0,
    'D', 'r', 'a', 'w', 'T', 'r', 'i', 'a', 'n', 'g', 'l', 'e', 'S', 't', 'r', 'i', 'p', 0,
    'T', 'e', 'x', 'C', 'o', 'o', 'r', 'd', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    'i', 'n', 'd', 'e', 'x', 'D', 'a', 't', 'a', 'A', 's', 'U', 'S', 'h', 'o', 'r', 't', 0,
    'v', 'e', 'r', 't', 'e', 'x', 'D', 'a', 't', 'a', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'G', 'L', '_', 'T', 'R', 'I', 'A', 'N', 'G', 'L', 'E', '_', 'S', 'T', 'R', 'I', 'P', 0,
    's', 'c', 'e', 'n', 'e', 'G', 'r', 'a', 'p', 'h', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    's', 'e', 't', 'T', 'e', 'x', 't', 'R', 'e', 'n', 'd', 'e', 'r', 'T', 'y', 'p', 'e', 0,
    's', 'c', 'e', 'n', 'e', 'G', 'r', 'a', 'p', 'h', 'B', 'a', 'c', 'k', 'e', 'n', 'd', 0,
    'r', 'e', 'n', 'd', 'e', 'r', 'e', 'r', 'I', 'n', 't', 'e', 'r', 'f', 'a', 'c', 'e', 0,
    's', 'c', 'h', 'e', 'd', 'u', 'l', 'e', 'R', 'e', 'n', 'd', 'e', 'r', 'J', 'o', 'b', 0,
    'T', 'e', 'x', 't', 'u', 'r', 'e', 'H', 'a', 's', 'M', 'i', 'p', 'm', 'a', 'p', 's', 0,
    'r', 'e', 's', 'e', 't', 'C', 'o', 'n', 't', 'e', 'n', 't', 's', 'S', 'i', 'z', 'e', 0,
    's', 'e', 't', 'O', 'p', 'a', 'q', 'u', 'e', 'P', 'a', 'i', 'n', 't', 'i', 'n', 'g', 0,
    'Q', 'Q', 'u', 'i', 'c', 'k', 'P', 'a', 'i', 'n', 't', 'e', 'd', 'I', 't', 'e', 'm', 0,
    'a', 'c', 'c', 'e', 'p', 't', 'T', 'o', 'u', 'c', 'h', 'E', 'v', 'e', 'n', 't', 's', 0,
    'r', 'e', 's', 'e', 't', 'A', 'n', 't', 'i', 'a', 'l', 'i', 'a', 's', 'i', 'n', 'g', 0,
    'u', 'p', 'd', 'a', 't', 'e', 'I', 'n', 'p', 'u', 't', 'M', 'e', 't', 'h', 'o', 'd', 0,
    'u', 'n', 'g', 'r', 'a', 'b', 'T', 'o', 'u', 'c', 'h', 'P', 'o', 'i', 'n', 't', 's', 0,
    'a', 'c', 'c', 'e', 'p', 't', 'H', 'o', 'v', 'e', 'r', 'E', 'v', 'e', 'n', 't', 's', 0,
    's', 'e', 't', 'I', 'm', 'p', 'l', 'i', 'c', 'i', 't', 'H', 'e', 'i', 'g', 'h', 't', 0,
    's', 'e', 't', 'B', 'a', 's', 'e', 'l', 'i', 'n', 'e', 'O', 'f', 'f', 's', 'e', 't', 0,
    'Q', 'Q', 'u', 'i', 'c', 'k', 'I', 't', 'e', 'm', ':', ':', 'F', 'l', 'a', 'g', 's', 0,
    'i', 's', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'P', 'r', 'o', 'v', 'i', 'd', 'e', 'r', 0,
    'f', 'r', 'a', 'm', 'e', 'b', 'u', 'f', 'f', 'e', 'r', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'c', 'o', 'm', 'p', 'o', 'n', 'e', 'n', 't', 'C', 'o', 'm', 'p', 'l', 'e', 't', 'e', 0,
    'm', 'o', 'u', 's', 'e', 'R', 'e', 'l', 'e', 'a', 's', 'e', 'E', 'v', 'e', 'n', 't', 0,
    's', 'i', 'p', '.', 's', 'i', 'm', 'p', 'l', 'e', 'w', 'r', 'a', 'p', 'p', 'e', 'r', 0,
    'v', 'e', 'r', 't', 'i', 'c', 'a', 'l', 'W', 'r', 'a', 'p', 'M', 'o', 'd', 'e', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'd', 'F', 'r', 'o', 'm', 'A', 't', 'l', 'a', 's', 0,
    'i', 'n', 'h', 'e', 'r', 'i', 't', 'e', 'd', 'O', 'p', 'a', 'c', 'i', 't', 'y', 0,
    's', 'h', 'a', 'd', 'e', 'r', 'S', 'o', 'u', 'r', 'c', 'e', 'T', 'y', 'p', 'e', 0,
    'Q', 'S', 'G', 'R', 'e', 'c', 't', 'a', 'n', 'g', 'l', 'e', 'N', 'o', 'd', 'e', 0,
    'Q', 'S', 'G', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'N', 'o', 'd', 'e', 0,
    's', 'e', 't', 'I', 's', 'R', 'e', 'c', 't', 'a', 'n', 'g', 'u', 'l', 'a', 'r', 0,
    'i', 's', 'S', 'u', 'b', 't', 'r', 'e', 'e', 'B', 'l', 'o', 'c', 'k', 'e', 'd', 0,
    'p', 'r', 'e', 'p', 'e', 'n', 'd', 'C', 'h', 'i', 'l', 'd', 'N', 'o', 'd', 'e', 0,
    'D', 'i', 'r', 't', 'y', 'N', 'o', 'd', 'e', 'R', 'e', 'm', 'o', 'v', 'e', 'd', 0,
    'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'N', 'o', 'd', 'e', 'T', 'y', 'p', 'e', 0,
    'U', 'n', 's', 'i', 'g', 'n', 'e', 'd', 'B', 'y', 't', 'e', 'T', 'y', 'p', 'e', 0,
    'U', 'n', 'k', 'n', 'o', 'w', 'n', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    'i', 'n', 'd', 'e', 'x', 'D', 'a', 't', 'a', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'p', 'r', 'o', 'j', 'e', 'c', 't', 'i', 'o', 'n', 'M', 'a', 't', 'r', 'i', 'x', 0,
    'C', 'l', 'e', 'a', 'r', 'D', 'e', 'p', 't', 'h', 'B', 'u', 'f', 'f', 'e', 'r', 0,
    'C', 'l', 'e', 'a', 'r', 'C', 'o', 'l', 'o', 'r', 'B', 'u', 'f', 'f', 'e', 'r', 0,
    'Q', 'Q', 'u', 'i', 'c', 'k', 'C', 'l', 'o', 's', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'r', 'e', 's', 'e', 't', 'O', 'p', 'e', 'n', 'G', 'L', 'S', 't', 'a', 't', 'e', 0,
    'r', 'e', 'n', 'd', 'e', 'r', 'T', 'a', 'r', 'g', 'e', 't', 'S', 'i', 'z', 'e', 0,
    'm', 'o', 'u', 's', 'e', 'G', 'r', 'a', 'b', 'b', 'e', 'r', 'I', 't', 'e', 'm', 0,
    'f', 'i', 'l', 'l', 'C', 'o', 'l', 'o', 'r', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    's', 'e', 't', 'C', 'o', 'n', 't', 'e', 'n', 't', 's', 'S', 'c', 'a', 'l', 'e', 0,
    'p', 'e', 'r', 'f', 'o', 'r', 'm', 'a', 'n', 'c', 'e', 'H', 'i', 'n', 't', 's', 0,
    'a', 'c', 't', 'i', 'v', 'e', 'F', 'o', 'c', 'u', 's', 'O', 'n', 'T', 'a', 'b', 0,
    't', 'o', 'u', 'c', 'h', 'U', 'n', 'g', 'r', 'a', 'b', 'E', 'v', 'e', 'n', 't', 0,
    'm', 'o', 'u', 's', 'e', 'U', 'n', 'g', 'r', 'a', 'b', 'E', 'v', 'e', 'n', 't', 0,
    'i', 'n', 'p', 'u', 't', 'M', 'e', 't', 'h', 'o', 'd', 'E', 'v', 'e', 'n', 't', 0,
    'i', 'n', 'p', 'u', 't', 'M', 'e', 't', 'h', 'o', 'd', 'Q', 'u', 'e', 'r', 'y', 0,
    'f', 'o', 'r', 'c', 'e', 'A', 'c', 't', 'i', 'v', 'e', 'F', 'o', 'c', 'u', 's', 0,
    'm', 'a', 'p', 'R', 'e', 'c', 't', 'F', 'r', 'o', 'm', 'S', 'c', 'e', 'n', 'e', 0,
    's', 'e', 't', 'K', 'e', 'e', 'p', 'T', 'o', 'u', 'c', 'h', 'G', 'r', 'a', 'b', 0,
    's', 'e', 't', 'K', 'e', 'e', 'p', 'M', 'o', 'u', 's', 'e', 'G', 'r', 'a', 'b', 0,
    's', 'e', 't', 'I', 'm', 'p', 'l', 'i', 'c', 'i', 't', 'W', 'i', 'd', 't', 'h', 0,
    'I', 't', 'e', 'm', 'A', 'c', 'c', 'e', 'p', 't', 's', 'D', 'r', 'o', 'p', 's', 0,
    'I', 't', 'e', 'm', 'I', 's', 'F', 'o', 'c', 'u', 's', 'S', 'c', 'o', 'p', 'e', 0,
    'Q', 'Q', 'u', 'i', 'c', 'k', 'I', 't', 'e', 'm', ':', ':', 'F', 'l', 'a', 'g', 0,
    't', 'e', 'x', 't', 'u', 'r', 'e', 'B', 'y', 't', 'e', 'C', 'o', 'u', 'n', 't', 0,
    'm', 'i', 'r', 'r', 'o', 'r', 'V', 'e', 'r', 't', 'i', 'c', 'a', 'l', 'l', 'y', 0,
    'r', 'e', 'l', 'e', 'a', 's', 'e', 'R', 'e', 's', 'o', 'u', 'r', 'c', 'e', 's', 0,
    'd', 'e', 'v', 'i', 'c', 'e', 'P', 'i', 'x', 'e', 'l', 'R', 'a', 't', 'i', 'o', 0,
    'd', 'i', 's', 'c', 'o', 'n', 'n', 'e', 'c', 't', 'N', 'o', 't', 'i', 'f', 'y', 0,
    'a', 'n', 'i', 's', 'o', 't', 'r', 'o', 'p', 'y', 'L', 'e', 'v', 'e', 'l', 0,
    'O', 'p', 'a', 'q', 'u', 'e', 'R', 'e', 'n', 'd', 'e', 'r', 'i', 'n', 'g', 0,
    'P', 'a', 'i', 'n', 't', 'e', 'r', 'R', 'e', 's', 'o', 'u', 'r', 'c', 'e', 0,
    'p', 'r', 'e', 'v', 'i', 'o', 'u', 's', 'S', 'i', 'b', 'l', 'i', 'n', 'g', 0,
    'a', 'p', 'p', 'e', 'n', 'd', 'C', 'h', 'i', 'l', 'd', 'N', 'o', 'd', 'e', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'C', 'h', 'i', 'l', 'd', 'N', 'o', 'd', 'e', 0,
    'O', 'p', 'a', 'c', 'i', 't', 'y', 'N', 'o', 'd', 'e', 'T', 'y', 'p', 'e', 0,
    'Q', 'S', 'G', 'M', 'a', 't', 'e', 'r', 'i', 'a', 'l', 'T', 'y', 'p', 'e', 0,
    'm', 'o', 'd', 'e', 'l', 'V', 'i', 'e', 'w', 'M', 'a', 't', 'r', 'i', 'x', 0,
    'r', 'e', 'b', 'u', 'i', 'l', 'd', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 0,
    'm', 'i', 'p', 'm', 'a', 'p', 'F', 'i', 'l', 't', 'e', 'r', 'i', 'n', 'g', 0,
    'Q', 'S', 'G', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'N', 'o', 'd', 'e', 0,
    'U', 'n', 's', 'i', 'g', 'n', 'e', 'd', 'I', 'n', 't', 'T', 'y', 'p', 'e', 0,
    'D', 'r', 'a', 'w', 'T', 'r', 'i', 'a', 'n', 'g', 'l', 'e', 'F', 'a', 'n', 0,
    'i', 'n', 'd', 'e', 'x', 'D', 'a', 't', 'a', 'A', 's', 'U', 'I', 'n', 't', 0,
    'G', 'L', '_', 'T', 'R', 'I', 'A', 'N', 'G', 'L', 'E', '_', 'F', 'A', 'N', 0,
    's', 'e', 't', 'V', 'i', 'e', 'w', 'p', 'o', 'r', 't', 'R', 'e', 'c', 't', 0,
    'Q', 't', 'T', 'e', 'x', 't', 'R', 'e', 'n', 'd', 'e', 'r', 'i', 'n', 'g', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'I', 'm', 'a', 'g', 'e', 'N', 'o', 'd', 'e', 0,
    's', 'c', 'e', 'n', 'e', 'G', 'r', 'a', 'p', 'h', 'E', 'r', 'r', 'o', 'r', 0,
    'b', 'e', 'f', 'o', 'r', 'e', 'R', 'e', 'n', 'd', 'e', 'r', 'i', 'n', 'g', 0,
    'a', 'c', 't', 'i', 'v', 'e', 'F', 'o', 'c', 'u', 's', 'I', 't', 'e', 'm', 0,
    'T', 'e', 'x', 't', 'u', 'r', 'e', 'I', 's', 'O', 'p', 'a', 'q', 'u', 'e', 0,
    'r', 'e', 'n', 'd', 'e', 'r', 'R', 'e', 'q', 'u', 'e', 's', 't', 'e', 'd', 0,
    'r', 'e', 'n', 'd', 'e', 'r', 'W', 'i', 'n', 'd', 'o', 'w', 'F', 'o', 'r', 0,
    's', 'e', 't', 'R', 'e', 'n', 'd', 'e', 'r', 'T', 'a', 'r', 'g', 'e', 't', 0,
    'F', 'a', 's', 't', 'F', 'B', 'O', 'R', 'e', 's', 'i', 'z', 'i', 'n', 'g', 0,
    'c', 'o', 'n', 't', 'a', 'i', 'n', 'm', 'e', 'n', 't', 'M', 'a', 's', 'k', 0,
    'h', 'o', 'v', 'e', 'r', 'L', 'e', 'a', 'v', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'h', 'o', 'v', 'e', 'r', 'E', 'n', 't', 'e', 'r', 'E', 'v', 'e', 'n', 't', 0,
    'm', 'a', 'p', 'R', 'e', 'c', 't', 'F', 'r', 'o', 'm', 'I', 't', 'e', 'm', 0,
    's', 'c', 'o', 'p', 'e', 'd', 'F', 'o', 'c', 'u', 's', 'I', 't', 'e', 'm', 0,
    't', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'O', 'r', 'i', 'g', 'i', 'n', 0,
    'I', 't', 'e', 'm', 'S', 'c', 'e', 'n', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'I', 't', 'e', 'm', 'H', 'a', 's', 'C', 'o', 'n', 't', 'e', 'n', 't', 's', 0,
    't', 'e', 'x', 't', 'u', 'r', 'e', 'P', 'r', 'o', 'v', 'i', 'd', 'e', 'r', 0,
    'u', 'p', 'd', 'a', 't', 'e', 'P', 'a', 'i', 'n', 't', 'N', 'o', 'd', 'e', 0,
    'm', 'o', 'u', 's', 'e', 'P', 'r', 'e', 's', 's', 'E', 'v', 'e', 'n', 't', 0,
    'k', 'e', 'y', 'R', 'e', 'l', 'e', 'a', 's', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'g', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'h', 'a', 's', 'A', 'l', 'p', 'h', 'a', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 0,
    't', 'e', 'x', 't', 'u', 'r', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'A', 'n', 'i', 's', 'o', 't', 'r', 'o', 'p', 'y', 'N', 'o', 'n', 'e', 0,
    'i', 's', 'A', 't', 'l', 'a', 's', 'T', 'e', 'x', 't', 'u', 'r', 'e', 0,
    's', 't', 'e', 'n', 'c', 'i', 'l', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    's', 'c', 'i', 's', 's', 'o', 'r', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'S', 'h', 'a', 'd', 'e', 'r', 'B', 'y', 't', 'e', 'C', 'o', 'd', 'e', 0,
    'D', 'e', 'v', 'i', 'c', 'e', 'R', 'e', 's', 'o', 'u', 'r', 'c', 'e', 0,
    'Q', 'S', 'G', 'O', 'p', 'a', 'c', 'i', 't', 'y', 'N', 'o', 'd', 'e', 0,
    'o', 'p', 'a', 'q', 'u', 'e', 'M', 'a', 't', 'e', 'r', 'i', 'a', 'l', 0,
    'D', 'i', 'r', 't', 'y', 'N', 'o', 'd', 'e', 'A', 'd', 'd', 'e', 'd', 0,
    'Q', 'S', 'G', 'N', 'o', 'd', 'e', ':', ':', 'F', 'l', 'a', 'g', 's', 0,
    'f', 'r', 'a', 'g', 'm', 'e', 'n', 't', 'S', 'h', 'a', 'd', 'e', 'r', 0,
    'a', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 'N', 'a', 'm', 'e', 's', 0,
    'c', 'o', 'm', 'b', 'i', 'n', 'e', 'd', 'M', 'a', 't', 'r', 'i', 'x', 0,
    'i', 's', 'O', 'p', 'a', 'c', 'i', 't', 'y', 'D', 'i', 'r', 't', 'y', 0,
    's', 'e', 't', 'O', 'w', 'n', 's', 'T', 'e', 'x', 't', 'u', 'r', 'e', 0,
    'C', 'o', 'l', 'o', 'r', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    'a', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 'C', 'o', 'u', 'n', 't', 0,
    's', 'e', 't', 'D', 'r', 'a', 'w', 'i', 'n', 'g', 'M', 'o', 'd', 'e', 0,
    'D', 'y', 'n', 'a', 'm', 'i', 'c', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    't', 'e', 'x', 't', 'R', 'e', 'n', 'd', 'e', 'r', 'T', 'y', 'p', 'e', 0,
    'A', 'f', 't', 'e', 'r', 'S', 'w', 'a', 'p', 'S', 't', 'a', 'g', 'e', 0,
    'a', 'f', 't', 'e', 'r', 'A', 'n', 'i', 'm', 'a', 't', 'i', 'n', 'g', 0,
    'a', 'f', 't', 'e', 'r', 'R', 'e', 'n', 'd', 'e', 'r', 'i', 'n', 'g', 0,
    'r', 'e', 'n', 'd', 'e', 'r', 'T', 'a', 'r', 'g', 'e', 't', 'I', 'd', 0,
    's', 'e', 't', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'S', 'i', 'z', 'e', 0,
    'o', 'p', 'a', 'q', 'u', 'e', 'P', 'a', 'i', 'n', 't', 'i', 'n', 'g', 0,
    'd', 'r', 'a', 'g', 'L', 'e', 'a', 'v', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'd', 'r', 'a', 'g', 'E', 'n', 't', 'e', 'r', 'E', 'v', 'e', 'n', 't', 0,
    'h', 'o', 'v', 'e', 'r', 'M', 'o', 'v', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'm', 'a', 'p', 'R', 'e', 'c', 't', 'T', 'o', 'S', 'c', 'e', 'n', 'e', 0,
    'h', 'a', 's', 'A', 'c', 't', 'i', 'v', 'e', 'F', 'o', 'c', 'u', 's', 0,
    'i', 'm', 'p', 'l', 'i', 'c', 'i', 't', 'H', 'e', 'i', 'g', 'h', 't', 0,
    'b', 'a', 's', 'e', 'l', 'i', 'n', 'e', 'O', 'f', 'f', 's', 'e', 't', 0,
    't', 'e', 'x', 't', 'u', 'r', 'e', 'F', 'a', 'c', 't', 'o', 'r', 'y', 0,
    'r', 'e', 'q', 'u', 'e', 's', 't', 'T', 'e', 'x', 't', 'u', 'r', 'e', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'R', 'e', 'n', 'd', 'e', 'r', 'e', 'r', 0,
    'm', 'o', 'u', 's', 'e', 'M', 'o', 'v', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'M', 'i', 'r', 'r', 'o', 'r', 'e', 'd', 'R', 'e', 'p', 'e', 'a', 't', 0,
    'u', 'p', 'd', 'a', 't', 'e', 'T', 'e', 'x', 't', 'u', 'r', 'e', 0,
    'A', 'n', 'i', 's', 'o', 't', 'r', 'o', 'p', 'y', '1', '6', 'x', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'S', 't', 'a', 't', 'e', 's', 0,
    'V', 'i', 'e', 'w', 'p', 'o', 'r', 't', 'S', 't', 'a', 't', 'e', 0,
    'Q', 'S', 'G', 'R', 'e', 'n', 'd', 'e', 'r', 'N', 'o', 'd', 'e', 0,
    'i', 's', 'R', 'e', 'c', 't', 'a', 'n', 'g', 'u', 'l', 'a', 'r', 0,
    'D', 'i', 'r', 't', 'y', 'M', 'a', 't', 'e', 'r', 'i', 'a', 'l', 0,
    'D', 'i', 'r', 't', 'y', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 0,
    'U', 's', 'e', 'P', 'r', 'e', 'p', 'r', 'o', 'c', 'e', 's', 's', 0,
    'O', 'w', 'n', 'e', 'd', 'B', 'y', 'P', 'a', 'r', 'e', 'n', 't', 0,
    'Q', 'S', 'G', 'N', 'o', 'd', 'e', ':', ':', 'F', 'l', 'a', 'g', 0,
    'B', 'a', 's', 'i', 'c', 'N', 'o', 'd', 'e', 'T', 'y', 'p', 'e', 0,
    'i', 's', 'M', 'a', 't', 'r', 'i', 'x', 'D', 'i', 'r', 't', 'y', 0,
    's', 'e', 't', 'S', 'o', 'u', 'r', 'c', 'e', 'R', 'e', 'c', 't', 0,
    'D', 'r', 'a', 'w', 'T', 'r', 'i', 'a', 'n', 'g', 'l', 'e', 's', 0,
    'D', 'r', 'a', 'w', 'L', 'i', 'n', 'e', 'S', 't', 'r', 'i', 'p', 0,
    'S', 't', 'a', 't', 'i', 'c', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'S', 't', 'r', 'e', 'a', 'm', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'a', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 'T', 'y', 'p', 'e', 0,
    'G', 'L', '_', 'L', 'I', 'N', 'E', '_', 'S', 'T', 'R', 'I', 'P', 0,
    's', 'e', 't', 'C', 'l', 'e', 'a', 'r', 'C', 'o', 'l', 'o', 'r', 0,
    's', 'e', 't', 'D', 'e', 'v', 'i', 'c', 'e', 'R', 'e', 'c', 't', 0,
    'o', 'p', 'e', 'n', 'g', 'l', 'C', 'o', 'n', 't', 'e', 'x', 't', 0,
    's', 'e', 't', 'R', 'e', 's', 'i', 'z', 'e', 'M', 'o', 'd', 'e', 0,
    'p', 'r', 'e', 'p', 'a', 'r', 'e', 'T', 'h', 'r', 'e', 'a', 'd', 0,
    'c', 'o', 'n', 't', 'e', 'n', 't', 's', 'S', 'c', 'a', 'l', 'e', 0,
    'w', 'i', 'n', 'd', 'o', 'w', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'd', 'r', 'a', 'g', 'M', 'o', 'v', 'e', 'E', 'v', 'e', 'n', 't', 0,
    't', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'N', 'o', 'd', 'e', 0,
    'm', 'a', 'p', 'R', 'e', 'c', 't', 'T', 'o', 'I', 't', 'e', 'm', 0,
    'k', 'e', 'e', 'p', 'T', 'o', 'u', 'c', 'h', 'G', 'r', 'a', 'b', 0,
    'k', 'e', 'e', 'p', 'M', 'o', 'u', 's', 'e', 'G', 'r', 'a', 'b', 0,
    'i', 'm', 'p', 'l', 'i', 'c', 'i', 't', 'W', 'i', 'd', 't', 'h', 0,
    's', 'e', 't', 'P', 'a', 'r', 'e', 'n', 't', 'I', 't', 'e', 'm', 0,
    'r', 'e', 'q', 'u', 'e', 's', 't', 'P', 'i', 'x', 'm', 'a', 'p', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'T', 'e', 'x', 't', 'u', 'r', 'e', 0,
    's', 't', 'a', 't', 'u', 's', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'k', 'e', 'y', 'P', 'r', 'e', 's', 's', 'E', 'v', 'e', 'n', 't', 0,
    'f', 'o', 'c', 'u', 's', 'O', 'u', 't', 'E', 'v', 'e', 'n', 't', 0,
    'm', 'a', 'p', 'F', 'r', 'o', 'm', 'G', 'l', 'o', 'b', 'a', 'l', 0,
    'P', 'y', 'Q', 't', '5', '.', 'Q', 't', 'Q', 'u', 'i', 'c', 'k', 0,
    'A', 'n', 'i', 's', 'o', 't', 'r', 'o', 'p', 'y', '8', 'x', 0,
    'A', 'n', 'i', 's', 'o', 't', 'r', 'o', 'p', 'y', '4', 'x', 0,
    'A', 'n', 'i', 's', 'o', 't', 'r', 'o', 'p', 'y', '2', 'x', 0,
    's', 't', 'e', 'n', 'c', 'i', 'l', 'V', 'a', 'l', 'u', 'e', 0,
    'S', 'c', 'i', 's', 's', 'o', 'r', 'S', 't', 'a', 't', 'e', 0,
    'S', 't', 'e', 'n', 'c', 'i', 'l', 'S', 't', 'a', 't', 'e', 0,
    'c', 'h', 'i', 'l', 'd', 'A', 't', 'I', 'n', 'd', 'e', 'x', 0,
    'O', 'w', 'n', 's', 'M', 'a', 't', 'e', 'r', 'i', 'a', 'l', 0,
    'O', 'w', 'n', 's', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 0,
    'C', 'l', 'i', 'p', 'N', 'o', 'd', 'e', 'T', 'y', 'p', 'e', 0,
    'v', 'e', 'r', 't', 'e', 'x', 'S', 'h', 'a', 'd', 'e', 'r', 0,
    's', 'e', 't', 'F', 'i', 'l', 't', 'e', 'r', 'i', 'n', 'g', 0,
    'Q', 'S', 'G', 'I', 'm', 'a', 'g', 'e', 'N', 'o', 'd', 'e', 0,
    'D', 'r', 'a', 'w', 'L', 'i', 'n', 'e', 'L', 'o', 'o', 'p', 0,
    's', 'i', 'z', 'e', 'O', 'f', 'V', 'e', 'r', 't', 'e', 'x', 0,
    'G', 'L', '_', 'T', 'R', 'I', 'A', 'N', 'G', 'L', 'E', 'S', 0,
    'G', 'L', '_', 'L', 'I', 'N', 'E', '_', 'L', 'O', 'O', 'P', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'S', 'h', 'a', 'd', 'e', 'r', 0,
    's', 'e', 't', 'C', 'l', 'e', 'a', 'r', 'M', 'o', 'd', 'e', 0,
    'v', 'i', 'e', 'w', 'p', 'o', 'r', 't', 'R', 'e', 'c', 't', 0,
    'c', 'o', 'l', 'o', 'r', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'Q', 'Q', 'u', 'i', 'c', 'k', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    't', 'e', 'x', 't', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 0,
    's', 'c', 'e', 'n', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'r', 'e', 'n', 'd', 'e', 'r', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'r', 'e', 'n', 'd', 'e', 'r', 'T', 'a', 'r', 'g', 'e', 't', 0,
    's', 'e', 't', 'F', 'i', 'l', 'l', 'C', 'o', 'l', 'o', 'r', 0,
    'c', 'o', 'n', 't', 'e', 'n', 't', 's', 'S', 'i', 'z', 'e', 0,
    'u', 'p', 'd', 'a', 't', 'e', 'P', 'o', 'l', 'i', 's', 'h', 0,
    'm', 'a', 'p', 'F', 'r', 'o', 'm', 'S', 'c', 'e', 'n', 'e', 0,
    'i', 's', 'F', 'o', 'c', 'u', 's', 'S', 'c', 'o', 'p', 'e', 0,
    'a', 'n', 't', 'i', 'a', 'l', 'i', 'a', 's', 'i', 'n', 'g', 0,
    'c', 'h', 'i', 'l', 'd', 'r', 'e', 'n', 'R', 'e', 'c', 't', 0,
    'r', 'e', 'q', 'u', 'e', 's', 't', 'I', 'm', 'a', 'g', 'e', 0,
    'f', 'o', 'c', 'u', 's', 'I', 'n', 'E', 'v', 'e', 'n', 't', 0,
    'i', 's', 'A', 'n', 'c', 'e', 's', 't', 'o', 'r', 'O', 'f', 0,
    's', 'e', 't', 'L', 'i', 'n', 'e', 'W', 'i', 'd', 't', 'h', 0,
    'D', 'i', 'r', 't', 'y', 'O', 'p', 'a', 'c', 'i', 't', 'y', 0,
    'f', 'r', 'a', 'm', 'e', 'S', 'w', 'a', 'p', 'p', 'e', 'd', 0,
    's', 'c', 'i', 's', 's', 'o', 'r', 'R', 'e', 'c', 't', 0,
    'g', 'e', 't', 'R', 'e', 's', 'o', 'u', 'r', 'c', 'e', 0,
    'g', 'r', 'a', 'p', 'h', 'i', 'c', 's', 'A', 'p', 'i', 0,
    'Q', 'S', 'G', 'C', 'l', 'i', 'p', 'N', 'o', 'd', 'e', 0,
    's', 'e', 't', 'M', 'a', 't', 'e', 'r', 'i', 'a', 'l', 0,
    'n', 'e', 'x', 't', 'S', 'i', 'b', 'l', 'i', 'n', 'g', 0,
    'd', 'i', 'r', 't', 'y', 'S', 't', 'a', 't', 'e', 's', 0,
    'D', 'i', 'r', 't', 'y', 'M', 'a', 't', 'r', 'i', 'x', 0,
    'o', 'w', 'n', 's', 'T', 'e', 'x', 't', 'u', 'r', 'e', 0,
    'N', 'o', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 0,
    's', 'i', 'z', 'e', 'O', 'f', 'I', 'n', 'd', 'e', 'x', 0,
    'd', 'r', 'a', 'w', 'i', 'n', 'g', 'M', 'o', 'd', 'e', 0,
    'v', 'e', 'r', 't', 'e', 'x', 'C', 'o', 'u', 'n', 't', 0,
    'Q', 'S', 'G', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 0,
    'Q', 'S', 'G', 'M', 'a', 't', 'e', 'r', 'i', 'a', 'l', 0,
    'r', 'e', 'n', 'd', 'e', 'r', 'S', 'c', 'e', 'n', 'e', 0,
    'c', 'o', 'n', 't', 'e', 'n', 't', 'I', 't', 'e', 'm', 0,
    'i', 'n', 'i', 't', 'i', 'a', 'l', 'S', 'i', 'z', 'e', 0,
    'p', 'o', 'l', 'i', 's', 'h', 'I', 't', 'e', 'm', 's', 0,
    'g', 'r', 'a', 'b', 'T', 'o', 'I', 'm', 'a', 'g', 'e', 0,
    'h', 'e', 'i', 'g', 'h', 't', 'V', 'a', 'l', 'i', 'd', 0,
    'm', 'a', 'p', 'F', 'r', 'o', 'm', 'I', 't', 'e', 'm', 0,
    'u', 'n', 'g', 'r', 'a', 'b', 'M', 'o', 'u', 's', 'e', 0,
    's', 'e', 't', 'R', 'o', 't', 'a', 't', 'i', 'o', 'n', 0,
    'r', 'e', 's', 'e', 't', 'H', 'e', 'i', 'g', 'h', 't', 0,
    's', 't', 'a', 'c', 'k', 'B', 'e', 'f', 'o', 'r', 'e', 0,
    'B', 'o', 't', 't', 'o', 'm', 'R', 'i', 'g', 'h', 't', 0,
    's', 'y', 'n', 'c', 'h', 'r', 'o', 'n', 'i', 'z', 'e', 0,
    'r', 'o', 'o', 't', 'C', 'o', 'n', 't', 'e', 'x', 't', 0,
    't', 'a', 'b', 'l', 'e', 't', 'E', 'v', 'e', 'n', 't', 0,
    'u', 'n', 's', 'e', 't', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'm', 'a', 'p', 'T', 'o', 'G', 'l', 'o', 'b', 'a', 'l', 0,
    's', 'e', 't', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 0,
    'e', 'x', 'p', 'o', 's', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'r', 'e', 's', 'i', 'z', 'e', 'E', 'v', 'e', 'n', 't', 0,
    't', 'e', 'x', 't', 'u', 'r', 'e', 'S', 'i', 'z', 'e', 0,
    'C', 'l', 'a', 'm', 'p', 'T', 'o', 'E', 'd', 'g', 'e', 0,
    's', 'u', 'r', 'f', 'a', 'c', 'e', 'T', 'y', 'p', 'e', 0,
    'd', 'e', 't', 'e', 'r', 'm', 'i', 'n', 'a', 'n', 't', 0,
    's', 'e', 't', 'C', 'l', 'i', 'p', 'R', 'e', 'c', 't', 0,
    'f', 'o', 'c', 'u', 's', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'c', 'u', 's', 't', 'o', 'm', 'E', 'v', 'e', 'n', 't', 0,
    'e', 'v', 'e', 'n', 't', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'e', 'r', 'r', 'o', 'r', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'u', 'p', 'd', 'a', 't', 'e', 'S', 't', 'a', 't', 'e', 0,
    'h', 'a', 's', 'M', 'i', 'p', 'm', 'a', 'p', 's', 0,
    'Q', 'S', 'G', 'T', 'e', 'x', 't', 'u', 'r', 'e', 0,
    'B', 'l', 'e', 'n', 'd', 'S', 't', 'a', 't', 'e', 0,
    'C', 'o', 'l', 'o', 'r', 'S', 't', 'a', 't', 'e', 0,
    'D', 'e', 'p', 't', 'h', 'S', 't', 'a', 't', 'e', 0,
    'D', 'i', 'r', 'e', 'c', 't', '3', 'D', '1', '2', 0,
    'p', 'r', 'e', 'p', 'r', 'o', 'c', 'e', 's', 's', 0,
    'f', 'i', 'r', 's', 't', 'C', 'h', 'i', 'l', 'd', 0,
    'c', 'h', 'i', 'l', 'd', 'C', 'o', 'u', 'n', 't', 0,
    'd', 'e', 'a', 'c', 't', 'i', 'v', 'a', 't', 'e', 0,
    'D', 'r', 'a', 'w', 'P', 'o', 'i', 'n', 't', 's', 0,
    'v', 'e', 'r', 't', 'e', 'x', 'D', 'a', 't', 'a', 0,
    'i', 'n', 'd', 'e', 'x', 'C', 'o', 'u', 'n', 't', 0,
    'i', 's', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'c', 'l', 'e', 'a', 'r', 'C', 'o', 'l', 'o', 'r', 0,
    'd', 'e', 'v', 'i', 'c', 'e', 'R', 'e', 'c', 't', 0,
    'r', 'e', 's', 'i', 'z', 'e', 'M', 'o', 'd', 'e', 0,
    'r', 'o', 'o', 't', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'Q', 'Q', 'u', 'i', 'c', 'k', 'V', 'i', 'e', 'w', 0,
    's', 'a', 'v', 'e', 'T', 'o', 'F', 'i', 'l', 'e', 0,
    't', 'a', 'r', 'g', 'e', 't', 'S', 'i', 'z', 'e', 0,
    'w', 'i', 'd', 't', 'h', 'V', 'a', 'l', 'i', 'd', 0,
    'i', 't', 'e', 'm', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'm', 'a', 'p', 'T', 'o', 'S', 'c', 'e', 'n', 'e', 0,
    'r', 'e', 's', 'e', 't', 'W', 'i', 'd', 't', 'h', 0,
    'c', 'h', 'i', 'l', 'd', 'I', 't', 'e', 'm', 's', 0,
    's', 't', 'a', 'c', 'k', 'A', 'f', 't', 'e', 'r', 0,
    'p', 'a', 'r', 'e', 'n', 't', 'I', 't', 'e', 'm', 0,
    'B', 'o', 't', 't', 'o', 'm', 'L', 'e', 'f', 't', 0,
    'Q', 'Q', 'u', 'i', 'c', 'k', 'I', 't', 'e', 'm', 0,
    'c', 'l', 'a', 's', 's', 'B', 'e', 'g', 'i', 'n', 0,
    't', 'o', 'u', 'c', 'h', 'E', 'v', 'e', 'n', 't', 0,
    'w', 'h', 'e', 'e', 'l', 'E', 'v', 'e', 'n', 't', 0,
    'g', 'r', 'a', 'b', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'c', 'l', 'i', 'p', 'R', 'e', 'g', 'i', 'o', 'n', 0,
    's', 'e', 't', 'O', 'p', 'a', 'c', 'i', 't', 'y', 0,
    's', 'h', 'a', 'd', 'e', 'r', 'T', 'y', 'p', 'e', 0,
    's', 'o', 'u', 'r', 'c', 'e', 'R', 'e', 'c', 't', 0,
    's', 'e', 't', 'V', 'i', 's', 'i', 'b', 'l', 'e', 0,
    'i', 'n', 'i', 't', 'i', 'a', 'l', 'i', 'z', 'e', 0,
    's', 'e', 't', 'T', 'e', 'x', 't', 'u', 'r', 'e', 0,
    'a', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 's', 0,
    'c', 'h', 'i', 'l', 'd', 'E', 'v', 'e', 'n', 't', 0,
    't', 'i', 'm', 'e', 'r', 'E', 'v', 'e', 'n', 't', 0,
    's', 'e', 't', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'i', 'n', 'v', 'a', 'l', 'i', 'd', 'a', 't', 'e', 0,
    '_', '_', 'i', 'n', 'v', 'e', 'r', 't', '_', '_', 0,
    'C', 'u', 'l', 'l', 'S', 't', 'a', 't', 'e', 0,
    'm', 'a', 'r', 'k', 'D', 'i', 'r', 't', 'y', 0,
    'l', 'a', 's', 't', 'C', 'h', 'i', 'l', 'd', 0,
    'f', 'i', 'l', 't', 'e', 'r', 'i', 'n', 'g', 0,
    'F', 'l', 'o', 'a', 't', 'T', 'y', 'p', 'e', 0,
    'D', 'r', 'a', 'w', 'L', 'i', 'n', 'e', 's', 0,
    'i', 'n', 'd', 'e', 'x', 'D', 'a', 't', 'a', 0,
    'i', 'n', 'd', 'e', 'x', 'T', 'y', 'p', 'e', 0,
    'G', 'L', '_', 'P', 'O', 'I', 'N', 'T', 'S', 0,
    'Q', 'S', 'G', 'E', 'n', 'g', 'i', 'n', 'e', 0,
    'c', 'l', 'e', 'a', 'r', 'M', 'o', 'd', 'e', 0,
    's', 'e', 't', 'S', 'o', 'u', 'r', 'c', 'e', 0,
    'f', 'i', 'l', 'l', 'C', 'o', 'l', 'o', 'r', 0,
    'd', 'r', 'o', 'p', 'E', 'v', 'e', 'n', 't', 0,
    'm', 'a', 'p', 'T', 'o', 'I', 't', 'e', 'm', 0,
    's', 'e', 't', 'S', 'm', 'o', 'o', 't', 'h', 0,
    'b', 'o', 'o', 'l', 'V', 'a', 'l', 'u', 'e', 0,
    'r', 'e', 'a', 'l', 'V', 'a', 'l', 'u', 'e', 0,
    'i', 'm', 'a', 'g', 'e', 'T', 'y', 'p', 'e', 0,
    'h', 'i', 'd', 'e', 'E', 'v', 'e', 'n', 't', 0,
    's', 'h', 'o', 'w', 'E', 'v', 'e', 'n', 't', 0,
    'm', 'o', 'v', 'e', 'E', 'v', 'e', 'n', 't', 0,
    's', 'e', 't', 'M', 'a', 't', 'r', 'i', 'x', 0,
    't', 'e', 'x', 't', 'u', 'r', 'e', 'I', 'd', 0,
    't', 'u', 'p', 'l', 'e', 'S', 'i', 'z', 'e', 0,
    's', 'e', 't', 'M', 'i', 'p', 'm', 'a', 'p', 0,
    'i', 's', 'V', 'i', 's', 'i', 'b', 'l', 'e', 0,
    'l', 'i', 'n', 'e', 'W', 'i', 'd', 't', 'h', 0,
    'i', 's', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    's', 'e', 'n', 'd', 'E', 'v', 'e', 'n', 't', 0,
    'c', 'l', 'i', 'p', 'L', 'i', 's', 't', 0,
    'S', 'o', 'f', 't', 'w', 'a', 'r', 'e', 0,
    'm', 'a', 't', 'e', 'r', 'i', 'a', 'l', 0,
    'B', 'l', 'e', 'n', 'd', 'i', 'n', 'g', 0,
    'D', 'i', 'r', 't', 'y', 'A', 'l', 'l', 0,
    'G', 'L', '_', 'L', 'I', 'N', 'E', 'S', 0,
    'G', 'L', '_', 'F', 'L', 'O', 'A', 'T', 0,
    's', 'e', 't', 'F', 'o', 'c', 'u', 's', 0,
    'h', 'a', 's', 'F', 'o', 'c', 'u', 's', 0,
    's', 'e', 't', 'S', 'c', 'a', 'l', 'e', 0,
    's', 'e', 't', 'S', 't', 'a', 't', 'e', 0,
    'T', 'o', 'p', 'R', 'i', 'g', 'h', 't', 0,
    'g', 'e', 'o', 'm', 'e', 't', 'r', 'y', 0,
    'a', 'l', 'l', 'o', 'c', 'a', 't', 'e', 0,
    'c', 'l', 'i', 'p', 'R', 'e', 'c', 't', 0,
    'r', 'o', 't', 'a', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'C', 'o', 'l', 'o', 'r', 0,
    'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'F', 'l', 'a', 'g', 's', 0,
    'c', 'o', 'n', 't', 'a', 'i', 'n', 's', 0,
    'f', 'i', 'n', 'i', 's', 'h', 'e', 'd', 0,
    '_', '_', 'h', 'a', 's', 'h', '_', '_', 0,
    '_', '_', 'b', 'o', 'o', 'l', '_', '_', 0,
    '_', '_', 'i', 'x', 'o', 'r', '_', '_', 0,
    '_', '_', 'i', 'a', 'n', 'd', '_', '_', 0,
    'Q', 'S', 'G', 'N', 'o', 'd', 'e', 0,
    'c', 'o', 'm', 'p', 'i', 'l', 'e', 0,
    'G', 'L', '_', 'B', 'Y', 'T', 'E', 0,
    'N', 'o', 'S', 't', 'a', 'g', 'e', 0,
    'c', 'l', 'o', 's', 'i', 'n', 'g', 0,
    'f', 'o', 'r', 'w', 'a', 'r', 'd', 0,
    'c', 'h', 'i', 'l', 'd', 'A', 't', 0,
    's', 'e', 't', 'C', 'l', 'i', 'p', 0,
    'T', 'o', 'p', 'L', 'e', 'f', 't', 0,
    'L', 'o', 'a', 'd', 'i', 'n', 'g', 0,
    'o', 'p', 'a', 'c', 'i', 't', 'y', 0,
    'N', 'e', 'a', 'r', 'e', 's', 't', 0,
    's', 'e', 't', 'F', 'l', 'a', 'g', 0,
    'q', 'u', 'e', 'r', 'i', 'e', 's', 0,
    't', 'e', 'x', 't', 'u', 'r', 'e', 0,
    's', 'e', 't', 'R', 'e', 'c', 't', 0,
    'p', 'r', 'o', 'g', 'r', 'a', 'm', 0,
    'U', 'n', 'k', 'n', 'o', 'w', 'n', 0,
    'e', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'c', 'o', 'n', 't', 'e', 'x', 't', 0,
    'c', 'o', 'm', 'p', 'a', 'r', 'e', 0,
    '_', '_', 'l', 'e', 'n', '_', '_', 0,
    'o', 'p', 't', 'i', 'o', 'n', 's', 0,
    '_', '_', 'x', 'o', 'r', '_', '_', 0,
    '_', '_', 'i', 'o', 'r', '_', '_', 0,
    '_', '_', 'a', 'n', 'd', '_', '_', 0,
    '_', '_', 'i', 'n', 't', '_', '_', 0,
    'G', 'L', '_', 'I', 'N', 'T', 0,
    'p', 'o', 'l', 'i', 's', 'h', 0,
    's', 'm', 'o', 'o', 't', 'h', 0,
    'B', 'o', 't', 't', 'o', 'm', 0,
    'C', 'e', 'n', 't', 'e', 'r', 0,
    'r', 'e', 'n', 'd', 'e', 'r', 0,
    'e', 'r', 'r', 'o', 'r', 's', 0,
    'O', 'p', 'e', 'n', 'V', 'G', 0,
    'O', 'p', 'e', 'n', 'G', 'L', 0,
    's', 't', 'r', 'i', 'd', 'e', 0,
    'm', 'i', 'p', 'm', 'a', 'p', 0,
    'e', 'n', 'g', 'i', 'n', 'e', 0,
    'm', 'a', 't', 'r', 'i', 'x', 0,
    'w', 'i', 'n', 'd', 'o', 'w', 0,
    'u', 'p', 'd', 'a', 't', 'e', 0,
    'c', 'u', 'r', 's', 'o', 'r', 0,
    'c', 'r', 'e', 'a', 't', 'e', 0,
    'c', 'a', 'n', 'c', 'e', 'l', 0,
    'h', 'e', 'i', 'g', 'h', 't', 0,
    'o', 'f', 'f', 's', 'e', 't', 0,
    'L', 'i', 'n', 'e', 'a', 'r', 0,
    's', 't', 'a', 't', 'u', 's', 0,
    'f', 'o', 'r', 'm', 'a', 't', 0,
    'p', 'a', 'r', 'e', 'n', 't', 0,
    '_', '_', 'n', 'e', '_', '_', 0,
    '_', '_', 'e', 'q', '_', '_', 0,
    '_', '_', 'o', 'r', '_', '_', 0,
    'f', 'o', 'r', 'c', 'e', 0,
    'f', 'b', 'o', 'I', 'd', 0,
    'r', 'e', 'a', 'd', 'y', 0,
    'R', 'e', 'a', 'd', 'y', 0,
    'p', 'a', 'i', 'n', 't', 0,
    's', 'c', 'a', 'l', 'e', 0,
    'c', 'o', 'l', 'o', 'r', 0,
    'i', 'm', 'a', 'g', 'e', 0,
    'w', 'i', 'd', 't', 'h', 0,
    'c', 'o', 'u', 'n', 't', 0,
    'f', 'l', 'a', 'g', 's', 0,
    'e', 'v', 'e', 'n', 't', 0,
    's', 't', 'a', 't', 'e', 0,
    'H', 'L', 'S', 'L', 0,
    'G', 'L', 'S', 'L', 0,
    'g', 'r', 'a', 'b', 0,
    's', 'e', 't', 'Z', 0,
    'b', 'i', 'n', 'd', 0,
    'i', 't', 'e', 'm', 0,
    'r', 'e', 'c', 't', 0,
    'c', 'l', 'i', 'p', 0,
    's', 'y', 'n', 'c', 0,
    's', 'e', 't', 'Y', 0,
    's', 'e', 't', 'X', 0,
    'N', 'u', 'l', 'l', 0,
    's', 'i', 'z', 'e', 0,
    't', 'y', 'p', 'e', 0,
    'T', 'o', 'p', 0,
    'u', 'r', 'l', 0,
    't', 'x', 0,
    'z', 0,
};
#line 197 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
// Release any attribute names to the heap.
static void qtquick_anc_release(char **attr_names)
{
    if (attr_names)
    {
        for (int i = 0; attr_names[i]; ++i)
            delete[] attr_names[i];

        delete[] attr_names;
    }
}


// The destructor for the attribute names PyCapsule.
static void qtquick_anc_destructor(PyObject *cap)
{
    qtquick_anc_release(
            reinterpret_cast<char **>(PyCapsule_GetPointer(cap, NULL)));
}


// Get the attribute names or 0 if there was an error.
static char **qtquick_anc_get_attr_names(sipSimpleWrapper *pySelf, PyObject *method, PyObject *attr_names_obj)
{
    // Dispose of any existing names.
    Py_XDECREF(sipGetUserObject(pySelf));
    sipSetUserObject(pySelf, NULL);

    // Convert the new names.
    if (!PyList_Check(attr_names_obj))
    {
        sipBadCatcherResult(method);
        return 0;
    }

    char **names = new char *[PyList_Size(attr_names_obj) + 1];

    for (Py_ssize_t i = 0; i < PyList_Size(attr_names_obj); ++i)
    {
        char *name;
        PyObject *el = PyList_GetItem(attr_names_obj, i);

#if PY_MAJOR_VERSION >= 3
        PyObject *name_obj = PyUnicode_AsASCIIString(el);

        name = (name_obj ? PyBytes_AsString(name_obj) : 0);
#else
        name = PyString_AsString(el);
#endif

        if (!name)
        {
            names[i] = 0;
            qtquick_anc_release(names);

            sipBadCatcherResult(method);
            return 0;
        }

        char *name_copy = new char[strlen(name) + 1];
        strcpy(name_copy, name);
        names[i] = name_copy;

#if PY_MAJOR_VERSION >= 3
        Py_DECREF(name_obj);
#endif
    }

    names[PyList_Size(attr_names_obj)] = 0;

    sipSetUserObject(pySelf, PyCapsule_New(names, NULL, qtquick_anc_destructor));

    if (!sipGetUserObject(pySelf))
    {
        qtquick_anc_release(names);
        return 0;
    }

    return names;
}
#line 1052 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

 ::QSGTexture* sipVH_QtQuick_83(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QSGTexture* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H2", sipType_QSGTexture, &sipRes);

    return sipRes;
}

void* sipVH_QtQuick_82(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const char*a0)
{
    void* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "A", a0);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "V", &sipRes);

    return sipRes;
}

const  ::QRegion* sipVH_QtQuick_81(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QRegion* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H0", sipType_QRegion, &sipRes);

    return sipRes;
}

 ::QRect sipVH_QtQuick_80(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QRect sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QRect, &sipRes);

    return sipRes;
}

const  ::QMatrix4x4* sipVH_QtQuick_79(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QMatrix4x4* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H0", sipType_QMatrix4x4, &sipRes);

    return sipRes;
}

 ::QSGRenderNode::RenderingFlags sipVH_QtQuick_78(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QSGRenderNode::RenderingFlags sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QSGRenderNode_RenderingFlags, &sipRes);

    return sipRes;
}

void sipVH_QtQuick_77(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QSGRenderNode::RenderState*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", const_cast< ::QSGRenderNode::RenderState *>(a0), sipType_QSGRenderNode_RenderState, SIP_NULLPTR);
}

 ::QSGRenderNode::StateFlags sipVH_QtQuick_76(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QSGRenderNode::StateFlags sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QSGRenderNode_StateFlags, &sipRes);

    return sipRes;
}

 ::QSGRendererInterface::ShaderSourceTypes sipVH_QtQuick_75(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QSGRendererInterface::ShaderSourceTypes sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QSGRendererInterface_ShaderSourceTypes, &sipRes);

    return sipRes;
}

 ::QSGRendererInterface::ShaderCompilationTypes sipVH_QtQuick_74(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QSGRendererInterface::ShaderCompilationTypes sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QSGRendererInterface_ShaderCompilationTypes, &sipRes);

    return sipRes;
}

 ::QSGRendererInterface::ShaderType sipVH_QtQuick_73(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QSGRendererInterface::ShaderType sipRes =  ::QSGRendererInterface::UnknownShadingLanguage;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "F", sipType_QSGRendererInterface_ShaderType, &sipRes);

    return sipRes;
}

void* sipVH_QtQuick_72(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QQuickWindow*a0,const char*a1)
{
    void* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "DA", a0, sipType_QQuickWindow, SIP_NULLPTR, a1);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "V", &sipRes);

    return sipRes;
}

void* sipVH_QtQuick_71(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QQuickWindow*a0, ::QSGRendererInterface::Resource a1)
{
    void* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "DF", a0, sipType_QQuickWindow, SIP_NULLPTR, a1, sipType_QSGRendererInterface_Resource);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "V", &sipRes);

    return sipRes;
}

 ::QSGRendererInterface::GraphicsApi sipVH_QtQuick_70(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QSGRendererInterface::GraphicsApi sipRes =  ::QSGRendererInterface::Unknown;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "F", sipType_QSGRendererInterface_GraphicsApi, &sipRes);

    return sipRes;
}

 ::QColor sipVH_QtQuick_69(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QColor sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QColor, &sipRes);

    return sipRes;
}

void sipVH_QtQuick_68(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QColor& a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "N", new  ::QColor(a0), sipType_QColor, SIP_NULLPTR);
}

const char* sipVH_QtQuick_67(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int sipResKey)
{
    char* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "AA", sipResKey, &sipRes);

    return sipRes;
}

const char* const* sipVH_QtQuick_66(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int)
{
    char* const* sipRes = 0;
    int sipIsErr = 0;

#line 114 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
        PyObject *names = sipCallMethod(&sipIsErr, sipMethod, "");
        
        if (names)
        {
            sipRes = qtquick_anc_get_attr_names(sipPySelf, sipMethod, names);
            
            if (!sipRes)
                sipIsErr = 1;
            
            Py_DECREF(names);
        }
#line 1231 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

    Py_DECREF(sipMethod);

    if (sipIsErr)
        sipCallErrorHandler(sipErrorHandler, sipPySelf, sipGILState);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

void sipVH_QtQuick_65(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QSGMaterialShader::RenderState& a0, ::QSGMaterial*a1, ::QSGMaterial*a2)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "NDD", new  ::QSGMaterialShader::RenderState(a0), sipType_QSGMaterialShader_RenderState, SIP_NULLPTR, a1, sipType_QSGMaterial, SIP_NULLPTR, a2, sipType_QSGMaterial, SIP_NULLPTR);
}

void sipVH_QtQuick_64(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, bool a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "b", a0);
}

 ::QSGImageNode::TextureCoordinatesTransformMode sipVH_QtQuick_63(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QSGImageNode::TextureCoordinatesTransformMode sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QSGImageNode_TextureCoordinatesTransformMode, &sipRes);

    return sipRes;
}

void sipVH_QtQuick_62(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QSGImageNode::TextureCoordinatesTransformMode a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "N", new  ::QSGImageNode::TextureCoordinatesTransformMode(a0), sipType_QSGImageNode_TextureCoordinatesTransformMode, SIP_NULLPTR);
}

 ::QSGTexture::Filtering sipVH_QtQuick_61(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QSGTexture::Filtering sipRes =  ::QSGTexture::None;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "F", sipType_QSGTexture_Filtering, &sipRes);

    return sipRes;
}

void sipVH_QtQuick_60(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QSGTexture::Filtering a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "F", a0, sipType_QSGTexture_Filtering);
}

 ::QSGTexture* sipVH_QtQuick_59(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QSGTexture* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H0", sipType_QSGTexture, &sipRes);

    return sipRes;
}

void sipVH_QtQuick_58(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QSGTexture*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QSGTexture, SIP_NULLPTR);
}

 ::QRectF sipVH_QtQuick_57(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QRectF sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QRectF, &sipRes);

    return sipRes;
}

void sipVH_QtQuick_56(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QRectF& a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "N", new  ::QRectF(a0), sipType_QRectF, SIP_NULLPTR);
}

int sipVH_QtQuick_55(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QSGMaterial*a0)
{
    int sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "D", const_cast< ::QSGMaterial *>(a0), sipType_QSGMaterial, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "i", &sipRes);

    return sipRes;
}

 ::QSGMaterialShader* sipVH_QtQuick_54(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QSGMaterialShader* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H2", sipType_QSGMaterialShader, &sipRes);

    return sipRes;
}

 ::QSGMaterialType* sipVH_QtQuick_53(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QSGMaterialType* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H0", sipType_QSGMaterialType, &sipRes);

    return sipRes;
}

void sipVH_QtQuick_52(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::GLuint a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "u", a0);
}

 ::QSurface::SurfaceType sipVH_QtQuick_51(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QSurface::SurfaceType sipRes =  ::QSurface::RasterSurface;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "F", sipType_QSurface_SurfaceType, &sipRes);

    return sipRes;
}

 ::QSurfaceFormat sipVH_QtQuick_50(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QSurfaceFormat sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QSurfaceFormat, &sipRes);

    return sipRes;
}

 ::QObject* sipVH_QtQuick_49(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QObject* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H0", sipType_QObject, &sipRes);

    return sipRes;
}

void sipVH_QtQuick_48(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QExposeEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QExposeEvent, SIP_NULLPTR);
}

void sipVH_QtQuick_47(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QResizeEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QResizeEvent, SIP_NULLPTR);
}

void sipVH_QtQuick_46(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QMoveEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QMoveEvent, SIP_NULLPTR);
}

void sipVH_QtQuick_45(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QShowEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QShowEvent, SIP_NULLPTR);
}

void sipVH_QtQuick_44(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QHideEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QHideEvent, SIP_NULLPTR);
}

void sipVH_QtQuick_43(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QTabletEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QTabletEvent, SIP_NULLPTR);
}

 ::QWindow* sipVH_QtQuick_42(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QPoint*a0)
{
     ::QWindow* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "D", a0, sipType_QPoint, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H0", sipType_QWindow, &sipRes);

    return sipRes;
}

void sipVH_QtQuick_41(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QPainter*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QPainter, SIP_NULLPTR);
}

 ::QQuickImageResponse* sipVH_QtQuick_40(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QString& a0,const  ::QSize& a1)
{
     ::QQuickImageResponse* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "NN", new  ::QString(a0), sipType_QString, SIP_NULLPTR, new  ::QSize(a1), sipType_QSize, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H2", sipType_QQuickImageResponse, &sipRes);

    return sipRes;
}

 ::QString sipVH_QtQuick_39(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QString sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QString, &sipRes);

    return sipRes;
}

 ::QQuickTextureFactory* sipVH_QtQuick_38(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QQuickTextureFactory* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H2", sipType_QQuickTextureFactory, &sipRes);

    return sipRes;
}

 ::QQuickTextureFactory* sipVH_QtQuick_37(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QString& a0, ::QSize*a1,const  ::QSize& a2)
{
     ::QQuickTextureFactory* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "NN", new  ::QString(a0), sipType_QString, SIP_NULLPTR, new  ::QSize(a2), sipType_QSize, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "(H2H4)", sipType_QQuickTextureFactory, &sipRes, sipType_QSize, a1);

    return sipRes;
}

 ::QPixmap sipVH_QtQuick_36(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QString& a0, ::QSize*a1,const  ::QSize& a2)
{
     ::QPixmap sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "NN", new  ::QString(a0), sipType_QString, SIP_NULLPTR, new  ::QSize(a2), sipType_QSize, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "(H5H4)", sipType_QPixmap, &sipRes, sipType_QSize, a1);

    return sipRes;
}

 ::QImage sipVH_QtQuick_35(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QString& a0, ::QSize*a1,const  ::QSize& a2)
{
     ::QImage sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "NN", new  ::QString(a0), sipType_QString, SIP_NULLPTR, new  ::QSize(a2), sipType_QSize, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "(H5H4)", sipType_QImage, &sipRes, sipType_QSize, a1);

    return sipRes;
}

 ::QQmlImageProviderBase::ImageType sipVH_QtQuick_34(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QQmlImageProviderBase::ImageType sipRes =  ::QQmlImageProviderBase::Image;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "F", sipType_QQmlImageProviderBase_ImageType, &sipRes);

    return sipRes;
}

 ::QQmlImageProviderBase::Flags sipVH_QtQuick_33(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QQmlImageProviderBase::Flags sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QQmlImageProviderBase_Flags, &sipRes);

    return sipRes;
}

 ::QImage sipVH_QtQuick_32(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QImage sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QImage, &sipRes);

    return sipRes;
}

int sipVH_QtQuick_31(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    int sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "i", &sipRes);

    return sipRes;
}

 ::QSize sipVH_QtQuick_30(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QSize sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QSize, &sipRes);

    return sipRes;
}

 ::QSGTexture* sipVH_QtQuick_29(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QQuickWindow*a0)
{
     ::QSGTexture* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "D", a0, sipType_QQuickWindow, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H2", sipType_QSGTexture, &sipRes);

    return sipRes;
}

void sipVH_QtQuick_28(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QQuickFramebufferObject*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QQuickFramebufferObject, SIP_NULLPTR);
}

 ::QOpenGLFramebufferObject* sipVH_QtQuick_27(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QSize& a0)
{
     ::QOpenGLFramebufferObject* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "N", new  ::QSize(a0), sipType_QSize, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H0", sipType_QOpenGLFramebufferObject, &sipRes);

    return sipRes;
}

 ::QQuickFramebufferObject::Renderer* sipVH_QtQuick_26(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QQuickFramebufferObject::Renderer* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H2", sipType_QQuickFramebufferObject_Renderer, &sipRes);

    return sipRes;
}

 ::QSGNode* sipVH_QtQuick_25(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QSGNode*a0, ::QQuickItem::UpdatePaintNodeData*a1)
{
     ::QSGNode* sipRes = 0;
    int sipIsErr = 0;

#line 233 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitem.sip"
        PyObject *res;
        
        res = sipCallMethod(&sipIsErr, sipMethod, "DD",
                a0, sipType_QSGNode, NULL,
                a1, sipType_QQuickItem_UpdatePaintNodeData, NULL);
        
        if (res)
        {
            sipParseResult(&sipIsErr, sipMethod, res, "H0", sipType_QSGNode, &sipRes);
        
            if (!sipIsErr && sipRes && (sipRes->flags() & QSGNode::OwnedByParent))
                sipTransferTo(res, (PyObject *)sipPySelf);
        
            Py_DECREF(res);
        }
#line 1589 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

    Py_DECREF(sipMethod);

    if (sipIsErr)
        sipCallErrorHandler(sipErrorHandler, sipPySelf, sipGILState);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

void sipVH_QtQuick_24(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QRectF& a0,const  ::QRectF& a1)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "NN", new  ::QRectF(a0), sipType_QRectF, SIP_NULLPTR, new  ::QRectF(a1), sipType_QRectF, SIP_NULLPTR);
}

bool sipVH_QtQuick_23(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QQuickItem*a0, ::QEvent*a1)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "DD", a0, sipType_QQuickItem, SIP_NULLPTR, a1, sipType_QEvent, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

void sipVH_QtQuick_22(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QDropEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QDropEvent, SIP_NULLPTR);
}

void sipVH_QtQuick_21(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QDragLeaveEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QDragLeaveEvent, SIP_NULLPTR);
}

void sipVH_QtQuick_20(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QDragMoveEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QDragMoveEvent, SIP_NULLPTR);
}

void sipVH_QtQuick_19(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QDragEnterEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QDragEnterEvent, SIP_NULLPTR);
}

void sipVH_QtQuick_18(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QHoverEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QHoverEvent, SIP_NULLPTR);
}

void sipVH_QtQuick_17(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QTouchEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QTouchEvent, SIP_NULLPTR);
}

void sipVH_QtQuick_16(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QWheelEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QWheelEvent, SIP_NULLPTR);
}

void sipVH_QtQuick_15(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QMouseEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QMouseEvent, SIP_NULLPTR);
}

void sipVH_QtQuick_14(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QFocusEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QFocusEvent, SIP_NULLPTR);
}

void sipVH_QtQuick_13(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QInputMethodEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QInputMethodEvent, SIP_NULLPTR);
}

void sipVH_QtQuick_12(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QKeyEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QKeyEvent, SIP_NULLPTR);
}

void sipVH_QtQuick_11(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QQuickItem::ItemChange a0,const  ::QQuickItem::ItemChangeData& a1)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "FN", a0, sipType_QQuickItem_ItemChange, new  ::QQuickItem::ItemChangeData(a1), sipType_QQuickItem_ItemChangeData, SIP_NULLPTR);
}

 ::QSGTextureProvider* sipVH_QtQuick_10(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QSGTextureProvider* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H0", sipType_QSGTextureProvider, &sipRes);

    return sipRes;
}

bool sipVH_QtQuick_9(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

 ::QVariant sipVH_QtQuick_8(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::Qt::InputMethodQuery a0)
{
     ::QVariant sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "F", a0, sipType_Qt_InputMethodQuery);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QVariant, &sipRes);

    return sipRes;
}

bool sipVH_QtQuick_7(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QPointF& a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "N", new  ::QPointF(a0), sipType_QPointF, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

void sipVH_QtQuick_6(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "");
}

bool sipVH_QtQuick_5(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QEvent*a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "D", a0, sipType_QEvent, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH_QtQuick_4(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QObject*a0, ::QEvent*a1)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "DD", a0, sipType_QObject, SIP_NULLPTR, a1, sipType_QEvent, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

void sipVH_QtQuick_3(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QTimerEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QTimerEvent, SIP_NULLPTR);
}

void sipVH_QtQuick_2(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QChildEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QChildEvent, SIP_NULLPTR);
}

void sipVH_QtQuick_1(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QEvent, SIP_NULLPTR);
}

void sipVH_QtQuick_0(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QMetaMethod& a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "N", new  ::QMetaMethod(a0), sipType_QMetaMethod, SIP_NULLPTR);
}


/* Convert to a sub-class if possible. */
extern "C" {static const sipTypeDef *sipSubClass_QQuickWindow(void **);}
static const sipTypeDef *sipSubClass_QQuickWindow(void **sipCppRet)
{
     ::QObject *sipCpp = reinterpret_cast< ::QObject *>(*sipCppRet);
    const sipTypeDef *sipType;

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickwindow.sip"
    static struct class_graph {
        const char *name;
        sipTypeDef **type;
        int yes, no;
    } graph[] = {
    #if QT_VERSION >= 0x050400
        {sipName_QSGEngine, &sipType_QSGEngine, -1, 1},
    #else
        {0, 0, -1, 1},
    #endif
        {sipName_QQuickItem, &sipType_QQuickItem, 11, 2},
    #if QT_VERSION >= 0x050400
        {sipName_QQuickItemGrabResult, &sipType_QQuickItemGrabResult, -1, 3},
    #else
        {0, 0, -1, 3},
    #endif
        {sipName_QSGTexture, &sipType_QSGTexture, 13, 4},
    #if QT_VERSION >= 0x050100
        {sipName_QQuickTextDocument, &sipType_QQuickTextDocument, -1, 5},
    #else
        {0, 0, -1, 5},
    #endif
    #if QT_VERSION >= 0x050400
        {sipName_QSGAbstractRenderer, &sipType_QSGAbstractRenderer, -1, 6},
    #else
        {0, 0, -1, 6},
    #endif
    #if QT_VERSION >= 0x050600
        {sipName_QQuickImageResponse, &sipType_QQuickImageResponse, -1, 7},
    #else
        {0, 0, -1, 7},
    #endif
        {sipName_QQuickTextureFactory, &sipType_QQuickTextureFactory, -1, 8},
    #if QT_VERSION >= 0x050400
        {sipName_QQuickRenderControl, &sipType_QQuickRenderControl, -1, 9},
    #else
        {0, 0, -1, 9},
    #endif
        {sipName_QSGTextureProvider, &sipType_QSGTextureProvider, -1, 10},
        {sipName_QQuickWindow, &sipType_QQuickWindow, 14, -1},
    #if QT_VERSION >= 0x050200
        {sipName_QQuickFramebufferObject, &sipType_QQuickFramebufferObject, -1, 12},
    #else
        {0, 0, -1, 12},
    #endif
        {sipName_QQuickPaintedItem, &sipType_QQuickPaintedItem, -1, -1},
        {sipName_QSGDynamicTexture, &sipType_QSGDynamicTexture, -1, -1},
        {sipName_QQuickView, &sipType_QQuickView, -1, -1},
    };
    
    int i = 0;
    
    sipType = NULL;
    
    do
    {
        struct class_graph *cg = &graph[i];
    
        if (cg->name != NULL && sipCpp->inherits(cg->name))
        {
            sipType = *cg->type;
            i = cg->yes;
        }
        else
            i = cg->no;
    }
    while (i >= 0);
#line 1837 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

    return sipType;
}


/* Convert to a sub-class if possible. */
extern "C" {static const sipTypeDef *sipSubClass_QSGNode(void **);}
static const sipTypeDef *sipSubClass_QSGNode(void **sipCppRet)
{
     ::QSGNode *sipCpp = reinterpret_cast< ::QSGNode *>(*sipCppRet);
    const sipTypeDef *sipType;

#line 126 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
    switch (sipCpp->type())
    {
    case QSGNode::BasicNodeType:
        sipType = sipType_QSGBasicGeometryNode;
        break;
    
    case QSGNode::GeometryNodeType:
        sipType = sipType_QSGGeometryNode;
        break;
    
    case QSGNode::TransformNodeType:
        sipType = sipType_QSGClipNode;
        break;
    
    case QSGNode::ClipNodeType:
        sipType = sipType_QSGTransformNode;
        break;
    
    case QSGNode::OpacityNodeType:
        sipType = sipType_QSGOpacityNode;
        break;
    
    default:
        sipType = 0;
    }
#line 1876 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

    return sipType;
}


extern "C" {static PyObject *slot_QSGSimpleTextureNode_TextureCoordinatesTransformFlag___or__(PyObject *,PyObject *);}
static PyObject *slot_QSGSimpleTextureNode_TextureCoordinatesTransformFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGSimpleTextureNode::TextureCoordinatesTransformFlag a0;
         ::QSGSimpleTextureNode::TextureCoordinatesTransformMode* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QSGSimpleTextureNode_TextureCoordinatesTransformFlag, &a0, sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode, &a1, &a1State))
        {
             ::QSGSimpleTextureNode::TextureCoordinatesTransformMode*sipRes;

            sipRes = new  ::QSGSimpleTextureNode::TextureCoordinatesTransformMode((a0 | *a1));
            sipReleaseType(a1,sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode,a1State);

            return sipConvertFromNewType(sipRes,sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QSGSimpleTextureNode_TextureCoordinatesTransformFlag[] = {
    {(void *)slot_QSGSimpleTextureNode_TextureCoordinatesTransformFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QSGRenderNode_RenderingFlag___or__(PyObject *,PyObject *);}
static PyObject *slot_QSGRenderNode_RenderingFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGRenderNode::RenderingFlag a0;
         ::QSGRenderNode::RenderingFlags* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QSGRenderNode_RenderingFlag, &a0, sipType_QSGRenderNode_RenderingFlags, &a1, &a1State))
        {
             ::QSGRenderNode::RenderingFlags*sipRes;

            sipRes = new  ::QSGRenderNode::RenderingFlags((a0 | *a1));
            sipReleaseType(a1,sipType_QSGRenderNode_RenderingFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QSGRenderNode_RenderingFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QSGRenderNode_RenderingFlag[] = {
    {(void *)slot_QSGRenderNode_RenderingFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QSGRenderNode_StateFlag___or__(PyObject *,PyObject *);}
static PyObject *slot_QSGRenderNode_StateFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGRenderNode::StateFlag a0;
         ::QSGRenderNode::StateFlags* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QSGRenderNode_StateFlag, &a0, sipType_QSGRenderNode_StateFlags, &a1, &a1State))
        {
             ::QSGRenderNode::StateFlags*sipRes;

            sipRes = new  ::QSGRenderNode::StateFlags((a0 | *a1));
            sipReleaseType(a1,sipType_QSGRenderNode_StateFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QSGRenderNode_StateFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QSGRenderNode_StateFlag[] = {
    {(void *)slot_QSGRenderNode_StateFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QSGRendererInterface_ShaderSourceType___or__(PyObject *,PyObject *);}
static PyObject *slot_QSGRendererInterface_ShaderSourceType___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGRendererInterface::ShaderSourceType a0;
         ::QSGRendererInterface::ShaderSourceTypes* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QSGRendererInterface_ShaderSourceType, &a0, sipType_QSGRendererInterface_ShaderSourceTypes, &a1, &a1State))
        {
             ::QSGRendererInterface::ShaderSourceTypes*sipRes;

            sipRes = new  ::QSGRendererInterface::ShaderSourceTypes((a0 | *a1));
            sipReleaseType(a1,sipType_QSGRendererInterface_ShaderSourceTypes,a1State);

            return sipConvertFromNewType(sipRes,sipType_QSGRendererInterface_ShaderSourceTypes,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QSGRendererInterface_ShaderSourceType[] = {
    {(void *)slot_QSGRendererInterface_ShaderSourceType___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QSGRendererInterface_ShaderCompilationType___or__(PyObject *,PyObject *);}
static PyObject *slot_QSGRendererInterface_ShaderCompilationType___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGRendererInterface::ShaderCompilationType a0;
         ::QSGRendererInterface::ShaderCompilationTypes* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QSGRendererInterface_ShaderCompilationType, &a0, sipType_QSGRendererInterface_ShaderCompilationTypes, &a1, &a1State))
        {
             ::QSGRendererInterface::ShaderCompilationTypes*sipRes;

            sipRes = new  ::QSGRendererInterface::ShaderCompilationTypes((a0 | *a1));
            sipReleaseType(a1,sipType_QSGRendererInterface_ShaderCompilationTypes,a1State);

            return sipConvertFromNewType(sipRes,sipType_QSGRendererInterface_ShaderCompilationTypes,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QSGRendererInterface_ShaderCompilationType[] = {
    {(void *)slot_QSGRendererInterface_ShaderCompilationType___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QSGNode_DirtyStateBit___or__(PyObject *,PyObject *);}
static PyObject *slot_QSGNode_DirtyStateBit___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGNode::DirtyStateBit a0;
         ::QSGNode::DirtyState* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QSGNode_DirtyStateBit, &a0, sipType_QSGNode_DirtyState, &a1, &a1State))
        {
             ::QSGNode::DirtyState*sipRes;

            sipRes = new  ::QSGNode::DirtyState((a0 | *a1));
            sipReleaseType(a1,sipType_QSGNode_DirtyState,a1State);

            return sipConvertFromNewType(sipRes,sipType_QSGNode_DirtyState,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QSGNode_DirtyStateBit[] = {
    {(void *)slot_QSGNode_DirtyStateBit___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QSGNode_Flag___or__(PyObject *,PyObject *);}
static PyObject *slot_QSGNode_Flag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGNode::Flag a0;
         ::QSGNode::Flags* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QSGNode_Flag, &a0, sipType_QSGNode_Flags, &a1, &a1State))
        {
             ::QSGNode::Flags*sipRes;

            sipRes = new  ::QSGNode::Flags((a0 | *a1));
            sipReleaseType(a1,sipType_QSGNode_Flags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QSGNode_Flags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QSGNode_Flag[] = {
    {(void *)slot_QSGNode_Flag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QSGMaterial_Flag___or__(PyObject *,PyObject *);}
static PyObject *slot_QSGMaterial_Flag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGMaterial::Flag a0;
         ::QSGMaterial::Flags* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QSGMaterial_Flag, &a0, sipType_QSGMaterial_Flags, &a1, &a1State))
        {
             ::QSGMaterial::Flags*sipRes;

            sipRes = new  ::QSGMaterial::Flags((a0 | *a1));
            sipReleaseType(a1,sipType_QSGMaterial_Flags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QSGMaterial_Flags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QSGMaterial_Flag[] = {
    {(void *)slot_QSGMaterial_Flag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QSGMaterialShader_RenderState_DirtyState___or__(PyObject *,PyObject *);}
static PyObject *slot_QSGMaterialShader_RenderState_DirtyState___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGMaterialShader::RenderState::DirtyState a0;
         ::QSGMaterialShader::RenderState::DirtyStates* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QSGMaterialShader_RenderState_DirtyState, &a0, sipType_QSGMaterialShader_RenderState_DirtyStates, &a1, &a1State))
        {
             ::QSGMaterialShader::RenderState::DirtyStates*sipRes;

            sipRes = new  ::QSGMaterialShader::RenderState::DirtyStates((a0 | *a1));
            sipReleaseType(a1,sipType_QSGMaterialShader_RenderState_DirtyStates,a1State);

            return sipConvertFromNewType(sipRes,sipType_QSGMaterialShader_RenderState_DirtyStates,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QSGMaterialShader_RenderState_DirtyState[] = {
    {(void *)slot_QSGMaterialShader_RenderState_DirtyState___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QSGImageNode_TextureCoordinatesTransformFlag___or__(PyObject *,PyObject *);}
static PyObject *slot_QSGImageNode_TextureCoordinatesTransformFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGImageNode::TextureCoordinatesTransformFlag a0;
         ::QSGImageNode::TextureCoordinatesTransformMode* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QSGImageNode_TextureCoordinatesTransformFlag, &a0, sipType_QSGImageNode_TextureCoordinatesTransformMode, &a1, &a1State))
        {
             ::QSGImageNode::TextureCoordinatesTransformMode*sipRes;

            sipRes = new  ::QSGImageNode::TextureCoordinatesTransformMode((a0 | *a1));
            sipReleaseType(a1,sipType_QSGImageNode_TextureCoordinatesTransformMode,a1State);

            return sipConvertFromNewType(sipRes,sipType_QSGImageNode_TextureCoordinatesTransformMode,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QSGImageNode_TextureCoordinatesTransformFlag[] = {
    {(void *)slot_QSGImageNode_TextureCoordinatesTransformFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QSGAbstractRenderer_ClearModeBit___or__(PyObject *,PyObject *);}
static PyObject *slot_QSGAbstractRenderer_ClearModeBit___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGAbstractRenderer::ClearModeBit a0;
         ::QSGAbstractRenderer::ClearMode* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QSGAbstractRenderer_ClearModeBit, &a0, sipType_QSGAbstractRenderer_ClearMode, &a1, &a1State))
        {
             ::QSGAbstractRenderer::ClearMode*sipRes;

            sipRes = new  ::QSGAbstractRenderer::ClearMode((a0 | *a1));
            sipReleaseType(a1,sipType_QSGAbstractRenderer_ClearMode,a1State);

            return sipConvertFromNewType(sipRes,sipType_QSGAbstractRenderer_ClearMode,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QSGAbstractRenderer_ClearModeBit[] = {
    {(void *)slot_QSGAbstractRenderer_ClearModeBit___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QQuickPaintedItem_PerformanceHint___or__(PyObject *,PyObject *);}
static PyObject *slot_QQuickPaintedItem_PerformanceHint___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickPaintedItem::PerformanceHint a0;
         ::QQuickPaintedItem::PerformanceHints* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QQuickPaintedItem_PerformanceHint, &a0, sipType_QQuickPaintedItem_PerformanceHints, &a1, &a1State))
        {
             ::QQuickPaintedItem::PerformanceHints*sipRes;

            sipRes = new  ::QQuickPaintedItem::PerformanceHints((a0 | *a1));
            sipReleaseType(a1,sipType_QQuickPaintedItem_PerformanceHints,a1State);

            return sipConvertFromNewType(sipRes,sipType_QQuickPaintedItem_PerformanceHints,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QQuickPaintedItem_PerformanceHint[] = {
    {(void *)slot_QQuickPaintedItem_PerformanceHint___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QQuickItem_Flag___or__(PyObject *,PyObject *);}
static PyObject *slot_QQuickItem_Flag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickItem::Flag a0;
         ::QQuickItem::Flags* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QQuickItem_Flag, &a0, sipType_QQuickItem_Flags, &a1, &a1State))
        {
             ::QQuickItem::Flags*sipRes;

            sipRes = new  ::QQuickItem::Flags((a0 | *a1));
            sipReleaseType(a1,sipType_QQuickItem_Flags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QQuickItem_Flags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QQuickItem_Flag[] = {
    {(void *)slot_QQuickItem_Flag___or__, or_slot},
    {0, (sipPySlotType)0}
};

static sipEnumTypeDef enumTypes[] = {
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSGTexture__AnisotropyLevel, {0}, 0}, sipNameNr_AnisotropyLevel, 90, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSGTexture__Filtering, {0}, 0}, sipNameNr_Filtering, 90, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSGTexture__WrapMode, {0}, 0}, sipNameNr_WrapMode, 90, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSGSimpleTextureNode__TextureCoordinatesTransformFlag, {0}, 0}, sipNameNr_TextureCoordinatesTransformFlag, 87, slots_QSGSimpleTextureNode_TextureCoordinatesTransformFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSGRenderNode__RenderingFlag, {0}, 0}, sipNameNr_RenderingFlag, 72, slots_QSGRenderNode_RenderingFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSGRenderNode__StateFlag, {0}, 0}, sipNameNr_StateFlag, 72, slots_QSGRenderNode_StateFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSGRendererInterface__ShaderSourceType, {0}, 0}, sipNameNr_ShaderSourceType, 78, slots_QSGRendererInterface_ShaderSourceType},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSGRendererInterface__ShaderCompilationType, {0}, 0}, sipNameNr_ShaderCompilationType, 78, slots_QSGRendererInterface_ShaderCompilationType},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSGRendererInterface__ShaderType, {0}, 0}, sipNameNr_ShaderType, 78, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSGRendererInterface__Resource, {0}, 0}, sipNameNr_Resource, 78, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSGRendererInterface__GraphicsApi, {0}, 0}, sipNameNr_GraphicsApi, 78, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSGNode__DirtyStateBit, {0}, 0}, sipNameNr_DirtyStateBit, 63, slots_QSGNode_DirtyStateBit},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSGNode__Flag, {0}, 0}, sipNameNr_Flag, 63, slots_QSGNode_Flag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSGNode__NodeType, {0}, 0}, sipNameNr_NodeType, 63, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSGMaterial__Flag, {0}, 0}, sipNameNr_Flag, 55, slots_QSGMaterial_Flag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSGMaterialShader__RenderState__DirtyState, {0}, 0}, sipNameNr_DirtyState, 59, slots_QSGMaterialShader_RenderState_DirtyState},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSGImageNode__TextureCoordinatesTransformFlag, {0}, 0}, sipNameNr_TextureCoordinatesTransformFlag, 52, slots_QSGImageNode_TextureCoordinatesTransformFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSGGeometry__Type, {0}, 0}, sipNameNr_Type, 41, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSGGeometry__DrawingMode, {0}, 0}, sipNameNr_DrawingMode, 41, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSGGeometry__AttributeType, {0}, 0}, sipNameNr_AttributeType, 41, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSGGeometry__DataPattern, {0}, 0}, sipNameNr_DataPattern, 41, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSGEngine__CreateTextureOption, {0}, 0}, sipNameNr_CreateTextureOption, 37, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSGAbstractRenderer__ClearModeBit, {0}, 0}, sipNameNr_ClearModeBit, 31, slots_QSGAbstractRenderer_ClearModeBit},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QQuickWindow__TextRenderType, {0}, 0}, sipNameNr_TextRenderType, 25, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QQuickWindow__RenderStage, {0}, 0}, sipNameNr_RenderStage, 25, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QQuickWindow__SceneGraphError, {0}, 0}, sipNameNr_SceneGraphError, 25, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QQuickWindow__CreateTextureOption, {0}, 0}, sipNameNr_CreateTextureOption, 25, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QQuickView__Status, {0}, 0}, sipNameNr_Status, 22, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QQuickView__ResizeMode, {0}, 0}, sipNameNr_ResizeMode, 22, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QQuickPaintedItem__PerformanceHint, {0}, 0}, sipNameNr_PerformanceHint, 15, slots_QQuickPaintedItem_PerformanceHint},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QQuickPaintedItem__RenderTarget, {0}, 0}, sipNameNr_RenderTarget, 15, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QQuickItem__TransformOrigin, {0}, 0}, sipNameNr_TransformOrigin, 7, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QQuickItem__ItemChange, {0}, 0}, sipNameNr_ItemChange, 7, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QQuickItem__Flag, {0}, 0}, sipNameNr_Flag, 7, slots_QQuickItem_Flag},
};


/*
 * This defines each type in this module.
 */
sipTypeDef *sipExportedTypes_QtQuick[] = {
    &sipTypeDef_QtQuick_QList_0101QQuickItem.mtd_base,
    &sipTypeDef_QtQuick_QQuickAsyncImageProvider.ctd_base,
    &sipTypeDef_QtQuick_QQuickCloseEvent.ctd_base,
    &sipTypeDef_QtQuick_QQuickFramebufferObject.ctd_base,
    &sipTypeDef_QtQuick_QQuickFramebufferObject_Renderer.ctd_base,
    &sipTypeDef_QtQuick_QQuickImageProvider.ctd_base,
    &sipTypeDef_QtQuick_QQuickImageResponse.ctd_base,
    &sipTypeDef_QtQuick_QQuickItem.ctd_base,
    &enumTypes[33].etd_base,
    &sipTypeDef_QtQuick_QQuickItem_Flags.ctd_base,
    &enumTypes[32].etd_base,
    &sipTypeDef_QtQuick_QQuickItem_ItemChangeData.ctd_base,
    &enumTypes[31].etd_base,
    &sipTypeDef_QtQuick_QQuickItem_UpdatePaintNodeData.ctd_base,
    &sipTypeDef_QtQuick_QQuickItemGrabResult.ctd_base,
    &sipTypeDef_QtQuick_QQuickPaintedItem.ctd_base,
    &enumTypes[29].etd_base,
    &sipTypeDef_QtQuick_QQuickPaintedItem_PerformanceHints.ctd_base,
    &enumTypes[30].etd_base,
    &sipTypeDef_QtQuick_QQuickRenderControl.ctd_base,
    &sipTypeDef_QtQuick_QQuickTextDocument.ctd_base,
    &sipTypeDef_QtQuick_QQuickTextureFactory.ctd_base,
    &sipTypeDef_QtQuick_QQuickView.ctd_base,
    &enumTypes[28].etd_base,
    &enumTypes[27].etd_base,
    &sipTypeDef_QtQuick_QQuickWindow.ctd_base,
    &enumTypes[26].etd_base,
    &sipTypeDef_QtQuick_QQuickWindow_CreateTextureOptions.ctd_base,
    &enumTypes[24].etd_base,
    &enumTypes[25].etd_base,
    &enumTypes[23].etd_base,
    &sipTypeDef_QtQuick_QSGAbstractRenderer.ctd_base,
    &sipTypeDef_QtQuick_QSGAbstractRenderer_ClearMode.ctd_base,
    &enumTypes[22].etd_base,
    &sipTypeDef_QtQuick_QSGBasicGeometryNode.ctd_base,
    &sipTypeDef_QtQuick_QSGClipNode.ctd_base,
    &sipTypeDef_QtQuick_QSGDynamicTexture.ctd_base,
    &sipTypeDef_QtQuick_QSGEngine.ctd_base,
    &enumTypes[21].etd_base,
    &sipTypeDef_QtQuick_QSGEngine_CreateTextureOptions.ctd_base,
    &sipTypeDef_QtQuick_QSGFlatColorMaterial.ctd_base,
    &sipTypeDef_QtQuick_QSGGeometry.ctd_base,
    &sipTypeDef_QtQuick_QSGGeometry_Attribute.ctd_base,
    &sipTypeDef_QtQuick_QSGGeometry_AttributeSet.ctd_base,
    &enumTypes[19].etd_base,
    &sipTypeDef_QtQuick_QSGGeometry_ColoredPoint2D.ctd_base,
    &enumTypes[20].etd_base,
    &enumTypes[18].etd_base,
    &sipTypeDef_QtQuick_QSGGeometry_Point2D.ctd_base,
    &sipTypeDef_QtQuick_QSGGeometry_TexturedPoint2D.ctd_base,
    &enumTypes[17].etd_base,
    &sipTypeDef_QtQuick_QSGGeometryNode.ctd_base,
    &sipTypeDef_QtQuick_QSGImageNode.ctd_base,
    &enumTypes[16].etd_base,
    &sipTypeDef_QtQuick_QSGImageNode_TextureCoordinatesTransformMode.ctd_base,
    &sipTypeDef_QtQuick_QSGMaterial.ctd_base,
    &enumTypes[14].etd_base,
    &sipTypeDef_QtQuick_QSGMaterial_Flags.ctd_base,
    &sipTypeDef_QtQuick_QSGMaterialShader.ctd_base,
    &sipTypeDef_QtQuick_QSGMaterialShader_RenderState.ctd_base,
    &enumTypes[15].etd_base,
    &sipTypeDef_QtQuick_QSGMaterialShader_RenderState_DirtyStates.ctd_base,
    &sipTypeDef_QtQuick_QSGMaterialType.ctd_base,
    &sipTypeDef_QtQuick_QSGNode.ctd_base,
    &sipTypeDef_QtQuick_QSGNode_DirtyState.ctd_base,
    &enumTypes[11].etd_base,
    &enumTypes[12].etd_base,
    &sipTypeDef_QtQuick_QSGNode_Flags.ctd_base,
    &enumTypes[13].etd_base,
    &sipTypeDef_QtQuick_QSGOpacityNode.ctd_base,
    &sipTypeDef_QtQuick_QSGOpaqueTextureMaterial.ctd_base,
    &sipTypeDef_QtQuick_QSGRectangleNode.ctd_base,
    &sipTypeDef_QtQuick_QSGRenderNode.ctd_base,
    &sipTypeDef_QtQuick_QSGRenderNode_RenderState.ctd_base,
    &enumTypes[4].etd_base,
    &sipTypeDef_QtQuick_QSGRenderNode_RenderingFlags.ctd_base,
    &enumTypes[5].etd_base,
    &sipTypeDef_QtQuick_QSGRenderNode_StateFlags.ctd_base,
    &sipTypeDef_QtQuick_QSGRendererInterface.ctd_base,
    &enumTypes[10].etd_base,
    &enumTypes[9].etd_base,
    &enumTypes[7].etd_base,
    &sipTypeDef_QtQuick_QSGRendererInterface_ShaderCompilationTypes.ctd_base,
    &enumTypes[6].etd_base,
    &sipTypeDef_QtQuick_QSGRendererInterface_ShaderSourceTypes.ctd_base,
    &enumTypes[8].etd_base,
    &sipTypeDef_QtQuick_QSGSimpleRectNode.ctd_base,
    &sipTypeDef_QtQuick_QSGSimpleTextureNode.ctd_base,
    &enumTypes[3].etd_base,
    &sipTypeDef_QtQuick_QSGSimpleTextureNode_TextureCoordinatesTransformMode.ctd_base,
    &sipTypeDef_QtQuick_QSGTexture.ctd_base,
    &enumTypes[0].etd_base,
    &enumTypes[1].etd_base,
    &enumTypes[2].etd_base,
    &sipTypeDef_QtQuick_QSGTextureMaterial.ctd_base,
    &sipTypeDef_QtQuick_QSGTextureProvider.ctd_base,
    &sipTypeDef_QtQuick_QSGTransformNode.ctd_base,
    &sipTypeDef_QtQuick_QSGVertexColorMaterial.ctd_base,
};


/* This defines the types that this module needs to import from QtCore. */
sipImportedTypeDef sipImportedTypes_QtQuick_QtCore[] = {
    {"QChildEvent"},
    {"QEvent"},
    {"QMetaMethod"},
    {"QObject"},
    {"QPoint"},
    {"QPointF"},
    {"QRect"},
    {"QRectF"},
    {"QRunnable"},
    {"QSize"},
    {"QSizeF"},
    {"QString"},
    {"QStringList"},
    {"QThread"},
    {"QTimerEvent"},
    {"QUrl"},
    {"QVariant"},
    {"QVector<int>"},
    {"Qt::FocusReason"},
    {"Qt::InputMethodQueries"},
    {"Qt::InputMethodQuery"},
    {"Qt::MouseButtons"},
    {SIP_NULLPTR}
};


/*
 * This defines the virtual error handlers that this module needs to import
 * from QtCore.
 */
sipImportedVirtErrorHandlerDef sipImportedVirtErrorHandlers_QtQuick_QtCore[] = {
    {"PyQt5"},
    {SIP_NULLPTR}
};


/* This defines the types that this module needs to import from QtQml. */
sipImportedTypeDef sipImportedTypes_QtQuick_QtQml[] = {
    {"QList<QQmlError>"},
    {"QQmlContext"},
    {"QQmlEngine"},
    {"QQmlImageProviderBase"},
    {"QQmlImageProviderBase::Flags"},
    {"QQmlImageProviderBase::ImageType"},
    {"QQmlIncubationController"},
    {"QQmlParserStatus"},
    {SIP_NULLPTR}
};


/* This defines the types that this module needs to import from QtGui. */
sipImportedTypeDef sipImportedTypes_QtQuick_QtGui[] = {
    {"QColor"},
    {"QCursor"},
    {"QDragEnterEvent"},
    {"QDragLeaveEvent"},
    {"QDragMoveEvent"},
    {"QDropEvent"},
    {"QExposeEvent"},
    {"QFocusEvent"},
    {"QHideEvent"},
    {"QHoverEvent"},
    {"QImage"},
    {"QInputMethodEvent"},
    {"QKeyEvent"},
    {"QMatrix4x4"},
    {"QMouseEvent"},
    {"QMoveEvent"},
    {"QOpenGLContext"},
    {"QOpenGLFramebufferObject"},
    {"QOpenGLShader::ShaderType"},
    {"QOpenGLShaderProgram"},
    {"QPainter"},
    {"QPixmap"},
    {"QRegion"},
    {"QResizeEvent"},
    {"QShowEvent"},
    {"QSurface"},
    {"QSurface::SurfaceType"},
    {"QSurfaceFormat"},
    {"QTabletEvent"},
    {"QTextDocument"},
    {"QTouchEvent"},
    {"QWheelEvent"},
    {"QWindow"},
    {SIP_NULLPTR}
};


/* This defines the modules that this module needs to import. */
static sipImportedModuleDef importsTable[] = {
    {"PyQt5.QtCore", sipImportedTypes_QtQuick_QtCore, sipImportedVirtErrorHandlers_QtQuick_QtCore, SIP_NULLPTR},
    {"PyQt5.QtNetwork", SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {"PyQt5.QtQml", sipImportedTypes_QtQuick_QtQml, SIP_NULLPTR, SIP_NULLPTR},
    {"PyQt5.QtGui", sipImportedTypes_QtQuick_QtGui, SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


/* This defines the class sub-convertors that this module defines. */
static sipSubClassConvertorDef convertorsTable[] = {
    {sipSubClass_QQuickWindow, {3, 0, 0}, SIP_NULLPTR},
    {sipSubClass_QSGNode, {63, 255, 0}, SIP_NULLPTR},
    {SIP_NULLPTR, {0, 0, 0}, SIP_NULLPTR}
};


/* This defines this module. */
sipExportedModuleDef sipModuleAPI_QtQuick = {
    0,
    SIP_API_MINOR_NR,
    sipNameNr_PyQt5_QtQuick,
    0,
    sipStrings_QtQuick,
    importsTable,
    SIP_NULLPTR,
    98,
    sipExportedTypes_QtQuick,
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR,
    convertorsTable,
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};


/* The SIP API and the APIs of any imported modules. */
const sipAPIDef *sipAPI_QtQuick;

sip_qt_metaobject_func sip_QtQuick_qt_metaobject;
sip_qt_metacall_func sip_QtQuick_qt_metacall;
sip_qt_metacast_func sip_QtQuick_qt_metacast;


/* The Python module initialisation function. */
#if PY_MAJOR_VERSION >= 3
#define SIP_MODULE_ENTRY        PyInit_QtQuick
#define SIP_MODULE_TYPE         PyObject *
#define SIP_MODULE_DISCARD(r)   Py_DECREF(r)
#define SIP_MODULE_RETURN(r)    return (r)
#else
#define SIP_MODULE_ENTRY        initQtQuick
#define SIP_MODULE_TYPE         void
#define SIP_MODULE_DISCARD(r)
#define SIP_MODULE_RETURN(r)    return
#endif

#if defined(SIP_STATIC_MODULE)
extern "C" SIP_MODULE_TYPE SIP_MODULE_ENTRY()
#else
PyMODINIT_FUNC SIP_MODULE_ENTRY()
#endif
{
    static PyMethodDef sip_methods[] = {
        {SIP_NULLPTR, SIP_NULLPTR, 0, SIP_NULLPTR}
    };

#if PY_MAJOR_VERSION >= 3
    static PyModuleDef sip_module_def = {
        PyModuleDef_HEAD_INIT,
        "PyQt5.QtQuick",
        SIP_NULLPTR,
        -1,
        sip_methods,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_NULLPTR
    };
#endif

    PyObject *sipModule, *sipModuleDict;
    PyObject *sip_sipmod, *sip_capiobj;

    /* Initialise the module and get it's dictionary. */
#if PY_MAJOR_VERSION >= 3
    sipModule = PyModule_Create(&sip_module_def);
#elif PY_VERSION_HEX >= 0x02050000
    sipModule = Py_InitModule(sipName_PyQt5_QtQuick, sip_methods);
#else
    sipModule = Py_InitModule(const_cast<char *>(sipName_PyQt5_QtQuick), sip_methods);
#endif

    if (sipModule == SIP_NULLPTR)
        SIP_MODULE_RETURN(SIP_NULLPTR);

    sipModuleDict = PyModule_GetDict(sipModule);

    /* Get the SIP module's API. */
#if PY_VERSION_HEX >= 0x02050000
    sip_sipmod = PyImport_ImportModule("PyQt5.sip");
#else
    sip_sipmod = PyImport_ImportModule(const_cast<char *>("PyQt5.sip"));
#endif

    if (sip_sipmod == SIP_NULLPTR)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }

    sip_capiobj = PyDict_GetItemString(PyModule_GetDict(sip_sipmod), "_C_API");
    Py_DECREF(sip_sipmod);

#if defined(SIP_USE_PYCAPSULE)
    if (sip_capiobj == SIP_NULLPTR || !PyCapsule_CheckExact(sip_capiobj))
#else
    if (sip_capiobj == SIP_NULLPTR || !PyCObject_Check(sip_capiobj))
#endif
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }

#if defined(SIP_USE_PYCAPSULE)
    sipAPI_QtQuick = reinterpret_cast<const sipAPIDef *>(PyCapsule_GetPointer(sip_capiobj, "PyQt5.sip._C_API"));
#else
    sipAPI_QtQuick = reinterpret_cast<const sipAPIDef *>(PyCObject_AsVoidPtr(sip_capiobj));
#endif

#if defined(SIP_USE_PYCAPSULE)
    if (sipAPI_QtQuick == SIP_NULLPTR)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }
#endif

    /* Export the module and publish it's API. */
    if (sipExportModule(&sipModuleAPI_QtQuick,SIP_API_MAJOR_NR,SIP_API_MINOR_NR,0) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }

    sip_QtQuick_qt_metaobject = (sip_qt_metaobject_func)sipImportSymbol("qtcore_qt_metaobject");
    sip_QtQuick_qt_metacall = (sip_qt_metacall_func)sipImportSymbol("qtcore_qt_metacall");
    sip_QtQuick_qt_metacast = (sip_qt_metacast_func)sipImportSymbol("qtcore_qt_metacast");

    if (!sip_QtQuick_qt_metacast)
        Py_FatalError("Unable to import qtcore_qt_metacast");

    /* Initialise the module now all its dependencies have been set up. */
    if (sipInitModule(&sipModuleAPI_QtQuick,sipModuleDict) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }
#line 292 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickwindow.sip"
qpyquick_post_init();
#line 2767 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

    SIP_MODULE_RETURN(sipModule);
}

#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 2774 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 2778 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"


extern "C" {static void assign_QList_0101QQuickItem(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0101QQuickItem(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QQuickItem*> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QQuickItem*> *>(sipSrc);
}


extern "C" {static void *array_QList_0101QQuickItem(SIP_SSIZE_T);}
static void *array_QList_0101QQuickItem(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QQuickItem*>[sipNrElem];
}


extern "C" {static void *copy_QList_0101QQuickItem(const void *, SIP_SSIZE_T);}
static void *copy_QList_0101QQuickItem(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QQuickItem*>(reinterpret_cast<const QList< ::QQuickItem*> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0101QQuickItem(void *, int);}
static void release_QList_0101QQuickItem(void *ptr, int)
{
    delete reinterpret_cast<QList< ::QQuickItem*> *>(ptr);
}



extern "C" {static int convertTo_QList_0101QQuickItem(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0101QQuickItem(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QQuickItem*> **sipCppPtr = reinterpret_cast<QList< ::QQuickItem*> **>(sipCppPtrV);

#line 184 "sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QQuickItem *> *ql = new QList<QQuickItem *>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        QQuickItem *t = reinterpret_cast<QQuickItem *>(
                sipForceConvertToType(itm, sipType_QQuickItem, sipTransferObj, 0,
                        0, sipIsErr));
 
        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QQuickItem' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(t);

        Py_DECREF(itm);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 2886 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0101QQuickItem(void *, PyObject *);}
static PyObject *convertFrom_QList_0101QQuickItem(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QQuickItem*> *sipCpp = reinterpret_cast<QList< ::QQuickItem*> *>(sipCppV);

#line 153 "sip/QtCore/qpycore_qlist.sip"
    int gc_enabled = sipEnableGC(0);
    PyObject *l = PyList_New(sipCpp->size());

    if (l)
    {
        for (int i = 0; i < sipCpp->size(); ++i)
        {
            QQuickItem *t = sipCpp->at(i);

            // The explicit (void *) cast allows QQuickItem to be const.
            PyObject *tobj = sipConvertFromType((void *)t, sipType_QQuickItem,
                    sipTransferObj);

            if (!tobj)
            {
                Py_DECREF(l);
                l = 0;

                break;
            }

            PyList_SetItem(l, i, tobj);
        }
    }

    sipEnableGC(gc_enabled);

    return l;
#line 2924 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtQuick_QList_0101QQuickItem = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_4347,     /* QList<QQuickItem*> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0101QQuickItem,
    array_QList_0101QQuickItem,
    copy_QList_0101QQuickItem,
    release_QList_0101QQuickItem,
    convertTo_QList_0101QQuickItem,
    convertFrom_QList_0101QQuickItem
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgvertexcolormaterial.sip"
#include <qsgvertexcolormaterial.h>
#line 2956 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 2960 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 158 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 2963 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 165 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 2966 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 165 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 2969 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"


class sipQSGVertexColorMaterial : public  ::QSGVertexColorMaterial
{
public:
    sipQSGVertexColorMaterial();
    virtual ~sipQSGVertexColorMaterial();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QSGMaterialType* type() const SIP_OVERRIDE;
     ::QSGMaterialShader* createShader() const SIP_OVERRIDE;
    int compare(const  ::QSGMaterial*) const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSGVertexColorMaterial(const sipQSGVertexColorMaterial &);
    sipQSGVertexColorMaterial &operator = (const sipQSGVertexColorMaterial &);

    char sipPyMethods[3];
};

sipQSGVertexColorMaterial::sipQSGVertexColorMaterial():  ::QSGVertexColorMaterial(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSGVertexColorMaterial::~sipQSGVertexColorMaterial()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::QSGMaterialType* sipQSGVertexColorMaterial::type() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_type);

    if (!sipMeth)
        return  ::QSGVertexColorMaterial::type();

    extern  ::QSGMaterialType* sipVH_QtQuick_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_53(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSGMaterialShader* sipQSGVertexColorMaterial::createShader() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_createShader);

    if (!sipMeth)
        return  ::QSGVertexColorMaterial::createShader();

    extern  ::QSGMaterialShader* sipVH_QtQuick_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_54(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQSGVertexColorMaterial::compare(const  ::QSGMaterial*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,SIP_NULLPTR,sipName_compare);

    if (!sipMeth)
        return  ::QSGVertexColorMaterial::compare(a0);

    extern int sipVH_QtQuick_55(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QSGMaterial*);

    return sipVH_QtQuick_55(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QSGVertexColorMaterial_compare, "compare(self, QSGMaterial) -> int");

extern "C" {static PyObject *meth_QSGVertexColorMaterial_compare(PyObject *, PyObject *);}
static PyObject *meth_QSGVertexColorMaterial_compare(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSGMaterial* a0;
        const  ::QSGVertexColorMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QSGVertexColorMaterial, &sipCpp, sipType_QSGMaterial, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSGVertexColorMaterial::compare(a0) : sipCpp->compare(a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGVertexColorMaterial, sipName_compare, doc_QSGVertexColorMaterial_compare);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGVertexColorMaterial_type, "type(self) -> QSGMaterialType");

extern "C" {static PyObject *meth_QSGVertexColorMaterial_type(PyObject *, PyObject *);}
static PyObject *meth_QSGVertexColorMaterial_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSGVertexColorMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSGVertexColorMaterial, &sipCpp))
        {
             ::QSGMaterialType*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSGVertexColorMaterial::type() : sipCpp->type());

            return sipConvertFromType(sipRes,sipType_QSGMaterialType,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGVertexColorMaterial, sipName_type, doc_QSGVertexColorMaterial_type);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGVertexColorMaterial_createShader, "createShader(self) -> QSGMaterialShader");

extern "C" {static PyObject *meth_QSGVertexColorMaterial_createShader(PyObject *, PyObject *);}
static PyObject *meth_QSGVertexColorMaterial_createShader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSGVertexColorMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSGVertexColorMaterial, &sipCpp))
        {
             ::QSGMaterialShader*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSGVertexColorMaterial::createShader() : sipCpp->createShader());

            return sipConvertFromNewType(sipRes,sipType_QSGMaterialShader,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGVertexColorMaterial, sipName_createShader, doc_QSGVertexColorMaterial_createShader);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSGVertexColorMaterial(void *, const sipTypeDef *);}
static void *cast_QSGVertexColorMaterial(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSGVertexColorMaterial *sipCpp = reinterpret_cast< ::QSGVertexColorMaterial *>(sipCppV);

    if (targetType == sipType_QSGMaterial)
        return static_cast< ::QSGMaterial *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGVertexColorMaterial(void *, int);}
static void release_QSGVertexColorMaterial(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQSGVertexColorMaterial *>(sipCppV);
    else
        delete reinterpret_cast< ::QSGVertexColorMaterial *>(sipCppV);
}


extern "C" {static void dealloc_QSGVertexColorMaterial(sipSimpleWrapper *);}
static void dealloc_QSGVertexColorMaterial(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSGVertexColorMaterial *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGVertexColorMaterial(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSGVertexColorMaterial(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGVertexColorMaterial(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQSGVertexColorMaterial *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQSGVertexColorMaterial();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSGVertexColorMaterial[] = {{55, 255, 1}};


static PyMethodDef methods_QSGVertexColorMaterial[] = {
    {SIP_MLNAME_CAST(sipName_compare), meth_QSGVertexColorMaterial_compare, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGVertexColorMaterial_compare)},
    {SIP_MLNAME_CAST(sipName_createShader), meth_QSGVertexColorMaterial_createShader, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGVertexColorMaterial_createShader)},
    {SIP_MLNAME_CAST(sipName_type), meth_QSGVertexColorMaterial_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGVertexColorMaterial_type)}
};

PyDoc_STRVAR(doc_QSGVertexColorMaterial, "\1QSGVertexColorMaterial()");


static pyqt5ClassPluginDef plugin_QSGVertexColorMaterial = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGVertexColorMaterial = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGVertexColorMaterial,
        {SIP_NULLPTR},
        &plugin_QSGVertexColorMaterial
    },
    {
        sipNameNr_QSGVertexColorMaterial,
        {0, 0, 1},
        3, methods_QSGVertexColorMaterial,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSGVertexColorMaterial,
    -1,
    -1,
    supers_QSGVertexColorMaterial,
    SIP_NULLPTR,
    init_type_QSGVertexColorMaterial,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGVertexColorMaterial,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSGVertexColorMaterial,
    cast_QSGVertexColorMaterial,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgtextureprovider.sip"
#include <qsgtextureprovider.h>
#line 3271 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgtexture.sip"
#include <qsgtexture.h>
#line 3275 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 3278 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 3281 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 3284 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 3287 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 3290 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 3293 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 3296 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 3299 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 3302 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 3305 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 3308 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 3311 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 3314 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 3317 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 3320 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 3323 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"


class sipQSGTextureProvider : public  ::QSGTextureProvider
{
public:
    sipQSGTextureProvider();
    virtual ~sipQSGTextureProvider();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QSGTexture* texture() const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSGTextureProvider(const sipQSGTextureProvider &);
    sipQSGTextureProvider &operator = (const sipQSGTextureProvider &);

    char sipPyMethods[8];
};

sipQSGTextureProvider::sipQSGTextureProvider():  ::QSGTextureProvider(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSGTextureProvider::~sipQSGTextureProvider()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQSGTextureProvider::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtQuick_qt_metaobject(sipPySelf,sipType_QSGTextureProvider);

    return  ::QSGTextureProvider::metaObject();
}

int sipQSGTextureProvider::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QSGTextureProvider::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtQuick_qt_metacall(sipPySelf,sipType_QSGTextureProvider,_c,_id,_a);

    return _id;
}

void *sipQSGTextureProvider::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtQuick_qt_metacast(sipPySelf, sipType_QSGTextureProvider, _clname, &sipCpp) ? sipCpp :  ::QSGTextureProvider::qt_metacast(_clname));
}

 ::QSGTexture* sipQSGTextureProvider::texture() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,sipName_QSGTextureProvider,sipName_texture);

    if (!sipMeth)
        return 0;

    extern  ::QSGTexture* sipVH_QtQuick_83(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_83(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQSGTextureProvider::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QSGTextureProvider::event(a0);

    extern bool sipVH_QtQuick_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtQuick_5(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQSGTextureProvider::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QSGTextureProvider::eventFilter(a0,a1);

    extern bool sipVH_QtQuick_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtQuick_4(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQSGTextureProvider::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QSGTextureProvider::timerEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtQuick_3(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSGTextureProvider::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QSGTextureProvider::childEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtQuick_2(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSGTextureProvider::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QSGTextureProvider::customEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtQuick_1(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSGTextureProvider::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QSGTextureProvider::connectNotify(a0);
        return;
    }

    extern void sipVH_QtQuick_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQuick_0(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSGTextureProvider::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QSGTextureProvider::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtQuick_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQuick_0(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QSGTextureProvider_texture, "texture(self) -> QSGTexture");

extern "C" {static PyObject *meth_QSGTextureProvider_texture(PyObject *, PyObject *);}
static PyObject *meth_QSGTextureProvider_texture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QSGTextureProvider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGTextureProvider, &sipCpp))
        {
             ::QSGTexture*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSGTextureProvider, sipName_texture);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->texture();

            return sipConvertFromNewType(sipRes,sipType_QSGTexture,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGTextureProvider, sipName_texture, doc_QSGTextureProvider_texture);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSGTextureProvider(void *, const sipTypeDef *);}
static void *cast_QSGTextureProvider(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSGTextureProvider *sipCpp = reinterpret_cast< ::QSGTextureProvider *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGTextureProvider(void *, int);}
static void release_QSGTextureProvider(void *sipCppV, int)
{
     ::QSGTextureProvider *sipCpp = reinterpret_cast< ::QSGTextureProvider *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QSGTextureProvider(sipSimpleWrapper *);}
static void dealloc_QSGTextureProvider(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSGTextureProvider *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGTextureProvider(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSGTextureProvider(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGTextureProvider(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQSGTextureProvider *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQSGTextureProvider();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSGTextureProvider[] = {{3, 0, 1}};


static PyMethodDef methods_QSGTextureProvider[] = {
    {SIP_MLNAME_CAST(sipName_texture), meth_QSGTextureProvider_texture, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGTextureProvider_texture)}
};

PyDoc_STRVAR(doc_QSGTextureProvider, "\1QSGTextureProvider()");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QSGTextureProvider[] = {
    {"textureChanged()", "\1textureChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QSGTextureProvider = {
    & ::QSGTextureProvider::staticMetaObject,
    0,
    signals_QSGTextureProvider,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGTextureProvider = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGTextureProvider,
        {SIP_NULLPTR},
        &plugin_QSGTextureProvider
    },
    {
        sipNameNr_QSGTextureProvider,
        {0, 0, 1},
        1, methods_QSGTextureProvider,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSGTextureProvider,
    -1,
    -1,
    supers_QSGTextureProvider,
    SIP_NULLPTR,
    init_type_QSGTextureProvider,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGTextureProvider,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSGTextureProvider,
    cast_QSGTextureProvider,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 55 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgtexturematerial.sip"
#include <qsgtexturematerial.h>
#line 3703 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 3707 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 158 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 3710 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgtexture.sip"
#include <qsgtexture.h>
#line 3713 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 165 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 3716 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 165 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 3719 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"


class sipQSGTextureMaterial : public  ::QSGTextureMaterial
{
public:
    sipQSGTextureMaterial();
    virtual ~sipQSGTextureMaterial();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    int compare(const  ::QSGMaterial*) const SIP_OVERRIDE;
     ::QSGMaterialShader* createShader() const SIP_OVERRIDE;
     ::QSGMaterialType* type() const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSGTextureMaterial(const sipQSGTextureMaterial &);
    sipQSGTextureMaterial &operator = (const sipQSGTextureMaterial &);

    char sipPyMethods[3];
};

sipQSGTextureMaterial::sipQSGTextureMaterial():  ::QSGTextureMaterial(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSGTextureMaterial::~sipQSGTextureMaterial()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

int sipQSGTextureMaterial::compare(const  ::QSGMaterial*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_compare);

    if (!sipMeth)
        return  ::QSGTextureMaterial::compare(a0);

    extern int sipVH_QtQuick_55(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QSGMaterial*);

    return sipVH_QtQuick_55(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSGMaterialShader* sipQSGTextureMaterial::createShader() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_createShader);

    if (!sipMeth)
        return  ::QSGTextureMaterial::createShader();

    extern  ::QSGMaterialShader* sipVH_QtQuick_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_54(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSGMaterialType* sipQSGTextureMaterial::type() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,SIP_NULLPTR,sipName_type);

    if (!sipMeth)
        return  ::QSGTextureMaterial::type();

    extern  ::QSGMaterialType* sipVH_QtQuick_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_53(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QSGTextureMaterial_type, "type(self) -> QSGMaterialType");

extern "C" {static PyObject *meth_QSGTextureMaterial_type(PyObject *, PyObject *);}
static PyObject *meth_QSGTextureMaterial_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSGTextureMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGTextureMaterial, &sipCpp))
        {
             ::QSGMaterialType*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSGTextureMaterial::type() : sipCpp->type());

            return sipConvertFromType(sipRes,sipType_QSGMaterialType,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGTextureMaterial, sipName_type, doc_QSGTextureMaterial_type);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGTextureMaterial_createShader, "createShader(self) -> QSGMaterialShader");

extern "C" {static PyObject *meth_QSGTextureMaterial_createShader(PyObject *, PyObject *);}
static PyObject *meth_QSGTextureMaterial_createShader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSGTextureMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGTextureMaterial, &sipCpp))
        {
             ::QSGMaterialShader*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSGTextureMaterial::createShader() : sipCpp->createShader());

            return sipConvertFromNewType(sipRes,sipType_QSGMaterialShader,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGTextureMaterial, sipName_createShader, doc_QSGTextureMaterial_createShader);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSGTextureMaterial(void *, const sipTypeDef *);}
static void *cast_QSGTextureMaterial(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSGTextureMaterial *sipCpp = reinterpret_cast< ::QSGTextureMaterial *>(sipCppV);

    if (targetType == sipType_QSGOpaqueTextureMaterial)
        return static_cast< ::QSGOpaqueTextureMaterial *>(sipCpp);

    if (targetType == sipType_QSGMaterial)
        return static_cast< ::QSGMaterial *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGTextureMaterial(void *, int);}
static void release_QSGTextureMaterial(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQSGTextureMaterial *>(sipCppV);
    else
        delete reinterpret_cast< ::QSGTextureMaterial *>(sipCppV);
}


extern "C" {static void dealloc_QSGTextureMaterial(sipSimpleWrapper *);}
static void dealloc_QSGTextureMaterial(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSGTextureMaterial *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGTextureMaterial(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSGTextureMaterial(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGTextureMaterial(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQSGTextureMaterial *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQSGTextureMaterial();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSGTextureMaterial[] = {{70, 255, 1}};


static PyMethodDef methods_QSGTextureMaterial[] = {
    {SIP_MLNAME_CAST(sipName_createShader), meth_QSGTextureMaterial_createShader, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGTextureMaterial_createShader)},
    {SIP_MLNAME_CAST(sipName_type), meth_QSGTextureMaterial_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGTextureMaterial_type)}
};

PyDoc_STRVAR(doc_QSGTextureMaterial, "\1QSGTextureMaterial()");


static pyqt5ClassPluginDef plugin_QSGTextureMaterial = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGTextureMaterial = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGTextureMaterial,
        {SIP_NULLPTR},
        &plugin_QSGTextureMaterial
    },
    {
        sipNameNr_QSGTextureMaterial,
        {0, 0, 1},
        2, methods_QSGTextureMaterial,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSGTextureMaterial,
    -1,
    -1,
    supers_QSGTextureMaterial,
    SIP_NULLPTR,
    init_type_QSGTextureMaterial,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGTextureMaterial,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSGTextureMaterial,
    cast_QSGTextureMaterial,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgtexturematerial.sip"
#include <qsgtexturematerial.h>
#line 3993 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgtexture.sip"
#include <qsgtexture.h>
#line 3997 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 165 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 4000 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 4003 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 158 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 4006 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 165 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 4009 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"


class sipQSGOpaqueTextureMaterial : public  ::QSGOpaqueTextureMaterial
{
public:
    sipQSGOpaqueTextureMaterial();
    virtual ~sipQSGOpaqueTextureMaterial();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QSGMaterialType* type() const SIP_OVERRIDE;
     ::QSGMaterialShader* createShader() const SIP_OVERRIDE;
    int compare(const  ::QSGMaterial*) const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSGOpaqueTextureMaterial(const sipQSGOpaqueTextureMaterial &);
    sipQSGOpaqueTextureMaterial &operator = (const sipQSGOpaqueTextureMaterial &);

    char sipPyMethods[3];
};

sipQSGOpaqueTextureMaterial::sipQSGOpaqueTextureMaterial():  ::QSGOpaqueTextureMaterial(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSGOpaqueTextureMaterial::~sipQSGOpaqueTextureMaterial()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::QSGMaterialType* sipQSGOpaqueTextureMaterial::type() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_type);

    if (!sipMeth)
        return  ::QSGOpaqueTextureMaterial::type();

    extern  ::QSGMaterialType* sipVH_QtQuick_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_53(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSGMaterialShader* sipQSGOpaqueTextureMaterial::createShader() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_createShader);

    if (!sipMeth)
        return  ::QSGOpaqueTextureMaterial::createShader();

    extern  ::QSGMaterialShader* sipVH_QtQuick_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_54(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQSGOpaqueTextureMaterial::compare(const  ::QSGMaterial*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,SIP_NULLPTR,sipName_compare);

    if (!sipMeth)
        return  ::QSGOpaqueTextureMaterial::compare(a0);

    extern int sipVH_QtQuick_55(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QSGMaterial*);

    return sipVH_QtQuick_55(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QSGOpaqueTextureMaterial_type, "type(self) -> QSGMaterialType");

extern "C" {static PyObject *meth_QSGOpaqueTextureMaterial_type(PyObject *, PyObject *);}
static PyObject *meth_QSGOpaqueTextureMaterial_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSGOpaqueTextureMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGOpaqueTextureMaterial, &sipCpp))
        {
             ::QSGMaterialType*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSGOpaqueTextureMaterial::type() : sipCpp->type());

            return sipConvertFromType(sipRes,sipType_QSGMaterialType,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGOpaqueTextureMaterial, sipName_type, doc_QSGOpaqueTextureMaterial_type);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGOpaqueTextureMaterial_createShader, "createShader(self) -> QSGMaterialShader");

extern "C" {static PyObject *meth_QSGOpaqueTextureMaterial_createShader(PyObject *, PyObject *);}
static PyObject *meth_QSGOpaqueTextureMaterial_createShader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSGOpaqueTextureMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGOpaqueTextureMaterial, &sipCpp))
        {
             ::QSGMaterialShader*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSGOpaqueTextureMaterial::createShader() : sipCpp->createShader());

            return sipConvertFromNewType(sipRes,sipType_QSGMaterialShader,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGOpaqueTextureMaterial, sipName_createShader, doc_QSGOpaqueTextureMaterial_createShader);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGOpaqueTextureMaterial_compare, "compare(self, QSGMaterial) -> int");

extern "C" {static PyObject *meth_QSGOpaqueTextureMaterial_compare(PyObject *, PyObject *);}
static PyObject *meth_QSGOpaqueTextureMaterial_compare(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSGMaterial* a0;
        const  ::QSGOpaqueTextureMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QSGOpaqueTextureMaterial, &sipCpp, sipType_QSGMaterial, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSGOpaqueTextureMaterial::compare(a0) : sipCpp->compare(a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGOpaqueTextureMaterial, sipName_compare, doc_QSGOpaqueTextureMaterial_compare);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGOpaqueTextureMaterial_setTexture, "setTexture(self, QSGTexture)");

extern "C" {static PyObject *meth_QSGOpaqueTextureMaterial_setTexture(PyObject *, PyObject *);}
static PyObject *meth_QSGOpaqueTextureMaterial_setTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGTexture* a0;
         ::QSGOpaqueTextureMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QSGOpaqueTextureMaterial, &sipCpp, sipType_QSGTexture, &a0))
        {
            sipCpp->setTexture(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGOpaqueTextureMaterial, sipName_setTexture, doc_QSGOpaqueTextureMaterial_setTexture);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGOpaqueTextureMaterial_texture, "texture(self) -> QSGTexture");

extern "C" {static PyObject *meth_QSGOpaqueTextureMaterial_texture(PyObject *, PyObject *);}
static PyObject *meth_QSGOpaqueTextureMaterial_texture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGOpaqueTextureMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGOpaqueTextureMaterial, &sipCpp))
        {
             ::QSGTexture*sipRes;

            sipRes = sipCpp->texture();

            return sipConvertFromType(sipRes,sipType_QSGTexture,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGOpaqueTextureMaterial, sipName_texture, doc_QSGOpaqueTextureMaterial_texture);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGOpaqueTextureMaterial_setMipmapFiltering, "setMipmapFiltering(self, QSGTexture.Filtering)");

extern "C" {static PyObject *meth_QSGOpaqueTextureMaterial_setMipmapFiltering(PyObject *, PyObject *);}
static PyObject *meth_QSGOpaqueTextureMaterial_setMipmapFiltering(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGTexture::Filtering a0;
         ::QSGOpaqueTextureMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSGOpaqueTextureMaterial, &sipCpp, sipType_QSGTexture_Filtering, &a0))
        {
            sipCpp->setMipmapFiltering(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGOpaqueTextureMaterial, sipName_setMipmapFiltering, doc_QSGOpaqueTextureMaterial_setMipmapFiltering);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGOpaqueTextureMaterial_mipmapFiltering, "mipmapFiltering(self) -> QSGTexture.Filtering");

extern "C" {static PyObject *meth_QSGOpaqueTextureMaterial_mipmapFiltering(PyObject *, PyObject *);}
static PyObject *meth_QSGOpaqueTextureMaterial_mipmapFiltering(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGOpaqueTextureMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGOpaqueTextureMaterial, &sipCpp))
        {
             ::QSGTexture::Filtering sipRes;

            sipRes = sipCpp->mipmapFiltering();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSGTexture_Filtering);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGOpaqueTextureMaterial, sipName_mipmapFiltering, doc_QSGOpaqueTextureMaterial_mipmapFiltering);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGOpaqueTextureMaterial_setFiltering, "setFiltering(self, QSGTexture.Filtering)");

extern "C" {static PyObject *meth_QSGOpaqueTextureMaterial_setFiltering(PyObject *, PyObject *);}
static PyObject *meth_QSGOpaqueTextureMaterial_setFiltering(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGTexture::Filtering a0;
         ::QSGOpaqueTextureMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSGOpaqueTextureMaterial, &sipCpp, sipType_QSGTexture_Filtering, &a0))
        {
            sipCpp->setFiltering(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGOpaqueTextureMaterial, sipName_setFiltering, doc_QSGOpaqueTextureMaterial_setFiltering);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGOpaqueTextureMaterial_filtering, "filtering(self) -> QSGTexture.Filtering");

extern "C" {static PyObject *meth_QSGOpaqueTextureMaterial_filtering(PyObject *, PyObject *);}
static PyObject *meth_QSGOpaqueTextureMaterial_filtering(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGOpaqueTextureMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGOpaqueTextureMaterial, &sipCpp))
        {
             ::QSGTexture::Filtering sipRes;

            sipRes = sipCpp->filtering();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSGTexture_Filtering);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGOpaqueTextureMaterial, sipName_filtering, doc_QSGOpaqueTextureMaterial_filtering);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGOpaqueTextureMaterial_setHorizontalWrapMode, "setHorizontalWrapMode(self, QSGTexture.WrapMode)");

extern "C" {static PyObject *meth_QSGOpaqueTextureMaterial_setHorizontalWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QSGOpaqueTextureMaterial_setHorizontalWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGTexture::WrapMode a0;
         ::QSGOpaqueTextureMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSGOpaqueTextureMaterial, &sipCpp, sipType_QSGTexture_WrapMode, &a0))
        {
            sipCpp->setHorizontalWrapMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGOpaqueTextureMaterial, sipName_setHorizontalWrapMode, doc_QSGOpaqueTextureMaterial_setHorizontalWrapMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGOpaqueTextureMaterial_horizontalWrapMode, "horizontalWrapMode(self) -> QSGTexture.WrapMode");

extern "C" {static PyObject *meth_QSGOpaqueTextureMaterial_horizontalWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QSGOpaqueTextureMaterial_horizontalWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGOpaqueTextureMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGOpaqueTextureMaterial, &sipCpp))
        {
             ::QSGTexture::WrapMode sipRes;

            sipRes = sipCpp->horizontalWrapMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSGTexture_WrapMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGOpaqueTextureMaterial, sipName_horizontalWrapMode, doc_QSGOpaqueTextureMaterial_horizontalWrapMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGOpaqueTextureMaterial_setVerticalWrapMode, "setVerticalWrapMode(self, QSGTexture.WrapMode)");

extern "C" {static PyObject *meth_QSGOpaqueTextureMaterial_setVerticalWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QSGOpaqueTextureMaterial_setVerticalWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGTexture::WrapMode a0;
         ::QSGOpaqueTextureMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSGOpaqueTextureMaterial, &sipCpp, sipType_QSGTexture_WrapMode, &a0))
        {
            sipCpp->setVerticalWrapMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGOpaqueTextureMaterial, sipName_setVerticalWrapMode, doc_QSGOpaqueTextureMaterial_setVerticalWrapMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGOpaqueTextureMaterial_verticalWrapMode, "verticalWrapMode(self) -> QSGTexture.WrapMode");

extern "C" {static PyObject *meth_QSGOpaqueTextureMaterial_verticalWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QSGOpaqueTextureMaterial_verticalWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGOpaqueTextureMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGOpaqueTextureMaterial, &sipCpp))
        {
             ::QSGTexture::WrapMode sipRes;

            sipRes = sipCpp->verticalWrapMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSGTexture_WrapMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGOpaqueTextureMaterial, sipName_verticalWrapMode, doc_QSGOpaqueTextureMaterial_verticalWrapMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGOpaqueTextureMaterial_setAnisotropyLevel, "setAnisotropyLevel(self, QSGTexture.AnisotropyLevel)");

extern "C" {static PyObject *meth_QSGOpaqueTextureMaterial_setAnisotropyLevel(PyObject *, PyObject *);}
static PyObject *meth_QSGOpaqueTextureMaterial_setAnisotropyLevel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGTexture::AnisotropyLevel a0;
         ::QSGOpaqueTextureMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSGOpaqueTextureMaterial, &sipCpp, sipType_QSGTexture_AnisotropyLevel, &a0))
        {
            sipCpp->setAnisotropyLevel(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGOpaqueTextureMaterial, sipName_setAnisotropyLevel, doc_QSGOpaqueTextureMaterial_setAnisotropyLevel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGOpaqueTextureMaterial_anisotropyLevel, "anisotropyLevel(self) -> QSGTexture.AnisotropyLevel");

extern "C" {static PyObject *meth_QSGOpaqueTextureMaterial_anisotropyLevel(PyObject *, PyObject *);}
static PyObject *meth_QSGOpaqueTextureMaterial_anisotropyLevel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGOpaqueTextureMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGOpaqueTextureMaterial, &sipCpp))
        {
             ::QSGTexture::AnisotropyLevel sipRes;

            sipRes = sipCpp->anisotropyLevel();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSGTexture_AnisotropyLevel);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGOpaqueTextureMaterial, sipName_anisotropyLevel, doc_QSGOpaqueTextureMaterial_anisotropyLevel);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSGOpaqueTextureMaterial(void *, const sipTypeDef *);}
static void *cast_QSGOpaqueTextureMaterial(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSGOpaqueTextureMaterial *sipCpp = reinterpret_cast< ::QSGOpaqueTextureMaterial *>(sipCppV);

    if (targetType == sipType_QSGMaterial)
        return static_cast< ::QSGMaterial *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGOpaqueTextureMaterial(void *, int);}
static void release_QSGOpaqueTextureMaterial(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQSGOpaqueTextureMaterial *>(sipCppV);
    else
        delete reinterpret_cast< ::QSGOpaqueTextureMaterial *>(sipCppV);
}


extern "C" {static void dealloc_QSGOpaqueTextureMaterial(sipSimpleWrapper *);}
static void dealloc_QSGOpaqueTextureMaterial(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSGOpaqueTextureMaterial *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGOpaqueTextureMaterial(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSGOpaqueTextureMaterial(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGOpaqueTextureMaterial(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQSGOpaqueTextureMaterial *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQSGOpaqueTextureMaterial();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSGOpaqueTextureMaterial[] = {{55, 255, 1}};


static PyMethodDef methods_QSGOpaqueTextureMaterial[] = {
    {SIP_MLNAME_CAST(sipName_anisotropyLevel), meth_QSGOpaqueTextureMaterial_anisotropyLevel, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGOpaqueTextureMaterial_anisotropyLevel)},
    {SIP_MLNAME_CAST(sipName_compare), meth_QSGOpaqueTextureMaterial_compare, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGOpaqueTextureMaterial_compare)},
    {SIP_MLNAME_CAST(sipName_createShader), meth_QSGOpaqueTextureMaterial_createShader, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGOpaqueTextureMaterial_createShader)},
    {SIP_MLNAME_CAST(sipName_filtering), meth_QSGOpaqueTextureMaterial_filtering, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGOpaqueTextureMaterial_filtering)},
    {SIP_MLNAME_CAST(sipName_horizontalWrapMode), meth_QSGOpaqueTextureMaterial_horizontalWrapMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGOpaqueTextureMaterial_horizontalWrapMode)},
    {SIP_MLNAME_CAST(sipName_mipmapFiltering), meth_QSGOpaqueTextureMaterial_mipmapFiltering, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGOpaqueTextureMaterial_mipmapFiltering)},
    {SIP_MLNAME_CAST(sipName_setAnisotropyLevel), meth_QSGOpaqueTextureMaterial_setAnisotropyLevel, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGOpaqueTextureMaterial_setAnisotropyLevel)},
    {SIP_MLNAME_CAST(sipName_setFiltering), meth_QSGOpaqueTextureMaterial_setFiltering, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGOpaqueTextureMaterial_setFiltering)},
    {SIP_MLNAME_CAST(sipName_setHorizontalWrapMode), meth_QSGOpaqueTextureMaterial_setHorizontalWrapMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGOpaqueTextureMaterial_setHorizontalWrapMode)},
    {SIP_MLNAME_CAST(sipName_setMipmapFiltering), meth_QSGOpaqueTextureMaterial_setMipmapFiltering, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGOpaqueTextureMaterial_setMipmapFiltering)},
    {SIP_MLNAME_CAST(sipName_setTexture), meth_QSGOpaqueTextureMaterial_setTexture, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGOpaqueTextureMaterial_setTexture)},
    {SIP_MLNAME_CAST(sipName_setVerticalWrapMode), meth_QSGOpaqueTextureMaterial_setVerticalWrapMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGOpaqueTextureMaterial_setVerticalWrapMode)},
    {SIP_MLNAME_CAST(sipName_texture), meth_QSGOpaqueTextureMaterial_texture, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGOpaqueTextureMaterial_texture)},
    {SIP_MLNAME_CAST(sipName_type), meth_QSGOpaqueTextureMaterial_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGOpaqueTextureMaterial_type)},
    {SIP_MLNAME_CAST(sipName_verticalWrapMode), meth_QSGOpaqueTextureMaterial_verticalWrapMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGOpaqueTextureMaterial_verticalWrapMode)}
};

PyDoc_STRVAR(doc_QSGOpaqueTextureMaterial, "\1QSGOpaqueTextureMaterial()");


static pyqt5ClassPluginDef plugin_QSGOpaqueTextureMaterial = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGOpaqueTextureMaterial = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGOpaqueTextureMaterial,
        {SIP_NULLPTR},
        &plugin_QSGOpaqueTextureMaterial
    },
    {
        sipNameNr_QSGOpaqueTextureMaterial,
        {0, 0, 1},
        15, methods_QSGOpaqueTextureMaterial,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSGOpaqueTextureMaterial,
    -1,
    -1,
    supers_QSGOpaqueTextureMaterial,
    SIP_NULLPTR,
    init_type_QSGOpaqueTextureMaterial,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGOpaqueTextureMaterial,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSGOpaqueTextureMaterial,
    cast_QSGOpaqueTextureMaterial,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 90 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgtexture.sip"
#include <qsgtexture.h>
#line 4659 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgtexture.sip"
#include <qsgtexture.h>
#line 4663 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 4666 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 4669 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 4672 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 4675 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 4678 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 4681 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 4684 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 4687 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 4690 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 4693 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 4696 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 4699 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 4702 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 4705 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 4708 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 4711 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 4714 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 4717 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"


class sipQSGDynamicTexture : public  ::QSGDynamicTexture
{
public:
    sipQSGDynamicTexture();
    virtual ~sipQSGDynamicTexture();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool updateTexture() SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    int textureId() const SIP_OVERRIDE;
     ::QSize textureSize() const SIP_OVERRIDE;
    bool hasAlphaChannel() const SIP_OVERRIDE;
    bool hasMipmaps() const SIP_OVERRIDE;
     ::QRectF normalizedTextureSubRect() const SIP_OVERRIDE;
    bool isAtlasTexture() const SIP_OVERRIDE;
     ::QSGTexture* removedFromAtlas() const SIP_OVERRIDE;
    void bind() SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSGDynamicTexture(const sipQSGDynamicTexture &);
    sipQSGDynamicTexture &operator = (const sipQSGDynamicTexture &);

    char sipPyMethods[16];
};

sipQSGDynamicTexture::sipQSGDynamicTexture():  ::QSGDynamicTexture(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSGDynamicTexture::~sipQSGDynamicTexture()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQSGDynamicTexture::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtQuick_qt_metaobject(sipPySelf,sipType_QSGDynamicTexture);

    return  ::QSGDynamicTexture::metaObject();
}

int sipQSGDynamicTexture::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QSGDynamicTexture::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtQuick_qt_metacall(sipPySelf,sipType_QSGDynamicTexture,_c,_id,_a);

    return _id;
}

void *sipQSGDynamicTexture::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtQuick_qt_metacast(sipPySelf, sipType_QSGDynamicTexture, _clname, &sipCpp) ? sipCpp :  ::QSGDynamicTexture::qt_metacast(_clname));
}

bool sipQSGDynamicTexture::updateTexture()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QSGDynamicTexture,sipName_updateTexture);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtQuick_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_9(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQSGDynamicTexture::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QSGDynamicTexture::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtQuick_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQuick_0(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSGDynamicTexture::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QSGDynamicTexture::connectNotify(a0);
        return;
    }

    extern void sipVH_QtQuick_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQuick_0(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSGDynamicTexture::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QSGDynamicTexture::customEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtQuick_1(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSGDynamicTexture::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QSGDynamicTexture::childEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtQuick_2(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSGDynamicTexture::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QSGDynamicTexture::timerEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtQuick_3(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQSGDynamicTexture::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QSGDynamicTexture::eventFilter(a0,a1);

    extern bool sipVH_QtQuick_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtQuick_4(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQSGDynamicTexture::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QSGDynamicTexture::event(a0);

    extern bool sipVH_QtQuick_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtQuick_5(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQSGDynamicTexture::textureId() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,sipName_QSGDynamicTexture,sipName_textureId);

    if (!sipMeth)
        return 0;

    extern int sipVH_QtQuick_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_31(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQSGDynamicTexture::textureSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,sipName_QSGDynamicTexture,sipName_textureSize);

    if (!sipMeth)
        return  ::QSize();

    extern  ::QSize sipVH_QtQuick_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_30(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQSGDynamicTexture::hasAlphaChannel() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,sipName_QSGDynamicTexture,sipName_hasAlphaChannel);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtQuick_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_9(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQSGDynamicTexture::hasMipmaps() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,sipName_QSGDynamicTexture,sipName_hasMipmaps);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtQuick_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_9(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QRectF sipQSGDynamicTexture::normalizedTextureSubRect() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,SIP_NULLPTR,sipName_normalizedTextureSubRect);

    if (!sipMeth)
        return  ::QSGDynamicTexture::normalizedTextureSubRect();

    extern  ::QRectF sipVH_QtQuick_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_57(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQSGDynamicTexture::isAtlasTexture() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,SIP_NULLPTR,sipName_isAtlasTexture);

    if (!sipMeth)
        return  ::QSGDynamicTexture::isAtlasTexture();

    extern bool sipVH_QtQuick_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_9(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSGTexture* sipQSGDynamicTexture::removedFromAtlas() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,SIP_NULLPTR,sipName_removedFromAtlas);

    if (!sipMeth)
        return  ::QSGDynamicTexture::removedFromAtlas();

    extern  ::QSGTexture* sipVH_QtQuick_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_59(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQSGDynamicTexture::bind()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,sipName_QSGDynamicTexture,sipName_bind);

    if (!sipMeth)
        return;

    extern void sipVH_QtQuick_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtQuick_6(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QSGDynamicTexture_updateTexture, "updateTexture(self) -> bool");

extern "C" {static PyObject *meth_QSGDynamicTexture_updateTexture(PyObject *, PyObject *);}
static PyObject *meth_QSGDynamicTexture_updateTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QSGDynamicTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGDynamicTexture, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSGDynamicTexture, sipName_updateTexture);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->updateTexture();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGDynamicTexture, sipName_updateTexture, doc_QSGDynamicTexture_updateTexture);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSGDynamicTexture(void *, const sipTypeDef *);}
static void *cast_QSGDynamicTexture(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSGDynamicTexture *sipCpp = reinterpret_cast< ::QSGDynamicTexture *>(sipCppV);

    if (targetType == sipType_QSGTexture)
        return static_cast< ::QSGTexture *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGDynamicTexture(void *, int);}
static void release_QSGDynamicTexture(void *sipCppV, int)
{
     ::QSGDynamicTexture *sipCpp = reinterpret_cast< ::QSGDynamicTexture *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QSGDynamicTexture(sipSimpleWrapper *);}
static void dealloc_QSGDynamicTexture(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSGDynamicTexture *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGDynamicTexture(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSGDynamicTexture(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGDynamicTexture(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQSGDynamicTexture *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQSGDynamicTexture();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSGDynamicTexture[] = {{90, 255, 1}};


static PyMethodDef methods_QSGDynamicTexture[] = {
    {SIP_MLNAME_CAST(sipName_updateTexture), meth_QSGDynamicTexture_updateTexture, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGDynamicTexture_updateTexture)}
};

PyDoc_STRVAR(doc_QSGDynamicTexture, "\1QSGDynamicTexture()");


static pyqt5ClassPluginDef plugin_QSGDynamicTexture = {
    & ::QSGDynamicTexture::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGDynamicTexture = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGDynamicTexture,
        {SIP_NULLPTR},
        &plugin_QSGDynamicTexture
    },
    {
        sipNameNr_QSGDynamicTexture,
        {0, 0, 1},
        1, methods_QSGDynamicTexture,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSGDynamicTexture,
    -1,
    -1,
    supers_QSGDynamicTexture,
    SIP_NULLPTR,
    init_type_QSGDynamicTexture,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGDynamicTexture,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSGDynamicTexture,
    cast_QSGDynamicTexture,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgtexture.sip"
#include <qsgtexture.h>
#line 5221 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 5225 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 5228 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 5231 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 5234 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 5237 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 5240 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 5243 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 5246 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 5249 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 5252 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 5255 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 5258 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 5261 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 5264 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 5267 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 5270 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 5273 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 5276 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"


class sipQSGTexture : public  ::QSGTexture
{
public:
    sipQSGTexture();
    virtual ~sipQSGTexture();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void bind() SIP_OVERRIDE;
     ::QSGTexture* removedFromAtlas() const SIP_OVERRIDE;
    bool isAtlasTexture() const SIP_OVERRIDE;
     ::QRectF normalizedTextureSubRect() const SIP_OVERRIDE;
    bool hasMipmaps() const SIP_OVERRIDE;
    bool hasAlphaChannel() const SIP_OVERRIDE;
     ::QSize textureSize() const SIP_OVERRIDE;
    int textureId() const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSGTexture(const sipQSGTexture &);
    sipQSGTexture &operator = (const sipQSGTexture &);

    char sipPyMethods[15];
};

sipQSGTexture::sipQSGTexture():  ::QSGTexture(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSGTexture::~sipQSGTexture()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQSGTexture::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtQuick_qt_metaobject(sipPySelf,sipType_QSGTexture);

    return  ::QSGTexture::metaObject();
}

int sipQSGTexture::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QSGTexture::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtQuick_qt_metacall(sipPySelf,sipType_QSGTexture,_c,_id,_a);

    return _id;
}

void *sipQSGTexture::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtQuick_qt_metacast(sipPySelf, sipType_QSGTexture, _clname, &sipCpp) ? sipCpp :  ::QSGTexture::qt_metacast(_clname));
}

void sipQSGTexture::bind()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QSGTexture,sipName_bind);

    if (!sipMeth)
        return;

    extern void sipVH_QtQuick_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtQuick_6(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSGTexture* sipQSGTexture::removedFromAtlas() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_removedFromAtlas);

    if (!sipMeth)
        return  ::QSGTexture::removedFromAtlas();

    extern  ::QSGTexture* sipVH_QtQuick_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_59(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQSGTexture::isAtlasTexture() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,SIP_NULLPTR,sipName_isAtlasTexture);

    if (!sipMeth)
        return  ::QSGTexture::isAtlasTexture();

    extern bool sipVH_QtQuick_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_9(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QRectF sipQSGTexture::normalizedTextureSubRect() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,SIP_NULLPTR,sipName_normalizedTextureSubRect);

    if (!sipMeth)
        return  ::QSGTexture::normalizedTextureSubRect();

    extern  ::QRectF sipVH_QtQuick_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_57(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQSGTexture::hasMipmaps() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,sipName_QSGTexture,sipName_hasMipmaps);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtQuick_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_9(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQSGTexture::hasAlphaChannel() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,sipName_QSGTexture,sipName_hasAlphaChannel);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtQuick_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_9(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQSGTexture::textureSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,sipName_QSGTexture,sipName_textureSize);

    if (!sipMeth)
        return  ::QSize();

    extern  ::QSize sipVH_QtQuick_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_30(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQSGTexture::textureId() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,sipName_QSGTexture,sipName_textureId);

    if (!sipMeth)
        return 0;

    extern int sipVH_QtQuick_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_31(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQSGTexture::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QSGTexture::event(a0);

    extern bool sipVH_QtQuick_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtQuick_5(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQSGTexture::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QSGTexture::eventFilter(a0,a1);

    extern bool sipVH_QtQuick_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtQuick_4(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQSGTexture::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QSGTexture::timerEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtQuick_3(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSGTexture::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QSGTexture::childEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtQuick_2(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSGTexture::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QSGTexture::customEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtQuick_1(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSGTexture::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QSGTexture::connectNotify(a0);
        return;
    }

    extern void sipVH_QtQuick_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQuick_0(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSGTexture::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QSGTexture::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtQuick_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQuick_0(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QSGTexture_textureId, "textureId(self) -> int");

extern "C" {static PyObject *meth_QSGTexture_textureId(PyObject *, PyObject *);}
static PyObject *meth_QSGTexture_textureId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QSGTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGTexture, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSGTexture, sipName_textureId);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->textureId();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGTexture, sipName_textureId, doc_QSGTexture_textureId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGTexture_textureSize, "textureSize(self) -> QSize");

extern "C" {static PyObject *meth_QSGTexture_textureSize(PyObject *, PyObject *);}
static PyObject *meth_QSGTexture_textureSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QSGTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGTexture, &sipCpp))
        {
             ::QSize*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSGTexture, sipName_textureSize);
                return SIP_NULLPTR;
            }

            sipRes = new  ::QSize(sipCpp->textureSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGTexture, sipName_textureSize, doc_QSGTexture_textureSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGTexture_hasAlphaChannel, "hasAlphaChannel(self) -> bool");

extern "C" {static PyObject *meth_QSGTexture_hasAlphaChannel(PyObject *, PyObject *);}
static PyObject *meth_QSGTexture_hasAlphaChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QSGTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGTexture, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSGTexture, sipName_hasAlphaChannel);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->hasAlphaChannel();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGTexture, sipName_hasAlphaChannel, doc_QSGTexture_hasAlphaChannel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGTexture_hasMipmaps, "hasMipmaps(self) -> bool");

extern "C" {static PyObject *meth_QSGTexture_hasMipmaps(PyObject *, PyObject *);}
static PyObject *meth_QSGTexture_hasMipmaps(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QSGTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGTexture, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSGTexture, sipName_hasMipmaps);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->hasMipmaps();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGTexture, sipName_hasMipmaps, doc_QSGTexture_hasMipmaps);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGTexture_normalizedTextureSubRect, "normalizedTextureSubRect(self) -> QRectF");

extern "C" {static PyObject *meth_QSGTexture_normalizedTextureSubRect(PyObject *, PyObject *);}
static PyObject *meth_QSGTexture_normalizedTextureSubRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSGTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGTexture, &sipCpp))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF((sipSelfWasArg ? sipCpp-> ::QSGTexture::normalizedTextureSubRect() : sipCpp->normalizedTextureSubRect()));

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGTexture, sipName_normalizedTextureSubRect, doc_QSGTexture_normalizedTextureSubRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGTexture_isAtlasTexture, "isAtlasTexture(self) -> bool");

extern "C" {static PyObject *meth_QSGTexture_isAtlasTexture(PyObject *, PyObject *);}
static PyObject *meth_QSGTexture_isAtlasTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSGTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGTexture, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSGTexture::isAtlasTexture() : sipCpp->isAtlasTexture());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGTexture, sipName_isAtlasTexture, doc_QSGTexture_isAtlasTexture);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGTexture_removedFromAtlas, "removedFromAtlas(self) -> QSGTexture");

extern "C" {static PyObject *meth_QSGTexture_removedFromAtlas(PyObject *, PyObject *);}
static PyObject *meth_QSGTexture_removedFromAtlas(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSGTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGTexture, &sipCpp))
        {
             ::QSGTexture*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSGTexture::removedFromAtlas() : sipCpp->removedFromAtlas());

            return sipConvertFromType(sipRes,sipType_QSGTexture,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGTexture, sipName_removedFromAtlas, doc_QSGTexture_removedFromAtlas);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGTexture_bind, "bind(self)");

extern "C" {static PyObject *meth_QSGTexture_bind(PyObject *, PyObject *);}
static PyObject *meth_QSGTexture_bind(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QSGTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGTexture, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSGTexture, sipName_bind);
                return SIP_NULLPTR;
            }

            sipCpp->bind();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGTexture, sipName_bind, doc_QSGTexture_bind);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGTexture_updateBindOptions, "updateBindOptions(self, force: bool = False)");

extern "C" {static PyObject *meth_QSGTexture_updateBindOptions(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSGTexture_updateBindOptions(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0 = 0;
         ::QSGTexture *sipCpp;

        static const char *sipKwdList[] = {
            sipName_force,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_QSGTexture, &sipCpp, &a0))
        {
            sipCpp->updateBindOptions(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGTexture, sipName_updateBindOptions, doc_QSGTexture_updateBindOptions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGTexture_setMipmapFiltering, "setMipmapFiltering(self, QSGTexture.Filtering)");

extern "C" {static PyObject *meth_QSGTexture_setMipmapFiltering(PyObject *, PyObject *);}
static PyObject *meth_QSGTexture_setMipmapFiltering(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGTexture::Filtering a0;
         ::QSGTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSGTexture, &sipCpp, sipType_QSGTexture_Filtering, &a0))
        {
            sipCpp->setMipmapFiltering(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGTexture, sipName_setMipmapFiltering, doc_QSGTexture_setMipmapFiltering);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGTexture_mipmapFiltering, "mipmapFiltering(self) -> QSGTexture.Filtering");

extern "C" {static PyObject *meth_QSGTexture_mipmapFiltering(PyObject *, PyObject *);}
static PyObject *meth_QSGTexture_mipmapFiltering(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGTexture, &sipCpp))
        {
             ::QSGTexture::Filtering sipRes;

            sipRes = sipCpp->mipmapFiltering();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSGTexture_Filtering);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGTexture, sipName_mipmapFiltering, doc_QSGTexture_mipmapFiltering);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGTexture_setFiltering, "setFiltering(self, QSGTexture.Filtering)");

extern "C" {static PyObject *meth_QSGTexture_setFiltering(PyObject *, PyObject *);}
static PyObject *meth_QSGTexture_setFiltering(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGTexture::Filtering a0;
         ::QSGTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSGTexture, &sipCpp, sipType_QSGTexture_Filtering, &a0))
        {
            sipCpp->setFiltering(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGTexture, sipName_setFiltering, doc_QSGTexture_setFiltering);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGTexture_filtering, "filtering(self) -> QSGTexture.Filtering");

extern "C" {static PyObject *meth_QSGTexture_filtering(PyObject *, PyObject *);}
static PyObject *meth_QSGTexture_filtering(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGTexture, &sipCpp))
        {
             ::QSGTexture::Filtering sipRes;

            sipRes = sipCpp->filtering();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSGTexture_Filtering);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGTexture, sipName_filtering, doc_QSGTexture_filtering);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGTexture_setHorizontalWrapMode, "setHorizontalWrapMode(self, QSGTexture.WrapMode)");

extern "C" {static PyObject *meth_QSGTexture_setHorizontalWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QSGTexture_setHorizontalWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGTexture::WrapMode a0;
         ::QSGTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSGTexture, &sipCpp, sipType_QSGTexture_WrapMode, &a0))
        {
            sipCpp->setHorizontalWrapMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGTexture, sipName_setHorizontalWrapMode, doc_QSGTexture_setHorizontalWrapMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGTexture_horizontalWrapMode, "horizontalWrapMode(self) -> QSGTexture.WrapMode");

extern "C" {static PyObject *meth_QSGTexture_horizontalWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QSGTexture_horizontalWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGTexture, &sipCpp))
        {
             ::QSGTexture::WrapMode sipRes;

            sipRes = sipCpp->horizontalWrapMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSGTexture_WrapMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGTexture, sipName_horizontalWrapMode, doc_QSGTexture_horizontalWrapMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGTexture_setVerticalWrapMode, "setVerticalWrapMode(self, QSGTexture.WrapMode)");

extern "C" {static PyObject *meth_QSGTexture_setVerticalWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QSGTexture_setVerticalWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGTexture::WrapMode a0;
         ::QSGTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSGTexture, &sipCpp, sipType_QSGTexture_WrapMode, &a0))
        {
            sipCpp->setVerticalWrapMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGTexture, sipName_setVerticalWrapMode, doc_QSGTexture_setVerticalWrapMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGTexture_verticalWrapMode, "verticalWrapMode(self) -> QSGTexture.WrapMode");

extern "C" {static PyObject *meth_QSGTexture_verticalWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QSGTexture_verticalWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGTexture, &sipCpp))
        {
             ::QSGTexture::WrapMode sipRes;

            sipRes = sipCpp->verticalWrapMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSGTexture_WrapMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGTexture, sipName_verticalWrapMode, doc_QSGTexture_verticalWrapMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGTexture_convertToNormalizedSourceRect, "convertToNormalizedSourceRect(self, QRectF) -> QRectF");

extern "C" {static PyObject *meth_QSGTexture_convertToNormalizedSourceRect(PyObject *, PyObject *);}
static PyObject *meth_QSGTexture_convertToNormalizedSourceRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
        const  ::QSGTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSGTexture, &sipCpp, sipType_QRectF, &a0))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->convertToNormalizedSourceRect(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGTexture, sipName_convertToNormalizedSourceRect, doc_QSGTexture_convertToNormalizedSourceRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGTexture_setAnisotropyLevel, "setAnisotropyLevel(self, QSGTexture.AnisotropyLevel)");

extern "C" {static PyObject *meth_QSGTexture_setAnisotropyLevel(PyObject *, PyObject *);}
static PyObject *meth_QSGTexture_setAnisotropyLevel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGTexture::AnisotropyLevel a0;
         ::QSGTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSGTexture, &sipCpp, sipType_QSGTexture_AnisotropyLevel, &a0))
        {
            sipCpp->setAnisotropyLevel(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGTexture, sipName_setAnisotropyLevel, doc_QSGTexture_setAnisotropyLevel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGTexture_anisotropyLevel, "anisotropyLevel(self) -> QSGTexture.AnisotropyLevel");

extern "C" {static PyObject *meth_QSGTexture_anisotropyLevel(PyObject *, PyObject *);}
static PyObject *meth_QSGTexture_anisotropyLevel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGTexture, &sipCpp))
        {
             ::QSGTexture::AnisotropyLevel sipRes;

            sipRes = sipCpp->anisotropyLevel();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSGTexture_AnisotropyLevel);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGTexture, sipName_anisotropyLevel, doc_QSGTexture_anisotropyLevel);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSGTexture(void *, const sipTypeDef *);}
static void *cast_QSGTexture(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSGTexture *sipCpp = reinterpret_cast< ::QSGTexture *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGTexture(void *, int);}
static void release_QSGTexture(void *sipCppV, int)
{
     ::QSGTexture *sipCpp = reinterpret_cast< ::QSGTexture *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QSGTexture(sipSimpleWrapper *);}
static void dealloc_QSGTexture(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSGTexture *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGTexture(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSGTexture(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGTexture(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQSGTexture *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQSGTexture();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSGTexture[] = {{3, 0, 1}};


static PyMethodDef methods_QSGTexture[] = {
    {SIP_MLNAME_CAST(sipName_anisotropyLevel), meth_QSGTexture_anisotropyLevel, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGTexture_anisotropyLevel)},
    {SIP_MLNAME_CAST(sipName_bind), meth_QSGTexture_bind, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGTexture_bind)},
    {SIP_MLNAME_CAST(sipName_convertToNormalizedSourceRect), meth_QSGTexture_convertToNormalizedSourceRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGTexture_convertToNormalizedSourceRect)},
    {SIP_MLNAME_CAST(sipName_filtering), meth_QSGTexture_filtering, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGTexture_filtering)},
    {SIP_MLNAME_CAST(sipName_hasAlphaChannel), meth_QSGTexture_hasAlphaChannel, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGTexture_hasAlphaChannel)},
    {SIP_MLNAME_CAST(sipName_hasMipmaps), meth_QSGTexture_hasMipmaps, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGTexture_hasMipmaps)},
    {SIP_MLNAME_CAST(sipName_horizontalWrapMode), meth_QSGTexture_horizontalWrapMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGTexture_horizontalWrapMode)},
    {SIP_MLNAME_CAST(sipName_isAtlasTexture), meth_QSGTexture_isAtlasTexture, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGTexture_isAtlasTexture)},
    {SIP_MLNAME_CAST(sipName_mipmapFiltering), meth_QSGTexture_mipmapFiltering, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGTexture_mipmapFiltering)},
    {SIP_MLNAME_CAST(sipName_normalizedTextureSubRect), meth_QSGTexture_normalizedTextureSubRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGTexture_normalizedTextureSubRect)},
    {SIP_MLNAME_CAST(sipName_removedFromAtlas), meth_QSGTexture_removedFromAtlas, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGTexture_removedFromAtlas)},
    {SIP_MLNAME_CAST(sipName_setAnisotropyLevel), meth_QSGTexture_setAnisotropyLevel, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGTexture_setAnisotropyLevel)},
    {SIP_MLNAME_CAST(sipName_setFiltering), meth_QSGTexture_setFiltering, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGTexture_setFiltering)},
    {SIP_MLNAME_CAST(sipName_setHorizontalWrapMode), meth_QSGTexture_setHorizontalWrapMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGTexture_setHorizontalWrapMode)},
    {SIP_MLNAME_CAST(sipName_setMipmapFiltering), meth_QSGTexture_setMipmapFiltering, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGTexture_setMipmapFiltering)},
    {SIP_MLNAME_CAST(sipName_setVerticalWrapMode), meth_QSGTexture_setVerticalWrapMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGTexture_setVerticalWrapMode)},
    {SIP_MLNAME_CAST(sipName_textureId), meth_QSGTexture_textureId, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGTexture_textureId)},
    {SIP_MLNAME_CAST(sipName_textureSize), meth_QSGTexture_textureSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGTexture_textureSize)},
    {SIP_MLNAME_CAST(sipName_updateBindOptions), SIP_MLMETH_CAST(meth_QSGTexture_updateBindOptions), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSGTexture_updateBindOptions)},
    {SIP_MLNAME_CAST(sipName_verticalWrapMode), meth_QSGTexture_verticalWrapMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGTexture_verticalWrapMode)}
};

static sipEnumMemberDef enummembers_QSGTexture[] = {
    {sipName_Anisotropy16x, static_cast<int>( ::QSGTexture::Anisotropy16x), 91},
    {sipName_Anisotropy2x, static_cast<int>( ::QSGTexture::Anisotropy2x), 91},
    {sipName_Anisotropy4x, static_cast<int>( ::QSGTexture::Anisotropy4x), 91},
    {sipName_Anisotropy8x, static_cast<int>( ::QSGTexture::Anisotropy8x), 91},
    {sipName_AnisotropyNone, static_cast<int>( ::QSGTexture::AnisotropyNone), 91},
    {sipName_ClampToEdge, static_cast<int>( ::QSGTexture::ClampToEdge), 93},
    {sipName_Linear, static_cast<int>( ::QSGTexture::Linear), 92},
    {sipName_MirroredRepeat, static_cast<int>( ::QSGTexture::MirroredRepeat), 93},
    {sipName_Nearest, static_cast<int>( ::QSGTexture::Nearest), 92},
    {sipName_None, static_cast<int>( ::QSGTexture::None), 92},
    {sipName_Repeat, static_cast<int>( ::QSGTexture::Repeat), 93},
};

PyDoc_STRVAR(doc_QSGTexture, "\1QSGTexture()");


static pyqt5ClassPluginDef plugin_QSGTexture = {
    & ::QSGTexture::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGTexture = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGTexture,
        {SIP_NULLPTR},
        &plugin_QSGTexture
    },
    {
        sipNameNr_QSGTexture,
        {0, 0, 1},
        20, methods_QSGTexture,
        11, enummembers_QSGTexture,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSGTexture,
    -1,
    -1,
    supers_QSGTexture,
    SIP_NULLPTR,
    init_type_QSGTexture,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGTexture,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSGTexture,
    cast_QSGTexture,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgsimpletexturenode.sip"
#include <qsgsimpletexturenode.h>
#line 6361 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgsimpletexturenode.sip"
#include <qsgsimpletexturenode.h>
#line 6365 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"


extern "C" {static long slot_QSGSimpleTextureNode_TextureCoordinatesTransformMode___hash__(PyObject *);}
static long slot_QSGSimpleTextureNode_TextureCoordinatesTransformMode___hash__(PyObject *sipSelf)
{
     ::QSGSimpleTextureNode::TextureCoordinatesTransformMode *sipCpp = reinterpret_cast< ::QSGSimpleTextureNode::TextureCoordinatesTransformMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QSGSimpleTextureNode::TextureCoordinatesTransformMode::Int();
#line 6383 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QSGSimpleTextureNode_TextureCoordinatesTransformMode___bool__(PyObject *);}
static int slot_QSGSimpleTextureNode_TextureCoordinatesTransformMode___bool__(PyObject *sipSelf)
{
     ::QSGSimpleTextureNode::TextureCoordinatesTransformMode *sipCpp = reinterpret_cast< ::QSGSimpleTextureNode::TextureCoordinatesTransformMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QSGSimpleTextureNode::TextureCoordinatesTransformMode::Int() != 0);
#line 6408 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QSGSimpleTextureNode_TextureCoordinatesTransformMode___ne__(PyObject *,PyObject *);}
static PyObject *slot_QSGSimpleTextureNode_TextureCoordinatesTransformMode___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSGSimpleTextureNode::TextureCoordinatesTransformMode *sipCpp = reinterpret_cast< ::QSGSimpleTextureNode::TextureCoordinatesTransformMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGSimpleTextureNode::TextureCoordinatesTransformMode* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QSGSimpleTextureNode::TextureCoordinatesTransformMode::Int() != a0->operator QSGSimpleTextureNode::TextureCoordinatesTransformMode::Int());
#line 6438 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
            sipReleaseType(const_cast< ::QSGSimpleTextureNode::TextureCoordinatesTransformMode *>(a0),sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, ne_slot, sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QSGSimpleTextureNode_TextureCoordinatesTransformMode___eq__(PyObject *,PyObject *);}
static PyObject *slot_QSGSimpleTextureNode_TextureCoordinatesTransformMode___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSGSimpleTextureNode::TextureCoordinatesTransformMode *sipCpp = reinterpret_cast< ::QSGSimpleTextureNode::TextureCoordinatesTransformMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGSimpleTextureNode::TextureCoordinatesTransformMode* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QSGSimpleTextureNode::TextureCoordinatesTransformMode::Int() == a0->operator QSGSimpleTextureNode::TextureCoordinatesTransformMode::Int());
#line 6474 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
            sipReleaseType(const_cast< ::QSGSimpleTextureNode::TextureCoordinatesTransformMode *>(a0),sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, eq_slot, sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QSGSimpleTextureNode_TextureCoordinatesTransformMode___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QSGSimpleTextureNode_TextureCoordinatesTransformMode___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSGSimpleTextureNode::TextureCoordinatesTransformMode *sipCpp = reinterpret_cast< ::QSGSimpleTextureNode::TextureCoordinatesTransformMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QSGSimpleTextureNode::TextureCoordinatesTransformMode(*sipCpp ^ a0);
#line 6513 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSGSimpleTextureNode_TextureCoordinatesTransformMode___xor__(PyObject *,PyObject *);}
static PyObject *slot_QSGSimpleTextureNode_TextureCoordinatesTransformMode___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGSimpleTextureNode::TextureCoordinatesTransformMode* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode, &a0, &a0State, &a1))
        {
             ::QSGSimpleTextureNode::TextureCoordinatesTransformMode*sipRes;

            sipRes = new  ::QSGSimpleTextureNode::TextureCoordinatesTransformMode((*a0 ^ a1));
            sipReleaseType(a0,sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSGSimpleTextureNode_TextureCoordinatesTransformMode___ior__(PyObject *,PyObject *);}
static PyObject *slot_QSGSimpleTextureNode_TextureCoordinatesTransformMode___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSGSimpleTextureNode::TextureCoordinatesTransformMode *sipCpp = reinterpret_cast< ::QSGSimpleTextureNode::TextureCoordinatesTransformMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QSGSimpleTextureNode::TextureCoordinatesTransformMode(*sipCpp | a0);
#line 6585 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSGSimpleTextureNode_TextureCoordinatesTransformMode___or__(PyObject *,PyObject *);}
static PyObject *slot_QSGSimpleTextureNode_TextureCoordinatesTransformMode___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGSimpleTextureNode::TextureCoordinatesTransformMode* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode, &a0, &a0State, &a1))
        {
             ::QSGSimpleTextureNode::TextureCoordinatesTransformMode*sipRes;

            sipRes = new  ::QSGSimpleTextureNode::TextureCoordinatesTransformMode((*a0 | a1));
            sipReleaseType(a0,sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSGSimpleTextureNode_TextureCoordinatesTransformMode___iand__(PyObject *,PyObject *);}
static PyObject *slot_QSGSimpleTextureNode_TextureCoordinatesTransformMode___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSGSimpleTextureNode::TextureCoordinatesTransformMode *sipCpp = reinterpret_cast< ::QSGSimpleTextureNode::TextureCoordinatesTransformMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QSGSimpleTextureNode::TextureCoordinatesTransformMode::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSGSimpleTextureNode_TextureCoordinatesTransformMode___and__(PyObject *,PyObject *);}
static PyObject *slot_QSGSimpleTextureNode_TextureCoordinatesTransformMode___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGSimpleTextureNode::TextureCoordinatesTransformMode* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode, &a0, &a0State, &a1))
        {
             ::QSGSimpleTextureNode::TextureCoordinatesTransformMode*sipRes;

            sipRes = new  ::QSGSimpleTextureNode::TextureCoordinatesTransformMode((*a0 & a1));
            sipReleaseType(a0,sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSGSimpleTextureNode_TextureCoordinatesTransformMode___invert__(PyObject *);}
static PyObject *slot_QSGSimpleTextureNode_TextureCoordinatesTransformMode___invert__(PyObject *sipSelf)
{
     ::QSGSimpleTextureNode::TextureCoordinatesTransformMode *sipCpp = reinterpret_cast< ::QSGSimpleTextureNode::TextureCoordinatesTransformMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QSGSimpleTextureNode::TextureCoordinatesTransformMode*sipRes;

            sipRes = new  ::QSGSimpleTextureNode::TextureCoordinatesTransformMode(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QSGSimpleTextureNode_TextureCoordinatesTransformMode___int__(PyObject *);}
static PyObject *slot_QSGSimpleTextureNode_TextureCoordinatesTransformMode___int__(PyObject *sipSelf)
{
     ::QSGSimpleTextureNode::TextureCoordinatesTransformMode *sipCpp = reinterpret_cast< ::QSGSimpleTextureNode::TextureCoordinatesTransformMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGSimpleTextureNode_TextureCoordinatesTransformMode(void *, int);}
static void release_QSGSimpleTextureNode_TextureCoordinatesTransformMode(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSGSimpleTextureNode::TextureCoordinatesTransformMode *>(sipCppV);
}


extern "C" {static void assign_QSGSimpleTextureNode_TextureCoordinatesTransformMode(void *, SIP_SSIZE_T, void *);}
static void assign_QSGSimpleTextureNode_TextureCoordinatesTransformMode(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QSGSimpleTextureNode::TextureCoordinatesTransformMode *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QSGSimpleTextureNode::TextureCoordinatesTransformMode *>(sipSrc);
}


extern "C" {static void *array_QSGSimpleTextureNode_TextureCoordinatesTransformMode(SIP_SSIZE_T);}
static void *array_QSGSimpleTextureNode_TextureCoordinatesTransformMode(SIP_SSIZE_T sipNrElem)
{
    return new  ::QSGSimpleTextureNode::TextureCoordinatesTransformMode[sipNrElem];
}


extern "C" {static void *copy_QSGSimpleTextureNode_TextureCoordinatesTransformMode(const void *, SIP_SSIZE_T);}
static void *copy_QSGSimpleTextureNode_TextureCoordinatesTransformMode(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QSGSimpleTextureNode::TextureCoordinatesTransformMode(reinterpret_cast<const  ::QSGSimpleTextureNode::TextureCoordinatesTransformMode *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSGSimpleTextureNode_TextureCoordinatesTransformMode(sipSimpleWrapper *);}
static void dealloc_QSGSimpleTextureNode_TextureCoordinatesTransformMode(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGSimpleTextureNode_TextureCoordinatesTransformMode(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QSGSimpleTextureNode_TextureCoordinatesTransformMode(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGSimpleTextureNode_TextureCoordinatesTransformMode(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QSGSimpleTextureNode::TextureCoordinatesTransformMode *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QSGSimpleTextureNode::TextureCoordinatesTransformMode();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QSGSimpleTextureNode::TextureCoordinatesTransformMode(a0);

            return sipCpp;
        }
    }

    {
        const  ::QSGSimpleTextureNode::TextureCoordinatesTransformMode* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode, &a0, &a0State))
        {
            sipCpp = new  ::QSGSimpleTextureNode::TextureCoordinatesTransformMode(*a0);
            sipReleaseType(const_cast< ::QSGSimpleTextureNode::TextureCoordinatesTransformMode *>(a0),sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QSGSimpleTextureNode_TextureCoordinatesTransformMode(PyObject *, void **, int *, PyObject *);}
static int convertTo_QSGSimpleTextureNode_TextureCoordinatesTransformMode(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QSGSimpleTextureNode::TextureCoordinatesTransformMode **sipCppPtr = reinterpret_cast< ::QSGSimpleTextureNode::TextureCoordinatesTransformMode **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QSGSimpleTextureNode::TextureCoordinatesTransformMode is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QSGSimpleTextureNode_TextureCoordinatesTransformFlag)) ||
            sipCanConvertToType(sipPy, sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QSGSimpleTextureNode_TextureCoordinatesTransformFlag)))
{
    *sipCppPtr = new QSGSimpleTextureNode::TextureCoordinatesTransformMode(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QSGSimpleTextureNode::TextureCoordinatesTransformMode *>(sipConvertToType(sipPy, sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 6853 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QSGSimpleTextureNode_TextureCoordinatesTransformMode[] = {
    {(void *)slot_QSGSimpleTextureNode_TextureCoordinatesTransformMode___hash__, hash_slot},
    {(void *)slot_QSGSimpleTextureNode_TextureCoordinatesTransformMode___bool__, bool_slot},
    {(void *)slot_QSGSimpleTextureNode_TextureCoordinatesTransformMode___ne__, ne_slot},
    {(void *)slot_QSGSimpleTextureNode_TextureCoordinatesTransformMode___eq__, eq_slot},
    {(void *)slot_QSGSimpleTextureNode_TextureCoordinatesTransformMode___ixor__, ixor_slot},
    {(void *)slot_QSGSimpleTextureNode_TextureCoordinatesTransformMode___xor__, xor_slot},
    {(void *)slot_QSGSimpleTextureNode_TextureCoordinatesTransformMode___ior__, ior_slot},
    {(void *)slot_QSGSimpleTextureNode_TextureCoordinatesTransformMode___or__, or_slot},
    {(void *)slot_QSGSimpleTextureNode_TextureCoordinatesTransformMode___iand__, iand_slot},
    {(void *)slot_QSGSimpleTextureNode_TextureCoordinatesTransformMode___and__, and_slot},
    {(void *)slot_QSGSimpleTextureNode_TextureCoordinatesTransformMode___invert__, invert_slot},
    {(void *)slot_QSGSimpleTextureNode_TextureCoordinatesTransformMode___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QSGSimpleTextureNode_TextureCoordinatesTransformMode, "\1QSGSimpleTextureNode.TextureCoordinatesTransformMode()\n"
"QSGSimpleTextureNode.TextureCoordinatesTransformMode(Union[QSGSimpleTextureNode.TextureCoordinatesTransformMode, QSGSimpleTextureNode.TextureCoordinatesTransformFlag])\n"
"QSGSimpleTextureNode.TextureCoordinatesTransformMode(QSGSimpleTextureNode.TextureCoordinatesTransformMode)");


static pyqt5ClassPluginDef plugin_QSGSimpleTextureNode_TextureCoordinatesTransformMode = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGSimpleTextureNode_TextureCoordinatesTransformMode = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGSimpleTextureNode__TextureCoordinatesTransformMode,
        {SIP_NULLPTR},
        &plugin_QSGSimpleTextureNode_TextureCoordinatesTransformMode
    },
    {
        sipNameNr_TextureCoordinatesTransformMode,
        {87, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSGSimpleTextureNode_TextureCoordinatesTransformMode,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QSGSimpleTextureNode_TextureCoordinatesTransformMode,
    init_type_QSGSimpleTextureNode_TextureCoordinatesTransformMode,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGSimpleTextureNode_TextureCoordinatesTransformMode,
    assign_QSGSimpleTextureNode_TextureCoordinatesTransformMode,
    array_QSGSimpleTextureNode_TextureCoordinatesTransformMode,
    copy_QSGSimpleTextureNode_TextureCoordinatesTransformMode,
    release_QSGSimpleTextureNode_TextureCoordinatesTransformMode,
    SIP_NULLPTR,
    convertTo_QSGSimpleTextureNode_TextureCoordinatesTransformMode,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgsimpletexturenode.sip"
#include <qsgsimpletexturenode.h>
#line 6941 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 6945 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgsimpletexturenode.sip"
#include <qsgsimpletexturenode.h>
#line 6948 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgtexture.sip"
#include <qsgtexture.h>
#line 6951 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 165 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 6954 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
#include <qsggeometry.h>
#line 6957 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 6960 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 6963 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 6966 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"


class sipQSGSimpleTextureNode : public  ::QSGSimpleTextureNode
{
public:
    sipQSGSimpleTextureNode();
    virtual ~sipQSGSimpleTextureNode();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool isSubtreeBlocked() const SIP_OVERRIDE;
    void preprocess() SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSGSimpleTextureNode(const sipQSGSimpleTextureNode &);
    sipQSGSimpleTextureNode &operator = (const sipQSGSimpleTextureNode &);

    char sipPyMethods[2];
};

sipQSGSimpleTextureNode::sipQSGSimpleTextureNode():  ::QSGSimpleTextureNode(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSGSimpleTextureNode::~sipQSGSimpleTextureNode()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

bool sipQSGSimpleTextureNode::isSubtreeBlocked() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_isSubtreeBlocked);

    if (!sipMeth)
        return  ::QSGSimpleTextureNode::isSubtreeBlocked();

    extern bool sipVH_QtQuick_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_9(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQSGSimpleTextureNode::preprocess()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_preprocess);

    if (!sipMeth)
    {
         ::QSGSimpleTextureNode::preprocess();
        return;
    }

    extern void sipVH_QtQuick_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtQuick_6(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QSGSimpleTextureNode_setRect, "setRect(self, QRectF)\n"
"setRect(self, float, float, float, float)");

extern "C" {static PyObject *meth_QSGSimpleTextureNode_setRect(PyObject *, PyObject *);}
static PyObject *meth_QSGSimpleTextureNode_setRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
         ::QSGSimpleTextureNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSGSimpleTextureNode, &sipCpp, sipType_QRectF, &a0))
        {
            sipCpp->setRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
         ::QSGSimpleTextureNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_QSGSimpleTextureNode, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setRect(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGSimpleTextureNode, sipName_setRect, doc_QSGSimpleTextureNode_setRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGSimpleTextureNode_rect, "rect(self) -> QRectF");

extern "C" {static PyObject *meth_QSGSimpleTextureNode_rect(PyObject *, PyObject *);}
static PyObject *meth_QSGSimpleTextureNode_rect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGSimpleTextureNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGSimpleTextureNode, &sipCpp))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->rect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGSimpleTextureNode, sipName_rect, doc_QSGSimpleTextureNode_rect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGSimpleTextureNode_setTexture, "setTexture(self, QSGTexture)");

extern "C" {static PyObject *meth_QSGSimpleTextureNode_setTexture(PyObject *, PyObject *);}
static PyObject *meth_QSGSimpleTextureNode_setTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGTexture* a0;
         ::QSGSimpleTextureNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QSGSimpleTextureNode, &sipCpp, sipType_QSGTexture, &a0))
        {
            sipCpp->setTexture(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGSimpleTextureNode, sipName_setTexture, doc_QSGSimpleTextureNode_setTexture);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGSimpleTextureNode_texture, "texture(self) -> QSGTexture");

extern "C" {static PyObject *meth_QSGSimpleTextureNode_texture(PyObject *, PyObject *);}
static PyObject *meth_QSGSimpleTextureNode_texture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGSimpleTextureNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGSimpleTextureNode, &sipCpp))
        {
             ::QSGTexture*sipRes;

            sipRes = sipCpp->texture();

            return sipConvertFromType(sipRes,sipType_QSGTexture,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGSimpleTextureNode, sipName_texture, doc_QSGSimpleTextureNode_texture);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGSimpleTextureNode_setFiltering, "setFiltering(self, QSGTexture.Filtering)");

extern "C" {static PyObject *meth_QSGSimpleTextureNode_setFiltering(PyObject *, PyObject *);}
static PyObject *meth_QSGSimpleTextureNode_setFiltering(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGTexture::Filtering a0;
         ::QSGSimpleTextureNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSGSimpleTextureNode, &sipCpp, sipType_QSGTexture_Filtering, &a0))
        {
            sipCpp->setFiltering(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGSimpleTextureNode, sipName_setFiltering, doc_QSGSimpleTextureNode_setFiltering);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGSimpleTextureNode_filtering, "filtering(self) -> QSGTexture.Filtering");

extern "C" {static PyObject *meth_QSGSimpleTextureNode_filtering(PyObject *, PyObject *);}
static PyObject *meth_QSGSimpleTextureNode_filtering(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGSimpleTextureNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGSimpleTextureNode, &sipCpp))
        {
             ::QSGTexture::Filtering sipRes;

            sipRes = sipCpp->filtering();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSGTexture_Filtering);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGSimpleTextureNode, sipName_filtering, doc_QSGSimpleTextureNode_filtering);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGSimpleTextureNode_setTextureCoordinatesTransform, "setTextureCoordinatesTransform(self, Union[QSGSimpleTextureNode.TextureCoordinatesTransformMode, QSGSimpleTextureNode.TextureCoordinatesTransformFlag])");

extern "C" {static PyObject *meth_QSGSimpleTextureNode_setTextureCoordinatesTransform(PyObject *, PyObject *);}
static PyObject *meth_QSGSimpleTextureNode_setTextureCoordinatesTransform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGSimpleTextureNode::TextureCoordinatesTransformMode* a0;
        int a0State = 0;
         ::QSGSimpleTextureNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSGSimpleTextureNode, &sipCpp, sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode, &a0, &a0State))
        {
            sipCpp->setTextureCoordinatesTransform(*a0);
            sipReleaseType(a0,sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGSimpleTextureNode, sipName_setTextureCoordinatesTransform, doc_QSGSimpleTextureNode_setTextureCoordinatesTransform);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGSimpleTextureNode_textureCoordinatesTransform, "textureCoordinatesTransform(self) -> QSGSimpleTextureNode.TextureCoordinatesTransformMode");

extern "C" {static PyObject *meth_QSGSimpleTextureNode_textureCoordinatesTransform(PyObject *, PyObject *);}
static PyObject *meth_QSGSimpleTextureNode_textureCoordinatesTransform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGSimpleTextureNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGSimpleTextureNode, &sipCpp))
        {
             ::QSGSimpleTextureNode::TextureCoordinatesTransformMode*sipRes;

            sipRes = new  ::QSGSimpleTextureNode::TextureCoordinatesTransformMode(sipCpp->textureCoordinatesTransform());

            return sipConvertFromNewType(sipRes,sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGSimpleTextureNode, sipName_textureCoordinatesTransform, doc_QSGSimpleTextureNode_textureCoordinatesTransform);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGSimpleTextureNode_setOwnsTexture, "setOwnsTexture(self, bool)");

extern "C" {static PyObject *meth_QSGSimpleTextureNode_setOwnsTexture(PyObject *, PyObject *);}
static PyObject *meth_QSGSimpleTextureNode_setOwnsTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QSGSimpleTextureNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QSGSimpleTextureNode, &sipCpp, &a0))
        {
            sipCpp->setOwnsTexture(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGSimpleTextureNode, sipName_setOwnsTexture, doc_QSGSimpleTextureNode_setOwnsTexture);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGSimpleTextureNode_ownsTexture, "ownsTexture(self) -> bool");

extern "C" {static PyObject *meth_QSGSimpleTextureNode_ownsTexture(PyObject *, PyObject *);}
static PyObject *meth_QSGSimpleTextureNode_ownsTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGSimpleTextureNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGSimpleTextureNode, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->ownsTexture();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGSimpleTextureNode, sipName_ownsTexture, doc_QSGSimpleTextureNode_ownsTexture);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGSimpleTextureNode_setSourceRect, "setSourceRect(self, QRectF)\n"
"setSourceRect(self, float, float, float, float)");

extern "C" {static PyObject *meth_QSGSimpleTextureNode_setSourceRect(PyObject *, PyObject *);}
static PyObject *meth_QSGSimpleTextureNode_setSourceRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
         ::QSGSimpleTextureNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSGSimpleTextureNode, &sipCpp, sipType_QRectF, &a0))
        {
            sipCpp->setSourceRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
         ::QSGSimpleTextureNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_QSGSimpleTextureNode, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setSourceRect(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGSimpleTextureNode, sipName_setSourceRect, doc_QSGSimpleTextureNode_setSourceRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGSimpleTextureNode_sourceRect, "sourceRect(self) -> QRectF");

extern "C" {static PyObject *meth_QSGSimpleTextureNode_sourceRect(PyObject *, PyObject *);}
static PyObject *meth_QSGSimpleTextureNode_sourceRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGSimpleTextureNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGSimpleTextureNode, &sipCpp))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->sourceRect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGSimpleTextureNode, sipName_sourceRect, doc_QSGSimpleTextureNode_sourceRect);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSGSimpleTextureNode(void *, const sipTypeDef *);}
static void *cast_QSGSimpleTextureNode(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSGSimpleTextureNode *sipCpp = reinterpret_cast< ::QSGSimpleTextureNode *>(sipCppV);

    if (targetType == sipType_QSGGeometryNode)
        return static_cast< ::QSGGeometryNode *>(sipCpp);

    if (targetType == sipType_QSGBasicGeometryNode)
        return static_cast< ::QSGBasicGeometryNode *>(sipCpp);

    if (targetType == sipType_QSGNode)
        return static_cast< ::QSGNode *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGSimpleTextureNode(void *, int);}
static void release_QSGSimpleTextureNode(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQSGSimpleTextureNode *>(sipCppV);
    else
        delete reinterpret_cast< ::QSGSimpleTextureNode *>(sipCppV);
}


extern "C" {static void dealloc_QSGSimpleTextureNode(sipSimpleWrapper *);}
static void dealloc_QSGSimpleTextureNode(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSGSimpleTextureNode *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGSimpleTextureNode(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSGSimpleTextureNode(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGSimpleTextureNode(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQSGSimpleTextureNode *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQSGSimpleTextureNode();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSGSimpleTextureNode[] = {{51, 255, 1}};


static PyMethodDef methods_QSGSimpleTextureNode[] = {
    {SIP_MLNAME_CAST(sipName_filtering), meth_QSGSimpleTextureNode_filtering, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGSimpleTextureNode_filtering)},
    {SIP_MLNAME_CAST(sipName_ownsTexture), meth_QSGSimpleTextureNode_ownsTexture, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGSimpleTextureNode_ownsTexture)},
    {SIP_MLNAME_CAST(sipName_rect), meth_QSGSimpleTextureNode_rect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGSimpleTextureNode_rect)},
    {SIP_MLNAME_CAST(sipName_setFiltering), meth_QSGSimpleTextureNode_setFiltering, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGSimpleTextureNode_setFiltering)},
    {SIP_MLNAME_CAST(sipName_setOwnsTexture), meth_QSGSimpleTextureNode_setOwnsTexture, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGSimpleTextureNode_setOwnsTexture)},
    {SIP_MLNAME_CAST(sipName_setRect), meth_QSGSimpleTextureNode_setRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGSimpleTextureNode_setRect)},
    {SIP_MLNAME_CAST(sipName_setSourceRect), meth_QSGSimpleTextureNode_setSourceRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGSimpleTextureNode_setSourceRect)},
    {SIP_MLNAME_CAST(sipName_setTexture), meth_QSGSimpleTextureNode_setTexture, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGSimpleTextureNode_setTexture)},
    {SIP_MLNAME_CAST(sipName_setTextureCoordinatesTransform), meth_QSGSimpleTextureNode_setTextureCoordinatesTransform, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGSimpleTextureNode_setTextureCoordinatesTransform)},
    {SIP_MLNAME_CAST(sipName_sourceRect), meth_QSGSimpleTextureNode_sourceRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGSimpleTextureNode_sourceRect)},
    {SIP_MLNAME_CAST(sipName_texture), meth_QSGSimpleTextureNode_texture, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGSimpleTextureNode_texture)},
    {SIP_MLNAME_CAST(sipName_textureCoordinatesTransform), meth_QSGSimpleTextureNode_textureCoordinatesTransform, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGSimpleTextureNode_textureCoordinatesTransform)}
};

static sipEnumMemberDef enummembers_QSGSimpleTextureNode[] = {
    {sipName_MirrorHorizontally, static_cast<int>( ::QSGSimpleTextureNode::MirrorHorizontally), 88},
    {sipName_MirrorVertically, static_cast<int>( ::QSGSimpleTextureNode::MirrorVertically), 88},
    {sipName_NoTransform, static_cast<int>( ::QSGSimpleTextureNode::NoTransform), 88},
};

PyDoc_STRVAR(doc_QSGSimpleTextureNode, "\1QSGSimpleTextureNode()");


static pyqt5ClassPluginDef plugin_QSGSimpleTextureNode = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGSimpleTextureNode = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGSimpleTextureNode,
        {SIP_NULLPTR},
        &plugin_QSGSimpleTextureNode
    },
    {
        sipNameNr_QSGSimpleTextureNode,
        {0, 0, 1},
        12, methods_QSGSimpleTextureNode,
        3, enummembers_QSGSimpleTextureNode,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSGSimpleTextureNode,
    -1,
    -1,
    supers_QSGSimpleTextureNode,
    SIP_NULLPTR,
    init_type_QSGSimpleTextureNode,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGSimpleTextureNode,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSGSimpleTextureNode,
    cast_QSGSimpleTextureNode,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgsimplerectnode.sip"
#include <qsgsimplerectnode.h>
#line 7562 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 7566 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 7569 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 165 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 7572 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
#include <qsggeometry.h>
#line 7575 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 7578 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 7581 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 7584 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"


class sipQSGSimpleRectNode : public  ::QSGSimpleRectNode
{
public:
    sipQSGSimpleRectNode(const  ::QRectF&,const  ::QColor&);
    sipQSGSimpleRectNode();
    virtual ~sipQSGSimpleRectNode();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool isSubtreeBlocked() const SIP_OVERRIDE;
    void preprocess() SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSGSimpleRectNode(const sipQSGSimpleRectNode &);
    sipQSGSimpleRectNode &operator = (const sipQSGSimpleRectNode &);

    char sipPyMethods[2];
};

sipQSGSimpleRectNode::sipQSGSimpleRectNode(const  ::QRectF& a0,const  ::QColor& a1):  ::QSGSimpleRectNode(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSGSimpleRectNode::sipQSGSimpleRectNode():  ::QSGSimpleRectNode(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSGSimpleRectNode::~sipQSGSimpleRectNode()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

bool sipQSGSimpleRectNode::isSubtreeBlocked() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_isSubtreeBlocked);

    if (!sipMeth)
        return  ::QSGSimpleRectNode::isSubtreeBlocked();

    extern bool sipVH_QtQuick_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_9(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQSGSimpleRectNode::preprocess()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_preprocess);

    if (!sipMeth)
    {
         ::QSGSimpleRectNode::preprocess();
        return;
    }

    extern void sipVH_QtQuick_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtQuick_6(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QSGSimpleRectNode_setRect, "setRect(self, QRectF)\n"
"setRect(self, float, float, float, float)");

extern "C" {static PyObject *meth_QSGSimpleRectNode_setRect(PyObject *, PyObject *);}
static PyObject *meth_QSGSimpleRectNode_setRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
         ::QSGSimpleRectNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSGSimpleRectNode, &sipCpp, sipType_QRectF, &a0))
        {
            sipCpp->setRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
         ::QSGSimpleRectNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_QSGSimpleRectNode, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setRect(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGSimpleRectNode, sipName_setRect, doc_QSGSimpleRectNode_setRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGSimpleRectNode_rect, "rect(self) -> QRectF");

extern "C" {static PyObject *meth_QSGSimpleRectNode_rect(PyObject *, PyObject *);}
static PyObject *meth_QSGSimpleRectNode_rect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGSimpleRectNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGSimpleRectNode, &sipCpp))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->rect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGSimpleRectNode, sipName_rect, doc_QSGSimpleRectNode_rect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGSimpleRectNode_setColor, "setColor(self, Union[QColor, Qt.GlobalColor])");

extern "C" {static PyObject *meth_QSGSimpleRectNode_setColor(PyObject *, PyObject *);}
static PyObject *meth_QSGSimpleRectNode_setColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor* a0;
        int a0State = 0;
         ::QSGSimpleRectNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSGSimpleRectNode, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->setColor(*a0);
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGSimpleRectNode, sipName_setColor, doc_QSGSimpleRectNode_setColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGSimpleRectNode_color, "color(self) -> QColor");

extern "C" {static PyObject *meth_QSGSimpleRectNode_color(PyObject *, PyObject *);}
static PyObject *meth_QSGSimpleRectNode_color(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGSimpleRectNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGSimpleRectNode, &sipCpp))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor(sipCpp->color());

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGSimpleRectNode, sipName_color, doc_QSGSimpleRectNode_color);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSGSimpleRectNode(void *, const sipTypeDef *);}
static void *cast_QSGSimpleRectNode(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSGSimpleRectNode *sipCpp = reinterpret_cast< ::QSGSimpleRectNode *>(sipCppV);

    if (targetType == sipType_QSGGeometryNode)
        return static_cast< ::QSGGeometryNode *>(sipCpp);

    if (targetType == sipType_QSGBasicGeometryNode)
        return static_cast< ::QSGBasicGeometryNode *>(sipCpp);

    if (targetType == sipType_QSGNode)
        return static_cast< ::QSGNode *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGSimpleRectNode(void *, int);}
static void release_QSGSimpleRectNode(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQSGSimpleRectNode *>(sipCppV);
    else
        delete reinterpret_cast< ::QSGSimpleRectNode *>(sipCppV);
}


extern "C" {static void dealloc_QSGSimpleRectNode(sipSimpleWrapper *);}
static void dealloc_QSGSimpleRectNode(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSGSimpleRectNode *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGSimpleRectNode(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSGSimpleRectNode(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGSimpleRectNode(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQSGSimpleRectNode *sipCpp = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
        const  ::QColor* a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9J1", sipType_QRectF, &a0, sipType_QColor, &a1, &a1State))
        {
            sipCpp = new sipQSGSimpleRectNode(*a0,*a1);
            sipReleaseType(const_cast< ::QColor *>(a1),sipType_QColor,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQSGSimpleRectNode();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSGSimpleRectNode[] = {{51, 255, 1}};


static PyMethodDef methods_QSGSimpleRectNode[] = {
    {SIP_MLNAME_CAST(sipName_color), meth_QSGSimpleRectNode_color, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGSimpleRectNode_color)},
    {SIP_MLNAME_CAST(sipName_rect), meth_QSGSimpleRectNode_rect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGSimpleRectNode_rect)},
    {SIP_MLNAME_CAST(sipName_setColor), meth_QSGSimpleRectNode_setColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGSimpleRectNode_setColor)},
    {SIP_MLNAME_CAST(sipName_setRect), meth_QSGSimpleRectNode_setRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGSimpleRectNode_setRect)}
};

PyDoc_STRVAR(doc_QSGSimpleRectNode, "\1QSGSimpleRectNode(QRectF, Union[QColor, Qt.GlobalColor])\n"
"QSGSimpleRectNode()");


static pyqt5ClassPluginDef plugin_QSGSimpleRectNode = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGSimpleRectNode = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGSimpleRectNode,
        {SIP_NULLPTR},
        &plugin_QSGSimpleRectNode
    },
    {
        sipNameNr_QSGSimpleRectNode,
        {0, 0, 1},
        4, methods_QSGSimpleRectNode,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSGSimpleRectNode,
    -1,
    -1,
    supers_QSGSimpleRectNode,
    SIP_NULLPTR,
    init_type_QSGSimpleRectNode,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGSimpleRectNode,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSGSimpleRectNode,
    cast_QSGSimpleRectNode,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgrendernode.sip"
#include <qsgrendernode.h>
#line 58 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgrendernode.sip"
#include <qsgrendernode.h>
#line 7950 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 7954 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 7957 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 30 "sip/QtGui/qmatrix4x4.sip"
#include <qmatrix4x4.h>
#line 7960 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"


PyDoc_STRVAR(doc_QSGRenderNode_RenderState_projectionMatrix, "projectionMatrix(self) -> QMatrix4x4");

extern "C" {static PyObject *meth_QSGRenderNode_RenderState_projectionMatrix(PyObject *, PyObject *);}
static PyObject *meth_QSGRenderNode_RenderState_projectionMatrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QSGRenderNode::RenderState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGRenderNode_RenderState, &sipCpp))
        {
            const  ::QMatrix4x4*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RenderState, sipName_projectionMatrix);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->projectionMatrix();

            return sipConvertFromType(const_cast< ::QMatrix4x4 *>(sipRes),sipType_QMatrix4x4,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RenderState, sipName_projectionMatrix, doc_QSGRenderNode_RenderState_projectionMatrix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGRenderNode_RenderState_scissorRect, "scissorRect(self) -> QRect");

extern "C" {static PyObject *meth_QSGRenderNode_RenderState_scissorRect(PyObject *, PyObject *);}
static PyObject *meth_QSGRenderNode_RenderState_scissorRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QSGRenderNode::RenderState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGRenderNode_RenderState, &sipCpp))
        {
             ::QRect*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RenderState, sipName_scissorRect);
                return SIP_NULLPTR;
            }

            sipRes = new  ::QRect(sipCpp->scissorRect());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RenderState, sipName_scissorRect, doc_QSGRenderNode_RenderState_scissorRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGRenderNode_RenderState_scissorEnabled, "scissorEnabled(self) -> bool");

extern "C" {static PyObject *meth_QSGRenderNode_RenderState_scissorEnabled(PyObject *, PyObject *);}
static PyObject *meth_QSGRenderNode_RenderState_scissorEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QSGRenderNode::RenderState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGRenderNode_RenderState, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RenderState, sipName_scissorEnabled);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->scissorEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RenderState, sipName_scissorEnabled, doc_QSGRenderNode_RenderState_scissorEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGRenderNode_RenderState_stencilValue, "stencilValue(self) -> int");

extern "C" {static PyObject *meth_QSGRenderNode_RenderState_stencilValue(PyObject *, PyObject *);}
static PyObject *meth_QSGRenderNode_RenderState_stencilValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QSGRenderNode::RenderState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGRenderNode_RenderState, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RenderState, sipName_stencilValue);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->stencilValue();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RenderState, sipName_stencilValue, doc_QSGRenderNode_RenderState_stencilValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGRenderNode_RenderState_stencilEnabled, "stencilEnabled(self) -> bool");

extern "C" {static PyObject *meth_QSGRenderNode_RenderState_stencilEnabled(PyObject *, PyObject *);}
static PyObject *meth_QSGRenderNode_RenderState_stencilEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QSGRenderNode::RenderState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGRenderNode_RenderState, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RenderState, sipName_stencilEnabled);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->stencilEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RenderState, sipName_stencilEnabled, doc_QSGRenderNode_RenderState_stencilEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGRenderNode_RenderState_clipRegion, "clipRegion(self) -> QRegion");

extern "C" {static PyObject *meth_QSGRenderNode_RenderState_clipRegion(PyObject *, PyObject *);}
static PyObject *meth_QSGRenderNode_RenderState_clipRegion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QSGRenderNode::RenderState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGRenderNode_RenderState, &sipCpp))
        {
            const  ::QRegion*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RenderState, sipName_clipRegion);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->clipRegion();

            return sipConvertFromType(const_cast< ::QRegion *>(sipRes),sipType_QRegion,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RenderState, sipName_clipRegion, doc_QSGRenderNode_RenderState_clipRegion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGRenderNode_RenderState_get, "get(self, str) -> sip.voidptr");

extern "C" {static PyObject *meth_QSGRenderNode_RenderState_get(PyObject *, PyObject *);}
static PyObject *meth_QSGRenderNode_RenderState_get(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QSGRenderNode::RenderState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAA", &sipSelf, sipType_QSGRenderNode_RenderState, &sipCpp, &a0Keep, &a0))
        {
            void*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSGRenderNode::RenderState::get(a0) : sipCpp->get(a0));
            Py_DECREF(a0Keep);

            return sipConvertFromVoidPtr(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RenderState, sipName_get, doc_QSGRenderNode_RenderState_get);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGRenderNode_RenderState(void *, int);}
static void release_QSGRenderNode_RenderState(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSGRenderNode::RenderState *>(sipCppV);
}


extern "C" {static void dealloc_QSGRenderNode_RenderState(sipSimpleWrapper *);}
static void dealloc_QSGRenderNode_RenderState(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGRenderNode_RenderState(sipGetAddress(sipSelf), 0);
    }
}


static PyMethodDef methods_QSGRenderNode_RenderState[] = {
    {SIP_MLNAME_CAST(sipName_clipRegion), meth_QSGRenderNode_RenderState_clipRegion, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGRenderNode_RenderState_clipRegion)},
    {SIP_MLNAME_CAST(sipName_get), meth_QSGRenderNode_RenderState_get, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGRenderNode_RenderState_get)},
    {SIP_MLNAME_CAST(sipName_projectionMatrix), meth_QSGRenderNode_RenderState_projectionMatrix, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGRenderNode_RenderState_projectionMatrix)},
    {SIP_MLNAME_CAST(sipName_scissorEnabled), meth_QSGRenderNode_RenderState_scissorEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGRenderNode_RenderState_scissorEnabled)},
    {SIP_MLNAME_CAST(sipName_scissorRect), meth_QSGRenderNode_RenderState_scissorRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGRenderNode_RenderState_scissorRect)},
    {SIP_MLNAME_CAST(sipName_stencilEnabled), meth_QSGRenderNode_RenderState_stencilEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGRenderNode_RenderState_stencilEnabled)},
    {SIP_MLNAME_CAST(sipName_stencilValue), meth_QSGRenderNode_RenderState_stencilValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGRenderNode_RenderState_stencilValue)}
};


static pyqt5ClassPluginDef plugin_QSGRenderNode_RenderState = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGRenderNode_RenderState = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGRenderNode__RenderState,
        {SIP_NULLPTR},
        &plugin_QSGRenderNode_RenderState
    },
    {
        sipNameNr_RenderState,
        {72, 255, 0},
        7, methods_QSGRenderNode_RenderState,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGRenderNode_RenderState,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSGRenderNode_RenderState,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgrendernode.sip"
#include <qsgrendernode.h>
#line 8293 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgrendernode.sip"
#include <qsgrendernode.h>
#line 8297 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"


extern "C" {static long slot_QSGRenderNode_RenderingFlags___hash__(PyObject *);}
static long slot_QSGRenderNode_RenderingFlags___hash__(PyObject *sipSelf)
{
     ::QSGRenderNode::RenderingFlags *sipCpp = reinterpret_cast< ::QSGRenderNode::RenderingFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGRenderNode_RenderingFlags));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QSGRenderNode::RenderingFlags::Int();
#line 8315 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QSGRenderNode_RenderingFlags___bool__(PyObject *);}
static int slot_QSGRenderNode_RenderingFlags___bool__(PyObject *sipSelf)
{
     ::QSGRenderNode::RenderingFlags *sipCpp = reinterpret_cast< ::QSGRenderNode::RenderingFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGRenderNode_RenderingFlags));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QSGRenderNode::RenderingFlags::Int() != 0);
#line 8340 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QSGRenderNode_RenderingFlags___ne__(PyObject *,PyObject *);}
static PyObject *slot_QSGRenderNode_RenderingFlags___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSGRenderNode::RenderingFlags *sipCpp = reinterpret_cast< ::QSGRenderNode::RenderingFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGRenderNode_RenderingFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGRenderNode::RenderingFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QSGRenderNode_RenderingFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QSGRenderNode::RenderingFlags::Int() != a0->operator QSGRenderNode::RenderingFlags::Int());
#line 8370 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
            sipReleaseType(const_cast< ::QSGRenderNode::RenderingFlags *>(a0),sipType_QSGRenderNode_RenderingFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, ne_slot, sipType_QSGRenderNode_RenderingFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QSGRenderNode_RenderingFlags___eq__(PyObject *,PyObject *);}
static PyObject *slot_QSGRenderNode_RenderingFlags___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSGRenderNode::RenderingFlags *sipCpp = reinterpret_cast< ::QSGRenderNode::RenderingFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGRenderNode_RenderingFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGRenderNode::RenderingFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QSGRenderNode_RenderingFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QSGRenderNode::RenderingFlags::Int() == a0->operator QSGRenderNode::RenderingFlags::Int());
#line 8406 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
            sipReleaseType(const_cast< ::QSGRenderNode::RenderingFlags *>(a0),sipType_QSGRenderNode_RenderingFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, eq_slot, sipType_QSGRenderNode_RenderingFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QSGRenderNode_RenderingFlags___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QSGRenderNode_RenderingFlags___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSGRenderNode_RenderingFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSGRenderNode::RenderingFlags *sipCpp = reinterpret_cast< ::QSGRenderNode::RenderingFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGRenderNode_RenderingFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QSGRenderNode::RenderingFlags(*sipCpp ^ a0);
#line 8445 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSGRenderNode_RenderingFlags___xor__(PyObject *,PyObject *);}
static PyObject *slot_QSGRenderNode_RenderingFlags___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGRenderNode::RenderingFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QSGRenderNode_RenderingFlags, &a0, &a0State, &a1))
        {
             ::QSGRenderNode::RenderingFlags*sipRes;

            sipRes = new  ::QSGRenderNode::RenderingFlags((*a0 ^ a1));
            sipReleaseType(a0,sipType_QSGRenderNode_RenderingFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSGRenderNode_RenderingFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSGRenderNode_RenderingFlags___ior__(PyObject *,PyObject *);}
static PyObject *slot_QSGRenderNode_RenderingFlags___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSGRenderNode_RenderingFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSGRenderNode::RenderingFlags *sipCpp = reinterpret_cast< ::QSGRenderNode::RenderingFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGRenderNode_RenderingFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QSGRenderNode::RenderingFlags(*sipCpp | a0);
#line 8517 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSGRenderNode_RenderingFlags___or__(PyObject *,PyObject *);}
static PyObject *slot_QSGRenderNode_RenderingFlags___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGRenderNode::RenderingFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QSGRenderNode_RenderingFlags, &a0, &a0State, &a1))
        {
             ::QSGRenderNode::RenderingFlags*sipRes;

            sipRes = new  ::QSGRenderNode::RenderingFlags((*a0 | a1));
            sipReleaseType(a0,sipType_QSGRenderNode_RenderingFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSGRenderNode_RenderingFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSGRenderNode_RenderingFlags___iand__(PyObject *,PyObject *);}
static PyObject *slot_QSGRenderNode_RenderingFlags___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSGRenderNode_RenderingFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSGRenderNode::RenderingFlags *sipCpp = reinterpret_cast< ::QSGRenderNode::RenderingFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGRenderNode_RenderingFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QSGRenderNode::RenderingFlags::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSGRenderNode_RenderingFlags___and__(PyObject *,PyObject *);}
static PyObject *slot_QSGRenderNode_RenderingFlags___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGRenderNode::RenderingFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QSGRenderNode_RenderingFlags, &a0, &a0State, &a1))
        {
             ::QSGRenderNode::RenderingFlags*sipRes;

            sipRes = new  ::QSGRenderNode::RenderingFlags((*a0 & a1));
            sipReleaseType(a0,sipType_QSGRenderNode_RenderingFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSGRenderNode_RenderingFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSGRenderNode_RenderingFlags___invert__(PyObject *);}
static PyObject *slot_QSGRenderNode_RenderingFlags___invert__(PyObject *sipSelf)
{
     ::QSGRenderNode::RenderingFlags *sipCpp = reinterpret_cast< ::QSGRenderNode::RenderingFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGRenderNode_RenderingFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QSGRenderNode::RenderingFlags*sipRes;

            sipRes = new  ::QSGRenderNode::RenderingFlags(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QSGRenderNode_RenderingFlags,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QSGRenderNode_RenderingFlags___int__(PyObject *);}
static PyObject *slot_QSGRenderNode_RenderingFlags___int__(PyObject *sipSelf)
{
     ::QSGRenderNode::RenderingFlags *sipCpp = reinterpret_cast< ::QSGRenderNode::RenderingFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGRenderNode_RenderingFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGRenderNode_RenderingFlags(void *, int);}
static void release_QSGRenderNode_RenderingFlags(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSGRenderNode::RenderingFlags *>(sipCppV);
}


extern "C" {static void assign_QSGRenderNode_RenderingFlags(void *, SIP_SSIZE_T, void *);}
static void assign_QSGRenderNode_RenderingFlags(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QSGRenderNode::RenderingFlags *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QSGRenderNode::RenderingFlags *>(sipSrc);
}


extern "C" {static void *array_QSGRenderNode_RenderingFlags(SIP_SSIZE_T);}
static void *array_QSGRenderNode_RenderingFlags(SIP_SSIZE_T sipNrElem)
{
    return new  ::QSGRenderNode::RenderingFlags[sipNrElem];
}


extern "C" {static void *copy_QSGRenderNode_RenderingFlags(const void *, SIP_SSIZE_T);}
static void *copy_QSGRenderNode_RenderingFlags(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QSGRenderNode::RenderingFlags(reinterpret_cast<const  ::QSGRenderNode::RenderingFlags *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSGRenderNode_RenderingFlags(sipSimpleWrapper *);}
static void dealloc_QSGRenderNode_RenderingFlags(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGRenderNode_RenderingFlags(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QSGRenderNode_RenderingFlags(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGRenderNode_RenderingFlags(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QSGRenderNode::RenderingFlags *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QSGRenderNode::RenderingFlags();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QSGRenderNode::RenderingFlags(a0);

            return sipCpp;
        }
    }

    {
        const  ::QSGRenderNode::RenderingFlags* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QSGRenderNode_RenderingFlags, &a0, &a0State))
        {
            sipCpp = new  ::QSGRenderNode::RenderingFlags(*a0);
            sipReleaseType(const_cast< ::QSGRenderNode::RenderingFlags *>(a0),sipType_QSGRenderNode_RenderingFlags,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QSGRenderNode_RenderingFlags(PyObject *, void **, int *, PyObject *);}
static int convertTo_QSGRenderNode_RenderingFlags(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QSGRenderNode::RenderingFlags **sipCppPtr = reinterpret_cast< ::QSGRenderNode::RenderingFlags **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QSGRenderNode::RenderingFlags is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QSGRenderNode_RenderingFlag)) ||
            sipCanConvertToType(sipPy, sipType_QSGRenderNode_RenderingFlags, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QSGRenderNode_RenderingFlag)))
{
    *sipCppPtr = new QSGRenderNode::RenderingFlags(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QSGRenderNode::RenderingFlags *>(sipConvertToType(sipPy, sipType_QSGRenderNode_RenderingFlags, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 8785 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QSGRenderNode_RenderingFlags[] = {
    {(void *)slot_QSGRenderNode_RenderingFlags___hash__, hash_slot},
    {(void *)slot_QSGRenderNode_RenderingFlags___bool__, bool_slot},
    {(void *)slot_QSGRenderNode_RenderingFlags___ne__, ne_slot},
    {(void *)slot_QSGRenderNode_RenderingFlags___eq__, eq_slot},
    {(void *)slot_QSGRenderNode_RenderingFlags___ixor__, ixor_slot},
    {(void *)slot_QSGRenderNode_RenderingFlags___xor__, xor_slot},
    {(void *)slot_QSGRenderNode_RenderingFlags___ior__, ior_slot},
    {(void *)slot_QSGRenderNode_RenderingFlags___or__, or_slot},
    {(void *)slot_QSGRenderNode_RenderingFlags___iand__, iand_slot},
    {(void *)slot_QSGRenderNode_RenderingFlags___and__, and_slot},
    {(void *)slot_QSGRenderNode_RenderingFlags___invert__, invert_slot},
    {(void *)slot_QSGRenderNode_RenderingFlags___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QSGRenderNode_RenderingFlags, "\1QSGRenderNode.RenderingFlags()\n"
"QSGRenderNode.RenderingFlags(Union[QSGRenderNode.RenderingFlags, QSGRenderNode.RenderingFlag])\n"
"QSGRenderNode.RenderingFlags(QSGRenderNode.RenderingFlags)");


static pyqt5ClassPluginDef plugin_QSGRenderNode_RenderingFlags = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGRenderNode_RenderingFlags = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGRenderNode__RenderingFlags,
        {SIP_NULLPTR},
        &plugin_QSGRenderNode_RenderingFlags
    },
    {
        sipNameNr_RenderingFlags,
        {72, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSGRenderNode_RenderingFlags,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QSGRenderNode_RenderingFlags,
    init_type_QSGRenderNode_RenderingFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGRenderNode_RenderingFlags,
    assign_QSGRenderNode_RenderingFlags,
    array_QSGRenderNode_RenderingFlags,
    copy_QSGRenderNode_RenderingFlags,
    release_QSGRenderNode_RenderingFlags,
    SIP_NULLPTR,
    convertTo_QSGRenderNode_RenderingFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgrendernode.sip"
#include <qsgrendernode.h>
#line 8873 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgrendernode.sip"
#include <qsgrendernode.h>
#line 8877 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"


extern "C" {static long slot_QSGRenderNode_StateFlags___hash__(PyObject *);}
static long slot_QSGRenderNode_StateFlags___hash__(PyObject *sipSelf)
{
     ::QSGRenderNode::StateFlags *sipCpp = reinterpret_cast< ::QSGRenderNode::StateFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGRenderNode_StateFlags));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QSGRenderNode::StateFlags::Int();
#line 8895 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QSGRenderNode_StateFlags___bool__(PyObject *);}
static int slot_QSGRenderNode_StateFlags___bool__(PyObject *sipSelf)
{
     ::QSGRenderNode::StateFlags *sipCpp = reinterpret_cast< ::QSGRenderNode::StateFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGRenderNode_StateFlags));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QSGRenderNode::StateFlags::Int() != 0);
#line 8920 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QSGRenderNode_StateFlags___ne__(PyObject *,PyObject *);}
static PyObject *slot_QSGRenderNode_StateFlags___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSGRenderNode::StateFlags *sipCpp = reinterpret_cast< ::QSGRenderNode::StateFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGRenderNode_StateFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGRenderNode::StateFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QSGRenderNode_StateFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QSGRenderNode::StateFlags::Int() != a0->operator QSGRenderNode::StateFlags::Int());
#line 8950 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
            sipReleaseType(const_cast< ::QSGRenderNode::StateFlags *>(a0),sipType_QSGRenderNode_StateFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, ne_slot, sipType_QSGRenderNode_StateFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QSGRenderNode_StateFlags___eq__(PyObject *,PyObject *);}
static PyObject *slot_QSGRenderNode_StateFlags___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSGRenderNode::StateFlags *sipCpp = reinterpret_cast< ::QSGRenderNode::StateFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGRenderNode_StateFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGRenderNode::StateFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QSGRenderNode_StateFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QSGRenderNode::StateFlags::Int() == a0->operator QSGRenderNode::StateFlags::Int());
#line 8986 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
            sipReleaseType(const_cast< ::QSGRenderNode::StateFlags *>(a0),sipType_QSGRenderNode_StateFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, eq_slot, sipType_QSGRenderNode_StateFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QSGRenderNode_StateFlags___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QSGRenderNode_StateFlags___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSGRenderNode_StateFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSGRenderNode::StateFlags *sipCpp = reinterpret_cast< ::QSGRenderNode::StateFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGRenderNode_StateFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QSGRenderNode::StateFlags(*sipCpp ^ a0);
#line 9025 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSGRenderNode_StateFlags___xor__(PyObject *,PyObject *);}
static PyObject *slot_QSGRenderNode_StateFlags___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGRenderNode::StateFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QSGRenderNode_StateFlags, &a0, &a0State, &a1))
        {
             ::QSGRenderNode::StateFlags*sipRes;

            sipRes = new  ::QSGRenderNode::StateFlags((*a0 ^ a1));
            sipReleaseType(a0,sipType_QSGRenderNode_StateFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSGRenderNode_StateFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSGRenderNode_StateFlags___ior__(PyObject *,PyObject *);}
static PyObject *slot_QSGRenderNode_StateFlags___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSGRenderNode_StateFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSGRenderNode::StateFlags *sipCpp = reinterpret_cast< ::QSGRenderNode::StateFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGRenderNode_StateFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QSGRenderNode::StateFlags(*sipCpp | a0);
#line 9097 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSGRenderNode_StateFlags___or__(PyObject *,PyObject *);}
static PyObject *slot_QSGRenderNode_StateFlags___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGRenderNode::StateFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QSGRenderNode_StateFlags, &a0, &a0State, &a1))
        {
             ::QSGRenderNode::StateFlags*sipRes;

            sipRes = new  ::QSGRenderNode::StateFlags((*a0 | a1));
            sipReleaseType(a0,sipType_QSGRenderNode_StateFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSGRenderNode_StateFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSGRenderNode_StateFlags___iand__(PyObject *,PyObject *);}
static PyObject *slot_QSGRenderNode_StateFlags___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSGRenderNode_StateFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSGRenderNode::StateFlags *sipCpp = reinterpret_cast< ::QSGRenderNode::StateFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGRenderNode_StateFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QSGRenderNode::StateFlags::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSGRenderNode_StateFlags___and__(PyObject *,PyObject *);}
static PyObject *slot_QSGRenderNode_StateFlags___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGRenderNode::StateFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QSGRenderNode_StateFlags, &a0, &a0State, &a1))
        {
             ::QSGRenderNode::StateFlags*sipRes;

            sipRes = new  ::QSGRenderNode::StateFlags((*a0 & a1));
            sipReleaseType(a0,sipType_QSGRenderNode_StateFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSGRenderNode_StateFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSGRenderNode_StateFlags___invert__(PyObject *);}
static PyObject *slot_QSGRenderNode_StateFlags___invert__(PyObject *sipSelf)
{
     ::QSGRenderNode::StateFlags *sipCpp = reinterpret_cast< ::QSGRenderNode::StateFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGRenderNode_StateFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QSGRenderNode::StateFlags*sipRes;

            sipRes = new  ::QSGRenderNode::StateFlags(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QSGRenderNode_StateFlags,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QSGRenderNode_StateFlags___int__(PyObject *);}
static PyObject *slot_QSGRenderNode_StateFlags___int__(PyObject *sipSelf)
{
     ::QSGRenderNode::StateFlags *sipCpp = reinterpret_cast< ::QSGRenderNode::StateFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGRenderNode_StateFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGRenderNode_StateFlags(void *, int);}
static void release_QSGRenderNode_StateFlags(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSGRenderNode::StateFlags *>(sipCppV);
}


extern "C" {static void assign_QSGRenderNode_StateFlags(void *, SIP_SSIZE_T, void *);}
static void assign_QSGRenderNode_StateFlags(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QSGRenderNode::StateFlags *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QSGRenderNode::StateFlags *>(sipSrc);
}


extern "C" {static void *array_QSGRenderNode_StateFlags(SIP_SSIZE_T);}
static void *array_QSGRenderNode_StateFlags(SIP_SSIZE_T sipNrElem)
{
    return new  ::QSGRenderNode::StateFlags[sipNrElem];
}


extern "C" {static void *copy_QSGRenderNode_StateFlags(const void *, SIP_SSIZE_T);}
static void *copy_QSGRenderNode_StateFlags(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QSGRenderNode::StateFlags(reinterpret_cast<const  ::QSGRenderNode::StateFlags *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSGRenderNode_StateFlags(sipSimpleWrapper *);}
static void dealloc_QSGRenderNode_StateFlags(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGRenderNode_StateFlags(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QSGRenderNode_StateFlags(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGRenderNode_StateFlags(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QSGRenderNode::StateFlags *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QSGRenderNode::StateFlags();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QSGRenderNode::StateFlags(a0);

            return sipCpp;
        }
    }

    {
        const  ::QSGRenderNode::StateFlags* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QSGRenderNode_StateFlags, &a0, &a0State))
        {
            sipCpp = new  ::QSGRenderNode::StateFlags(*a0);
            sipReleaseType(const_cast< ::QSGRenderNode::StateFlags *>(a0),sipType_QSGRenderNode_StateFlags,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QSGRenderNode_StateFlags(PyObject *, void **, int *, PyObject *);}
static int convertTo_QSGRenderNode_StateFlags(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QSGRenderNode::StateFlags **sipCppPtr = reinterpret_cast< ::QSGRenderNode::StateFlags **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QSGRenderNode::StateFlags is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QSGRenderNode_StateFlag)) ||
            sipCanConvertToType(sipPy, sipType_QSGRenderNode_StateFlags, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QSGRenderNode_StateFlag)))
{
    *sipCppPtr = new QSGRenderNode::StateFlags(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QSGRenderNode::StateFlags *>(sipConvertToType(sipPy, sipType_QSGRenderNode_StateFlags, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 9365 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QSGRenderNode_StateFlags[] = {
    {(void *)slot_QSGRenderNode_StateFlags___hash__, hash_slot},
    {(void *)slot_QSGRenderNode_StateFlags___bool__, bool_slot},
    {(void *)slot_QSGRenderNode_StateFlags___ne__, ne_slot},
    {(void *)slot_QSGRenderNode_StateFlags___eq__, eq_slot},
    {(void *)slot_QSGRenderNode_StateFlags___ixor__, ixor_slot},
    {(void *)slot_QSGRenderNode_StateFlags___xor__, xor_slot},
    {(void *)slot_QSGRenderNode_StateFlags___ior__, ior_slot},
    {(void *)slot_QSGRenderNode_StateFlags___or__, or_slot},
    {(void *)slot_QSGRenderNode_StateFlags___iand__, iand_slot},
    {(void *)slot_QSGRenderNode_StateFlags___and__, and_slot},
    {(void *)slot_QSGRenderNode_StateFlags___invert__, invert_slot},
    {(void *)slot_QSGRenderNode_StateFlags___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QSGRenderNode_StateFlags, "\1QSGRenderNode.StateFlags()\n"
"QSGRenderNode.StateFlags(Union[QSGRenderNode.StateFlags, QSGRenderNode.StateFlag])\n"
"QSGRenderNode.StateFlags(QSGRenderNode.StateFlags)");


static pyqt5ClassPluginDef plugin_QSGRenderNode_StateFlags = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGRenderNode_StateFlags = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGRenderNode__StateFlags,
        {SIP_NULLPTR},
        &plugin_QSGRenderNode_StateFlags
    },
    {
        sipNameNr_StateFlags,
        {72, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSGRenderNode_StateFlags,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QSGRenderNode_StateFlags,
    init_type_QSGRenderNode_StateFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGRenderNode_StateFlags,
    assign_QSGRenderNode_StateFlags,
    array_QSGRenderNode_StateFlags,
    copy_QSGRenderNode_StateFlags,
    release_QSGRenderNode_StateFlags,
    SIP_NULLPTR,
    convertTo_QSGRenderNode_StateFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgrendernode.sip"
#include <qsgrendernode.h>
#line 9453 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

#line 296 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 9457 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 30 "sip/QtGui/qmatrix4x4.sip"
#include <qmatrix4x4.h>
#line 9460 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 9463 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgrendernode.sip"
#include <qsgrendernode.h>
#line 9466 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgrendernode.sip"
#include <qsgrendernode.h>
#line 58 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgrendernode.sip"
#include <qsgrendernode.h>
#line 9471 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgrendernode.sip"
#include <qsgrendernode.h>
#line 9474 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 9477 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 9480 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 9483 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"


PyDoc_STRVAR(doc_QSGRenderNode_changedStates, "changedStates(self) -> QSGRenderNode.StateFlags");

extern "C" {static PyObject *meth_QSGRenderNode_changedStates(PyObject *, PyObject *);}
static PyObject *meth_QSGRenderNode_changedStates(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSGRenderNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGRenderNode, &sipCpp))
        {
             ::QSGRenderNode::StateFlags*sipRes;

            sipRes = new  ::QSGRenderNode::StateFlags((sipSelfWasArg ? sipCpp-> ::QSGRenderNode::changedStates() : sipCpp->changedStates()));

            return sipConvertFromNewType(sipRes,sipType_QSGRenderNode_StateFlags,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGRenderNode, sipName_changedStates, doc_QSGRenderNode_changedStates);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGRenderNode_render, "render(self, QSGRenderNode.RenderState)");

extern "C" {static PyObject *meth_QSGRenderNode_render(PyObject *, PyObject *);}
static PyObject *meth_QSGRenderNode_render(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QSGRenderNode::RenderState* a0;
         ::QSGRenderNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QSGRenderNode, &sipCpp, sipType_QSGRenderNode_RenderState, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSGRenderNode, sipName_render);
                return SIP_NULLPTR;
            }

            sipCpp->render(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGRenderNode, sipName_render, doc_QSGRenderNode_render);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGRenderNode_releaseResources, "releaseResources(self)");

extern "C" {static PyObject *meth_QSGRenderNode_releaseResources(PyObject *, PyObject *);}
static PyObject *meth_QSGRenderNode_releaseResources(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QSGRenderNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGRenderNode, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QSGRenderNode::releaseResources() : sipCpp->releaseResources());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGRenderNode, sipName_releaseResources, doc_QSGRenderNode_releaseResources);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGRenderNode_flags, "flags(self) -> QSGRenderNode.RenderingFlags");

extern "C" {static PyObject *meth_QSGRenderNode_flags(PyObject *, PyObject *);}
static PyObject *meth_QSGRenderNode_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSGRenderNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGRenderNode, &sipCpp))
        {
             ::QSGRenderNode::RenderingFlags*sipRes;

            sipRes = new  ::QSGRenderNode::RenderingFlags((sipSelfWasArg ? sipCpp-> ::QSGRenderNode::flags() : sipCpp->flags()));

            return sipConvertFromNewType(sipRes,sipType_QSGRenderNode_RenderingFlags,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGRenderNode, sipName_flags, doc_QSGRenderNode_flags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGRenderNode_rect, "rect(self) -> QRectF");

extern "C" {static PyObject *meth_QSGRenderNode_rect(PyObject *, PyObject *);}
static PyObject *meth_QSGRenderNode_rect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSGRenderNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGRenderNode, &sipCpp))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF((sipSelfWasArg ? sipCpp-> ::QSGRenderNode::rect() : sipCpp->rect()));

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGRenderNode, sipName_rect, doc_QSGRenderNode_rect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGRenderNode_matrix, "matrix(self) -> QMatrix4x4");

extern "C" {static PyObject *meth_QSGRenderNode_matrix(PyObject *, PyObject *);}
static PyObject *meth_QSGRenderNode_matrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGRenderNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGRenderNode, &sipCpp))
        {
            const  ::QMatrix4x4*sipRes;

            sipRes = sipCpp->matrix();

            return sipConvertFromType(const_cast< ::QMatrix4x4 *>(sipRes),sipType_QMatrix4x4,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGRenderNode, sipName_matrix, doc_QSGRenderNode_matrix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGRenderNode_clipList, "clipList(self) -> QSGClipNode");

extern "C" {static PyObject *meth_QSGRenderNode_clipList(PyObject *, PyObject *);}
static PyObject *meth_QSGRenderNode_clipList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGRenderNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGRenderNode, &sipCpp))
        {
            const  ::QSGClipNode*sipRes;

            sipRes = sipCpp->clipList();

            return sipConvertFromType(const_cast< ::QSGClipNode *>(sipRes),sipType_QSGClipNode,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGRenderNode, sipName_clipList, doc_QSGRenderNode_clipList);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGRenderNode_inheritedOpacity, "inheritedOpacity(self) -> float");

extern "C" {static PyObject *meth_QSGRenderNode_inheritedOpacity(PyObject *, PyObject *);}
static PyObject *meth_QSGRenderNode_inheritedOpacity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGRenderNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGRenderNode, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->inheritedOpacity();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGRenderNode, sipName_inheritedOpacity, doc_QSGRenderNode_inheritedOpacity);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSGRenderNode(void *, const sipTypeDef *);}
static void *cast_QSGRenderNode(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSGRenderNode *sipCpp = reinterpret_cast< ::QSGRenderNode *>(sipCppV);

    if (targetType == sipType_QSGNode)
        return static_cast< ::QSGNode *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGRenderNode(void *, int);}
static void release_QSGRenderNode(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSGRenderNode *>(sipCppV);
}


extern "C" {static void dealloc_QSGRenderNode(sipSimpleWrapper *);}
static void dealloc_QSGRenderNode(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGRenderNode(sipGetAddress(sipSelf), 0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSGRenderNode[] = {{63, 255, 1}};


static PyMethodDef methods_QSGRenderNode[] = {
    {SIP_MLNAME_CAST(sipName_changedStates), meth_QSGRenderNode_changedStates, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGRenderNode_changedStates)},
    {SIP_MLNAME_CAST(sipName_clipList), meth_QSGRenderNode_clipList, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGRenderNode_clipList)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QSGRenderNode_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGRenderNode_flags)},
    {SIP_MLNAME_CAST(sipName_inheritedOpacity), meth_QSGRenderNode_inheritedOpacity, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGRenderNode_inheritedOpacity)},
    {SIP_MLNAME_CAST(sipName_matrix), meth_QSGRenderNode_matrix, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGRenderNode_matrix)},
    {SIP_MLNAME_CAST(sipName_rect), meth_QSGRenderNode_rect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGRenderNode_rect)},
    {SIP_MLNAME_CAST(sipName_releaseResources), meth_QSGRenderNode_releaseResources, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGRenderNode_releaseResources)},
    {SIP_MLNAME_CAST(sipName_render), meth_QSGRenderNode_render, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGRenderNode_render)}
};

static sipEnumMemberDef enummembers_QSGRenderNode[] = {
    {sipName_BlendState, static_cast<int>( ::QSGRenderNode::BlendState), 76},
    {sipName_BoundedRectRendering, static_cast<int>( ::QSGRenderNode::BoundedRectRendering), 74},
    {sipName_ColorState, static_cast<int>( ::QSGRenderNode::ColorState), 76},
    {sipName_CullState, static_cast<int>( ::QSGRenderNode::CullState), 76},
    {sipName_DepthAwareRendering, static_cast<int>( ::QSGRenderNode::DepthAwareRendering), 74},
    {sipName_DepthState, static_cast<int>( ::QSGRenderNode::DepthState), 76},
    {sipName_OpaqueRendering, static_cast<int>( ::QSGRenderNode::OpaqueRendering), 74},
    {sipName_RenderTargetState, static_cast<int>( ::QSGRenderNode::RenderTargetState), 76},
    {sipName_ScissorState, static_cast<int>( ::QSGRenderNode::ScissorState), 76},
    {sipName_StencilState, static_cast<int>( ::QSGRenderNode::StencilState), 76},
    {sipName_ViewportState, static_cast<int>( ::QSGRenderNode::ViewportState), 76},
};


static pyqt5ClassPluginDef plugin_QSGRenderNode = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGRenderNode = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGRenderNode,
        {SIP_NULLPTR},
        &plugin_QSGRenderNode
    },
    {
        sipNameNr_QSGRenderNode,
        {0, 0, 1},
        8, methods_QSGRenderNode,
        11, enummembers_QSGRenderNode,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_QSGRenderNode,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGRenderNode,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSGRenderNode,
    cast_QSGRenderNode,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgrendererinterface.sip"
#include <qsgrendererinterface.h>
#line 9840 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgrendererinterface.sip"
#include <qsgrendererinterface.h>
#line 9844 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"


extern "C" {static long slot_QSGRendererInterface_ShaderSourceTypes___hash__(PyObject *);}
static long slot_QSGRendererInterface_ShaderSourceTypes___hash__(PyObject *sipSelf)
{
     ::QSGRendererInterface::ShaderSourceTypes *sipCpp = reinterpret_cast< ::QSGRendererInterface::ShaderSourceTypes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGRendererInterface_ShaderSourceTypes));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QSGRendererInterface::ShaderSourceTypes::Int();
#line 9862 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QSGRendererInterface_ShaderSourceTypes___bool__(PyObject *);}
static int slot_QSGRendererInterface_ShaderSourceTypes___bool__(PyObject *sipSelf)
{
     ::QSGRendererInterface::ShaderSourceTypes *sipCpp = reinterpret_cast< ::QSGRendererInterface::ShaderSourceTypes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGRendererInterface_ShaderSourceTypes));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QSGRendererInterface::ShaderSourceTypes::Int() != 0);
#line 9887 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QSGRendererInterface_ShaderSourceTypes___ne__(PyObject *,PyObject *);}
static PyObject *slot_QSGRendererInterface_ShaderSourceTypes___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSGRendererInterface::ShaderSourceTypes *sipCpp = reinterpret_cast< ::QSGRendererInterface::ShaderSourceTypes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGRendererInterface_ShaderSourceTypes));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGRendererInterface::ShaderSourceTypes* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QSGRendererInterface_ShaderSourceTypes, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QSGRendererInterface::ShaderSourceTypes::Int() != a0->operator QSGRendererInterface::ShaderSourceTypes::Int());
#line 9917 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
            sipReleaseType(const_cast< ::QSGRendererInterface::ShaderSourceTypes *>(a0),sipType_QSGRendererInterface_ShaderSourceTypes,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, ne_slot, sipType_QSGRendererInterface_ShaderSourceTypes, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QSGRendererInterface_ShaderSourceTypes___eq__(PyObject *,PyObject *);}
static PyObject *slot_QSGRendererInterface_ShaderSourceTypes___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSGRendererInterface::ShaderSourceTypes *sipCpp = reinterpret_cast< ::QSGRendererInterface::ShaderSourceTypes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGRendererInterface_ShaderSourceTypes));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGRendererInterface::ShaderSourceTypes* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QSGRendererInterface_ShaderSourceTypes, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QSGRendererInterface::ShaderSourceTypes::Int() == a0->operator QSGRendererInterface::ShaderSourceTypes::Int());
#line 9953 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
            sipReleaseType(const_cast< ::QSGRendererInterface::ShaderSourceTypes *>(a0),sipType_QSGRendererInterface_ShaderSourceTypes,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, eq_slot, sipType_QSGRendererInterface_ShaderSourceTypes, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QSGRendererInterface_ShaderSourceTypes___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QSGRendererInterface_ShaderSourceTypes___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSGRendererInterface_ShaderSourceTypes)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSGRendererInterface::ShaderSourceTypes *sipCpp = reinterpret_cast< ::QSGRendererInterface::ShaderSourceTypes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGRendererInterface_ShaderSourceTypes));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QSGRendererInterface::ShaderSourceTypes(*sipCpp ^ a0);
#line 9992 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSGRendererInterface_ShaderSourceTypes___xor__(PyObject *,PyObject *);}
static PyObject *slot_QSGRendererInterface_ShaderSourceTypes___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGRendererInterface::ShaderSourceTypes* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QSGRendererInterface_ShaderSourceTypes, &a0, &a0State, &a1))
        {
             ::QSGRendererInterface::ShaderSourceTypes*sipRes;

            sipRes = new  ::QSGRendererInterface::ShaderSourceTypes((*a0 ^ a1));
            sipReleaseType(a0,sipType_QSGRendererInterface_ShaderSourceTypes,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSGRendererInterface_ShaderSourceTypes,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSGRendererInterface_ShaderSourceTypes___ior__(PyObject *,PyObject *);}
static PyObject *slot_QSGRendererInterface_ShaderSourceTypes___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSGRendererInterface_ShaderSourceTypes)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSGRendererInterface::ShaderSourceTypes *sipCpp = reinterpret_cast< ::QSGRendererInterface::ShaderSourceTypes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGRendererInterface_ShaderSourceTypes));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QSGRendererInterface::ShaderSourceTypes(*sipCpp | a0);
#line 10064 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSGRendererInterface_ShaderSourceTypes___or__(PyObject *,PyObject *);}
static PyObject *slot_QSGRendererInterface_ShaderSourceTypes___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGRendererInterface::ShaderSourceTypes* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QSGRendererInterface_ShaderSourceTypes, &a0, &a0State, &a1))
        {
             ::QSGRendererInterface::ShaderSourceTypes*sipRes;

            sipRes = new  ::QSGRendererInterface::ShaderSourceTypes((*a0 | a1));
            sipReleaseType(a0,sipType_QSGRendererInterface_ShaderSourceTypes,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSGRendererInterface_ShaderSourceTypes,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSGRendererInterface_ShaderSourceTypes___iand__(PyObject *,PyObject *);}
static PyObject *slot_QSGRendererInterface_ShaderSourceTypes___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSGRendererInterface_ShaderSourceTypes)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSGRendererInterface::ShaderSourceTypes *sipCpp = reinterpret_cast< ::QSGRendererInterface::ShaderSourceTypes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGRendererInterface_ShaderSourceTypes));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QSGRendererInterface::ShaderSourceTypes::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSGRendererInterface_ShaderSourceTypes___and__(PyObject *,PyObject *);}
static PyObject *slot_QSGRendererInterface_ShaderSourceTypes___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGRendererInterface::ShaderSourceTypes* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QSGRendererInterface_ShaderSourceTypes, &a0, &a0State, &a1))
        {
             ::QSGRendererInterface::ShaderSourceTypes*sipRes;

            sipRes = new  ::QSGRendererInterface::ShaderSourceTypes((*a0 & a1));
            sipReleaseType(a0,sipType_QSGRendererInterface_ShaderSourceTypes,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSGRendererInterface_ShaderSourceTypes,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSGRendererInterface_ShaderSourceTypes___invert__(PyObject *);}
static PyObject *slot_QSGRendererInterface_ShaderSourceTypes___invert__(PyObject *sipSelf)
{
     ::QSGRendererInterface::ShaderSourceTypes *sipCpp = reinterpret_cast< ::QSGRendererInterface::ShaderSourceTypes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGRendererInterface_ShaderSourceTypes));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QSGRendererInterface::ShaderSourceTypes*sipRes;

            sipRes = new  ::QSGRendererInterface::ShaderSourceTypes(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QSGRendererInterface_ShaderSourceTypes,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QSGRendererInterface_ShaderSourceTypes___int__(PyObject *);}
static PyObject *slot_QSGRendererInterface_ShaderSourceTypes___int__(PyObject *sipSelf)
{
     ::QSGRendererInterface::ShaderSourceTypes *sipCpp = reinterpret_cast< ::QSGRendererInterface::ShaderSourceTypes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGRendererInterface_ShaderSourceTypes));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGRendererInterface_ShaderSourceTypes(void *, int);}
static void release_QSGRendererInterface_ShaderSourceTypes(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSGRendererInterface::ShaderSourceTypes *>(sipCppV);
}


extern "C" {static void assign_QSGRendererInterface_ShaderSourceTypes(void *, SIP_SSIZE_T, void *);}
static void assign_QSGRendererInterface_ShaderSourceTypes(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QSGRendererInterface::ShaderSourceTypes *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QSGRendererInterface::ShaderSourceTypes *>(sipSrc);
}


extern "C" {static void *array_QSGRendererInterface_ShaderSourceTypes(SIP_SSIZE_T);}
static void *array_QSGRendererInterface_ShaderSourceTypes(SIP_SSIZE_T sipNrElem)
{
    return new  ::QSGRendererInterface::ShaderSourceTypes[sipNrElem];
}


extern "C" {static void *copy_QSGRendererInterface_ShaderSourceTypes(const void *, SIP_SSIZE_T);}
static void *copy_QSGRendererInterface_ShaderSourceTypes(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QSGRendererInterface::ShaderSourceTypes(reinterpret_cast<const  ::QSGRendererInterface::ShaderSourceTypes *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSGRendererInterface_ShaderSourceTypes(sipSimpleWrapper *);}
static void dealloc_QSGRendererInterface_ShaderSourceTypes(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGRendererInterface_ShaderSourceTypes(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QSGRendererInterface_ShaderSourceTypes(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGRendererInterface_ShaderSourceTypes(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QSGRendererInterface::ShaderSourceTypes *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QSGRendererInterface::ShaderSourceTypes();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QSGRendererInterface::ShaderSourceTypes(a0);

            return sipCpp;
        }
    }

    {
        const  ::QSGRendererInterface::ShaderSourceTypes* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QSGRendererInterface_ShaderSourceTypes, &a0, &a0State))
        {
            sipCpp = new  ::QSGRendererInterface::ShaderSourceTypes(*a0);
            sipReleaseType(const_cast< ::QSGRendererInterface::ShaderSourceTypes *>(a0),sipType_QSGRendererInterface_ShaderSourceTypes,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QSGRendererInterface_ShaderSourceTypes(PyObject *, void **, int *, PyObject *);}
static int convertTo_QSGRendererInterface_ShaderSourceTypes(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QSGRendererInterface::ShaderSourceTypes **sipCppPtr = reinterpret_cast< ::QSGRendererInterface::ShaderSourceTypes **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QSGRendererInterface::ShaderSourceTypes is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QSGRendererInterface_ShaderSourceType)) ||
            sipCanConvertToType(sipPy, sipType_QSGRendererInterface_ShaderSourceTypes, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QSGRendererInterface_ShaderSourceType)))
{
    *sipCppPtr = new QSGRendererInterface::ShaderSourceTypes(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QSGRendererInterface::ShaderSourceTypes *>(sipConvertToType(sipPy, sipType_QSGRendererInterface_ShaderSourceTypes, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 10332 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QSGRendererInterface_ShaderSourceTypes[] = {
    {(void *)slot_QSGRendererInterface_ShaderSourceTypes___hash__, hash_slot},
    {(void *)slot_QSGRendererInterface_ShaderSourceTypes___bool__, bool_slot},
    {(void *)slot_QSGRendererInterface_ShaderSourceTypes___ne__, ne_slot},
    {(void *)slot_QSGRendererInterface_ShaderSourceTypes___eq__, eq_slot},
    {(void *)slot_QSGRendererInterface_ShaderSourceTypes___ixor__, ixor_slot},
    {(void *)slot_QSGRendererInterface_ShaderSourceTypes___xor__, xor_slot},
    {(void *)slot_QSGRendererInterface_ShaderSourceTypes___ior__, ior_slot},
    {(void *)slot_QSGRendererInterface_ShaderSourceTypes___or__, or_slot},
    {(void *)slot_QSGRendererInterface_ShaderSourceTypes___iand__, iand_slot},
    {(void *)slot_QSGRendererInterface_ShaderSourceTypes___and__, and_slot},
    {(void *)slot_QSGRendererInterface_ShaderSourceTypes___invert__, invert_slot},
    {(void *)slot_QSGRendererInterface_ShaderSourceTypes___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QSGRendererInterface_ShaderSourceTypes, "\1QSGRendererInterface.ShaderSourceTypes()\n"
"QSGRendererInterface.ShaderSourceTypes(Union[QSGRendererInterface.ShaderSourceTypes, QSGRendererInterface.ShaderSourceType])\n"
"QSGRendererInterface.ShaderSourceTypes(QSGRendererInterface.ShaderSourceTypes)");


static pyqt5ClassPluginDef plugin_QSGRendererInterface_ShaderSourceTypes = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGRendererInterface_ShaderSourceTypes = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGRendererInterface__ShaderSourceTypes,
        {SIP_NULLPTR},
        &plugin_QSGRendererInterface_ShaderSourceTypes
    },
    {
        sipNameNr_ShaderSourceTypes,
        {78, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSGRendererInterface_ShaderSourceTypes,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QSGRendererInterface_ShaderSourceTypes,
    init_type_QSGRendererInterface_ShaderSourceTypes,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGRendererInterface_ShaderSourceTypes,
    assign_QSGRendererInterface_ShaderSourceTypes,
    array_QSGRendererInterface_ShaderSourceTypes,
    copy_QSGRendererInterface_ShaderSourceTypes,
    release_QSGRendererInterface_ShaderSourceTypes,
    SIP_NULLPTR,
    convertTo_QSGRendererInterface_ShaderSourceTypes,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgrendererinterface.sip"
#include <qsgrendererinterface.h>
#line 10420 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgrendererinterface.sip"
#include <qsgrendererinterface.h>
#line 10424 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"


extern "C" {static long slot_QSGRendererInterface_ShaderCompilationTypes___hash__(PyObject *);}
static long slot_QSGRendererInterface_ShaderCompilationTypes___hash__(PyObject *sipSelf)
{
     ::QSGRendererInterface::ShaderCompilationTypes *sipCpp = reinterpret_cast< ::QSGRendererInterface::ShaderCompilationTypes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGRendererInterface_ShaderCompilationTypes));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QSGRendererInterface::ShaderCompilationTypes::Int();
#line 10442 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QSGRendererInterface_ShaderCompilationTypes___bool__(PyObject *);}
static int slot_QSGRendererInterface_ShaderCompilationTypes___bool__(PyObject *sipSelf)
{
     ::QSGRendererInterface::ShaderCompilationTypes *sipCpp = reinterpret_cast< ::QSGRendererInterface::ShaderCompilationTypes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGRendererInterface_ShaderCompilationTypes));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QSGRendererInterface::ShaderCompilationTypes::Int() != 0);
#line 10467 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QSGRendererInterface_ShaderCompilationTypes___ne__(PyObject *,PyObject *);}
static PyObject *slot_QSGRendererInterface_ShaderCompilationTypes___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSGRendererInterface::ShaderCompilationTypes *sipCpp = reinterpret_cast< ::QSGRendererInterface::ShaderCompilationTypes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGRendererInterface_ShaderCompilationTypes));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGRendererInterface::ShaderCompilationTypes* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QSGRendererInterface_ShaderCompilationTypes, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QSGRendererInterface::ShaderCompilationTypes::Int() != a0->operator QSGRendererInterface::ShaderCompilationTypes::Int());
#line 10497 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
            sipReleaseType(const_cast< ::QSGRendererInterface::ShaderCompilationTypes *>(a0),sipType_QSGRendererInterface_ShaderCompilationTypes,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, ne_slot, sipType_QSGRendererInterface_ShaderCompilationTypes, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QSGRendererInterface_ShaderCompilationTypes___eq__(PyObject *,PyObject *);}
static PyObject *slot_QSGRendererInterface_ShaderCompilationTypes___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSGRendererInterface::ShaderCompilationTypes *sipCpp = reinterpret_cast< ::QSGRendererInterface::ShaderCompilationTypes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGRendererInterface_ShaderCompilationTypes));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGRendererInterface::ShaderCompilationTypes* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QSGRendererInterface_ShaderCompilationTypes, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QSGRendererInterface::ShaderCompilationTypes::Int() == a0->operator QSGRendererInterface::ShaderCompilationTypes::Int());
#line 10533 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
            sipReleaseType(const_cast< ::QSGRendererInterface::ShaderCompilationTypes *>(a0),sipType_QSGRendererInterface_ShaderCompilationTypes,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, eq_slot, sipType_QSGRendererInterface_ShaderCompilationTypes, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QSGRendererInterface_ShaderCompilationTypes___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QSGRendererInterface_ShaderCompilationTypes___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSGRendererInterface_ShaderCompilationTypes)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSGRendererInterface::ShaderCompilationTypes *sipCpp = reinterpret_cast< ::QSGRendererInterface::ShaderCompilationTypes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGRendererInterface_ShaderCompilationTypes));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QSGRendererInterface::ShaderCompilationTypes(*sipCpp ^ a0);
#line 10572 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSGRendererInterface_ShaderCompilationTypes___xor__(PyObject *,PyObject *);}
static PyObject *slot_QSGRendererInterface_ShaderCompilationTypes___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGRendererInterface::ShaderCompilationTypes* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QSGRendererInterface_ShaderCompilationTypes, &a0, &a0State, &a1))
        {
             ::QSGRendererInterface::ShaderCompilationTypes*sipRes;

            sipRes = new  ::QSGRendererInterface::ShaderCompilationTypes((*a0 ^ a1));
            sipReleaseType(a0,sipType_QSGRendererInterface_ShaderCompilationTypes,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSGRendererInterface_ShaderCompilationTypes,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSGRendererInterface_ShaderCompilationTypes___ior__(PyObject *,PyObject *);}
static PyObject *slot_QSGRendererInterface_ShaderCompilationTypes___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSGRendererInterface_ShaderCompilationTypes)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSGRendererInterface::ShaderCompilationTypes *sipCpp = reinterpret_cast< ::QSGRendererInterface::ShaderCompilationTypes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGRendererInterface_ShaderCompilationTypes));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QSGRendererInterface::ShaderCompilationTypes(*sipCpp | a0);
#line 10644 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSGRendererInterface_ShaderCompilationTypes___or__(PyObject *,PyObject *);}
static PyObject *slot_QSGRendererInterface_ShaderCompilationTypes___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGRendererInterface::ShaderCompilationTypes* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QSGRendererInterface_ShaderCompilationTypes, &a0, &a0State, &a1))
        {
             ::QSGRendererInterface::ShaderCompilationTypes*sipRes;

            sipRes = new  ::QSGRendererInterface::ShaderCompilationTypes((*a0 | a1));
            sipReleaseType(a0,sipType_QSGRendererInterface_ShaderCompilationTypes,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSGRendererInterface_ShaderCompilationTypes,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSGRendererInterface_ShaderCompilationTypes___iand__(PyObject *,PyObject *);}
static PyObject *slot_QSGRendererInterface_ShaderCompilationTypes___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSGRendererInterface_ShaderCompilationTypes)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSGRendererInterface::ShaderCompilationTypes *sipCpp = reinterpret_cast< ::QSGRendererInterface::ShaderCompilationTypes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGRendererInterface_ShaderCompilationTypes));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QSGRendererInterface::ShaderCompilationTypes::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSGRendererInterface_ShaderCompilationTypes___and__(PyObject *,PyObject *);}
static PyObject *slot_QSGRendererInterface_ShaderCompilationTypes___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGRendererInterface::ShaderCompilationTypes* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QSGRendererInterface_ShaderCompilationTypes, &a0, &a0State, &a1))
        {
             ::QSGRendererInterface::ShaderCompilationTypes*sipRes;

            sipRes = new  ::QSGRendererInterface::ShaderCompilationTypes((*a0 & a1));
            sipReleaseType(a0,sipType_QSGRendererInterface_ShaderCompilationTypes,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSGRendererInterface_ShaderCompilationTypes,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSGRendererInterface_ShaderCompilationTypes___invert__(PyObject *);}
static PyObject *slot_QSGRendererInterface_ShaderCompilationTypes___invert__(PyObject *sipSelf)
{
     ::QSGRendererInterface::ShaderCompilationTypes *sipCpp = reinterpret_cast< ::QSGRendererInterface::ShaderCompilationTypes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGRendererInterface_ShaderCompilationTypes));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QSGRendererInterface::ShaderCompilationTypes*sipRes;

            sipRes = new  ::QSGRendererInterface::ShaderCompilationTypes(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QSGRendererInterface_ShaderCompilationTypes,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QSGRendererInterface_ShaderCompilationTypes___int__(PyObject *);}
static PyObject *slot_QSGRendererInterface_ShaderCompilationTypes___int__(PyObject *sipSelf)
{
     ::QSGRendererInterface::ShaderCompilationTypes *sipCpp = reinterpret_cast< ::QSGRendererInterface::ShaderCompilationTypes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGRendererInterface_ShaderCompilationTypes));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGRendererInterface_ShaderCompilationTypes(void *, int);}
static void release_QSGRendererInterface_ShaderCompilationTypes(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSGRendererInterface::ShaderCompilationTypes *>(sipCppV);
}


extern "C" {static void assign_QSGRendererInterface_ShaderCompilationTypes(void *, SIP_SSIZE_T, void *);}
static void assign_QSGRendererInterface_ShaderCompilationTypes(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QSGRendererInterface::ShaderCompilationTypes *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QSGRendererInterface::ShaderCompilationTypes *>(sipSrc);
}


extern "C" {static void *array_QSGRendererInterface_ShaderCompilationTypes(SIP_SSIZE_T);}
static void *array_QSGRendererInterface_ShaderCompilationTypes(SIP_SSIZE_T sipNrElem)
{
    return new  ::QSGRendererInterface::ShaderCompilationTypes[sipNrElem];
}


extern "C" {static void *copy_QSGRendererInterface_ShaderCompilationTypes(const void *, SIP_SSIZE_T);}
static void *copy_QSGRendererInterface_ShaderCompilationTypes(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QSGRendererInterface::ShaderCompilationTypes(reinterpret_cast<const  ::QSGRendererInterface::ShaderCompilationTypes *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSGRendererInterface_ShaderCompilationTypes(sipSimpleWrapper *);}
static void dealloc_QSGRendererInterface_ShaderCompilationTypes(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGRendererInterface_ShaderCompilationTypes(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QSGRendererInterface_ShaderCompilationTypes(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGRendererInterface_ShaderCompilationTypes(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QSGRendererInterface::ShaderCompilationTypes *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QSGRendererInterface::ShaderCompilationTypes();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QSGRendererInterface::ShaderCompilationTypes(a0);

            return sipCpp;
        }
    }

    {
        const  ::QSGRendererInterface::ShaderCompilationTypes* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QSGRendererInterface_ShaderCompilationTypes, &a0, &a0State))
        {
            sipCpp = new  ::QSGRendererInterface::ShaderCompilationTypes(*a0);
            sipReleaseType(const_cast< ::QSGRendererInterface::ShaderCompilationTypes *>(a0),sipType_QSGRendererInterface_ShaderCompilationTypes,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QSGRendererInterface_ShaderCompilationTypes(PyObject *, void **, int *, PyObject *);}
static int convertTo_QSGRendererInterface_ShaderCompilationTypes(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QSGRendererInterface::ShaderCompilationTypes **sipCppPtr = reinterpret_cast< ::QSGRendererInterface::ShaderCompilationTypes **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QSGRendererInterface::ShaderCompilationTypes is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QSGRendererInterface_ShaderCompilationType)) ||
            sipCanConvertToType(sipPy, sipType_QSGRendererInterface_ShaderCompilationTypes, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QSGRendererInterface_ShaderCompilationType)))
{
    *sipCppPtr = new QSGRendererInterface::ShaderCompilationTypes(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QSGRendererInterface::ShaderCompilationTypes *>(sipConvertToType(sipPy, sipType_QSGRendererInterface_ShaderCompilationTypes, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 10912 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QSGRendererInterface_ShaderCompilationTypes[] = {
    {(void *)slot_QSGRendererInterface_ShaderCompilationTypes___hash__, hash_slot},
    {(void *)slot_QSGRendererInterface_ShaderCompilationTypes___bool__, bool_slot},
    {(void *)slot_QSGRendererInterface_ShaderCompilationTypes___ne__, ne_slot},
    {(void *)slot_QSGRendererInterface_ShaderCompilationTypes___eq__, eq_slot},
    {(void *)slot_QSGRendererInterface_ShaderCompilationTypes___ixor__, ixor_slot},
    {(void *)slot_QSGRendererInterface_ShaderCompilationTypes___xor__, xor_slot},
    {(void *)slot_QSGRendererInterface_ShaderCompilationTypes___ior__, ior_slot},
    {(void *)slot_QSGRendererInterface_ShaderCompilationTypes___or__, or_slot},
    {(void *)slot_QSGRendererInterface_ShaderCompilationTypes___iand__, iand_slot},
    {(void *)slot_QSGRendererInterface_ShaderCompilationTypes___and__, and_slot},
    {(void *)slot_QSGRendererInterface_ShaderCompilationTypes___invert__, invert_slot},
    {(void *)slot_QSGRendererInterface_ShaderCompilationTypes___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QSGRendererInterface_ShaderCompilationTypes, "\1QSGRendererInterface.ShaderCompilationTypes()\n"
"QSGRendererInterface.ShaderCompilationTypes(Union[QSGRendererInterface.ShaderCompilationTypes, QSGRendererInterface.ShaderCompilationType])\n"
"QSGRendererInterface.ShaderCompilationTypes(QSGRendererInterface.ShaderCompilationTypes)");


static pyqt5ClassPluginDef plugin_QSGRendererInterface_ShaderCompilationTypes = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGRendererInterface_ShaderCompilationTypes = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGRendererInterface__ShaderCompilationTypes,
        {SIP_NULLPTR},
        &plugin_QSGRendererInterface_ShaderCompilationTypes
    },
    {
        sipNameNr_ShaderCompilationTypes,
        {78, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSGRendererInterface_ShaderCompilationTypes,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QSGRendererInterface_ShaderCompilationTypes,
    init_type_QSGRendererInterface_ShaderCompilationTypes,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGRendererInterface_ShaderCompilationTypes,
    assign_QSGRendererInterface_ShaderCompilationTypes,
    array_QSGRendererInterface_ShaderCompilationTypes,
    copy_QSGRendererInterface_ShaderCompilationTypes,
    release_QSGRendererInterface_ShaderCompilationTypes,
    SIP_NULLPTR,
    convertTo_QSGRendererInterface_ShaderCompilationTypes,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgrendererinterface.sip"
#include <qsgrendererinterface.h>
#line 11000 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgrendererinterface.sip"
#include <qsgrendererinterface.h>
#line 11004 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgrendererinterface.sip"
#include <qsgrendererinterface.h>
#line 11007 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qquickwindow.sip"
#include <qquickwindow.h>
#line 11010 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"


PyDoc_STRVAR(doc_QSGRendererInterface_graphicsApi, "graphicsApi(self) -> QSGRendererInterface.GraphicsApi");

extern "C" {static PyObject *meth_QSGRendererInterface_graphicsApi(PyObject *, PyObject *);}
static PyObject *meth_QSGRendererInterface_graphicsApi(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QSGRendererInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGRendererInterface, &sipCpp))
        {
             ::QSGRendererInterface::GraphicsApi sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSGRendererInterface, sipName_graphicsApi);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->graphicsApi();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSGRendererInterface_GraphicsApi);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGRendererInterface, sipName_graphicsApi, doc_QSGRendererInterface_graphicsApi);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGRendererInterface_getResource, "getResource(self, QQuickWindow, QSGRendererInterface.Resource) -> sip.voidptr\n"
"getResource(self, QQuickWindow, str) -> sip.voidptr");

extern "C" {static PyObject *meth_QSGRendererInterface_getResource(PyObject *, PyObject *);}
static PyObject *meth_QSGRendererInterface_getResource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QQuickWindow* a0;
         ::QSGRendererInterface::Resource a1;
        const  ::QSGRendererInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8E", &sipSelf, sipType_QSGRendererInterface, &sipCpp, sipType_QQuickWindow, &a0, sipType_QSGRendererInterface_Resource, &a1))
        {
            void*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSGRendererInterface::getResource(a0,a1) : sipCpp->getResource(a0,a1));

            return sipConvertFromVoidPtr(sipRes);
        }
    }

    {
         ::QQuickWindow* a0;
        const char* a1;
        PyObject *a1Keep;
        const  ::QSGRendererInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8AA", &sipSelf, sipType_QSGRendererInterface, &sipCpp, sipType_QQuickWindow, &a0, &a1Keep, &a1))
        {
            void*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSGRendererInterface::getResource(a0,a1) : sipCpp->getResource(a0,a1));
            Py_DECREF(a1Keep);

            return sipConvertFromVoidPtr(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGRendererInterface, sipName_getResource, doc_QSGRendererInterface_getResource);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGRendererInterface_shaderType, "shaderType(self) -> QSGRendererInterface.ShaderType");

extern "C" {static PyObject *meth_QSGRendererInterface_shaderType(PyObject *, PyObject *);}
static PyObject *meth_QSGRendererInterface_shaderType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QSGRendererInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGRendererInterface, &sipCpp))
        {
             ::QSGRendererInterface::ShaderType sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSGRendererInterface, sipName_shaderType);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->shaderType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSGRendererInterface_ShaderType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGRendererInterface, sipName_shaderType, doc_QSGRendererInterface_shaderType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGRendererInterface_shaderCompilationType, "shaderCompilationType(self) -> QSGRendererInterface.ShaderCompilationTypes");

extern "C" {static PyObject *meth_QSGRendererInterface_shaderCompilationType(PyObject *, PyObject *);}
static PyObject *meth_QSGRendererInterface_shaderCompilationType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QSGRendererInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGRendererInterface, &sipCpp))
        {
             ::QSGRendererInterface::ShaderCompilationTypes*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSGRendererInterface, sipName_shaderCompilationType);
                return SIP_NULLPTR;
            }

            sipRes = new  ::QSGRendererInterface::ShaderCompilationTypes(sipCpp->shaderCompilationType());

            return sipConvertFromNewType(sipRes,sipType_QSGRendererInterface_ShaderCompilationTypes,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGRendererInterface, sipName_shaderCompilationType, doc_QSGRendererInterface_shaderCompilationType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGRendererInterface_shaderSourceType, "shaderSourceType(self) -> QSGRendererInterface.ShaderSourceTypes");

extern "C" {static PyObject *meth_QSGRendererInterface_shaderSourceType(PyObject *, PyObject *);}
static PyObject *meth_QSGRendererInterface_shaderSourceType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QSGRendererInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGRendererInterface, &sipCpp))
        {
             ::QSGRendererInterface::ShaderSourceTypes*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSGRendererInterface, sipName_shaderSourceType);
                return SIP_NULLPTR;
            }

            sipRes = new  ::QSGRendererInterface::ShaderSourceTypes(sipCpp->shaderSourceType());

            return sipConvertFromNewType(sipRes,sipType_QSGRendererInterface_ShaderSourceTypes,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGRendererInterface, sipName_shaderSourceType, doc_QSGRendererInterface_shaderSourceType);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGRendererInterface(void *, int);}
static void release_QSGRendererInterface(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSGRendererInterface *>(sipCppV);
}


extern "C" {static void dealloc_QSGRendererInterface(sipSimpleWrapper *);}
static void dealloc_QSGRendererInterface(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGRendererInterface(sipGetAddress(sipSelf), 0);
    }
}


static PyMethodDef methods_QSGRendererInterface[] = {
    {SIP_MLNAME_CAST(sipName_getResource), meth_QSGRendererInterface_getResource, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGRendererInterface_getResource)},
    {SIP_MLNAME_CAST(sipName_graphicsApi), meth_QSGRendererInterface_graphicsApi, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGRendererInterface_graphicsApi)},
    {SIP_MLNAME_CAST(sipName_shaderCompilationType), meth_QSGRendererInterface_shaderCompilationType, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGRendererInterface_shaderCompilationType)},
    {SIP_MLNAME_CAST(sipName_shaderSourceType), meth_QSGRendererInterface_shaderSourceType, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGRendererInterface_shaderSourceType)},
    {SIP_MLNAME_CAST(sipName_shaderType), meth_QSGRendererInterface_shaderType, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGRendererInterface_shaderType)}
};

static sipEnumMemberDef enummembers_QSGRendererInterface[] = {
    {sipName_CommandListResource, static_cast<int>( ::QSGRendererInterface::CommandListResource), 80},
    {sipName_CommandQueueResource, static_cast<int>( ::QSGRendererInterface::CommandQueueResource), 80},
    {sipName_DeviceResource, static_cast<int>( ::QSGRendererInterface::DeviceResource), 80},
    {sipName_Direct3D12, static_cast<int>( ::QSGRendererInterface::Direct3D12), 79},
    {sipName_GLSL, static_cast<int>( ::QSGRendererInterface::GLSL), 85},
    {sipName_HLSL, static_cast<int>( ::QSGRendererInterface::HLSL), 85},
    {sipName_OfflineCompilation, static_cast<int>( ::QSGRendererInterface::OfflineCompilation), 81},
    {sipName_OpenGL, static_cast<int>( ::QSGRendererInterface::OpenGL), 79},
    {sipName_OpenVG, static_cast<int>( ::QSGRendererInterface::OpenVG), 79},
    {sipName_PainterResource, static_cast<int>( ::QSGRendererInterface::PainterResource), 80},
    {sipName_RuntimeCompilation, static_cast<int>( ::QSGRendererInterface::RuntimeCompilation), 81},
    {sipName_ShaderByteCode, static_cast<int>( ::QSGRendererInterface::ShaderByteCode), 83},
    {sipName_ShaderSourceFile, static_cast<int>( ::QSGRendererInterface::ShaderSourceFile), 83},
    {sipName_ShaderSourceString, static_cast<int>( ::QSGRendererInterface::ShaderSourceString), 83},
    {sipName_Software, static_cast<int>( ::QSGRendererInterface::Software), 79},
    {sipName_Unknown, static_cast<int>( ::QSGRendererInterface::Unknown), 79},
    {sipName_UnknownShadingLanguage, static_cast<int>( ::QSGRendererInterface::UnknownShadingLanguage), 85},
};


static pyqt5ClassPluginDef plugin_QSGRendererInterface = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGRendererInterface = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGRendererInterface,
        {SIP_NULLPTR},
        &plugin_QSGRendererInterface
    },
    {
        sipNameNr_QSGRendererInterface,
        {0, 0, 1},
        5, methods_QSGRendererInterface,
        17, enummembers_QSGRendererInterface,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGRendererInterface,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSGRendererInterface,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgrectanglenode.sip"
#include <qsgrectanglenode.h>
#line 11309 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

#line 26 "sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 11313 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 11316 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 165 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 11319 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
#include <qsggeometry.h>
#line 11322 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 11325 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 11328 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 11331 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"


PyDoc_STRVAR(doc_QSGRectangleNode_setRect, "setRect(self, QRectF)\n"
"setRect(self, float, float, float, float)");

extern "C" {static PyObject *meth_QSGRectangleNode_setRect(PyObject *, PyObject *);}
static PyObject *meth_QSGRectangleNode_setRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QRectF* a0;
         ::QSGRectangleNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSGRectangleNode, &sipCpp, sipType_QRectF, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSGRectangleNode, sipName_setRect);
                return SIP_NULLPTR;
            }

            sipCpp->setRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
         ::QSGRectangleNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_QSGRectangleNode, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setRect(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGRectangleNode, sipName_setRect, doc_QSGRectangleNode_setRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGRectangleNode_rect, "rect(self) -> QRectF");

extern "C" {static PyObject *meth_QSGRectangleNode_rect(PyObject *, PyObject *);}
static PyObject *meth_QSGRectangleNode_rect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QSGRectangleNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGRectangleNode, &sipCpp))
        {
             ::QRectF*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSGRectangleNode, sipName_rect);
                return SIP_NULLPTR;
            }

            sipRes = new  ::QRectF(sipCpp->rect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGRectangleNode, sipName_rect, doc_QSGRectangleNode_rect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGRectangleNode_setColor, "setColor(self, Union[QColor, Qt.GlobalColor])");

extern "C" {static PyObject *meth_QSGRectangleNode_setColor(PyObject *, PyObject *);}
static PyObject *meth_QSGRectangleNode_setColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QColor* a0;
        int a0State = 0;
         ::QSGRectangleNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSGRectangleNode, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSGRectangleNode, sipName_setColor);
                return SIP_NULLPTR;
            }

            sipCpp->setColor(*a0);
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGRectangleNode, sipName_setColor, doc_QSGRectangleNode_setColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGRectangleNode_color, "color(self) -> QColor");

extern "C" {static PyObject *meth_QSGRectangleNode_color(PyObject *, PyObject *);}
static PyObject *meth_QSGRectangleNode_color(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QSGRectangleNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGRectangleNode, &sipCpp))
        {
             ::QColor*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSGRectangleNode, sipName_color);
                return SIP_NULLPTR;
            }

            sipRes = new  ::QColor(sipCpp->color());

            return sipConvertFromNewType(sipRes,sipType_QColor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGRectangleNode, sipName_color, doc_QSGRectangleNode_color);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSGRectangleNode(void *, const sipTypeDef *);}
static void *cast_QSGRectangleNode(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSGRectangleNode *sipCpp = reinterpret_cast< ::QSGRectangleNode *>(sipCppV);

    if (targetType == sipType_QSGGeometryNode)
        return static_cast< ::QSGGeometryNode *>(sipCpp);

    if (targetType == sipType_QSGBasicGeometryNode)
        return static_cast< ::QSGBasicGeometryNode *>(sipCpp);

    if (targetType == sipType_QSGNode)
        return static_cast< ::QSGNode *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGRectangleNode(void *, int);}
static void release_QSGRectangleNode(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSGRectangleNode *>(sipCppV);
}


extern "C" {static void dealloc_QSGRectangleNode(sipSimpleWrapper *);}
static void dealloc_QSGRectangleNode(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGRectangleNode(sipGetAddress(sipSelf), 0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSGRectangleNode[] = {{51, 255, 1}};


static PyMethodDef methods_QSGRectangleNode[] = {
    {SIP_MLNAME_CAST(sipName_color), meth_QSGRectangleNode_color, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGRectangleNode_color)},
    {SIP_MLNAME_CAST(sipName_rect), meth_QSGRectangleNode_rect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGRectangleNode_rect)},
    {SIP_MLNAME_CAST(sipName_setColor), meth_QSGRectangleNode_setColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGRectangleNode_setColor)},
    {SIP_MLNAME_CAST(sipName_setRect), meth_QSGRectangleNode_setRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGRectangleNode_setRect)}
};


static pyqt5ClassPluginDef plugin_QSGRectangleNode = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGRectangleNode = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGRectangleNode,
        {SIP_NULLPTR},
        &plugin_QSGRectangleNode
    },
    {
        sipNameNr_QSGRectangleNode,
        {0, 0, 1},
        4, methods_QSGRectangleNode,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_QSGRectangleNode,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGRectangleNode,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSGRectangleNode,
    cast_QSGRectangleNode,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 324 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 11602 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 11606 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 11609 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 11612 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"


class sipQSGOpacityNode : public  ::QSGOpacityNode
{
public:
    sipQSGOpacityNode();
    virtual ~sipQSGOpacityNode();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool isSubtreeBlocked() const SIP_OVERRIDE;
    void preprocess() SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSGOpacityNode(const sipQSGOpacityNode &);
    sipQSGOpacityNode &operator = (const sipQSGOpacityNode &);

    char sipPyMethods[2];
};

sipQSGOpacityNode::sipQSGOpacityNode():  ::QSGOpacityNode(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSGOpacityNode::~sipQSGOpacityNode()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

bool sipQSGOpacityNode::isSubtreeBlocked() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_isSubtreeBlocked);

    if (!sipMeth)
        return  ::QSGOpacityNode::isSubtreeBlocked();

    extern bool sipVH_QtQuick_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_9(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQSGOpacityNode::preprocess()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_preprocess);

    if (!sipMeth)
    {
         ::QSGOpacityNode::preprocess();
        return;
    }

    extern void sipVH_QtQuick_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtQuick_6(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QSGOpacityNode_setOpacity, "setOpacity(self, float)");

extern "C" {static PyObject *meth_QSGOpacityNode_setOpacity(PyObject *, PyObject *);}
static PyObject *meth_QSGOpacityNode_setOpacity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QSGOpacityNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QSGOpacityNode, &sipCpp, &a0))
        {
            sipCpp->setOpacity(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGOpacityNode, sipName_setOpacity, doc_QSGOpacityNode_setOpacity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGOpacityNode_opacity, "opacity(self) -> float");

extern "C" {static PyObject *meth_QSGOpacityNode_opacity(PyObject *, PyObject *);}
static PyObject *meth_QSGOpacityNode_opacity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGOpacityNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGOpacityNode, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->opacity();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGOpacityNode, sipName_opacity, doc_QSGOpacityNode_opacity);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSGOpacityNode(void *, const sipTypeDef *);}
static void *cast_QSGOpacityNode(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSGOpacityNode *sipCpp = reinterpret_cast< ::QSGOpacityNode *>(sipCppV);

    if (targetType == sipType_QSGNode)
        return static_cast< ::QSGNode *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGOpacityNode(void *, int);}
static void release_QSGOpacityNode(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQSGOpacityNode *>(sipCppV);
    else
        delete reinterpret_cast< ::QSGOpacityNode *>(sipCppV);
}


extern "C" {static void dealloc_QSGOpacityNode(sipSimpleWrapper *);}
static void dealloc_QSGOpacityNode(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSGOpacityNode *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGOpacityNode(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSGOpacityNode(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGOpacityNode(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQSGOpacityNode *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQSGOpacityNode();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSGOpacityNode[] = {{63, 255, 1}};


static PyMethodDef methods_QSGOpacityNode[] = {
    {SIP_MLNAME_CAST(sipName_opacity), meth_QSGOpacityNode_opacity, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGOpacityNode_opacity)},
    {SIP_MLNAME_CAST(sipName_setOpacity), meth_QSGOpacityNode_setOpacity, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGOpacityNode_setOpacity)}
};

PyDoc_STRVAR(doc_QSGOpacityNode, "\1QSGOpacityNode()");


static pyqt5ClassPluginDef plugin_QSGOpacityNode = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGOpacityNode = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGOpacityNode,
        {SIP_NULLPTR},
        &plugin_QSGOpacityNode
    },
    {
        sipNameNr_QSGOpacityNode,
        {0, 0, 1},
        2, methods_QSGOpacityNode,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSGOpacityNode,
    -1,
    -1,
    supers_QSGOpacityNode,
    SIP_NULLPTR,
    init_type_QSGOpacityNode,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGOpacityNode,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSGOpacityNode,
    cast_QSGOpacityNode,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 311 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 11868 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

#line 30 "sip/QtGui/qmatrix4x4.sip"
#include <qmatrix4x4.h>
#line 11872 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 11875 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 11878 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 11881 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"


class sipQSGTransformNode : public  ::QSGTransformNode
{
public:
    sipQSGTransformNode();
    virtual ~sipQSGTransformNode();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool isSubtreeBlocked() const SIP_OVERRIDE;
    void preprocess() SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSGTransformNode(const sipQSGTransformNode &);
    sipQSGTransformNode &operator = (const sipQSGTransformNode &);

    char sipPyMethods[2];
};

sipQSGTransformNode::sipQSGTransformNode():  ::QSGTransformNode(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSGTransformNode::~sipQSGTransformNode()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

bool sipQSGTransformNode::isSubtreeBlocked() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_isSubtreeBlocked);

    if (!sipMeth)
        return  ::QSGTransformNode::isSubtreeBlocked();

    extern bool sipVH_QtQuick_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_9(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQSGTransformNode::preprocess()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_preprocess);

    if (!sipMeth)
    {
         ::QSGTransformNode::preprocess();
        return;
    }

    extern void sipVH_QtQuick_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtQuick_6(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QSGTransformNode_setMatrix, "setMatrix(self, QMatrix4x4)");

extern "C" {static PyObject *meth_QSGTransformNode_setMatrix(PyObject *, PyObject *);}
static PyObject *meth_QSGTransformNode_setMatrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMatrix4x4* a0;
         ::QSGTransformNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSGTransformNode, &sipCpp, sipType_QMatrix4x4, &a0))
        {
            sipCpp->setMatrix(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGTransformNode, sipName_setMatrix, doc_QSGTransformNode_setMatrix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGTransformNode_matrix, "matrix(self) -> QMatrix4x4");

extern "C" {static PyObject *meth_QSGTransformNode_matrix(PyObject *, PyObject *);}
static PyObject *meth_QSGTransformNode_matrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGTransformNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGTransformNode, &sipCpp))
        {
             ::QMatrix4x4*sipRes;

            sipRes = new  ::QMatrix4x4(sipCpp->matrix());

            return sipConvertFromNewType(sipRes,sipType_QMatrix4x4,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGTransformNode, sipName_matrix, doc_QSGTransformNode_matrix);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSGTransformNode(void *, const sipTypeDef *);}
static void *cast_QSGTransformNode(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSGTransformNode *sipCpp = reinterpret_cast< ::QSGTransformNode *>(sipCppV);

    if (targetType == sipType_QSGNode)
        return static_cast< ::QSGNode *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGTransformNode(void *, int);}
static void release_QSGTransformNode(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQSGTransformNode *>(sipCppV);
    else
        delete reinterpret_cast< ::QSGTransformNode *>(sipCppV);
}


extern "C" {static void dealloc_QSGTransformNode(sipSimpleWrapper *);}
static void dealloc_QSGTransformNode(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSGTransformNode *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGTransformNode(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSGTransformNode(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGTransformNode(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQSGTransformNode *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQSGTransformNode();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSGTransformNode[] = {{63, 255, 1}};


static PyMethodDef methods_QSGTransformNode[] = {
    {SIP_MLNAME_CAST(sipName_matrix), meth_QSGTransformNode_matrix, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGTransformNode_matrix)},
    {SIP_MLNAME_CAST(sipName_setMatrix), meth_QSGTransformNode_setMatrix, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGTransformNode_setMatrix)}
};

PyDoc_STRVAR(doc_QSGTransformNode, "\1QSGTransformNode()");


static pyqt5ClassPluginDef plugin_QSGTransformNode = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGTransformNode = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGTransformNode,
        {SIP_NULLPTR},
        &plugin_QSGTransformNode
    },
    {
        sipNameNr_QSGTransformNode,
        {0, 0, 1},
        2, methods_QSGTransformNode,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSGTransformNode,
    -1,
    -1,
    supers_QSGTransformNode,
    SIP_NULLPTR,
    init_type_QSGTransformNode,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGTransformNode,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSGTransformNode,
    cast_QSGTransformNode,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 296 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 12137 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 12141 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
#include <qsggeometry.h>
#line 12144 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 12147 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 12150 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 12153 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"


class sipQSGClipNode : public  ::QSGClipNode
{
public:
    sipQSGClipNode();
    virtual ~sipQSGClipNode();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void preprocess() SIP_OVERRIDE;
    bool isSubtreeBlocked() const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSGClipNode(const sipQSGClipNode &);
    sipQSGClipNode &operator = (const sipQSGClipNode &);

    char sipPyMethods[2];
};

sipQSGClipNode::sipQSGClipNode():  ::QSGClipNode(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSGClipNode::~sipQSGClipNode()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

void sipQSGClipNode::preprocess()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_preprocess);

    if (!sipMeth)
    {
         ::QSGClipNode::preprocess();
        return;
    }

    extern void sipVH_QtQuick_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtQuick_6(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQSGClipNode::isSubtreeBlocked() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_isSubtreeBlocked);

    if (!sipMeth)
        return  ::QSGClipNode::isSubtreeBlocked();

    extern bool sipVH_QtQuick_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_9(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QSGClipNode_setIsRectangular, "setIsRectangular(self, bool)");

extern "C" {static PyObject *meth_QSGClipNode_setIsRectangular(PyObject *, PyObject *);}
static PyObject *meth_QSGClipNode_setIsRectangular(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QSGClipNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QSGClipNode, &sipCpp, &a0))
        {
            sipCpp->setIsRectangular(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGClipNode, sipName_setIsRectangular, doc_QSGClipNode_setIsRectangular);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGClipNode_isRectangular, "isRectangular(self) -> bool");

extern "C" {static PyObject *meth_QSGClipNode_isRectangular(PyObject *, PyObject *);}
static PyObject *meth_QSGClipNode_isRectangular(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGClipNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGClipNode, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRectangular();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGClipNode, sipName_isRectangular, doc_QSGClipNode_isRectangular);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGClipNode_setClipRect, "setClipRect(self, QRectF)");

extern "C" {static PyObject *meth_QSGClipNode_setClipRect(PyObject *, PyObject *);}
static PyObject *meth_QSGClipNode_setClipRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
         ::QSGClipNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSGClipNode, &sipCpp, sipType_QRectF, &a0))
        {
            sipCpp->setClipRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGClipNode, sipName_setClipRect, doc_QSGClipNode_setClipRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGClipNode_clipRect, "clipRect(self) -> QRectF");

extern "C" {static PyObject *meth_QSGClipNode_clipRect(PyObject *, PyObject *);}
static PyObject *meth_QSGClipNode_clipRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGClipNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGClipNode, &sipCpp))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->clipRect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGClipNode, sipName_clipRect, doc_QSGClipNode_clipRect);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSGClipNode(void *, const sipTypeDef *);}
static void *cast_QSGClipNode(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSGClipNode *sipCpp = reinterpret_cast< ::QSGClipNode *>(sipCppV);

    if (targetType == sipType_QSGBasicGeometryNode)
        return static_cast< ::QSGBasicGeometryNode *>(sipCpp);

    if (targetType == sipType_QSGNode)
        return static_cast< ::QSGNode *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGClipNode(void *, int);}
static void release_QSGClipNode(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQSGClipNode *>(sipCppV);
    else
        delete reinterpret_cast< ::QSGClipNode *>(sipCppV);
}


extern "C" {static void dealloc_QSGClipNode(sipSimpleWrapper *);}
static void dealloc_QSGClipNode(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSGClipNode *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGClipNode(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSGClipNode(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGClipNode(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQSGClipNode *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQSGClipNode();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSGClipNode[] = {{34, 255, 1}};


static PyMethodDef methods_QSGClipNode[] = {
    {SIP_MLNAME_CAST(sipName_clipRect), meth_QSGClipNode_clipRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGClipNode_clipRect)},
    {SIP_MLNAME_CAST(sipName_isRectangular), meth_QSGClipNode_isRectangular, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGClipNode_isRectangular)},
    {SIP_MLNAME_CAST(sipName_setClipRect), meth_QSGClipNode_setClipRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGClipNode_setClipRect)},
    {SIP_MLNAME_CAST(sipName_setIsRectangular), meth_QSGClipNode_setIsRectangular, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGClipNode_setIsRectangular)}
};

PyDoc_STRVAR(doc_QSGClipNode, "\1QSGClipNode()");


static pyqt5ClassPluginDef plugin_QSGClipNode = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGClipNode = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGClipNode,
        {SIP_NULLPTR},
        &plugin_QSGClipNode
    },
    {
        sipNameNr_QSGClipNode,
        {0, 0, 1},
        4, methods_QSGClipNode,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSGClipNode,
    -1,
    -1,
    supers_QSGClipNode,
    SIP_NULLPTR,
    init_type_QSGClipNode,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGClipNode,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSGClipNode,
    cast_QSGClipNode,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 248 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 12470 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
#include <qsggeometry.h>
#line 12474 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 12477 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 12480 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 12483 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"


PyDoc_STRVAR(doc_QSGBasicGeometryNode_setGeometry, "setGeometry(self, QSGGeometry)");

extern "C" {static PyObject *meth_QSGBasicGeometryNode_setGeometry(PyObject *, PyObject *);}
static PyObject *meth_QSGBasicGeometryNode_setGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGGeometry* a0;
        PyObject *a0Wrapper;
         ::QSGBasicGeometryNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QSGBasicGeometryNode, &sipCpp, &a0Wrapper, sipType_QSGGeometry, &a0))
        {
#line 255 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
        sipCpp->setGeometry(a0);
        
        if (sipCpp->flags() & QSGNode::OwnsGeometry)
            sipTransferTo(a0Wrapper, sipSelf);
#line 12506 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGBasicGeometryNode, sipName_setGeometry, doc_QSGBasicGeometryNode_setGeometry);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGBasicGeometryNode_geometry, "geometry(self) -> QSGGeometry");

extern "C" {static PyObject *meth_QSGBasicGeometryNode_geometry(PyObject *, PyObject *);}
static PyObject *meth_QSGBasicGeometryNode_geometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGBasicGeometryNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGBasicGeometryNode, &sipCpp))
        {
             ::QSGGeometry*sipRes;

            sipRes = sipCpp->geometry();

            return sipConvertFromType(sipRes,sipType_QSGGeometry,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGBasicGeometryNode, sipName_geometry, doc_QSGBasicGeometryNode_geometry);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSGBasicGeometryNode(void *, const sipTypeDef *);}
static void *cast_QSGBasicGeometryNode(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSGBasicGeometryNode *sipCpp = reinterpret_cast< ::QSGBasicGeometryNode *>(sipCppV);

    if (targetType == sipType_QSGNode)
        return static_cast< ::QSGNode *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGBasicGeometryNode(void *, int);}
static void release_QSGBasicGeometryNode(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSGBasicGeometryNode *>(sipCppV);
}


extern "C" {static void dealloc_QSGBasicGeometryNode(sipSimpleWrapper *);}
static void dealloc_QSGBasicGeometryNode(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGBasicGeometryNode(sipGetAddress(sipSelf), 0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSGBasicGeometryNode[] = {{63, 255, 1}};


static PyMethodDef methods_QSGBasicGeometryNode[] = {
    {SIP_MLNAME_CAST(sipName_geometry), meth_QSGBasicGeometryNode_geometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGBasicGeometryNode_geometry)},
    {SIP_MLNAME_CAST(sipName_setGeometry), meth_QSGBasicGeometryNode_setGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGBasicGeometryNode_setGeometry)}
};


static pyqt5ClassPluginDef plugin_QSGBasicGeometryNode = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGBasicGeometryNode = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGBasicGeometryNode,
        {SIP_NULLPTR},
        &plugin_QSGBasicGeometryNode
    },
    {
        sipNameNr_QSGBasicGeometryNode,
        {0, 0, 1},
        2, methods_QSGBasicGeometryNode,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_QSGBasicGeometryNode,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGBasicGeometryNode,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSGBasicGeometryNode,
    cast_QSGBasicGeometryNode,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 12648 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 12652 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"


extern "C" {static long slot_QSGNode_DirtyState___hash__(PyObject *);}
static long slot_QSGNode_DirtyState___hash__(PyObject *sipSelf)
{
     ::QSGNode::DirtyState *sipCpp = reinterpret_cast< ::QSGNode::DirtyState *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGNode_DirtyState));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QSGNode::DirtyState::Int();
#line 12670 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QSGNode_DirtyState___bool__(PyObject *);}
static int slot_QSGNode_DirtyState___bool__(PyObject *sipSelf)
{
     ::QSGNode::DirtyState *sipCpp = reinterpret_cast< ::QSGNode::DirtyState *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGNode_DirtyState));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QSGNode::DirtyState::Int() != 0);
#line 12695 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QSGNode_DirtyState___ne__(PyObject *,PyObject *);}
static PyObject *slot_QSGNode_DirtyState___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSGNode::DirtyState *sipCpp = reinterpret_cast< ::QSGNode::DirtyState *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGNode_DirtyState));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGNode::DirtyState* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QSGNode_DirtyState, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QSGNode::DirtyState::Int() != a0->operator QSGNode::DirtyState::Int());
#line 12725 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
            sipReleaseType(const_cast< ::QSGNode::DirtyState *>(a0),sipType_QSGNode_DirtyState,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, ne_slot, sipType_QSGNode_DirtyState, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QSGNode_DirtyState___eq__(PyObject *,PyObject *);}
static PyObject *slot_QSGNode_DirtyState___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSGNode::DirtyState *sipCpp = reinterpret_cast< ::QSGNode::DirtyState *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGNode_DirtyState));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGNode::DirtyState* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QSGNode_DirtyState, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QSGNode::DirtyState::Int() == a0->operator QSGNode::DirtyState::Int());
#line 12761 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
            sipReleaseType(const_cast< ::QSGNode::DirtyState *>(a0),sipType_QSGNode_DirtyState,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, eq_slot, sipType_QSGNode_DirtyState, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QSGNode_DirtyState___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QSGNode_DirtyState___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSGNode_DirtyState)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSGNode::DirtyState *sipCpp = reinterpret_cast< ::QSGNode::DirtyState *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGNode_DirtyState));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QSGNode::DirtyState(*sipCpp ^ a0);
#line 12800 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSGNode_DirtyState___xor__(PyObject *,PyObject *);}
static PyObject *slot_QSGNode_DirtyState___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGNode::DirtyState* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QSGNode_DirtyState, &a0, &a0State, &a1))
        {
             ::QSGNode::DirtyState*sipRes;

            sipRes = new  ::QSGNode::DirtyState((*a0 ^ a1));
            sipReleaseType(a0,sipType_QSGNode_DirtyState,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSGNode_DirtyState,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSGNode_DirtyState___ior__(PyObject *,PyObject *);}
static PyObject *slot_QSGNode_DirtyState___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSGNode_DirtyState)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSGNode::DirtyState *sipCpp = reinterpret_cast< ::QSGNode::DirtyState *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGNode_DirtyState));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QSGNode::DirtyState(*sipCpp | a0);
#line 12872 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSGNode_DirtyState___or__(PyObject *,PyObject *);}
static PyObject *slot_QSGNode_DirtyState___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGNode::DirtyState* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QSGNode_DirtyState, &a0, &a0State, &a1))
        {
             ::QSGNode::DirtyState*sipRes;

            sipRes = new  ::QSGNode::DirtyState((*a0 | a1));
            sipReleaseType(a0,sipType_QSGNode_DirtyState,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSGNode_DirtyState,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSGNode_DirtyState___iand__(PyObject *,PyObject *);}
static PyObject *slot_QSGNode_DirtyState___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSGNode_DirtyState)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSGNode::DirtyState *sipCpp = reinterpret_cast< ::QSGNode::DirtyState *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGNode_DirtyState));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QSGNode::DirtyState::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSGNode_DirtyState___and__(PyObject *,PyObject *);}
static PyObject *slot_QSGNode_DirtyState___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGNode::DirtyState* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QSGNode_DirtyState, &a0, &a0State, &a1))
        {
             ::QSGNode::DirtyState*sipRes;

            sipRes = new  ::QSGNode::DirtyState((*a0 & a1));
            sipReleaseType(a0,sipType_QSGNode_DirtyState,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSGNode_DirtyState,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSGNode_DirtyState___invert__(PyObject *);}
static PyObject *slot_QSGNode_DirtyState___invert__(PyObject *sipSelf)
{
     ::QSGNode::DirtyState *sipCpp = reinterpret_cast< ::QSGNode::DirtyState *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGNode_DirtyState));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QSGNode::DirtyState*sipRes;

            sipRes = new  ::QSGNode::DirtyState(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QSGNode_DirtyState,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QSGNode_DirtyState___int__(PyObject *);}
static PyObject *slot_QSGNode_DirtyState___int__(PyObject *sipSelf)
{
     ::QSGNode::DirtyState *sipCpp = reinterpret_cast< ::QSGNode::DirtyState *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGNode_DirtyState));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGNode_DirtyState(void *, int);}
static void release_QSGNode_DirtyState(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSGNode::DirtyState *>(sipCppV);
}


extern "C" {static void assign_QSGNode_DirtyState(void *, SIP_SSIZE_T, void *);}
static void assign_QSGNode_DirtyState(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QSGNode::DirtyState *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QSGNode::DirtyState *>(sipSrc);
}


extern "C" {static void *array_QSGNode_DirtyState(SIP_SSIZE_T);}
static void *array_QSGNode_DirtyState(SIP_SSIZE_T sipNrElem)
{
    return new  ::QSGNode::DirtyState[sipNrElem];
}


extern "C" {static void *copy_QSGNode_DirtyState(const void *, SIP_SSIZE_T);}
static void *copy_QSGNode_DirtyState(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QSGNode::DirtyState(reinterpret_cast<const  ::QSGNode::DirtyState *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSGNode_DirtyState(sipSimpleWrapper *);}
static void dealloc_QSGNode_DirtyState(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGNode_DirtyState(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QSGNode_DirtyState(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGNode_DirtyState(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QSGNode::DirtyState *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QSGNode::DirtyState();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QSGNode::DirtyState(a0);

            return sipCpp;
        }
    }

    {
        const  ::QSGNode::DirtyState* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QSGNode_DirtyState, &a0, &a0State))
        {
            sipCpp = new  ::QSGNode::DirtyState(*a0);
            sipReleaseType(const_cast< ::QSGNode::DirtyState *>(a0),sipType_QSGNode_DirtyState,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QSGNode_DirtyState(PyObject *, void **, int *, PyObject *);}
static int convertTo_QSGNode_DirtyState(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QSGNode::DirtyState **sipCppPtr = reinterpret_cast< ::QSGNode::DirtyState **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QSGNode::DirtyState is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QSGNode_DirtyStateBit)) ||
            sipCanConvertToType(sipPy, sipType_QSGNode_DirtyState, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QSGNode_DirtyStateBit)))
{
    *sipCppPtr = new QSGNode::DirtyState(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QSGNode::DirtyState *>(sipConvertToType(sipPy, sipType_QSGNode_DirtyState, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 13140 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QSGNode_DirtyState[] = {
    {(void *)slot_QSGNode_DirtyState___hash__, hash_slot},
    {(void *)slot_QSGNode_DirtyState___bool__, bool_slot},
    {(void *)slot_QSGNode_DirtyState___ne__, ne_slot},
    {(void *)slot_QSGNode_DirtyState___eq__, eq_slot},
    {(void *)slot_QSGNode_DirtyState___ixor__, ixor_slot},
    {(void *)slot_QSGNode_DirtyState___xor__, xor_slot},
    {(void *)slot_QSGNode_DirtyState___ior__, ior_slot},
    {(void *)slot_QSGNode_DirtyState___or__, or_slot},
    {(void *)slot_QSGNode_DirtyState___iand__, iand_slot},
    {(void *)slot_QSGNode_DirtyState___and__, and_slot},
    {(void *)slot_QSGNode_DirtyState___invert__, invert_slot},
    {(void *)slot_QSGNode_DirtyState___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QSGNode_DirtyState, "\1QSGNode.DirtyState()\n"
"QSGNode.DirtyState(Union[QSGNode.DirtyState, QSGNode.DirtyStateBit])\n"
"QSGNode.DirtyState(QSGNode.DirtyState)");


static pyqt5ClassPluginDef plugin_QSGNode_DirtyState = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGNode_DirtyState = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGNode__DirtyState,
        {SIP_NULLPTR},
        &plugin_QSGNode_DirtyState
    },
    {
        sipNameNr_DirtyState,
        {63, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSGNode_DirtyState,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QSGNode_DirtyState,
    init_type_QSGNode_DirtyState,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGNode_DirtyState,
    assign_QSGNode_DirtyState,
    array_QSGNode_DirtyState,
    copy_QSGNode_DirtyState,
    release_QSGNode_DirtyState,
    SIP_NULLPTR,
    convertTo_QSGNode_DirtyState,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 13228 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 13232 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"


extern "C" {static long slot_QSGNode_Flags___hash__(PyObject *);}
static long slot_QSGNode_Flags___hash__(PyObject *sipSelf)
{
     ::QSGNode::Flags *sipCpp = reinterpret_cast< ::QSGNode::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGNode_Flags));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QSGNode::Flags::Int();
#line 13250 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QSGNode_Flags___bool__(PyObject *);}
static int slot_QSGNode_Flags___bool__(PyObject *sipSelf)
{
     ::QSGNode::Flags *sipCpp = reinterpret_cast< ::QSGNode::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGNode_Flags));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QSGNode::Flags::Int() != 0);
#line 13275 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QSGNode_Flags___ne__(PyObject *,PyObject *);}
static PyObject *slot_QSGNode_Flags___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSGNode::Flags *sipCpp = reinterpret_cast< ::QSGNode::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGNode_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGNode::Flags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QSGNode_Flags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QSGNode::Flags::Int() != a0->operator QSGNode::Flags::Int());
#line 13305 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
            sipReleaseType(const_cast< ::QSGNode::Flags *>(a0),sipType_QSGNode_Flags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, ne_slot, sipType_QSGNode_Flags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QSGNode_Flags___eq__(PyObject *,PyObject *);}
static PyObject *slot_QSGNode_Flags___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSGNode::Flags *sipCpp = reinterpret_cast< ::QSGNode::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGNode_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGNode::Flags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QSGNode_Flags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QSGNode::Flags::Int() == a0->operator QSGNode::Flags::Int());
#line 13341 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
            sipReleaseType(const_cast< ::QSGNode::Flags *>(a0),sipType_QSGNode_Flags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, eq_slot, sipType_QSGNode_Flags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QSGNode_Flags___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QSGNode_Flags___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSGNode_Flags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSGNode::Flags *sipCpp = reinterpret_cast< ::QSGNode::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGNode_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QSGNode::Flags(*sipCpp ^ a0);
#line 13380 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSGNode_Flags___xor__(PyObject *,PyObject *);}
static PyObject *slot_QSGNode_Flags___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGNode::Flags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QSGNode_Flags, &a0, &a0State, &a1))
        {
             ::QSGNode::Flags*sipRes;

            sipRes = new  ::QSGNode::Flags((*a0 ^ a1));
            sipReleaseType(a0,sipType_QSGNode_Flags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSGNode_Flags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSGNode_Flags___ior__(PyObject *,PyObject *);}
static PyObject *slot_QSGNode_Flags___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSGNode_Flags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSGNode::Flags *sipCpp = reinterpret_cast< ::QSGNode::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGNode_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QSGNode::Flags(*sipCpp | a0);
#line 13452 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSGNode_Flags___or__(PyObject *,PyObject *);}
static PyObject *slot_QSGNode_Flags___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGNode::Flags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QSGNode_Flags, &a0, &a0State, &a1))
        {
             ::QSGNode::Flags*sipRes;

            sipRes = new  ::QSGNode::Flags((*a0 | a1));
            sipReleaseType(a0,sipType_QSGNode_Flags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSGNode_Flags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSGNode_Flags___iand__(PyObject *,PyObject *);}
static PyObject *slot_QSGNode_Flags___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSGNode_Flags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSGNode::Flags *sipCpp = reinterpret_cast< ::QSGNode::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGNode_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QSGNode::Flags::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSGNode_Flags___and__(PyObject *,PyObject *);}
static PyObject *slot_QSGNode_Flags___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGNode::Flags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QSGNode_Flags, &a0, &a0State, &a1))
        {
             ::QSGNode::Flags*sipRes;

            sipRes = new  ::QSGNode::Flags((*a0 & a1));
            sipReleaseType(a0,sipType_QSGNode_Flags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSGNode_Flags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSGNode_Flags___invert__(PyObject *);}
static PyObject *slot_QSGNode_Flags___invert__(PyObject *sipSelf)
{
     ::QSGNode::Flags *sipCpp = reinterpret_cast< ::QSGNode::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGNode_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QSGNode::Flags*sipRes;

            sipRes = new  ::QSGNode::Flags(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QSGNode_Flags,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QSGNode_Flags___int__(PyObject *);}
static PyObject *slot_QSGNode_Flags___int__(PyObject *sipSelf)
{
     ::QSGNode::Flags *sipCpp = reinterpret_cast< ::QSGNode::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGNode_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGNode_Flags(void *, int);}
static void release_QSGNode_Flags(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSGNode::Flags *>(sipCppV);
}


extern "C" {static void assign_QSGNode_Flags(void *, SIP_SSIZE_T, void *);}
static void assign_QSGNode_Flags(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QSGNode::Flags *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QSGNode::Flags *>(sipSrc);
}


extern "C" {static void *array_QSGNode_Flags(SIP_SSIZE_T);}
static void *array_QSGNode_Flags(SIP_SSIZE_T sipNrElem)
{
    return new  ::QSGNode::Flags[sipNrElem];
}


extern "C" {static void *copy_QSGNode_Flags(const void *, SIP_SSIZE_T);}
static void *copy_QSGNode_Flags(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QSGNode::Flags(reinterpret_cast<const  ::QSGNode::Flags *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSGNode_Flags(sipSimpleWrapper *);}
static void dealloc_QSGNode_Flags(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGNode_Flags(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QSGNode_Flags(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGNode_Flags(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QSGNode::Flags *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QSGNode::Flags();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QSGNode::Flags(a0);

            return sipCpp;
        }
    }

    {
        const  ::QSGNode::Flags* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QSGNode_Flags, &a0, &a0State))
        {
            sipCpp = new  ::QSGNode::Flags(*a0);
            sipReleaseType(const_cast< ::QSGNode::Flags *>(a0),sipType_QSGNode_Flags,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QSGNode_Flags(PyObject *, void **, int *, PyObject *);}
static int convertTo_QSGNode_Flags(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QSGNode::Flags **sipCppPtr = reinterpret_cast< ::QSGNode::Flags **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QSGNode::Flags is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QSGNode_Flag)) ||
            sipCanConvertToType(sipPy, sipType_QSGNode_Flags, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QSGNode_Flag)))
{
    *sipCppPtr = new QSGNode::Flags(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QSGNode::Flags *>(sipConvertToType(sipPy, sipType_QSGNode_Flags, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 13720 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QSGNode_Flags[] = {
    {(void *)slot_QSGNode_Flags___hash__, hash_slot},
    {(void *)slot_QSGNode_Flags___bool__, bool_slot},
    {(void *)slot_QSGNode_Flags___ne__, ne_slot},
    {(void *)slot_QSGNode_Flags___eq__, eq_slot},
    {(void *)slot_QSGNode_Flags___ixor__, ixor_slot},
    {(void *)slot_QSGNode_Flags___xor__, xor_slot},
    {(void *)slot_QSGNode_Flags___ior__, ior_slot},
    {(void *)slot_QSGNode_Flags___or__, or_slot},
    {(void *)slot_QSGNode_Flags___iand__, iand_slot},
    {(void *)slot_QSGNode_Flags___and__, and_slot},
    {(void *)slot_QSGNode_Flags___invert__, invert_slot},
    {(void *)slot_QSGNode_Flags___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QSGNode_Flags, "\1QSGNode.Flags()\n"
"QSGNode.Flags(Union[QSGNode.Flags, QSGNode.Flag])\n"
"QSGNode.Flags(QSGNode.Flags)");


static pyqt5ClassPluginDef plugin_QSGNode_Flags = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGNode_Flags = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGNode__Flags,
        {SIP_NULLPTR},
        &plugin_QSGNode_Flags
    },
    {
        sipNameNr_Flags,
        {63, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSGNode_Flags,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QSGNode_Flags,
    init_type_QSGNode_Flags,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGNode_Flags,
    assign_QSGNode_Flags,
    array_QSGNode_Flags,
    copy_QSGNode_Flags,
    release_QSGNode_Flags,
    SIP_NULLPTR,
    convertTo_QSGNode_Flags,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 13808 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 13812 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 13815 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
static sipErrorState qsgnode_handle_flags(QSGNode *node, PyObject *self, QSGNode::Flags old_flags)
{
    QSGNode::Flags new_flags = node->flags();
    
    if (node->parent())
    {
        if ((old_flags & QSGNode::OwnedByParent) != (new_flags & QSGNode::OwnedByParent))
        {
            if (old_flags & QSGNode::OwnedByParent)
            {
                sipTransferBack(self);
            }
            else
            {
                PyObject *parent = sipConvertFromType(node->parent(), sipType_QSGNode, 0);

                if (!parent)
                    return sipErrorFail;

                sipTransferTo(self, parent);
                Py_DECREF(parent);
            }
        }
    }
    
    QSGNode::NodeType ntype = node->type();
        
    if (ntype == QSGNode::BasicNodeType || ntype == QSGNode::GeometryNodeType || ntype == QSGNode::ClipNodeType)
    {
        QSGBasicGeometryNode *bg_node = (QSGBasicGeometryNode *)node;
            
        if (bg_node->geometry())
        {
            if ((old_flags & QSGNode::OwnsGeometry) != (new_flags & QSGNode::OwnsGeometry))
            {
                PyObject *geom = sipConvertFromType(bg_node->geometry(), sipType_QSGGeometry, 0);

                if (!geom)
                    return sipErrorFail;

                if (old_flags & QSGNode::OwnsGeometry)
                    sipTransferBack(geom);
                else
                    sipTransferTo(geom, self);

                Py_DECREF(geom);
            }
        }
    }
    
    if (ntype == QSGNode::GeometryNodeType)
    {
        QSGGeometryNode *g_node = (QSGGeometryNode *)node;
            
        if (g_node->material())
        {
            if ((old_flags & QSGNode::OwnsMaterial) != (new_flags & QSGNode::OwnsMaterial))
            {
                PyObject *mat = sipConvertFromType(g_node->material(), sipType_QSGMaterial, 0);

                if (!mat)
                    return sipErrorFail;

                if (old_flags & QSGNode::OwnsMaterial)
                    sipTransferBack(mat);
                else
                    sipTransferTo(mat, self);

                Py_DECREF(mat);
            }
        }

        if (g_node->opaqueMaterial())
        {
            if ((old_flags & QSGNode::OwnsOpaqueMaterial) != (new_flags & QSGNode::OwnsOpaqueMaterial))
            {
                PyObject *omat = sipConvertFromType(g_node->opaqueMaterial(), sipType_QSGMaterial, 0);

                if (!omat)
                    return sipErrorFail;

                if (old_flags & QSGNode::OwnsOpaqueMaterial)
                    sipTransferBack(omat);
                else
                    sipTransferTo(omat, self);

                Py_DECREF(omat);
            }
        }
    }

    return sipErrorNone;
}
#line 13910 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"


class sipQSGNode : public  ::QSGNode
{
public:
    sipQSGNode();
    virtual ~sipQSGNode();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void preprocess() SIP_OVERRIDE;
    bool isSubtreeBlocked() const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSGNode(const sipQSGNode &);
    sipQSGNode &operator = (const sipQSGNode &);

    char sipPyMethods[2];
};

sipQSGNode::sipQSGNode():  ::QSGNode(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSGNode::~sipQSGNode()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

void sipQSGNode::preprocess()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_preprocess);

    if (!sipMeth)
    {
         ::QSGNode::preprocess();
        return;
    }

    extern void sipVH_QtQuick_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtQuick_6(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQSGNode::isSubtreeBlocked() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_isSubtreeBlocked);

    if (!sipMeth)
        return  ::QSGNode::isSubtreeBlocked();

    extern bool sipVH_QtQuick_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_9(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QSGNode_parent, "parent(self) -> QSGNode");

extern "C" {static PyObject *meth_QSGNode_parent(PyObject *, PyObject *);}
static PyObject *meth_QSGNode_parent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGNode, &sipCpp))
        {
             ::QSGNode*sipRes;

            sipRes = sipCpp->parent();

            return sipConvertFromType(sipRes,sipType_QSGNode,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGNode, sipName_parent, doc_QSGNode_parent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGNode_removeChildNode, "removeChildNode(self, QSGNode)");

extern "C" {static PyObject *meth_QSGNode_removeChildNode(PyObject *, PyObject *);}
static PyObject *meth_QSGNode_removeChildNode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGNode* a0;
         ::QSGNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QSGNode, &sipCpp, sipType_QSGNode, &a0))
        {
            sipCpp->removeChildNode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGNode, sipName_removeChildNode, doc_QSGNode_removeChildNode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGNode_removeAllChildNodes, "removeAllChildNodes(self)");

extern "C" {static PyObject *meth_QSGNode_removeAllChildNodes(PyObject *, PyObject *);}
static PyObject *meth_QSGNode_removeAllChildNodes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGNode, &sipCpp))
        {
            sipCpp->removeAllChildNodes();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGNode, sipName_removeAllChildNodes, doc_QSGNode_removeAllChildNodes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGNode_prependChildNode, "prependChildNode(self, QSGNode)");

extern "C" {static PyObject *meth_QSGNode_prependChildNode(PyObject *, PyObject *);}
static PyObject *meth_QSGNode_prependChildNode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGNode* a0;
        PyObject *a0Wrapper;
         ::QSGNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QSGNode, &sipCpp, &a0Wrapper, sipType_QSGNode, &a0))
        {
#line 192 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
        sipCpp->prependChildNode(a0);
        
        if (a0->flags() & QSGNode::OwnedByParent)
            sipTransferTo(a0Wrapper, sipSelf);
#line 14084 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGNode, sipName_prependChildNode, doc_QSGNode_prependChildNode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGNode_appendChildNode, "appendChildNode(self, QSGNode)");

extern "C" {static PyObject *meth_QSGNode_appendChildNode(PyObject *, PyObject *);}
static PyObject *meth_QSGNode_appendChildNode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGNode* a0;
        PyObject *a0Wrapper;
         ::QSGNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QSGNode, &sipCpp, &a0Wrapper, sipType_QSGNode, &a0))
        {
#line 200 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
        sipCpp->appendChildNode(a0);
        
        if (a0->flags() & QSGNode::OwnedByParent)
            sipTransferTo(a0Wrapper, sipSelf);
#line 14118 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGNode, sipName_appendChildNode, doc_QSGNode_appendChildNode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGNode_insertChildNodeBefore, "insertChildNodeBefore(self, QSGNode, QSGNode)");

extern "C" {static PyObject *meth_QSGNode_insertChildNodeBefore(PyObject *, PyObject *);}
static PyObject *meth_QSGNode_insertChildNodeBefore(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGNode* a0;
        PyObject *a0Wrapper;
         ::QSGNode* a1;
         ::QSGNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8J8", &sipSelf, sipType_QSGNode, &sipCpp, &a0Wrapper, sipType_QSGNode, &a0, sipType_QSGNode, &a1))
        {
#line 208 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
        sipCpp->insertChildNodeBefore(a0, a1);
        
        if (a0->flags() & QSGNode::OwnedByParent)
            sipTransferTo(a0Wrapper, sipSelf);
#line 14153 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGNode, sipName_insertChildNodeBefore, doc_QSGNode_insertChildNodeBefore);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGNode_insertChildNodeAfter, "insertChildNodeAfter(self, QSGNode, QSGNode)");

extern "C" {static PyObject *meth_QSGNode_insertChildNodeAfter(PyObject *, PyObject *);}
static PyObject *meth_QSGNode_insertChildNodeAfter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGNode* a0;
        PyObject *a0Wrapper;
         ::QSGNode* a1;
         ::QSGNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8J8", &sipSelf, sipType_QSGNode, &sipCpp, &a0Wrapper, sipType_QSGNode, &a0, sipType_QSGNode, &a1))
        {
#line 216 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
        sipCpp->insertChildNodeAfter(a0, a1);
        
        if (a0->flags() & QSGNode::OwnedByParent)
            sipTransferTo(a0Wrapper, sipSelf);
#line 14188 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGNode, sipName_insertChildNodeAfter, doc_QSGNode_insertChildNodeAfter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGNode_childCount, "childCount(self) -> int");

extern "C" {static PyObject *meth_QSGNode_childCount(PyObject *, PyObject *);}
static PyObject *meth_QSGNode_childCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGNode, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->childCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGNode, sipName_childCount, doc_QSGNode_childCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGNode_childAtIndex, "childAtIndex(self, int) -> QSGNode");

extern "C" {static PyObject *meth_QSGNode_childAtIndex(PyObject *, PyObject *);}
static PyObject *meth_QSGNode_childAtIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QSGNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSGNode, &sipCpp, &a0))
        {
             ::QSGNode*sipRes;

            sipRes = sipCpp->childAtIndex(a0);

            return sipConvertFromType(sipRes,sipType_QSGNode,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGNode, sipName_childAtIndex, doc_QSGNode_childAtIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGNode_firstChild, "firstChild(self) -> QSGNode");

extern "C" {static PyObject *meth_QSGNode_firstChild(PyObject *, PyObject *);}
static PyObject *meth_QSGNode_firstChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGNode, &sipCpp))
        {
             ::QSGNode*sipRes;

            sipRes = sipCpp->firstChild();

            return sipConvertFromType(sipRes,sipType_QSGNode,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGNode, sipName_firstChild, doc_QSGNode_firstChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGNode_lastChild, "lastChild(self) -> QSGNode");

extern "C" {static PyObject *meth_QSGNode_lastChild(PyObject *, PyObject *);}
static PyObject *meth_QSGNode_lastChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGNode, &sipCpp))
        {
             ::QSGNode*sipRes;

            sipRes = sipCpp->lastChild();

            return sipConvertFromType(sipRes,sipType_QSGNode,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGNode, sipName_lastChild, doc_QSGNode_lastChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGNode_nextSibling, "nextSibling(self) -> QSGNode");

extern "C" {static PyObject *meth_QSGNode_nextSibling(PyObject *, PyObject *);}
static PyObject *meth_QSGNode_nextSibling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGNode, &sipCpp))
        {
             ::QSGNode*sipRes;

            sipRes = sipCpp->nextSibling();

            return sipConvertFromType(sipRes,sipType_QSGNode,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGNode, sipName_nextSibling, doc_QSGNode_nextSibling);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGNode_previousSibling, "previousSibling(self) -> QSGNode");

extern "C" {static PyObject *meth_QSGNode_previousSibling(PyObject *, PyObject *);}
static PyObject *meth_QSGNode_previousSibling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGNode, &sipCpp))
        {
             ::QSGNode*sipRes;

            sipRes = sipCpp->previousSibling();

            return sipConvertFromType(sipRes,sipType_QSGNode,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGNode, sipName_previousSibling, doc_QSGNode_previousSibling);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGNode_type, "type(self) -> QSGNode.NodeType");

extern "C" {static PyObject *meth_QSGNode_type(PyObject *, PyObject *);}
static PyObject *meth_QSGNode_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGNode, &sipCpp))
        {
             ::QSGNode::NodeType sipRes;

            sipRes = sipCpp->type();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSGNode_NodeType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGNode, sipName_type, doc_QSGNode_type);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGNode_markDirty, "markDirty(self, Union[QSGNode.DirtyState, QSGNode.DirtyStateBit])");

extern "C" {static PyObject *meth_QSGNode_markDirty(PyObject *, PyObject *);}
static PyObject *meth_QSGNode_markDirty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGNode::DirtyState* a0;
        int a0State = 0;
         ::QSGNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSGNode, &sipCpp, sipType_QSGNode_DirtyState, &a0, &a0State))
        {
            sipCpp->markDirty(*a0);
            sipReleaseType(a0,sipType_QSGNode_DirtyState,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGNode, sipName_markDirty, doc_QSGNode_markDirty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGNode_isSubtreeBlocked, "isSubtreeBlocked(self) -> bool");

extern "C" {static PyObject *meth_QSGNode_isSubtreeBlocked(PyObject *, PyObject *);}
static PyObject *meth_QSGNode_isSubtreeBlocked(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSGNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGNode, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSGNode::isSubtreeBlocked() : sipCpp->isSubtreeBlocked());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGNode, sipName_isSubtreeBlocked, doc_QSGNode_isSubtreeBlocked);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGNode_flags, "flags(self) -> QSGNode.Flags");

extern "C" {static PyObject *meth_QSGNode_flags(PyObject *, PyObject *);}
static PyObject *meth_QSGNode_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGNode, &sipCpp))
        {
             ::QSGNode::Flags*sipRes;

            sipRes = new  ::QSGNode::Flags(sipCpp->flags());

            return sipConvertFromNewType(sipRes,sipType_QSGNode_Flags,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGNode, sipName_flags, doc_QSGNode_flags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGNode_setFlag, "setFlag(self, QSGNode.Flag, enabled: bool = True)");

extern "C" {static PyObject *meth_QSGNode_setFlag(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSGNode_setFlag(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGNode::Flag a0;
        bool a1 = 1;
         ::QSGNode *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE|b", &sipSelf, sipType_QSGNode, &sipCpp, sipType_QSGNode_Flag, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 234 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
        QSGNode::Flags old_flags = sipCpp->flags();
        
        sipCpp->setFlag(a0, a1);
        
        sipError = qsgnode_handle_flags(sipCpp, sipSelf, old_flags);
#line 14514 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGNode, sipName_setFlag, doc_QSGNode_setFlag);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGNode_setFlags, "setFlags(self, Union[QSGNode.Flags, QSGNode.Flag], enabled: bool = True)");

extern "C" {static PyObject *meth_QSGNode_setFlags(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSGNode_setFlags(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGNode::Flags* a0;
        int a0State = 0;
        bool a1 = 1;
         ::QSGNode *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|b", &sipSelf, sipType_QSGNode, &sipCpp, sipType_QSGNode_Flags, &a0, &a0State, &a1))
        {
            sipCpp->setFlags(*a0,a1);
            sipReleaseType(a0,sipType_QSGNode_Flags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGNode, sipName_setFlags, doc_QSGNode_setFlags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGNode_preprocess, "preprocess(self)");

extern "C" {static PyObject *meth_QSGNode_preprocess(PyObject *, PyObject *);}
static PyObject *meth_QSGNode_preprocess(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QSGNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGNode, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QSGNode::preprocess() : sipCpp->preprocess());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGNode, sipName_preprocess, doc_QSGNode_preprocess);

    return SIP_NULLPTR;
}


extern "C" {static SIP_SSIZE_T slot_QSGNode___len__(PyObject *);}
static SIP_SSIZE_T slot_QSGNode___len__(PyObject *sipSelf)
{
     ::QSGNode *sipCpp = reinterpret_cast< ::QSGNode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGNode));

    if (!sipCpp)
        return 0;


    {
        {
            SIP_SSIZE_T sipRes = 0;

#line 1 "Auto-generated"
            sipRes = (SIP_SSIZE_T)sipCpp->childCount();
#line 14615 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGNode(void *, int);}
static void release_QSGNode(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQSGNode *>(sipCppV);
    else
        delete reinterpret_cast< ::QSGNode *>(sipCppV);
}


extern "C" {static void dealloc_QSGNode(sipSimpleWrapper *);}
static void dealloc_QSGNode(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSGNode *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGNode(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSGNode(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGNode(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQSGNode *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQSGNode();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QSGNode[] = {
    {(void *)slot_QSGNode___len__, len_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QSGNode[] = {
    {SIP_MLNAME_CAST(sipName_appendChildNode), meth_QSGNode_appendChildNode, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGNode_appendChildNode)},
    {SIP_MLNAME_CAST(sipName_childAtIndex), meth_QSGNode_childAtIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGNode_childAtIndex)},
    {SIP_MLNAME_CAST(sipName_childCount), meth_QSGNode_childCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGNode_childCount)},
    {SIP_MLNAME_CAST(sipName_firstChild), meth_QSGNode_firstChild, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGNode_firstChild)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QSGNode_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGNode_flags)},
    {SIP_MLNAME_CAST(sipName_insertChildNodeAfter), meth_QSGNode_insertChildNodeAfter, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGNode_insertChildNodeAfter)},
    {SIP_MLNAME_CAST(sipName_insertChildNodeBefore), meth_QSGNode_insertChildNodeBefore, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGNode_insertChildNodeBefore)},
    {SIP_MLNAME_CAST(sipName_isSubtreeBlocked), meth_QSGNode_isSubtreeBlocked, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGNode_isSubtreeBlocked)},
    {SIP_MLNAME_CAST(sipName_lastChild), meth_QSGNode_lastChild, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGNode_lastChild)},
    {SIP_MLNAME_CAST(sipName_markDirty), meth_QSGNode_markDirty, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGNode_markDirty)},
    {SIP_MLNAME_CAST(sipName_nextSibling), meth_QSGNode_nextSibling, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGNode_nextSibling)},
    {SIP_MLNAME_CAST(sipName_parent), meth_QSGNode_parent, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGNode_parent)},
    {SIP_MLNAME_CAST(sipName_prependChildNode), meth_QSGNode_prependChildNode, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGNode_prependChildNode)},
    {SIP_MLNAME_CAST(sipName_preprocess), meth_QSGNode_preprocess, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGNode_preprocess)},
    {SIP_MLNAME_CAST(sipName_previousSibling), meth_QSGNode_previousSibling, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGNode_previousSibling)},
    {SIP_MLNAME_CAST(sipName_removeAllChildNodes), meth_QSGNode_removeAllChildNodes, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGNode_removeAllChildNodes)},
    {SIP_MLNAME_CAST(sipName_removeChildNode), meth_QSGNode_removeChildNode, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGNode_removeChildNode)},
    {SIP_MLNAME_CAST(sipName_setFlag), SIP_MLMETH_CAST(meth_QSGNode_setFlag), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSGNode_setFlag)},
    {SIP_MLNAME_CAST(sipName_setFlags), SIP_MLMETH_CAST(meth_QSGNode_setFlags), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSGNode_setFlags)},
    {SIP_MLNAME_CAST(sipName_type), meth_QSGNode_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGNode_type)}
};

static sipEnumMemberDef enummembers_QSGNode[] = {
    {sipName_BasicNodeType, static_cast<int>( ::QSGNode::BasicNodeType), 68},
    {sipName_ClipNodeType, static_cast<int>( ::QSGNode::ClipNodeType), 68},
    {sipName_DirtyGeometry, static_cast<int>( ::QSGNode::DirtyGeometry), 65},
    {sipName_DirtyMaterial, static_cast<int>( ::QSGNode::DirtyMaterial), 65},
    {sipName_DirtyMatrix, static_cast<int>( ::QSGNode::DirtyMatrix), 65},
    {sipName_DirtyNodeAdded, static_cast<int>( ::QSGNode::DirtyNodeAdded), 65},
    {sipName_DirtyNodeRemoved, static_cast<int>( ::QSGNode::DirtyNodeRemoved), 65},
    {sipName_DirtyOpacity, static_cast<int>( ::QSGNode::DirtyOpacity), 65},
    {sipName_GeometryNodeType, static_cast<int>( ::QSGNode::GeometryNodeType), 68},
    {sipName_OpacityNodeType, static_cast<int>( ::QSGNode::OpacityNodeType), 68},
    {sipName_OwnedByParent, static_cast<int>( ::QSGNode::OwnedByParent), 66},
    {sipName_OwnsGeometry, static_cast<int>( ::QSGNode::OwnsGeometry), 66},
    {sipName_OwnsMaterial, static_cast<int>( ::QSGNode::OwnsMaterial), 66},
    {sipName_OwnsOpaqueMaterial, static_cast<int>( ::QSGNode::OwnsOpaqueMaterial), 66},
    {sipName_TransformNodeType, static_cast<int>( ::QSGNode::TransformNodeType), 68},
    {sipName_UsePreprocess, static_cast<int>( ::QSGNode::UsePreprocess), 66},
};

PyDoc_STRVAR(doc_QSGNode, "\1QSGNode()");


static pyqt5ClassPluginDef plugin_QSGNode = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGNode = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGNode,
        {SIP_NULLPTR},
        &plugin_QSGNode
    },
    {
        sipNameNr_QSGNode,
        {0, 0, 1},
        20, methods_QSGNode,
        16, enummembers_QSGNode,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSGNode,
    -1,
    -1,
    SIP_NULLPTR,
    slots_QSGNode,
    init_type_QSGNode,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGNode,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSGNode,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 165 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 14781 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

#line 165 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 14785 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"


extern "C" {static long slot_QSGMaterial_Flags___hash__(PyObject *);}
static long slot_QSGMaterial_Flags___hash__(PyObject *sipSelf)
{
     ::QSGMaterial::Flags *sipCpp = reinterpret_cast< ::QSGMaterial::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGMaterial_Flags));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QSGMaterial::Flags::Int();
#line 14803 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QSGMaterial_Flags___bool__(PyObject *);}
static int slot_QSGMaterial_Flags___bool__(PyObject *sipSelf)
{
     ::QSGMaterial::Flags *sipCpp = reinterpret_cast< ::QSGMaterial::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGMaterial_Flags));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QSGMaterial::Flags::Int() != 0);
#line 14828 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QSGMaterial_Flags___ne__(PyObject *,PyObject *);}
static PyObject *slot_QSGMaterial_Flags___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSGMaterial::Flags *sipCpp = reinterpret_cast< ::QSGMaterial::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGMaterial_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGMaterial::Flags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QSGMaterial_Flags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QSGMaterial::Flags::Int() != a0->operator QSGMaterial::Flags::Int());
#line 14858 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
            sipReleaseType(const_cast< ::QSGMaterial::Flags *>(a0),sipType_QSGMaterial_Flags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, ne_slot, sipType_QSGMaterial_Flags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QSGMaterial_Flags___eq__(PyObject *,PyObject *);}
static PyObject *slot_QSGMaterial_Flags___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSGMaterial::Flags *sipCpp = reinterpret_cast< ::QSGMaterial::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGMaterial_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGMaterial::Flags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QSGMaterial_Flags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QSGMaterial::Flags::Int() == a0->operator QSGMaterial::Flags::Int());
#line 14894 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
            sipReleaseType(const_cast< ::QSGMaterial::Flags *>(a0),sipType_QSGMaterial_Flags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, eq_slot, sipType_QSGMaterial_Flags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QSGMaterial_Flags___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QSGMaterial_Flags___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSGMaterial_Flags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSGMaterial::Flags *sipCpp = reinterpret_cast< ::QSGMaterial::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGMaterial_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QSGMaterial::Flags(*sipCpp ^ a0);
#line 14933 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSGMaterial_Flags___xor__(PyObject *,PyObject *);}
static PyObject *slot_QSGMaterial_Flags___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGMaterial::Flags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QSGMaterial_Flags, &a0, &a0State, &a1))
        {
             ::QSGMaterial::Flags*sipRes;

            sipRes = new  ::QSGMaterial::Flags((*a0 ^ a1));
            sipReleaseType(a0,sipType_QSGMaterial_Flags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSGMaterial_Flags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSGMaterial_Flags___ior__(PyObject *,PyObject *);}
static PyObject *slot_QSGMaterial_Flags___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSGMaterial_Flags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSGMaterial::Flags *sipCpp = reinterpret_cast< ::QSGMaterial::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGMaterial_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QSGMaterial::Flags(*sipCpp | a0);
#line 15005 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSGMaterial_Flags___or__(PyObject *,PyObject *);}
static PyObject *slot_QSGMaterial_Flags___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGMaterial::Flags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QSGMaterial_Flags, &a0, &a0State, &a1))
        {
             ::QSGMaterial::Flags*sipRes;

            sipRes = new  ::QSGMaterial::Flags((*a0 | a1));
            sipReleaseType(a0,sipType_QSGMaterial_Flags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSGMaterial_Flags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSGMaterial_Flags___iand__(PyObject *,PyObject *);}
static PyObject *slot_QSGMaterial_Flags___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSGMaterial_Flags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSGMaterial::Flags *sipCpp = reinterpret_cast< ::QSGMaterial::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGMaterial_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QSGMaterial::Flags::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSGMaterial_Flags___and__(PyObject *,PyObject *);}
static PyObject *slot_QSGMaterial_Flags___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGMaterial::Flags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QSGMaterial_Flags, &a0, &a0State, &a1))
        {
             ::QSGMaterial::Flags*sipRes;

            sipRes = new  ::QSGMaterial::Flags((*a0 & a1));
            sipReleaseType(a0,sipType_QSGMaterial_Flags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSGMaterial_Flags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSGMaterial_Flags___invert__(PyObject *);}
static PyObject *slot_QSGMaterial_Flags___invert__(PyObject *sipSelf)
{
     ::QSGMaterial::Flags *sipCpp = reinterpret_cast< ::QSGMaterial::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGMaterial_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QSGMaterial::Flags*sipRes;

            sipRes = new  ::QSGMaterial::Flags(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QSGMaterial_Flags,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QSGMaterial_Flags___int__(PyObject *);}
static PyObject *slot_QSGMaterial_Flags___int__(PyObject *sipSelf)
{
     ::QSGMaterial::Flags *sipCpp = reinterpret_cast< ::QSGMaterial::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGMaterial_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGMaterial_Flags(void *, int);}
static void release_QSGMaterial_Flags(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSGMaterial::Flags *>(sipCppV);
}


extern "C" {static void assign_QSGMaterial_Flags(void *, SIP_SSIZE_T, void *);}
static void assign_QSGMaterial_Flags(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QSGMaterial::Flags *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QSGMaterial::Flags *>(sipSrc);
}


extern "C" {static void *array_QSGMaterial_Flags(SIP_SSIZE_T);}
static void *array_QSGMaterial_Flags(SIP_SSIZE_T sipNrElem)
{
    return new  ::QSGMaterial::Flags[sipNrElem];
}


extern "C" {static void *copy_QSGMaterial_Flags(const void *, SIP_SSIZE_T);}
static void *copy_QSGMaterial_Flags(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QSGMaterial::Flags(reinterpret_cast<const  ::QSGMaterial::Flags *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSGMaterial_Flags(sipSimpleWrapper *);}
static void dealloc_QSGMaterial_Flags(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGMaterial_Flags(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QSGMaterial_Flags(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGMaterial_Flags(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QSGMaterial::Flags *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QSGMaterial::Flags();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QSGMaterial::Flags(a0);

            return sipCpp;
        }
    }

    {
        const  ::QSGMaterial::Flags* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QSGMaterial_Flags, &a0, &a0State))
        {
            sipCpp = new  ::QSGMaterial::Flags(*a0);
            sipReleaseType(const_cast< ::QSGMaterial::Flags *>(a0),sipType_QSGMaterial_Flags,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QSGMaterial_Flags(PyObject *, void **, int *, PyObject *);}
static int convertTo_QSGMaterial_Flags(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QSGMaterial::Flags **sipCppPtr = reinterpret_cast< ::QSGMaterial::Flags **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QSGMaterial::Flags is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QSGMaterial_Flag)) ||
            sipCanConvertToType(sipPy, sipType_QSGMaterial_Flags, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QSGMaterial_Flag)))
{
    *sipCppPtr = new QSGMaterial::Flags(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QSGMaterial::Flags *>(sipConvertToType(sipPy, sipType_QSGMaterial_Flags, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 15273 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QSGMaterial_Flags[] = {
    {(void *)slot_QSGMaterial_Flags___hash__, hash_slot},
    {(void *)slot_QSGMaterial_Flags___bool__, bool_slot},
    {(void *)slot_QSGMaterial_Flags___ne__, ne_slot},
    {(void *)slot_QSGMaterial_Flags___eq__, eq_slot},
    {(void *)slot_QSGMaterial_Flags___ixor__, ixor_slot},
    {(void *)slot_QSGMaterial_Flags___xor__, xor_slot},
    {(void *)slot_QSGMaterial_Flags___ior__, ior_slot},
    {(void *)slot_QSGMaterial_Flags___or__, or_slot},
    {(void *)slot_QSGMaterial_Flags___iand__, iand_slot},
    {(void *)slot_QSGMaterial_Flags___and__, and_slot},
    {(void *)slot_QSGMaterial_Flags___invert__, invert_slot},
    {(void *)slot_QSGMaterial_Flags___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QSGMaterial_Flags, "\1QSGMaterial.Flags()\n"
"QSGMaterial.Flags(Union[QSGMaterial.Flags, QSGMaterial.Flag])\n"
"QSGMaterial.Flags(QSGMaterial.Flags)");


static pyqt5ClassPluginDef plugin_QSGMaterial_Flags = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGMaterial_Flags = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGMaterial__Flags,
        {SIP_NULLPTR},
        &plugin_QSGMaterial_Flags
    },
    {
        sipNameNr_Flags,
        {55, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSGMaterial_Flags,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QSGMaterial_Flags,
    init_type_QSGMaterial_Flags,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGMaterial_Flags,
    assign_QSGMaterial_Flags,
    array_QSGMaterial_Flags,
    copy_QSGMaterial_Flags,
    release_QSGMaterial_Flags,
    SIP_NULLPTR,
    convertTo_QSGMaterial_Flags,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 158 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 15361 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"



/* Call the instance's destructor. */
extern "C" {static void release_QSGMaterialType(void *, int);}
static void release_QSGMaterialType(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSGMaterialType *>(sipCppV);
}


extern "C" {static void assign_QSGMaterialType(void *, SIP_SSIZE_T, void *);}
static void assign_QSGMaterialType(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QSGMaterialType *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QSGMaterialType *>(sipSrc);
}


extern "C" {static void *array_QSGMaterialType(SIP_SSIZE_T);}
static void *array_QSGMaterialType(SIP_SSIZE_T sipNrElem)
{
    return new  ::QSGMaterialType[sipNrElem];
}


extern "C" {static void *copy_QSGMaterialType(const void *, SIP_SSIZE_T);}
static void *copy_QSGMaterialType(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QSGMaterialType(reinterpret_cast<const  ::QSGMaterialType *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSGMaterialType(sipSimpleWrapper *);}
static void dealloc_QSGMaterialType(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGMaterialType(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QSGMaterialType(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGMaterialType(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QSGMaterialType *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QSGMaterialType();

            return sipCpp;
        }
    }

    {
        const  ::QSGMaterialType* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QSGMaterialType, &a0))
        {
            sipCpp = new  ::QSGMaterialType(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}

PyDoc_STRVAR(doc_QSGMaterialType, "\1QSGMaterialType()\n"
"QSGMaterialType(QSGMaterialType)");


static pyqt5ClassPluginDef plugin_QSGMaterialType = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGMaterialType = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGMaterialType,
        {SIP_NULLPTR},
        &plugin_QSGMaterialType
    },
    {
        sipNameNr_QSGMaterialType,
        {0, 0, 1},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSGMaterialType,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QSGMaterialType,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGMaterialType,
    assign_QSGMaterialType,
    array_QSGMaterialType,
    copy_QSGMaterialType,
    release_QSGMaterialType,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 33 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 15499 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 33 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 15505 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"


extern "C" {static long slot_QSGMaterialShader_RenderState_DirtyStates___hash__(PyObject *);}
static long slot_QSGMaterialShader_RenderState_DirtyStates___hash__(PyObject *sipSelf)
{
     ::QSGMaterialShader::RenderState::DirtyStates *sipCpp = reinterpret_cast< ::QSGMaterialShader::RenderState::DirtyStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGMaterialShader_RenderState_DirtyStates));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QSGMaterialShader::RenderState::DirtyStates::Int();
#line 15523 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QSGMaterialShader_RenderState_DirtyStates___bool__(PyObject *);}
static int slot_QSGMaterialShader_RenderState_DirtyStates___bool__(PyObject *sipSelf)
{
     ::QSGMaterialShader::RenderState::DirtyStates *sipCpp = reinterpret_cast< ::QSGMaterialShader::RenderState::DirtyStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGMaterialShader_RenderState_DirtyStates));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QSGMaterialShader::RenderState::DirtyStates::Int() != 0);
#line 15548 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QSGMaterialShader_RenderState_DirtyStates___ne__(PyObject *,PyObject *);}
static PyObject *slot_QSGMaterialShader_RenderState_DirtyStates___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSGMaterialShader::RenderState::DirtyStates *sipCpp = reinterpret_cast< ::QSGMaterialShader::RenderState::DirtyStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGMaterialShader_RenderState_DirtyStates));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGMaterialShader::RenderState::DirtyStates* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QSGMaterialShader_RenderState_DirtyStates, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QSGMaterialShader::RenderState::DirtyStates::Int() != a0->operator QSGMaterialShader::RenderState::DirtyStates::Int());
#line 15578 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
            sipReleaseType(const_cast< ::QSGMaterialShader::RenderState::DirtyStates *>(a0),sipType_QSGMaterialShader_RenderState_DirtyStates,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, ne_slot, sipType_QSGMaterialShader_RenderState_DirtyStates, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QSGMaterialShader_RenderState_DirtyStates___eq__(PyObject *,PyObject *);}
static PyObject *slot_QSGMaterialShader_RenderState_DirtyStates___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSGMaterialShader::RenderState::DirtyStates *sipCpp = reinterpret_cast< ::QSGMaterialShader::RenderState::DirtyStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGMaterialShader_RenderState_DirtyStates));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGMaterialShader::RenderState::DirtyStates* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QSGMaterialShader_RenderState_DirtyStates, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QSGMaterialShader::RenderState::DirtyStates::Int() == a0->operator QSGMaterialShader::RenderState::DirtyStates::Int());
#line 15614 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
            sipReleaseType(const_cast< ::QSGMaterialShader::RenderState::DirtyStates *>(a0),sipType_QSGMaterialShader_RenderState_DirtyStates,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, eq_slot, sipType_QSGMaterialShader_RenderState_DirtyStates, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QSGMaterialShader_RenderState_DirtyStates___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QSGMaterialShader_RenderState_DirtyStates___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSGMaterialShader_RenderState_DirtyStates)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSGMaterialShader::RenderState::DirtyStates *sipCpp = reinterpret_cast< ::QSGMaterialShader::RenderState::DirtyStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGMaterialShader_RenderState_DirtyStates));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QSGMaterialShader::RenderState::DirtyStates(*sipCpp ^ a0);
#line 15653 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSGMaterialShader_RenderState_DirtyStates___xor__(PyObject *,PyObject *);}
static PyObject *slot_QSGMaterialShader_RenderState_DirtyStates___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGMaterialShader::RenderState::DirtyStates* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QSGMaterialShader_RenderState_DirtyStates, &a0, &a0State, &a1))
        {
             ::QSGMaterialShader::RenderState::DirtyStates*sipRes;

            sipRes = new  ::QSGMaterialShader::RenderState::DirtyStates((*a0 ^ a1));
            sipReleaseType(a0,sipType_QSGMaterialShader_RenderState_DirtyStates,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSGMaterialShader_RenderState_DirtyStates,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSGMaterialShader_RenderState_DirtyStates___ior__(PyObject *,PyObject *);}
static PyObject *slot_QSGMaterialShader_RenderState_DirtyStates___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSGMaterialShader_RenderState_DirtyStates)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSGMaterialShader::RenderState::DirtyStates *sipCpp = reinterpret_cast< ::QSGMaterialShader::RenderState::DirtyStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGMaterialShader_RenderState_DirtyStates));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QSGMaterialShader::RenderState::DirtyStates(*sipCpp | a0);
#line 15725 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSGMaterialShader_RenderState_DirtyStates___or__(PyObject *,PyObject *);}
static PyObject *slot_QSGMaterialShader_RenderState_DirtyStates___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGMaterialShader::RenderState::DirtyStates* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QSGMaterialShader_RenderState_DirtyStates, &a0, &a0State, &a1))
        {
             ::QSGMaterialShader::RenderState::DirtyStates*sipRes;

            sipRes = new  ::QSGMaterialShader::RenderState::DirtyStates((*a0 | a1));
            sipReleaseType(a0,sipType_QSGMaterialShader_RenderState_DirtyStates,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSGMaterialShader_RenderState_DirtyStates,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSGMaterialShader_RenderState_DirtyStates___iand__(PyObject *,PyObject *);}
static PyObject *slot_QSGMaterialShader_RenderState_DirtyStates___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSGMaterialShader_RenderState_DirtyStates)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSGMaterialShader::RenderState::DirtyStates *sipCpp = reinterpret_cast< ::QSGMaterialShader::RenderState::DirtyStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGMaterialShader_RenderState_DirtyStates));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QSGMaterialShader::RenderState::DirtyStates::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSGMaterialShader_RenderState_DirtyStates___and__(PyObject *,PyObject *);}
static PyObject *slot_QSGMaterialShader_RenderState_DirtyStates___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGMaterialShader::RenderState::DirtyStates* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QSGMaterialShader_RenderState_DirtyStates, &a0, &a0State, &a1))
        {
             ::QSGMaterialShader::RenderState::DirtyStates*sipRes;

            sipRes = new  ::QSGMaterialShader::RenderState::DirtyStates((*a0 & a1));
            sipReleaseType(a0,sipType_QSGMaterialShader_RenderState_DirtyStates,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSGMaterialShader_RenderState_DirtyStates,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSGMaterialShader_RenderState_DirtyStates___invert__(PyObject *);}
static PyObject *slot_QSGMaterialShader_RenderState_DirtyStates___invert__(PyObject *sipSelf)
{
     ::QSGMaterialShader::RenderState::DirtyStates *sipCpp = reinterpret_cast< ::QSGMaterialShader::RenderState::DirtyStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGMaterialShader_RenderState_DirtyStates));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QSGMaterialShader::RenderState::DirtyStates*sipRes;

            sipRes = new  ::QSGMaterialShader::RenderState::DirtyStates(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QSGMaterialShader_RenderState_DirtyStates,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QSGMaterialShader_RenderState_DirtyStates___int__(PyObject *);}
static PyObject *slot_QSGMaterialShader_RenderState_DirtyStates___int__(PyObject *sipSelf)
{
     ::QSGMaterialShader::RenderState::DirtyStates *sipCpp = reinterpret_cast< ::QSGMaterialShader::RenderState::DirtyStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGMaterialShader_RenderState_DirtyStates));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGMaterialShader_RenderState_DirtyStates(void *, int);}
static void release_QSGMaterialShader_RenderState_DirtyStates(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSGMaterialShader::RenderState::DirtyStates *>(sipCppV);
}


extern "C" {static void assign_QSGMaterialShader_RenderState_DirtyStates(void *, SIP_SSIZE_T, void *);}
static void assign_QSGMaterialShader_RenderState_DirtyStates(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QSGMaterialShader::RenderState::DirtyStates *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QSGMaterialShader::RenderState::DirtyStates *>(sipSrc);
}


extern "C" {static void *array_QSGMaterialShader_RenderState_DirtyStates(SIP_SSIZE_T);}
static void *array_QSGMaterialShader_RenderState_DirtyStates(SIP_SSIZE_T sipNrElem)
{
    return new  ::QSGMaterialShader::RenderState::DirtyStates[sipNrElem];
}


extern "C" {static void *copy_QSGMaterialShader_RenderState_DirtyStates(const void *, SIP_SSIZE_T);}
static void *copy_QSGMaterialShader_RenderState_DirtyStates(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QSGMaterialShader::RenderState::DirtyStates(reinterpret_cast<const  ::QSGMaterialShader::RenderState::DirtyStates *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSGMaterialShader_RenderState_DirtyStates(sipSimpleWrapper *);}
static void dealloc_QSGMaterialShader_RenderState_DirtyStates(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGMaterialShader_RenderState_DirtyStates(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QSGMaterialShader_RenderState_DirtyStates(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGMaterialShader_RenderState_DirtyStates(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QSGMaterialShader::RenderState::DirtyStates *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QSGMaterialShader::RenderState::DirtyStates();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QSGMaterialShader::RenderState::DirtyStates(a0);

            return sipCpp;
        }
    }

    {
        const  ::QSGMaterialShader::RenderState::DirtyStates* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QSGMaterialShader_RenderState_DirtyStates, &a0, &a0State))
        {
            sipCpp = new  ::QSGMaterialShader::RenderState::DirtyStates(*a0);
            sipReleaseType(const_cast< ::QSGMaterialShader::RenderState::DirtyStates *>(a0),sipType_QSGMaterialShader_RenderState_DirtyStates,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QSGMaterialShader_RenderState_DirtyStates(PyObject *, void **, int *, PyObject *);}
static int convertTo_QSGMaterialShader_RenderState_DirtyStates(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QSGMaterialShader::RenderState::DirtyStates **sipCppPtr = reinterpret_cast< ::QSGMaterialShader::RenderState::DirtyStates **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QSGMaterialShader::RenderState::DirtyStates is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QSGMaterialShader_RenderState_DirtyState)) ||
            sipCanConvertToType(sipPy, sipType_QSGMaterialShader_RenderState_DirtyStates, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QSGMaterialShader_RenderState_DirtyState)))
{
    *sipCppPtr = new QSGMaterialShader::RenderState::DirtyStates(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QSGMaterialShader::RenderState::DirtyStates *>(sipConvertToType(sipPy, sipType_QSGMaterialShader_RenderState_DirtyStates, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 15993 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QSGMaterialShader_RenderState_DirtyStates[] = {
    {(void *)slot_QSGMaterialShader_RenderState_DirtyStates___hash__, hash_slot},
    {(void *)slot_QSGMaterialShader_RenderState_DirtyStates___bool__, bool_slot},
    {(void *)slot_QSGMaterialShader_RenderState_DirtyStates___ne__, ne_slot},
    {(void *)slot_QSGMaterialShader_RenderState_DirtyStates___eq__, eq_slot},
    {(void *)slot_QSGMaterialShader_RenderState_DirtyStates___ixor__, ixor_slot},
    {(void *)slot_QSGMaterialShader_RenderState_DirtyStates___xor__, xor_slot},
    {(void *)slot_QSGMaterialShader_RenderState_DirtyStates___ior__, ior_slot},
    {(void *)slot_QSGMaterialShader_RenderState_DirtyStates___or__, or_slot},
    {(void *)slot_QSGMaterialShader_RenderState_DirtyStates___iand__, iand_slot},
    {(void *)slot_QSGMaterialShader_RenderState_DirtyStates___and__, and_slot},
    {(void *)slot_QSGMaterialShader_RenderState_DirtyStates___invert__, invert_slot},
    {(void *)slot_QSGMaterialShader_RenderState_DirtyStates___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QSGMaterialShader_RenderState_DirtyStates, "\1QSGMaterialShader.RenderState.DirtyStates()\n"
"QSGMaterialShader.RenderState.DirtyStates(Union[QSGMaterialShader.RenderState.DirtyStates, QSGMaterialShader.RenderState.DirtyState])\n"
"QSGMaterialShader.RenderState.DirtyStates(QSGMaterialShader.RenderState.DirtyStates)");


static pyqt5ClassPluginDef plugin_QSGMaterialShader_RenderState_DirtyStates = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGMaterialShader_RenderState_DirtyStates = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGMaterialShader__RenderState__DirtyStates,
        {SIP_NULLPTR},
        &plugin_QSGMaterialShader_RenderState_DirtyStates
    },
    {
        sipNameNr_DirtyStates,
        {59, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSGMaterialShader_RenderState_DirtyStates,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QSGMaterialShader_RenderState_DirtyStates,
    init_type_QSGMaterialShader_RenderState_DirtyStates,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGMaterialShader_RenderState_DirtyStates,
    assign_QSGMaterialShader_RenderState_DirtyStates,
    array_QSGMaterialShader_RenderState_DirtyStates,
    copy_QSGMaterialShader_RenderState_DirtyStates,
    release_QSGMaterialShader_RenderState_DirtyStates,
    SIP_NULLPTR,
    convertTo_QSGMaterialShader_RenderState_DirtyStates,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 33 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 16083 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

#line 30 "sip/QtGui/qmatrix4x4.sip"
#include <qmatrix4x4.h>
#line 16087 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 46 "sip/QtGui/qopenglcontext.sip"
#include <qopenglcontext.h>
#line 16090 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 16093 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 33 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 16098 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"


PyDoc_STRVAR(doc_QSGMaterialShader_RenderState_dirtyStates, "dirtyStates(self) -> QSGMaterialShader.RenderState.DirtyStates");

extern "C" {static PyObject *meth_QSGMaterialShader_RenderState_dirtyStates(PyObject *, PyObject *);}
static PyObject *meth_QSGMaterialShader_RenderState_dirtyStates(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGMaterialShader::RenderState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGMaterialShader_RenderState, &sipCpp))
        {
             ::QSGMaterialShader::RenderState::DirtyStates*sipRes;

            sipRes = new  ::QSGMaterialShader::RenderState::DirtyStates(sipCpp->dirtyStates());

            return sipConvertFromNewType(sipRes,sipType_QSGMaterialShader_RenderState_DirtyStates,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RenderState, sipName_dirtyStates, doc_QSGMaterialShader_RenderState_dirtyStates);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGMaterialShader_RenderState_isMatrixDirty, "isMatrixDirty(self) -> bool");

extern "C" {static PyObject *meth_QSGMaterialShader_RenderState_isMatrixDirty(PyObject *, PyObject *);}
static PyObject *meth_QSGMaterialShader_RenderState_isMatrixDirty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGMaterialShader::RenderState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGMaterialShader_RenderState, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isMatrixDirty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RenderState, sipName_isMatrixDirty, doc_QSGMaterialShader_RenderState_isMatrixDirty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGMaterialShader_RenderState_isOpacityDirty, "isOpacityDirty(self) -> bool");

extern "C" {static PyObject *meth_QSGMaterialShader_RenderState_isOpacityDirty(PyObject *, PyObject *);}
static PyObject *meth_QSGMaterialShader_RenderState_isOpacityDirty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGMaterialShader::RenderState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGMaterialShader_RenderState, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isOpacityDirty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RenderState, sipName_isOpacityDirty, doc_QSGMaterialShader_RenderState_isOpacityDirty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGMaterialShader_RenderState_opacity, "opacity(self) -> float");

extern "C" {static PyObject *meth_QSGMaterialShader_RenderState_opacity(PyObject *, PyObject *);}
static PyObject *meth_QSGMaterialShader_RenderState_opacity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGMaterialShader::RenderState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGMaterialShader_RenderState, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->opacity();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RenderState, sipName_opacity, doc_QSGMaterialShader_RenderState_opacity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGMaterialShader_RenderState_combinedMatrix, "combinedMatrix(self) -> QMatrix4x4");

extern "C" {static PyObject *meth_QSGMaterialShader_RenderState_combinedMatrix(PyObject *, PyObject *);}
static PyObject *meth_QSGMaterialShader_RenderState_combinedMatrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGMaterialShader::RenderState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGMaterialShader_RenderState, &sipCpp))
        {
             ::QMatrix4x4*sipRes;

            sipRes = new  ::QMatrix4x4(sipCpp->combinedMatrix());

            return sipConvertFromNewType(sipRes,sipType_QMatrix4x4,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RenderState, sipName_combinedMatrix, doc_QSGMaterialShader_RenderState_combinedMatrix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGMaterialShader_RenderState_modelViewMatrix, "modelViewMatrix(self) -> QMatrix4x4");

extern "C" {static PyObject *meth_QSGMaterialShader_RenderState_modelViewMatrix(PyObject *, PyObject *);}
static PyObject *meth_QSGMaterialShader_RenderState_modelViewMatrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGMaterialShader::RenderState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGMaterialShader_RenderState, &sipCpp))
        {
             ::QMatrix4x4*sipRes;

            sipRes = new  ::QMatrix4x4(sipCpp->modelViewMatrix());

            return sipConvertFromNewType(sipRes,sipType_QMatrix4x4,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RenderState, sipName_modelViewMatrix, doc_QSGMaterialShader_RenderState_modelViewMatrix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGMaterialShader_RenderState_viewportRect, "viewportRect(self) -> QRect");

extern "C" {static PyObject *meth_QSGMaterialShader_RenderState_viewportRect(PyObject *, PyObject *);}
static PyObject *meth_QSGMaterialShader_RenderState_viewportRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGMaterialShader::RenderState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGMaterialShader_RenderState, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->viewportRect());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RenderState, sipName_viewportRect, doc_QSGMaterialShader_RenderState_viewportRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGMaterialShader_RenderState_deviceRect, "deviceRect(self) -> QRect");

extern "C" {static PyObject *meth_QSGMaterialShader_RenderState_deviceRect(PyObject *, PyObject *);}
static PyObject *meth_QSGMaterialShader_RenderState_deviceRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGMaterialShader::RenderState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGMaterialShader_RenderState, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->deviceRect());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RenderState, sipName_deviceRect, doc_QSGMaterialShader_RenderState_deviceRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGMaterialShader_RenderState_determinant, "determinant(self) -> float");

extern "C" {static PyObject *meth_QSGMaterialShader_RenderState_determinant(PyObject *, PyObject *);}
static PyObject *meth_QSGMaterialShader_RenderState_determinant(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGMaterialShader::RenderState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGMaterialShader_RenderState, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->determinant();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RenderState, sipName_determinant, doc_QSGMaterialShader_RenderState_determinant);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGMaterialShader_RenderState_context, "context(self) -> QOpenGLContext");

extern "C" {static PyObject *meth_QSGMaterialShader_RenderState_context(PyObject *, PyObject *);}
static PyObject *meth_QSGMaterialShader_RenderState_context(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGMaterialShader::RenderState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGMaterialShader_RenderState, &sipCpp))
        {
             ::QOpenGLContext*sipRes;

            sipRes = sipCpp->context();

            return sipConvertFromType(sipRes,sipType_QOpenGLContext,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RenderState, sipName_context, doc_QSGMaterialShader_RenderState_context);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGMaterialShader_RenderState_projectionMatrix, "projectionMatrix(self) -> QMatrix4x4");

extern "C" {static PyObject *meth_QSGMaterialShader_RenderState_projectionMatrix(PyObject *, PyObject *);}
static PyObject *meth_QSGMaterialShader_RenderState_projectionMatrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGMaterialShader::RenderState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGMaterialShader_RenderState, &sipCpp))
        {
             ::QMatrix4x4*sipRes;

            sipRes = new  ::QMatrix4x4(sipCpp->projectionMatrix());

            return sipConvertFromNewType(sipRes,sipType_QMatrix4x4,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RenderState, sipName_projectionMatrix, doc_QSGMaterialShader_RenderState_projectionMatrix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGMaterialShader_RenderState_devicePixelRatio, "devicePixelRatio(self) -> float");

extern "C" {static PyObject *meth_QSGMaterialShader_RenderState_devicePixelRatio(PyObject *, PyObject *);}
static PyObject *meth_QSGMaterialShader_RenderState_devicePixelRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGMaterialShader::RenderState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGMaterialShader_RenderState, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->devicePixelRatio();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RenderState, sipName_devicePixelRatio, doc_QSGMaterialShader_RenderState_devicePixelRatio);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGMaterialShader_RenderState_isCachedMaterialDataDirty, "isCachedMaterialDataDirty(self) -> bool");

extern "C" {static PyObject *meth_QSGMaterialShader_RenderState_isCachedMaterialDataDirty(PyObject *, PyObject *);}
static PyObject *meth_QSGMaterialShader_RenderState_isCachedMaterialDataDirty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGMaterialShader::RenderState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGMaterialShader_RenderState, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isCachedMaterialDataDirty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RenderState, sipName_isCachedMaterialDataDirty, doc_QSGMaterialShader_RenderState_isCachedMaterialDataDirty);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGMaterialShader_RenderState(void *, int);}
static void release_QSGMaterialShader_RenderState(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSGMaterialShader::RenderState *>(sipCppV);
}


extern "C" {static void assign_QSGMaterialShader_RenderState(void *, SIP_SSIZE_T, void *);}
static void assign_QSGMaterialShader_RenderState(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QSGMaterialShader::RenderState *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QSGMaterialShader::RenderState *>(sipSrc);
}


extern "C" {static void *array_QSGMaterialShader_RenderState(SIP_SSIZE_T);}
static void *array_QSGMaterialShader_RenderState(SIP_SSIZE_T sipNrElem)
{
    return new  ::QSGMaterialShader::RenderState[sipNrElem];
}


extern "C" {static void *copy_QSGMaterialShader_RenderState(const void *, SIP_SSIZE_T);}
static void *copy_QSGMaterialShader_RenderState(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QSGMaterialShader::RenderState(reinterpret_cast<const  ::QSGMaterialShader::RenderState *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSGMaterialShader_RenderState(sipSimpleWrapper *);}
static void dealloc_QSGMaterialShader_RenderState(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGMaterialShader_RenderState(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QSGMaterialShader_RenderState(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGMaterialShader_RenderState(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QSGMaterialShader::RenderState *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QSGMaterialShader::RenderState();

            return sipCpp;
        }
    }

    {
        const  ::QSGMaterialShader::RenderState* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QSGMaterialShader_RenderState, &a0))
        {
            sipCpp = new  ::QSGMaterialShader::RenderState(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QSGMaterialShader_RenderState[] = {
    {SIP_MLNAME_CAST(sipName_combinedMatrix), meth_QSGMaterialShader_RenderState_combinedMatrix, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGMaterialShader_RenderState_combinedMatrix)},
    {SIP_MLNAME_CAST(sipName_context), meth_QSGMaterialShader_RenderState_context, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGMaterialShader_RenderState_context)},
    {SIP_MLNAME_CAST(sipName_determinant), meth_QSGMaterialShader_RenderState_determinant, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGMaterialShader_RenderState_determinant)},
    {SIP_MLNAME_CAST(sipName_devicePixelRatio), meth_QSGMaterialShader_RenderState_devicePixelRatio, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGMaterialShader_RenderState_devicePixelRatio)},
    {SIP_MLNAME_CAST(sipName_deviceRect), meth_QSGMaterialShader_RenderState_deviceRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGMaterialShader_RenderState_deviceRect)},
    {SIP_MLNAME_CAST(sipName_dirtyStates), meth_QSGMaterialShader_RenderState_dirtyStates, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGMaterialShader_RenderState_dirtyStates)},
    {SIP_MLNAME_CAST(sipName_isCachedMaterialDataDirty), meth_QSGMaterialShader_RenderState_isCachedMaterialDataDirty, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGMaterialShader_RenderState_isCachedMaterialDataDirty)},
    {SIP_MLNAME_CAST(sipName_isMatrixDirty), meth_QSGMaterialShader_RenderState_isMatrixDirty, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGMaterialShader_RenderState_isMatrixDirty)},
    {SIP_MLNAME_CAST(sipName_isOpacityDirty), meth_QSGMaterialShader_RenderState_isOpacityDirty, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGMaterialShader_RenderState_isOpacityDirty)},
    {SIP_MLNAME_CAST(sipName_modelViewMatrix), meth_QSGMaterialShader_RenderState_modelViewMatrix, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGMaterialShader_RenderState_modelViewMatrix)},
    {SIP_MLNAME_CAST(sipName_opacity), meth_QSGMaterialShader_RenderState_opacity, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGMaterialShader_RenderState_opacity)},
    {SIP_MLNAME_CAST(sipName_projectionMatrix), meth_QSGMaterialShader_RenderState_projectionMatrix, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGMaterialShader_RenderState_projectionMatrix)},
    {SIP_MLNAME_CAST(sipName_viewportRect), meth_QSGMaterialShader_RenderState_viewportRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGMaterialShader_RenderState_viewportRect)}
};

static sipEnumMemberDef enummembers_QSGMaterialShader_RenderState[] = {
    {sipName_DirtyAll, static_cast<int>( ::QSGMaterialShader::RenderState::DirtyAll), 60},
    {sipName_DirtyCachedMaterialData, static_cast<int>( ::QSGMaterialShader::RenderState::DirtyCachedMaterialData), 60},
    {sipName_DirtyMatrix, static_cast<int>( ::QSGMaterialShader::RenderState::DirtyMatrix), 60},
    {sipName_DirtyOpacity, static_cast<int>( ::QSGMaterialShader::RenderState::DirtyOpacity), 60},
};

PyDoc_STRVAR(doc_QSGMaterialShader_RenderState, "\1QSGMaterialShader.RenderState()\n"
"QSGMaterialShader.RenderState(QSGMaterialShader.RenderState)");


static pyqt5ClassPluginDef plugin_QSGMaterialShader_RenderState = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGMaterialShader_RenderState = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGMaterialShader__RenderState,
        {SIP_NULLPTR},
        &plugin_QSGMaterialShader_RenderState
    },
    {
        sipNameNr_RenderState,
        {58, 255, 0},
        13, methods_QSGMaterialShader_RenderState,
        4, enummembers_QSGMaterialShader_RenderState,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSGMaterialShader_RenderState,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QSGMaterialShader_RenderState,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGMaterialShader_RenderState,
    assign_QSGMaterialShader_RenderState,
    array_QSGMaterialShader_RenderState,
    copy_QSGMaterialShader_RenderState,
    release_QSGMaterialShader_RenderState,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 16621 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

#line 28 "sip/QtGui/qopenglshaderprogram.sip"
#include <qopenglshaderprogram.h>
#line 16625 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 16628 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 16631 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 73 "sip/QtGui/qopenglshaderprogram.sip"
#include <qopenglshaderprogram.h>
#line 16634 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 33 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 16639 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 165 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 16642 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"


class sipQSGMaterialShader : public  ::QSGMaterialShader
{
public:
    sipQSGMaterialShader();
    virtual ~sipQSGMaterialShader();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    const char* fragmentShader() const SIP_OVERRIDE;
    const char* vertexShader() const SIP_OVERRIDE;
    void initialize() SIP_OVERRIDE;
    void compile() SIP_OVERRIDE;
    const char* const* attributeNames() const SIP_OVERRIDE;
    void updateState(const  ::QSGMaterialShader::RenderState&, ::QSGMaterial*, ::QSGMaterial*) SIP_OVERRIDE;
    void deactivate() SIP_OVERRIDE;
    void activate() SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSGMaterialShader(const sipQSGMaterialShader &);
    sipQSGMaterialShader &operator = (const sipQSGMaterialShader &);

    char sipPyMethods[8];
};

sipQSGMaterialShader::sipQSGMaterialShader():  ::QSGMaterialShader(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSGMaterialShader::~sipQSGMaterialShader()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const char* sipQSGMaterialShader::fragmentShader() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_fragmentShader);

    if (!sipMeth)
        return  ::QSGMaterialShader::fragmentShader();

    extern const char* sipVH_QtQuick_67(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtQuick_67(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, -3);
}

const char* sipQSGMaterialShader::vertexShader() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_vertexShader);

    if (!sipMeth)
        return  ::QSGMaterialShader::vertexShader();

    extern const char* sipVH_QtQuick_67(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtQuick_67(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, -4);
}

void sipQSGMaterialShader::initialize()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_initialize);

    if (!sipMeth)
    {
         ::QSGMaterialShader::initialize();
        return;
    }

    extern void sipVH_QtQuick_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtQuick_6(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQSGMaterialShader::compile()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_compile);

    if (!sipMeth)
    {
         ::QSGMaterialShader::compile();
        return;
    }

    extern void sipVH_QtQuick_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtQuick_6(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

const char* const* sipQSGMaterialShader::attributeNames() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,sipName_QSGMaterialShader,sipName_attributeNames);

    if (!sipMeth)
        return 0;

    extern const char* const* sipVH_QtQuick_66(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtQuick_66(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, -5);
}

void sipQSGMaterialShader::updateState(const  ::QSGMaterialShader::RenderState& a0, ::QSGMaterial*a1, ::QSGMaterial*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_updateState);

    if (!sipMeth)
    {
         ::QSGMaterialShader::updateState(a0,a1,a2);
        return;
    }

    extern void sipVH_QtQuick_65(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QSGMaterialShader::RenderState&, ::QSGMaterial*, ::QSGMaterial*);

    sipVH_QtQuick_65(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQSGMaterialShader::deactivate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_deactivate);

    if (!sipMeth)
    {
         ::QSGMaterialShader::deactivate();
        return;
    }

    extern void sipVH_QtQuick_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtQuick_6(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQSGMaterialShader::activate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_activate);

    if (!sipMeth)
    {
         ::QSGMaterialShader::activate();
        return;
    }

    extern void sipVH_QtQuick_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtQuick_6(sipGILState, sipImportedVirtErrorHandlers_QtQuick_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QSGMaterialShader_activate, "activate(self)");

extern "C" {static PyObject *meth_QSGMaterialShader_activate(PyObject *, PyObject *);}
static PyObject *meth_QSGMaterialShader_activate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QSGMaterialShader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGMaterialShader, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QSGMaterialShader::activate() : sipCpp->activate());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGMaterialShader, sipName_activate, doc_QSGMaterialShader_activate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGMaterialShader_deactivate, "deactivate(self)");

extern "C" {static PyObject *meth_QSGMaterialShader_deactivate(PyObject *, PyObject *);}
static PyObject *meth_QSGMaterialShader_deactivate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QSGMaterialShader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGMaterialShader, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QSGMaterialShader::deactivate() : sipCpp->deactivate());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGMaterialShader, sipName_deactivate, doc_QSGMaterialShader_deactivate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGMaterialShader_updateState, "updateState(self, QSGMaterialShader.RenderState, QSGMaterial, QSGMaterial)");

extern "C" {static PyObject *meth_QSGMaterialShader_updateState(PyObject *, PyObject *);}
static PyObject *meth_QSGMaterialShader_updateState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSGMaterialShader::RenderState* a0;
         ::QSGMaterial* a1;
         ::QSGMaterial* a2;
         ::QSGMaterialShader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J8J8", &sipSelf, sipType_QSGMaterialShader, &sipCpp, sipType_QSGMaterialShader_RenderState, &a0, sipType_QSGMaterial, &a1, sipType_QSGMaterial, &a2))
        {
            (sipSelfWasArg ? sipCpp-> ::QSGMaterialShader::updateState(*a0,a1,a2) : sipCpp->updateState(*a0,a1,a2));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGMaterialShader, sipName_updateState, doc_QSGMaterialShader_updateState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGMaterialShader_attributeNames, "attributeNames(self) -> List[str]");

extern "C" {static PyObject *meth_QSGMaterialShader_attributeNames(PyObject *, PyObject *);}
static PyObject *meth_QSGMaterialShader_attributeNames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QSGMaterialShader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGMaterialShader, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSGMaterialShader, sipName_attributeNames);
                return SIP_NULLPTR;
            }

#line 78 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
        const char * const *names = sipCpp->attributeNames();
        
        Py_ssize_t nr_names = 0;
        
        if (names)
            while (names[nr_names])
                ++nr_names;
            
        sipRes = PyList_New(nr_names);
            
        if (!sipRes)
            sipIsErr = 1;
        else
            for (Py_ssize_t i = 0; i < nr_names; ++i)
            {
                const char *name = names[i];
                PyObject *el;
        
        #if PY_MAJOR_VERSION >= 3
                el = PyUnicode_DecodeASCII(name, strlen(name), 0);
        #else
                el = PyString_FromString(name);
        #endif
                
                if (!el)
                {
                    Py_DECREF(sipRes);
                    sipIsErr = 1;
                    break;
                }
        
                PyList_SetItem(sipRes, i, el);
            }
#line 16965 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGMaterialShader, sipName_attributeNames, doc_QSGMaterialShader_attributeNames);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGMaterialShader_program, "program(self) -> QOpenGLShaderProgram");

extern "C" {static PyObject *meth_QSGMaterialShader_program(PyObject *, PyObject *);}
static PyObject *meth_QSGMaterialShader_program(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGMaterialShader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGMaterialShader, &sipCpp))
        {
             ::QOpenGLShaderProgram*sipRes;

            sipRes = sipCpp->program();

            return sipConvertFromType(sipRes,sipType_QOpenGLShaderProgram,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGMaterialShader, sipName_program, doc_QSGMaterialShader_program);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGMaterialShader_compile, "compile(self)");

extern "C" {static PyObject *meth_QSGMaterialShader_compile(PyObject *, PyObject *);}
static PyObject *meth_QSGMaterialShader_compile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QSGMaterialShader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSGMaterialShader, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QSGMaterialShader::compile() : sipCpp->compile());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGMaterialShader, sipName_compile, doc_QSGMaterialShader_compile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGMaterialShader_initialize, "initialize(self)");

extern "C" {static PyObject *meth_QSGMaterialShader_initialize(PyObject *, PyObject *);}
static PyObject *meth_QSGMaterialShader_initialize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QSGMaterialShader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSGMaterialShader, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QSGMaterialShader::initialize() : sipCpp->initialize());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGMaterialShader, sipName_initialize, doc_QSGMaterialShader_initialize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGMaterialShader_vertexShader, "vertexShader(self) -> str");

extern "C" {static PyObject *meth_QSGMaterialShader_vertexShader(PyObject *, PyObject *);}
static PyObject *meth_QSGMaterialShader_vertexShader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSGMaterialShader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSGMaterialShader, &sipCpp))
        {
            const char*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSGMaterialShader::vertexShader() : sipCpp->vertexShader());

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_DecodeASCII(sipRes, strlen(sipRes), SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGMaterialShader, sipName_vertexShader, doc_QSGMaterialShader_vertexShader);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGMaterialShader_fragmentShader, "fragmentShader(self) -> str");

extern "C" {static PyObject *meth_QSGMaterialShader_fragmentShader(PyObject *, PyObject *);}
static PyObject *meth_QSGMaterialShader_fragmentShader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSGMaterialShader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSGMaterialShader, &sipCpp))
        {
            const char*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSGMaterialShader::fragmentShader() : sipCpp->fragmentShader());

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_DecodeASCII(sipRes, strlen(sipRes), SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGMaterialShader, sipName_fragmentShader, doc_QSGMaterialShader_fragmentShader);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGMaterialShader_setShaderSourceFile, "setShaderSourceFile(self, Union[QOpenGLShader.ShaderType, QOpenGLShader.ShaderTypeBit], str)");

extern "C" {static PyObject *meth_QSGMaterialShader_setShaderSourceFile(PyObject *, PyObject *);}
static PyObject *meth_QSGMaterialShader_setShaderSourceFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLShader::ShaderType* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QSGMaterialShader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1J1", &sipSelf, sipType_QSGMaterialShader, &sipCpp, sipType_QOpenGLShader_ShaderType, &a0, &a0State, sipType_QString,&a1, &a1State))
        {
            sipCpp->setShaderSourceFile(*a0,*a1);
            sipReleaseType(a0,sipType_QOpenGLShader_ShaderType,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGMaterialShader, sipName_setShaderSourceFile, doc_QSGMaterialShader_setShaderSourceFile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGMaterialShader_setShaderSourceFiles, "setShaderSourceFiles(self, Union[QOpenGLShader.ShaderType, QOpenGLShader.ShaderTypeBit], Iterable[str])");

extern "C" {static PyObject *meth_QSGMaterialShader_setShaderSourceFiles(PyObject *, PyObject *);}
static PyObject *meth_QSGMaterialShader_setShaderSourceFiles(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QOpenGLShader::ShaderType* a0;
        int a0State = 0;
        const  ::QStringList* a1;
        int a1State = 0;
         ::QSGMaterialShader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1J1", &sipSelf, sipType_QSGMaterialShader, &sipCpp, sipType_QOpenGLShader_ShaderType, &a0, &a0State, sipType_QStringList,&a1, &a1State))
        {
            sipCpp->setShaderSourceFiles(*a0,*a1);
            sipReleaseType(a0,sipType_QOpenGLShader_ShaderType,a0State);
            sipReleaseType(const_cast< ::QStringList *>(a1),sipType_QStringList,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGMaterialShader, sipName_setShaderSourceFiles, doc_QSGMaterialShader_setShaderSourceFiles);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGMaterialShader(void *, int);}
static void release_QSGMaterialShader(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQSGMaterialShader *>(sipCppV);
    else
        delete reinterpret_cast< ::QSGMaterialShader *>(sipCppV);
}


extern "C" {static void dealloc_QSGMaterialShader(sipSimpleWrapper *);}
static void dealloc_QSGMaterialShader(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSGMaterialShader *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGMaterialShader(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSGMaterialShader(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGMaterialShader(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQSGMaterialShader *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQSGMaterialShader();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QSGMaterialShader[] = {
    {SIP_MLNAME_CAST(sipName_activate), meth_QSGMaterialShader_activate, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGMaterialShader_activate)},
    {SIP_MLNAME_CAST(sipName_attributeNames), meth_QSGMaterialShader_attributeNames, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGMaterialShader_attributeNames)},
    {SIP_MLNAME_CAST(sipName_compile), meth_QSGMaterialShader_compile, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGMaterialShader_compile)},
    {SIP_MLNAME_CAST(sipName_deactivate), meth_QSGMaterialShader_deactivate, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGMaterialShader_deactivate)},
    {SIP_MLNAME_CAST(sipName_fragmentShader), meth_QSGMaterialShader_fragmentShader, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGMaterialShader_fragmentShader)},
    {SIP_MLNAME_CAST(sipName_initialize), meth_QSGMaterialShader_initialize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGMaterialShader_initialize)},
    {SIP_MLNAME_CAST(sipName_program), meth_QSGMaterialShader_program, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGMaterialShader_program)},
    {SIP_MLNAME_CAST(sipName_setShaderSourceFile), meth_QSGMaterialShader_setShaderSourceFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGMaterialShader_setShaderSourceFile)},
    {SIP_MLNAME_CAST(sipName_setShaderSourceFiles), meth_QSGMaterialShader_setShaderSourceFiles, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGMaterialShader_setShaderSourceFiles)},
    {SIP_MLNAME_CAST(sipName_updateState), meth_QSGMaterialShader_updateState, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGMaterialShader_updateState)},
    {SIP_MLNAME_CAST(sipName_vertexShader), meth_QSGMaterialShader_vertexShader, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGMaterialShader_vertexShader)}
};

PyDoc_STRVAR(doc_QSGMaterialShader, "\1QSGMaterialShader()");


static pyqt5ClassPluginDef plugin_QSGMaterialShader = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGMaterialShader = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGMaterialShader,
        {SIP_NULLPTR},
        &plugin_QSGMaterialShader
    },
    {
        sipNameNr_QSGMaterialShader,
        {0, 0, 1},
        11, methods_QSGMaterialShader,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSGMaterialShader,
    -1,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QSGMaterialShader,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGMaterialShader,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSGMaterialShader,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgimagenode.sip"
#include <qsgimagenode.h>
#line 17322 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgimagenode.sip"
#include <qsgimagenode.h>
#line 17326 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"


extern "C" {static long slot_QSGImageNode_TextureCoordinatesTransformMode___hash__(PyObject *);}
static long slot_QSGImageNode_TextureCoordinatesTransformMode___hash__(PyObject *sipSelf)
{
     ::QSGImageNode::TextureCoordinatesTransformMode *sipCpp = reinterpret_cast< ::QSGImageNode::TextureCoordinatesTransformMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGImageNode_TextureCoordinatesTransformMode));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QSGImageNode::TextureCoordinatesTransformMode::Int();
#line 17344 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QSGImageNode_TextureCoordinatesTransformMode___bool__(PyObject *);}
static int slot_QSGImageNode_TextureCoordinatesTransformMode___bool__(PyObject *sipSelf)
{
     ::QSGImageNode::TextureCoordinatesTransformMode *sipCpp = reinterpret_cast< ::QSGImageNode::TextureCoordinatesTransformMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGImageNode_TextureCoordinatesTransformMode));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QSGImageNode::TextureCoordinatesTransformMode::Int() != 0);
#line 17369 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QSGImageNode_TextureCoordinatesTransformMode___ne__(PyObject *,PyObject *);}
static PyObject *slot_QSGImageNode_TextureCoordinatesTransformMode___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSGImageNode::TextureCoordinatesTransformMode *sipCpp = reinterpret_cast< ::QSGImageNode::TextureCoordinatesTransformMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGImageNode_TextureCoordinatesTransformMode));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGImageNode::TextureCoordinatesTransformMode* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QSGImageNode_TextureCoordinatesTransformMode, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QSGImageNode::TextureCoordinatesTransformMode::Int() != a0->operator QSGImageNode::TextureCoordinatesTransformMode::Int());
#line 17399 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
            sipReleaseType(const_cast< ::QSGImageNode::TextureCoordinatesTransformMode *>(a0),sipType_QSGImageNode_TextureCoordinatesTransformMode,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, ne_slot, sipType_QSGImageNode_TextureCoordinatesTransformMode, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QSGImageNode_TextureCoordinatesTransformMode___eq__(PyObject *,PyObject *);}
static PyObject *slot_QSGImageNode_TextureCoordinatesTransformMode___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSGImageNode::TextureCoordinatesTransformMode *sipCpp = reinterpret_cast< ::QSGImageNode::TextureCoordinatesTransformMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGImageNode_TextureCoordinatesTransformMode));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSGImageNode::TextureCoordinatesTransformMode* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QSGImageNode_TextureCoordinatesTransformMode, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QSGImageNode::TextureCoordinatesTransformMode::Int() == a0->operator QSGImageNode::TextureCoordinatesTransformMode::Int());
#line 17435 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
            sipReleaseType(const_cast< ::QSGImageNode::TextureCoordinatesTransformMode *>(a0),sipType_QSGImageNode_TextureCoordinatesTransformMode,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, eq_slot, sipType_QSGImageNode_TextureCoordinatesTransformMode, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QSGImageNode_TextureCoordinatesTransformMode___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QSGImageNode_TextureCoordinatesTransformMode___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSGImageNode_TextureCoordinatesTransformMode)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSGImageNode::TextureCoordinatesTransformMode *sipCpp = reinterpret_cast< ::QSGImageNode::TextureCoordinatesTransformMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGImageNode_TextureCoordinatesTransformMode));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QSGImageNode::TextureCoordinatesTransformMode(*sipCpp ^ a0);
#line 17474 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSGImageNode_TextureCoordinatesTransformMode___xor__(PyObject *,PyObject *);}
static PyObject *slot_QSGImageNode_TextureCoordinatesTransformMode___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGImageNode::TextureCoordinatesTransformMode* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QSGImageNode_TextureCoordinatesTransformMode, &a0, &a0State, &a1))
        {
             ::QSGImageNode::TextureCoordinatesTransformMode*sipRes;

            sipRes = new  ::QSGImageNode::TextureCoordinatesTransformMode((*a0 ^ a1));
            sipReleaseType(a0,sipType_QSGImageNode_TextureCoordinatesTransformMode,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSGImageNode_TextureCoordinatesTransformMode,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSGImageNode_TextureCoordinatesTransformMode___ior__(PyObject *,PyObject *);}
static PyObject *slot_QSGImageNode_TextureCoordinatesTransformMode___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSGImageNode_TextureCoordinatesTransformMode)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSGImageNode::TextureCoordinatesTransformMode *sipCpp = reinterpret_cast< ::QSGImageNode::TextureCoordinatesTransformMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGImageNode_TextureCoordinatesTransformMode));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QSGImageNode::TextureCoordinatesTransformMode(*sipCpp | a0);
#line 17546 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSGImageNode_TextureCoordinatesTransformMode___or__(PyObject *,PyObject *);}
static PyObject *slot_QSGImageNode_TextureCoordinatesTransformMode___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGImageNode::TextureCoordinatesTransformMode* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QSGImageNode_TextureCoordinatesTransformMode, &a0, &a0State, &a1))
        {
             ::QSGImageNode::TextureCoordinatesTransformMode*sipRes;

            sipRes = new  ::QSGImageNode::TextureCoordinatesTransformMode((*a0 | a1));
            sipReleaseType(a0,sipType_QSGImageNode_TextureCoordinatesTransformMode,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSGImageNode_TextureCoordinatesTransformMode,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSGImageNode_TextureCoordinatesTransformMode___iand__(PyObject *,PyObject *);}
static PyObject *slot_QSGImageNode_TextureCoordinatesTransformMode___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSGImageNode_TextureCoordinatesTransformMode)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSGImageNode::TextureCoordinatesTransformMode *sipCpp = reinterpret_cast< ::QSGImageNode::TextureCoordinatesTransformMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGImageNode_TextureCoordinatesTransformMode));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QSGImageNode::TextureCoordinatesTransformMode::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSGImageNode_TextureCoordinatesTransformMode___and__(PyObject *,PyObject *);}
static PyObject *slot_QSGImageNode_TextureCoordinatesTransformMode___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGImageNode::TextureCoordinatesTransformMode* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QSGImageNode_TextureCoordinatesTransformMode, &a0, &a0State, &a1))
        {
             ::QSGImageNode::TextureCoordinatesTransformMode*sipRes;

            sipRes = new  ::QSGImageNode::TextureCoordinatesTransformMode((*a0 & a1));
            sipReleaseType(a0,sipType_QSGImageNode_TextureCoordinatesTransformMode,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSGImageNode_TextureCoordinatesTransformMode,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQuick, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSGImageNode_TextureCoordinatesTransformMode___invert__(PyObject *);}
static PyObject *slot_QSGImageNode_TextureCoordinatesTransformMode___invert__(PyObject *sipSelf)
{
     ::QSGImageNode::TextureCoordinatesTransformMode *sipCpp = reinterpret_cast< ::QSGImageNode::TextureCoordinatesTransformMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGImageNode_TextureCoordinatesTransformMode));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QSGImageNode::TextureCoordinatesTransformMode*sipRes;

            sipRes = new  ::QSGImageNode::TextureCoordinatesTransformMode(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QSGImageNode_TextureCoordinatesTransformMode,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QSGImageNode_TextureCoordinatesTransformMode___int__(PyObject *);}
static PyObject *slot_QSGImageNode_TextureCoordinatesTransformMode___int__(PyObject *sipSelf)
{
     ::QSGImageNode::TextureCoordinatesTransformMode *sipCpp = reinterpret_cast< ::QSGImageNode::TextureCoordinatesTransformMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSGImageNode_TextureCoordinatesTransformMode));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGImageNode_TextureCoordinatesTransformMode(void *, int);}
static void release_QSGImageNode_TextureCoordinatesTransformMode(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSGImageNode::TextureCoordinatesTransformMode *>(sipCppV);
}


extern "C" {static void assign_QSGImageNode_TextureCoordinatesTransformMode(void *, SIP_SSIZE_T, void *);}
static void assign_QSGImageNode_TextureCoordinatesTransformMode(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QSGImageNode::TextureCoordinatesTransformMode *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QSGImageNode::TextureCoordinatesTransformMode *>(sipSrc);
}


extern "C" {static void *array_QSGImageNode_TextureCoordinatesTransformMode(SIP_SSIZE_T);}
static void *array_QSGImageNode_TextureCoordinatesTransformMode(SIP_SSIZE_T sipNrElem)
{
    return new  ::QSGImageNode::TextureCoordinatesTransformMode[sipNrElem];
}


extern "C" {static void *copy_QSGImageNode_TextureCoordinatesTransformMode(const void *, SIP_SSIZE_T);}
static void *copy_QSGImageNode_TextureCoordinatesTransformMode(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QSGImageNode::TextureCoordinatesTransformMode(reinterpret_cast<const  ::QSGImageNode::TextureCoordinatesTransformMode *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSGImageNode_TextureCoordinatesTransformMode(sipSimpleWrapper *);}
static void dealloc_QSGImageNode_TextureCoordinatesTransformMode(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGImageNode_TextureCoordinatesTransformMode(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QSGImageNode_TextureCoordinatesTransformMode(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGImageNode_TextureCoordinatesTransformMode(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QSGImageNode::TextureCoordinatesTransformMode *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QSGImageNode::TextureCoordinatesTransformMode();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QSGImageNode::TextureCoordinatesTransformMode(a0);

            return sipCpp;
        }
    }

    {
        const  ::QSGImageNode::TextureCoordinatesTransformMode* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QSGImageNode_TextureCoordinatesTransformMode, &a0, &a0State))
        {
            sipCpp = new  ::QSGImageNode::TextureCoordinatesTransformMode(*a0);
            sipReleaseType(const_cast< ::QSGImageNode::TextureCoordinatesTransformMode *>(a0),sipType_QSGImageNode_TextureCoordinatesTransformMode,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QSGImageNode_TextureCoordinatesTransformMode(PyObject *, void **, int *, PyObject *);}
static int convertTo_QSGImageNode_TextureCoordinatesTransformMode(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QSGImageNode::TextureCoordinatesTransformMode **sipCppPtr = reinterpret_cast< ::QSGImageNode::TextureCoordinatesTransformMode **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QSGImageNode::TextureCoordinatesTransformMode is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QSGImageNode_TextureCoordinatesTransformFlag)) ||
            sipCanConvertToType(sipPy, sipType_QSGImageNode_TextureCoordinatesTransformMode, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QSGImageNode_TextureCoordinatesTransformFlag)))
{
    *sipCppPtr = new QSGImageNode::TextureCoordinatesTransformMode(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QSGImageNode::TextureCoordinatesTransformMode *>(sipConvertToType(sipPy, sipType_QSGImageNode_TextureCoordinatesTransformMode, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 17814 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QSGImageNode_TextureCoordinatesTransformMode[] = {
    {(void *)slot_QSGImageNode_TextureCoordinatesTransformMode___hash__, hash_slot},
    {(void *)slot_QSGImageNode_TextureCoordinatesTransformMode___bool__, bool_slot},
    {(void *)slot_QSGImageNode_TextureCoordinatesTransformMode___ne__, ne_slot},
    {(void *)slot_QSGImageNode_TextureCoordinatesTransformMode___eq__, eq_slot},
    {(void *)slot_QSGImageNode_TextureCoordinatesTransformMode___ixor__, ixor_slot},
    {(void *)slot_QSGImageNode_TextureCoordinatesTransformMode___xor__, xor_slot},
    {(void *)slot_QSGImageNode_TextureCoordinatesTransformMode___ior__, ior_slot},
    {(void *)slot_QSGImageNode_TextureCoordinatesTransformMode___or__, or_slot},
    {(void *)slot_QSGImageNode_TextureCoordinatesTransformMode___iand__, iand_slot},
    {(void *)slot_QSGImageNode_TextureCoordinatesTransformMode___and__, and_slot},
    {(void *)slot_QSGImageNode_TextureCoordinatesTransformMode___invert__, invert_slot},
    {(void *)slot_QSGImageNode_TextureCoordinatesTransformMode___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QSGImageNode_TextureCoordinatesTransformMode, "\1QSGImageNode.TextureCoordinatesTransformMode()\n"
"QSGImageNode.TextureCoordinatesTransformMode(Union[QSGImageNode.TextureCoordinatesTransformMode, QSGImageNode.TextureCoordinatesTransformFlag])\n"
"QSGImageNode.TextureCoordinatesTransformMode(QSGImageNode.TextureCoordinatesTransformMode)");


static pyqt5ClassPluginDef plugin_QSGImageNode_TextureCoordinatesTransformMode = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGImageNode_TextureCoordinatesTransformMode = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGImageNode__TextureCoordinatesTransformMode,
        {SIP_NULLPTR},
        &plugin_QSGImageNode_TextureCoordinatesTransformMode
    },
    {
        sipNameNr_TextureCoordinatesTransformMode,
        {52, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSGImageNode_TextureCoordinatesTransformMode,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QSGImageNode_TextureCoordinatesTransformMode,
    init_type_QSGImageNode_TextureCoordinatesTransformMode,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGImageNode_TextureCoordinatesTransformMode,
    assign_QSGImageNode_TextureCoordinatesTransformMode,
    array_QSGImageNode_TextureCoordinatesTransformMode,
    copy_QSGImageNode_TextureCoordinatesTransformMode,
    release_QSGImageNode_TextureCoordinatesTransformMode,
    SIP_NULLPTR,
    convertTo_QSGImageNode_TextureCoordinatesTransformMode,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgimagenode.sip"
#include <qsgimagenode.h>
#line 17902 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsggeometry.sip"
#include <qsggeometry.h>
#line 17906 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgtexture.sip"
#include <qsgtexture.h>
#line 17909 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 17912 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgimagenode.sip"
#include <qsgimagenode.h>
#line 17915 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 165 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 17918 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 17921 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 17924 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 17927 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"


PyDoc_STRVAR(doc_QSGImageNode_setRect, "setRect(self, QRectF)\n"
"setRect(self, float, float, float, float)");

extern "C" {static PyObject *meth_QSGImageNode_setRect(PyObject *, PyObject *);}
static PyObject *meth_QSGImageNode_setRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QRectF* a0;
         ::QSGImageNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSGImageNode, &sipCpp, sipType_QRectF, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSGImageNode, sipName_setRect);
                return SIP_NULLPTR;
            }

            sipCpp->setRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
         ::QSGImageNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_QSGImageNode, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setRect(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGImageNode, sipName_setRect, doc_QSGImageNode_setRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGImageNode_rect, "rect(self) -> QRectF");

extern "C" {static PyObject *meth_QSGImageNode_rect(PyObject *, PyObject *);}
static PyObject *meth_QSGImageNode_rect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QSGImageNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGImageNode, &sipCpp))
        {
             ::QRectF*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSGImageNode, sipName_rect);
                return SIP_NULLPTR;
            }

            sipRes = new  ::QRectF(sipCpp->rect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGImageNode, sipName_rect, doc_QSGImageNode_rect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGImageNode_setSourceRect, "setSourceRect(self, QRectF)\n"
"setSourceRect(self, float, float, float, float)");

extern "C" {static PyObject *meth_QSGImageNode_setSourceRect(PyObject *, PyObject *);}
static PyObject *meth_QSGImageNode_setSourceRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QRectF* a0;
         ::QSGImageNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSGImageNode, &sipCpp, sipType_QRectF, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSGImageNode, sipName_setSourceRect);
                return SIP_NULLPTR;
            }

            sipCpp->setSourceRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
         ::QSGImageNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_QSGImageNode, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setSourceRect(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGImageNode, sipName_setSourceRect, doc_QSGImageNode_setSourceRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGImageNode_sourceRect, "sourceRect(self) -> QRectF");

extern "C" {static PyObject *meth_QSGImageNode_sourceRect(PyObject *, PyObject *);}
static PyObject *meth_QSGImageNode_sourceRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QSGImageNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGImageNode, &sipCpp))
        {
             ::QRectF*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSGImageNode, sipName_sourceRect);
                return SIP_NULLPTR;
            }

            sipRes = new  ::QRectF(sipCpp->sourceRect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGImageNode, sipName_sourceRect, doc_QSGImageNode_sourceRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGImageNode_setTexture, "setTexture(self, QSGTexture)");

extern "C" {static PyObject *meth_QSGImageNode_setTexture(PyObject *, PyObject *);}
static PyObject *meth_QSGImageNode_setTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QSGTexture* a0;
        PyObject *a0Wrapper;
         ::QSGImageNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QSGImageNode, &sipCpp, &a0Wrapper, sipType_QSGTexture, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSGImageNode, sipName_setTexture);
                return SIP_NULLPTR;
            }

#line 41 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuick/qsgimagenode.sip"
        sipCpp->setTexture(a0);
        
        if (sipCpp->ownsTexture())
            sipTransferTo(a0Wrapper, sipSelf);
#line 18133 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuick/sipQtQuickpart0.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGImageNode, sipName_setTexture, doc_QSGImageNode_setTexture);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGImageNode_texture, "texture(self) -> QSGTexture");

extern "C" {static PyObject *meth_QSGImageNode_texture(PyObject *, PyObject *);}
static PyObject *meth_QSGImageNode_texture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QSGImageNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGImageNode, &sipCpp))
        {
             ::QSGTexture*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSGImageNode, sipName_texture);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->texture();

            return sipConvertFromType(sipRes,sipType_QSGTexture,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGImageNode, sipName_texture, doc_QSGImageNode_texture);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGImageNode_setFiltering, "setFiltering(self, QSGTexture.Filtering)");

extern "C" {static PyObject *meth_QSGImageNode_setFiltering(PyObject *, PyObject *);}
static PyObject *meth_QSGImageNode_setFiltering(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QSGTexture::Filtering a0;
         ::QSGImageNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSGImageNode, &sipCpp, sipType_QSGTexture_Filtering, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSGImageNode, sipName_setFiltering);
                return SIP_NULLPTR;
            }

            sipCpp->setFiltering(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGImageNode, sipName_setFiltering, doc_QSGImageNode_setFiltering);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGImageNode_filtering, "filtering(self) -> QSGTexture.Filtering");

extern "C" {static PyObject *meth_QSGImageNode_filtering(PyObject *, PyObject *);}
static PyObject *meth_QSGImageNode_filtering(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QSGImageNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGImageNode, &sipCpp))
        {
             ::QSGTexture::Filtering sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSGImageNode, sipName_filtering);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->filtering();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSGTexture_Filtering);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGImageNode, sipName_filtering, doc_QSGImageNode_filtering);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGImageNode_setMipmapFiltering, "setMipmapFiltering(self, QSGTexture.Filtering)");

extern "C" {static PyObject *meth_QSGImageNode_setMipmapFiltering(PyObject *, PyObject *);}
static PyObject *meth_QSGImageNode_setMipmapFiltering(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QSGTexture::Filtering a0;
         ::QSGImageNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSGImageNode, &sipCpp, sipType_QSGTexture_Filtering, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSGImageNode, sipName_setMipmapFiltering);
                return SIP_NULLPTR;
            }

            sipCpp->setMipmapFiltering(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGImageNode, sipName_setMipmapFiltering, doc_QSGImageNode_setMipmapFiltering);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGImageNode_mipmapFiltering, "mipmapFiltering(self) -> QSGTexture.Filtering");

extern "C" {static PyObject *meth_QSGImageNode_mipmapFiltering(PyObject *, PyObject *);}
static PyObject *meth_QSGImageNode_mipmapFiltering(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QSGImageNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGImageNode, &sipCpp))
        {
             ::QSGTexture::Filtering sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSGImageNode, sipName_mipmapFiltering);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->mipmapFiltering();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSGTexture_Filtering);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGImageNode, sipName_mipmapFiltering, doc_QSGImageNode_mipmapFiltering);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGImageNode_setTextureCoordinatesTransform, "setTextureCoordinatesTransform(self, Union[QSGImageNode.TextureCoordinatesTransformMode, QSGImageNode.TextureCoordinatesTransformFlag])");

extern "C" {static PyObject *meth_QSGImageNode_setTextureCoordinatesTransform(PyObject *, PyObject *);}
static PyObject *meth_QSGImageNode_setTextureCoordinatesTransform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QSGImageNode::TextureCoordinatesTransformMode* a0;
        int a0State = 0;
         ::QSGImageNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSGImageNode, &sipCpp, sipType_QSGImageNode_TextureCoordinatesTransformMode, &a0, &a0State))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSGImageNode, sipName_setTextureCoordinatesTransform);
                return SIP_NULLPTR;
            }

            sipCpp->setTextureCoordinatesTransform(*a0);
            sipReleaseType(a0,sipType_QSGImageNode_TextureCoordinatesTransformMode,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGImageNode, sipName_setTextureCoordinatesTransform, doc_QSGImageNode_setTextureCoordinatesTransform);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGImageNode_textureCoordinatesTransform, "textureCoordinatesTransform(self) -> QSGImageNode.TextureCoordinatesTransformMode");

extern "C" {static PyObject *meth_QSGImageNode_textureCoordinatesTransform(PyObject *, PyObject *);}
static PyObject *meth_QSGImageNode_textureCoordinatesTransform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QSGImageNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGImageNode, &sipCpp))
        {
             ::QSGImageNode::TextureCoordinatesTransformMode*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSGImageNode, sipName_textureCoordinatesTransform);
                return SIP_NULLPTR;
            }

            sipRes = new  ::QSGImageNode::TextureCoordinatesTransformMode(sipCpp->textureCoordinatesTransform());

            return sipConvertFromNewType(sipRes,sipType_QSGImageNode_TextureCoordinatesTransformMode,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGImageNode, sipName_textureCoordinatesTransform, doc_QSGImageNode_textureCoordinatesTransform);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGImageNode_setOwnsTexture, "setOwnsTexture(self, bool)");

extern "C" {static PyObject *meth_QSGImageNode_setOwnsTexture(PyObject *, PyObject *);}
static PyObject *meth_QSGImageNode_setOwnsTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        bool a0;
         ::QSGImageNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QSGImageNode, &sipCpp, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSGImageNode, sipName_setOwnsTexture);
                return SIP_NULLPTR;
            }

            sipCpp->setOwnsTexture(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGImageNode, sipName_setOwnsTexture, doc_QSGImageNode_setOwnsTexture);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGImageNode_ownsTexture, "ownsTexture(self) -> bool");

extern "C" {static PyObject *meth_QSGImageNode_ownsTexture(PyObject *, PyObject *);}
static PyObject *meth_QSGImageNode_ownsTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QSGImageNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGImageNode, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSGImageNode, sipName_ownsTexture);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->ownsTexture();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGImageNode, sipName_ownsTexture, doc_QSGImageNode_ownsTexture);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSGImageNode_rebuildGeometry, "rebuildGeometry(QSGGeometry, QSGTexture, QRectF, QRectF, Union[QSGImageNode.TextureCoordinatesTransformMode, QSGImageNode.TextureCoordinatesTransformFlag])");

extern "C" {static PyObject *meth_QSGImageNode_rebuildGeometry(PyObject *, PyObject *);}
static PyObject *meth_QSGImageNode_rebuildGeometry(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSGGeometry* a0;
         ::QSGTexture* a1;
        const  ::QRectF* a2;
         ::QRectF* a3;
         ::QSGImageNode::TextureCoordinatesTransformMode* a4;
        int a4State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J8J9J9J1", sipType_QSGGeometry, &a0, sipType_QSGTexture, &a1, sipType_QRectF, &a2, sipType_QRectF, &a3, sipType_QSGImageNode_TextureCoordinatesTransformMode, &a4, &a4State))
        {
             ::QSGImageNode::rebuildGeometry(a0,a1,*a2,*a3,*a4);
            sipReleaseType(a4,sipType_QSGImageNode_TextureCoordinatesTransformMode,a4State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGImageNode, sipName_rebuildGeometry, doc_QSGImageNode_rebuildGeometry);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSGImageNode(void *, const sipTypeDef *);}
static void *cast_QSGImageNode(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSGImageNode *sipCpp = reinterpret_cast< ::QSGImageNode *>(sipCppV);

    if (targetType == sipType_QSGGeometryNode)
        return static_cast< ::QSGGeometryNode *>(sipCpp);

    if (targetType == sipType_QSGBasicGeometryNode)
        return static_cast< ::QSGBasicGeometryNode *>(sipCpp);

    if (targetType == sipType_QSGNode)
        return static_cast< ::QSGNode *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGImageNode(void *, int);}
static void release_QSGImageNode(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSGImageNode *>(sipCppV);
}


extern "C" {static void dealloc_QSGImageNode(sipSimpleWrapper *);}
static void dealloc_QSGImageNode(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSGImageNode(sipGetAddress(sipSelf), 0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSGImageNode[] = {{51, 255, 1}};


static PyMethodDef methods_QSGImageNode[] = {
    {SIP_MLNAME_CAST(sipName_filtering), meth_QSGImageNode_filtering, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGImageNode_filtering)},
    {SIP_MLNAME_CAST(sipName_mipmapFiltering), meth_QSGImageNode_mipmapFiltering, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGImageNode_mipmapFiltering)},
    {SIP_MLNAME_CAST(sipName_ownsTexture), meth_QSGImageNode_ownsTexture, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGImageNode_ownsTexture)},
    {SIP_MLNAME_CAST(sipName_rebuildGeometry), meth_QSGImageNode_rebuildGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGImageNode_rebuildGeometry)},
    {SIP_MLNAME_CAST(sipName_rect), meth_QSGImageNode_rect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGImageNode_rect)},
    {SIP_MLNAME_CAST(sipName_setFiltering), meth_QSGImageNode_setFiltering, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGImageNode_setFiltering)},
    {SIP_MLNAME_CAST(sipName_setMipmapFiltering), meth_QSGImageNode_setMipmapFiltering, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGImageNode_setMipmapFiltering)},
    {SIP_MLNAME_CAST(sipName_setOwnsTexture), meth_QSGImageNode_setOwnsTexture, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGImageNode_setOwnsTexture)},
    {SIP_MLNAME_CAST(sipName_setRect), meth_QSGImageNode_setRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGImageNode_setRect)},
    {SIP_MLNAME_CAST(sipName_setSourceRect), meth_QSGImageNode_setSourceRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGImageNode_setSourceRect)},
    {SIP_MLNAME_CAST(sipName_setTexture), meth_QSGImageNode_setTexture, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGImageNode_setTexture)},
    {SIP_MLNAME_CAST(sipName_setTextureCoordinatesTransform), meth_QSGImageNode_setTextureCoordinatesTransform, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGImageNode_setTextureCoordinatesTransform)},
    {SIP_MLNAME_CAST(sipName_sourceRect), meth_QSGImageNode_sourceRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGImageNode_sourceRect)},
    {SIP_MLNAME_CAST(sipName_texture), meth_QSGImageNode_texture, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGImageNode_texture)},
    {SIP_MLNAME_CAST(sipName_textureCoordinatesTransform), meth_QSGImageNode_textureCoordinatesTransform, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGImageNode_textureCoordinatesTransform)}
};

static sipEnumMemberDef enummembers_QSGImageNode[] = {
    {sipName_MirrorHorizontally, static_cast<int>( ::QSGImageNode::MirrorHorizontally), 53},
    {sipName_MirrorVertically, static_cast<int>( ::QSGImageNode::MirrorVertically), 53},
    {sipName_NoTransform, static_cast<int>( ::QSGImageNode::NoTransform), 53},
};


static pyqt5ClassPluginDef plugin_QSGImageNode = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuick_QSGImageNode = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSGImageNode,
        {SIP_NULLPTR},
        &plugin_QSGImageNode
    },
    {
        sipNameNr_QSGImageNode,
        {0, 0, 1},
        15, methods_QSGImageNode,
        3, enummembers_QSGImageNode,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_QSGImageNode,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSGImageNode,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSGImageNode,
    cast_QSGImageNode,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
